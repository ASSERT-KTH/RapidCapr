{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    StringBuilder builder = new StringBuilder();\n\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    if (line.isEmpty()) {\n        token = next();\n    }\n\n    boolean startStarSkipped = false;\n\n    // loop through the rest of the JS doc block\n    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n        switch (token) {\n            case STAR:\n                if (!startStarSkipped) {\n                    startStarSkipped = true;\n                    token = next();\n                    continue;\n                }\n\n                builder.append('*');\n                token = next();\n                continue;\n\n            case EOL:\n                if (!startStarSkipped) {\n                    startStarSkipped = true;\n                    token = next();\n                    continue;\n                }\n\n                builder.append('\\n');\n                token = next();\n                continue;\n\n            case WHITESPACE:\n                if (!startStarSkipped) {\n                    startStarSkipped = true;\n                    token = next();\n                    continue;\n                }\n\n                builder.append(' ');\n                token = next();\n                continue;\n\n            default:\n                if (!startStarSkipped) {\n                    startStarSkipped = true;\n                    token = next();\n                    continue;\n                }\n\n                builder.append(toString(token));\n                token = next();\n                continue;\n        }\n    }\n\n    String multilineText = builder.toString().trim();\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    ExtractionInfo info = new ExtractionInfo(multilineText, token);\n    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    return info;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..8250e911 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,80 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n+    StringBuilder builder = new StringBuilder();\n+\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+        line = line.trim();\n     }\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+    if (line.isEmpty()) {\n+        token = next();\n+    }\n \n-              // All tokens must be separated by a space.\n+    boolean startStarSkipped = false;\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+    // loop through the rest of the JS doc block\n+    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n+        switch (token) {\n+            case STAR:\n+                if (!startStarSkipped) {\n+                    startStarSkipped = true;\n+                    token = next();\n+                    continue;\n+                }\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+                builder.append('*');\n+                token = next();\n+                continue;\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+            case EOL:\n+                if (!startStarSkipped) {\n+                    startStarSkipped = true;\n+                    token = next();\n+                    continue;\n+                }\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+                builder.append('\\n');\n+                token = next();\n+                continue;\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+            case WHITESPACE:\n+                if (!startStarSkipped) {\n+                    startStarSkipped = true;\n+                    token = next();\n+                    continue;\n+                }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+                builder.append(' ');\n+                token = next();\n+                continue;\n \n-          line = stream.getRemainingJSDocLine();\n+            default:\n+                if (!startStarSkipped) {\n+                    startStarSkipped = true;\n+                    token = next();\n+                    continue;\n+                }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+                builder.append(toString(token));\n+                token = next();\n+                continue;\n+        }\n+    }\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+    String multilineText = builder.toString().trim();\n+    int endLineno = stream.getLineno();\n+    int endCharno = stream.getCharno();\n+    ExtractionInfo info = new ExtractionInfo(multilineText, token);\n+    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+    return info;\n+}\n \n \n   /**",
    "result_reason": "error: an enum switch case label must be the unqualified name of an enumeration constant",
    "test_result": "ERROR"
}