{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    // Nodes that define global names\n    if (NodeUtil.isNameDeclaration(n)) {\n      Node names = n.getFirstChild();\n      for (Node name : names.children()) {\n        recordSetName(name);\n      }\n    } else if (n.isFunction()) {\n      // Named function expression\n      Node name = n.getFirstChild();\n      if (name.isName()) {\n        recordSetName(name);\n      }\n    } else if (n.isClass()) {\n      // Class declarations\n      Node name = NodeUtil.getClassNameNode(n);\n      if (name != null) {\n        recordSetName(name);\n      }\n    }\n  } else if (n.isAssign()) {\n    // Assignments, including to prototype properties\n    Node target = n.getFirstChild();\n    if (target.isGetProp() && NodeUtil.isPrototypeProperty(target)) {\n      Node object = target.getFirstChild();\n      Node property = target.getLastChild();\n      // Skip if the prototype property is not named\n      if (property.isString()) {\n        recordSetPrototype(object, property.getString(), n);\n      }\n    } else {\n      recordSet(target, n);\n    }\n  } else if (n.isCall()) {\n    // Call sites that only affect class definitions\n    Node target = n.getFirstChild();\n    if (target.isGetProp()) {\n      Node object = target.getFirstChild();\n      Node property = target.getLastChild();\n      // Check if the call site is on a named class\n      if (object.isName()) {\n        JsName jsName = getName(object.getString(), false);\n        if (jsName != null && jsName.isClass()) {\n          String methodName = property.getString();\n          if (methodAffectsClassDef(methodName)) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                jsName, n, parent, target));\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..5e9e2680 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,60 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (t.inGlobalScope()) {\n+    // Nodes that define global names\n+    if (NodeUtil.isNameDeclaration(n)) {\n+      Node names = n.getFirstChild();\n+      for (Node name : names.children()) {\n+        recordSetName(name);\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+    } else if (n.isFunction()) {\n+      // Named function expression\n+      Node name = n.getFirstChild();\n+      if (name.isName()) {\n+        recordSetName(name);\n+      }\n+    } else if (n.isClass()) {\n+      // Class declarations\n+      Node name = NodeUtil.getClassNameNode(n);\n+      if (name != null) {\n+        recordSetName(name);\n+      }\n+    }\n+  } else if (n.isAssign()) {\n+    // Assignments, including to prototype properties\n+    Node target = n.getFirstChild();\n+    if (target.isGetProp() && NodeUtil.isPrototypeProperty(target)) {\n+      Node object = target.getFirstChild();\n+      Node property = target.getLastChild();\n+      // Skip if the prototype property is not named\n+      if (property.isString()) {\n+        recordSetPrototype(object, property.getString(), n);\n+      }\n+    } else {\n+      recordSet(target, n);\n+    }\n+  } else if (n.isCall()) {\n+    // Call sites that only affect class definitions\n+    Node target = n.getFirstChild();\n+    if (target.isGetProp()) {\n+      Node object = target.getFirstChild();\n+      Node property = target.getLastChild();\n+      // Check if the call site is on a named class\n+      if (object.isName()) {\n+        JsName jsName = getName(object.getString(), false);\n+        if (jsName != null && jsName.isClass()) {\n+          String methodName = property.getString();\n+          if (methodAffectsClassDef(methodName)) {\n+            refNodes.add(new ClassDefiningFunctionNode(\n+                jsName, n, parent, target));\n           }\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}