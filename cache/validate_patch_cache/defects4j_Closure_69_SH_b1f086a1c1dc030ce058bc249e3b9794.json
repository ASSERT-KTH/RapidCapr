{
    "patch": "if (childType.isFunctionType()) {\n  FunctionType functionType = childType.toMaybeFunctionType();\n  boolean isExtern = false;\n  \n  JSDocInfo functionJSDocInfo = n.getFirstChild().getJSDocInfo();\n  if (functionJSDocInfo != null && compiler.getInput(functionJSDocInfo.getSourceFileName()).isExtern()) {\n    isExtern = true;\n  }\n\n  // Functions with explicit 'this' types must be called in a GETPROP\n  // or GETELEM.\n  if (functionType.getTypeOfThis() != null \n      && !NodeUtil.isGet(functionType.getTypeOfThis().getReferenceName(), n.getParent())){\n    report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n    ensureTyped(t, n);\n    return;\n  }\n\n  if (functionType.isConstructor() &&\n      !functionType.isNativeObjectType() &&\n      (functionType.getReturnType().isUnknownType() ||\n      functionType.getReturnType().isVoidType() ||\n      !isExtern)) {\n    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  }\n\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..26333f19 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,35 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType.isFunctionType()) {\n+  FunctionType functionType = childType.toMaybeFunctionType();\n+  boolean isExtern = false;\n+  \n+  JSDocInfo functionJSDocInfo = n.getFirstChild().getJSDocInfo();\n+  if (functionJSDocInfo != null && compiler.getInput(functionJSDocInfo.getSourceFileName()).isExtern()) {\n+    isExtern = true;\n+  }\n+\n+  // Functions with explicit 'this' types must be called in a GETPROP\n+  // or GETELEM.\n+  if (functionType.getTypeOfThis() != null \n+      && !NodeUtil.isGet(functionType.getTypeOfThis().getReferenceName(), n.getParent())){\n+    report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  if (functionType.isConstructor() &&\n+      !functionType.isNativeObjectType() &&\n+      (functionType.getReturnType().isUnknownType() ||\n+      functionType.getReturnType().isVoidType() ||\n+      !isExtern)) {\n+    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  }\n+\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}