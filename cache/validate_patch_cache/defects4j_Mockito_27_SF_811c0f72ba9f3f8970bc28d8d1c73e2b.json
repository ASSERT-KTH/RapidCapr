{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        Object proxy = mockitoSpy(mock, newFilter);\n        setMockHandler(proxy, newMockHandler);\n    }\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate static <T> T mockitoSpy(T obj, MethodInterceptorFilter filter) {\n    Enhancer enhancer = new Enhancer();\n    enhancer.setSuperclass(obj.getClass());\n    enhancer.setCallback(filter);\n    return (T) enhancer.create();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a832a5d69 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        Object proxy = mockitoSpy(mock, newFilter);\n+        setMockHandler(proxy, newMockHandler);\n+    }\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private static <T> T mockitoSpy(T obj, MethodInterceptorFilter filter) {\n+    Enhancer enhancer = new Enhancer();\n+    enhancer.setSuperclass(obj.getClass());\n+    enhancer.setCallback(filter);\n+    return (T) enhancer.create();\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}