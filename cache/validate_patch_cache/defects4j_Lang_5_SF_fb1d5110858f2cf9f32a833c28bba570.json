{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final int len = str.length();\n    int countryCodeIndex = str.lastIndexOf('_');\n    int languageCodeIndex;\n    if (countryCodeIndex == -1) {\n        if (len == 2 || len == 3) {\n            return new Locale(str);\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    } else {\n        languageCodeIndex = str.lastIndexOf('_', countryCodeIndex - 1);\n\n        if (languageCodeIndex != 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final String language = str.substring(0, 2);\n        final String countryCode = str.substring(languageCodeIndex + 1, countryCodeIndex);\n\n        if (!isValidCode(language) || !isValidCode(countryCode)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        String variant = \"\";\n        if (countryCodeIndex < len - 1) {\n            variant = str.substring(countryCodeIndex + 1);\n            if (!isValidCode(variant)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n\n        return new Locale(language, countryCode, variant);\n    }\n}\n\nprivate static boolean isValidCode(final String code) {\n    for (int i = 0; i < code.length(); i++) {\n        final char ch = code.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..13dac922 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,55 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+    int countryCodeIndex = str.lastIndexOf('_');\n+    int languageCodeIndex;\n+    if (countryCodeIndex == -1) {\n+        if (len == 2 || len == 3) {\n+            return new Locale(str);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+    } else {\n+        languageCodeIndex = str.lastIndexOf('_', countryCodeIndex - 1);\n+\n+        if (languageCodeIndex != 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n+\n+        final String language = str.substring(0, 2);\n+        final String countryCode = str.substring(languageCodeIndex + 1, countryCodeIndex);\n+\n+        if (!isValidCode(language) || !isValidCode(countryCode)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        String variant = \"\";\n+        if (countryCodeIndex < len - 1) {\n+            variant = str.substring(countryCodeIndex + 1);\n+            if (!isValidCode(variant)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n+\n+        return new Locale(language, countryCode, variant);\n     }\n+}\n+\n+private static boolean isValidCode(final String code) {\n+    for (int i = 0; i < code.length(); i++) {\n+        final char ch = code.charAt(i);\n+        if (!Character.isLetterOrDigit(ch)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}