{
    "patch": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  /*\n   * This is the case where:\n   *\n   * 1. Parent is null implies that we are transferring control to the end of\n   * the script.\n   *\n   * 2. Parent is a function implies that we are transferring control back to\n   * the caller of the function.\n   *\n   * 3. If the node is a return statement, we should also transfer control\n   * back to the caller of the function.\n   *\n   * 4. If the node is root then we have reached the end of what we have been\n   * asked to traverse.\n   *\n   * In all cases we should transfer control to a \"symbolic return\" node.\n   * This will make life easier for DFAs.\n   */\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  // If we are just before a IF/WHILE/DO/FOR:\n  switch (parent.getType()) {\n    // The follow() of any of the path from IF would be what follows IF.\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      // After the body of a CASE, the control goes to the body of the next\n      // case, without having to go to the case condition.\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n    case Token.TRY:\n      // If we are coming out of the TRY block...\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n          return computeFallThrough(parent.getLastChild());\n        } else { // and have no FINALLY.\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // CATCH block.\n      } else if (NodeUtil.getCatchBlock(parent) == node) {\n        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // If we are coming out of the FINALLY block...\n      } else if (parent.getLastChild() == node) {\n        if (cfa != null) {\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            if (finallyNode != node) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n\n  // Now that we are done with the special cases follow should be its\n  // immediate sibling, unless its sibling is a function\n  Node nextSibling = node.getNext();\n\n  // Skip function declarations because control doesn't get pass into it.\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else if (parent.isScript() || parent.isBlock()) {\n    // If there are no more siblings, control is transferred up the AST.\n    // If we are at the end of a script or block, return a new symbolic\n    // return node that is outside the script/block node.\n    int type = Token.RETURN;\n    if (parent.isGeneratorBlock() || parent.isAsyncFunctionBlock()) {\n      type = Token.YIELD;\n    }\n    Node ret = new Node(type, node.getLineno(), node.getCharno());\n    Node lastChild = parent.getLastChild();\n    parent.addChildAfter(ret, lastChild);\n    fixMissingReturn(fromNode, ret);\n    return ret;\n  } else {\n    // Otherwise, return the follow node of the parent node.\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}\n\nprivate static void fixMissingReturn(Node fromNode, Node node) {\n  Node root = NodeUtil.getEnclosingScript(node);\n  Node fnNode = NodeUtil.getEnclosingFunction(node);\n  if (fnNode != null) {\n    checkReturns(fnNode, node);\n    while ((fnNode = fnNode.getParent()) != null && fnNode != root) {\n      checkReturns(fnNode, null);\n    }\n  }\n  checkReturns(root, node);\n\n  // Make sure there is at least one return statement.\n  if (!checkReturns(node, null)) {\n    Node defaultRet =\n        IR.returnNode(new Node(Token.NUMBER, 0.0));\n    JSTypeExpression returnType = NodeUtil.getJSTypeExpression(fnNode);\n    if (returnType != null && returnType.getRoot().getType() != Token.ANY_TYPE) {\n      defaultRet.setJSType(returnType.evaluate(cx));\n    }\n    node.addChildToFront(defaultRet);\n    defaultRet.srcref(node.getSourceFileName(), node.getLineno(), node.getCharno());\n  }\n}\n\nprivate static boolean checkReturns(Node fn, Node excludeReturn) {\n  if (fn.getLastChild().isBlock()) {\n    Node cur = fn.getLastChild().getFirstChild();\n    while (cur != null) {\n      if (NodeUtil.isIterationStatement(cur)) {\n        if (!checkReturns(cur, excludeReturn)) {\n          return false;\n        }\n      } else if (cur.isReturn()) {\n        if (cur != excludeReturn) {\n          return true;\n        }\n      }\n      cur = cur.getNext();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..f18e57a0 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,104 +689,162 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n-    Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n-      return null;\n-    }\n+private static Node computeFollowNode(\n+    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n+  /*\n+   * This is the case where:\n+   *\n+   * 1. Parent is null implies that we are transferring control to the end of\n+   * the script.\n+   *\n+   * 2. Parent is a function implies that we are transferring control back to\n+   * the caller of the function.\n+   *\n+   * 3. If the node is a return statement, we should also transfer control\n+   * back to the caller of the function.\n+   *\n+   * 4. If the node is root then we have reached the end of what we have been\n+   * asked to traverse.\n+   *\n+   * In all cases we should transfer control to a \"symbolic return\" node.\n+   * This will make life easier for DFAs.\n+   */\n+  Node parent = node.getParent();\n+  if (parent == null || parent.isFunction() ||\n+      (cfa != null && node == cfa.root)) {\n+    return null;\n+  }\n \n-    // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n-          } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n-          }\n+  // If we are just before a IF/WHILE/DO/FOR:\n+  switch (parent.getType()) {\n+    // The follow() of any of the path from IF would be what follows IF.\n+    case Token.IF:\n+      return computeFollowNode(fromNode, parent, cfa);\n+    case Token.CASE:\n+    case Token.DEFAULT_CASE:\n+      // After the body of a CASE, the control goes to the body of the next\n+      // case, without having to go to the case condition.\n+      if (parent.getNext() != null) {\n+        if (parent.getNext().isCase()) {\n+          return parent.getNext().getFirstChild().getNext();\n+        } else if (parent.getNext().isDefaultCase()) {\n+          return parent.getNext().getFirstChild();\n         } else {\n+          Preconditions.checkState(false, \"Not reachable\");\n+        }\n+      } else {\n+        return computeFollowNode(fromNode, parent, cfa);\n+      }\n+      break;\n+    case Token.FOR:\n+      if (NodeUtil.isForIn(parent)) {\n+        return parent;\n+      } else {\n+        return parent.getFirstChild().getNext().getNext();\n+      }\n+    case Token.WHILE:\n+    case Token.DO:\n+      return parent;\n+    case Token.TRY:\n+      // If we are coming out of the TRY block...\n+      if (parent.getFirstChild() == node) {\n+        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+          return computeFallThrough(parent.getLastChild());\n+        } else { // and have no FINALLY.\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n-        break;\n-      case Token.FOR:\n-        if (NodeUtil.isForIn(parent)) {\n-          return parent;\n+        // CATCH block.\n+      } else if (NodeUtil.getCatchBlock(parent) == node) {\n+        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+          return computeFallThrough(node.getNext());\n         } else {\n-          return parent.getFirstChild().getNext().getNext();\n+          return computeFollowNode(fromNode, parent, cfa);\n         }\n-      case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n-          } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n-          }\n         // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+      } else if (parent.getLastChild() == node) {\n+        if (cfa != null) {\n+          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+            if (finallyNode != node) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n         }\n-    }\n+        return computeFollowNode(fromNode, parent, cfa);\n+      }\n+  }\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n+  // Now that we are done with the special cases follow should be its\n+  // immediate sibling, unless its sibling is a function\n+  Node nextSibling = node.getNext();\n+\n+  // Skip function declarations because control doesn't get pass into it.\n+  while (nextSibling != null && nextSibling.isFunction()) {\n+    nextSibling = nextSibling.getNext();\n+  }\n \n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n+  if (nextSibling != null) {\n+    return computeFallThrough(nextSibling);\n+  } else if (parent.isScript() || parent.isBlock()) {\n+    // If there are no more siblings, control is transferred up the AST.\n+    // If we are at the end of a script or block, return a new symbolic\n+    // return node that is outside the script/block node.\n+    int type = Token.RETURN;\n+    if (parent.isGeneratorBlock() || parent.isAsyncFunctionBlock()) {\n+      type = Token.YIELD;\n     }\n+    Node ret = new Node(type, node.getLineno(), node.getCharno());\n+    Node lastChild = parent.getLastChild();\n+    parent.addChildAfter(ret, lastChild);\n+    fixMissingReturn(fromNode, ret);\n+    return ret;\n+  } else {\n+    // Otherwise, return the follow node of the parent node.\n+    return computeFollowNode(fromNode, parent, cfa);\n+  }\n+}\n \n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n-    } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+private static void fixMissingReturn(Node fromNode, Node node) {\n+  Node root = NodeUtil.getEnclosingScript(node);\n+  Node fnNode = NodeUtil.getEnclosingFunction(node);\n+  if (fnNode != null) {\n+    checkReturns(fnNode, node);\n+    while ((fnNode = fnNode.getParent()) != null && fnNode != root) {\n+      checkReturns(fnNode, null);\n+    }\n+  }\n+  checkReturns(root, node);\n+\n+  // Make sure there is at least one return statement.\n+  if (!checkReturns(node, null)) {\n+    Node defaultRet =\n+        IR.returnNode(new Node(Token.NUMBER, 0.0));\n+    JSTypeExpression returnType = NodeUtil.getJSTypeExpression(fnNode);\n+    if (returnType != null && returnType.getRoot().getType() != Token.ANY_TYPE) {\n+      defaultRet.setJSType(returnType.evaluate(cx));\n+    }\n+    node.addChildToFront(defaultRet);\n+    defaultRet.srcref(node.getSourceFileName(), node.getLineno(), node.getCharno());\n+  }\n+}\n+\n+private static boolean checkReturns(Node fn, Node excludeReturn) {\n+  if (fn.getLastChild().isBlock()) {\n+    Node cur = fn.getLastChild().getFirstChild();\n+    while (cur != null) {\n+      if (NodeUtil.isIterationStatement(cur)) {\n+        if (!checkReturns(cur, excludeReturn)) {\n+          return false;\n+        }\n+      } else if (cur.isReturn()) {\n+        if (cur != excludeReturn) {\n+          return true;\n+        }\n+      }\n+      cur = cur.getNext();\n     }\n   }\n+  return false;\n+}\n \n   /**\n    * Computes the destination node of n when we want to fallthrough into the",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}