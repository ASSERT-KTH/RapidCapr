{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean prevEscapeChar = false;\n    \n    int length = value.length();\n    for (int i = 0; i < length; ++i) {\n        char c = value.charAt(i);\n        switch (c) {\n            case '\\\\':\n                // if it is not the first character and the previous character is not an escape character, escape the character\n                if (prevEscapeChar || i == 0) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n                prevEscapeChar = !prevEscapeChar;\n                break;\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '(':\n            case ')':\n            case '|':\n            case '^':\n            case '$':\n            case '*':\n            case '+':\n            case '.':\n                // escape special regex characters if it is not preceded by an escape character\n                if (!prevEscapeChar) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n                prevEscapeChar = false;\n                break;\n            case '?':\n                // escape ? if it is not preceded by an escape character\n                if (!prevEscapeChar) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n                prevEscapeChar = false;\n                break;\n            case '\\'':\n                // Handle apostrophes\n                if (unquote && i + 1 < length && value.charAt(i + 1) == '\\'') {\n                    regex.append(\"''\");\n                    i++;\n                    break;\n                } else if (prevEscapeChar) {\n                    // Skip if ' is preceded by an escape character\n                    regex.append(c);\n                    break;\n                } else if (unquote && (i == 0 || Character.isWhitespace(value.charAt(i - 1)))) {\n                    // Skip if ' is the start of a comment\n                    int end = i + 1;\n                    boolean commentStarted = true;\n                    while (end < length && commentStarted) {\n                        char currentChar = value.charAt(end);\n                        if (currentChar == '\\n') {\n                            commentStarted = false;\n                        } else if (currentChar == '\\'') {\n                            if (end + 1 < length && value.charAt(end + 1) == '\\'') {\n                                end++;\n                            } else {\n                                commentStarted = false;\n                            }\n                        }\n                        end++;\n                    }\n                    if (commentStarted) {\n                        regex.append(c);\n                        break;\n                    }\n                }\n                regex.append(\"\\\\'\");\n                prevEscapeChar = false;\n                break;\n            default:\n                // regular character\n                if (Character.isWhitespace(c)) {\n                    // add regex whitespace pattern if current character is whitespace and the previous was not whitespace\n                    if (!wasWhite && !prevEscapeChar) {\n                        regex.append(\"\\\\s*+\");\n                    }\n                    wasWhite = true;\n                } else {\n                    // update state\n                    wasWhite = false;\n                }\n                regex.append(c);\n                prevEscapeChar = false;\n                break;\n        }\n    }\n    if (!prevEscapeChar && wasWhite) {\n        regex.append(\"\\\\s*+\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..1ccdfc9f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,106 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean prevEscapeChar = false;\n+    \n+    int length = value.length();\n+    for (int i = 0; i < length; ++i) {\n+        char c = value.charAt(i);\n+        switch (c) {\n+            case '\\\\':\n+                // if it is not the first character and the previous character is not an escape character, escape the character\n+                if (prevEscapeChar || i == 0) {\n+                    regex.append('\\\\');\n                 }\n+                regex.append(c);\n+                prevEscapeChar = !prevEscapeChar;\n                 break;\n-            case '?':\n             case '[':\n             case ']':\n-            case '(':\n-            case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n+            case '(':\n+            case ')':\n             case '|':\n-            case '*':\n-            case '+':\n             case '^':\n             case '$':\n+            case '*':\n+            case '+':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                // escape special regex characters if it is not preceded by an escape character\n+                if (!prevEscapeChar) {\n+                    regex.append('\\\\');\n+                }\n+                regex.append(c);\n+                prevEscapeChar = false;\n+                break;\n+            case '?':\n+                // escape ? if it is not preceded by an escape character\n+                if (!prevEscapeChar) {\n+                    regex.append('\\\\');\n+                }\n+                regex.append(c);\n+                prevEscapeChar = false;\n+                break;\n+            case '\\'':\n+                // Handle apostrophes\n+                if (unquote && i + 1 < length && value.charAt(i + 1) == '\\'') {\n+                    regex.append(\"''\");\n+                    i++;\n+                    break;\n+                } else if (prevEscapeChar) {\n+                    // Skip if ' is preceded by an escape character\n+                    regex.append(c);\n+                    break;\n+                } else if (unquote && (i == 0 || Character.isWhitespace(value.charAt(i - 1)))) {\n+                    // Skip if ' is the start of a comment\n+                    int end = i + 1;\n+                    boolean commentStarted = true;\n+                    while (end < length && commentStarted) {\n+                        char currentChar = value.charAt(end);\n+                        if (currentChar == '\\n') {\n+                            commentStarted = false;\n+                        } else if (currentChar == '\\'') {\n+                            if (end + 1 < length && value.charAt(end + 1) == '\\'') {\n+                                end++;\n+                            } else {\n+                                commentStarted = false;\n+                            }\n+                        }\n+                        end++;\n+                    }\n+                    if (commentStarted) {\n+                        regex.append(c);\n+                        break;\n+                    }\n+                }\n+                regex.append(\"\\\\'\");\n+                prevEscapeChar = false;\n+                break;\n+            default:\n+                // regular character\n+                if (Character.isWhitespace(c)) {\n+                    // add regex whitespace pattern if current character is whitespace and the previous was not whitespace\n+                    if (!wasWhite && !prevEscapeChar) {\n+                        regex.append(\"\\\\s*+\");\n+                    }\n+                    wasWhite = true;\n+                } else {\n+                    // update state\n+                    wasWhite = false;\n+                }\n+                regex.append(c);\n+                prevEscapeChar = false;\n+                break;\n         }\n-        return regex;\n     }\n+    if (!prevEscapeChar && wasWhite) {\n+        regex.append(\"\\\\s*+\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}