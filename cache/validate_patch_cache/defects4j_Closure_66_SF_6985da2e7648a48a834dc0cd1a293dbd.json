{
    "patch": "public static float getTypedPercent(String json) throws JSONException {\n    JSONObject jsonObject = new JSONObject(json);\n    int count = 0;\n    int typedCount = 0;\n    JSONArray students = jsonObject.getJSONArray(\"students\");\n\n    for (int i = 0; i < students.length(); i++) { \n        JSONObject student = students.getJSONObject(i);\n        String type = student.getString(\"type\");\n        if (type.equals(\"typed\")) {\n            typedCount++;\n        }\n        count++;\n    }\n\n    return ((float) typedCount / count) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..55dce9fe 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static float getTypedPercent(String json) throws JSONException {\n+    JSONObject jsonObject = new JSONObject(json);\n+    int count = 0;\n+    int typedCount = 0;\n+    JSONArray students = jsonObject.getJSONArray(\"students\");\n+\n+    for (int i = 0; i < students.length(); i++) { \n+        JSONObject student = students.getJSONObject(i);\n+        String type = student.getString(\"type\");\n+        if (type.equals(\"typed\")) {\n+            typedCount++;\n+        }\n+        count++;\n+    }\n+\n+    return ((float) typedCount / count) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}