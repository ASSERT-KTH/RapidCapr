{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // start with the longest denominator and work down\n    PeriodType[] types = type.getFieldTypes();\n    long[] values = new long[types.length];\n    if (getMillis() != 0) {\n        values = durationToPeriod(getMillis(), types);\n    } else {\n        boolean done = false;\n        for (int i = 0; i < types.length && !done; i++) {\n            if (types[i].getFieldName().equals(\"seconds\")) {\n                values[i] = getSeconds();\n                done = true;\n            } else if (types[i].getFieldName().equals(\"minutes\")) {\n                values[i] = getMinutes();\n                done = true;\n            } else if (types[i].getFieldName().equals(\"hours\")) {\n                values[i] = getHours();\n                done = true;\n            } else if (types[i].getFieldName().equals(\"days\")) {\n                int days = getDays();\n                if (types.length <= 4) {\n                    values[i] = days;\n                } else {\n                    values[i + 1] = days % 7;\n                    values[i] = days / 7;\n                }\n                done = true;\n            } else if (types[i].getFieldName().equals(\"weeks\")) {\n                values[i] = getWeeks();\n                done = true;\n            } else if (types[i].getFieldName().equals(\"months\")) {\n                values[i] = getMonths();\n                done = true;\n            } else if (types[i].getFieldName().equals(\"years\")) {\n                values[i] = getYears();\n                done = true;\n            }\n        }\n    }\n\n    Period result = new Period(0, type, ISOChronology.getInstanceUTC());\n    boolean converted = false;\n    for (int i = types.length - 1; i >= 0 && !converted; i--) {\n        DurationFieldType fieldType = types[i].getDurationType();\n        long value = values[i];\n        if (value != 0) {\n            if (fieldType == DurationFieldType.years()) {\n                result = result.withYears(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.months()) {\n                result = result.withMonths(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.weeks()) {\n                result = result.withWeeks(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.days()) {\n                result = result.withDays(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.hours()) {\n                result = result.withHours(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.minutes()) {\n                result = result.withMinutes(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.seconds()) {\n                result = result.withSeconds(FieldUtils.safeToInt(value));\n            } else if (fieldType == DurationFieldType.millis()) {\n                result = result.withMillis(FieldUtils.safeToInt(value));\n            }\n            converted = true;\n        }\n    }\n\n    return result;\n}\n\nprivate long[] durationToPeriod(long duration, PeriodType[] types) {\n    long[] values = new long[types.length];\n    for (int i = 0; i < types.length; i++) {\n        DurationFieldType fieldType = types[i].getDurationType();\n        if (fieldType == DurationFieldType.years()) {\n            values[i] = ISOChronology.getInstanceUTC().years().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().years().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.months()) {\n            values[i] = ISOChronology.getInstanceUTC().months().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().months().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.weeks()) {\n            values[i] = ISOChronology.getInstanceUTC().weeks().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().weeks().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.days()) {\n            values[i] = ISOChronology.getInstanceUTC().days().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().days().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.hours()) {\n            values[i] = ISOChronology.getInstanceUTC().hours().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().hours().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.minutes()) {\n            values[i] = ISOChronology.getInstanceUTC().minutes().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().minutes().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.seconds()) {\n            values[i] = ISOChronology.getInstanceUTC().seconds().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().seconds().add(duration, values[i]);\n        } else if (fieldType == DurationFieldType.millis()) {\n            values[i] = ISOChronology.getInstanceUTC().millis().getDifference(duration, 0);\n            duration = ISOChronology.getInstanceUTC().millis().add(duration, values[i]);\n        }\n    }\n    return values;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f5af7f56 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,109 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // start with the longest denominator and work down\n+    PeriodType[] types = type.getFieldTypes();\n+    long[] values = new long[types.length];\n+    if (getMillis() != 0) {\n+        values = durationToPeriod(getMillis(), types);\n+    } else {\n+        boolean done = false;\n+        for (int i = 0; i < types.length && !done; i++) {\n+            if (types[i].getFieldName().equals(\"seconds\")) {\n+                values[i] = getSeconds();\n+                done = true;\n+            } else if (types[i].getFieldName().equals(\"minutes\")) {\n+                values[i] = getMinutes();\n+                done = true;\n+            } else if (types[i].getFieldName().equals(\"hours\")) {\n+                values[i] = getHours();\n+                done = true;\n+            } else if (types[i].getFieldName().equals(\"days\")) {\n+                int days = getDays();\n+                if (types.length <= 4) {\n+                    values[i] = days;\n+                } else {\n+                    values[i + 1] = days % 7;\n+                    values[i] = days / 7;\n+                }\n+                done = true;\n+            } else if (types[i].getFieldName().equals(\"weeks\")) {\n+                values[i] = getWeeks();\n+                done = true;\n+            } else if (types[i].getFieldName().equals(\"months\")) {\n+                values[i] = getMonths();\n+                done = true;\n+            } else if (types[i].getFieldName().equals(\"years\")) {\n+                values[i] = getYears();\n+                done = true;\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+        }\n+    }\n+\n+    Period result = new Period(0, type, ISOChronology.getInstanceUTC());\n+    boolean converted = false;\n+    for (int i = types.length - 1; i >= 0 && !converted; i--) {\n+        DurationFieldType fieldType = types[i].getDurationType();\n+        long value = values[i];\n+        if (value != 0) {\n+            if (fieldType == DurationFieldType.years()) {\n+                result = result.withYears(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.months()) {\n+                result = result.withMonths(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.weeks()) {\n+                result = result.withWeeks(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.days()) {\n+                result = result.withDays(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.hours()) {\n+                result = result.withHours(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.minutes()) {\n+                result = result.withMinutes(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.seconds()) {\n+                result = result.withSeconds(FieldUtils.safeToInt(value));\n+            } else if (fieldType == DurationFieldType.millis()) {\n+                result = result.withMillis(FieldUtils.safeToInt(value));\n             }\n+            converted = true;\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+private long[] durationToPeriod(long duration, PeriodType[] types) {\n+    long[] values = new long[types.length];\n+    for (int i = 0; i < types.length; i++) {\n+        DurationFieldType fieldType = types[i].getDurationType();\n+        if (fieldType == DurationFieldType.years()) {\n+            values[i] = ISOChronology.getInstanceUTC().years().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().years().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.months()) {\n+            values[i] = ISOChronology.getInstanceUTC().months().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().months().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.weeks()) {\n+            values[i] = ISOChronology.getInstanceUTC().weeks().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().weeks().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.days()) {\n+            values[i] = ISOChronology.getInstanceUTC().days().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().days().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.hours()) {\n+            values[i] = ISOChronology.getInstanceUTC().hours().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().hours().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.minutes()) {\n+            values[i] = ISOChronology.getInstanceUTC().minutes().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().minutes().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.seconds()) {\n+            values[i] = ISOChronology.getInstanceUTC().seconds().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().seconds().add(duration, values[i]);\n+        } else if (fieldType == DurationFieldType.millis()) {\n+            values[i] = ISOChronology.getInstanceUTC().millis().getDifference(duration, 0);\n+            duration = ISOChronology.getInstanceUTC().millis().add(duration, values[i]);\n         }\n-        return result;\n     }\n+    return values;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}