{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if(Double.isNaN(x)){\n            return Double.NaN;\n        }\n        if(Double.isInfinite(x)){\n            return x < 0 ? 0 : 1;\n        }\n        double dev = (x - mean) / standardDeviation;\n        if (Math.abs(dev) > 40) {\n            return dev < 0 ? 0 : 1;\n        } else {\n            return 0.5 * Erf.erfc(-dev / Math.sqrt(2.0));\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..278b3f707 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,18 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        if(Double.isNaN(x)){\n+            return Double.NaN;\n+        }\n+        if(Double.isInfinite(x)){\n+            return x < 0 ? 0 : 1;\n+        }\n+        double dev = (x - mean) / standardDeviation;\n+        if (Math.abs(dev) > 40) {\n+            return dev < 0 ? 0 : 1;\n+        } else {\n+            return 0.5 * Erf.erfc(-dev / Math.sqrt(2.0));\n+        }\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}