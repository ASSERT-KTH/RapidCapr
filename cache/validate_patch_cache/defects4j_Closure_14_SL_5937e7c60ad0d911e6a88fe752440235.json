{
    "patch": "default:\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n        Node follow = computeFallThrough(nextSibling);\n        if (follow != null) {\n            return follow;\n        }\n    }\n    \n    // If there are no more siblings, control is transferred up the AST.\n    return computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..650e22f6 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,25 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+default:\n+    // Now that we are done with the special cases follow should be its\n+    // immediate sibling, unless its sibling is a function\n+    Node nextSibling = node.getNext();\n+\n+    // Skip function declarations because control doesn't get pass into it.\n+    while (nextSibling != null && nextSibling.isFunction()) {\n+      nextSibling = nextSibling.getNext();\n+    }\n+\n+    if (nextSibling != null) {\n+        Node follow = computeFallThrough(nextSibling);\n+        if (follow != null) {\n+            return follow;\n+        }\n+    }\n+    \n+    // If there are no more siblings, control is transferred up the AST.\n+    return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}