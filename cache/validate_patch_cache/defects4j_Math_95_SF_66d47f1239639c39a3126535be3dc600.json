{
    "patch": "protected double getInitialDomain(double p) {\n    double ret;\n    double d = getDenominatorDegreesOfFreedom();\n\n        if (Double.isInfinite(d)) {\n            // use mean\n            ret = 0;\n        } else {\n            ret = d / (d - 2.0);\n        }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..38efc6357 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,19 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n+protected double getInitialDomain(double p) {\n+    double ret;\n+    double d = getDenominatorDegreesOfFreedom();\n+\n+        if (Double.isInfinite(d)) {\n             // use mean\n+            ret = 0;\n+        } else {\n             ret = d / (d - 2.0);\n-        return ret;\n-    }\n+        }\n+\n+    return ret;\n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "java.lang.IllegalArgumentException: Invalid endpoint parameters: lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308",
    "test_result": "FAIL"
}