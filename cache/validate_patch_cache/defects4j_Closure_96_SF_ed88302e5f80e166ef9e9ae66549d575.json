{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter;\n    Node argument;\n\n    boolean hasVarArgs = parameters.hasNext() && parameters.next().isVarArgs();\n\n    while (arguments.hasNext() && (parameters.hasNext() || hasVarArgs)) {\n        ordinal++;\n        argument = arguments.next();\n\n        // Get the parameter associated with the argument ordinal\n        if (parameters.hasNext()) {\n            parameter = parameters.next();\n        } else if (hasVarArgs) {\n            parameter = parameters.next().getFirstChild();\n        } else {\n            // Should never happen, but return for completeness.\n            return;\n        }\n\n        // Check whether the argument matches the parameter type.\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                getJSType(parameter), call, ordinal);\n    }\n\n    // Check if the number of arguments is within the expected range.\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    if (numArgs < minArgs || (numArgs > maxArgs && !hasVarArgs)) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                (maxArgs != Integer.MAX_VALUE && !hasVarArgs ? \" and no more than \" + maxArgs + \" argument(s)\" :\n                        hasVarArgs ? \" and \" + (minArgs - 1) + \" or more argument(s)\" : \"\"));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..27099576 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,48 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    Node parameter;\n+    Node argument;\n+\n+    boolean hasVarArgs = parameters.hasNext() && parameters.next().isVarArgs();\n+\n+    while (arguments.hasNext() && (parameters.hasNext() || hasVarArgs)) {\n+        ordinal++;\n+        argument = arguments.next();\n+\n+        // Get the parameter associated with the argument ordinal\n+        if (parameters.hasNext()) {\n+            parameter = parameters.next();\n+        } else if (hasVarArgs) {\n+            parameter = parameters.next().getFirstChild();\n+        } else {\n+            // Should never happen, but return for completeness.\n+            return;\n+        }\n+\n+        // Check whether the argument matches the parameter type.\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                getJSType(parameter), call, ordinal);\n     }\n \n+    // Check if the number of arguments is within the expected range.\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    if (numArgs < minArgs || (numArgs > maxArgs && !hasVarArgs)) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(minArgs),\n+                (maxArgs != Integer.MAX_VALUE && !hasVarArgs ? \" and no more than \" + maxArgs + \" argument(s)\" :\n+                        hasVarArgs ? \" and \" + (minArgs - 1) + \" or more argument(s)\" : \"\"));\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "java.util.NoSuchElementException",
    "test_result": "FAIL"
}