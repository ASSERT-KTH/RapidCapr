{
    "patch": "private static final int MAX_PRETTY_PRINTED_PROPERTIES = 3;\n\nprivate boolean prettyPrinted;\n\n@Override\nString toStringHelper(Set<ObjectType> types, boolean forAnnotations) {\n  if (types.contains(this)) {\n    return \"...\";\n  }\n  types.add(this);\n  StringBuilder sb = new StringBuilder();\n  if (hasReferenceName()) {\n    sb.append(getReferenceName());\n  } else if (prettyPrint) {\n    prettyPrinted = true;\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    sb.append(\"{\");\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property);\n      sb.append(\": \");\n      sb.append(getPropertyType(property).toStringHelper(types, forAnnotations));\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n    sb.append(\"}\");\n  } else {\n    sb.append(\"{...}\");\n  }\n  types.remove(this);\n  return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..62ab57e1 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,51 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+private static final int MAX_PRETTY_PRINTED_PROPERTIES = 3;\n+\n+private boolean prettyPrinted;\n+\n+@Override\n+String toStringHelper(Set<ObjectType> types, boolean forAnnotations) {\n+  if (types.contains(this)) {\n+    return \"...\";\n+  }\n+  types.add(this);\n+  StringBuilder sb = new StringBuilder();\n+  if (hasReferenceName()) {\n+    sb.append(getReferenceName());\n+  } else if (prettyPrint) {\n+    prettyPrinted = true;\n+    Set<String> propertyNames = Sets.newTreeSet();\n+    for (ObjectType current = this;\n+         current != null && !current.isNativeObjectType() &&\n+             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+         current = current.getImplicitPrototype()) {\n+      propertyNames.addAll(current.getOwnPropertyNames());\n+    }\n+\n+    sb.append(\"{\");\n+    int i = 0;\n+    for (String property : propertyNames) {\n+      if (i > 0) {\n+        sb.append(\", \");\n       }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+      sb.append(property);\n+      sb.append(\": \");\n+      sb.append(getPropertyType(property).toStringHelper(types, forAnnotations));\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n       }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n     }\n+    sb.append(\"}\");\n+  } else {\n+    sb.append(\"{...}\");\n   }\n+  types.remove(this);\n+  return sb.toString();\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: variable MAX_PRETTY_PRINTED_PROPERTIES is already defined in class PrototypeObjectType",
    "test_result": "ERROR"
}