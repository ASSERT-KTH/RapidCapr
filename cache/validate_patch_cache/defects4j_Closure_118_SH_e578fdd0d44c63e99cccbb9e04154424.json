{
    "patch": "for (Node child = n.getFirstChild();\n    child != null;\n    child = child.getNext()) {\n  String name = \"\";\n  // Maybe STRING, GET, SET\n  if (child.isString()) {\n    name = child.getString();\n  } else if (child.isName()) {\n    name = child.getString();\n  } else if (child.isComputedProp()) {\n    maybeAddCast(child.getFirstChild());\n    continue;\n  } else {\n    continue;\n  }\n\n  T type = typeSystem.getType(getScope(), n, name);\n  Property prop = getProperty(name);\n\n  if (!prop.scheduleRenaming(child,\n      processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..ddf38ddf 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,37 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+for (Node child = n.getFirstChild();\n+    child != null;\n+    child = child.getNext()) {\n+  String name = \"\";\n+  // Maybe STRING, GET, SET\n+  if (child.isString()) {\n+    name = child.getString();\n+  } else if (child.isName()) {\n+    name = child.getString();\n+  } else if (child.isComputedProp()) {\n+    maybeAddCast(child.getFirstChild());\n+    continue;\n+  } else {\n+    continue;\n+  }\n+\n+  T type = typeSystem.getType(getScope(), n, name);\n+  Property prop = getProperty(name);\n+\n+  if (!prop.scheduleRenaming(child,\n+      processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}