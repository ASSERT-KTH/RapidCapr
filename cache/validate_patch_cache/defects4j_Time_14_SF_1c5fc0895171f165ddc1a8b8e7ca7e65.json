{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            try {\n                return iChronology.get(partial, instant);\n            } catch (IllegalFieldValueException ex) {\n                if (ex.getFieldName().equals(\"dayOfMonth\")) {\n                    int dayOfMonth = partial.getField(DAY_OF_MONTH_TYPE).get(instant);\n                    int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                    if (dayOfMonth > lastDayOfMonth) {\n                        instant = iChronology.dayOfMonth().set(instant, lastDayOfMonth);\n                        instant = iChronology.monthOfYear().add(instant, 1);\n                        instant = iChronology.dayOfMonth().set(instant, Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(instant)));\n                    } else {\n                        int firstDayOfMonth = iChronology.dayOfMonth().getMinimumValue(instant);\n                        instant = iChronology.dayOfMonth().set(instant, firstDayOfMonth);\n                        instant = iChronology.monthOfYear().add(instant, -1);\n                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                    }\n                    return iChronology.get(partial, instant);\n                } else {\n                    throw ex;\n                }\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..29414c0b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            try {\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalFieldValueException ex) {\n+                if (ex.getFieldName().equals(\"dayOfMonth\")) {\n+                    int dayOfMonth = partial.getField(DAY_OF_MONTH_TYPE).get(instant);\n+                    int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    if (dayOfMonth > lastDayOfMonth) {\n+                        instant = iChronology.dayOfMonth().set(instant, lastDayOfMonth);\n+                        instant = iChronology.monthOfYear().add(instant, 1);\n+                        instant = iChronology.dayOfMonth().set(instant, Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(instant)));\n+                    } else {\n+                        int firstDayOfMonth = iChronology.dayOfMonth().getMinimumValue(instant);\n+                        instant = iChronology.dayOfMonth().set(instant, firstDayOfMonth);\n+                        instant = iChronology.monthOfYear().add(instant, -1);\n+                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                    }\n+                    return iChronology.get(partial, instant);\n+                } else {\n+                    throw ex;\n+                }\n+            }\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}