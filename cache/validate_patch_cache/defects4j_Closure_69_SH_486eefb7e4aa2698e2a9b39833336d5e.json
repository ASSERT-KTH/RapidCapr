{
    "patch": "if (childType.isFunctionType()) {\n  FunctionType functionType = childType.toMaybeFunctionType();\n\n    JSType thisType = functionType.getTypeOfThis();\n    if (thisType != null && !(n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        report(t, n, EXPECTED_THIS_TYPE);\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n} else {\n    ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..31baa195 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType.isFunctionType()) {\n+  FunctionType functionType = childType.toMaybeFunctionType();\n+\n+    JSType thisType = functionType.getTypeOfThis();\n+    if (thisType != null && !(n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        report(t, n, EXPECTED_THIS_TYPE);\n+    }\n+\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+} else {\n+    ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}