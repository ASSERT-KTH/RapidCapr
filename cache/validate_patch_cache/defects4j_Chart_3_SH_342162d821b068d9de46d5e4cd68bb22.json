{
    "patch": "    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n>>> [ INFILL ] <<<\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            double minY = Double.NaN;\n            double maxY = Double.NaN;\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                    double y = clone.getValue().doubleValue();\n                    if (!Double.isNaN(y)) {\n                        if (Double.isNaN(minY)) {\n                            minY = y;\n                        } else {\n                            minY = Math.min(minY, y);\n                        }\n                        if (Double.isNaN(maxY)) {\n                            maxY = y;\n                        } else {\n                            maxY = Math.max(maxY, y);\n                        }\n                    }\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n            copy.minY = minY;\n            copy.maxY = maxY;\n        }\n        return copy;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..a3f5f61 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,47 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+    public TimeSeries createCopy(int start, int end)\n+            throws CloneNotSupportedException {\n+        if (start < 0) {\n+            throw new IllegalArgumentException(\"Requires start >= 0.\");\n+        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"Requires start <= end.\");\n+        }\n+        TimeSeries copy = (TimeSeries) super.clone();\n+>>> [ INFILL ] <<<\n+        copy.data = new java.util.ArrayList();\n+        if (this.data.size() > 0) {\n+            double minY = Double.NaN;\n+            double maxY = Double.NaN;\n+            for (int index = start; index <= end; index++) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                    double y = clone.getValue().doubleValue();\n+                    if (!Double.isNaN(y)) {\n+                        if (Double.isNaN(minY)) {\n+                            minY = y;\n+                        } else {\n+                            minY = Math.min(minY, y);\n+                        }\n+                        if (Double.isNaN(maxY)) {\n+                            maxY = y;\n+                        } else {\n+                            maxY = Math.max(maxY, y);\n+                        }\n+                    }\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+            copy.minY = minY;\n+            copy.maxY = maxY;\n+        }\n+        return copy;\n+    }\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}