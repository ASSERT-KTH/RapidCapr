{
    "patch": "public static String escapeText(String text) {\n    StringBuffer buf = new StringBuffer();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        if (c == '&') {\n            buf.append(\"&amp;\");\n        } else if (c == '<') {\n            buf.append(\"&lt;\");\n        } else if (c == '>') {\n            buf.append(\"&gt;\");\n        } else if (c == '\"') {\n            buf.append(\"&quot;\");\n        } else if (c == '\\'') {\n            buf.append(\"&apos;\");\n        } else if (c < ' ') {\n            buf.append(\"&#\");\n            buf.append(Integer.toString(c));\n            buf.append(';');\n        } else if (c > '~' && c < 0xFFFE) {\n            buf.append(\"&#\");\n            buf.append(Integer.toString(c));\n            buf.append(';');\n        } else {\n            buf.append(c);\n        }\n    }\n    return buf.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..af766531 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,34 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeText(String text) {\n+    StringBuffer buf = new StringBuffer();\n+    for (int i = 0; i < text.length(); i++) {\n+        char c = text.charAt(i);\n+        if (c == '&') {\n+            buf.append(\"&amp;\");\n+        } else if (c == '<') {\n+            buf.append(\"&lt;\");\n+        } else if (c == '>') {\n+            buf.append(\"&gt;\");\n+        } else if (c == '\"') {\n+            buf.append(\"&quot;\");\n+        } else if (c == '\\'') {\n+            buf.append(\"&apos;\");\n+        } else if (c < ' ') {\n+            buf.append(\"&#\");\n+            buf.append(Integer.toString(c));\n+            buf.append(';');\n+        } else if (c > '~' && c < 0xFFFE) {\n+            buf.append(\"&#\");\n+            buf.append(Integer.toString(c));\n+            buf.append(';');\n+        } else {\n+            buf.append(c);\n+        }\n+    }\n+    return buf.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}