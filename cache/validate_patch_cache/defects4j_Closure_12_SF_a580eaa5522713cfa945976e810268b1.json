{
    "patch": "  /**\n   * Returns true if the given CFG node contains a try/catch/finally block.\n   */\n  private boolean hasExceptionHandler(Node cfgNode) {\n    return cfgNode != null && cfgNode.hasChildren()\n           && (cfgNode.getFirstChild().isTry() || cfgNode.getLastChild().isTry());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..cb24152f 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,12 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n+  /**\n+   * Returns true if the given CFG node contains a try/catch/finally block.\n+   */\n   private boolean hasExceptionHandler(Node cfgNode) {\n-    return false;\n-  }\n+    return cfgNode != null && cfgNode.hasChildren()\n+           && (cfgNode.getFirstChild().isTry() || cfgNode.getLastChild().isTry());\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}