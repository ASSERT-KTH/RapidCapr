{
    "patch": "if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\n\n// Add the last strategy to the collector if it wasn't added before.\nString currentStrategyFieldName = currentStrategy.getFieldName();\nif (currentFormatField.equals(currentStrategyFieldName) && collector.isEmpty()) { \n    collector.add(currentStrategy);\n}\nelse if(nextStrategy == null || !nextStrategy.getFieldName().equals(currentStrategyFieldName) || !currentStrategy.addRegex(this, regex)) {\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n}\nif (collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[collector.size()]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..1303ea05 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,27 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+\n+// Add the last strategy to the collector if it wasn't added before.\n+String currentStrategyFieldName = currentStrategy.getFieldName();\n+if (currentFormatField.equals(currentStrategyFieldName) && collector.isEmpty()) { \n+    collector.add(currentStrategy);\n+}\n+else if(nextStrategy == null || !nextStrategy.getFieldName().equals(currentStrategyFieldName) || !currentStrategy.addRegex(this, regex)) {\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+}\n+if (collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}