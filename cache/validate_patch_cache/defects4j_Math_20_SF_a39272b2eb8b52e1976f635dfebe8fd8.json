{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] repaired = repair(x);\n    double[] decoded = decode(repaired);\n    if (decoded != null && decoded.length == x.length) {\n        for (int i = 0; i < x.length; i++) {\n            if (Double.isNaN(decoded[i]) || Double.isInfinite(decoded[i])) {\n                decoded[i] = 0.0; // replace with default value\n            }\n        }\n        return decoded;\n    }\n    return new double[x.length];\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..b5e9c9081 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,19 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] repaired = repair(x);\n+    double[] decoded = decode(repaired);\n+    if (decoded != null && decoded.length == x.length) {\n+        for (int i = 0; i < x.length; i++) {\n+            if (Double.isNaN(decoded[i]) || Double.isInfinite(decoded[i])) {\n+                decoded[i] = 0.0; // replace with default value\n+            }\n         }\n+        return decoded;\n+    }\n+    return new double[x.length];\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}