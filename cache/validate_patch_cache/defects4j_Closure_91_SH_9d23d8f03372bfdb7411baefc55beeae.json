{
    "patch": "        if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n          if (lhs.getFirstChild().isQualifiedName()) {\n            if (isLvalue(lhs.getFirstChild())) {\n              return false;\n            }\n          }\n        } else if (NodeUtil.isGet(lhs)) {\n          return false;\n        }\n      }\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (isPrototypeProperty(getParent())) {\n      return false;\n    }\n\n    ...\n  }\n\n  private static boolean isPrototypeProperty(Node n) {\n    Node parent = n.getParent();\n    // We allow assignments to prototypes of constructors (e.g. Foo.prototype = bar;).\n    if (NodeUtil.isExprAssign(n)) {\n      Node lhs = n.getFirstChild();\n      return lhs.isGetProp()\n          && lhs.getFirstChild().isName()\n          && parent.isExprResult()\n          && lhs.getLastChild().getString().equals(\"prototype\");\n    } else if (parent.isFunction()) {\n      return parent.getFirstChild().getLastChild().getString().equals(\"prototype\");\n    } else if (parent.isClassMembers()) {\n      return parent.getParent().isClass() && parent.getString().equals(\"prototype\");\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..afb45fc8 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,41 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+        if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (lhs.getFirstChild().isQualifiedName()) {\n+            if (isLvalue(lhs.getFirstChild())) {\n+              return false;\n+            }\n+          }\n+        } else if (NodeUtil.isGet(lhs)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (isPrototypeProperty(getParent())) {\n+      return false;\n+    }\n+\n+    ...\n+  }\n+\n+  private static boolean isPrototypeProperty(Node n) {\n+    Node parent = n.getParent();\n+    // We allow assignments to prototypes of constructors (e.g. Foo.prototype = bar;).\n+    if (NodeUtil.isExprAssign(n)) {\n+      Node lhs = n.getFirstChild();\n+      return lhs.isGetProp()\n+          && lhs.getFirstChild().isName()\n+          && parent.isExprResult()\n+          && lhs.getLastChild().getString().equals(\"prototype\");\n+    } else if (parent.isFunction()) {\n+      return parent.getFirstChild().getLastChild().getString().equals(\"prototype\");\n+    } else if (parent.isClassMembers()) {\n+      return parent.getParent().isClass() && parent.getString().equals(\"prototype\");\n+    }\n+    return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}