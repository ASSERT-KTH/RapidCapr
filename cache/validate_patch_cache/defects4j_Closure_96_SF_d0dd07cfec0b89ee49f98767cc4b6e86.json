{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    boolean varArgs = false;\n    while (arguments.hasNext()) {\n      if (!parameters.hasNext()) {\n        // If there are no parameters left in the list, then this must be\n        // a var_args function.\n        varArgs = true;\n        break;\n      }\n      Node parameter = parameters.next();\n      Node argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (varArgs) {\n      // For var_args function, the rest of the arguments (if any) must be of\n      // the same type as the parameter type of the last parameter in the list.\n      Node lastParameter = null;\n      while (parameters.hasNext()) {\n        lastParameter = parameters.next();\n      }\n      JSType lastParameterType = lastParameter == null ? null : getJSType(lastParameter);\n      while (arguments.hasNext()) {\n        Node argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), lastParameterType, call, ordinal);\n      }\n    } else {\n      // For non-var_args function, the number of arguments must be equal to the\n      // number of parameters. Note that optional parameters are already present\n      // in the AST as PARAM_LIST children, so they must be counted here.\n      int numParams = functionType.getArity();\n      JSType restType = functionType.getRestType();\n      if (restType != null) {\n        numParams--;\n      }\n      if (numParams > 0 && (!arguments.hasNext() || !parameters.hasNext())) {\n        // Too few arguments.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(numParams), \"\");\n      }\n      while (arguments.hasNext()) {\n        Node argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), null, call, ordinal);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..8de1bb7b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,63 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    boolean varArgs = false;\n+    while (arguments.hasNext()) {\n+      if (!parameters.hasNext()) {\n+        // If there are no parameters left in the list, then this must be\n+        // a var_args function.\n+        varArgs = true;\n+        break;\n+      }\n+      Node parameter = parameters.next();\n+      Node argument = arguments.next();\n       ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    if (varArgs) {\n+      // For var_args function, the rest of the arguments (if any) must be of\n+      // the same type as the parameter type of the last parameter in the list.\n+      Node lastParameter = null;\n+      while (parameters.hasNext()) {\n+        lastParameter = parameters.next();\n+      }\n+      JSType lastParameterType = lastParameter == null ? null : getJSType(lastParameter);\n+      while (arguments.hasNext()) {\n+        Node argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), lastParameterType, call, ordinal);\n+      }\n+    } else {\n+      // For non-var_args function, the number of arguments must be equal to the\n+      // number of parameters. Note that optional parameters are already present\n+      // in the AST as PARAM_LIST children, so they must be counted here.\n+      int numParams = functionType.getArity();\n+      JSType restType = functionType.getRestType();\n+      if (restType != null) {\n+        numParams--;\n+      }\n+      if (numParams > 0 && (!arguments.hasNext() || !parameters.hasNext())) {\n+        // Too few arguments.\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(numParams), \"\");\n+      }\n+      while (arguments.hasNext()) {\n+        Node argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), null, call, ordinal);\n+      }\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}