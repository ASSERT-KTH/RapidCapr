{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if ((obj instanceof PeriodPrinter) && !notPrinter) {\n            return new PeriodFormatter((PeriodPrinter) obj, null);\n        } else if ((obj instanceof PeriodParser) && !notParser) {\n            return new PeriodFormatter(null, (PeriodParser) obj);\n        } else {\n            throw new IllegalStateException(\"Invalid element type\");\n        }\n    }\n\n    int pos = getSeparatorPosition(elementPairs);\n    if (pos == 0 && elementPairs.get(0) instanceof Separator) {\n        pos = getSeparatorPosition(elementPairs.subList(1, size));\n        if (pos != -1) {\n            pos++; // adjust position for sublist\n        }\n    }\n\n    if (pos == 0 || pos == size) {\n        throw new IllegalStateException(\"Format must contain a separator\");\n    }\n\n    List<Object> printerList = elementPairs.subList(0, pos);\n    List<Object> parserList = elementPairs.subList(pos, size);\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    if (!notPrinter) {\n        printer = createComposite(printerList)[0];\n    }\n    if (!notParser) {\n        parser = createComposite(parserList)[1];\n    }\n\n    Separator separator = (Separator) elementPairs.get(pos - 1);\n\n    separator = separator.finish(printer, parser);\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, parser);\n    } else if (notParser) {\n        return new PeriodFormatter(printer, null);\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}\n\nprivate static int getSeparatorPosition(List<Object> elementPairs) {\n    for (int i = 0; i < elementPairs.size(); i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..90b78a85 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,68 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if ((obj instanceof PeriodPrinter) && !notPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) obj, null);\n+        } else if ((obj instanceof PeriodParser) && !notParser) {\n+            return new PeriodFormatter(null, (PeriodParser) obj);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalStateException(\"Invalid element type\");\n+        }\n+    }\n+\n+    int pos = getSeparatorPosition(elementPairs);\n+    if (pos == 0 && elementPairs.get(0) instanceof Separator) {\n+        pos = getSeparatorPosition(elementPairs.subList(1, size));\n+        if (pos != -1) {\n+            pos++; // adjust position for sublist\n+        }\n+    }\n+\n+    if (pos == 0 || pos == size) {\n+        throw new IllegalStateException(\"Format must contain a separator\");\n+    }\n+\n+    List<Object> printerList = elementPairs.subList(0, pos);\n+    List<Object> parserList = elementPairs.subList(pos, size);\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    if (!notPrinter) {\n+        printer = createComposite(printerList)[0];\n+    }\n+    if (!notParser) {\n+        parser = createComposite(parserList)[1];\n+    }\n+\n+    Separator separator = (Separator) elementPairs.get(pos - 1);\n+\n+    separator = separator.finish(printer, parser);\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, parser);\n+    } else if (notParser) {\n+        return new PeriodFormatter(printer, null);\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n+\n+private static int getSeparatorPosition(List<Object> elementPairs) {\n+    for (int i = 0; i < elementPairs.size(); i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            return i;\n         }\n     }\n+    return -1;\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}