{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMockSettingsImpl settings = new MockSettingsImpl();\nsettings.defaultAnswer(Mockito.RETURNS_DEFAULTS);\nClass<?> mockClass = mock.getClass();\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\nif (mockClass.getName().startsWith(\"org.hibernate.proxy\")) {\n    ((Factory) mock).getCallbacks()[1] = newFilter;\n} else {\n    ((Factory) mock).getCallbacks()[0] = newFilter;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..06a137b7a 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MockSettingsImpl settings = new MockSettingsImpl();\n+settings.defaultAnswer(Mockito.RETURNS_DEFAULTS);\n+Class<?> mockClass = mock.getClass();\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+if (mockClass.getName().startsWith(\"org.hibernate.proxy\")) {\n+    ((Factory) mock).getCallbacks()[1] = newFilter;\n+} else {\n+    ((Factory) mock).getCallbacks()[0] = newFilter;\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}