{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            DurationField first = savedFields[0].iField.getDurationField();\n            //alter base year for parsing if first field is month or day, but not if first field is \"weekyear\"\n            if (first.getType().equals(DurationFieldType.months()) || first.getType().equals(DurationFieldType.days())) {\n                boolean hasWeekyear = false;\n                for (SavedField sf : savedFields) {\n                    if (sf.iField.getDurationType().equals(DurationFieldType.weeks())) {\n                        DurationField f = sf.iField.getDurationField();\n                        if (f instanceof ImpreciseDateTimeField && f.getDurationType().equals(DurationFieldType.weeks())) {\n                            hasWeekyear = true;\n                            break;\n                        }\n                    }\n                }\n                if (!hasWeekyear) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    return computeMillis(resetFields, text);\n                }\n            }\n        }\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0b9f1f02 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -337,16 +337,25 @@ public class DateTimeParserBucket {\n         }\n         sort(savedFields, count);\n         if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n             DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+            //alter base year for parsing if first field is month or day, but not if first field is \"weekyear\"\n+            if (first.getType().equals(DurationFieldType.months()) || first.getType().equals(DurationFieldType.days())) {\n+                boolean hasWeekyear = false;\n+                for (SavedField sf : savedFields) {\n+                    if (sf.iField.getDurationType().equals(DurationFieldType.weeks())) {\n+                        DurationField f = sf.iField.getDurationField();\n+                        if (f instanceof ImpreciseDateTimeField && f.getDurationType().equals(DurationFieldType.weeks())) {\n+                            hasWeekyear = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (!hasWeekyear) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    return computeMillis(resetFields, text);\n+                }\n             }\n         }\n-\n         long millis = iMillis;\n         try {\n             for (int i = 0; i < count; i++) {\n@@ -358,7 +367,6 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n@@ -366,14 +374,13 @@ public class DateTimeParserBucket {\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n                 String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n         return millis;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}