{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  if (!isNominalConstructor() && !isInterface() && !isFunctionType()) {\n    return;\n  }\n\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer;\n        if (!hasProperty(prop)) {\n          if (propType.isUnknownType()) {\n            // If the type of the record property is unknown, set the type of the inferred\n            // property as UNKNOWN_TYPE to prevent it from propagating further.\n            typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n          } else {\n            // If the type of the record property is not unknown, then set it as the least\n            // supertype of the property type and VOID_TYPE.\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n        } else {\n          // If the property is already declared, then we just get the declared property type.\n          typeToInfer = getPropertyType(prop);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..bad8f1b4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,34 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n+public void matchConstraint(ObjectType constraintObj) {\n+  if (!isNominalConstructor() && !isInterface() && !isFunctionType()) {\n+    return;\n+  }\n+\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer;\n+        if (!hasProperty(prop)) {\n+          if (propType.isUnknownType()) {\n+            // If the type of the record property is unknown, set the type of the inferred\n+            // property as UNKNOWN_TYPE to prevent it from propagating further.\n+            typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+          } else {\n+            // If the type of the record property is not unknown, then set it as the least\n+            // supertype of the property type and VOID_TYPE.\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n+        } else {\n+          // If the property is already declared, then we just get the declared property type.\n+          typeToInfer = getPropertyType(prop);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n }\n+}",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}