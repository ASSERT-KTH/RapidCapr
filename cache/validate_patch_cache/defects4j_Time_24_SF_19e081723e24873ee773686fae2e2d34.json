{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n            // Correctly handle week-based fields\n            LocalDate date = null;\n            try {\n                date = parseLocalDate(text, iLocale);\n            } catch (IllegalArgumentException e) {\n                for (int i = 0; i < count; i++) {\n                    savedFields[i].restore();\n                }\n                throw e;\n            }\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                DateTimeField field = savedField.iField;\n                if (field == DateTimeFieldType.weekyear()) {\n                    int value = date.getWeekyear();\n                    millis = field.set(millis, value);\n                    if (value != date.getYear()) {\n                        savedField.restore();\n                    }\n                } else if (field == DateTimeFieldType.weekOfWeekyear()) {\n                    int value = date.getWeekOfWeekyear();\n                    millis = field.set(millis, value);\n                    if (value != date.get(DateTimeFieldType.weekOfWeekyear())) {\n                        savedField.restore();\n                    }\n                } else if (field == DateTimeFieldType.weekyearOfCentury()) {\n                    int value = date.getWeekyear() % 100;\n                    millis = field.set(millis, value);\n                    if (value != date.get(DateTimeFieldType.weekyearOfCentury())) {\n                        savedField.restore();\n                    }\n                }\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                  \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ae267a8e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -345,6 +345,39 @@ public class DateTimeParserBucket {\n                 saveField(DateTimeFieldType.year(), iDefaultYear);\n                 return computeMillis(resetFields, text);\n             }\n+            // Correctly handle week-based fields\n+            LocalDate date = null;\n+            try {\n+                date = parseLocalDate(text, iLocale);\n+            } catch (IllegalArgumentException e) {\n+                for (int i = 0; i < count; i++) {\n+                    savedFields[i].restore();\n+                }\n+                throw e;\n+            }\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+                DateTimeField field = savedField.iField;\n+                if (field == DateTimeFieldType.weekyear()) {\n+                    int value = date.getWeekyear();\n+                    millis = field.set(millis, value);\n+                    if (value != date.getYear()) {\n+                        savedField.restore();\n+                    }\n+                } else if (field == DateTimeFieldType.weekOfWeekyear()) {\n+                    int value = date.getWeekOfWeekyear();\n+                    millis = field.set(millis, value);\n+                    if (value != date.get(DateTimeFieldType.weekOfWeekyear())) {\n+                        savedField.restore();\n+                    }\n+                } else if (field == DateTimeFieldType.weekyearOfCentury()) {\n+                    int value = date.getWeekyear() % 100;\n+                    millis = field.set(millis, value);\n+                    if (value != date.get(DateTimeFieldType.weekyearOfCentury())) {\n+                        savedField.restore();\n+                    }\n+                }\n+            }\n         }\n \n         long millis = iMillis;\n@@ -358,7 +391,7 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n@@ -366,14 +399,14 @@ public class DateTimeParserBucket {\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n                 String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                  \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n+\n         return millis;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}