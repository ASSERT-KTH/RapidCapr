{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget.isName() && callTarget.getString().equals(\"String\")) {\n        Node value = callTarget.getNext();\n        // Check if there's exactly one argument and it's a primitive value\n        if (value != null && value.getNext() == null && isFoldable(value) && !NodeUtil.mayHaveSideEffects(n) && !NodeUtil.mayHaveSideEffects(value)) {\n            Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n            n.getParent().replaceChild(n, addition);\n            reportCodeChange();\n            return addition;\n        }\n    }\n    return n;\n}\n\nprivate boolean isFoldable(Node n) {\n    return n.isNumber() || n.isString() || n.isNull() || (n.isName() && \"undefined\".equals(n.getString()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..194a7a18 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,25 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n-      }\n+    if (callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+        Node value = callTarget.getNext();\n+        // Check if there's exactly one argument and it's a primitive value\n+        if (value != null && value.getNext() == null && isFoldable(value) && !NodeUtil.mayHaveSideEffects(n) && !NodeUtil.mayHaveSideEffects(value)) {\n+            Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n+            n.getParent().replaceChild(n, addition);\n+            reportCodeChange();\n+            return addition;\n+        }\n     }\n     return n;\n-  }\n+}\n+\n+private boolean isFoldable(Node n) {\n+    return n.isNumber() || n.isString() || n.isNull() || (n.isName() && \"undefined\".equals(n.getString()));\n+}\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}