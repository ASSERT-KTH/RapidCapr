{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        } else if (block.isConditional && block.getSuccessors().size() == 2) {\n          BasicBlock succ1 = block.getSuccessors().get(0);\n          BasicBlock succ2 = block.getSuccessors().get(1);\n          if (ref.getBasicBlock() == succ1 || ref.getBasicBlock() == succ2) {\n            Reference succ1Ref = succ1.getPhiReferences().get(ref.getName());\n            Reference succ2Ref = succ2.getPhiReferences().get(ref.getName());\n            if (succ1Ref != null && succ2Ref != null) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d883fe56 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isConditional && block.getSuccessors().size() == 2) {\n+          BasicBlock succ1 = block.getSuccessors().get(0);\n+          BasicBlock succ2 = block.getSuccessors().get(1);\n+          if (ref.getBasicBlock() == succ1 || ref.getBasicBlock() == succ2) {\n+            Reference succ1Ref = succ1.getPhiReferences().get(ref.getName());\n+            Reference succ2Ref = succ2.getPhiReferences().get(ref.getName());\n+            if (succ1Ref != null && succ2Ref != null) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}