{
    "patch": "public static double getTypedPercent(JSONArray jsonArray) {\n    double total = 0, typed = 0;\n\n    for (int i = 0; i < jsonArray.length(); i++) {\n        if (jsonArray.optJSONObject(i) != null && jsonArray.getJSONObject(i).has(\"type\")) {\n            total++;\n            if (!jsonArray.getJSONObject(i).getString(\"type\").equals(\"\")) {\n                typed++;\n            }\n        }\n    }\n\n    return total == 0 ? 0.0 : Math.round((typed / total) * 1000.0) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..638da34b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray jsonArray) {\n+    double total = 0, typed = 0;\n+\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        if (jsonArray.optJSONObject(i) != null && jsonArray.getJSONObject(i).has(\"type\")) {\n+            total++;\n+            if (!jsonArray.getJSONObject(i).getString(\"type\").equals(\"\")) {\n+                typed++;\n+            }\n+        }\n+    }\n+\n+    return total == 0 ? 0.0 : Math.round((typed / total) * 1000.0) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}