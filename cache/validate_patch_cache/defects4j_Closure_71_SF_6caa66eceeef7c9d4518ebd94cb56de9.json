{
    "patch": "    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      JSDocInfo docInfo = null;\n\n      // Check whether we are trying to override an existing property.\n      boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility information, or on an interface.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n      for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n\n        // Check if we have found a parent node that has defined the property with visibility information.\n        if (docInfo != null) {\n          break;\n        }\n\n        // Check if this element has a mixin that provides the property.\n        for (Mixin mixin : compiler.getCodingConvention().getMixins(objectType.getConstructor())) {\n          docInfo = mixin.getType().getOwnPropertyJSDocInfo(propertyName);\n          if (docInfo != null) {\n            break;\n          }\n        }\n\n        // Check if we have found a propertly-defined property in an interface.\n        if (objectType.isInterface()) {\n          docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n          if (docInfo != null) {\n            break;\n          }\n        }\n      }\n\n      if (docInfo == null) {\n        // We couldn't find a JSDoc info for the property, which means it's public.\n        return;\n      }\n\n      // Both the property and its definition were found.\n      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceFileName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = Visibility.INHERITED;\n        if (overridingInfo != null) {\n          overridingVisibility = overridingInfo.getVisibility();\n        }\n\n        // Check that (a) the property can be overridden, and (b) that the visibility of the override\n        // is the same as the visibility of the original property.\n        if (visibility == Visibility.PRIVATE) {\n          if (sameInput) {\n            // If we are in the same input, private property can be overridden.\n            visibility = Visibility.INHERITED;\n          } else {\n            compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            return;\n          }\n        }\n        if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n          compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // Private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {\n          if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // Private access is not allowed outside the file from a different enclosing class.\n          compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..76ae6109 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,83 +404,86 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n+      JSDocInfo docInfo = null;\n+\n+      // Check whether we are trying to override an existing property.\n+      boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n+\n+      // Find the lowest property defined on a class with visibility information, or on an interface.\n       if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n       }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n+      for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n+\n+        // Check if we have found a parent node that has defined the property with visibility information.\n+        if (docInfo != null) {\n           break;\n         }\n+\n+        // Check if this element has a mixin that provides the property.\n+        for (Mixin mixin : compiler.getCodingConvention().getMixins(objectType.getConstructor())) {\n+          docInfo = mixin.getType().getOwnPropertyJSDocInfo(propertyName);\n+          if (docInfo != null) {\n+            break;\n+          }\n+        }\n+\n+        // Check if we have found a propertly-defined property in an interface.\n+        if (objectType.isInterface()) {\n+          docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+          if (docInfo != null) {\n+            break;\n+          }\n+        }\n       }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n+      if (docInfo == null) {\n+        // We couldn't find a JSDoc info for the property, which means it's public.\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n+      // Both the property and its definition were found.\n+      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceFileName());\n       Visibility visibility = docInfo.getVisibility();\n       JSType ownerType = normalizeClassType(objectType);\n       if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n+        // Check an ASSIGN statement that's trying to override a property on a superclass.\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility = Visibility.INHERITED;\n+        if (overridingInfo != null) {\n+          overridingVisibility = overridingInfo.getVisibility();\n+        }\n \n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+        // Check that (a) the property can be overridden, and (b) that the visibility of the override\n+        // is the same as the visibility of the original property.\n+        if (visibility == Visibility.PRIVATE) {\n+          if (sameInput) {\n+            // If we are in the same input, private property can be overridden.\n+            visibility = Visibility.INHERITED;\n+          } else {\n+            compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n+            return;\n+          }\n+        }\n+        if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n+          compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n         }\n       } else {\n         if (sameInput) {\n-          // private access is always allowed in the same file.\n+          // Private access is always allowed in the same file.\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n+        } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {\n+          if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n             return;\n           }\n \n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n+          // Private access is not allowed outside the file from a different enclosing class.\n+          compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n         } else if (visibility == Visibility.PROTECTED) {\n           // There are 3 types of legal accesses of a protected property:\n           // 1) Accesses in the same file\n@@ -488,16 +491,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           // 3) Accessing the property from inside a subclass\n           // The first two have already been checked for.\n           if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n-        }\n-      }\n-    }\n-  }\n+            compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n \n   /**\n    * Whether the given access of a private constructor is legal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}