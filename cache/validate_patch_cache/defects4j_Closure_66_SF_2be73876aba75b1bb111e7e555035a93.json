{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JSONObject response = new JSONObject(json);\n        JSONArray types = response.getJSONArray(\"types\");\n\n        int typedCount = 0;\n        int totalCount = 0;\n\n        for (int i = 0; i < types.length(); i++) {\n            JSONObject type = types.getJSONObject(i);\n            int count = type.getInt(\"count\");\n            String name = type.getString(\"name\");\n            if (name.equals(\"typed\")) {\n                typedCount += count;\n            }\n            totalCount += count;\n        }\n\n        return (double) typedCount / totalCount * 100;\n\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e0263fa0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JSONObject response = new JSONObject(json);\n+        JSONArray types = response.getJSONArray(\"types\");\n+\n+        int typedCount = 0;\n+        int totalCount = 0;\n+\n+        for (int i = 0; i < types.length(); i++) {\n+            JSONObject type = types.getJSONObject(i);\n+            int count = type.getInt(\"count\");\n+            String name = type.getString(\"name\");\n+            if (name.equals(\"typed\")) {\n+                typedCount += count;\n+            }\n+            totalCount += count;\n+        }\n+\n+        return (double) typedCount / totalCount * 100;\n+\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}