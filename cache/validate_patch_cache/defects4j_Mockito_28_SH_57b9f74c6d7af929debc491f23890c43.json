{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n\nif (candidate != null && (field.getType().isInstance(candidate) || field.getType().isAssignableFrom(candidate.getClass()))) {\n    field.setAccessible(true);\n    try {\n        Object value = field.getType().cast(candidate);\n        field.set(fieldInstance, value);\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(String.format(\"Cannot inject %s into %s. Incompatible types: %s and %s\",\n                    candidate, awaitingInjectionClazz.getSimpleName(), field.getType().getSimpleName(),\n                    candidate.getClass().getSimpleName()));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..61c2a1031 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,24 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+\n+if (candidate != null && (field.getType().isInstance(candidate) || field.getType().isAssignableFrom(candidate.getClass()))) {\n+    field.setAccessible(true);\n+    try {\n+        Object value = field.getType().cast(candidate);\n+        field.set(fieldInstance, value);\n+    } catch (IllegalAccessException e) {\n+        e.printStackTrace();\n+    } catch (IllegalArgumentException e) {\n+        throw new IllegalArgumentException(String.format(\"Cannot inject %s into %s. Incompatible types: %s and %s\",\n+                    candidate, awaitingInjectionClazz.getSimpleName(), field.getType().getSimpleName(),\n+                    candidate.getClass().getSimpleName()));\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}