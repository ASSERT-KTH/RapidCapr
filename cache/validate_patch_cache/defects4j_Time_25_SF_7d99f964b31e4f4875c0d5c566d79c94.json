{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n\n    // check if the current time is within a transition\n    long previousTransition = previousTransition(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    int previousOffset = getOffset(previousTransition);\n    int nextOffset = getOffset(nextTransition);\n\n    if (previousOffset == nextOffset) {\n        // no transition is happening - return the current offset\n        return initialOffset;\n    } else if (nextTransition - instantLocal < previousTransition - instantLocal) {\n        // the next transition is closer - handle it first\n        return handleTransition(instantLocal, nextTransition, nextOffset, initialOffset);\n    } else {\n        // the previous transition is closer - handle it first\n        return handleTransition(instantLocal, previousTransition, previousOffset, initialOffset);\n    }\n}\n\nprivate int handleTransition(long instantLocal, long transition, int offsetTransition, int initialOffset) {\n    if (instantLocal < transition && initialOffset < offsetTransition) {\n        // we are in a gap between two offsets - return the previous offset\n        return getOffset(transition - 1);\n    } else if (instantLocal >= transition && initialOffset >= offsetTransition) {\n        // we are in an overlap between two offsets - return the offset after the transition\n        return offsetTransition;\n    } else {\n        // we are not in a transition - return the current offset\n        return initialOffset;\n    }\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bc2464df 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // check if the current time is within a transition\n+    long previousTransition = previousTransition(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    int previousOffset = getOffset(previousTransition);\n+    int nextOffset = getOffset(nextTransition);\n+\n+    if (previousOffset == nextOffset) {\n+        // no transition is happening - return the current offset\n+        return initialOffset;\n+    } else if (nextTransition - instantLocal < previousTransition - instantLocal) {\n+        // the next transition is closer - handle it first\n+        return handleTransition(instantLocal, nextTransition, nextOffset, initialOffset);\n+    } else {\n+        // the previous transition is closer - handle it first\n+        return handleTransition(instantLocal, previousTransition, previousOffset, initialOffset);\n+    }\n+}\n+\n+private int handleTransition(long instantLocal, long transition, int offsetTransition, int initialOffset) {\n+    if (instantLocal < transition && initialOffset < offsetTransition) {\n+        // we are in a gap between two offsets - return the previous offset\n+        return getOffset(transition - 1);\n+    } else if (instantLocal >= transition && initialOffset >= offsetTransition) {\n+        // we are in an overlap between two offsets - return the offset after the transition\n+        return offsetTransition;\n+    } else {\n+        // we are not in a transition - return the current offset\n+        return initialOffset;\n     }\n+}\n+\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}