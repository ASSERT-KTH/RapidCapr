{
    "patch": "public static double getTypedPercent(String js) {\n   int totalCount = 0;\n   int typedCount = 0;\n   String[] lines = js.split(\"\\n\");\n   for (String line : lines) {\n      if (line.contains(\"/*\") || line.contains(\"//\")) {\n         line = line.trim();\n         if (line.startsWith(\"// @\") && line.contains(\"Typed\")) {\n            totalCount++;\n            if (line.contains(\"= true\")) {\n               typedCount++;\n            }\n         }\n      }\n   }\n   if (totalCount == 0) {\n      return 0.0;\n   } else {\n      return (typedCount * 100.0) / totalCount;\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..69b6b122 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+   int totalCount = 0;\n+   int typedCount = 0;\n+   String[] lines = js.split(\"\\n\");\n+   for (String line : lines) {\n+      if (line.contains(\"/*\") || line.contains(\"//\")) {\n+         line = line.trim();\n+         if (line.startsWith(\"// @\") && line.contains(\"Typed\")) {\n+            totalCount++;\n+            if (line.contains(\"= true\")) {\n+               typedCount++;\n+            }\n+         }\n+      }\n+   }\n+   if (totalCount == 0) {\n+      return 0.0;\n+   } else {\n+      return (typedCount * 100.0) / totalCount;\n+   }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}