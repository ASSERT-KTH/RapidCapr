{
    "patch": "public static Map<String, Integer> countCharacters(String string) {\n    if(string == null){\n        return new HashMap<>();\n    }\n    Map<String, Integer> charCount = new HashMap<>();\n    for (int i = 0; i < string.length(); i++) {\n        String character = String.valueOf(string.charAt(i));\n        if (!charCount.containsKey(character)) {\n            charCount.put(character, 1);\n        } else {\n            int count = charCount.get(character);\n            charCount.put(character, count + 1);\n        }\n    }\n    return charCount;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f0a965eef 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countCharacters(String string) {\n+    if(string == null){\n+        return new HashMap<>();\n+    }\n+    Map<String, Integer> charCount = new HashMap<>();\n+    for (int i = 0; i < string.length(); i++) {\n+        String character = String.valueOf(string.charAt(i));\n+        if (!charCount.containsKey(character)) {\n+            charCount.put(character, 1);\n+        } else {\n+            int count = charCount.get(character);\n+            charCount.put(character, count + 1);\n+        }\n+    }\n+    return charCount;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}