{
    "patch": "import com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.ControlFlowGraph;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.cfg.Cfg;\nimport com.google.javascript.jscomp.cfg.CfgBranch;\nimport com.google.javascript.jscomp.cfg.CfgConditionalEdge;\nimport com.google.javascript.jscomp.cfg.CfgEdge;\nimport com.google.javascript.jscomp.cfg.CfgNode;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.ObjectType;\nimport com.google.javascript.rhino.ScriptRuntime;\nimport com.google.javascript.rhino.StaticScope;\nimport com.google.javascript.rhino.StaticSymbolTable;\nimport com.google.javascript.rhino.StaticSymbolTable.Symbol;\nimport com.google.javascript.rhino.StaticTypedSlot;\nimport com.google.javascript.rhino.StaticTypingVisitor;\nimport com.google.javascript.rhino.TypeI;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\n\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nclass MyRepairTool {\n\n    private void inferRecordProperties(\n          JSType type, JSType constraint) {\n        if (type == null || constraint == null) {\n            return;\n        }\n\n        ObjectType constraintObj =\n            ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n        if (constraintObj != null && constraintObj.isRecordType()) {\n            ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n            if (objType != null) {\n                for (String prop : constraintObj.getOwnPropertyNames()) {\n                    JSType propType = constraintObj.getPropertyType(prop);\n                    if (!objType.isPropertyTypeInferred(prop) && !objType.isPropertyTypeDeclared(prop)) {\n                        JSType typeToInfer = propType;\n                        if (!objType.hasProperty(prop)) {\n                            if (propType.isUnionType() && propType.getRestrictedUnion(\n                                    propType.getNullType()).isTruthy()) {\n                                typeToInfer = propType;\n                            } else {\n                                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n                            }\n                        }\n                        objType.defineInferredProperty(prop, typeToInfer, null);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * If we access a property of a symbol, then that symbol is not\n     * null or undefined.\n     */\n    private FlowScope dereferencePointer(Node n, FlowScope scope) {\n        if (n.isQualifiedName()) {\n            JSType type = getJSType(n);\n            JSType narrowed = type.restrictByNotNullOrUndefined();\n            if (type != narrowed) {\n                scope = narrowScope(scope, n, narrowed);\n            }\n        }\n        return scope;\n    }\n\n    private JSType getNativeType(JSTypeNative typeId) {\n        return registry.getNativeType(typeId);\n    }\n\n    private JSType getJSType(Node n) {\n        return registry.getJSType(n);\n    }\n\n    private FlowScope narrowScope(FlowScope scope, Node n, JSType narrowed) {\n        FlowScope newScope = scope.inferSlotType(n, narrowed, true);\n        if (newScope != scope) {\n            return newScope;\n        }\n        return scope;\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..019e8e2a 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,103 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.ControlFlowGraph;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.cfg.Cfg;\n+import com.google.javascript.jscomp.cfg.CfgBranch;\n+import com.google.javascript.jscomp.cfg.CfgConditionalEdge;\n+import com.google.javascript.jscomp.cfg.CfgEdge;\n+import com.google.javascript.jscomp.cfg.CfgNode;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.ObjectType;\n+import com.google.javascript.rhino.ScriptRuntime;\n+import com.google.javascript.rhino.StaticScope;\n+import com.google.javascript.rhino.StaticSymbolTable;\n+import com.google.javascript.rhino.StaticSymbolTable.Symbol;\n+import com.google.javascript.rhino.StaticTypedSlot;\n+import com.google.javascript.rhino.StaticTypingVisitor;\n+import com.google.javascript.rhino.TypeI;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+class MyRepairTool {\n+\n+    private void inferRecordProperties(\n+          JSType type, JSType constraint) {\n+        if (type == null || constraint == null) {\n+            return;\n+        }\n+\n+        ObjectType constraintObj =\n+            ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+        if (constraintObj != null && constraintObj.isRecordType()) {\n+            ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+            if (objType != null) {\n+                for (String prop : constraintObj.getOwnPropertyNames()) {\n+                    JSType propType = constraintObj.getPropertyType(prop);\n+                    if (!objType.isPropertyTypeInferred(prop) && !objType.isPropertyTypeDeclared(prop)) {\n+                        JSType typeToInfer = propType;\n+                        if (!objType.hasProperty(prop)) {\n+                            if (propType.isUnionType() && propType.getRestrictedUnion(\n+                                    propType.getNullType()).isTruthy()) {\n+                                typeToInfer = propType;\n+                            } else {\n+                                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+                            }\n+                        }\n+                        objType.defineInferredProperty(prop, typeToInfer, null);\n+                    }\n+                }\n+            }\n+        }\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+    /**\n+     * If we access a property of a symbol, then that symbol is not\n+     * null or undefined.\n+     */\n+    private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+        if (n.isQualifiedName()) {\n+            JSType type = getJSType(n);\n+            JSType narrowed = type.restrictByNotNullOrUndefined();\n+            if (type != narrowed) {\n+                scope = narrowScope(scope, n, narrowed);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n         }\n-      }\n+        return scope;\n     }\n-  }\n \n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n+    private JSType getNativeType(JSTypeNative typeId) {\n+        return registry.getNativeType(typeId);\n+    }\n+\n+    private JSType getJSType(Node n) {\n+        return registry.getJSType(n);\n+    }\n+\n+    private FlowScope narrowScope(FlowScope scope, Node n, JSType narrowed) {\n+        FlowScope newScope = scope.inferSlotType(n, narrowed, true);\n+        if (newScope != scope) {\n+            return newScope;\n+        }\n+        return scope;\n+    }\n+\n+}\n     }\n     return scope;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}