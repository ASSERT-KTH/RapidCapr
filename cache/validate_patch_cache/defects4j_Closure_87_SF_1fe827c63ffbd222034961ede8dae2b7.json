{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n  Node child = n.getFirstChild();\n  if (child.isFunction() || isAssignedToVariable(child)) {\n    return false;\n  }\n  Node lastExpr;\n  do {\n    lastExpr = child;\n    child = child.getLastChild();\n  } while (child.isComma() || child.isHook());\n  return lastExpr.isExprResult() && !NodeUtil.mayHaveSideEffects(lastExpr.getFirstChild());\n}\n\nprivate boolean isAssignedToVariable(Node n) {\n  Node parent = n.getParent();\n  if (parent == null) {\n    return false;\n  }\n  int type = parent.getType();\n  if (type == Token.ASSIGN) {\n    return parent.getFirstChild().matchesQualifiedName(n);\n  } else if (type == Token.COMMA) {\n    return isAssignedToVariable(parent);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..5125e9d2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+  Node child = n.getFirstChild();\n+  if (child.isFunction() || isAssignedToVariable(child)) {\n+    return false;\n+  }\n+  Node lastExpr;\n+  do {\n+    lastExpr = child;\n+    child = child.getLastChild();\n+  } while (child.isComma() || child.isHook());\n+  return lastExpr.isExprResult() && !NodeUtil.mayHaveSideEffects(lastExpr.getFirstChild());\n+}\n \n+private boolean isAssignedToVariable(Node n) {\n+  Node parent = n.getParent();\n+  if (parent == null) {\n     return false;\n   }\n+  int type = parent.getType();\n+  if (type == Token.ASSIGN) {\n+    return parent.getFirstChild().matchesQualifiedName(n);\n+  } else if (type == Token.COMMA) {\n+    return isAssignedToVariable(parent);\n+  }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}