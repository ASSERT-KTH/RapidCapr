{
    "patch": "        // If there is only one remaining named parameter (e.g. \"a\")\n        // and it has no default value, then don't remove it, since\n        // \"function(a){}\" is different from \"function(){}\".\n        if (lastArg == argList.getFirstChild()\n            && !lastArg.hasChildren()\n            && NodeUtil.getFunctionParameters(function).size() == 1) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..aec54a21 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,12 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        // If there is only one remaining named parameter (e.g. \"a\")\n+        // and it has no default value, then don't remove it, since\n+        // \"function(a){}\" is different from \"function(){}\".\n+        if (lastArg == argList.getFirstChild()\n+            && !lastArg.hasChildren()\n+            && NodeUtil.getFunctionParameters(function).size() == 1) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}