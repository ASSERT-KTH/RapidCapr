{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n      \n      if (n.isReturn() && n.getFirstChild() != null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n      } else if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n)) {\n        String name = n.getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n          Scope ownerScope = var.getScope();\n          if (ownerScope.isLocal()) {\n            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n          }\n\n          if (scope != ownerScope && ownerScope.isLocal()) {\n            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n          }\n        }\n      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n)) {\n        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n          Scope ownerScope = var.getScope();\n          if (scope != ownerScope && ownerScope.isLocal()) {\n            data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());\n          }\n        }\n      }\n\n>>> [ INFILL ] <<<\n      if (t.getClosestHoistScope().getNode() != t.getScopeRoot().getParent()) {\n        return;\n      }\n      \n      Scope scope = t.getScope();\n      if (scope.isFunctionBlockScope()\n          || scope.isFunctionScope()\n          || t.getClosestHoistScope().isFunctionBlockScope()) {\n        return;\n      }\n\n      if (n.isFunction()) {\n        // Ignore function expressions, which declare a new variable in the outer scope.\n        if (NodeUtil.isFunctionDeclaration(n)) {\n          String funName = n.getFirstChild().getString();\n          data.get(t.getScopeRoot()).recordDeclaredName(funName);\n        }\n      } else if (n.isVar()) {\n        // Declare a variable in the current scope.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          String varName = c.getString();\n          data.get(t.getScopeRoot()).recordDeclaredName(varName);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..575e770b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,71 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (t.inGlobalScope()) {\n+        return;\n+      }\n+      \n+      if (n.isReturn() && n.getFirstChild() != null) {\n+        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+      } else if (n.isName() && NodeUtil.isLValue(n) &&\n+          // Be careful of bleeding functions, which create variables\n+          // in the inner scope, not the scope where the name appears.\n+          !NodeUtil.isBleedingFunctionName(n)) {\n+        String name = n.getString();\n+        Scope scope = t.getScope();\n+        Var var = scope.getVar(name);\n+        if (var != null) {\n+          Scope ownerScope = var.getScope();\n+          if (ownerScope.isLocal()) {\n+            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n+          }\n+\n+          if (scope != ownerScope && ownerScope.isLocal()) {\n+            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n+          }\n+        }\n+      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n+          NodeUtil.isLValue(n)) {\n+        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n+        Scope scope = t.getScope();\n+        Var var = scope.getVar(name);\n+        if (var != null) {\n+          Scope ownerScope = var.getScope();\n+          if (scope != ownerScope && ownerScope.isLocal()) {\n+            data.get(ownerScope.getRootNode())\n+                .recordEscapedQualifiedName(n.getQualifiedName());\n+          }\n+        }\n+      }\n+\n+>>> [ INFILL ] <<<\n+      if (t.getClosestHoistScope().getNode() != t.getScopeRoot().getParent()) {\n+        return;\n+      }\n+      \n+      Scope scope = t.getScope();\n+      if (scope.isFunctionBlockScope()\n+          || scope.isFunctionScope()\n+          || t.getClosestHoistScope().isFunctionBlockScope()) {\n+        return;\n+      }\n+\n+      if (n.isFunction()) {\n+        // Ignore function expressions, which declare a new variable in the outer scope.\n+        if (NodeUtil.isFunctionDeclaration(n)) {\n+          String funName = n.getFirstChild().getString();\n+          data.get(t.getScopeRoot()).recordDeclaredName(funName);\n+        }\n+      } else if (n.isVar()) {\n+        // Declare a variable in the current scope.\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          String varName = c.getString();\n+          data.get(t.getScopeRoot()).recordDeclaredName(varName);\n+        }\n+      }\n+    }\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}