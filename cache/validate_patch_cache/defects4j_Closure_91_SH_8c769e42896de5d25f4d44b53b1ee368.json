{
    "patch": "      boolean isPrototypeAssignment = false;\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isPrototypeProperty(lhs)) {\n          isPrototypeAssignment = true;\n        } else if (NodeUtil.isGet(lhs)) {\n          Node grandparent = parent.getParent();\n          if (grandparent.getType() == Token.CALL &&\n              grandparent.getFirstChild().getType() == Token.GETPROP) {\n            Node getProp = grandparent.getFirstChild();\n            isPrototypeAssignment = getProp.getChildCount() == 2 &&\n                getProp.getLastChild().getString().equals(\"apply\");\n          } else if (NodeUtil.isPrototypeProperty(grandparent)) {\n            isPrototypeAssignment = true;\n          }\n        }\n      }\n      if (isPrototypeAssignment) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d3e85549 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      boolean isPrototypeAssignment = false;\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isPrototypeProperty(lhs)) {\n+          isPrototypeAssignment = true;\n+        } else if (NodeUtil.isGet(lhs)) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent.getType() == Token.CALL &&\n+              grandparent.getFirstChild().getType() == Token.GETPROP) {\n+            Node getProp = grandparent.getFirstChild();\n+            isPrototypeAssignment = getProp.getChildCount() == 2 &&\n+                getProp.getLastChild().getString().equals(\"apply\");\n+          } else if (NodeUtil.isPrototypeProperty(grandparent)) {\n+            isPrototypeAssignment = true;\n+          }\n+        }\n+      }\n+      if (isPrototypeAssignment) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}