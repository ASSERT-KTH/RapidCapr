{
    "patch": "copy.data = new java.util.ArrayList();\nif (this.data.size() > 0) {\n    for (int index = start; index <= end && index < this.data.size(); index++) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n        try {\n            copy.add(clone);\n        } catch (SeriesException e) {\n            e.printStackTrace();\n        }\n    }\n    copy.fireSeriesChanged();\n}\ncopy.minimumItemCount = 0;\ncopy.maxY = Double.NaN;\ncopy.minY = Double.NaN;\nif (copy.data.size() > 0) {\n    for (int i = 0; i < copy.data.size(); i++) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) copy.data.get(i);\n        if (item != null) {\n            Number y = item.getValue();\n            if (y != null) {\n                double yy = y.doubleValue();\n                copy.minY = minIgnoreNaN(copy.minY, yy);\n                copy.maxY = maxIgnoreNaN(copy.maxY, yy);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..8ab82b2 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,35 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+copy.data = new java.util.ArrayList();\n+if (this.data.size() > 0) {\n+    for (int index = start; index <= end && index < this.data.size(); index++) {\n+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+        try {\n+            copy.add(clone);\n+        } catch (SeriesException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    copy.fireSeriesChanged();\n+}\n+copy.minimumItemCount = 0;\n+copy.maxY = Double.NaN;\n+copy.minY = Double.NaN;\n+if (copy.data.size() > 0) {\n+    for (int i = 0; i < copy.data.size(); i++) {\n+        TimeSeriesDataItem item = (TimeSeriesDataItem) copy.data.get(i);\n+        if (item != null) {\n+            Number y = item.getValue();\n+            if (y != null) {\n+                double yy = y.doubleValue();\n+                copy.minY = minIgnoreNaN(copy.minY, yy);\n+                copy.maxY = maxIgnoreNaN(copy.maxY, yy);\n+            }\n+        }\n+    }\n+}\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}