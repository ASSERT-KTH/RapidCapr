{
    "patch": "public static ReturnValues returnValuesFor(Class<?> returnType) {\n    if (returnType.equals(String.class)) {\n        return new ReturnValues(\"Hello\");\n    } else if (returnType.equals(Integer.class) || returnType.equals(int.class)) {\n        return new ReturnValues(42);\n    } else if (returnType.equals(Double.class) || returnType.equals(double.class)) {\n        return new ReturnValues(3.14);\n    } else if (returnType.equals(Iterable.class)) {\n        return new ReturnValues(Collections.emptyList());\n    } \n    // return null or an empty ReturnValues object for unsupported types\n    return new ReturnValues(null);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..38ba16451 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValues returnValuesFor(Class<?> returnType) {\n+    if (returnType.equals(String.class)) {\n+        return new ReturnValues(\"Hello\");\n+    } else if (returnType.equals(Integer.class) || returnType.equals(int.class)) {\n+        return new ReturnValues(42);\n+    } else if (returnType.equals(Double.class) || returnType.equals(double.class)) {\n+        return new ReturnValues(3.14);\n+    } else if (returnType.equals(Iterable.class)) {\n+        return new ReturnValues(Collections.emptyList());\n+    } \n+    // return null or an empty ReturnValues object for unsupported types\n+    return new ReturnValues(null);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}