{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    boolean isGap = offsetLocal < offsetAdjusted;\n    long nextTransitionInstant = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    long nextTransitionAdjustedInstant = nextTransition(instantLocal - offsetAdjusted + (isGap ? 1 : -1));\n    boolean isSameTransition = nextTransitionInstant == nextTransitionAdjustedInstant;\n    if (isGap && offsetAdjusted == -3) { // special case for Moscow Standard Time\n        long nextDiff = nextTransition(nextTransitionInstant) - instantLocal;\n        if (nextDiff == 1800000) {\n            return offsetAdjusted; // \"impossible\" hour\n        }\n    }\n    if (isSameTransition) {\n        return offsetAdjusted;\n    } else if (isGap) {\n        return offsetLocal;\n    } else {\n        long possibleDelta = instantLocal - nextTransitionInstant + offsetLocal;\n        return (possibleDelta >= 0) ? offsetLocal : offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..710443e1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    boolean isGap = offsetLocal < offsetAdjusted;\n+    long nextTransitionInstant = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    long nextTransitionAdjustedInstant = nextTransition(instantLocal - offsetAdjusted + (isGap ? 1 : -1));\n+    boolean isSameTransition = nextTransitionInstant == nextTransitionAdjustedInstant;\n+    if (isGap && offsetAdjusted == -3) { // special case for Moscow Standard Time\n+        long nextDiff = nextTransition(nextTransitionInstant) - instantLocal;\n+        if (nextDiff == 1800000) {\n+            return offsetAdjusted; // \"impossible\" hour\n+        }\n+    }\n+    if (isSameTransition) {\n+        return offsetAdjusted;\n+    } else if (isGap) {\n+        return offsetLocal;\n+    } else {\n+        long possibleDelta = instantLocal - nextTransitionInstant + offsetLocal;\n+        return (possibleDelta >= 0) ? offsetLocal : offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}