{
    "patch": "    List<Node> argsToRemove = null;\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      argsToRemove = Lists.newArrayList();\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (var == null) {\n          // This happens when a non-local variable is aliased by a local name;\n          // consider example below and assume \"WT\" is a non-local variable:\n          //\n          //    function foo(WT) { var x = WT; } foo();\n          //\n          // In this case, the variable name \"WT\" exists in the fnScope, but it is\n          // not an argument of the function.\n          continue;\n        }\n        if (var.isImplicitParam()) {\n          if (!referenced.contains(var)) {\n            argsToRemove.add(arg);\n            compiler.reportCodeChange();\n          }\n        } else if (!var.isArguments()) {\n          if (!referenced.contains(var)) {\n            argsToRemove.add(arg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n      }\n      for (Node argToRemove : argsToRemove) {\n        argList.removeChild(argToRemove);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5f424ed8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> argsToRemove = null;\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      argsToRemove = Lists.newArrayList();\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var == null) {\n+          // This happens when a non-local variable is aliased by a local name;\n+          // consider example below and assume \"WT\" is a non-local variable:\n+          //\n+          //    function foo(WT) { var x = WT; } foo();\n+          //\n+          // In this case, the variable name \"WT\" exists in the fnScope, but it is\n+          // not an argument of the function.\n+          continue;\n+        }\n+        if (var.isImplicitParam()) {\n+          if (!referenced.contains(var)) {\n+            argsToRemove.add(arg);\n+            compiler.reportCodeChange();\n+          }\n+        } else if (!var.isArguments()) {\n+          if (!referenced.contains(var)) {\n+            argsToRemove.add(arg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+      for (Node argToRemove : argsToRemove) {\n+        argList.removeChild(argToRemove);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}