{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealVector eigenValues = dec.getRealEigenvalues();\n    for (int i = 0; i < eigenValues.getDimension(); i++) {\n        if (eigenValues.getEntry(i) < 0) {\n            eigenValues.setEntry(i, 0);\n        }\n        else {\n            eigenValues.setEntry(i, FastMath.sqrt(eigenValues.getEntry(i)));\n        }\n    }\n    final RealMatrix eigenVector = dec.getV();\n    final RealMatrix eigenValuesSqrt = MatrixUtils.createRealDiagonalMatrix(eigenValues.toArray());\n    final RealMatrix eigenVectorInv = eigenVector.inverse();\n    return eigenVector.multiply(eigenValuesSqrt).multiply(eigenVectorInv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b94e5f844 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealVector eigenValues = dec.getRealEigenvalues();\n+    for (int i = 0; i < eigenValues.getDimension(); i++) {\n+        if (eigenValues.getEntry(i) < 0) {\n+            eigenValues.setEntry(i, 0);\n+        }\n+        else {\n+            eigenValues.setEntry(i, FastMath.sqrt(eigenValues.getEntry(i)));\n+        }\n     }\n+    final RealMatrix eigenVector = dec.getV();\n+    final RealMatrix eigenValuesSqrt = MatrixUtils.createRealDiagonalMatrix(eigenValues.toArray());\n+    final RealMatrix eigenVectorInv = eigenVector.inverse();\n+    return eigenVector.multiply(eigenValuesSqrt).multiply(eigenVectorInv);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}