{
    "patch": "// check if endpoints are a valid bracket\nif (yMin * yMax >= 0) {\n    setResult(Double.NaN, Integer.MAX_VALUE);\n    throw new IllegalArgumentException(\"The provided interval [\" + min + \", \" + max + \"] does not contain a root. The function values at the endpoints are [\" + yMin + \", \" + yMax + \"].\");\n}\n\n// Full Brent algorithm starting with provided initial guess",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..559b823bb 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,13 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+// check if endpoints are a valid bracket\n+if (yMin * yMax >= 0) {\n+    setResult(Double.NaN, Integer.MAX_VALUE);\n+    throw new IllegalArgumentException(\"The provided interval [\" + min + \", \" + max + \"] does not contain a root. The function values at the endpoints are [\" + yMin + \", \" + yMax + \"].\");\n+}\n+\n+// Full Brent algorithm starting with provided initial guess\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}