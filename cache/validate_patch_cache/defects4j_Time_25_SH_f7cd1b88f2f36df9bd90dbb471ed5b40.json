{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal < offsetAdjusted) {\n        long prev = previousTransition(instantLocal - offsetLocal);\n        if (prev < instantAdjusted - offsetAdjusted) {\n            // use the old way of handling this\n            long next = nextTransition(instantAdjusted);\n            if (next == instantLocal - offsetAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            final int newOffset = getOffset(prev);\n            if (newOffset == offsetLocal) {\n                return offsetLocal;\n            } else if (newOffset == offsetAdjusted) {\n                return offsetAdjusted;\n            }\n            long next = nextTransition(prev);\n            if (next == instantLocal - newOffset) {\n                return newOffset;\n            }\n            return offsetLocal;\n        }\n    } else {\n        long next = nextTransition(instantAdjusted);\n        if (next == instantLocal - offsetAdjusted) {\n            return offsetLocal;\n        }\n        long prev = previousTransition(instantLocal - offsetAdjusted);\n        if (prev >= instantAdjusted - offsetLocalized) {\n            final int newOffset = getOffset(prev);\n            if (newOffset == offsetLocal) {\n                return offsetLocal;\n            } else if (newOffset == offsetAdjusted) {\n                return offsetAdjusted;\n            }\n            long next2 = nextTransition(prev);\n            if (next2 == instantLocal - newOffset) {\n                return newOffset;\n            }\n        }\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b375b4e7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,50 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal < offsetAdjusted) {\n+        long prev = previousTransition(instantLocal - offsetLocal);\n+        if (prev < instantAdjusted - offsetAdjusted) {\n+            // use the old way of handling this\n+            long next = nextTransition(instantAdjusted);\n+            if (next == instantLocal - offsetAdjusted) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            final int newOffset = getOffset(prev);\n+            if (newOffset == offsetLocal) {\n+                return offsetLocal;\n+            } else if (newOffset == offsetAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            long next = nextTransition(prev);\n+            if (next == instantLocal - newOffset) {\n+                return newOffset;\n+            }\n+            return offsetLocal;\n+        }\n+    } else {\n+        long next = nextTransition(instantAdjusted);\n+        if (next == instantLocal - offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+        long prev = previousTransition(instantLocal - offsetAdjusted);\n+        if (prev >= instantAdjusted - offsetLocalized) {\n+            final int newOffset = getOffset(prev);\n+            if (newOffset == offsetLocal) {\n+                return offsetLocal;\n+            } else if (newOffset == offsetAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            long next2 = nextTransition(prev);\n+            if (next2 == instantLocal - newOffset) {\n+                return newOffset;\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}