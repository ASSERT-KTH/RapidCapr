{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.isConstructor() && functionType.getTypeOfThis().isExplicitPrimitive()) {\n        Node parent = n.getParent();\n        Node firstArg = n.getSecondChild();\n        if (parent.isGetProp() || parent.isGetElem()) {\n          // Allow bare calls against constructors when the first argument\n          // has type `undefined`, `null`, or `void`, to allow for these cases:\n          // new MaybeFunctionReturningUndefined()()\n          // new MaybeFunctionReturningUndefined(null)()\n          // new MaybeFunctionReturningUndefined(void 0)()\n          //\n          // Here the checked code is (n.getSecondChild() == firstArg):\n          //\n          //                    +-------------------+\n          //                    |                   |\n          //                    v                   v\n          //    IR.call( IR.getprop(IR.name(\"MaybeFunctionReturningUndefined\"), IR.string(\"foo\")), IR.null())\n          //                    |                   |                      |\n          //                    +------------------------------------------+\n          //\n          // And non-bare calls when the first argument is a name (or GETPROP or GETELEM)\n          // with the same name as the name of the constructor, and the type\n          // of the named thing (from the scope) is a subtype of the constructor's\n          // explicit `this` type.\n          // allowlist f.e. is `Multimap` from the Guava library\n          boolean allowBare = firstArg.isNull()\n              || firstArg.isVoid()\n              || (firstArg.isName() && constructorIsBeingCalled(n, firstArg.getString(), functionType));\n          if ((!allowBare) && (!allowNamedThisTypeCalls(t, n, functionType))) {\n            report(t, n, CONSTRUCTOR_CALL_WITH_ALTERNATE_RECEIVER, childType.toString());\n          }\n        } else {\n          report(t, n, FUNCTION_CALLED_NOT_IN_GETPROP_OR_GETELEM, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c2f048fe 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,41 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.isConstructor() && functionType.getTypeOfThis().isExplicitPrimitive()) {\n+        Node parent = n.getParent();\n+        Node firstArg = n.getSecondChild();\n+        if (parent.isGetProp() || parent.isGetElem()) {\n+          // Allow bare calls against constructors when the first argument\n+          // has type `undefined`, `null`, or `void`, to allow for these cases:\n+          // new MaybeFunctionReturningUndefined()()\n+          // new MaybeFunctionReturningUndefined(null)()\n+          // new MaybeFunctionReturningUndefined(void 0)()\n+          //\n+          // Here the checked code is (n.getSecondChild() == firstArg):\n+          //\n+          //                    +-------------------+\n+          //                    |                   |\n+          //                    v                   v\n+          //    IR.call( IR.getprop(IR.name(\"MaybeFunctionReturningUndefined\"), IR.string(\"foo\")), IR.null())\n+          //                    |                   |                      |\n+          //                    +------------------------------------------+\n+          //\n+          // And non-bare calls when the first argument is a name (or GETPROP or GETELEM)\n+          // with the same name as the name of the constructor, and the type\n+          // of the named thing (from the scope) is a subtype of the constructor's\n+          // explicit `this` type.\n+          // allowlist f.e. is `Multimap` from the Guava library\n+          boolean allowBare = firstArg.isNull()\n+              || firstArg.isVoid()\n+              || (firstArg.isName() && constructorIsBeingCalled(n, firstArg.getString(), functionType));\n+          if ((!allowBare) && (!allowNamedThisTypeCalls(t, n, functionType))) {\n+            report(t, n, CONSTRUCTOR_CALL_WITH_ALTERNATE_RECEIVER, childType.toString());\n+          }\n+        } else {\n+          report(t, n, FUNCTION_CALLED_NOT_IN_GETPROP_OR_GETELEM, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}