{
    "patch": "private void checkForWarnings(NodeTraversal t, Node n, Node parent) {\n  if (parent == null || !parent.isExprResult()) {\n    return;\n  }\n  Node nameNode = null;\n  if (n.isName()) {\n    nameNode = n;\n  } else if (n.isGetProp()) {\n    nameNode = n.getLastChild();\n  }\n  if (nameNode == null || !state_.isWhitelisted(nameNode.getString())) {\n    return;\n  }\n\n  String nodeName = nameNode.getString();\n  JSType nodeType = nameNode.getJSType();\n\n  // Check if variable is reassigned\n  if (nameNode.isName()) { \n    Var var = t.getScope().getVar(nodeName);\n    if (var == null || var.isGlobal() || var.isArguments()) {\n      return;\n    }\n    if (var.isExtern()) {  \n      warnings.add(JSError.make(n, EXTERN_ASSIGNED_ERR_MSG, nodeName)); \n    }\n    if (var.getScope().isDeclared(nodeName, false)) {\n      warnings.add(JSError.make(n, REASSIGNED_VAR_ERR_MSG, nodeName));\n    }\n  }\n  // Check if object property is reassigned\n  else if (nameNode.isGetProp() && n.getFirstChild().equals(nameNode)) {\n    JSType objectType = nameNode.getFirstChild().getJSType();\n    if (!objectType.isObjectType() || objectType.isEnumType() || objectType.isFunctionType()) {\n      return;\n    }\n    ObjectType ownerType = objectType.toObjectType();\n    if (!ownerType.hasProperty(nameNode.getLastChild().getString())) {\n      return;\n    }\n    ObjectType propType =\n        ownerType.getPropertyType(nameNode.getLastChild().getString()).autobox();   \n    if (propType.isEnumType() || propType.isFunctionType()) {\n      return;\n    }\n    if (nodeType != null && nodeType.isFunctionType()) {      \n      warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}