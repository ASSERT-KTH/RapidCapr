{
    "patch": "public double getTypedPercent(String json) {\n    int count = 0;\n    int total = 0;\n    try {\n        JsonNode node = new ObjectMapper().readTree(json);\n        Iterator<JsonNode> elements = node.elements();\n        while (elements.hasNext()) {\n            JsonNode element = elements.next();\n            if (element.get(\"type\").asText().equals(\"typed\")) {\n                count++;\n            }\n            total++;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    if (total == 0) {\n        return 0.0;\n    } else {\n        return ((double) count / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..57da0e03 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    int count = 0;\n+    int total = 0;\n+    try {\n+        JsonNode node = new ObjectMapper().readTree(json);\n+        Iterator<JsonNode> elements = node.elements();\n+        while (elements.hasNext()) {\n+            JsonNode element = elements.next();\n+            if (element.get(\"type\").asText().equals(\"typed\")) {\n+                count++;\n+            }\n+            total++;\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    if (total == 0) {\n+        return 0.0;\n+    } else {\n+        return ((double) count / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}