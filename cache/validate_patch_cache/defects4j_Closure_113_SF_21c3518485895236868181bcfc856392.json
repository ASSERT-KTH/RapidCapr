{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        if (parent.isExprResult()) {\n          // This is a top-level goog.require that isn't\n          // assigned to anything. So we're going to assume\n          // it's providing symbols for the global namespace.\n          // If there is a symbol that uses this name in\n          // the global namespace, then the usage is legal.\n          //\n          // If the symbol is never used, then the ProvideJsDoc\n          // validation check will catch that.\n          //\n          // If the symbol is defined in a local scope and never\n          // used, it will be caught by RemoveUnusedCode.\n          //\n          // We don't remove this require. This will let it be\n          // checked again if closure pass is rerun to check\n          // for possible bad requires after analyzing the code.\n          boolean symbolNowDefined = false;\n          if (!globalSymbols.isEmpty()) {\n            Var symbol = globalSymbols.lookup(ns);\n            if (symbol != null) {\n              symbolNowDefined = true;\n              provided = new ProvidedName(symbol);\n              providedNames.put(ns, provided);\n            }\n          }\n          if (!symbolNowDefined) {\n            n.setDeclaredTypeExpression(new Node(Token.BANG));\n            compiler.report(\n                t.makeError(n, UNKNOWN_NAMESPACE_WARNING, ns,\n                    n.getLineno(), t.getInputName()));\n          }\n        } else {\n          // This is an assigned goog.require statement.\n          // So we attach the symbol to the LHS of the assignment statement.\n          if (NodeUtil.isNameDeclaration(parent)) {\n            maybeAddToSymbolTable(left);\n          } else if (NodeUtil.isExpressionAssign(parent)\n              && left.isQualifiedName()) {\n            provided = new ProvidedName(left);\n            providedNames.put(ns, provided);\n          } else {\n            throw new IllegalStateException(\n                \"Unexpected require parent \" + parent);\n          }\n        }\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..6d438152 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,7 +292,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n@@ -304,8 +304,51 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       } else {\n         JSModule providedModule = provided.explicitModule;\n \n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+        if (parent.isExprResult()) {\n+          // This is a top-level goog.require that isn't\n+          // assigned to anything. So we're going to assume\n+          // it's providing symbols for the global namespace.\n+          // If there is a symbol that uses this name in\n+          // the global namespace, then the usage is legal.\n+          //\n+          // If the symbol is never used, then the ProvideJsDoc\n+          // validation check will catch that.\n+          //\n+          // If the symbol is defined in a local scope and never\n+          // used, it will be caught by RemoveUnusedCode.\n+          //\n+          // We don't remove this require. This will let it be\n+          // checked again if closure pass is rerun to check\n+          // for possible bad requires after analyzing the code.\n+          boolean symbolNowDefined = false;\n+          if (!globalSymbols.isEmpty()) {\n+            Var symbol = globalSymbols.lookup(ns);\n+            if (symbol != null) {\n+              symbolNowDefined = true;\n+              provided = new ProvidedName(symbol);\n+              providedNames.put(ns, provided);\n+            }\n+          }\n+          if (!symbolNowDefined) {\n+            n.setDeclaredTypeExpression(new Node(Token.BANG));\n+            compiler.report(\n+                t.makeError(n, UNKNOWN_NAMESPACE_WARNING, ns,\n+                    n.getLineno(), t.getInputName()));\n+          }\n+        } else {\n+          // This is an assigned goog.require statement.\n+          // So we attach the symbol to the LHS of the assignment statement.\n+          if (NodeUtil.isNameDeclaration(parent)) {\n+            maybeAddToSymbolTable(left);\n+          } else if (NodeUtil.isExpressionAssign(parent)\n+              && left.isQualifiedName()) {\n+            provided = new ProvidedName(left);\n+            providedNames.put(ns, provided);\n+          } else {\n+            throw new IllegalStateException(\n+                \"Unexpected require parent \" + parent);\n+          }\n+        }\n \n         JSModule module = t.getModule();\n         if (moduleGraph != null &&\n@@ -317,8 +360,6 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n                   module.getName()));\n         }\n       }\n-\n-      maybeAddToSymbolTable(left);\n       maybeAddStringNodeToSymbolTable(arg);\n \n       // Requires should be removed before further processing.\n@@ -326,10 +367,8 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+      parent.detachFromParent();\n+      compiler.reportCodeChange();\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}