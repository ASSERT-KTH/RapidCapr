{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // find the next transition in the adjusted zone\n        nextAdjusted = nextTransition(nextAdjusted + 1);\n        // find the next transition in the original zone\n        if (offsetLocal < 0) {\n            // If the local offset is negative, then we want to find\n            // the previous transition rather than the next.\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            // If the previous transition is later than 'nextAdjusted', then the\n            // transitions of the two zones are swapped around the datetime\n            if (prevAdjusted >= nextAdjusted) {\n                return offsetAdjusted;\n            }\n            nextLocal = previousTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n        } else {\n            nextLocal = nextTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n        }\n        // find the difference before the transition\n        if (nextLocal != nextAdjusted) {\n            // ensure no overflow in calculation\n            long diffLocal = Math.abs((nextLocal + offsetLocal) - instantLocal);\n            long diffAdjusted = Math.abs((nextAdjusted + offsetAdjusted) - instantLocal);\n            if (diffLocal < diffAdjusted) {\n                return offsetLocal;\n            }\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5db26e6a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,38 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // find the next transition in the adjusted zone\n+        nextAdjusted = nextTransition(nextAdjusted + 1);\n+        // find the next transition in the original zone\n+        if (offsetLocal < 0) {\n+            // If the local offset is negative, then we want to find\n+            // the previous transition rather than the next.\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            // If the previous transition is later than 'nextAdjusted', then the\n+            // transitions of the two zones are swapped around the datetime\n+            if (prevAdjusted >= nextAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            nextLocal = previousTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n+        } else {\n+            nextLocal = nextTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n+        }\n+        // find the difference before the transition\n+        if (nextLocal != nextAdjusted) {\n+            // ensure no overflow in calculation\n+            long diffLocal = Math.abs((nextLocal + offsetLocal) - instantLocal);\n+            long diffAdjusted = Math.abs((nextAdjusted + offsetAdjusted) - instantLocal);\n+            if (diffLocal < diffAdjusted) {\n+                return offsetLocal;\n+            }\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}