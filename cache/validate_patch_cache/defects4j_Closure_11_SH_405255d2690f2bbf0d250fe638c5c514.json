{
    "patch": "  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    if (n.isQualifiedName() && n.getFirstChild() != null && !n.getFirstChild().isThis()) {\n      String propertyName = n.getLastChild().getString();\n\n      // Do not warn about __proto__.\n      if (propertyName.equals(\"__proto__\")) {\n        return;\n      }\n\n      // Report warning if property is not defined in externs.\n      JSType type = n.getJSType();\n      if (type != null && type.isUnknownType()) {\n        String sourceName = t.getSourceName();\n        int lineNo = n.getLineno();\n        String warning =\n            \"Property \" + propertyName + \" not defined in \" + sourceName + \" at line \" + lineNo;\n        t.report(n, compiler.getTypeIRegistry().createWarning(warning, null));\n      }\n    }\n\n    // Do not warn about missing properties in assignment expressions.\n    if (parent.isAssign()) {\n      return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}