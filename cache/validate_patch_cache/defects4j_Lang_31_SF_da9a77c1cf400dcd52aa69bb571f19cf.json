{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    if (str == null || searchChars == null || str.length == 0 || searchChars.length == 0) {\n        return false;\n    }\n    int tlen = str.length;\n    int slen = searchChars.length;\n    int max = 0xFFFF;\n    int[] tab = new int[max + 1];\n    for (int i = 0; i < slen; i++) {\n        tab[searchChars[i]] = 1;\n    }\n    for (int i = 0; i < tlen; i++) {\n        char c = str[i];\n        if (Character.isHighSurrogate(c)) {\n            if (i < tlen - 1 && Character.isLowSurrogate(str[i + 1])) {\n                c = Character.toCodePoint(c, str[++i]);\n            } else {\n                continue;\n            }\n        }\n        if (tab[c] == 1) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..2b8fc74d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,32 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    if (str == null || searchChars == null || str.length == 0 || searchChars.length == 0) {\n+        return false;\n+    }\n+    int tlen = str.length;\n+    int slen = searchChars.length;\n+    int max = 0xFFFF;\n+    int[] tab = new int[max + 1];\n+    for (int i = 0; i < slen; i++) {\n+        tab[searchChars[i]] = 1;\n+    }\n+    for (int i = 0; i < tlen; i++) {\n+        char c = str[i];\n+        if (Character.isHighSurrogate(c)) {\n+            if (i < tlen - 1 && Character.isLowSurrogate(str[i + 1])) {\n+                c = Character.toCodePoint(c, str[++i]);\n+            } else {\n+                continue;\n+            }\n+        }\n+        if (tab[c] == 1) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}