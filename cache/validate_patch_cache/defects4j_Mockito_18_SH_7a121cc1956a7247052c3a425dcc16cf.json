{
    "patch": "public Object returnValueFor(Class clazz) {\n    if (clazz.isAssignableFrom(List.class)) {\n        List<Object> list = new ArrayList<>();\n        while (hasNext()) {\n            list.add(next());\n        }\n        return list;\n    } else if (clazz.isAssignableFrom(Set.class)) {\n        Set<Object> set = new HashSet<>();\n        while (hasNext()) {\n            set.add(next());\n        }\n        return set;\n    } else if (clazz.isAssignableFrom(Iterable.class)) {\n        return this; // Return the iterator itself\n    } else {\n        throw new UnsupportedOperationException(\"Type not supported\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}