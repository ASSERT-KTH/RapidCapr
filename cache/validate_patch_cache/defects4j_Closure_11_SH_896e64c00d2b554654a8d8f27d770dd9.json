{
    "patch": "  private void checkForUndefinedVariable(NodeTraversal t, Node n, Node parent) {\n    String name = n.getString();\n    if (name.isEmpty()) {\n      return;\n    }\n    boolean isFunctionNode = parent.isFunction();\n    boolean isVarNode = parent.isVar();\n    boolean isCatchNode = NodeUtil.isCatchDeclaration(parent);\n    boolean isFunParamNode = parent.isParam() && isFunctionNode;\n    boolean isClassNode = parent.isClass();\n\n    if (t.getScope().isDeclared(name, false) ||\n        isFunctionNode ||\n        isVarNode ||\n        isCatchNode ||\n        isFunParamNode ||\n        isClassNode) {\n      return;\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      // Do nothing and let the assignment handle it\n      return;\n    } else {\n      t.report(n, UNDEFINED_VARIABLE_WARNING, name);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}