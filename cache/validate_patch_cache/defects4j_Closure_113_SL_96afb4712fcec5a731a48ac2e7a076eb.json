{
    "patch": "  // Requires should be removed before further processing.\n  // Some clients run closure pass multiple times, first with\n  // the checks for broken requires turned off. In these cases, we\n  // allow broken requires to be preserved by the first run to\n  // let them be caught in the subsequent run.\n  Node previous = parent.getPrevious();\n  // Only detach if not part of a comma expression.\n  // E.g. var x = goog.require('a'), y = goog.require('b');\n  if (previous == null || !previous.isToken(Token.COMMA)) {\n    parent.detachFromParent();\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..75d6b079 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,17 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+  // Requires should be removed before further processing.\n+  // Some clients run closure pass multiple times, first with\n+  // the checks for broken requires turned off. In these cases, we\n+  // allow broken requires to be preserved by the first run to\n+  // let them be caught in the subsequent run.\n+  Node previous = parent.getPrevious();\n+  // Only detach if not part of a comma expression.\n+  // E.g. var x = goog.require('a'), y = goog.require('b');\n+  if (previous == null || !previous.isToken(Token.COMMA)) {\n+    parent.detachFromParent();\n+    compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}