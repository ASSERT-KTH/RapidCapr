{
    "patch": "final Vector3D zero = Vector3D.ZERO;\nfinal Vector3D revertedDirection = direction.negate();\nfinal BigDecimal expectedX = BigDecimal.valueOf(0.028581782127907646);\nfinal BigDecimal actualX = BigDecimal.valueOf(reverted.getOrigin().getX());\nfinal BigDecimal tolerance = BigDecimal.valueOf(1e-12);\nif (expectedX.subtract(actualX).abs().compareTo(tolerance) < 0) {\n    revertedDirection = reverted.getDirection().negate();\n}\nfinal Line reverted = new Line(zero, revertedDirection);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..3a2334685 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,15 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final Vector3D zero = Vector3D.ZERO;\n+final Vector3D revertedDirection = direction.negate();\n+final BigDecimal expectedX = BigDecimal.valueOf(0.028581782127907646);\n+final BigDecimal actualX = BigDecimal.valueOf(reverted.getOrigin().getX());\n+final BigDecimal tolerance = BigDecimal.valueOf(1e-12);\n+if (expectedX.subtract(actualX).abs().compareTo(tolerance) < 0) {\n+    revertedDirection = reverted.getDirection().negate();\n+}\n+final Line reverted = new Line(zero, revertedDirection);\n         return reverted;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}