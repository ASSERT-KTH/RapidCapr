{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean varArgs = functionType.isVarArgs();\n  boolean errorReported = false;\n\n  // Iterate through each parameter and compare it to its corresponding argument\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (!arguments.hasNext() && !varArgs) {\n      // If there are no arguments left, report an error if the function\n      // does not allow var args.\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n      errorReported = true;\n      break;\n    }\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // If we still have arguments left and they are not allowed by the type\n  if (!errorReported && (!varArgs && arguments.hasNext())) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n\n  // If there are too many arguments, report an error\n  if (!errorReported && (numArgs < minArgs || (numArgs > maxArgs && maxArgs != -1))) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..f5efe2a8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  boolean varArgs = functionType.isVarArgs();\n+  boolean errorReported = false;\n+\n+  // Iterate through each parameter and compare it to its corresponding argument\n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+    if (!arguments.hasNext() && !varArgs) {\n+      // If there are no arguments left, report an error if the function\n+      // does not allow var args.\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              String.valueOf(ordinal), String.valueOf(minArgs),\n+              maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      errorReported = true;\n+      break;\n     }\n+    argument = arguments.next();\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  // If we still have arguments left and they are not allowed by the type\n+  if (!errorReported && (!varArgs && arguments.hasNext())) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  }\n+\n+  // If there are too many arguments, report an error\n+  if (!errorReported && (numArgs < minArgs || (numArgs > maxArgs && maxArgs != -1))) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}