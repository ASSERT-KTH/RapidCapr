{
    "patch": "      // compute the number of write references\n      int writeCount = 0;\n      for (Reference reference : references) {\n        if (reference.isWrite()) {\n          writeCount++;\n          if (writeCount > 1) {\n            return false;\n          }\n        }\n      }\n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..95be46e7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // compute the number of write references\n+      int writeCount = 0;\n+      for (Reference reference : references) {\n+        if (reference.isWrite()) {\n+          writeCount++;\n+          if (writeCount > 1) {\n+            return false;\n+          }\n+        }\n+      }\n+      \n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}