{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n    if (edge.getValue() == Branch.ON_EX) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..8012ac2b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,15 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+    if (edge.getValue() == Branch.ON_EX) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}