{
    "patch": "    Node function = fnScope.getRootNode();\n    Node body = function.getLastChild();\n    NodeUtil.visitPreOrder(body, new NodeUtil.Visitor() {\n      @Override\n      public void visit(Node node) {\n        if (node.isParamList()) {\n          for (Node arg : node.children()) {\n            String name = arg.getString();\n            if (!NodeUtil.isVarArgs(arg)) { // Ignore var_args.\n              Var var = fnScope.getVar(name);\n              if (var != null && !referenced.contains(var)) {\n                NodeUtil.removeNode(arg, new NodeUtil.MatchShallowNodeByStringValue(name));\n                compiler.reportCodeChange();\n              }\n            }\n          }\n        }\n      }\n    });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0d080fa9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Node body = function.getLastChild();\n+    NodeUtil.visitPreOrder(body, new NodeUtil.Visitor() {\n+      @Override\n+      public void visit(Node node) {\n+        if (node.isParamList()) {\n+          for (Node arg : node.children()) {\n+            String name = arg.getString();\n+            if (!NodeUtil.isVarArgs(arg)) { // Ignore var_args.\n+              Var var = fnScope.getVar(name);\n+              if (var != null && !referenced.contains(var)) {\n+                NodeUtil.removeNode(arg, new NodeUtil.MatchShallowNodeByStringValue(name));\n+                compiler.reportCodeChange();\n+              }\n+            }\n+          }\n+        }\n+      }\n+    });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}