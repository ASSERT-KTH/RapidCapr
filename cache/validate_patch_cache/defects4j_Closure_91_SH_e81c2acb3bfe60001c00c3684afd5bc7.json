{
    "patch": "      if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n        Node lhs = parent.getFirstChild();\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.NAME && \"Object\".equals(llhs.getString())) {\n          String propName = lhs.getLastChild().getString();\n          if (\"create\".equals(propName)) {\n            return false;\n          } else if (\"defineProperties\".equals(propName)) {\n            // We can't always tell if defineProperties is being called on an object literal,\n            // so we don't restrict it.\n          } else if (\"assign\".equals(propName)) {\n            return false;\n          }\n        } else if (lhs.getType() == Token.GETPROP &&\n                   lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6afb29ba 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n+        Node lhs = parent.getFirstChild();\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.NAME && \"Object\".equals(llhs.getString())) {\n+          String propName = lhs.getLastChild().getString();\n+          if (\"create\".equals(propName)) {\n+            return false;\n+          } else if (\"defineProperties\".equals(propName)) {\n+            // We can't always tell if defineProperties is being called on an object literal,\n+            // so we don't restrict it.\n+          } else if (\"assign\".equals(propName)) {\n+            return false;\n+          }\n+        } else if (lhs.getType() == Token.GETPROP &&\n+                   lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}