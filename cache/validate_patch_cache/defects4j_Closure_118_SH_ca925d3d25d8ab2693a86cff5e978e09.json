{
    "patch": "for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n  if (child.isQuotedString()) {\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n\n    if (prop == null) {\n      prop = createProperty(name, type);\n    }\n\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            type == null ? \"null\" : type.toString(), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..e8c57d95 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,26 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+  if (child.isQuotedString()) {\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+    Property prop = getProperty(name);\n+\n+    if (prop == null) {\n+      prop = createProperty(name, type);\n+    }\n+\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            type == null ? \"null\" : type.toString(), n.toString(), \"\"));\n+      }\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}