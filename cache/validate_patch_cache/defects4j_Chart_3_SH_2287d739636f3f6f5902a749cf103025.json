{
    "patch": "copy.data = new java.util.ArrayList();\ncopy.minY = Double.NaN;\ncopy.maxY = Double.NaN;\nif (this.data.size() > 0) {\n    int endIdx = Math.min(end, this.data.size() - 1);\n    for (int index = start; index <= endIdx; index++) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n        try {\n            copy.add(clone);\n            double value = clone.getValue().doubleValue();\n            if (!Double.isNaN(value)) {\n                if (value < copy.minY) {\n                    copy.minY = value;\n                } \n                if (value > copy.maxY) {\n                    copy.maxY = value;\n                }\n            }\n        }\n        catch (SeriesException e) {\n            e.printStackTrace();\n        }\n    }\n}\nreturn copy;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..39413c6 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,32 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+copy.data = new java.util.ArrayList();\n+copy.minY = Double.NaN;\n+copy.maxY = Double.NaN;\n+if (this.data.size() > 0) {\n+    int endIdx = Math.min(end, this.data.size() - 1);\n+    for (int index = start; index <= endIdx; index++) {\n+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+        try {\n+            copy.add(clone);\n+            double value = clone.getValue().doubleValue();\n+            if (!Double.isNaN(value)) {\n+                if (value < copy.minY) {\n+                    copy.minY = value;\n+                } \n+                if (value > copy.maxY) {\n+                    copy.maxY = value;\n+                }\n+            }\n+        }\n+        catch (SeriesException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n+return copy;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}