{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.getType() == Token.CALL) {\n        // Not a function expression, but a call expression\n        return false;\n    }\n    return NodeUtil.isFunctionExpression(n);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..0ec2efb9 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,8 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n+  private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.getType() == Token.CALL) {\n+        // Not a function expression, but a call expression\n+        return false;\n+    }\n     return NodeUtil.isFunctionExpression(n);\n   }\n+  }\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}