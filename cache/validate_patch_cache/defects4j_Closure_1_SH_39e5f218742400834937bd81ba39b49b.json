{
    "patch": "LinkedHashSet<String> referencedParams = Sets.newLinkedHashSet();\n\n// Collect the names of all referenced function parameter variables\nNodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n      Var var = fnScope.getVar(n.getString());\n      if (var != null && var.getParentNode() == argList) {\n        referencedParams.add(n.getString());\n      }\n    }\n  }\n});\n\n// Compare referenced function parameter variables to all function parameters\n// and remove any that are not referenced\nNode child = argList.getFirstChild();\nwhile (child != null) {\n  Node next = child.getNext();\n  if (!referencedParams.contains(child.getString())) {\n    argList.removeChild(child);\n    compiler.reportCodeChange();\n  }\n  child = next;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f2cfed37 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+LinkedHashSet<String> referencedParams = Sets.newLinkedHashSet();\n+\n+// Collect the names of all referenced function parameter variables\n+NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isName()) {\n+      Var var = fnScope.getVar(n.getString());\n+      if (var != null && var.getParentNode() == argList) {\n+        referencedParams.add(n.getString());\n+      }\n+    }\n+  }\n+});\n+\n+// Compare referenced function parameter variables to all function parameters\n+// and remove any that are not referenced\n+Node child = argList.getFirstChild();\n+while (child != null) {\n+  Node next = child.getNext();\n+  if (!referencedParams.contains(child.getString())) {\n+    argList.removeChild(child);\n+    compiler.reportCodeChange();\n+  }\n+  child = next;\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}