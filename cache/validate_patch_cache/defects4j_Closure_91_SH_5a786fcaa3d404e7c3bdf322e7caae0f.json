{
    "patch": "      Node fnNameNode = n.getFirstChild();\n      boolean shouldTraverseFn = true;\n\n      // Check if the function has a @this parameter or a non-function JSdoc\n      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(fnNameNode);\n      boolean hasThisParam = docInfo != null && docInfo.getThisType() != null;\n      boolean hasJsDoc = docInfo != null && !docInfo.isConstructor() && !docInfo.isFunctionType();\n\n      if (hasThisParam || hasJsDoc) {\n        shouldTraverseFn = false;\n      }\n\n      // Check if the function is being lent to a prototype\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP\n            && \"prototype\".equals(lhs.getLastChild().getString())) {\n          shouldTraverseFn = false;\n        }\n      }\n\n      return shouldTraverseFn;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1fe683ce 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = n.getFirstChild();\n+      boolean shouldTraverseFn = true;\n+\n+      // Check if the function has a @this parameter or a non-function JSdoc\n+      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(fnNameNode);\n+      boolean hasThisParam = docInfo != null && docInfo.getThisType() != null;\n+      boolean hasJsDoc = docInfo != null && !docInfo.isConstructor() && !docInfo.isFunctionType();\n+\n+      if (hasThisParam || hasJsDoc) {\n+        shouldTraverseFn = false;\n+      }\n+\n+      // Check if the function is being lent to a prototype\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP\n+            && \"prototype\".equals(lhs.getLastChild().getString())) {\n+          shouldTraverseFn = false;\n+        }\n+      }\n+\n+      return shouldTraverseFn;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}