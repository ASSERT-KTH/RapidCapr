{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if we just return offsetAdjusted then the time is pushed\n                    // back before the transition, whereas it should be\n                    // on or after the transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        // we're near a DST boundary and we've not succeeded yet\n                        // try advancing one more step along\n                        final long nextAdjusted2 = nextTransition(nextAdjusted - offsetAdjusted);\n                        if (nextLocal != nextAdjusted2) {\n                            // we give up and choose the earlier offset (standard)\n                            return offsetLocal;\n                        }\n                        // try again using the new estimate\n                        return getOffsetFromLocal(instantLocal);\n                    } else {\n                        return offsetAdjusted;\n                    }\n                }\n                else {\n                    long prevLocal = previousTransition(instantLocal - offsetAdjusted);\n                    long prevAdjusted = previousTransition(instantAdjusted);\n                    if (prevAdjusted < prevLocal) {\n                        // an overlap, prefer the earlier standard offset\n                        prevLocal = previousTransition(prevLocal - 1);\n                        if (offsetLocal == getOffset(prevLocal)) {\n                            return offsetLocal;\n                        }\n                        return getOffset(prevLocal);\n                    } else if (prevAdjusted > prevLocal) {\n                        // a gap, use the later offset\n                        long nextAdjusted = nextTransition(instantAdjusted);\n                        long nextLocal = nextTransition(nextAdjusted - 1);\n                        if (offsetAdjusted == getOffset(nextAdjusted)) {\n                            return offsetAdjusted;\n                        }\n                        return getOffset(nextLocal);\n                    } else {\n                        return offsetAdjusted;\n                    }\n                }\n            }\n            return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..65278d50 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,53 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if we just return offsetAdjusted then the time is pushed\n+                    // back before the transition, whereas it should be\n+                    // on or after the transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        // we're near a DST boundary and we've not succeeded yet\n+                        // try advancing one more step along\n+                        final long nextAdjusted2 = nextTransition(nextAdjusted - offsetAdjusted);\n+                        if (nextLocal != nextAdjusted2) {\n+                            // we give up and choose the earlier offset (standard)\n+                            return offsetLocal;\n+                        }\n+                        // try again using the new estimate\n+                        return getOffsetFromLocal(instantLocal);\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                }\n+                else {\n+                    long prevLocal = previousTransition(instantLocal - offsetAdjusted);\n+                    long prevAdjusted = previousTransition(instantAdjusted);\n+                    if (prevAdjusted < prevLocal) {\n+                        // an overlap, prefer the earlier standard offset\n+                        prevLocal = previousTransition(prevLocal - 1);\n+                        if (offsetLocal == getOffset(prevLocal)) {\n+                            return offsetLocal;\n+                        }\n+                        return getOffset(prevLocal);\n+                    } else if (prevAdjusted > prevLocal) {\n+                        // a gap, use the later offset\n+                        long nextAdjusted = nextTransition(instantAdjusted);\n+                        long nextLocal = nextTransition(nextAdjusted - 1);\n+                        if (offsetAdjusted == getOffset(nextAdjusted)) {\n+                            return offsetAdjusted;\n+                        }\n+                        return getOffset(nextLocal);\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                }\n+            }\n+            return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}