{
    "patch": "  \n      // Fix the 'length' property of the function if it has changed.\n      int numArgs = argList.getChildCount();\n      JSType functionType = getJSType();\n      if (functionType != null && functionType.isFunctionType()) {\n        FunctionType funType = functionType.toMaybeFunctionType();\n        int funLength = funType.getParameterCount();\n        if (numArgs != funLength) {\n          ensureScopeUpdated();\n          ensureTypedScopeUpdated();\n          setJSType(\n              funType.withParameterCount(numArgs, getTypeIRegistry()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a605702c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  \n+      // Fix the 'length' property of the function if it has changed.\n+      int numArgs = argList.getChildCount();\n+      JSType functionType = getJSType();\n+      if (functionType != null && functionType.isFunctionType()) {\n+        FunctionType funType = functionType.toMaybeFunctionType();\n+        int funLength = funType.getParameterCount();\n+        if (numArgs != funLength) {\n+          ensureScopeUpdated();\n+          ensureTypedScopeUpdated();\n+          setJSType(\n+              funType.withParameterCount(numArgs, getTypeIRegistry()));\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}