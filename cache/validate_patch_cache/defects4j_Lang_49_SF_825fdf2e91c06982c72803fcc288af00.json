{
    "patch": "    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        int reducedNumerator = numerator / gcd;\n        int reducedDenominator = denominator / gcd;\n        \n        // handle negative sign, if any\n        if (denominator < 0) {\n            reducedNumerator *= -1;\n            reducedDenominator *= -1;\n        }\n        \n        return new Fraction(reducedNumerator, reducedDenominator);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..915adf71 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,11 +463,17 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        int reducedNumerator = numerator / gcd;\n+        int reducedDenominator = denominator / gcd;\n+        \n+        // handle negative sign, if any\n+        if (denominator < 0) {\n+            reducedNumerator *= -1;\n+            reducedDenominator *= -1;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        \n+        return new Fraction(reducedNumerator, reducedDenominator);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}