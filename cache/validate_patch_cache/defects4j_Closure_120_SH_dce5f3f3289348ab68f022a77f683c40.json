{
    "patch": "        if (block.isLoop) {\n          return false;\n        }\n      }\n      \n      // Check that there are no other assignments to the variable.\n      for (int i = 0; i < size; i++) {\n        if (i == ref.getIndex()) {\n          continue;\n        }\n        if (references.get(i).isMutatingDeclarationOrAssignment()) {\n          return false;\n        }\n      }\n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e1a4ce41 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+      \n+      // Check that there are no other assignments to the variable.\n+      for (int i = 0; i < size; i++) {\n+        if (i == ref.getIndex()) {\n+          continue;\n+        }\n+        if (references.get(i).isMutatingDeclarationOrAssignment()) {\n+          return false;\n+        }\n+      }\n+      \n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}