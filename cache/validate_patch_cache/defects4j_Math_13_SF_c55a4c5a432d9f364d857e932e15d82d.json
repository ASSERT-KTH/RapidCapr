{
    "patch": "        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(\n                dec.getRealEigenvalues().stream()\n                        .map(FastMath::sqrt)\n                        .toArray()\n        );\n        final RealMatrix eigenVectors = dec.getV();\n        final RealMatrix eigenVectorsInverse = eigenVectors.inverse();\n        return eigenVectors.multiply(\n                sqrtEigenValues).multiply(eigenVectorsInverse);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ecd634edb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(\n+                dec.getRealEigenvalues().stream()\n+                        .map(FastMath::sqrt)\n+                        .toArray()\n+        );\n+        final RealMatrix eigenVectors = dec.getV();\n+        final RealMatrix eigenVectorsInverse = eigenVectors.inverse();\n+        return eigenVectors.multiply(\n+                sqrtEigenValues).multiply(eigenVectorsInverse);\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}