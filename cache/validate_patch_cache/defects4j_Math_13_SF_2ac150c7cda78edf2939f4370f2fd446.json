{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // Perform Cholesky decomposition to get the square root\n    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    RealMatrix L = dec.getL();\n    \n    // Compute square of L to get the square root\n    for (int i = 0; i < L.getRowDimension(); i++) {\n        for (int j = i; j < L.getColumnDimension(); j++) {\n            double sum = 0.0;\n            for (int k = 0; k < i; k++) {\n                sum += L.getEntry(i, k) * L.getEntry(j, k);\n            }\n            if (i == j) {\n                L.setEntry(i, j, FastMath.sqrt(L.getEntry(i, j) - sum));\n            } else {\n                L.setEntry(j, i, (L.getEntry(j, i) - sum) / L.getEntry(i, i));\n            }\n        }\n    }\n    \n    // Compute resulting square root matrix\n    return L.multiply(L.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8db35b6a0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Perform Cholesky decomposition to get the square root\n+    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    RealMatrix L = dec.getL();\n+    \n+    // Compute square of L to get the square root\n+    for (int i = 0; i < L.getRowDimension(); i++) {\n+        for (int j = i; j < L.getColumnDimension(); j++) {\n+            double sum = 0.0;\n+            for (int k = 0; k < i; k++) {\n+                sum += L.getEntry(i, k) * L.getEntry(j, k);\n+            }\n+            if (i == j) {\n+                L.setEntry(i, j, FastMath.sqrt(L.getEntry(i, j) - sum));\n+            } else {\n+                L.setEntry(j, i, (L.getEntry(j, i) - sum) / L.getEntry(i, i));\n+            }\n+        }\n     }\n+    \n+    // Compute resulting square root matrix\n+    return L.multiply(L.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}