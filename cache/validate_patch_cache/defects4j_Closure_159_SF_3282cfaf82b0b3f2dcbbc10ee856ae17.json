{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Objects.requireNonNull(changed);\n    if (node == null) return; // guard clause\n    if (node.getToken() != null) {\n        switch (node.getToken()) {\n            case CALL:\n                Node child = node.getFirstChild();\n                if (child.getToken() == Token.NAME) {\n                    changed.add(child.getString());\n                }\n                while (child != null) {\n                    findCalledFunctions(child.getFirstChild(), changed);\n                    child = child.getNext();\n                }\n                break;\n            case GETPROP:\n                findCalledFunctions(node.getFirstChild(), changed);\n                findCalledFunctions(node.getLastChild(), changed);\n                break;\n            case NAME: case FUNCTION: case ARRAYLIT: case OBJLIT:\n                for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n                    findCalledFunctions(c, changed);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..6bb2743b 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,35 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Objects.requireNonNull(changed);\n+    if (node == null) return; // guard clause\n+    if (node.getToken() != null) {\n+        switch (node.getToken()) {\n+            case CALL:\n+                Node child = node.getFirstChild();\n+                if (child.getToken() == Token.NAME) {\n+                    changed.add(child.getString());\n+                }\n+                while (child != null) {\n+                    findCalledFunctions(child.getFirstChild(), changed);\n+                    child = child.getNext();\n+                }\n+                break;\n+            case GETPROP:\n+                findCalledFunctions(node.getFirstChild(), changed);\n+                findCalledFunctions(node.getLastChild(), changed);\n+                break;\n+            case NAME: case FUNCTION: case ARRAYLIT: case OBJLIT:\n+                for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+                    findCalledFunctions(c, changed);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}