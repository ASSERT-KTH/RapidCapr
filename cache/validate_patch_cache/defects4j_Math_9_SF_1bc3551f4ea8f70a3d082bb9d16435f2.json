{
    "patch": "public Line revert() {\n    BigDecimal x1 = BigDecimal.valueOf(zero.getX());\n    BigDecimal y1 = BigDecimal.valueOf(zero.getY());\n    BigDecimal x2 = BigDecimal.valueOf(direction.getX());\n    BigDecimal y2 = BigDecimal.valueOf(direction.getY());\n\n    Line reverted = new Line(new Point(x1, y1), new Point(x1.subtract(x2), y1.subtract(y2)));\n\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..691d5ce46 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    BigDecimal x1 = BigDecimal.valueOf(zero.getX());\n+    BigDecimal y1 = BigDecimal.valueOf(zero.getY());\n+    BigDecimal x2 = BigDecimal.valueOf(direction.getX());\n+    BigDecimal y2 = BigDecimal.valueOf(direction.getY());\n+\n+    Line reverted = new Line(new Point(x1, y1), new Point(x1.subtract(x2), y1.subtract(y2)));\n+\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}