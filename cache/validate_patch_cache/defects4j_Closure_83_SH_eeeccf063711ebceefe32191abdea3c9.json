{
    "patch": "        String[] paramArray = params.getParameter(0).split(\",\");\n        for (String param : paramArray) {\n          param = param.trim().toLowerCase();\n          if (TRUES.contains(param)) {\n            setter.addValue(true);\n          } else if (FALSES.contains(param)) {\n            setter.addValue(false);\n          } else {\n            throw new CmdLineException(owner, new Localizable() {\n              @Override\n              public String formatWithLocale(Locale locale, Object... args) {\n                return String.format(locale, \"Illegal value '%s' for boolean option '%s' (should be one of %s or %s)\",\n                    args[0], name, TRUES, FALSES);\n              }\n            }, param);\n          }\n        }\n        return paramArray.length;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex f146b0e4..7cbac89a 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -331,7 +331,24 @@ public class CommandLineRunner extends\n \n       @Override\n       public int parseArguments(Parameters params) throws CmdLineException {\n-        String param = params.getParameter(0);\n+        String[] paramArray = params.getParameter(0).split(\",\");\n+        for (String param : paramArray) {\n+          param = param.trim().toLowerCase();\n+          if (TRUES.contains(param)) {\n+            setter.addValue(true);\n+          } else if (FALSES.contains(param)) {\n+            setter.addValue(false);\n+          } else {\n+            throw new CmdLineException(owner, new Localizable() {\n+              @Override\n+              public String formatWithLocale(Locale locale, Object... args) {\n+                return String.format(locale, \"Illegal value '%s' for boolean option '%s' (should be one of %s or %s)\",\n+                    args[0], name, TRUES, FALSES);\n+              }\n+            }, param);\n+          }\n+        }\n+        return paramArray.length;\n \n         if (param == null) {\n           setter.addValue(true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}