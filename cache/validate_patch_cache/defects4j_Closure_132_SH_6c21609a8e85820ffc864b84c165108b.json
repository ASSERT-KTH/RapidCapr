{
    "patch": "          if (NodeUtil.isAssignmentOp(thenOp) &&\n              // Don't proceed if LHS refers to vars with different scopes.\n              // Currently we can't inline cross-scope references.\n              (thenOp.getFirstChild().isName() &&\n                      findNearestScopeRoot(thenOp.getFirstChild().getQualifiedName()) !=\n                      findNearestScopeRoot(cond)) &&\n              !mayHaveSideEffects(lhs)) {\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..eb2a584e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,14 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+          if (NodeUtil.isAssignmentOp(thenOp) &&\n+              // Don't proceed if LHS refers to vars with different scopes.\n+              // Currently we can't inline cross-scope references.\n+              (thenOp.getFirstChild().isName() &&\n+                      findNearestScopeRoot(thenOp.getFirstChild().getQualifiedName()) !=\n+                      findNearestScopeRoot(cond)) &&\n+              !mayHaveSideEffects(lhs)) {\n+\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}