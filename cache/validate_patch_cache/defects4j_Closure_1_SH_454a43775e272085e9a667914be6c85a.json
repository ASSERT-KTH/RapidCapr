{
    "patch": "// Remove params that are not referenced inside the function.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // create a HashSet to hold the referenced parameters\n    Set<String> referencedParams = new HashSet<>();\n\n    // Find all referenced parameter names\n    NodeTraversal.traverseEs6(compiler, function, new NodeTraversal.AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && parent.isParamList() && parent.getParent() == function) {\n                Var var = fnScope.getVar(n.getString());\n                referencedParams.add(var.getName());\n            }\n        }\n    });\n\n    int lastParamIndex = -1;\n    for (int i = 0; i < argList.getChildCount(); i++) {\n        Var var = fnScope.getVar(argList.getChildAtIndex(i).getString());\n        // Check if the parameter is a rest parameter\n        boolean isRest = i == argList.getChildCount() - 1 && var.isRest();\n        // Remove unreferenced function arguments, except rest arguments, or if there isn't any unreferenced argument\n        if (!referencedParams.contains(var.getName()) && !isRest || lastParamIndex == -1 || i == argList.getChildCount() - 1) {\n            if (lastParamIndex == -1) {\n                lastParamIndex = i - 1;\n            }\n            argList.removeChild(argList.getChildAtIndex(i));\n            i--;\n            compiler.reportCodeChange();\n        } else {\n            lastParamIndex = i;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..02a34cec 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove params that are not referenced inside the function.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // create a HashSet to hold the referenced parameters\n+    Set<String> referencedParams = new HashSet<>();\n+\n+    // Find all referenced parameter names\n+    NodeTraversal.traverseEs6(compiler, function, new NodeTraversal.AbstractPostOrderCallback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isName() && parent.isParamList() && parent.getParent() == function) {\n+                Var var = fnScope.getVar(n.getString());\n+                referencedParams.add(var.getName());\n+            }\n+        }\n+    });\n+\n+    int lastParamIndex = -1;\n+    for (int i = 0; i < argList.getChildCount(); i++) {\n+        Var var = fnScope.getVar(argList.getChildAtIndex(i).getString());\n+        // Check if the parameter is a rest parameter\n+        boolean isRest = i == argList.getChildCount() - 1 && var.isRest();\n+        // Remove unreferenced function arguments, except rest arguments, or if there isn't any unreferenced argument\n+        if (!referencedParams.contains(var.getName()) && !isRest || lastParamIndex == -1 || i == argList.getChildCount() - 1) {\n+            if (lastParamIndex == -1) {\n+                lastParamIndex = i - 1;\n+            }\n+            argList.removeChild(argList.getChildAtIndex(i));\n+            i--;\n+            compiler.reportCodeChange();\n+        } else {\n+            lastParamIndex = i;\n+        }\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}