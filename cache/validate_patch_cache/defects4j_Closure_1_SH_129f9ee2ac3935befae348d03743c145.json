{
    "patch": "    boolean modifyCallers = !compiler.getOptions().getLanguageOut().equals(LanguageMode.ECMASCRIPT3)\n        && modifyCallSites &&\n        callSiteOptimizer.canModifyCallers(fnScope.getIncomeVariables(), function);\n    if (modifyCallers) {\n      argList = prepareCall(node, argList);\n      callSiteOptimizer.optimizeCallSite(fnScope.getIncomeVariables(), node, argList);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..774591d4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,12 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = !compiler.getOptions().getLanguageOut().equals(LanguageMode.ECMASCRIPT3)\n+        && modifyCallSites &&\n+        callSiteOptimizer.canModifyCallers(fnScope.getIncomeVariables(), function);\n+    if (modifyCallers) {\n+      argList = prepareCall(node, argList);\n+      callSiteOptimizer.optimizeCallSite(fnScope.getIncomeVariables(), node, argList);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}