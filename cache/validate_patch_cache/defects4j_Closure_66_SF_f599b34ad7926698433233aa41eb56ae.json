{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JSONObject jsonObject = new JSONObject(json);\n        JSONArray results = jsonObject.getJSONArray(\"results\");\n        double total = results.length();\n        double typed = 0.0;\n        for (int i = 0; i < total; ++i) {\n            JSONObject result = results.getJSONObject(i);\n            if (result.getString(\"type\") != null) {\n                typed += 1.0;\n            }\n        }\n        return (typed / total) * 100.0;\n    } catch (JSONException e) {\n        System.out.println(\"Invalid JSON string\");\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..19f11f7a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JSONObject jsonObject = new JSONObject(json);\n+        JSONArray results = jsonObject.getJSONArray(\"results\");\n+        double total = results.length();\n+        double typed = 0.0;\n+        for (int i = 0; i < total; ++i) {\n+            JSONObject result = results.getJSONObject(i);\n+            if (result.getString(\"type\") != null) {\n+                typed += 1.0;\n+            }\n+        }\n+        return (typed / total) * 100.0;\n+    } catch (JSONException e) {\n+        System.out.println(\"Invalid JSON string\");\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}