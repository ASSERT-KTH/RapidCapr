{
    "patch": "public static String unescapeString(String str) {\n    if (str == null) {\n        return null;\n    }\n    StringWriter writer = new StringWriter(str.length());\n    int sz = str.length();\n    char lastChar = '\\0';\n    boolean inEscape = false;\n    boolean octal = false;\n    int unicode = 0;\n    int unicodeCount = 0;\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n\n        if (ch == '\\\\' && !inEscape) {\n            inEscape = true;\n        } else if (inEscape) {\n            if (ch == '\\'') {\n                // handle escaping of single quote\n                writer.write('\\'');\n            } else if (ch == '\\\"') {\n                // handle escaping of double quote\n                writer.write('\\\"');\n            } else if (ch == '\\\\') {\n                // handle escaping of backslash\n                writer.write('\\\\');\n            } else if (ch == 'n' && lastChar != '\\\\') {\n                // handle new line\n                writer.write('\\n');\n            } else if (ch == 'r' && lastChar != '\\\\') {\n                // handle carriage return\n                writer.write('\\r');\n            } else if (ch == 't' && lastChar != '\\\\') {\n                // handle tab\n                writer.write('\\t');\n            } else if (ch == 'f' && lastChar != '\\\\') {\n                // handle form feed\n                writer.write('\\f');\n            } else if (ch == 'b' && lastChar != '\\\\') {\n                // handle backspace\n                writer.write('\\b');\n            } else if (ch >= '0' && ch <= '7') {\n                // handle octal character\n                if (!octal) {\n                    unicode = ch - '0';\n                    octal = true;\n                } else {\n                    unicode = (unicode << 3) + (ch - '0');\n                }\n                if (unicode > 0377) {\n                    throw new IllegalArgumentException(\n                            \"Octal escape value out of range: \" + unicode);\n                }\n                if (!((i + 1) < sz && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7')) {\n                    // last character of octal escape\n                    inEscape = false;\n                    octal = false;\n                    writer.write((char) unicode);\n                }\n            } else if (ch == 'u' && lastChar != '\\\\') {\n                // handle unicode character\n                unicodeCount = 4;\n                unicode = 0;\n            } else if (unicodeCount > 0 && ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n                // handle hexadecimal unicode character\n                unicode = (unicode << 4) + Integer.parseInt(Character.toString(ch), 16);\n                unicodeCount--;\n                if (unicodeCount == 0) {\n                    inEscape = false;\n                    writer.write((char) unicode);\n                }\n            } else {\n                throw new IllegalArgumentException(\"Illegal escape sequence: \\\\\" + ch);\n            }\n        } else {\n            // character is not escaped\n            writer.write(ch);\n        }\n\n        lastChar = ch;\n    }\n    return writer.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}