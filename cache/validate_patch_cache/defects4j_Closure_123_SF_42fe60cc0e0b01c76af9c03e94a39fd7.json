{
    "patch": "public static String fixCode(String code) {\n    String pattern = \"for\\\\([^;]*?\\\\s*((\\\\w|\\\\d|\\\\.)+\\\\s*=\\\\s*(\\\\w|\\\\d|\\\\.)+(\\\\.\\\\w+)?\\\\s*(<=|>=|<|>)(\\\\s*(\\\\w|\\\\d|\\\\.)+)?)+;[^{]*?\\\\{\";\n\n    Pattern pt = Pattern.compile(pattern, Pattern.DOTALL);\n    Matcher m = pt.matcher(code);\n\n    StringBuffer sb = new StringBuffer();\n    while (m.find()) {\n        String s = m.group();\n        Matcher inMatcher = Pattern.compile(\"(?<!=)\\\\s*\\\\b(in)\\\\b\\\\s*\").matcher(s);\n        if (inMatcher.find()) {\n            String inExpr = inMatcher.group().trim();\n            int idx = inMatcher.start();\n            int openParanthesisIdx = s.indexOf('(', idx);\n            if (openParanthesisIdx != -1) {\n                int closeParanthesisIdx = StringUtils.findClosingIndex(openParanthesisIdx + 1, s.toCharArray(), '(', ')');\n                if (closeParanthesisIdx != -1) {\n                    String forCond = s.substring(openParanthesisIdx + 1, closeParanthesisIdx).trim();\n                    if (forCond.contains(\",\")) {\n                        forCond = \"(\" + forCond + \")\";\n                    }\n                    String replacedCode = s.substring(0, idx) + forCond + s.substring(inMatcher.end()).replaceFirst(\"\\\\[\\\\s*\\\\]\", \"\");\n                    replacedCode = replacedCode.replaceFirst(\"\\\\[[^]]+\\\\]\", \"\");\n                    m.appendReplacement(sb, replacedCode);\n                }\n            }\n        }\n    }\n    m.appendTail(sb);\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..97d556b2 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,38 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern = \"for\\\\([^;]*?\\\\s*((\\\\w|\\\\d|\\\\.)+\\\\s*=\\\\s*(\\\\w|\\\\d|\\\\.)+(\\\\.\\\\w+)?\\\\s*(<=|>=|<|>)(\\\\s*(\\\\w|\\\\d|\\\\.)+)?)+;[^{]*?\\\\{\";\n+\n+    Pattern pt = Pattern.compile(pattern, Pattern.DOTALL);\n+    Matcher m = pt.matcher(code);\n+\n+    StringBuffer sb = new StringBuffer();\n+    while (m.find()) {\n+        String s = m.group();\n+        Matcher inMatcher = Pattern.compile(\"(?<!=)\\\\s*\\\\b(in)\\\\b\\\\s*\").matcher(s);\n+        if (inMatcher.find()) {\n+            String inExpr = inMatcher.group().trim();\n+            int idx = inMatcher.start();\n+            int openParanthesisIdx = s.indexOf('(', idx);\n+            if (openParanthesisIdx != -1) {\n+                int closeParanthesisIdx = StringUtils.findClosingIndex(openParanthesisIdx + 1, s.toCharArray(), '(', ')');\n+                if (closeParanthesisIdx != -1) {\n+                    String forCond = s.substring(openParanthesisIdx + 1, closeParanthesisIdx).trim();\n+                    if (forCond.contains(\",\")) {\n+                        forCond = \"(\" + forCond + \")\";\n+                    }\n+                    String replacedCode = s.substring(0, idx) + forCond + s.substring(inMatcher.end()).replaceFirst(\"\\\\[\\\\s*\\\\]\", \"\");\n+                    replacedCode = replacedCode.replaceFirst(\"\\\\[[^]]+\\\\]\", \"\");\n+                    m.appendReplacement(sb, replacedCode);\n+                }\n+            }\n+        }\n+    }\n+    m.appendTail(sb);\n+\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}