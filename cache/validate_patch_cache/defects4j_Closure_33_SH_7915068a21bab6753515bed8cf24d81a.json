{
    "patch": "    // We only want to match contraints on anonymous types.\n    if (getJSType() instanceof FunctionType && getQualifiedName() == null) {\n      if (constraintObj.isUnionType()) {\n        for (JSType alt : constraintObj.getAlternatesWithoutStructuralTyping()) {\n          matchConstraint(alt);\n        }\n        return;\n      } else if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              typeToInfer = typeToInfer.getGreatestSubtype(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n              defineInferredProperty(prop, typeToInfer, null);\n            } else {\n              JSType currType = getInferredPropertyType(prop);\n              // Incorporate the type of the property being inferred\n              // with the existing type of the property if a narrowing\n              // is possible.\n              inferPropertyType(prop, currType.getGreatestSubtype(propType), null);\n            }\n          }\n        }\n        return;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..4c7f7c0b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,33 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    // We only want to match contraints on anonymous types.\n+    if (getJSType() instanceof FunctionType && getQualifiedName() == null) {\n+      if (constraintObj.isUnionType()) {\n+        for (JSType alt : constraintObj.getAlternatesWithoutStructuralTyping()) {\n+          matchConstraint(alt);\n+        }\n+        return;\n+      } else if (constraintObj.isRecordType()) {\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              typeToInfer = typeToInfer.getGreatestSubtype(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n+              defineInferredProperty(prop, typeToInfer, null);\n+            } else {\n+              JSType currType = getInferredPropertyType(prop);\n+              // Incorporate the type of the property being inferred\n+              // with the existing type of the property if a narrowing\n+              // is possible.\n+              inferPropertyType(prop, currType.getGreatestSubtype(propType), null);\n+            }\n+          }\n+        }\n+        return;\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}