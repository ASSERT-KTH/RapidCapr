{
    "patch": "        argument = arguments.next();\n        // If there are no parameters left in the list, then the while loop\n        // above implies that this must be a var_args function.\n        parameter = parameters.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    if (parameters.hasNext()) {\n      while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!parameter.getBooleanProp(Node.OptionalParameters.ALLOWS_OPTIONAL_ARG)) {\n          // Too few arguments for non optional parameter\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              \"Function \" + getReadableFunctionName(call.getFirstChild()),\n              \"Expecting at least \" + (ordinal + 1) + \" argument(s), \" + \"but found only \" + ordinal + \".\", \"\");\n          break;\n        }\n      }\n    } else {\n      int numArgs = call.getChildCount() - 1;\n      int minArgs = functionType.getMinArguments();\n      int maxArgs = functionType.getMaxArguments();\n      if (minArgs > numArgs || maxArgs < numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            \"Function \" + getReadableFunctionName(call.getFirstChild()),\n            \"Expecting \" + (minArgs == maxArgs ?\n                    minArgs + \" argument(s)\" :\n                      \"between \" + minArgs + \" and \" + maxArgs + \" arguments\") +\n                \" but got \" + numArgs + \".\", \"\");\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..445baff4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+        argument = arguments.next();\n+        // If there are no parameters left in the list, then the while loop\n+        // above implies that this must be a var_args function.\n         parameter = parameters.next();\n-      argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    if (parameters.hasNext()) {\n+      while (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        if (!parameter.getBooleanProp(Node.OptionalParameters.ALLOWS_OPTIONAL_ARG)) {\n+          // Too few arguments for non optional parameter\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              \"Function \" + getReadableFunctionName(call.getFirstChild()),\n+              \"Expecting at least \" + (ordinal + 1) + \" argument(s), \" + \"but found only \" + ordinal + \".\", \"\");\n+          break;\n+        }\n+      }\n+    } else {\n+      int numArgs = call.getChildCount() - 1;\n+      int minArgs = functionType.getMinArguments();\n+      int maxArgs = functionType.getMaxArguments();\n+      if (minArgs > numArgs || maxArgs < numArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            \"Function \" + getReadableFunctionName(call.getFirstChild()),\n+            \"Expecting \" + (minArgs == maxArgs ?\n+                    minArgs + \" argument(s)\" :\n+                      \"between \" + minArgs + \" and \" + maxArgs + \" arguments\") +\n+                \" but got \" + numArgs + \".\", \"\");\n+      }\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}