{
    "patch": "public JSType caseObjectType(ObjectType type) {\n  JSType result = null;\n  if (value != null && value.equals(\"function\")) {\n    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n    if (ctorType != null && ctorType.isSubtype(type)) {\n      result = resultEqualsValue ? ctorType : type;\n    }\n  } else if (matchesExpectation(\"object\")) {\n    result = type;\n  }\n  if (result != null && !result.isUnknownType()) { // check if result is not null or unknown type\n    return result.removeType(getNativeType(U2U_OBJECT_PROTOTYPE)); // remove U2U_OBJECT_PROTOTYPE from result type\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..17bcafff 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,21 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n-    }\n+public JSType caseObjectType(ObjectType type) {\n+  JSType result = null;\n+  if (value != null && value.equals(\"function\")) {\n+    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n+    if (ctorType != null && ctorType.isSubtype(type)) {\n+      result = resultEqualsValue ? ctorType : type;\n+    }\n+  } else if (matchesExpectation(\"object\")) {\n+    result = type;\n+  }\n+  if (result != null && !result.isUnknownType()) { // check if result is not null or unknown type\n+    return result.removeType(getNativeType(U2U_OBJECT_PROTOTYPE)); // remove U2U_OBJECT_PROTOTYPE from result type\n+  }\n+  return result;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}