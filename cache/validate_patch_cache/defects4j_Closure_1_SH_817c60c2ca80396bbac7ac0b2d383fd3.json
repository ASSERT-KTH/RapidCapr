{
    "patch": "      Node lastArg = null;\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        }\n        lastArg = arg;\n      }\n      if (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8cc53a6f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = null;\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        }\n+        lastArg = arg;\n+      }\n+      if (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}