{
    "patch": "      int argCount = getParamCount(fnScope);\n      for (int i = 0; i < argCount; i++) {\n        Node currentNode = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(currentNode.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(currentNode);\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..51f8c8fa 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int argCount = getParamCount(fnScope);\n+      for (int i = 0; i < argCount; i++) {\n+        Node currentNode = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(currentNode.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(currentNode);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}