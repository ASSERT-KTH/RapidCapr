{
    "patch": "    Node body = getFunctionBody(function);\n    LinkedHashSet<String> paramNames = new LinkedHashSet<>();\n    for (Node child = getFunctionArgList(function).getFirstChild(); child != null;\n        child = child.getNext()) {\n      String paramName = child.getString();\n      Var var = fnScope.getVar(paramName);\n      if (var != null && referenced.contains(var)) {\n        paramNames.add(paramName);\n      }\n    }\n\n    if (paramNames.size() == getFunctionArgList(function).getChildCount()) {\n      return;\n    }\n\n    // Preserve source order.\n    Node newArgList = new Node(Token.LP);\n    for (Node arg : getFunctionArgList(function).children()) {\n      if (paramNames.contains(arg.getString())) {\n        newArgList.addChildToBack(arg.cloneTree());\n      }\n    }\n    NodeUtil.markNewScopesChanged(newArgList, compiler);\n    NodeUtil.replaceChildren(getFunctionArgList(function), newArgList);\n\n    // Note make sure all the calls to this function are updated. (e.g. use of 'apply' etc...)\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } else {\n      if (body != null && !paramNames.isEmpty()) {\n        new ReferenceMapCollector(compiler, referenced).process(null, body);\n        new RemoveUnusedVars(new ReferenceMap(pruneUnreferenced(fnScope, referenced))).process(null, body);\n      }\n    }\n\n    // We make the conservative assumption that removing function parameters may change the\n    // function signature so we don't update the AST here, rather we assume downstream\n    // tools will handle it correctly.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..29ee5890 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node body = getFunctionBody(function);\n+    LinkedHashSet<String> paramNames = new LinkedHashSet<>();\n+    for (Node child = getFunctionArgList(function).getFirstChild(); child != null;\n+        child = child.getNext()) {\n+      String paramName = child.getString();\n+      Var var = fnScope.getVar(paramName);\n+      if (var != null && referenced.contains(var)) {\n+        paramNames.add(paramName);\n+      }\n+    }\n+\n+    if (paramNames.size() == getFunctionArgList(function).getChildCount()) {\n+      return;\n+    }\n+\n+    // Preserve source order.\n+    Node newArgList = new Node(Token.LP);\n+    for (Node arg : getFunctionArgList(function).children()) {\n+      if (paramNames.contains(arg.getString())) {\n+        newArgList.addChildToBack(arg.cloneTree());\n+      }\n+    }\n+    NodeUtil.markNewScopesChanged(newArgList, compiler);\n+    NodeUtil.replaceChildren(getFunctionArgList(function), newArgList);\n+\n+    // Note make sure all the calls to this function are updated. (e.g. use of 'apply' etc...)\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else {\n+      if (body != null && !paramNames.isEmpty()) {\n+        new ReferenceMapCollector(compiler, referenced).process(null, body);\n+        new RemoveUnusedVars(new ReferenceMap(pruneUnreferenced(fnScope, referenced))).process(null, body);\n+      }\n+    }\n+\n+    // We make the conservative assumption that removing function parameters may change the\n+    // function signature so we don't update the AST here, rather we assume downstream\n+    // tools will handle it correctly.\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}