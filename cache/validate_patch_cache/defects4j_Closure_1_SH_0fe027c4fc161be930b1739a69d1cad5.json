{
    "patch": "Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    Node body = function.getLastChild();\n    if (body == null) {\n      return;\n    }\n\n    boolean isSetter = NodeUtil.isGetOrSetKey(function.getParent())\n        && function.getParent().getLastChild().getString().equals(\"set\");\n    if (isSetter) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    boolean canDropArgs = !isInsideArgumentsArray(function) && !isInsideRestParam(argList);\n\n    if (!modifyCallers || !canDropArgs) {\n      // For functions with arguments array or rest parameter, we need to ensure\n      // that all the args are assigned in the function body.\n      optimizeFunctionArguments(fnScope, referenced);\n    } else {\n      int maxIndex = countParameters(argList);\n      Set<String> referencedNames = new HashSet<>();\n      collectReferencedParameterNames(body, referencedNames);\n      removeUnusedParameters(fnScope, argList, referencedNames, maxIndex);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..17f27d25 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    Node body = function.getLastChild();\n+    if (body == null) {\n+      return;\n+    }\n+\n+    boolean isSetter = NodeUtil.isGetOrSetKey(function.getParent())\n+        && function.getParent().getLastChild().getString().equals(\"set\");\n+    if (isSetter) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    boolean canDropArgs = !isInsideArgumentsArray(function) && !isInsideRestParam(argList);\n+\n+    if (!modifyCallers || !canDropArgs) {\n+      // For functions with arguments array or rest parameter, we need to ensure\n+      // that all the args are assigned in the function body.\n+      optimizeFunctionArguments(fnScope, referenced);\n+    } else {\n+      int maxIndex = countParameters(argList);\n+      Set<String> referencedNames = new HashSet<>();\n+      collectReferencedParameterNames(body, referencedNames);\n+      removeUnusedParameters(fnScope, argList, referencedNames, maxIndex);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}