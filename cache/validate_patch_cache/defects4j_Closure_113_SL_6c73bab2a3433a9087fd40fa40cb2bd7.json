{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided != null && provided.isExplicitlyProvided()) {\n      JSModule providedModule = provided.explicitModule;\n      // This must be non-null, because there was an explicit provide.\n      Preconditions.checkNotNull(providedModule);\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(), module.getName()));\n      }\n    } else {\n      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n      parent.removeChild(n);\n      compiler.reportCodeChange();\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..c258a536 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,34 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+  Node left = n.getFirstChild();\n+  Node arg = left.getNext();\n+\n+  if (verifyLastArgumentIsString(t, left, arg)) {\n+    String ns = arg.getString();\n+    ProvidedName provided = providedNames.get(ns);\n+    if (provided != null && provided.isExplicitlyProvided()) {\n+      JSModule providedModule = provided.explicitModule;\n+      // This must be non-null, because there was an explicit provide.\n+      Preconditions.checkNotNull(providedModule);\n+\n+      JSModule module = t.getModule();\n+      if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+        compiler.report(\n+            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                providedModule.getName(), module.getName()));\n+      }\n+    } else {\n+      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      parent.removeChild(n);\n+      compiler.reportCodeChange();\n+    }\n+\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n+  }\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}