{
    "patch": "        boolean retry = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            if (e.getIllegalFieldValueFailure() != null &&\n                (retry = e.getIllegalFieldValueFailure().getDurationFieldType() == DurationFieldType.weekyears())) {\n                // If weeks cause calculation of year, albeit wrongly, try to repair the situation.\n                int year = e.getIllegalFieldValueFailure().getDateTime().getWeekyear();\n                boolean isLenient = ((Chronology) iChrono).getDateTimeMillis(year, 1, 1, 0) <= iMillis;\n                saveField(DateTimeFieldType.year(), year);\n                // As leap year held no meaning prior to the introduction of year zero,\n                // the impl assumes that leap years occurred since the epoch.\n                // As a result, an incorrect date for one less year may be returned, which\n                // will push back the calculated year as well. Therefore, correct the year as necessary.\n                if (isLenient && iDefaultYear <= 0 && iChrono.isLeapYear(year - 1)) {\n                    saveField(DateTimeFieldType.year(), year - 1);\n                } else if (isLenient && iDefaultYear > 0 && iChrono.isLeapYear(year + 1)) {\n                    saveField(DateTimeFieldType.year(), year + 1);\n                } else {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                    throw e;\n                }\n            } else {\n              e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n              throw e;\n            }\n        }\n        if (retry) {\n            return computeMillis(resetFields, text);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9ccbc186 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean retry = false;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            if (e.getIllegalFieldValueFailure() != null &&\n+                (retry = e.getIllegalFieldValueFailure().getDurationFieldType() == DurationFieldType.weekyears())) {\n+                // If weeks cause calculation of year, albeit wrongly, try to repair the situation.\n+                int year = e.getIllegalFieldValueFailure().getDateTime().getWeekyear();\n+                boolean isLenient = ((Chronology) iChrono).getDateTimeMillis(year, 1, 1, 0) <= iMillis;\n+                saveField(DateTimeFieldType.year(), year);\n+                // As leap year held no meaning prior to the introduction of year zero,\n+                // the impl assumes that leap years occurred since the epoch.\n+                // As a result, an incorrect date for one less year may be returned, which\n+                // will push back the calculated year as well. Therefore, correct the year as necessary.\n+                if (isLenient && iDefaultYear <= 0 && iChrono.isLeapYear(year - 1)) {\n+                    saveField(DateTimeFieldType.year(), year - 1);\n+                } else if (isLenient && iDefaultYear > 0 && iChrono.isLeapYear(year + 1)) {\n+                    saveField(DateTimeFieldType.year(), year + 1);\n+                } else {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                    throw e;\n+                }\n+            } else {\n+              e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+              throw e;\n+            }\n+        }\n+        if (retry) {\n+            return computeMillis(resetFields, text);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}