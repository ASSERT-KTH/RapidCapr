{
    "patch": "        if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n            return false;\n        }\n        if (block.isFunction) {\n          // Only allow one assignment to a variable in a function.\n          return true;\n        } else if (block.isLoop) {\n          BasicBlock.Assoc<BlockTraversal.Type, BasicBlock> blockTypeAssoc =\n              block.getTraversal().getControlFlowGraph().getBlockAssoc();\n          BlockTraversal<BlockTraversal.Step<?>> traversal = block.getTraversal();\n          BasicBlock parentLoop = null;\n          while (traversal.hasNext(BlockTraversal.Step.ENTER_BLOCK)) {\n            BasicBlock containingBlock = blockTypeAssoc.get(\n                traversal.next(BlockTraversal.Step.ENTER_BLOCK).getBlock(), BlockTraversal.Type.CONTROL);\n            if (containingBlock.isLoop) {\n              parentLoop = containingBlock;\n            }\n          }\n          return ref.getBasicBlock() == parentLoop || parentLoop == null;\n        } else if (ref.getBasicBlock() != null) {\n          // Only a block point can own an assignment statement.\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..94fc7120 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n+            return false;\n+        }\n+        if (block.isFunction) {\n+          // Only allow one assignment to a variable in a function.\n+          return true;\n+        } else if (block.isLoop) {\n+          BasicBlock.Assoc<BlockTraversal.Type, BasicBlock> blockTypeAssoc =\n+              block.getTraversal().getControlFlowGraph().getBlockAssoc();\n+          BlockTraversal<BlockTraversal.Step<?>> traversal = block.getTraversal();\n+          BasicBlock parentLoop = null;\n+          while (traversal.hasNext(BlockTraversal.Step.ENTER_BLOCK)) {\n+            BasicBlock containingBlock = blockTypeAssoc.get(\n+                traversal.next(BlockTraversal.Step.ENTER_BLOCK).getBlock(), BlockTraversal.Type.CONTROL);\n+            if (containingBlock.isLoop) {\n+              parentLoop = containingBlock;\n+            }\n+          }\n+          return ref.getBasicBlock() == parentLoop || parentLoop == null;\n+        } else if (ref.getBasicBlock() != null) {\n+          // Only a block point can own an assignment statement.\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}