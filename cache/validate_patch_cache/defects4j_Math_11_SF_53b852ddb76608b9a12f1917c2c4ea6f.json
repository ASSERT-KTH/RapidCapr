{
    "patch": "public double density(double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    double det = 1;\n    RealMatrix cov = getCovariances();\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(cov);\n    RealMatrix L = cholesky.getL();\n    double logDensity = -dim / 2.0 * FastMath.log(2 * FastMath.PI) - cholesky.getLogDeterminant() / 2.0;\n\n    double[] x = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        double sum = 0;\n        for (int j = 0; j < i; j++) {\n            sum += L.getEntry(i, j) * x[j];\n        }\n        x[i] = (vals[i] - getMeans().getEntry(i)) / L.getEntry(i, i);\n        logDensity -= 0.5 * (x[i] * x[i]) - sum;\n        det *= L.getEntry(i, i);\n    }\n\n    return FastMath.exp(logDensity) / FastMath.sqrt(Math.pow(2 * FastMath.PI, dim) * det);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..f9aca5844 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,33 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n     }\n \n+    double det = 1;\n+    RealMatrix cov = getCovariances();\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(cov);\n+    RealMatrix L = cholesky.getL();\n+    double logDensity = -dim / 2.0 * FastMath.log(2 * FastMath.PI) - cholesky.getLogDeterminant() / 2.0;\n+\n+    double[] x = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        double sum = 0;\n+        for (int j = 0; j < i; j++) {\n+            sum += L.getEntry(i, j) * x[j];\n+        }\n+        x[i] = (vals[i] - getMeans().getEntry(i)) / L.getEntry(i, i);\n+        logDensity -= 0.5 * (x[i] * x[i]) - sum;\n+        det *= L.getEntry(i, i);\n+    }\n+\n+    return FastMath.exp(logDensity) / FastMath.sqrt(Math.pow(2 * FastMath.PI, dim) * det);\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}