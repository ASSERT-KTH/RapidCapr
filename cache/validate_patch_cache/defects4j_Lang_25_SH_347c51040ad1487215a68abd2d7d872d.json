{
    "patch": "String s = \"Testing-encode/decode-ISO8859-1\";\nbyte[] b = s.getBytes(\"ISO-8859-1\");\nString s2 = new String(b, \"ISO-8859-1\");\nassertEquals(\"Testing-encode/decode-ISO8859-1\", s2);\nboolean success = false;\ntry {\n    String input = \"test\\u00E9\";\n    String output = StringEscapeUtils.escapeJava(input);\n    String result = StringEscapeUtils.unescapeJava(output);\n    assertEquals(\"test\u00e9\", result);\n    success = true;\n} catch (Exception ex) {\n    // catch any exceptions\n}\nassertTrue(\"One or more errors detected\", success);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}