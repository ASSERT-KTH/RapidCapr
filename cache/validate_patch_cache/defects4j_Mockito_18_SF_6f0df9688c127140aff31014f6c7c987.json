{
    "patch": "public static Iterable<Data[]> pad(Iterable<Data[]> iterable, int length, Data padValue) {\n    List<Data[]> list = new ArrayList<>();\n    for (Data[] data : iterable) {\n        if (data.length >= length) {\n            list.add(data);\n        } else {\n            Data[] newData = new Data[length];\n            System.arraycopy(data, 0, newData, 0, data.length);\n            for (int i = data.length; i < length; i++) {\n                newData[i] = padValue;\n            }\n            list.add(newData);\n        }\n    }\n    return list;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cd967c951 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Data[]> pad(Iterable<Data[]> iterable, int length, Data padValue) {\n+    List<Data[]> list = new ArrayList<>();\n+    for (Data[] data : iterable) {\n+        if (data.length >= length) {\n+            list.add(data);\n+        } else {\n+            Data[] newData = new Data[length];\n+            System.arraycopy(data, 0, newData, 0, data.length);\n+            for (int i = data.length; i < length; i++) {\n+                newData[i] = padValue;\n+            }\n+            list.add(newData);\n+        }\n+    }\n+    return list;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}