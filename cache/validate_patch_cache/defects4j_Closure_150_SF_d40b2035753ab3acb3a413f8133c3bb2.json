{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n    \n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.NAME:\n            if (parent == null || parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n                defineVar(n, parent);\n            }\n            break;\n        case Token.LP:\n            if (parent != null) {\n                if (parent.getType() == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n                    handleFunctionInputs(parent);\n                } else if (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n                    handleFunctionInputs(n);\n                }\n            }\n            break;\n        default:\n            break;\n    }\n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f67139be 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,46 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    }\n+    \n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.NAME:\n+            if (parent == null || parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n+                defineVar(n, parent);\n+            }\n+            break;\n+        case Token.LP:\n+            if (parent != null) {\n+                if (parent.getType() == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n+                    handleFunctionInputs(parent);\n+                } else if (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n+                    handleFunctionInputs(n);\n+                }\n+            }\n+            break;\n+        default:\n+            break;\n     }\n \n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}