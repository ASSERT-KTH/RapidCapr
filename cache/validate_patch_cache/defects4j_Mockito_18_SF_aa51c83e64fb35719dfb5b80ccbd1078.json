{
    "patch": "public static List<String> splitString(String input, char delimiter) {\n    List<String> output = new ArrayList<>();\n    if (input == null || input.isEmpty()) {\n        return output;\n    }\n\n    StringBuilder currentWord = new StringBuilder();\n    for (char c : input.toCharArray()) {\n        if (c == delimiter) {\n            output.add(currentWord.toString());\n            currentWord = new StringBuilder();\n        } else {\n            currentWord.append(c);\n        }\n    }\n\n    output.add(currentWord.toString());\n    return output;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8cfec2d3c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,25 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<String> splitString(String input, char delimiter) {\n+    List<String> output = new ArrayList<>();\n+    if (input == null || input.isEmpty()) {\n+        return output;\n+    }\n+\n+    StringBuilder currentWord = new StringBuilder();\n+    for (char c : input.toCharArray()) {\n+        if (c == delimiter) {\n+            output.add(currentWord.toString());\n+            currentWord = new StringBuilder();\n+        } else {\n+            currentWord.append(c);\n+        }\n+    }\n+\n+    output.add(currentWord.toString());\n+    return output;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}