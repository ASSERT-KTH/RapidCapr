{
    "patch": "        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        final RealMatrix u = svd.getU();\n        final RealMatrix s = svd.getS();\n        final RealMatrix v = svd.getV();\n        final RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            for (int j = 0; j < s.getColumnDimension(); j++) {\n                if (i == j) {\n                    sRoot.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n                } else {\n                    sRoot.setEntry(i, j, 0.0);\n                }\n            }\n        }\n        final RealMatrix sqrtM = u.multiply(sRoot).multiply(v.transpose());\n        return sqrtM;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..44f497ec7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        final RealMatrix u = svd.getU();\n+        final RealMatrix s = svd.getS();\n+        final RealMatrix v = svd.getV();\n+        final RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            for (int j = 0; j < s.getColumnDimension(); j++) {\n+                if (i == j) {\n+                    sRoot.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n+                } else {\n+                    sRoot.setEntry(i, j, 0.0);\n+                }\n+            }\n+        }\n+        final RealMatrix sqrtM = u.multiply(sRoot).multiply(v.transpose());\n+        return sqrtM;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}