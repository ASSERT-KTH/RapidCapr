{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        return;\n    }\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (!(oldMockHandler instanceof MockHandler)) {\n        return;\n    }\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    try {\n        if (mock instanceof Factory && ((Factory) mock).getCallback(0) instanceof MethodInterceptorFilter) {\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b916d1275 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        return;\n+    }\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (!(oldMockHandler instanceof MockHandler)) {\n+        return;\n+    }\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    try {\n+        if (mock instanceof Factory && ((Factory) mock).getCallback(0) instanceof MethodInterceptorFilter) {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "junit.framework.AssertionFailedError: Expected: <null> but was: 200",
    "test_result": "FAIL"
}