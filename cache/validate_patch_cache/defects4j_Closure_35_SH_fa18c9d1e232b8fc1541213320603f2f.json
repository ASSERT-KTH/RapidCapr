{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      boolean hasInferredProps = objType.hasInferredProperties();\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          // Do not infer properties that are already declared\n          if (objType.isPropertyTypeDeclared(prop)) {\n            continue;\n          }\n\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType inferredType = propType.getGreatestSubtype(objType.getPropertyType(prop));\n          \n          // Only define inferred properties once\n          if (!hasInferredProps) {\n            objType.defineInferredProperty(prop, inferredType, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..4193380b 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1120,20 +1120,25 @@ class TypeInference\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      boolean hasInferredProps = objType.hasInferredProperties();\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n+          // Do not infer properties that are already declared\n+          if (objType.isPropertyTypeDeclared(prop)) {\n+            continue;\n+          }\n+\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType inferredType = propType.getGreatestSubtype(objType.getPropertyType(prop));\n+          \n+          // Only define inferred properties once\n+          if (!hasInferredProps) {\n+            objType.defineInferredProperty(prop, inferredType, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}