{
    "patch": "if (functionType.isConstructor() &&\n    !functionType.isNativeObjectType() &&\n    (functionType.getReturnType().isUnknownType() ||\n     functionType.getReturnType().isVoidType() ||\n     !isExtern)) {\n  report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\n// Functions with explicit 'this' types must be called in a GETPROP or GETELEM,\n// or as a constructor or function expression.\nif (functionType.getTypeOfThis() != null &&\n    !NodeUtil.isGet(child.getParent()) &&\n    !NodeUtil.isFunctionExpression(child) &&\n    !NodeUtil.isName(child) &&\n    !functionType.isConstructor() &&\n    !(childType instanceof FunctionType)) {\n  report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..bc396d1b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor() &&\n+    !functionType.isNativeObjectType() &&\n+    (functionType.getReturnType().isUnknownType() ||\n+     functionType.getReturnType().isVoidType() ||\n+     !isExtern)) {\n+  report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+// Functions with explicit 'this' types must be called in a GETPROP or GETELEM,\n+// or as a constructor or function expression.\n+if (functionType.getTypeOfThis() != null &&\n+    !NodeUtil.isGet(child.getParent()) &&\n+    !NodeUtil.isFunctionExpression(child) &&\n+    !NodeUtil.isName(child) &&\n+    !functionType.isConstructor() &&\n+    !(childType instanceof FunctionType)) {\n+  report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "junit.framework.AssertionFailedError: expected a warning",
    "test_result": "FAIL"
}