{
    "patch": "   @Override\n   public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.FUNCTION && parent.getType() == Token.SCRIPT) {\n          for (Node varNode : NodeUtil.getVars(t.getScope())) {\n              defineVar(varNode, varNode.getParent());\n          }\n      }\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          if (parent.getType() == Token.FUNCTION) {\n              return;\n          }\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..24a189c5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,9 +1440,16 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+   @Override\n+   public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n+      if (n.getType() == Token.FUNCTION && parent.getType() == Token.SCRIPT) {\n+          for (Node varNode : NodeUtil.getVars(t.getScope())) {\n+              defineVar(varNode, varNode.getParent());\n+          }\n+      }\n+\n       if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n         handleFunctionInputs(parent);\n         return;\n@@ -1460,6 +1467,9 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n+          if (parent.getType() == Token.FUNCTION) {\n+              return;\n+          }\n           defineVar(n, parent);\n           break;\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}