{
    "patch": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Checks whether there is at least one finite bound value.\n    boolean hasFiniteBounds = false;\n    for (int i = 0; i < lB.length; i++) {\n        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n            hasFiniteBounds = true;\n            break;\n        }\n    }\n    // Convert API to internal handling of boundaries.\n    if (hasFiniteBounds) {\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n\n        double largest = Double.NEGATIVE_INFINITY;\n        for (int i = 0; i < lB.length; i++) {\n            final double range = uB[i] - lB[i];\n            if (Double.isInfinite(range)) {\n                throw new MathUnsupportedOperationException();\n            }\n            largest = Math.max(largest, range);\n        }\n\n        if (largest > Math.sqrt(Double.MAX_VALUE)) {\n            throw new NumberIsTooLargeException(largest, Math.sqrt(Double.MAX_VALUE), false);\n        }\n    } else {\n        boundaries = null;\n    }\n\n    if (inputSigma != null) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..688c24c86 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -501,65 +501,43 @@ public class CMAESOptimizer\n     /**\n      * Checks dimensions and values of boundaries and inputSigma if defined.\n      */\n-    private void checkParameters() {\n-        final double[] init = getStartPoint();\n-        final double[] lB = getLowerBound();\n-        final double[] uB = getUpperBound();\n-\n-        // Checks whether there is at least one finite bound value.\n-        boolean hasFiniteBounds = false;\n-        for (int i = 0; i < lB.length; i++) {\n-            if (!Double.isInfinite(lB[i]) ||\n-                !Double.isInfinite(uB[i])) {\n-                hasFiniteBounds = true;\n-                break;\n-            }\n+private void checkParameters() {\n+    final double[] init = getStartPoint();\n+    final double[] lB = getLowerBound();\n+    final double[] uB = getUpperBound();\n+\n+    // Checks whether there is at least one finite bound value.\n+    boolean hasFiniteBounds = false;\n+    for (int i = 0; i < lB.length; i++) {\n+        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n+            hasFiniteBounds = true;\n+            break;\n         }\n-        // Checks whether there is at least one infinite bound value.\n-        boolean hasInfiniteBounds = false;\n-        if (hasFiniteBounds) {\n-            for (int i = 0; i < lB.length; i++) {\n-                if (Double.isInfinite(lB[i]) ||\n-                    Double.isInfinite(uB[i])) {\n-                    hasInfiniteBounds = true;\n-                    break;\n-                }\n-            }\n+    }\n+    // Convert API to internal handling of boundaries.\n+    if (hasFiniteBounds) {\n+        boundaries = new double[2][];\n+        boundaries[0] = lB;\n+        boundaries[1] = uB;\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n+        double largest = Double.NEGATIVE_INFINITY;\n+        for (int i = 0; i < lB.length; i++) {\n+            final double range = uB[i] - lB[i];\n+            if (Double.isInfinite(range)) {\n                 throw new MathUnsupportedOperationException();\n-            } else {\n-                // Convert API to internal handling of boundaries.\n-                boundaries = new double[2][];\n-                boundaries[0] = lB;\n-                boundaries[1] = uB;\n-\n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n             }\n-        } else {\n-            // Convert API to internal handling of boundaries.\n-            boundaries = null;\n+            largest = Math.max(largest, range);\n         }\n \n-        if (inputSigma != null) {\n-            if (inputSigma.length != init.length) {\n-                throw new DimensionMismatchException(inputSigma.length, init.length);\n-            }\n-            for (int i = 0; i < init.length; i++) {\n-                if (inputSigma[i] < 0) {\n-                    throw new NotPositiveException(inputSigma[i]);\n-                }\n-                if (boundaries != null) {\n-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n-                    }\n-                }\n-            }\n+        if (largest > Math.sqrt(Double.MAX_VALUE)) {\n+            throw new NumberIsTooLargeException(largest, Math.sqrt(Double.MAX_VALUE), false);\n         }\n+    } else {\n+        boundaries = null;\n     }\n \n+    if (inputSigma != null) {\n+\n     /**\n      * Initialization of the dynamic search parameters\n      *",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}