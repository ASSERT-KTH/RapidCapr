{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, n.getFirstChild());\n  if (ns != null) {\n    boolean isCallArgument = parent.isCall() && n.equals(parent.getLastChild());\n\n    if (isCallArgument || parent.isExprResult()) {\n      if (!n.getLastChild().isFunction() || isCallArgument) {\n        // If the assignment is a call argument and the right-hand side is\n        // a function, don't add dependency from lhs to rhs.\n        // The lhs and rhs belong to different scopes.\n        // Also record the dependency for the call expression.\n        Node depNode = isCallArgument ? parent : recordNode;\n        recordDepScope(depNode, ns);\n      }\n    } else if (parent.isVanillaFor()) {\n      // Patch for assignments that appear in the init,\n      // condition, or iteration part of a vanilla FOR loop.\n      // Without this change, all 3 of those parts try to claim the for\n      // loop as their dependency scope. The last assignment in\n      // those three fields wins, which can result in incorrect\n      // reference edges between referenced and assigned variables.\n      // Also, we skip the assignment if it initializes an existing\n      // variable (so that we don't accidentally create a new unscoped\n      // reference to an existing variable).\n      Node declared = parent.isForIn() ? null : parent.getFirstChild();\n      if (!NodeUtil.isNameDeclared(declared, n.getString(), parent)) {\n        if (parent.getFirstChild().getNext() != n) {\n          recordDepScope(recordNode, ns);\n        } else {\n          recordDepScope(n.getFirstChild(), ns);\n        }\n      }\n    } else if (NodeUtil.isAssignmentOp(parent)) {\n      // This handles assignments that are part of a larger expression.\n      // Only one assignment target needs to be analyzed, so the rhs is analyzed.\n      Node rhs = n.getNext();\n      if (rhs != null) {\n        // Collect all assignments in the RHS and analyze the last one.\n        Node lastAssign = null, curr = rhs;\n        while (curr != null && curr.isAssign()) {\n          lastAssign = curr;\n          curr = curr.getLastChild().getNext();\n        }\n        if (lastAssign != null) {\n          recordDepScope(lastAssign.getLastChild(), ns);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..22be1647 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,57 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+  Node parent = n.getParent();\n+  NameInformation ns = createNameInformation(t, n.getFirstChild());\n+  if (ns != null) {\n+    boolean isCallArgument = parent.isCall() && n.equals(parent.getLastChild());\n+\n+    if (isCallArgument || parent.isExprResult()) {\n+      if (!n.getLastChild().isFunction() || isCallArgument) {\n+        // If the assignment is a call argument and the right-hand side is\n+        // a function, don't add dependency from lhs to rhs.\n+        // The lhs and rhs belong to different scopes.\n+        // Also record the dependency for the call expression.\n+        Node depNode = isCallArgument ? parent : recordNode;\n+        recordDepScope(depNode, ns);\n+      }\n+    } else if (parent.isVanillaFor()) {\n+      // Patch for assignments that appear in the init,\n+      // condition, or iteration part of a vanilla FOR loop.\n+      // Without this change, all 3 of those parts try to claim the for\n+      // loop as their dependency scope. The last assignment in\n+      // those three fields wins, which can result in incorrect\n+      // reference edges between referenced and assigned variables.\n+      // Also, we skip the assignment if it initializes an existing\n+      // variable (so that we don't accidentally create a new unscoped\n+      // reference to an existing variable).\n+      Node declared = parent.isForIn() ? null : parent.getFirstChild();\n+      if (!NodeUtil.isNameDeclared(declared, n.getString(), parent)) {\n+        if (parent.getFirstChild().getNext() != n) {\n           recordDepScope(recordNode, ns);\n+        } else {\n+          recordDepScope(n.getFirstChild(), ns);\n+        }\n+      }\n+    } else if (NodeUtil.isAssignmentOp(parent)) {\n+      // This handles assignments that are part of a larger expression.\n+      // Only one assignment target needs to be analyzed, so the rhs is analyzed.\n+      Node rhs = n.getNext();\n+      if (rhs != null) {\n+        // Collect all assignments in the RHS and analyze the last one.\n+        Node lastAssign = null, curr = rhs;\n+        while (curr != null && curr.isAssign()) {\n+          lastAssign = curr;\n+          curr = curr.getLastChild().getNext();\n+        }\n+        if (lastAssign != null) {\n+          recordDepScope(lastAssign.getLastChild(), ns);\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}