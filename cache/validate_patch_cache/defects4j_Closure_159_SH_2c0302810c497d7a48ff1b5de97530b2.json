{
    "patch": "    if (node == null) {\n      return;\n    }\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME && !child.getString().startsWith(\"$\") &&\n          !child.getString().startsWith(\"goog.\")) {\n        changed.add(child.getString());\n      }\n      Node grandChild = child.getFirstChild();\n      if (grandChild != null) {\n        findCalledFunctions(grandChild, changed);\n      }\n    } else {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..ad262f55 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,11 +774,23 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n+    if (node == null) {\n+      return;\n+    }\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+      if (child != null && child.getType() == Token.NAME && !child.getString().startsWith(\"$\") &&\n+          !child.getString().startsWith(\"goog.\")) {\n         changed.add(child.getString());\n       }\n+      Node grandChild = child.getFirstChild();\n+      if (grandChild != null) {\n+        findCalledFunctions(grandChild, changed);\n+      }\n+    } else {\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n+      }\n     }\n \n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}