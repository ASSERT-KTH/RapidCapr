{
    "patch": "        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        Chronology chrono = ISOChronology.getInstanceUTC();\n        long resolvedDuration = millis;\n        if (type.isTimePeriod()) {\n            resolvedDuration = chrono.getDurationField().add(millis, millis);\n            resolvedDuration = chrono.seconds().getDurationField().add(resolvedDuration, (long) getSeconds());\n            resolvedDuration = chrono.minutes().getDurationField().add(resolvedDuration, (long) getMinutes());\n            resolvedDuration = chrono.hours().getDurationField().add(resolvedDuration, (long) getHours());\n            resolvedDuration = chrono.days().getDurationField().add(resolvedDuration, (long) getDays());\n            resolvedDuration = chrono.weeks().getDurationField().add(resolvedDuration, (long) getWeeks());\n        } else {\n            long endMillis = chrono.add(millis, getMonths());\n            endMillis = chrono.years().add(endMillis, getYears());\n            resolvedDuration = chrono.getDurationField().getDifference(endMillis, millis);\n        }\n        return new Period(resolvedDuration, type, ISOChronology.getInstanceUTC());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..612c92fa 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,27 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        long millis = getMillis();\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+\n+        Chronology chrono = ISOChronology.getInstanceUTC();\n+        long resolvedDuration = millis;\n+        if (type.isTimePeriod()) {\n+            resolvedDuration = chrono.getDurationField().add(millis, millis);\n+            resolvedDuration = chrono.seconds().getDurationField().add(resolvedDuration, (long) getSeconds());\n+            resolvedDuration = chrono.minutes().getDurationField().add(resolvedDuration, (long) getMinutes());\n+            resolvedDuration = chrono.hours().getDurationField().add(resolvedDuration, (long) getHours());\n+            resolvedDuration = chrono.days().getDurationField().add(resolvedDuration, (long) getDays());\n+            resolvedDuration = chrono.weeks().getDurationField().add(resolvedDuration, (long) getWeeks());\n+        } else {\n+            long endMillis = chrono.add(millis, getMonths());\n+            endMillis = chrono.years().add(endMillis, getYears());\n+            resolvedDuration = chrono.getDurationField().getDifference(endMillis, millis);\n         }\n-        return result;\n-    }\n+        return new Period(resolvedDuration, type, ISOChronology.getInstanceUTC());\n \n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}