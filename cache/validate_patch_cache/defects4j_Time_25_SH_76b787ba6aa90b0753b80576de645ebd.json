{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // estimate is before gap, we need to re-calculate\n                    int offsetReload = getOffset(nextLocal);\n                    long nextReload = nextTransition(nextLocal);\n                    if (nextReload == nextAdjusted) {\n                        return offsetReload;\n                    }\n                }\n            } else {\n                // estimate is after gap, we can return the correct offset\n                return offsetAdjusted;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4d400bdc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // estimate is before gap, we need to re-calculate\n+                    int offsetReload = getOffset(nextLocal);\n+                    long nextReload = nextTransition(nextLocal);\n+                    if (nextReload == nextAdjusted) {\n+                        return offsetReload;\n+                    }\n+                }\n+            } else {\n+                // estimate is after gap, we can return the correct offset\n+                return offsetAdjusted;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}