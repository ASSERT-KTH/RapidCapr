{
    "patch": "switch (consumed) {\n    case 0:\n        char[] c = Character.toChars(Character.codePointAt(input, pos));\n        out.write(c);\n        pos += c.length;\n        break;\n    case 1:\n        out.write(replaceMap[input.charAt(pos)]);\n        pos++;\n        break;\n    default:\n        out.write(input.subSequence(pos, pos + consumed).toString());\n        pos += consumed;\n        break;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..1f7fec98 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,21 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+switch (consumed) {\n+    case 0:\n+        char[] c = Character.toChars(Character.codePointAt(input, pos));\n+        out.write(c);\n+        pos += c.length;\n+        break;\n+    case 1:\n+        out.write(replaceMap[input.charAt(pos)]);\n+        pos++;\n+        break;\n+    default:\n+        out.write(input.subSequence(pos, pos + consumed).toString());\n+        pos += consumed;\n+        break;\n+}\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}