{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n        // return extreme values\n        if (Double.isNaN(x)) {\n            return Double.NaN;\n        } else if (x == Double.NEGATIVE_INFINITY) {\n            return 0.0;\n        } else if (x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n\n        double dev = x - mean;\n        double res;\n        if (FastMath.abs(dev) > 40 * standardDeviation) {\n            res = dev < 0 ? 0.0 : 1.0;\n        } else {\n            res = 0.5 * Erf.erfc(-dev / (standardDeviation * Math.sqrt(2.0)));\n        }\n\n        return res;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..cdbab6ffe 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,25 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n-    }\n+public double cumulativeProbability(double x) throws MathException {\n+        // return extreme values\n+        if (Double.isNaN(x)) {\n+            return Double.NaN;\n+        } else if (x == Double.NEGATIVE_INFINITY) {\n+            return 0.0;\n+        } else if (x == Double.POSITIVE_INFINITY) {\n+            return 1.0;\n+        }\n+\n+        double dev = x - mean;\n+        double res;\n+        if (FastMath.abs(dev) > 40 * standardDeviation) {\n+            res = dev < 0 ? 0.0 : 1.0;\n+        } else {\n+            res = 0.5 * Erf.erfc(-dev / (standardDeviation * Math.sqrt(2.0)));\n+        }\n+\n+        return res;\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}