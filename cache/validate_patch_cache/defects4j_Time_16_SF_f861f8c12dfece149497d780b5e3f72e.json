{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        chrono.getZone(), chrono, iLocale, iPivotYear);\n    int newPos = parser.parseInto(bucket, text, position);\n  \n    // Check if the input contains a zone offset\n    boolean hasOffset = (bucket.getOffsetInteger() != null);\n\n    // If no zone offset is present in the input, default to chrono's zone\n    DateTimeZone zone = hasOffset ? \n        DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()) :\n        chrono.getZone();\n    \n    // Compute the millisecond instant\n    long computedMillis = bucket.computeMillis(false, text);\n\n    // If a zone offset was parsed from the input, recalculate the millis\n    if (hasOffset) {\n        computedMillis = zone.getMillisKeepLocal(chrono, computedMillis);\n    }\n\n    // If a target zone is specified, convert the millis to the target zone\n    if (iZone != null) {\n        computedMillis = iZone.getMillisKeepLocal(chrono, computedMillis);\n    }\n\n    // Set the milliseconds and the chronology on the instant\n    instant.setMillis(computedMillis);\n    instant.setChronology(chrono.withZone(zone));\n    \n    // Set the zone on the instant, if specified\n    if (iOffsetParsed || iZone != null) {\n        instant.setZone(zone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..722029a6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,35 +694,50 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        chrono.getZone(), chrono, iLocale, iPivotYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+  \n+    // Check if the input contains a zone offset\n+    boolean hasOffset = (bucket.getOffsetInteger() != null);\n+\n+    // If no zone offset is present in the input, default to chrono's zone\n+    DateTimeZone zone = hasOffset ? \n+        DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()) :\n+        chrono.getZone();\n+    \n+    // Compute the millisecond instant\n+    long computedMillis = bucket.computeMillis(false, text);\n+\n+    // If a zone offset was parsed from the input, recalculate the millis\n+    if (hasOffset) {\n+        computedMillis = zone.getMillisKeepLocal(chrono, computedMillis);\n+    }\n+\n+    // If a target zone is specified, convert the millis to the target zone\n+    if (iZone != null) {\n+        computedMillis = iZone.getMillisKeepLocal(chrono, computedMillis);\n     }\n \n+    // Set the milliseconds and the chronology on the instant\n+    instant.setMillis(computedMillis);\n+    instant.setChronology(chrono.withZone(zone));\n+    \n+    // Set the zone on the instant, if specified\n+    if (iOffsetParsed || iZone != null) {\n+        instant.setZone(zone);\n+    }\n+\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(DateTimeZone,Chronology,Locale,Integer)",
    "test_result": "ERROR"
}