{
    "patch": "    // If the parent node of this block is a switch statement, then try minimizing the exits of the switch\n    if (n.getParent().isSwitch()) {\n        Node switchBlock = n.getParent();\n        tryMinimizeSwitchExits(switchBlock, exitType, labelName);\n        return;\n    }\n    \n    // If this block is followed by a finally block and there is code after the finally, minimize its exits\n    Node finallyNode = NodeUtil.getFinallyBlock(n.getParent());\n    if (finallyNode != null && n.getNext() != null) {\n        tryMinimizeExits(finallyNode.getLastChild(), exitType, labelName);\n        return;\n    }\n    \n    // If there is code following the block, minimize its exits\n    if (n.getNext() != null) {\n        tryMinimizeExits(n.getNext(), exitType, labelName);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..49615134 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,24 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+    // If the parent node of this block is a switch statement, then try minimizing the exits of the switch\n+    if (n.getParent().isSwitch()) {\n+        Node switchBlock = n.getParent();\n+        tryMinimizeSwitchExits(switchBlock, exitType, labelName);\n+        return;\n+    }\n+    \n+    // If this block is followed by a finally block and there is code after the finally, minimize its exits\n+    Node finallyNode = NodeUtil.getFinallyBlock(n.getParent());\n+    if (finallyNode != null && n.getNext() != null) {\n+        tryMinimizeExits(finallyNode.getLastChild(), exitType, labelName);\n+        return;\n+    }\n+    \n+    // If there is code following the block, minimize its exits\n+    if (n.getNext() != null) {\n+        tryMinimizeExits(n.getNext(), exitType, labelName);\n+    }\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}