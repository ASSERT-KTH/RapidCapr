{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // acceptance of expansion\n                    simplex = expanded.getPointRef() == reflected.getPointRef() ?\n                            replaceWorstPoint(reflectedSimplex, expanded) :\n                            replaceWorstPoint(reflectedSimplex, expanded, comparator);\n\n                } else {\n                    // acceptance of reflected point\n                    simplex = reflectedSimplex;\n                }\n            } else {\n                // apply contraction\n                RealPointValuePair contracted;\n                if (comparator.compare(reflected, original[getNumParameters()]) < 0) {\n                    // do an outside contraction\n                    contracted = evaluateNewSimplex(original, chi, comparator);\n                    if (comparator.compare(contracted, reflected) <= 0) {\n                        simplex = replaceWorstPoint(original, contracted, comparator);\n                        continue;\n                    }\n                } else {\n                    // do an inside contraction\n                    contracted = evaluateNewSimplex(original, -gamma, comparator);\n                    if (comparator.compare(contracted, best) < 0) {\n                        simplex = replaceWorstPoint(original, contracted, comparator);\n                        continue;\n                    }\n                }\n                // perform a shrink\n                simplex = shrink(original, comparator);\n            }\n\n            // check convergence\n            final double range = simplex[simplex.length - 1].getValue()\n                    - simplex[0].getValue();\n            final double delta = FastMath.max(rtol * FastMath.abs(simplex[0].getValue()),\n                    atol);\n            if (range <= delta) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..30528f808 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,27 +75,48 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // acceptance of expansion\n+                    simplex = expanded.getPointRef() == reflected.getPointRef() ?\n+                            replaceWorstPoint(reflectedSimplex, expanded) :\n+                            replaceWorstPoint(reflectedSimplex, expanded, comparator);\n+\n+                } else {\n+                    // acceptance of reflected point\n                     simplex = reflectedSimplex;\n                 }\n-\n-                return;\n-\n+            } else {\n+                // apply contraction\n+                RealPointValuePair contracted;\n+                if (comparator.compare(reflected, original[getNumParameters()]) < 0) {\n+                    // do an outside contraction\n+                    contracted = evaluateNewSimplex(original, chi, comparator);\n+                    if (comparator.compare(contracted, reflected) <= 0) {\n+                        simplex = replaceWorstPoint(original, contracted, comparator);\n+                        continue;\n+                    }\n+                } else {\n+                    // do an inside contraction\n+                    contracted = evaluateNewSimplex(original, -gamma, comparator);\n+                    if (comparator.compare(contracted, best) < 0) {\n+                        simplex = replaceWorstPoint(original, contracted, comparator);\n+                        continue;\n+                    }\n+                }\n+                // perform a shrink\n+                simplex = shrink(original, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            final double range = simplex[simplex.length - 1].getValue()\n+                    - simplex[0].getValue();\n+            final double delta = FastMath.max(rtol * FastMath.abs(simplex[0].getValue()),\n+                    atol);\n+            if (range <= delta) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}