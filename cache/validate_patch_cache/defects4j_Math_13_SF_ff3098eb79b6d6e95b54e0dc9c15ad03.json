{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } catch (ArrayIndexOutOfBoundsException e) {\n        // If the above fails due to an out of bounds exception, \n        // fallback to iterative matrix square root algorithm\n        final int n = m.getRowDimension();\n        final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n        RealMatrix y = m.add(eye.scalarMultiply(-1)).scalarMultiply(0.5);\n        RealMatrix z = eye;\n        while (true) {\n            final RealMatrix yOld = y;\n            y = y.multiply(y).add(m).scalarMultiply(0.5);\n            z = z.multiply(yOld);\n            if (y.subtract(yOld).getNorm() < 1.0e-10) {\n                break;\n            }\n        }\n        return z;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d8c7815e7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } catch (ArrayIndexOutOfBoundsException e) {\n+        // If the above fails due to an out of bounds exception, \n+        // fallback to iterative matrix square root algorithm\n+        final int n = m.getRowDimension();\n+        final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n+        RealMatrix y = m.add(eye.scalarMultiply(-1)).scalarMultiply(0.5);\n+        RealMatrix z = eye;\n+        while (true) {\n+            final RealMatrix yOld = y;\n+            y = y.multiply(y).add(m).scalarMultiply(0.5);\n+            z = z.multiply(yOld);\n+            if (y.subtract(yOld).getNorm() < 1.0e-10) {\n+                break;\n+            }\n+        }\n+        return z;\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}