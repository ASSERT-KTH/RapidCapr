{
    "patch": "public class PrototypeObjectType extends JSType {\n    private final ObjectType prototype;\n\n    PrototypeObjectType(ObjectType prototype) {\n        super(TypeKind.OBJECT);\n        checkArgument(prototype != null);\n        this.prototype = prototype;\n    }\n\n    public ObjectType getImplicitPrototype() {\n        return prototype;\n    }\n\n    @Override\n    public boolean isPrototypeObject() {\n        return true;\n    }\n\n    @Override\n    public String toStringHelper(boolean forAnnotations) {\n        if (hasReferenceName()) {\n            return getReferenceName();\n        } else if (prettyPrint) {\n            // Don't pretty print recursively.\n            prettyPrint = false;\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Function.prototype\");\n            if (prototype.hasInstanceType()) {\n                sb.append(\"<\");\n                sb.append(prototype.toTypeMaybeWithNull(forAnnotations));\n                sb.append(\">\");\n            }\n            sb.append(\";\");\n\n            prettyPrint = true;\n            return sb.toString();\n        } else {\n            return \"{...}\";\n        }\n    }\n    \n    @Override\n    public boolean isTemplatizedType() {\n        return prototype.isTemplatizedType();\n    }\n\n    @Override\n    public ImmutableList<TemplateType> getTemplateTypeMap() {\n        return prototype.getTemplateTypeMap();\n    }\n\n    @Override\n    public JSType toMaybeObjectType() {\n        return null; // PrototypeObjectType doesn't participate in subtype relationships.\n    }\n\n    @Override\n    public boolean isEquivalentTo(JSType that) {\n        return (that instanceof PrototypeObjectType)\n                && this.getImplicitPrototype() == ((PrototypeObjectType) that).getImplicitPrototype();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..f356d489 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,69 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public class PrototypeObjectType extends JSType {\n+    private final ObjectType prototype;\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+    PrototypeObjectType(ObjectType prototype) {\n+        super(TypeKind.OBJECT);\n+        checkArgument(prototype != null);\n+        this.prototype = prototype;\n+    }\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+    public ObjectType getImplicitPrototype() {\n+        return prototype;\n+    }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+    @Override\n+    public boolean isPrototypeObject() {\n+        return true;\n+    }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+    @Override\n+    public String toStringHelper(boolean forAnnotations) {\n+        if (hasReferenceName()) {\n+            return getReferenceName();\n+        } else if (prettyPrint) {\n+            // Don't pretty print recursively.\n+            prettyPrint = false;\n+\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"Function.prototype\");\n+            if (prototype.hasInstanceType()) {\n+                sb.append(\"<\");\n+                sb.append(prototype.toTypeMaybeWithNull(forAnnotations));\n+                sb.append(\">\");\n+            }\n+            sb.append(\";\");\n+\n+            prettyPrint = true;\n+            return sb.toString();\n+        } else {\n+            return \"{...}\";\n         }\n-      }\n+    }\n+    \n+    @Override\n+    public boolean isTemplatizedType() {\n+        return prototype.isTemplatizedType();\n+    }\n \n-      sb.append(\"}\");\n+    @Override\n+    public ImmutableList<TemplateType> getTemplateTypeMap() {\n+        return prototype.getTemplateTypeMap();\n+    }\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n+    @Override\n+    public JSType toMaybeObjectType() {\n+        return null; // PrototypeObjectType doesn't participate in subtype relationships.\n     }\n-  }\n+\n+    @Override\n+    public boolean isEquivalentTo(JSType that) {\n+        return (that instanceof PrototypeObjectType)\n+                && this.getImplicitPrototype() == ((PrototypeObjectType) that).getImplicitPrototype();\n+    }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: class PrototypeObjectType is already defined in package com.google.javascript.rhino.jstype",
    "test_result": "ERROR"
}