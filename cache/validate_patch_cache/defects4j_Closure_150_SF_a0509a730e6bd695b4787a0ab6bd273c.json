{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n    } else if (n.getType() == Token.FUNCTION) {\n        defineDeclaredFunction(n, parent);\n    } else if (NodeUtil.isNameDeclaration(n)) {\n        defineVar(n, parent);\n    } else if (n.isCall() && parent.isExprResult()) {\n        // add special handling for goog.object.extend calls\n        Node firstChild = n.getFirstChild();\n        String name = null;\n        if (firstChild.matchesQualifiedName(\"goog.object\") && n.getLastChild().getString().equals(\"extend\")) {\n            Node target = firstChild.getNext();\n            if (target.matchesQualifiedName(\"exports\") || target.matchesQualifiedName(\"module.exports\")) {\n                name = n.getFirstChild().getNext().getQualifiedName();\n            }\n        }\n        if (name != null) {\n            defineDeclaredFunction(NodeUtil.newQName(compiler, name), null, n);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f78dd125 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,29 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+    } else if (n.getType() == Token.FUNCTION) {\n+        defineDeclaredFunction(n, parent);\n+    } else if (NodeUtil.isNameDeclaration(n)) {\n+        defineVar(n, parent);\n+    } else if (n.isCall() && parent.isExprResult()) {\n+        // add special handling for goog.object.extend calls\n+        Node firstChild = n.getFirstChild();\n+        String name = null;\n+        if (firstChild.matchesQualifiedName(\"goog.object\") && n.getLastChild().getString().equals(\"extend\")) {\n+            Node target = firstChild.getNext();\n+            if (target.matchesQualifiedName(\"exports\") || target.matchesQualifiedName(\"module.exports\")) {\n+                name = n.getFirstChild().getNext().getQualifiedName();\n+            }\n+        }\n+        if (name != null) {\n+            defineDeclaredFunction(NodeUtil.newQName(compiler, name), null, n);\n+        }\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}