{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null) {\n    Node callerNode = n.getParent();\n    if (callerNode.isGetProp() || callerNode.isGetElem()) {\n        ensureTyped(t, callerNode.getFirstChild(), thisType);\n    } else {\n        report(t, n, INVALID_THIS_TYPE);\n        ensureTyped(t, n);\n        return;\n    }\n}\n\n// Fix the WARNING_BAD_JSDOC_CLASS error for functions defined as `constructor` in class declarations\nif (functionType.isConstructor() && functionType.getSource() != null && NodeUtil.isClassConstructor(functionType.getSource())) {\n    JSType classType = checkNotNull(getJSType(functionType.getSource().getParent()).toMaybeObjectType());\n    checkNotNull(classType.getConstructorFunction()).setJSType(functionType);\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9d18e9d6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null) {\n+    Node callerNode = n.getParent();\n+    if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+        ensureTyped(t, callerNode.getFirstChild(), thisType);\n+    } else {\n+        report(t, n, INVALID_THIS_TYPE);\n+        ensureTyped(t, n);\n+        return;\n+    }\n+}\n+\n+// Fix the WARNING_BAD_JSDOC_CLASS error for functions defined as `constructor` in class declarations\n+if (functionType.isConstructor() && functionType.getSource() != null && NodeUtil.isClassConstructor(functionType.getSource())) {\n+    JSType classType = checkNotNull(getJSType(functionType.getSource().getParent()).toMaybeObjectType());\n+    checkNotNull(classType.getConstructorFunction()).setJSType(functionType);\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}