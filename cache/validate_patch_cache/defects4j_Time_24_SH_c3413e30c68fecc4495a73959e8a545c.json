{
    "patch": "  try {\n      boolean exceedsMin = false;\n      boolean exceedsMax = false;\n      for (int i = 0; i < count; i++) {\n          long newMillis = savedFields[i].set(millis, resetFields);\n          if (millis < 0 && newMillis >= 0) {\n              exceedsMin = true;\n          } else if (millis > 0 && newMillis <= 0) {\n              exceedsMax = true;\n          }\n          millis = newMillis;\n          for (int j = 0; j < i; j++) {\n              if (savedFields[i].iField.getType() == savedFields[j].iField.getType()) {\n                  int value1 = savedFields[i].iValue;\n                  int value2 = savedFields[j].iValue;\n                  if (value1 != value2) {\n                      throw new IllegalArgumentException(\"Conflict found: \" + \n                           savedFields[i].iField.getName() + \" \" + value1 + \" and \" + value2);\n                  }\n              }\n          }\n      }\n      if (exceedsMin) {\n          throw new IllegalArgumentException(\"The instant is too early\");\n      } else if (exceedsMax) {\n          throw new IllegalArgumentException(\"The instant is too late\");\n      }\n  } catch (IllegalFieldValueException e) {\n      if (text != null) {\n          e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n      }\n      throw e;\n  }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..24106f38 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+  try {\n+      boolean exceedsMin = false;\n+      boolean exceedsMax = false;\n+      for (int i = 0; i < count; i++) {\n+          long newMillis = savedFields[i].set(millis, resetFields);\n+          if (millis < 0 && newMillis >= 0) {\n+              exceedsMin = true;\n+          } else if (millis > 0 && newMillis <= 0) {\n+              exceedsMax = true;\n+          }\n+          millis = newMillis;\n+          for (int j = 0; j < i; j++) {\n+              if (savedFields[i].iField.getType() == savedFields[j].iField.getType()) {\n+                  int value1 = savedFields[i].iValue;\n+                  int value2 = savedFields[j].iValue;\n+                  if (value1 != value2) {\n+                      throw new IllegalArgumentException(\"Conflict found: \" + \n+                           savedFields[i].iField.getName() + \" \" + value1 + \" and \" + value2);\n+                  }\n+              }\n+          }\n+      }\n+      if (exceedsMin) {\n+          throw new IllegalArgumentException(\"The instant is too early\");\n+      } else if (exceedsMax) {\n+          throw new IllegalArgumentException(\"The instant is too late\");\n+      }\n+  } catch (IllegalFieldValueException e) {\n+      if (text != null) {\n+          e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+      }\n+      throw e;\n+  }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: The instant is too late",
    "test_result": "FAIL"
}