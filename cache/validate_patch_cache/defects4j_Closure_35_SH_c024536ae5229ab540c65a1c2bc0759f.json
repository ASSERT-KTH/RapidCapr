{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType() && type.isObject()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          QualifiedName pname = new QualifiedName(prop);\n          JSType actualPropType = objType.getChainProp(QualifiedName.fromQualifiedString(prop));\n          if (actualPropType == null || actualPropType.isUnknownType()) {\n            objType.defineInferredProperty(prop, propType, null);\n          } else if (actualPropType.isAllType() && !propType.isAllType()) {\n            warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(),\n                SUSPICIOUS_INFER_DECLARATION, pname.toString()));\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..01e2d945 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,20 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (constraintObj != null && constraintObj.isRecordType() && type.isObject()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          QualifiedName pname = new QualifiedName(prop);\n+          JSType actualPropType = objType.getChainProp(QualifiedName.fromQualifiedString(prop));\n+          if (actualPropType == null || actualPropType.isUnknownType()) {\n+            objType.defineInferredProperty(prop, propType, null);\n+          } else if (actualPropType.isAllType() && !propType.isAllType()) {\n+            warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(),\n+                SUSPICIOUS_INFER_DECLARATION, pname.toString()));\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}