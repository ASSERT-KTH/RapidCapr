{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n\n    List<PeriodFormatterBuilder> parts = new ArrayList<>();\n    Separator sep = null;\n\n    for (int i = 0; i < size; i++) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof Separator) {\n            sep = (Separator) obj;\n            if (i > 0 && elementPairs.get(i - 1) instanceof Separator) {\n                parts.add(new PeriodFormatterBuilder());\n            }\n        } else {\n            if (sep != null) {\n                parts.get(parts.size() - 1).appendSeparator(sep);\n                sep = null;\n            }\n            parts.add(((PeriodFormatterBuilder) obj).appendSeparator((String) null));\n        }\n    }\n\n    if (parts.size() == 1) {\n        return parts.get(0).toFormatter().withPivotYear(2000);\n    }\n\n    PeriodFormatterBuilder pz = new PeriodFormatterBuilder();\n    PeriodFormatterBuilder py = new PeriodFormatterBuilder();\n\n    for (int i = 0; i < parts.size(); i++) {\n        PeriodFormatterBuilder part = parts.get(i);\n        pz.appendSeparator(part.getSeparatorText(), part.getFinalPrintable());\n        py.appendSeparator(part.getSeparatorText(), part.getFinalPrintable());\n        pz.appendMutablePeriod(part.toMutablePeriod().normalizeStandard(), false);\n        py.appendMutablePeriod(part.toMutablePeriod().normalizeStandard(), true);\n    }\n\n    PeriodFormatter printer;\n    PeriodFormatter parser;\n\n    if (notPrinter) {\n        printer = null;\n    } else {\n        printer = pz.toFormatter().withPivotYear(2000);\n    }\n\n    if (notParser) {\n        parser = null;\n    } else {\n        parser = new PeriodFormatterBuilder().append(pz.toPrinter(null), py.toParser()).toFormatter().withPivotYear(2000);\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..33b0f34a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,82 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    }\n+\n+    List<PeriodFormatterBuilder> parts = new ArrayList<>();\n+    Separator sep = null;\n+\n+    for (int i = 0; i < size; i++) {\n+        Object obj = elementPairs.get(i);\n+        if (obj instanceof Separator) {\n+            sep = (Separator) obj;\n+            if (i > 0 && elementPairs.get(i - 1) instanceof Separator) {\n+                parts.add(new PeriodFormatterBuilder());\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (sep != null) {\n+                parts.get(parts.size() - 1).appendSeparator(sep);\n+                sep = null;\n+            }\n+            parts.add(((PeriodFormatterBuilder) obj).appendSeparator((String) null));\n         }\n     }\n \n+    if (parts.size() == 1) {\n+        return parts.get(0).toFormatter().withPivotYear(2000);\n+    }\n+\n+    PeriodFormatterBuilder pz = new PeriodFormatterBuilder();\n+    PeriodFormatterBuilder py = new PeriodFormatterBuilder();\n+\n+    for (int i = 0; i < parts.size(); i++) {\n+        PeriodFormatterBuilder part = parts.get(i);\n+        pz.appendSeparator(part.getSeparatorText(), part.getFinalPrintable());\n+        py.appendSeparator(part.getSeparatorText(), part.getFinalPrintable());\n+        pz.appendMutablePeriod(part.toMutablePeriod().normalizeStandard(), false);\n+        py.appendMutablePeriod(part.toMutablePeriod().normalizeStandard(), true);\n+    }\n+\n+    PeriodFormatter printer;\n+    PeriodFormatter parser;\n+\n+    if (notPrinter) {\n+        printer = null;\n+    } else {\n+        printer = pz.toFormatter().withPivotYear(2000);\n+    }\n+\n+    if (notParser) {\n+        parser = null;\n+    } else {\n+        parser = new PeriodFormatterBuilder().append(pz.toPrinter(null), py.toParser()).toFormatter().withPivotYear(2000);\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}