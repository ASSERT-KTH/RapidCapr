{
    "patch": "DiGraphNode<BasicBlock, Branch> node = getCfg().getNode(ref.getNode().getCfgNode());\nList<DiGraphEdge<BasicBlock, Branch>> outgoing = node.getOutgoingEdges();\nif (outgoing.size() != 1) {\n  return false;\n}\nDiGraphEdge<BasicBlock, Branch> edge = outgoing.get(0);\nBranch value = edge.getValue();\nreturn value instanceof Branch.Conditional;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c5f5033b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+DiGraphNode<BasicBlock, Branch> node = getCfg().getNode(ref.getNode().getCfgNode());\n+List<DiGraphEdge<BasicBlock, Branch>> outgoing = node.getOutgoingEdges();\n+if (outgoing.size() != 1) {\n+  return false;\n+}\n+DiGraphEdge<BasicBlock, Branch> edge = outgoing.get(0);\n+Branch value = edge.getValue();\n+return value instanceof Branch.Conditional;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}