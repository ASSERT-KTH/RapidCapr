{
    "patch": "                    String remainder = str.substring(id.length());\n                    DateTimeZone zone = DateTimeZone.forID(id);\n                    if (remainder.startsWith(\"/\") || remainder.startsWith(\"\\\\\")) {\n                        // Strip separator\n                        remainder = remainder.substring(1);\n                    }\n                    if (remainder.startsWith(\"GMT\")) {\n                        // Strip GMT prefix\n                        remainder = remainder.substring(3);\n                        if (remainder.length() > 0) {\n                            char c = remainder.charAt(0);\n                            if (c == '+' || c == '-') {\n                                // Append numeric offset\n                                remainder = \"UTC\" + remainder;\n                            } else {\n                                // Append named zone id\n                                remainder = \"GMT\" + remainder;\n                            }\n                        } else {\n                            // Append default offset\n                            remainder = \"UTC\";\n                        }\n                    }\n                    DateTimeFormatter tzFormatter = new DateTimeFormatterBuilder()\n                            .appendLiteral('/')\n                            .appendTimeZoneId()\n                            .toFormatter();\n                    zone = tzFormatter.parseDateTime(remainder).getZone();\n                    bucket.setZone(zone);\n                    return position + id.length();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..675ac0dd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,36 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n+                    String remainder = str.substring(id.length());\n+                    DateTimeZone zone = DateTimeZone.forID(id);\n+                    if (remainder.startsWith(\"/\") || remainder.startsWith(\"\\\\\")) {\n+                        // Strip separator\n+                        remainder = remainder.substring(1);\n+                    }\n+                    if (remainder.startsWith(\"GMT\")) {\n+                        // Strip GMT prefix\n+                        remainder = remainder.substring(3);\n+                        if (remainder.length() > 0) {\n+                            char c = remainder.charAt(0);\n+                            if (c == '+' || c == '-') {\n+                                // Append numeric offset\n+                                remainder = \"UTC\" + remainder;\n+                            } else {\n+                                // Append named zone id\n+                                remainder = \"GMT\" + remainder;\n+                            }\n+                        } else {\n+                            // Append default offset\n+                            remainder = \"UTC\";\n+                        }\n+                    }\n+                    DateTimeFormatter tzFormatter = new DateTimeFormatterBuilder()\n+                            .appendLiteral('/')\n+                            .appendTimeZoneId()\n+                            .toFormatter();\n+                    zone = tzFormatter.parseDateTime(remainder).getZone();\n+                    bucket.setZone(zone);\n                     return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}