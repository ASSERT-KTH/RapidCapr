{
    "patch": "private int escape(CharSequence input, int pos, Writer out, int len) throws IOException {\n    if (pos + 1 < len) {\n        char c = input.charAt(pos + 1);\n        switch (c) {\n        case 'r':\n            out.write('\\r');\n            return 2;\n        case 'n':\n            out.write('\\n');\n            return 2;\n        case 't':\n            out.write('\\t');\n            return 2;\n        case 'b':\n            out.write('\\b');\n            return 2;\n        case 'f':\n            out.write('\\f');\n            return 2;\n        case '\\\\':\n            out.write('\\\\');\n            return 2;\n        default:\n            out.write(c);\n            return 2;\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid escape sequence at position \" + pos);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..d506d98c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,36 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+private int escape(CharSequence input, int pos, Writer out, int len) throws IOException {\n+    if (pos + 1 < len) {\n+        char c = input.charAt(pos + 1);\n+        switch (c) {\n+        case 'r':\n+            out.write('\\r');\n+            return 2;\n+        case 'n':\n+            out.write('\\n');\n+            return 2;\n+        case 't':\n+            out.write('\\t');\n+            return 2;\n+        case 'b':\n+            out.write('\\b');\n+            return 2;\n+        case 'f':\n+            out.write('\\f');\n+            return 2;\n+        case '\\\\':\n+            out.write('\\\\');\n+            return 2;\n+        default:\n+            out.write(c);\n+            return 2;\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid escape sequence at position \" + pos);\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}