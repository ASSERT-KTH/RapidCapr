{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    final double l = Gamma.logGamma(a);\n    if (x < a + 1.0) {\n        double prod = 1;\n        double sum = 0;\n        double term = a;\n        while (sum != sum + term) {\n            prod *= x / term;\n            sum += prod;\n            term += 1.0;\n        }\n        return Math.exp(Math.log(sum) - l);\n    } else {\n        final double ax = a * Math.log(x) - x - l;\n        if (ax < -700.0) {\n            return 0.0;\n        } else {\n            return Math.exp(ax);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..83c6ef91a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,31 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    final double l = Gamma.logGamma(a);\n+    if (x < a + 1.0) {\n+        double prod = 1;\n+        double sum = 0;\n+        double term = a;\n+        while (sum != sum + term) {\n+            prod *= x / term;\n+            sum += prod;\n+            term += 1.0;\n+        }\n+        return Math.exp(Math.log(sum) - l);\n+    } else {\n+        final double ax = a * Math.log(x) - x - l;\n+        if (ax < -700.0) {\n+            return 0.0;\n+        } else {\n+            return Math.exp(ax);\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}