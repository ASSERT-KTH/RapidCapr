{
    "patch": "public static String escape(String original) {\n    StringBuffer escaped = new StringBuffer();\n    for (int i = 0; i < original.length(); i++) {\n        char current = original.charAt(i);\n        switch (current) {\n            case '&':\n                escaped.append(\"&amp;\");\n                break;\n            case '\"':\n                escaped.append(\"&quot;\");\n                break;\n            case '\\'':\n                escaped.append(\"&apos;\");\n                break;\n            case '<':\n                escaped.append(\"&lt;\");\n                break;\n            case '>':\n                escaped.append(\"&gt;\");\n                break;\n            default:\n                if (current > 127) {\n                    escaped.append(\"&#\");\n                    escaped.append((int) current);\n                    escaped.append(\";\");\n                } else {\n                    escaped.append(current);\n                }\n        }\n    }\n    return escaped.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..6ad155e6 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,38 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escape(String original) {\n+    StringBuffer escaped = new StringBuffer();\n+    for (int i = 0; i < original.length(); i++) {\n+        char current = original.charAt(i);\n+        switch (current) {\n+            case '&':\n+                escaped.append(\"&amp;\");\n+                break;\n+            case '\"':\n+                escaped.append(\"&quot;\");\n+                break;\n+            case '\\'':\n+                escaped.append(\"&apos;\");\n+                break;\n+            case '<':\n+                escaped.append(\"&lt;\");\n+                break;\n+            case '>':\n+                escaped.append(\"&gt;\");\n+                break;\n+            default:\n+                if (current > 127) {\n+                    escaped.append(\"&#\");\n+                    escaped.append((int) current);\n+                    escaped.append(\";\");\n+                } else {\n+                    escaped.append(current);\n+                }\n+        }\n+    }\n+    return escaped.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}