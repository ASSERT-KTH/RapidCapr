{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n    Map<String, Object> map = gson.fromJson(json, type);\n\n    double typedCount = 0.0;\n    double totalCount = 0.0;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if(value instanceof Integer) {\n            typedCount++;\n            totalCount++;\n        } else if(value instanceof String) {\n            String stringValue = (String) value;\n            if(stringValue.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n                typedCount++;\n                totalCount++;\n            } else {\n              totalCount++;\n            }\n        }\n    }\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..67479833 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n+    Map<String, Object> map = gson.fromJson(json, type);\n+\n+    double typedCount = 0.0;\n+    double totalCount = 0.0;\n+    for (Map.Entry<String, Object> entry : map.entrySet()) {\n+        Object value = entry.getValue();\n+        if(value instanceof Integer) {\n+            typedCount++;\n+            totalCount++;\n+        } else if(value instanceof String) {\n+            String stringValue = (String) value;\n+            if(stringValue.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n+                typedCount++;\n+                totalCount++;\n+            } else {\n+              totalCount++;\n+            }\n+        }\n+    }\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}