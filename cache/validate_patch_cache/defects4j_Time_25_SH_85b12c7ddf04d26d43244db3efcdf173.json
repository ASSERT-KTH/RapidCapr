{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    int diff = 0;\n    long prevLocal = previousTransition(instantAdjusted);\n    long nextLocal = nextTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            \n    if (offsetLocal > offsetAdjusted) {\n        if (nextAdjusted >= prevAdjusted || prevAdjusted <= instantAdjusted) {\n            // we need to select the smallest positive diff (i.e. the smallest magnitude)\n            if (nextAdjusted != prevAdjusted) {\n                long nextInstant = nextAdjusted + (nextAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n                int diffNext = Math.abs(getOffset(nextInstant) - offsetLocal);\n                long prevInstant = prevAdjusted + (prevAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n                int diffPrev = Math.abs(getOffset(prevInstant) - offsetLocal);\n                diff = diffNext <= diffPrev ? getOffset(nextInstant) : getOffset(prevInstant);\n            } else {\n                diff = getOffset(nextAdjusted + offsetLocal);\n            }\n        } else {\n            // we are between a gap and a overlap, so we must go to the next gap...\n            diff = prevLocal > nextLocal ? getOffset(nextLocal + offsetLocal) : offsetLocal;               \n        }\n    } else {\n        if (nextAdjusted >= prevAdjusted || nextAdjusted <= instantAdjusted) {\n            // we need to select the smallest positive diff (i.e. the smallest magnitude)\n            if (nextAdjusted != prevAdjusted) {\n                long nextInstant = nextAdjusted + (nextAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n                int diffNext = Math.abs(getOffset(nextInstant) - offsetAdjusted);\n                long prevInstant = prevAdjusted + (prevAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n                int diffPrev = Math.abs(getOffset(prevInstant) - offsetAdjusted);\n                diff = diffNext <= diffPrev ? getOffset(nextInstant) : getOffset(prevInstant);\n            } else {\n                diff = offsetAdjusted;\n            }\n        } else {\n            // we are between a gap and a overlap, so we must go to the next gap...\n            diff = nextLocal < prevLocal ? getOffset(nextLocal + offsetAdjusted) : offsetAdjusted;\n        }\n    }\n    return diff;\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e45d5c33 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,49 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    int diff = 0;\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            \n+    if (offsetLocal > offsetAdjusted) {\n+        if (nextAdjusted >= prevAdjusted || prevAdjusted <= instantAdjusted) {\n+            // we need to select the smallest positive diff (i.e. the smallest magnitude)\n+            if (nextAdjusted != prevAdjusted) {\n+                long nextInstant = nextAdjusted + (nextAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n+                int diffNext = Math.abs(getOffset(nextInstant) - offsetLocal);\n+                long prevInstant = prevAdjusted + (prevAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n+                int diffPrev = Math.abs(getOffset(prevInstant) - offsetLocal);\n+                diff = diffNext <= diffPrev ? getOffset(nextInstant) : getOffset(prevInstant);\n+            } else {\n+                diff = getOffset(nextAdjusted + offsetLocal);\n+            }\n+        } else {\n+            // we are between a gap and a overlap, so we must go to the next gap...\n+            diff = prevLocal > nextLocal ? getOffset(nextLocal + offsetLocal) : offsetLocal;               \n+        }\n+    } else {\n+        if (nextAdjusted >= prevAdjusted || nextAdjusted <= instantAdjusted) {\n+            // we need to select the smallest positive diff (i.e. the smallest magnitude)\n+            if (nextAdjusted != prevAdjusted) {\n+                long nextInstant = nextAdjusted + (nextAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n+                int diffNext = Math.abs(getOffset(nextInstant) - offsetAdjusted);\n+                long prevInstant = prevAdjusted + (prevAdjusted == instantLocal - offsetAdjusted ? offsetAdjusted : 0L);\n+                int diffPrev = Math.abs(getOffset(prevInstant) - offsetAdjusted);\n+                diff = diffNext <= diffPrev ? getOffset(nextInstant) : getOffset(prevInstant);\n+            } else {\n+                diff = offsetAdjusted;\n+            }\n+        } else {\n+            // we are between a gap and a overlap, so we must go to the next gap...\n+            diff = nextLocal < prevLocal ? getOffset(nextLocal + offsetAdjusted) : offsetAdjusted;\n+        }\n+    }\n+    return diff;\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}