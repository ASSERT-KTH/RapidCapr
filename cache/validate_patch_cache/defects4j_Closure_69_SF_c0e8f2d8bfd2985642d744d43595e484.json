{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getLocation().getSourceFile().getName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor()\n          && !functionType.isNativeObjectType()\n          && (functionType.getReturnType().isUnknownType()\n              || functionType.getReturnType().isVoidType()\n              || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called\n      // in a GETPROP or GETELEM.\n      if (functionType.getTypeOfThis() != null\n          && !TokenUtil.isGet(n.getParent())) {\n        report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE. Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7330ff28 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1544,7 +1544,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n     if (!childType.canBeCalled()) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n       ensureTyped(t, n);\n@@ -1555,11 +1554,10 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // If it is a function type, then validate parameters.\n     if (childType instanceof FunctionType) {\n       FunctionType functionType = (FunctionType) childType;\n-\n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n+      if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getLocation().getSourceFile().getName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n         isExtern = functionSource.isExtern();\n       }\n@@ -1567,16 +1565,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       // Non-native constructors should not be called directly\n       // unless they specify a return type and are defined\n       // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n+      if (functionType.isConstructor()\n+          && !functionType.isNativeObjectType()\n+          && (functionType.getReturnType().isUnknownType()\n+              || functionType.getReturnType().isVoidType()\n+              || !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+      // Functions with explicit 'this' types must be called\n+      // in a GETPROP or GETELEM.\n+      if (functionType.getTypeOfThis() != null\n+          && !TokenUtil.isGet(n.getParent())) {\n+        report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n@@ -1585,7 +1587,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     }\n \n     // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n+    // supported by IE. Either say something about the return type or warn\n     // about the non-portability of the call or both.\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}