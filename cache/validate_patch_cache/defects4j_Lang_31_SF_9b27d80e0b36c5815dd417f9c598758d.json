{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = str.length();\n    final int searchLen = searchChars.length;\n    final int minSupplementaryCodePoint = 0x10000;\n    // Use a set to avoid searching the searchChars array multiple times\n    Set<Character> set = new HashSet<>();\n    for (char c : searchChars) {\n        set.add(c);\n    }\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (ch < minSupplementaryCodePoint) {\n            if (set.contains(ch)) {\n                return true;\n            }\n        } else if (Character.isSurrogate(ch)) {\n            // Two char surrogate pair\n            if (i < strLen - 1 && Character.isHighSurrogate(ch)) {\n                char ch2 = str.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2) && set.contains(ch2)) {\n                    return true;\n                }\n            }\n        } else {\n            // Supplementary character\n            if (set.contains(ch)) {\n                return true;\n            }\n            // Two char supplementary pair\n            if (i < strLen - 1) {\n                char ch2 = str.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2) && set.contains(ch2)) {\n                    return true;\n                }\n                i++; // Increment i to skip the second char of the supplementary code point\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f9f0a2ab 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = str.length();\n+    final int searchLen = searchChars.length;\n+    final int minSupplementaryCodePoint = 0x10000;\n+    // Use a set to avoid searching the searchChars array multiple times\n+    Set<Character> set = new HashSet<>();\n+    for (char c : searchChars) {\n+        set.add(c);\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (ch < minSupplementaryCodePoint) {\n+            if (set.contains(ch)) {\n+                return true;\n+            }\n+        } else if (Character.isSurrogate(ch)) {\n+            // Two char surrogate pair\n+            if (i < strLen - 1 && Character.isHighSurrogate(ch)) {\n+                char ch2 = str.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2) && set.contains(ch2)) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            // Supplementary character\n+            if (set.contains(ch)) {\n+                return true;\n+            }\n+            // Two char supplementary pair\n+            if (i < strLen - 1) {\n+                char ch2 = str.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2) && set.contains(ch2)) {\n+                    return true;\n+                }\n+                i++; // Increment i to skip the second char of the supplementary code point\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}