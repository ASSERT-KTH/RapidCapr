{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Function parameters.\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this object as the first parameter,\n  // but this is not part of the called function's parameter list.\n  boolean hasThisArg = false;\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      hasThisArg = true;\n      cArg = cArg.getNext();\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  while (fnParam != null || cArg != null) {\n    boolean fnParamIsName = fnParam != null && fnParam.isName();\n\n    if (fnParamIsName && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 && NodeUtil.mayEffectMutableState(cArg, compiler)) {\n      return CanInlineResult.NO;\n    } else if (fnParamIsName && NodeUtil.getNameReferenceCount(block, fnParam.getString()) == 1) {\n      // For named parameters with a single reference, whether a function object with named\n      // parameters can be inlined successfully is affected by the values of the actual\n      // arguments passed at the call site. Perform the checks below to determine if inlining\n      // is possible.\n\n      // Check for side-effects of the actual argument.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      // Check if the argument is an object literal.\n      if (cArg.isObjectLit()) {\n        // Check if the function's body can be inlined in place of the function call when the\n        // argument is an object literal.\n        Node newBody = NodeUtil.getFunctionBody(fnNode).cloneTree();\n        boolean success = ReplaceAllFunctionsWithArguments.replace(\n            newBody,\n            ImmutableList.copyOf(new String[] {fnParam.getString()}),\n            ImmutableList.copyOf(new Number[] {0}));\n        if (!success) {\n          return CanInlineResult.NO;\n        }\n      }\n    } else if (fnParamIsName && NodeUtil.getNameReferenceCount(block, fnParam.getString()) == 0) {\n      // If a function parameter is never referenced, we may still need to check the actual\n      // argument for side-effects.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n    } else if (fnParam == null) {\n      // If there are no more parameters, all remaining arguments must not have side-effects.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n    }\n      \n    if (fnParam != null) {\n      fnParam = fnParam.getNext();\n    }\n    if (cArg != null) {\n      if (hasThisArg) {\n        hasThisArg = false;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..c7f552c8 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,85 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n+  // Function parameters.\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  // Functions called via 'call' and 'apply' have a this object as the first parameter,\n+  // but this is not part of the called function's parameter list.\n+  boolean hasThisArg = false;\n+  if (!callNode.getFirstChild().isName()) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      hasThisArg = true;\n+      cArg = cArg.getNext();\n+    } else {\n+      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n     }\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  while (fnParam != null || cArg != null) {\n+    boolean fnParamIsName = fnParam != null && fnParam.isName();\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    if (fnParamIsName && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 && NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+      return CanInlineResult.NO;\n+    } else if (fnParamIsName && NodeUtil.getNameReferenceCount(block, fnParam.getString()) == 1) {\n+      // For named parameters with a single reference, whether a function object with named\n+      // parameters can be inlined successfully is affected by the values of the actual\n+      // arguments passed at the call site. Perform the checks below to determine if inlining\n+      // is possible.\n+\n+      // Check for side-effects of the actual argument.\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      // Check if the argument is an object literal.\n+      if (cArg.isObjectLit()) {\n+        // Check if the function's body can be inlined in place of the function call when the\n+        // argument is an object literal.\n+        Node newBody = NodeUtil.getFunctionBody(fnNode).cloneTree();\n+        boolean success = ReplaceAllFunctionsWithArguments.replace(\n+            newBody,\n+            ImmutableList.copyOf(new String[] {fnParam.getString()}),\n+            ImmutableList.copyOf(new Number[] {0}));\n+        if (!success) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+      }\n+    } else if (fnParamIsName && NodeUtil.getNameReferenceCount(block, fnParam.getString()) == 0) {\n+      // If a function parameter is never referenced, we may still need to check the actual\n+      // argument for side-effects.\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+    } else if (fnParam == null) {\n+      // If there are no more parameters, all remaining arguments must not have side-effects.\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n     }\n-\n-    return CanInlineResult.YES;\n+      \n+    if (fnParam != null) {\n+      fnParam = fnParam.getNext();\n+    }\n+    if (cArg != null) {\n+      if (hasThisArg) {\n+        hasThisArg = false;\n+      }\n+      cArg = cArg.getNext();\n+    }\n   }\n+  return CanInlineResult.YES;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}