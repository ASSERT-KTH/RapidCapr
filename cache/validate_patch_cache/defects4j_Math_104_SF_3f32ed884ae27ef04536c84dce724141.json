{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MyClass {\n\n    public static double regularizedGamma(double a, double x) {\n        double t = x / a;\n        double sum = 1.0 / a;\n        double incr = sum;\n        while (FastMath.abs(incr) > 1e-15 * FastMath.abs(sum)) {\n            a += 1.0;\n            incr *= t / a;\n            sum += incr;\n        }\n        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..692aa2340 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MyClass {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        double t = x / a;\n+        double sum = 1.0 / a;\n+        double incr = sum;\n+        while (FastMath.abs(incr) > 1e-15 * FastMath.abs(sum)) {\n+            a += 1.0;\n+            incr *= t / a;\n+            sum += incr;\n+        }\n+        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}