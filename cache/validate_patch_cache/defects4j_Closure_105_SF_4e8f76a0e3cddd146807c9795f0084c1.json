{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (elem.getType() == Token.STRING) {\n        String currentValue = NodeUtil.getStringValue(elem);\n        // Skip empty strings because they do not contribute to the folded size\n        if (currentValue.isEmpty()) {\n          elem = elem.getNext();\n          continue;\n        }\n        if (!arrayFoldedChildren.isEmpty() && !joinString.isEmpty()) {\n          foldedSize += joinString.length();\n        }\n        foldedSize += currentValue.length();\n        arrayFoldedChildren.add(elem);\n      } else {\n        if (arrayFoldedChildren.isEmpty() || !joinString.isEmpty()) {\n          foldedSize += InlineCostEstimator.getCost(elem);\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    // Empty array, replace with empty string.\n    if (arrayFoldedChildren.size() == 0) {\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      t.getCompiler().reportCodeChange();\n      return;\n    }\n\n    Node firstElem = arrayFoldedChildren.get(0);\n    Node lastElem = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n    StringBuilder sb = new StringBuilder();\n    // Don't add joinString to the start or end of the final folded string.\n    boolean skipJoinStringAtStart = firstElem.getType() == Token.STRING &&\n        NodeUtil.getStringValue(firstElem).length() == 0;\n    boolean skipJoinStringAtEnd = lastElem.getType() == Token.STRING &&\n        NodeUtil.getStringValue(lastElem).length() == 0;\n    for (Node node : arrayFoldedChildren) {\n      if (node.getType() == Token.STRING) {\n        String currentValue = NodeUtil.getStringValue(node);\n        if (sb.length() > 0 && !joinString.isEmpty() && !skipJoinStringAtEnd) {\n          sb.append(joinString);\n          foldedSize += joinString.length();\n        }\n        sb.append(currentValue);\n      } else {\n        if (sb.length() > 0 && !skipJoinStringAtEnd) {\n          if (!joinString.isEmpty()) {\n            sb.append(joinString);\n            foldedSize += joinString.length();\n          } else {\n            foldedSize--; // Subtract the extra comma.\n          }\n        }\n        // Recursively fold this child.\n        tryFoldStringJoin(t, node, node, right, node.getParent());\n        if (node.getFirstChild() != null) {\n          // This node was folded to a single string, so we need to unwrap it.\n          Node singleString = node.getFirstChild();\n          node.getParent().replaceChild(node, singleString);\n        }\n        foldedSize += InlineCostEstimator.getCost(node);\n        sb.append(NodeUtil.getStringValue(node));\n      }\n    }\n\n    // String is too large, replace with array join.\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n      return;\n    }\n\n    // Unfold the joined array and replace the original node.\n    Node foldedNode;\n    if (arrayFoldedChildren.size() == 1) {\n      foldedNode = arrayFoldedChildren.get(0);\n    } else {\n      foldedNode = new Node(Token.ADD);\n      Node arrayNodeCopy = arrayNode.cloneTree();\n      // Need to remove the join property from the array.\n      arrayNodeCopy.removeChild(functionName);\n      foldedNode.addChildToBack(arrayNodeCopy);\n      if (!joinString.isEmpty()) {\n        foldedNode.addChildToBack(Node.newString(joinString));\n      }\n      foldedNode.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    }\n    parent.replaceChild(n, foldedNode);\n    t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..795f0393 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,7 +1458,7 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n@@ -1473,80 +1473,101 @@ class FoldConstants extends AbstractPostOrderCallback\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n+      if (elem.getType() == Token.STRING) {\n+        String currentValue = NodeUtil.getStringValue(elem);\n+        // Skip empty strings because they do not contribute to the folded size\n+        if (currentValue.isEmpty()) {\n+          elem = elem.getNext();\n+          continue;\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        if (!arrayFoldedChildren.isEmpty() && !joinString.isEmpty()) {\n+          foldedSize += joinString.length();\n+        }\n+        foldedSize += currentValue.length();\n+        arrayFoldedChildren.add(elem);\n       } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (arrayFoldedChildren.isEmpty() || !joinString.isEmpty()) {\n+          foldedSize += InlineCostEstimator.getCost(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n       elem = elem.getNext();\n     }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+    // Empty array, replace with empty string.\n+    if (arrayFoldedChildren.size() == 0) {\n+      Node emptyStringNode = Node.newString(\"\");\n+      parent.replaceChild(n, emptyStringNode);\n+      t.getCompiler().reportCodeChange();\n+      return;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n+    Node firstElem = arrayFoldedChildren.get(0);\n+    Node lastElem = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n+    StringBuilder sb = new StringBuilder();\n+    // Don't add joinString to the start or end of the final folded string.\n+    boolean skipJoinStringAtStart = firstElem.getType() == Token.STRING &&\n+        NodeUtil.getStringValue(firstElem).length() == 0;\n+    boolean skipJoinStringAtEnd = lastElem.getType() == Token.STRING &&\n+        NodeUtil.getStringValue(lastElem).length() == 0;\n+    for (Node node : arrayFoldedChildren) {\n+      if (node.getType() == Token.STRING) {\n+        String currentValue = NodeUtil.getStringValue(node);\n+        if (sb.length() > 0 && !joinString.isEmpty() && !skipJoinStringAtEnd) {\n+          sb.append(joinString);\n+          foldedSize += joinString.length();\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n+        sb.append(currentValue);\n+      } else {\n+        if (sb.length() > 0 && !skipJoinStringAtEnd) {\n+          if (!joinString.isEmpty()) {\n+            sb.append(joinString);\n+            foldedSize += joinString.length();\n+          } else {\n+            foldedSize--; // Subtract the extra comma.\n+          }\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+        // Recursively fold this child.\n+        tryFoldStringJoin(t, node, node, right, node.getParent());\n+        if (node.getFirstChild() != null) {\n+          // This node was folded to a single string, so we need to unwrap it.\n+          Node singleString = node.getFirstChild();\n+          node.getParent().replaceChild(node, singleString);\n         }\n-        break;\n+        foldedSize += InlineCostEstimator.getCost(node);\n+        sb.append(NodeUtil.getStringValue(node));\n+      }\n     }\n+\n+    // String is too large, replace with array join.\n+    int originalSize = InlineCostEstimator.getCost(n);\n+    if (foldedSize > originalSize) {\n+      return;\n+    }\n+\n+    // Unfold the joined array and replace the original node.\n+    Node foldedNode;\n+    if (arrayFoldedChildren.size() == 1) {\n+      foldedNode = arrayFoldedChildren.get(0);\n+    } else {\n+      foldedNode = new Node(Token.ADD);\n+      Node arrayNodeCopy = arrayNode.cloneTree();\n+      // Need to remove the join property from the array.\n+      arrayNodeCopy.removeChild(functionName);\n+      foldedNode.addChildToBack(arrayNodeCopy);\n+      if (!joinString.isEmpty()) {\n+        foldedNode.addChildToBack(Node.newString(joinString));\n+      }\n+      foldedNode.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n+    }\n+    parent.replaceChild(n, foldedNode);\n     t.getCompiler().reportCodeChange();\n-  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}