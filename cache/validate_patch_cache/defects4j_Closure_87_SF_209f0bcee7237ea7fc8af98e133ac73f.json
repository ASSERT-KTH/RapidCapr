{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || n.getChildCount() != 1) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n\n  // rule out function expressions / declarations\n  if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n    return false;\n  }\n\n  // rule out calls\n  if (NodeUtil.isCall(child)) {\n    return false;\n  }\n\n  // rule out ifs with more than one child\n  if (child.getType() == Token.IF && child.getChildCount() > 2) {\n    return false;\n  }\n\n  // rule out strings inside expression statements, and property accesses without \"this\"\n  if (child.getType() == Token.STRING && n.getParent().getType() == Token.EXPR_RESULT) {\n    return false;\n  } else if (child.getType() == Token.GETPROP && !child.getFirstChild().isThis()) {\n    return false;\n  }\n\n  if (n.getParent().getType() == Token.EXPR_RESULT || n.getParent().getType() == Token.RETURN || n.getParent().getType() == Token.THROW) {\n    // Exclude from replacement expressions with side effects\n    if (NodeUtil.mayHaveSideEffects(child)) {\n      return false;\n    }\n  }\n\n  // rule out reference to this\n  return !NodeUtil.referencesThisOrArguments(child);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..341d408a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,46 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || n.getChildCount() != 1) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+\n+  // rule out function expressions / declarations\n+  if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n+    return false;\n+  }\n+\n+  // rule out calls\n+  if (NodeUtil.isCall(child)) {\n+    return false;\n+  }\n+\n+  // rule out ifs with more than one child\n+  if (child.getType() == Token.IF && child.getChildCount() > 2) {\n+    return false;\n+  }\n \n+  // rule out strings inside expression statements, and property accesses without \"this\"\n+  if (child.getType() == Token.STRING && n.getParent().getType() == Token.EXPR_RESULT) {\n+    return false;\n+  } else if (child.getType() == Token.GETPROP && !child.getFirstChild().isThis()) {\n     return false;\n   }\n \n+  if (n.getParent().getType() == Token.EXPR_RESULT || n.getParent().getType() == Token.RETURN || n.getParent().getType() == Token.THROW) {\n+    // Exclude from replacement expressions with side effects\n+    if (NodeUtil.mayHaveSideEffects(child)) {\n+      return false;\n+    }\n+  }\n+\n+  // rule out reference to this\n+  return !NodeUtil.referencesThisOrArguments(child);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}