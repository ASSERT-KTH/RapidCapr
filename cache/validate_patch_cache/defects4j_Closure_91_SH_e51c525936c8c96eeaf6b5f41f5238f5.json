{
    "patch": "      Node fnNameNode = n.getFirstChild();\n      String fnName = fnNameNode.getString();\n\n      // If this is a function being assigned to an object, don't traverse it\n      // if the object is an extern.\n      if (parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild().getType() == Token.GETPROP &&\n          parent.getFirstChild().getLastChild().getString().equals(fnName)) {\n        Node lhs = parent.getFirstChild().getFirstChild();\n        if (lhs.getType() == Token.NAME) {\n          String name = lhs.getString();\n          if (currentScope.isKnownGlobal(name) &&\n              currentScope.getVar(name).isExtern()) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ff66d1d7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,21 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = n.getFirstChild();\n+      String fnName = fnNameNode.getString();\n+\n+      // If this is a function being assigned to an object, don't traverse it\n+      // if the object is an extern.\n+      if (parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild().getType() == Token.GETPROP &&\n+          parent.getFirstChild().getLastChild().getString().equals(fnName)) {\n+        Node lhs = parent.getFirstChild().getFirstChild();\n+        if (lhs.getType() == Token.NAME) {\n+          String name = lhs.getString();\n+          if (currentScope.isKnownGlobal(name) &&\n+              currentScope.getVar(name).isExtern()) {\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}