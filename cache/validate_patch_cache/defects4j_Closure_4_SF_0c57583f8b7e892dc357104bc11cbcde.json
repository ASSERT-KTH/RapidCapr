{
    "patch": "    // Keep track of whether we resolved via registry or properties.\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    boolean resolvedViaProperties = false;\n\n    // Check if we need to handle cyclic hierarchies.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    // If we resolved via the registry, call resolveInternal for this class and finish property continuations.\n    if (resolvedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // Try resolving via properties, while still checking for a prototype cycle.\n    resolvedViaProperties = resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    // If we resolved via properties, call resolveInternal for this class, finish property continuations.\n    if (resolvedViaProperties) {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If we haven't resolved yet, call resolveInternal for this class.\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ? getReferencedType() : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..df9e4514 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,46 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    // Keep track of whether we resolved via registry or properties.\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProperties = false;\n+\n+    // Check if we need to handle cyclic hierarchies.\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    if (resolved) {\n+    // If we resolved via the registry, call resolveInternal for this class and finish property continuations.\n+    if (resolvedViaRegistry) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    // Try resolving via properties, while still checking for a prototype cycle.\n+    resolvedViaProperties = resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    // If we resolved via properties, call resolveInternal for this class, finish property continuations.\n+    if (resolvedViaProperties) {\n+      super.resolveInternal(t, enclosing);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n+\n+    // If we haven't resolved yet, call resolveInternal for this class.\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}