{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals) {\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // Simple case: compare lhs and rhs using equals method\n            isEquals = lhs.equals(rhs);\n        } else if (lhsClass != rhs.getClass()) {\n            // Not the same type of array\n            setEquals(false);\n        } else if (lhs instanceof long[]) {\n            // Compare long arrays\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            // Compare int arrays\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            // Compare short arrays\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            // Compare char arrays\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            // Compare byte arrays\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            // Compare double arrays\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            // Compare float arrays\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            // Compare boolean arrays\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Complex case: compare each element of the array recursively\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..b859b75f 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,53 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals) {\n         if (lhs == rhs) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n+            setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+            // Simple case: compare lhs and rhs using equals method\n+            isEquals = lhs.equals(rhs);\n+        } else if (lhsClass != rhs.getClass()) {\n+            // Not the same type of array\n+            setEquals(false);\n+        } else if (lhs instanceof long[]) {\n+            // Compare long arrays\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n+            // Compare int arrays\n             append((int[]) lhs, (int[]) rhs);\n         } else if (lhs instanceof short[]) {\n+            // Compare short arrays\n             append((short[]) lhs, (short[]) rhs);\n         } else if (lhs instanceof char[]) {\n+            // Compare char arrays\n             append((char[]) lhs, (char[]) rhs);\n         } else if (lhs instanceof byte[]) {\n+            // Compare byte arrays\n             append((byte[]) lhs, (byte[]) rhs);\n         } else if (lhs instanceof double[]) {\n+            // Compare double arrays\n             append((double[]) lhs, (double[]) rhs);\n         } else if (lhs instanceof float[]) {\n+            // Compare float arrays\n             append((float[]) lhs, (float[]) rhs);\n         } else if (lhs instanceof boolean[]) {\n+            // Compare boolean arrays\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n+            // Complex case: compare each element of the array recursively\n             append((Object[]) lhs, (Object[]) rhs);\n         }\n-        return this;\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}