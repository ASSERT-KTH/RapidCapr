{
    "patch": "        if (m.getRowDimension() > 5000) {\n            // if the matrix is too large, use an iterative method to compute the square root\n            final int n = m.getRowDimension();\n            final double[][] data = new double[n][n];\n            for (int i = 0; i < n; i++) {\n                data[i] = m.getRow(i);\n            }\n            final RealMatrix x = new Array2DRowRealMatrix(data);\n            final RealMatrix xt = x.transpose();\n            RealMatrix result = x.scalarMultiply(0.5);\n            RealMatrix prevResult;\n            do {\n                prevResult = result;\n                result = result.add(xt.multiply(new LUDecomposition(result).getSolver().getInverse()).scalarMultiply(0.5));\n            } while (!prevResult.equals(result, 1e-6));\n            return result;\n        } else {\n            // if the matrix is small enough, use the EigenDecomposition class to compute the square root\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..13e1f66ac 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        if (m.getRowDimension() > 5000) {\n+            // if the matrix is too large, use an iterative method to compute the square root\n+            final int n = m.getRowDimension();\n+            final double[][] data = new double[n][n];\n+            for (int i = 0; i < n; i++) {\n+                data[i] = m.getRow(i);\n+            }\n+            final RealMatrix x = new Array2DRowRealMatrix(data);\n+            final RealMatrix xt = x.transpose();\n+            RealMatrix result = x.scalarMultiply(0.5);\n+            RealMatrix prevResult;\n+            do {\n+                prevResult = result;\n+                result = result.add(xt.multiply(new LUDecomposition(result).getSolver().getInverse()).scalarMultiply(0.5));\n+            } while (!prevResult.equals(result, 1e-6));\n+            return result;\n+        } else {\n+            // if the matrix is small enough, use the EigenDecomposition class to compute the square root\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}