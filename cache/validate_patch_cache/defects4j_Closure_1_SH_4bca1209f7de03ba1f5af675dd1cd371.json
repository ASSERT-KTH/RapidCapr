{
    "patch": "Apologies for the mistake. Here is the correct hunk to be inserted at the infill location:\n\n```\n Set<Var> referenced = new HashSet<>();\n    NodeTraversal.traverse(compiler, fnScope.getRootNode(),\n        new NodeTraversal.AbstractPostOrderCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && n.getParent().isParamList()) {\n              referenced.add(fnScope.getVar(n.getString()));\n            }\n          }\n        });\n``` \n\nThis should fix the original test failure.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..679f6ba0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Apologies for the mistake. Here is the correct hunk to be inserted at the infill location:\n+\n+```\n+ Set<Var> referenced = new HashSet<>();\n+    NodeTraversal.traverse(compiler, fnScope.getRootNode(),\n+        new NodeTraversal.AbstractPostOrderCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isName() && n.getParent().isParamList()) {\n+              referenced.add(fnScope.getVar(n.getString()));\n+            }\n+          }\n+        });\n+``` \n+\n+This should fix the original test failure.\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}