{
    "patch": "    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        // Handle '0' as potential octal\n        if (val.length() == 1 && Character.isDigit(val.charAt(0)) && val.charAt(0) != '0') {\n            return createInteger(val);\n        }\n        /*\n         * Check for signs.\n         */\n        char firstChar = val.charAt(0);\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;\n\n        if (decPos > -1) {\n\n            // There is a decimal point\n\n            if (expPos > -1) {\n\n                // And there is an exponent marker\n\n                if (expPos < decPos || expPos > val.length()) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                // There is no exponent marker\n\n                dec = val.substring(decPos + 1);\n            }\n\n            // The integer component cannot be empty\n\n            mant = val.substring(0, decPos);\n\n        } else {\n\n            if (expPos > -1) {\n\n                // There is no decimal point, but there is an exponent\n\n                if (expPos > val.length()) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n\n                mant = val.substring(0, expPos - 1);\n                dec = null;\n            } else {\n\n                // There is no decimal or exponent\n\n                mant = val;\n                dec = null;\n            }\n        }\n\n        // Handle sign and convert int strings to int\n\n        if (!Character.isDigit(lastChar)) {\n\n            if (expPos == val.length() || expPos == -1) {\n\n                String str = val.substring(0, val.length() - 1);\n\n                boolean allZeros = isAllZeros(mant) && isAllZeros(str.substring(1));\n\n                switch (lastChar) {\n\n                case 'l':\n                case 'L':\n                    if (dec == null && exp == null) {\n                        return createLong(str);\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                    // Fall through to createBigDecimal\n\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = createFloat(str);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    // Fall through to createBigDecimal\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = createDouble(str);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // empty catch\n                    }\n\n                    try {\n                        return createBigDecimal(str);\n                    } catch (NumberFormatException e) {\n                        // empty catch\n                    }\n\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n                default:\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n            }\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n\n        // Integer or decimal\n\n        if (expPos > -1) {\n            exp = val.substring(expPos + 1);\n        } else {\n            exp = null;\n        }\n\n        if (dec == null && exp == null) {\n            // Integer.\n            if (val.charAt(0) == '+' || val.charAt(0) == '-') {\n                if (val.charAt(0) == '-') {\n                    return createInteger(\"-\" + mant);\n                }\n                return createInteger(mant);\n            }\n            return createInteger(val);\n        }\n\n        try {\n            // Decimal\n            if (exp != null) {\n\n                int i = Integer.parseInt(exp);\n                if (i < 0) {\n                    dec = getMantissa(getScientificNotation(val));\n                } else if (i < DECIMAL_POINT_MAX_DIGITS) {\n                    dec = getMantissa(shift(val, i));\n                } else {\n                    dec = getMantissa(getScientificNotation(val));\n                }\n\n                return createBigDecimal(shift(val, i));\n\n            } else {\n                return createBigDecimal(val);\n            }\n\n        } catch (NumberFormatException e) {\n            // empty catch\n        }\n\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..42e58b11 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,173 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+    public static Number createNumber(String val) throws NumberFormatException {\n+        if (val == null) {\n+            return null;\n+        }\n+        if (val.length() == 0) {\n+            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+        }\n+        // Handle '0' as potential octal\n+        if (val.length() == 1 && Character.isDigit(val.charAt(0)) && val.charAt(0) != '0') {\n+            return createInteger(val);\n+        }\n+        /*\n+         * Check for signs.\n+         */\n+        char firstChar = val.charAt(0);\n+        char lastChar = val.charAt(val.length() - 1);\n+        String mant;\n+        String dec;\n+        String exp;\n+        int decPos = val.indexOf('.');\n+        int expPos = (val.indexOf('e') + val.indexOf('E')) + 1;\n+\n+        if (decPos > -1) {\n+\n+            // There is a decimal point\n+\n+            if (expPos > -1) {\n+\n+                // And there is an exponent marker\n+\n+                if (expPos < decPos || expPos > val.length()) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+\n+                dec = val.substring(decPos + 1, expPos);\n+            } else {\n+                // There is no exponent marker\n+\n+                dec = val.substring(decPos + 1);\n+            }\n+\n+            // The integer component cannot be empty\n+\n+            mant = val.substring(0, decPos);\n+\n+        } else {\n+\n+            if (expPos > -1) {\n+\n+                // There is no decimal point, but there is an exponent\n+\n+                if (expPos > val.length()) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+\n+                mant = val.substring(0, expPos - 1);\n+                dec = null;\n+            } else {\n+\n+                // There is no decimal or exponent\n+\n+                mant = val;\n+                dec = null;\n+            }\n+        }\n+\n+        // Handle sign and convert int strings to int\n+\n+        if (!Character.isDigit(lastChar)) {\n+\n+            if (expPos == val.length() || expPos == -1) {\n+\n+                String str = val.substring(0, val.length() - 1);\n+\n+                boolean allZeros = isAllZeros(mant) && isAllZeros(str.substring(1));\n+\n+                switch (lastChar) {\n+\n+                case 'l':\n+                case 'L':\n+                    if (dec == null && exp == null) {\n+                        return createLong(str);\n+                    }\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    // Fall through to createBigDecimal\n+\n+                case 'f':\n+                case 'F':\n+                    try {\n+                        Float f = createFloat(str);\n+                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                            return f;\n+                        }\n+                    } catch (NumberFormatException e) {\n+                        // ignore the bad number\n+                    }\n+                    // Fall through to createBigDecimal\n+                case 'd':\n+                case 'D':\n+                    try {\n+                        Double d = createDouble(str);\n+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                            return d;\n+                        }\n+                    } catch (NumberFormatException nfe) {\n+                        // empty catch\n+                    }\n+\n+                    try {\n+                        return createBigDecimal(str);\n+                    } catch (NumberFormatException e) {\n+                        // empty catch\n+                    }\n+\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+\n+                default:\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+            }\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+\n+        // Integer or decimal\n+\n+        if (expPos > -1) {\n+            exp = val.substring(expPos + 1);\n+        } else {\n+            exp = null;\n+        }\n+\n+        if (dec == null && exp == null) {\n+            // Integer.\n+            if (val.charAt(0) == '+' || val.charAt(0) == '-') {\n+                if (val.charAt(0) == '-') {\n+                    return createInteger(\"-\" + mant);\n+                }\n+                return createInteger(mant);\n+            }\n+            return createInteger(val);\n+        }\n+\n+        try {\n+            // Decimal\n+            if (exp != null) {\n+\n+                int i = Integer.parseInt(exp);\n+                if (i < 0) {\n+                    dec = getMantissa(getScientificNotation(val));\n+                } else if (i < DECIMAL_POINT_MAX_DIGITS) {\n+                    dec = getMantissa(shift(val, i));\n+                } else {\n+                    dec = getMantissa(getScientificNotation(val));\n+                }\n+\n+                return createBigDecimal(shift(val, i));\n+\n+            } else {\n+                return createBigDecimal(val);\n+            }\n+\n+        } catch (NumberFormatException e) {\n+            // empty catch\n+        }\n+\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}