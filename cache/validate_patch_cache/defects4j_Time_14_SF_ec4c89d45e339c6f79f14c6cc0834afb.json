{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        try {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            if (e.getDateTimeFieldType() != DateTimeFieldType.dayOfMonth()) {\n                throw e;\n            }\n            int day = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n            MonthDay md = new MonthDay(partial, iChronology);\n            int maxDay = md.dayOfMonth().getMaximumValue();\n            int yearToAdd = valueToAdd / 12;\n            int monthToAdd = valueToAdd % 12;\n            md = md.plusMonths(monthToAdd);\n            md = md.plusYears(yearToAdd);\n            if (day > maxDay) {\n                md = md.withDayOfMonth(maxDay);\n            } else {\n                md = md.withDayOfMonth(day);\n            }\n            return iChronology.get(partial, md.toDateTime(LocalTime.MIDNIGHT, iChronology).getMillis());\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e2ca4b7b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        try {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getDateTimeFieldType() != DateTimeFieldType.dayOfMonth()) {\n+                throw e;\n+            }\n+            int day = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+            MonthDay md = new MonthDay(partial, iChronology);\n+            int maxDay = md.dayOfMonth().getMaximumValue();\n+            int yearToAdd = valueToAdd / 12;\n+            int monthToAdd = valueToAdd % 12;\n+            md = md.plusMonths(monthToAdd);\n+            md = md.plusYears(yearToAdd);\n+            if (day > maxDay) {\n+                md = md.withDayOfMonth(maxDay);\n+            } else {\n+                md = md.withDayOfMonth(day);\n+            }\n+            return iChronology.get(partial, md.toDateTime(LocalTime.MIDNIGHT, iChronology).getMillis());\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}