{
    "patch": "Set<Var> referenced = varReferences.get(scope);\n    if (referenced == null) {\n      referenced = Scope.getVarIterable(scope);\n    }\n\n    Node functionNode = scope.getRootNode();\n    Preconditions.checkState(functionNode.isFunction(), \"Expected a function node\");\n\n    if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node parameterList = functionNode.getFirstChild().getNext();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(functionNode);\n\n    if (!modifyCallers) {\n      Node parameter = parameterList.getLastChild();\n      while (parameter != null) {\n        if (!referenced.contains(scope.getVar(parameter.getString()))) {\n          // Remove the parameter.\n          parameterList.removeChild(parameter);\n          compiler.reportCodeChange();\n        } else {\n          // Stop when we first encounter a parameter that should not be removed.\n          break;\n        }\n        parameter = parameterList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(scope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f73fc29c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<Var> referenced = varReferences.get(scope);\n+    if (referenced == null) {\n+      referenced = Scope.getVarIterable(scope);\n+    }\n+\n+    Node functionNode = scope.getRootNode();\n+    Preconditions.checkState(functionNode.isFunction(), \"Expected a function node\");\n+\n+    if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node parameterList = functionNode.getFirstChild().getNext();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(functionNode);\n+\n+    if (!modifyCallers) {\n+      Node parameter = parameterList.getLastChild();\n+      while (parameter != null) {\n+        if (!referenced.contains(scope.getVar(parameter.getString()))) {\n+          // Remove the parameter.\n+          parameterList.removeChild(parameter);\n+          compiler.reportCodeChange();\n+        } else {\n+          // Stop when we first encounter a parameter that should not be removed.\n+          break;\n+        }\n+        parameter = parameterList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(scope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}