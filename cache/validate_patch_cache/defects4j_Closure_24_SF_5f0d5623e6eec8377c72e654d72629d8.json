{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (!n.isName()) {\n      continue;\n    }\n    boolean isAlias = false;\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar()) {\n      Node grandparent = parent.getParent();\n      boolean isFunction = grandparent != null && grandparent.isFunction();\n      if (isFunction) { // check if variable is declared in a function\n        Node value = v.getInitialValue();\n        if (value != null && value.isQualifiedName()) { // check if variable has a simple alias\n          isAlias = true;\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n          String qualifiedName = value.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        }\n      } else {\n        // Error: variable not declared in a function\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n\n    if (!isAlias && v.isLocal()) {\n      // Error: variable not an alias\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..c4ce795a 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,41 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (!n.isName()) {\n+      continue;\n+    }\n+    boolean isAlias = false;\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar()) {\n+      Node grandparent = parent.getParent();\n+      boolean isFunction = grandparent != null && grandparent.isFunction();\n+      if (isFunction) { // check if variable is declared in a function\n+        Node value = v.getInitialValue();\n+        if (value != null && value.isQualifiedName()) { // check if variable has a simple alias\n+          isAlias = true;\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = value.getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n         }\n+      } else {\n+        // Error: variable not declared in a function\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n \n+    if (!isAlias && v.isLocal()) {\n+      // Error: variable not an alias\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+    }\n+  }\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable x is in a goog.scope and is not an alias. at testcode line 1 : 27 expected:<0> but was:<1>",
    "test_result": "FAIL"
}