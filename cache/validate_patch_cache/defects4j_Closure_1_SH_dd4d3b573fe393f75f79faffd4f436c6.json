{
    "patch": "// strip unreferenced args if we are optimizing calls\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      return;\n    }\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean argumentRemoved = false;\n    Iterable<Node> args = argList.children();\n    for (Node arg : args) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        argList.removeChild(arg);\n        argumentRemoved = true;\n      }\n    }\n\n    if (argumentRemoved) {\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8930c178 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// strip unreferenced args if we are optimizing calls\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      return;\n+    }\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean argumentRemoved = false;\n+    Iterable<Node> args = argList.children();\n+    for (Node arg : args) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(arg);\n+        argumentRemoved = true;\n+      }\n+    }\n+\n+    if (argumentRemoved) {\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}