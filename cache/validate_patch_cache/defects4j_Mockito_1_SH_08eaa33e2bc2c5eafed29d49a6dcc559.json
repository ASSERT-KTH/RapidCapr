{
    "patch": "            Object[] args = invocation.getArguments();\n            int length = args.length;\n            Object[] varargs = new Object[0];\n            if (isVariableArgument(invocation, indexOfVararg)) {\n                varargs = Array.newInstance(invocation.getMethod().getParameterTypes()[indexOfVararg].getComponentType(), length - indexOfVararg);\n                for (int i = indexOfVararg; i < length; i++) {\n                    Array.set(varargs, i - indexOfVararg, args[i]);\n                }\n                length = indexOfVararg;\n            }\n            for (int position = 0; position < length; position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArguments()[position]);\n                }\n            }\n            for (int i = 0; i < varargs.length; i++) {\n                Matcher m = matchers.get(indexOfVararg);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(varargs[i]);",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..793cf81a2 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,26 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] args = invocation.getArguments();\n+            int length = args.length;\n+            Object[] varargs = new Object[0];\n+            if (isVariableArgument(invocation, indexOfVararg)) {\n+                varargs = Array.newInstance(invocation.getMethod().getParameterTypes()[indexOfVararg].getComponentType(), length - indexOfVararg);\n+                for (int i = indexOfVararg; i < length; i++) {\n+                    Array.set(varargs, i - indexOfVararg, args[i]);\n+                }\n+                length = indexOfVararg;\n+            }\n+            for (int position = 0; position < length; position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArguments()[position]);\n+                }\n+            }\n+            for (int i = 0; i < varargs.length; i++) {\n+                Matcher m = matchers.get(indexOfVararg);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(varargs[i]);\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}