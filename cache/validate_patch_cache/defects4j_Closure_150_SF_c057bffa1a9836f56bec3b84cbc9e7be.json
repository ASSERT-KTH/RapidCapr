{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) throws RuntimeException {\n    try {\n        if (n.isScript() || n.isBlock()) {\n            return;\n        }\n        \n        if (n.isFunction()) {\n            defineDeclaredFunction(n, parent);\n            return;\n        }\n\n        if (n.isCatch()) {\n            defineCatch(n, parent);\n            return;\n        }\n\n        if (n.isVar()) {\n            defineVar(n, parent);\n            return;\n        }\n        \n        if (parent != null && parent.isCall() && n.isParam()) {\n            handleFunctionInputs(parent);\n            return;\n        }\n\n        attachLiteralTypes(n);\n    } catch (Exception e) {\n        // handle the exception\n        System.err.println(\"Exception during traversal: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dbdc9dc7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,39 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) throws RuntimeException {\n+    try {\n+        if (n.isScript() || n.isBlock()) {\n+            return;\n+        }\n+        \n+        if (n.isFunction()) {\n+            defineDeclaredFunction(n, parent);\n+            return;\n+        }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        if (n.isCatch()) {\n+            defineCatch(n, parent);\n+            return;\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        if (n.isVar()) {\n+            defineVar(n, parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        \n+        if (parent != null && parent.isCall() && n.isParam()) {\n+            handleFunctionInputs(parent);\n+            return;\n+        }\n+\n+        attachLiteralTypes(n);\n+    } catch (Exception e) {\n+        // handle the exception\n+        System.err.println(\"Exception during traversal: \" + e.getMessage());\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}