{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            if (objType.hasProperty(prop)) {\n              objType = objType.withProperty(prop, objType.getPropertyType(prop).getLeastSupertype(propType));\n            } else {\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            }\n          }\n        }\n        if (type.isConstructor() && !objType.isStructurallyValid()) {\n          warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(), STRICT_INEXISTENT_PROPERTY,\n              JSType.toAnnotationString(objType), n.getQualifiedName()));\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..23c23fc7 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1124,16 +1124,21 @@ class TypeInference\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (objType.hasProperty(prop)) {\n+              objType = objType.withProperty(prop, objType.getPropertyType(prop).getLeastSupertype(propType));\n+            } else {\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n+        if (type.isConstructor() && !objType.isStructurallyValid()) {\n+          warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(), STRICT_INEXISTENT_PROPERTY,\n+              JSType.toAnnotationString(objType), n.getQualifiedName()));\n+        }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}