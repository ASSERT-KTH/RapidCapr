{
    "patch": "        super(duration);\n        // fix for [3264409]\n        iPeriodType = PeriodType.standard().withYearsRemoved();\n        iDurationType = iPeriodType.getDurationType();\n        \n        // initialize weeks based on duration\n        long weeks = duration / (long)DateTimeConstants.MILLIS_PER_WEEK;\n        iValues = new int[PERIOD_FIELD_COUNT];\n        iValues[WEEKS] = Math.toIntExact(weeks);\n        iValues[MILLIS] = (int)(duration - (weeks * (long)DateTimeConstants.MILLIS_PER_WEEK));",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..56d7d3f1 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,16 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        super(duration);\n+        // fix for [3264409]\n+        iPeriodType = PeriodType.standard().withYearsRemoved();\n+        iDurationType = iPeriodType.getDurationType();\n+        \n+        // initialize weeks based on duration\n+        long weeks = duration / (long)DateTimeConstants.MILLIS_PER_WEEK;\n+        iValues = new int[PERIOD_FIELD_COUNT];\n+        iValues[WEEKS] = Math.toIntExact(weeks);\n+        iValues[MILLIS] = (int)(duration - (weeks * (long)DateTimeConstants.MILLIS_PER_WEEK));\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}