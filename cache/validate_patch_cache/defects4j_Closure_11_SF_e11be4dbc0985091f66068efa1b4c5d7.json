{
    "patch": "public static Properties getprop(String filename) throws IOException {\n    Properties props = new Properties();\n    try (InputStream stream = new FileInputStream(filename)) {\n        props.load(stream);\n    } catch (IOException e) {\n        System.err.println(\"Unable to read \" + filename);\n        throw e;\n    }\n    String value = props.getProperty(\"test.property\");\n    if (value == null || value.isEmpty()) {\n        String message = \"Missing 'test.property' in \" + filename;\n        System.err.println(message);\n        throw new IllegalArgumentException(message);\n    }\n    String[] warnings = props.getProperty(\"test.warning\", \"\").split(\",\");\n    if (warnings.length > 0 && !warnings[0].isEmpty()) {\n        System.err.println(\"Warning: \" + warnings[0]);\n        assertTrue(\"expected a warning\", warnings.length > 0);\n    }\n    return props;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..09c13c19 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static Properties getprop(String filename) throws IOException {\n+    Properties props = new Properties();\n+    try (InputStream stream = new FileInputStream(filename)) {\n+        props.load(stream);\n+    } catch (IOException e) {\n+        System.err.println(\"Unable to read \" + filename);\n+        throw e;\n+    }\n+    String value = props.getProperty(\"test.property\");\n+    if (value == null || value.isEmpty()) {\n+        String message = \"Missing 'test.property' in \" + filename;\n+        System.err.println(message);\n+        throw new IllegalArgumentException(message);\n+    }\n+    String[] warnings = props.getProperty(\"test.warning\", \"\").split(\",\");\n+    if (warnings.length > 0 && !warnings[0].isEmpty()) {\n+        System.err.println(\"Warning: \" + warnings[0]);\n+        assertTrue(\"expected a warning\", warnings.length > 0);\n+    }\n+    return props;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: try-with-resources is not supported in -source 1.6",
    "test_result": "ERROR"
}