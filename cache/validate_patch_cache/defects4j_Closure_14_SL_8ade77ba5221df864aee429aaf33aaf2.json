{
    "patch": "if (finallyNode != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    if (finallyNode.getParent() != parent.getLastChild()) {\n        computeFollowNode(finallyNode, finallyNode.getFirstChild(), cfa);\n    } else {\n        computeFallThrough(finallyNode);\n    }\n} else {\n    computeFollowNode(fromNode, parent.getLastChild(), cfa);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..a35dd43e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    if (finallyNode.getParent() != parent.getLastChild()) {\n+        computeFollowNode(finallyNode, finallyNode.getFirstChild(), cfa);\n+    } else {\n+        computeFallThrough(finallyNode);\n+    }\n+} else {\n+    computeFollowNode(fromNode, parent.getLastChild(), cfa);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}