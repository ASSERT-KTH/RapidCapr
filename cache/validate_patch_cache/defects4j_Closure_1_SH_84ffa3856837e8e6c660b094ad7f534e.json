{
    "patch": "      Var lastArgVar = null;\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && (lastArgVar = fnScope.getVar(lastArg.getString())) != null\n          && !referenced.contains(lastArgVar)) {\n        argList.removeChild(lastArg);\n        lastArg = argList.getLastChild();\n      }\n      if (lastArg == null || !lastArg.isDefaultValue()) {\n        // If we'll still removing arguments, we need to check if the\n        // last argument has a default value. If it does, then\n        // we should remove it as well.\n        return;\n      }\n      // Now we're sure that the last argument has a default value.\n      Node var = lastArg.getFirstChild();\n      Node defaultValue = lastArg.getLastChild().detach();\n      var.removeChildren();\n      var.setToken(Token.NAME);\n      var.addChildToBack(lastArg.detach());\n      var.addChildToBack(defaultValue);\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b4f96a6d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Var lastArgVar = null;\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && (lastArgVar = fnScope.getVar(lastArg.getString())) != null\n+          && !referenced.contains(lastArgVar)) {\n+        argList.removeChild(lastArg);\n+        lastArg = argList.getLastChild();\n+      }\n+      if (lastArg == null || !lastArg.isDefaultValue()) {\n+        // If we'll still removing arguments, we need to check if the\n+        // last argument has a default value. If it does, then\n+        // we should remove it as well.\n+        return;\n+      }\n+      // Now we're sure that the last argument has a default value.\n+      Node var = lastArg.getFirstChild();\n+      Node defaultValue = lastArg.getLastChild().detach();\n+      var.removeChildren();\n+      var.setToken(Token.NAME);\n+      var.addChildToBack(lastArg.detach());\n+      var.addChildToBack(defaultValue);\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}