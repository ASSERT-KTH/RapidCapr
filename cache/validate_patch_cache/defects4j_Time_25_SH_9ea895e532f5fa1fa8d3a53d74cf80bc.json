{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // calculate the difference in offsets\n    int diffOffsets = offsetLocal - offsetAdjusted;\n    long prevTransition = previousTransition(instantLocal - diffOffsets);\n    long nextTransition = nextTransition(instantLocal - diffOffsets);\n\n    // if current time is in between last and next transition, select the offset with the larger value\n    if (prevTransition != nextTransition && instantLocal - prevTransition < DateTimeConstants.MILLIS_PER_HOUR) {\n        if (offsetLocal > offsetAdjusted) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n\n    if (diffOffsets <= 0) {\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..72edf98b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // calculate the difference in offsets\n+    int diffOffsets = offsetLocal - offsetAdjusted;\n+    long prevTransition = previousTransition(instantLocal - diffOffsets);\n+    long nextTransition = nextTransition(instantLocal - diffOffsets);\n+\n+    // if current time is in between last and next transition, select the offset with the larger value\n+    if (prevTransition != nextTransition && instantLocal - prevTransition < DateTimeConstants.MILLIS_PER_HOUR) {\n+        if (offsetLocal > offsetAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+\n+    if (diffOffsets <= 0) {\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}