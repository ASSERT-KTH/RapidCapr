{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            /*\n             * If there are any high-surrogate characters remaining in the input,\n             * write them to the output as is since they are invalid characters\n             * in CSV format.\n             */\n            if (Character.isHighSurrogate(input.charAt(pos))) {\n                out.write(input.charAt(pos++));\n                if (pos < len && Character.isLowSurrogate(input.charAt(pos))) {\n                    /*\n                     * If there is also a corresponding low-surrogate character, write\n                     * it to the output as well.\n                     */\n                    out.write(input.charAt(pos++));\n                }\n                continue;\n            }\n            /*\n             * Otherwise, write the current character as is since it is a BMP (Basic\n             * Multilingual Plane) character and valid in CSV format.\n             */\n            out.write(input.charAt(pos++));\n            continue;\n        }\n        pos += consumed;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..eb935e20 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,44 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            /*\n+             * If there are any high-surrogate characters remaining in the input,\n+             * write them to the output as is since they are invalid characters\n+             * in CSV format.\n+             */\n+            if (Character.isHighSurrogate(input.charAt(pos))) {\n+                out.write(input.charAt(pos++));\n+                if (pos < len && Character.isLowSurrogate(input.charAt(pos))) {\n+                    /*\n+                     * If there is also a corresponding low-surrogate character, write\n+                     * it to the output as well.\n+                     */\n+                    out.write(input.charAt(pos++));\n+                }\n                 continue;\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n+            /*\n+             * Otherwise, write the current character as is since it is a BMP (Basic\n+             * Multilingual Plane) character and valid in CSV format.\n+             */\n+            out.write(input.charAt(pos++));\n+            continue;\n         }\n+        pos += consumed;\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: Supplementary character must be represented using a single escape expected:<&#144308;[]> but was:<&#144308;[&#57268;]>",
    "test_result": "FAIL"
}