{
    "patch": "      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      if (!functionType.getTypeOfThis().isUnknownType()) {\n        if (!(n.getParent().isGetElem() || n.getParent().isGetProp())) {\n          report(t, n, CANNOT_CALL_NON_FUNCTION_TYPE, childType.toString());\n          ensureTyped(t, n);\n          return;\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor()\n          && !functionType.isNativeObjectType()\n          && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()\n              || !isExtern)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e8baaa94 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      if (!functionType.getTypeOfThis().isUnknownType()) {\n+        if (!(n.getParent().isGetElem() || n.getParent().isGetProp())) {\n+          report(t, n, CANNOT_CALL_NON_FUNCTION_TYPE, childType.toString());\n+          ensureTyped(t, n);\n+          return;\n+        }\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor()\n+          && !functionType.isNativeObjectType()\n+          && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()\n+              || !isExtern)) {\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}