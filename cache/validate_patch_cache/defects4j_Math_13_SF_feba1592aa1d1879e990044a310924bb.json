{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        final double[][] sqrt = new double[n][n];\n\n        // Use Cholesky decomposition for smaller matrices\n        if (n <= 1000) {\n            final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n            return dec.getL();\n        }\n\n        // Use iterative method for larger matrices\n        double[] y = new double[n];\n        for (int i = 0; i < n; i++) {\n            // Solve Ly = b for y\n            final double[] b = new double[n];\n            b[i] = 1;\n            final RealVector yVec = new ArrayRealVector(y);\n            final RealVector bVec = new ArrayRealVector(b);\n            final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n            yVec.set(solver.solve(bVec));\n\n            // Set diagonal element sqrt[i][i]\n            double sum = 0;\n            for (int j = 0; j < i; j++) {\n                sum += sqrt[i][j] * y[j];\n            }\n            sqrt[i][i] = Math.sqrt(m.getEntry(i, i) - sum * sum);\n\n            // Calculate off-diagonal elements\n            for (int j = i + 1; j < n; j++) {\n                sum = 0;\n                for (int k = 0; k < i; k++) {\n                    sum += sqrt[i][k] * sqrt[j][k] * y[k];\n                }\n                sqrt[j][i] = (m.getEntry(j, i) - sum) / sqrt[i][i];\n            }\n        }\n\n        return MatrixUtils.createRealMatrix(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b7b37afb7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,44 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int n = m.getRowDimension();\n+        final double[][] sqrt = new double[n][n];\n+\n+        // Use Cholesky decomposition for smaller matrices\n+        if (n <= 1000) {\n+            final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+            return dec.getL();\n+        }\n+\n+        // Use iterative method for larger matrices\n+        double[] y = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            // Solve Ly = b for y\n+            final double[] b = new double[n];\n+            b[i] = 1;\n+            final RealVector yVec = new ArrayRealVector(y);\n+            final RealVector bVec = new ArrayRealVector(b);\n+            final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n+            yVec.set(solver.solve(bVec));\n+\n+            // Set diagonal element sqrt[i][i]\n+            double sum = 0;\n+            for (int j = 0; j < i; j++) {\n+                sum += sqrt[i][j] * y[j];\n+            }\n+            sqrt[i][i] = Math.sqrt(m.getEntry(i, i) - sum * sum);\n+\n+            // Calculate off-diagonal elements\n+            for (int j = i + 1; j < n; j++) {\n+                sum = 0;\n+                for (int k = 0; k < i; k++) {\n+                    sum += sqrt[i][k] * sqrt[j][k] * y[k];\n+                }\n+                sqrt[j][i] = (m.getEntry(j, i) - sum) / sqrt[i][i];\n+            }\n+        }\n+\n+        return MatrixUtils.createRealMatrix(sqrt);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}