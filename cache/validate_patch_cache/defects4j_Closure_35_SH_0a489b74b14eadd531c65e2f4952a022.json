{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        boolean inferredNewProp = false;\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            objType.defineInferredProperty(prop, propType, null);\n            inferredNewProp = true;\n          }\n        }\n        if (inferredNewProp) {\n          warnings.add(JSError.make(n.getSourceFileName(),\n                      n.getLineno(),\n                      UNSAFE_NAMESPACE_WARNING));\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..479a826f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,19 +1121,22 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+        boolean inferredNewProp = false;\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.hasProperty(prop)) {\n+            objType.defineInferredProperty(prop, propType, null);\n+            inferredNewProp = true;\n           }\n         }\n+        if (inferredNewProp) {\n+          warnings.add(JSError.make(n.getSourceFileName(),\n+                      n.getLineno(),\n+                      UNSAFE_NAMESPACE_WARNING));\n+        }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}