{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK) {\n    return false;\n  }\n\n  if (!n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n  if (NodeUtil.isFunctionExpression(maybeExpr) ||\n      NodeUtil.isFunctionDeclaration(maybeExpr)) {\n    // The only case where this function should return true for a BLOCK node\n    // is when that BLOCK node comprises a single child that's an expression\n    // statement.\n    return false;\n  }\n\n  // IE has a bug where event handlers behave differently when\n  // their return value is used vs. when their return value is in\n  // an EXPR_RESULT. It's pretty freaking weird. See:\n  // http://code.google.com/p/closure-compiler/issues/detail?id=291\n  // We try to detect this case, and not fold EXPR_RESULTs\n  // into other expressions.\n  return NodeUtil.isExpressionNode(maybeExpr);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b0296f45 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,33 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK) {\n+    return false;\n+  }\n \n+  if (!n.hasOneChild()) {\n     return false;\n   }\n \n+  Node maybeExpr = n.getFirstChild();\n+  if (NodeUtil.isFunctionExpression(maybeExpr) ||\n+      NodeUtil.isFunctionDeclaration(maybeExpr)) {\n+    // The only case where this function should return true for a BLOCK node\n+    // is when that BLOCK node comprises a single child that's an expression\n+    // statement.\n+    return false;\n+  }\n+\n+  // IE has a bug where event handlers behave differently when\n+  // their return value is used vs. when their return value is in\n+  // an EXPR_RESULT. It's pretty freaking weird. See:\n+  // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+  // We try to detect this case, and not fold EXPR_RESULTs\n+  // into other expressions.\n+  return NodeUtil.isExpressionNode(maybeExpr);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}