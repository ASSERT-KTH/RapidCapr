{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        if (lastArg.isDefaultValue()) {\n          // Don't strip unused arguments that have default values.\n          // (Workaround for https://github.com/google/closure-compiler/issues/3543)\n          break;\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          lastArg = argList.getLastChild();\n        } else {\n          break;\n        }\n      }\n    } else {\n      // Don't strip unreferenced args if we are optimizing calls.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ca07097e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        if (lastArg.isDefaultValue()) {\n+          // Don't strip unused arguments that have default values.\n+          // (Workaround for https://github.com/google/closure-compiler/issues/3543)\n+          break;\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          lastArg = argList.getLastChild();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      // Don't strip unreferenced args if we are optimizing calls.\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}