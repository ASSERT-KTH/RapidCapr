{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == t.getScopeRoot()) {\n            resetContext();\n            functionScope = new Scope(scopeCreator, Scope.Type.FUNCTION);\n            scope = new Scope(scopeCreator, Scope.Type.BLOCK, functionScope);\n        }\n        if (n.isScript()) {\n            resetContext();\n            return;\n        }\n        attachLiteralTypes(n);\n        switch (n.getToken()) {\n            case FUNCTION: {\n                if (parent != null && parent.getToken() == Token.ASSIGN) {\n                    defineFunctionExpression(n, parent);\n                } else if (parent != null && parent.getToken() == Token.EXPR_RESULT\n                        || parent != null && parent.getToken() == Token.MODULE_BODY) {\n                    defineDeclaredFunction(n, parent);\n                } else {\n                    handleFunctionInputs(n);\n                }\n                break;\n            }\n            case CATCH:\n                defineCatch(n, parent);\n                break;\n            case VAR:\n            case LET:\n            case CONST:\n                defineVar(n, parent);\n                break;\n        }\n        if (n == t.getScopeRoot()) {\n            scope = null;\n            functionScope = null;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ab6480ea 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,43 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == t.getScopeRoot()) {\n+            resetContext();\n+            functionScope = new Scope(scopeCreator, Scope.Type.FUNCTION);\n+            scope = new Scope(scopeCreator, Scope.Type.BLOCK, functionScope);\n+        }\n+        if (n.isScript()) {\n+            resetContext();\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        attachLiteralTypes(n);\n+        switch (n.getToken()) {\n+            case FUNCTION: {\n+                if (parent != null && parent.getToken() == Token.ASSIGN) {\n+                    defineFunctionExpression(n, parent);\n+                } else if (parent != null && parent.getToken() == Token.EXPR_RESULT\n+                        || parent != null && parent.getToken() == Token.MODULE_BODY) {\n+                    defineDeclaredFunction(n, parent);\n+                } else {\n+                    handleFunctionInputs(n);\n+                }\n+                break;\n+            }\n+            case CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case VAR:\n+            case LET:\n+            case CONST:\n+                defineVar(n, parent);\n+                break;\n+        }\n+        if (n == t.getScopeRoot()) {\n+            scope = null;\n+            functionScope = null;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}