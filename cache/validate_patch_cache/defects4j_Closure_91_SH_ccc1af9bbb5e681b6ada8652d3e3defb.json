{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        // Make sure we don't have a immutable prototype property like\n        // \"x.prototype = {...}\" or \"goog.inherits(Foo, Bar);\".\n        if (NodeUtil.isPrototypeProperty(lhs.getFirstChild())) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e5d6a26f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,12 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        // Make sure we don't have a immutable prototype property like\n+        // \"x.prototype = {...}\" or \"goog.inherits(Foo, Bar);\".\n+        if (NodeUtil.isPrototypeProperty(lhs.getFirstChild())) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}