{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                final RealPointValuePair[] expandedSimplex = expand(reflectedSimplex, gamma, comparator);\n                simplex = expandedSimplex;\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = contracted;\n        } else {\n            // perform a shrinking step\n            final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n            simplex = shrunkSimplex;\n        }\n        // check convergence\n        if (isConverged(comparator)) {\n            return;\n        }\n    }\n}\n\nprotected RealPointValuePair[] expand(final RealPointValuePair[] reflectedSimplex, final double rho,\n                                      final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = reflectedSimplex[0];\n    final RealPointValuePair[] expandedSimplex = new RealPointValuePair[simplex.length];\n    expandedSimplex[0] = best;\n    final RealPointValuePair worst = reflectedSimplex[reflectedSimplex.length - 1];\n    final double[] worstPoint = worst.getPoint();\n    final double[] bestPoint = best.getPoint();\n    final int n = bestPoint.length;\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] pointI = reflectedSimplex[i].getPoint();\n        final double[] newPointI = new double[n];\n        for (int j = 0; j < n; j++) {\n            final double centerJ = bestPoint[j];\n            newPointI[j] = centerJ + rho * (pointI[j] - centerJ);\n        }\n        final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n        expandedSimplex[i] = newVertex;\n    }\n    sortSimplex(expandedSimplex, comparator);\n    return expandedSimplex;\n}\n\nprotected RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                      final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n    shrunkSimplex[0] = best;\n    final double[] bestPoint = best.getPoint();\n    final int n = bestPoint.length;\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] pointI = original[i].getPoint();\n        final double[] newPointI = new double[n];\n        for (int j = 0; j < n; j++) {\n            final double centerJ = bestPoint[j];\n            newPointI[j] = 0.5 * (pointI[j] + centerJ);\n        }\n        final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n        shrunkSimplex[i] = newVertex;\n    }\n    sortSimplex(shrunkSimplex, comparator);\n    return shrunkSimplex;\n}\n\nprotected double getRelativeThreshold() {\n    return ((Double) getOptimizationData()[0]).doubleValue();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5876e39c5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,93 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                final RealPointValuePair[] expandedSimplex = expand(reflectedSimplex, gamma, comparator);\n+                simplex = expandedSimplex;\n             }\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = contracted;\n+        } else {\n+            // perform a shrinking step\n+            final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n+            simplex = shrunkSimplex;\n+        }\n+        // check convergence\n+        if (isConverged(comparator)) {\n+            return;\n+        }\n+    }\n+}\n \n+protected RealPointValuePair[] expand(final RealPointValuePair[] reflectedSimplex, final double rho,\n+                                      final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = reflectedSimplex[0];\n+    final RealPointValuePair[] expandedSimplex = new RealPointValuePair[simplex.length];\n+    expandedSimplex[0] = best;\n+    final RealPointValuePair worst = reflectedSimplex[reflectedSimplex.length - 1];\n+    final double[] worstPoint = worst.getPoint();\n+    final double[] bestPoint = best.getPoint();\n+    final int n = bestPoint.length;\n+    for (int i = 1; i < simplex.length; i++) {\n+        final double[] pointI = reflectedSimplex[i].getPoint();\n+        final double[] newPointI = new double[n];\n+        for (int j = 0; j < n; j++) {\n+            final double centerJ = bestPoint[j];\n+            newPointI[j] = centerJ + rho * (pointI[j] - centerJ);\n         }\n+        final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n+        expandedSimplex[i] = newVertex;\n+    }\n+    sortSimplex(expandedSimplex, comparator);\n+    return expandedSimplex;\n+}\n \n+protected RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                      final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n+    shrunkSimplex[0] = best;\n+    final double[] bestPoint = best.getPoint();\n+    final int n = bestPoint.length;\n+    for (int i = 1; i < simplex.length; i++) {\n+        final double[] pointI = original[i].getPoint();\n+        final double[] newPointI = new double[n];\n+        for (int j = 0; j < n; j++) {\n+            final double centerJ = bestPoint[j];\n+            newPointI[j] = 0.5 * (pointI[j] + centerJ);\n+        }\n+        final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n+        shrunkSimplex[i] = newVertex;\n     }\n+    sortSimplex(shrunkSimplex, comparator);\n+    return shrunkSimplex;\n+}\n+\n+protected double getRelativeThreshold() {\n+    return ((Double) getOptimizationData()[0]).doubleValue();\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}