{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() {}; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (pType == Token.SCRIPT ||\n        pType == Token.BLOCK ||\n        pType == Token.NAME ||\n        pType == Token.ASSIGN) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) {\n        // Always traverse the left side of an assignment.\n        return true;\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        String qualifiedName = lhs.getQualifiedName();\n        if (qualifiedName != null &&\n            qualifiedName.contains(\".prototype.\")) {\n          return false;\n        } else if (lhs.getParent().getType() == Token.CALL &&\n                   lhs.getFirstChild().getLastChild().getString().equals(\"bind\")) {\n          // Don't traverse the right side if it's an assignment of the\n          // form e.f.bind(e), since then it is just binding the this value.\n          return false;\n        } else if (isPrototypeCall(lhs.getParent())) {\n          // Don't traverse the right hand side of a prototype call.\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }\n    // Traverse all other nodes.\n    return true;\n  }\n}\n\nprivate boolean isPrototypeCall(Node n) {\n  if (n.getType() == Token.CALL &&\n      !n.getLastChild().isEmpty() &&\n      n.getFirstChild().getFirstFirstChild() != null &&\n      n.getFirstChild().getFirstFirstChild().getString().equals(\"prototype\")) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b150a14d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,73 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n     }\n \n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() {}; // or\n+    // function a() {} // or\n+    // a.x = function() {};\n+    int pType = parent.getType();\n+    if (pType == Token.SCRIPT ||\n+        pType == Token.BLOCK ||\n+        pType == Token.NAME ||\n+        pType == Token.ASSIGN) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  } else {\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n       if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n+        // Always traverse the left side of an assignment.\n+        return true;\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n+        String qualifiedName = lhs.getQualifiedName();\n+        if (qualifiedName != null &&\n+            qualifiedName.contains(\".prototype.\")) {\n+          return false;\n+        } else if (lhs.getParent().getType() == Token.CALL &&\n+                   lhs.getFirstChild().getLastChild().getString().equals(\"bind\")) {\n+          // Don't traverse the right side if it's an assignment of the\n+          // form e.f.bind(e), since then it is just binding the this value.\n+          return false;\n+        } else if (isPrototypeCall(lhs.getParent())) {\n+          // Don't traverse the right hand side of a prototype call.\n+          return false;\n+        } else {\n+          return true;\n+        }\n       }\n     }\n+    // Traverse all other nodes.\n+    return true;\n+  }\n+}\n \n+private boolean isPrototypeCall(Node n) {\n+  if (n.getType() == Token.CALL &&\n+      !n.getLastChild().isEmpty() &&\n+      n.getFirstChild().getFirstFirstChild() != null &&\n+      n.getFirstChild().getFirstFirstChild().getString().equals(\"prototype\")) {\n     return true;\n   }\n+  return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}