{
    "patch": "public Dfp multiply(final int x) {\n    if (isNaN()) {\n        return newInstance(this);\n    }\n    if (x == 0) {\n        return getZero();\n    }\n    if (x == 1) {\n        return newInstance(this);\n    }\n    if (x == -1) {\n        return negate();\n    }\n    final DfpField field = getField();\n    final int q = intValue();\n    final int y = Math.abs(x);\n    final int maxAbsQY = Integer.MAX_VALUE / y;\n    if (q > maxAbsQY) {\n        final int scale = q / maxAbsQY;\n        final Dfp scaledThis = multiply(field.newDfp(scale));\n        final Dfp result = scaledThis.multiply(x / scale);\n        return result.newInstance(result);\n    }\n    final Dfp r = subtract(field.newDfp(q)).multiply(x).add(field.newDfp(q * x));\n    return r.newInstance(r);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..a24a14058 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,32 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+public Dfp multiply(final int x) {\n+    if (isNaN()) {\n+        return newInstance(this);\n+    }\n+    if (x == 0) {\n+        return getZero();\n+    }\n+    if (x == 1) {\n+        return newInstance(this);\n+    }\n+    if (x == -1) {\n+        return negate();\n+    }\n+    final DfpField field = getField();\n+    final int q = intValue();\n+    final int y = Math.abs(x);\n+    final int maxAbsQY = Integer.MAX_VALUE / y;\n+    if (q > maxAbsQY) {\n+        final int scale = q / maxAbsQY;\n+        final Dfp scaledThis = multiply(field.newDfp(scale));\n+        final Dfp result = scaledThis.multiply(x / scale);\n+        return result.newInstance(result);\n+    }\n+    final Dfp r = subtract(field.newDfp(q)).multiply(x).add(field.newDfp(q * x));\n+    return r.newInstance(r);\n+}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}