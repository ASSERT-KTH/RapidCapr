{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n  \n    // Find the number of unreferenced arguments\n    int totalArgs = 0;\n    int unreferencedArgs = 0;\n    boolean shouldSkip = false;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      totalArgs++;\n      if (arg.isDefaultValue()) {\n        shouldSkip = true;\n      }\n      if (!shouldSkip) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unreferencedArgs++;\n        }\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numArgsToRemove = unreferencedArgs;\n      if (numArgsToRemove > 0 && numArgsToRemove < totalArgs) {\n        Node lastArg = argList.getLastChild();\n        while (numArgsToRemove > 0 && lastArg != null) {\n          Var var = fnScope.getVar(lastArg.getString());\n          Node nextArg = lastArg.getPrevious();\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            numArgsToRemove--;\n            compiler.reportCodeChange();\n          }\n          lastArg = nextArg;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..46965b68 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -386,18 +386,40 @@ class RemoveUnusedVars\n     }\n \n     Node argList = getFunctionArgList(function);\n+  \n+    // Find the number of unreferenced arguments\n+    int totalArgs = 0;\n+    int unreferencedArgs = 0;\n+    boolean shouldSkip = false;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      totalArgs++;\n+      if (arg.isDefaultValue()) {\n+        shouldSkip = true;\n+      }\n+      if (!shouldSkip) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unreferencedArgs++;\n+        }\n+      }\n+    }\n+\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+      int numArgsToRemove = unreferencedArgs;\n+      if (numArgsToRemove > 0 && numArgsToRemove < totalArgs) {\n+        Node lastArg = argList.getLastChild();\n+        while (numArgsToRemove > 0 && lastArg != null) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          Node nextArg = lastArg.getPrevious();\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            numArgsToRemove--;\n+            compiler.reportCodeChange();\n+          }\n+          lastArg = nextArg;\n         }\n       }\n     } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}