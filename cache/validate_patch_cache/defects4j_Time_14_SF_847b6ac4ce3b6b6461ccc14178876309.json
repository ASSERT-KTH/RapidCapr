{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n    if (isContiguousField) {\n        long instant = 0L;\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n        int originalDayOfMonth = iChronology.dayOfMonth().get(values[fieldIndex]);\n\n        int newFieldValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n        if (newFieldValue < iChronology.monthOfYear().getMinimumValue() || \n            newFieldValue > iChronology.monthOfYear().getMaximumValue()) {\n            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n        }\n\n        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n\n        if (originalDayOfMonth > iChronology.dayOfMonth().getMaximumValue(instant)) {\n            // if the original day of month is greater than the maximum allowed for the new month, set it to the maximum valid day of month for the new month.\n            instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n        }\n\n        if (iChronology.monthOfYear().get(instant) == 2 && \n            originalDayOfMonth == 29 && \n            iChronology.year().isLeap(iChronology.set(partial, instant))) {\n            // if it's a leap year and we're in february 29th, adjust to february 28th\n            if (maxDayOfMonth == 29) {\n                instant = iChronology.dayOfMonth().set(instant, 28);\n            } else {\n                // if february doesn't have 29 days, adjust to maximum valid day of month for february\n                instant = iChronology.dayOfMonth().set(instant, Math.min(28, maxDayOfMonth));\n            }\n        }\n\n        return iChronology.get(partial, instant);\n    } \n    else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1899991f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,48 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n+            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n+    if (isContiguousField) {\n+        long instant = 0L;\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n+        int originalDayOfMonth = iChronology.dayOfMonth().get(values[fieldIndex]);\n+\n+        int newFieldValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+        if (newFieldValue < iChronology.monthOfYear().getMinimumValue() || \n+            newFieldValue > iChronology.monthOfYear().getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n+        }\n+\n+        instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n+\n+        if (originalDayOfMonth > iChronology.dayOfMonth().getMaximumValue(instant)) {\n+            // if the original day of month is greater than the maximum allowed for the new month, set it to the maximum valid day of month for the new month.\n+            instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        if (iChronology.monthOfYear().get(instant) == 2 && \n+            originalDayOfMonth == 29 && \n+            iChronology.year().isLeap(iChronology.set(partial, instant))) {\n+            // if it's a leap year and we're in february 29th, adjust to february 28th\n+            if (maxDayOfMonth == 29) {\n+                instant = iChronology.dayOfMonth().set(instant, 28);\n+            } else {\n+                // if february doesn't have 29 days, adjust to maximum valid day of month for february\n+                instant = iChronology.dayOfMonth().set(instant, Math.min(28, maxDayOfMonth));\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return iChronology.get(partial, instant);\n+    } \n+    else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<--01-29> but was:<--01-01>",
    "test_result": "FAIL"
}