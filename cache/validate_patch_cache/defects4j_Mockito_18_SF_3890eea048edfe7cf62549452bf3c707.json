{
    "patch": "public ReturnValues getValues() {\n    if (this.statusCode == HttpURLConnection.HTTP_OK) {\n        try {\n            InputStream content = (InputStream) connection.getContent();\n            // Read the response body and convert it to a string\n            String responseBody = new Scanner(content).useDelimiter(\"\\\\A\").next();\n            return new ReturnValues(responseBody);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1d5928bb2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public ReturnValues getValues() {\n+    if (this.statusCode == HttpURLConnection.HTTP_OK) {\n+        try {\n+            InputStream content = (InputStream) connection.getContent();\n+            // Read the response body and convert it to a string\n+            String responseBody = new Scanner(content).useDelimiter(\"\\\\A\").next();\n+            return new ReturnValues(responseBody);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    return null;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}