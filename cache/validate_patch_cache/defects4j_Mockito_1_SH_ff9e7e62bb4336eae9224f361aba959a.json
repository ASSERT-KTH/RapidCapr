{
    "patch": "            int argsCount = invocation.getRawArguments().length;\n            int matcherCount = matchers.size();\n            if (argsCount != matcherCount) {\n                throw new IllegalArgumentException(String.format(\n                    \"Method %s argument count mismatch, expected: %d, actual: %d\",\n                    invocation.getMethod().getName(), matcherCount, argsCount)\n                );\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..ba382b4b4 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            int argsCount = invocation.getRawArguments().length;\n+            int matcherCount = matchers.size();\n+            if (argsCount != matcherCount) {\n+                throw new IllegalArgumentException(String.format(\n+                    \"Method %s argument count mismatch, expected: %d, actual: %d\",\n+                    invocation.getMethod().getName(), matcherCount, argsCount)\n+                );\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.IllegalArgumentException: Method withBooleanVarargs argument count mismatch, expected: 1, actual: 2",
    "test_result": "FAIL"
}