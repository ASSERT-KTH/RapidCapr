{
    "patch": "private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        // Check if there are at least one finite lower bound and one finite upper bound.\n        boolean hasFiniteBounds = false;\n        for (double b : lB) {\n            if (Double.isFinite(b)) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        if (!hasFiniteBounds) {\n            throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, true);\n        }\n        hasFiniteBounds = false;\n        for (double b : uB) {\n            if (Double.isFinite(b)) {\n                hasFiniteBounds = true;\n                break;\n            }\n        }\n        if (!hasFiniteBounds) {\n            throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, true);\n        }\n\n        // Convert API to internal handling of boundaries.\n        if (hasFiniteBounds) {\n            boundaries = new double[2][];\n            boundaries[0] = lB;\n            boundaries[1] = uB;\n\n            // Normalize boundaries so that they are inside [0, 1).\n            normalize();\n\n            // Check if the range of any dimension is too large.\n            for (int i = 0; ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..cc28bf805 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -501,64 +501,44 @@ public class CMAESOptimizer\n     /**\n      * Checks dimensions and values of boundaries and inputSigma if defined.\n      */\n-    private void checkParameters() {\n+private void checkParameters() {\n         final double[] init = getStartPoint();\n         final double[] lB = getLowerBound();\n         final double[] uB = getUpperBound();\n \n-        // Checks whether there is at least one finite bound value.\n+        // Check if there are at least one finite lower bound and one finite upper bound.\n         boolean hasFiniteBounds = false;\n-        for (int i = 0; i < lB.length; i++) {\n-            if (!Double.isInfinite(lB[i]) ||\n-                !Double.isInfinite(uB[i])) {\n+        for (double b : lB) {\n+            if (Double.isFinite(b)) {\n                 hasFiniteBounds = true;\n                 break;\n             }\n         }\n-        // Checks whether there is at least one infinite bound value.\n-        boolean hasInfiniteBounds = false;\n-        if (hasFiniteBounds) {\n-            for (int i = 0; i < lB.length; i++) {\n-                if (Double.isInfinite(lB[i]) ||\n-                    Double.isInfinite(uB[i])) {\n-                    hasInfiniteBounds = true;\n-                    break;\n-                }\n+        if (!hasFiniteBounds) {\n+            throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, true);\n+        }\n+        hasFiniteBounds = false;\n+        for (double b : uB) {\n+            if (Double.isFinite(b)) {\n+                hasFiniteBounds = true;\n+                break;\n             }\n+        }\n+        if (!hasFiniteBounds) {\n+            throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, true);\n+        }\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n-                throw new MathUnsupportedOperationException();\n-            } else {\n-                // Convert API to internal handling of boundaries.\n-                boundaries = new double[2][];\n-                boundaries[0] = lB;\n-                boundaries[1] = uB;\n+        // Convert API to internal handling of boundaries.\n+        if (hasFiniteBounds) {\n+            boundaries = new double[2][];\n+            boundaries[0] = lB;\n+            boundaries[1] = uB;\n \n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n-            }\n-        } else {\n-            // Convert API to internal handling of boundaries.\n-            boundaries = null;\n-        }\n+            // Normalize boundaries so that they are inside [0, 1).\n+            normalize();\n \n-        if (inputSigma != null) {\n-            if (inputSigma.length != init.length) {\n-                throw new DimensionMismatchException(inputSigma.length, init.length);\n-            }\n-            for (int i = 0; i < init.length; i++) {\n-                if (inputSigma[i] < 0) {\n-                    throw new NotPositiveException(inputSigma[i]);\n-                }\n-                if (boundaries != null) {\n-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);\n-                    }\n-                }\n-            }\n-        }\n-    }\n+            // Check if the range of any dimension is too large.\n+            for (int i = 0; \n \n     /**\n      * Initialization of the dynamic search parameters",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}