{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0) {\n    return;\n}\nType type = bounds[0]; // Use the first upper bound as the actual type argument\nif (type instanceof TypeVariable) {\n    Type actualType = getActualTypeArgumentFor((TypeVariable<?>) type);\n    if (actualType != null) {\n        registerTypeVariablesOn(actualType);\n    }\n} else {\n    registerTypeVariablesOn(type);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..044dff474 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0) {\n+    return;\n+}\n+Type type = bounds[0]; // Use the first upper bound as the actual type argument\n+if (type instanceof TypeVariable) {\n+    Type actualType = getActualTypeArgumentFor((TypeVariable<?>) type);\n+    if (actualType != null) {\n+        registerTypeVariablesOn(actualType);\n+    }\n+} else {\n+    registerTypeVariablesOn(type);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}