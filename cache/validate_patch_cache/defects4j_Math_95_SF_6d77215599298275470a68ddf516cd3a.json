{
    "patch": "protected double getInitialDomain(double p) {\n    double ret;\n    double d = getDenominatorDegreesOfFreedom();\n    if (d > 2) {\n        // use mean\n        ret = d / (d - 2.0);\n    } else {\n        // use interval including support\n        TDistribution dist = new TDistribution(d);\n        double t = dist.inverseCumulativeProbability(1 - p / 2);\n        ret = -t + 1e-10;\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..2da2487f0 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,20 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+protected double getInitialDomain(double p) {\n+    double ret;\n+    double d = getDenominatorDegreesOfFreedom();\n+    if (d > 2) {\n+        // use mean\n+        ret = d / (d - 2.0);\n+    } else {\n+        // use interval including support\n+        TDistribution dist = new TDistribution(d);\n+        double t = dist.inverseCumulativeProbability(1 - p / 2);\n+        ret = -t + 1e-10;\n     }\n+    return ret;\n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "error: TDistribution is abstract; cannot be instantiated",
    "test_result": "ERROR"
}