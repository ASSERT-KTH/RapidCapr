{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null || lower >= str.length()) {\n        return str;\n    }\n    if (str.isEmpty()) {\n        return StringUtils.EMPTY;\n    }\n    \n    // limit upper to str length\n    upper = Math.min(upper, str.length());\n\n    int index = StringUtils.indexOf(str, \" \", lower);\n\n    if (index == -1 || upper <= index) {\n        // use upper as endpoint if no space in remaining string or space beyond upper bound\n        upper = Math.min(upper, str.length());\n    } else {\n        upper = index + 1;  // include space at the end of the word\n    }\n\n    StringBuilder result = new StringBuilder(str.substring(lower, upper));\n    if (upper < str.length() && appendToEnd != null) {\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..d3cfe245 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,32 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // initial parameter checks\n+    if (str == null || lower >= str.length()) {\n+        return str;\n+    }\n+    if (str.isEmpty()) {\n+        return StringUtils.EMPTY;\n+    }\n+    \n+    // limit upper to str length\n+    upper = Math.min(upper, str.length());\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    int index = StringUtils.indexOf(str, \" \", lower);\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        }\n-        return result.toString();\n+    if (index == -1 || upper <= index) {\n+        // use upper as endpoint if no space in remaining string or space beyond upper bound\n+        upper = Math.min(upper, str.length());\n+    } else {\n+        upper = index + 1;  // include space at the end of the word\n     }\n \n+    StringBuilder result = new StringBuilder(str.substring(lower, upper));\n+    if (upper < str.length() && appendToEnd != null) {\n+        result.append(StringUtils.defaultString(appendToEnd));\n+    }\n+    return result.toString();\n+}\n+\n }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: -3",
    "test_result": "FAIL"
}