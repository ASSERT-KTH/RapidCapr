{
    "patch": "    protected BasePeriod(long duration) {\n        super();\n        iPeriodType = PeriodType.standard();\n        iValues = new int[8];\n\n        // bug [3264409]\n        long seconds = duration / DateTimeConstants.MILLIS_PER_SECOND;\n        iValues[6] = FieldUtils.safeToInt(seconds / DateTimeConstants.SECONDS_PER_MINUTE);\n        iValues[5] = FieldUtils.safeToInt((seconds / DateTimeConstants.SECONDS_PER_HOUR) % DateTimeConstants.MINUTES_PER_HOUR);\n        iValues[4] = FieldUtils.safeToInt((seconds / DateTimeConstants.SECONDS_PER_DAY) % DateTimeConstants.HOURS_PER_DAY);\n        iValues[3] = FieldUtils.safeToInt(duration % DateTimeConstants.MILLIS_PER_SECOND);\n        if (seconds < 0 && iValues[3] > 0) {\n            iValues[3] = (int) (iValues[3] - DateTimeConstants.MILLIS_PER_SECOND);\n        }\n        iValues[7] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_DAY);\n        setValues(iPeriodType, iValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..bfa80c04 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,21 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n+        super();\n+        iPeriodType = PeriodType.standard();\n+        iValues = new int[8];\n+\n         // bug [3264409]\n+        long seconds = duration / DateTimeConstants.MILLIS_PER_SECOND;\n+        iValues[6] = FieldUtils.safeToInt(seconds / DateTimeConstants.SECONDS_PER_MINUTE);\n+        iValues[5] = FieldUtils.safeToInt((seconds / DateTimeConstants.SECONDS_PER_HOUR) % DateTimeConstants.MINUTES_PER_HOUR);\n+        iValues[4] = FieldUtils.safeToInt((seconds / DateTimeConstants.SECONDS_PER_DAY) % DateTimeConstants.HOURS_PER_DAY);\n+        iValues[3] = FieldUtils.safeToInt(duration % DateTimeConstants.MILLIS_PER_SECOND);\n+        if (seconds < 0 && iValues[3] > 0) {\n+            iValues[3] = (int) (iValues[3] - DateTimeConstants.MILLIS_PER_SECOND);\n+        }\n+        iValues[7] = FieldUtils.safeToInt(duration / DateTimeConstants.MILLIS_PER_DAY);\n+        setValues(iPeriodType, iValues);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}