{
    "patch": "JSType commonSuperType(JSTypes types, List<JSType> typesToConsider) {\n  JSType currentSuperType = typesToConsider.get(0);\n  for (int i = 1; i < typesToConsider.size(); i++) {\n    JSType t = typesToConsider.get(i);\n    currentSuperType = types.getLeastCommonAncestor(currentSuperType, t);\n    if (currentSuperType == null) {\n      return types.getNativeType(OBJECT_TYPE);\n    }\n  }\n  return currentSuperType;\n}\n\nJSType computeGreatestSubtype(JSType existingType, JSType propType) {\n  JSTypes types = existingType.getJSTypes();\n  List<JSType> typesToConsider = new ArrayList<>();\n  boolean sawBottom = false;\n\n  if (existingType.isBottom()) {\n    sawBottom = true;\n  } else if (existingType.isUnionType()) {\n    typesToConsider.addAll(existingType.getUnionMembers());\n  } else {\n    typesToConsider.add(existingType);\n  }\n\n  if (propType.isUnionType()) {\n    typesToConsider.addAll(propType.getUnionMembers());\n  } else {\n    typesToConsider.add(propType);\n  }\n\n  if (sawBottom) {\n    List<JSType> typesWithoutBottom = new ArrayList<>();\n    for (JSType t : typesToConsider) {\n      if (!t.isBottom()) {\n        typesWithoutBottom.add(t);\n      }\n    }\n    return types.getLeastCommonAncestor(typesWithoutBottom);\n  }\n\n  return commonSuperType(types, typesToConsider);\n}\n\nvoid inferPropertiesFromRecord(JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n\n  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n  if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType existingType = objType.hasProperty(prop) ? objType.getPropertyType(prop) : null;\n\n          if (existingType == null || existingType.isBottom()) {\n            objType.defineInferredProperty(prop, propType, null);\n          } else {\n            JSType typeToInfer = computeGreatestSubtype(existingType, propType);\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n}\n\nFlowScope dereferencePointer(Node n, FlowScope scope) {\n  if (n.isQualifiedName()) {\n    JSType type = getJSType(n);\n    JSType narrowed = type.restrictByNotNullOrUndefined();\n    if (type != narrowed) {\n      scope = narrowScope(scope, n, narrowed);\n    }\n    inferPropertiesFromRecord(type, type.getImplicitPrototype());\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..5f3449e4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,87 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n+JSType commonSuperType(JSTypes types, List<JSType> typesToConsider) {\n+  JSType currentSuperType = typesToConsider.get(0);\n+  for (int i = 1; i < typesToConsider.size(); i++) {\n+    JSType t = typesToConsider.get(i);\n+    currentSuperType = types.getLeastCommonAncestor(currentSuperType, t);\n+    if (currentSuperType == null) {\n+      return types.getNativeType(OBJECT_TYPE);\n     }\n+  }\n+  return currentSuperType;\n+}\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+JSType computeGreatestSubtype(JSType existingType, JSType propType) {\n+  JSTypes types = existingType.getJSTypes();\n+  List<JSType> typesToConsider = new ArrayList<>();\n+  boolean sawBottom = false;\n+\n+  if (existingType.isBottom()) {\n+    sawBottom = true;\n+  } else if (existingType.isUnionType()) {\n+    typesToConsider.addAll(existingType.getUnionMembers());\n+  } else {\n+    typesToConsider.add(existingType);\n+  }\n+\n+  if (propType.isUnionType()) {\n+    typesToConsider.addAll(propType.getUnionMembers());\n+  } else {\n+    typesToConsider.add(propType);\n+  }\n+\n+  if (sawBottom) {\n+    List<JSType> typesWithoutBottom = new ArrayList<>();\n+    for (JSType t : typesToConsider) {\n+      if (!t.isBottom()) {\n+        typesWithoutBottom.add(t);\n+      }\n+    }\n+    return types.getLeastCommonAncestor(typesWithoutBottom);\n+  }\n+\n+  return commonSuperType(types, typesToConsider);\n+}\n+\n+void inferPropertiesFromRecord(JSType type, JSType constraint) {\n+  if (type == null || constraint == null) {\n+    return;\n+  }\n+\n+  ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+  if (constraintObj != null && constraintObj.isRecordType()) {\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!objType.isPropertyTypeDeclared(prop)) {\n+          JSType existingType = objType.hasProperty(prop) ? objType.getPropertyType(prop) : null;\n+\n+          if (existingType == null || existingType.isBottom()) {\n+            objType.defineInferredProperty(prop, propType, null);\n+          } else {\n+            JSType typeToInfer = computeGreatestSubtype(existingType, propType);\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n   }\n+}\n \n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n+FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  if (n.isQualifiedName()) {\n+    JSType type = getJSType(n);\n+    JSType narrowed = type.restrictByNotNullOrUndefined();\n+    if (type != narrowed) {\n+      scope = narrowScope(scope, n, narrowed);\n+    }\n+    inferPropertiesFromRecord(type, type.getImplicitPrototype());\n+  }\n+  return scope;\n+}\n     }\n     return scope;\n   }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}