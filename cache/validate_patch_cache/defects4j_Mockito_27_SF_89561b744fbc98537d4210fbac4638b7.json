{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    if (oldMockHandler instanceof MockHandler<?>) {\n        MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) oldMockHandler;\n        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandlerImpl.getConfiguration());\n        ((MockHandlerImpl<T>) newMockHandler).setInvocationContainer(oldMockHandlerImpl.getInvocationContainer());\n        ((MockHandlerImpl<T>) newMockHandler).setAnswersForStubbing(oldMockHandlerImpl.getAnswersForStubbing());\n\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                        .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)\n                        .invocationListeners(oldMockHandlerImpl.getInvocationListeners()));\n\n        MockitoUtil.removeMockFromHolder(mock);\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        throw new IllegalArgumentException(\"Mock object is not a MockHandler instance.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f7ea7a30a 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    if (oldMockHandler instanceof MockHandler<?>) {\n+        MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) oldMockHandler;\n+        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandlerImpl.getConfiguration());\n+        ((MockHandlerImpl<T>) newMockHandler).setInvocationContainer(oldMockHandlerImpl.getInvocationContainer());\n+        ((MockHandlerImpl<T>) newMockHandler).setAnswersForStubbing(oldMockHandlerImpl.getAnswersForStubbing());\n+\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                        .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)\n+                        .invocationListeners(oldMockHandlerImpl.getInvocationListeners()));\n+\n+        MockitoUtil.removeMockFromHolder(mock);\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object is not a MockHandler instance.\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}