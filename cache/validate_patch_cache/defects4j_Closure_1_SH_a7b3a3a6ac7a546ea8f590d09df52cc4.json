{
    "patch": "// Remove unused function arguments, except for destructuring patterns and\n// functions called by eval.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Notice that removing unreferenced function args breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n\n  // We assume that if the function contains a destructuring pattern, or is\n  // called by eval, then the unused parameters may be used somewhere else and\n  // should not be removed. Otherwise, we may safely remove the unused\n  // parameters.\n  boolean removeUnusedParams =\n      NodeUtil.doesFunctionHaveFreeVars(function) || !fnCanBeCalledByEval(fnScope);\n\n  if (removeUnusedParams) {\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          Node parent = lastArg.getParent();\n          omitArg(paramOptimizationHeuristics.shouldOmitParameter(lastArg), parent, lastArg);\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a904788d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unused function arguments, except for destructuring patterns and\n+// functions called by eval.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  // Notice that removing unreferenced function args breaks\n+  // Function.prototype.length. In advanced mode, we don't really care\n+  // about this: we consider \"length\" the equivalent of reflecting on\n+  // the function's lexical source.\n+  //\n+  // Rather than create a new option for this, we assume that if the user\n+  // is removing globals, then it's OK to remove unused function args.\n+  //\n+  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+\n+  // We assume that if the function contains a destructuring pattern, or is\n+  // called by eval, then the unused parameters may be used somewhere else and\n+  // should not be removed. Otherwise, we may safely remove the unused\n+  // parameters.\n+  boolean removeUnusedParams =\n+      NodeUtil.doesFunctionHaveFreeVars(function) || !fnCanBeCalledByEval(fnScope);\n+\n+  if (removeUnusedParams) {\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          Node parent = lastArg.getParent();\n+          omitArg(paramOptimizationHeuristics.shouldOmitParameter(lastArg), parent, lastArg);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}