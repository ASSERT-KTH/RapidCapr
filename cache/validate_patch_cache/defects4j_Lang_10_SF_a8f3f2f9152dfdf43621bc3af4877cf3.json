{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    boolean inQuotes = false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n\n        if(c == '\\'') {\n            if(unquote) {\n                ++i;\n                if(i == value.length()) {\n                    break;\n                }\n                c = value.charAt(i);\n            }\n            if(!inQuotes) {\n                regex.append(\"\\\\Q\");\n                inQuotes = true;\n            }\n            else {\n                regex.append(\"\\\\E\");\n                inQuotes = false;\n            }\n        }\n\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite && !inQuotes) {\n                regex.append(\"\\\\s+\");\n            }\n            wasWhite= true;\n            continue;\n        }\n        wasWhite= false;\n\n        if (\"[](){}|.*+?$\\\\\".indexOf(c) != -1 && !inQuotes) {\n            regex.append('\\\\');\n        }\n        regex.append(c);\n    }\n    if (inQuotes) {\n        regex.append(\"\\\\E\");\n    }\n    if(wasWhite) {\n        regex.append(\"\\\\s+\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..d1c0745c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,52 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    boolean inQuotes = false;\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+\n+        if(c == '\\'') {\n+            if(unquote) {\n+                ++i;\n+                if(i == value.length()) {\n+                    break;\n                 }\n-                continue;\n+                c = value.charAt(i);\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+            if(!inQuotes) {\n+                regex.append(\"\\\\Q\");\n+                inQuotes = true;\n+            }\n+            else {\n+                regex.append(\"\\\\E\");\n+                inQuotes = false;\n+            }\n+        }\n+\n+        if(Character.isWhitespace(c)) {\n+            if(!wasWhite && !inQuotes) {\n+                regex.append(\"\\\\s+\");\n             }\n-            regex.append(c);\n+            wasWhite= true;\n+            continue;\n+        }\n+        wasWhite= false;\n+\n+        if (\"[](){}|.*+?$\\\\\".indexOf(c) != -1 && !inQuotes) {\n+            regex.append('\\\\');\n         }\n-        return regex;\n+        regex.append(c);\n     }\n+    if (inQuotes) {\n+        regex.append(\"\\\\E\");\n+    }\n+    if(wasWhite) {\n+        regex.append(\"\\\\s+\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}