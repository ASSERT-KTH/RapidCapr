{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealVector eigVals = dec.getRealEigenvalues();\n    final RealMatrix eigVecs = dec.getV();\n\n    // Create a diagonal matrix with the square root of the eigenvalues\n    final RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(\n        eigVals.map(x -> Math.sqrt(Math.abs(x))).toArray()\n    );\n\n    // Calculate A^(1/2) = V*D^(1/2)*V^T\n    RealMatrix aSqrt = eigVecs.multiply(dSqrt).multiply(eigVecs.transpose());\n\n    // Check for any NaN values in A^(1/2)\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (Double.isNaN(aSqrt.getEntry(i, j))) {\n                return null;\n            }\n        }\n    }\n    \n    return aSqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2b09f8682 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealVector eigVals = dec.getRealEigenvalues();\n+    final RealMatrix eigVecs = dec.getV();\n+\n+    // Create a diagonal matrix with the square root of the eigenvalues\n+    final RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(\n+        eigVals.map(x -> Math.sqrt(Math.abs(x))).toArray()\n+    );\n+\n+    // Calculate A^(1/2) = V*D^(1/2)*V^T\n+    RealMatrix aSqrt = eigVecs.multiply(dSqrt).multiply(eigVecs.transpose());\n+\n+    // Check for any NaN values in A^(1/2)\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            if (Double.isNaN(aSqrt.getEntry(i, j))) {\n+                return null;\n+            }\n+        }\n     }\n+    \n+    return aSqrt;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}