{
    "patch": "      if (n.isFunction()) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n          return false;\n        }\n\n        if (!NodeUtil.canHaveThis(n)) {\n          return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        Node parentParent = parent.getParent();\n        if (NodeUtil.isPrototypeProperty(parentParent)) {\n          return false;\n        }\n\n        if (jsDoc != null && jsDoc.isConstructor() && parent.getType() != Token.NEW) {\n          // Don't traverse constructor functions unless they are being called with the new keyword.\n          return false;\n        }\n      }\n\n      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      if (NodeUtil.isObjectLitKey(parent, n)) {\n        return false;\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else if (rhs != null && NodeUtil.isGet(lhs)) {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..183e0abc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,59 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.isFunction()) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.isInterface() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n+          return false;\n+        }\n+\n+        if (!NodeUtil.canHaveThis(n)) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        Node parentParent = parent.getParent();\n+        if (NodeUtil.isPrototypeProperty(parentParent)) {\n+          return false;\n+        }\n+\n+        if (jsDoc != null && jsDoc.isConstructor() && parent.getType() != Token.NEW) {\n+          // Don't traverse constructor functions unless they are being called with the new keyword.\n+          return false;\n+        }\n+      }\n+\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        return false;\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else if (rhs != null && NodeUtil.isGet(lhs)) {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}