{
    "patch": "Field bestMatchField = mockCandidateFilter.getBestMatchField(mocks, fieldInstance);\nif (bestMatchField != null) {\n    Object bestMatchCandidate = mockCandidateFilter.filterCandidate(mocks, bestMatchField, fieldInstance).thenInject();\n    if (bestMatchCandidate != null) {\n        bestMatchField.setAccessible(true);\n        try {\n            bestMatchField.set(fieldInstance, bestMatchCandidate);\n            mocks.remove(bestMatchCandidate);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n        }\n    }\n} else {\n    Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    if (candidate != null) {\n        field.setAccessible(true);\n        try {\n            field.set(fieldInstance, candidate);\n            mocks.remove(candidate);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..ecbdcf7f5 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,33 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Field bestMatchField = mockCandidateFilter.getBestMatchField(mocks, fieldInstance);\n+if (bestMatchField != null) {\n+    Object bestMatchCandidate = mockCandidateFilter.filterCandidate(mocks, bestMatchField, fieldInstance).thenInject();\n+    if (bestMatchCandidate != null) {\n+        bestMatchField.setAccessible(true);\n+        try {\n+            bestMatchField.set(fieldInstance, bestMatchCandidate);\n+            mocks.remove(bestMatchCandidate);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+        }\n+    }\n+} else {\n+    Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+    if (candidate != null) {\n+        field.setAccessible(true);\n+        try {\n+            field.set(fieldInstance, candidate);\n+            mocks.remove(candidate);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}