{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_SIZE = 1000; //maximum size of matrix to perform calculation\n    final int size = m.getRowDimension();\n\n    if (size <= MAX_SIZE) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else {\n        //handle large matrix\n        //e.g. return an approximation or throw an exception\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d425d4334 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_SIZE = 1000; //maximum size of matrix to perform calculation\n+    final int size = m.getRowDimension();\n+\n+    if (size <= MAX_SIZE) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else {\n+        //handle large matrix\n+        //e.g. return an approximation or throw an exception\n+        return null;\n     }\n }\n+}",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}