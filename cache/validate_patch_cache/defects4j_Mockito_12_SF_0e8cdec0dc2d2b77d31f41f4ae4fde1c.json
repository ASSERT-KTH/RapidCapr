{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type genericType = field.getGenericType();\n    if (genericType instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) genericType).getActualTypeArguments();\n        Type actualType = actualTypeArguments[0];\n        while (actualType instanceof ParameterizedType) {\n            actualType = ((ParameterizedType) actualType).getActualTypeArguments()[0];\n        }\n        if (actualType instanceof Class) {\n            return (Class<?>) actualType;\n        }\n    }\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..9ec1b0501 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,18 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type genericType = field.getGenericType();\n+    if (genericType instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) genericType).getActualTypeArguments();\n+        Type actualType = actualTypeArguments[0];\n+        while (actualType instanceof ParameterizedType) {\n+            actualType = ((ParameterizedType) actualType).getActualTypeArguments()[0];\n+        }\n+        if (actualType instanceof Class) {\n+            return (Class<?>) actualType;\n+        }\n+    }\n+    return Object.class;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<interface java.util.Set> but was:<class java.lang.String>",
    "test_result": "FAIL"
}