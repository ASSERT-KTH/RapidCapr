{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    // Return zero if the input sequence is empty or the starting index is out of bounds\n    if (seqEnd == 0 || index >= seqEnd - 1) {\n        return 0;\n    }\n\n    // If the current character is not '&', write it to the output and return 1\n    if (input.charAt(index) != '&') {\n        out.write(input.charAt(index));\n        return 1;\n    }\n\n    // Check if the input sequence contains a valid entity\n    int start = index + 1;\n    int end = start + 1;\n    char ch = input.charAt(start);\n\n    boolean isHex = false;\n    if (ch == 'x' || ch == 'X') {\n        isHex = true;\n        end++;\n    }\n\n    while (end < seqEnd && Character.isDigit(input.charAt(end))) {\n        end++;\n    }\n\n    // If the entity does not exist or is incomplete, return 0\n    if (end == start + 1 || end == seqEnd || input.charAt(end) != ';' || (isHex && end == start + 2)) {\n        return 0;\n    }\n\n    // Decode the entity value\n    String entity = input.subSequence(start + (isHex ? 1 : 0), end).toString();\n    int entityValue = 0;\n    try {\n        entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n\n    // Write the decoded value to the output\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n\n    // Return the length of the entity, including the '&' and ';'\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..8af378f1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,59 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    // Return zero if the input sequence is empty or the starting index is out of bounds\n+    if (seqEnd == 0 || index >= seqEnd - 1) {\n+        return 0;\n+    }\n \n-                // Check there's more than just an x after the &#\n-            }\n+    // If the current character is not '&', write it to the output and return 1\n+    if (input.charAt(index) != '&') {\n+        out.write(input.charAt(index));\n+        return 1;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    // Check if the input sequence contains a valid entity\n+    int start = index + 1;\n+    int end = start + 1;\n+    char ch = input.charAt(start);\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+    boolean isHex = false;\n+    if (ch == 'x' || ch == 'X') {\n+        isHex = true;\n+        end++;\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    while (end < seqEnd && Character.isDigit(input.charAt(end))) {\n+        end++;\n+    }\n \n+    // If the entity does not exist or is incomplete, return 0\n+    if (end == start + 1 || end == seqEnd || input.charAt(end) != ';' || (isHex && end == start + 2)) {\n+        return 0;\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    // Decode the entity value\n+    String entity = input.subSequence(start + (isHex ? 1 : 0), end).toString();\n+    int entityValue = 0;\n+    try {\n+        entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n+    } catch (NumberFormatException e) {\n         return 0;\n     }\n+\n+    // Write the decoded value to the output\n+    if (entityValue > 0xFFFF) {\n+        char[] chrs = Character.toChars(entityValue);\n+        out.write(chrs[0]);\n+        out.write(chrs[1]);\n+    } else {\n+        out.write(entityValue);\n+    }\n+\n+    // Return the length of the entity, including the '&' and ';'\n+    return end - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: High unicode should have been unchanged expected:<?[?]> but was:<?[]>",
    "test_result": "FAIL"
}