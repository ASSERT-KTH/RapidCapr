{
    "patch": "                if (nextLocal == nextAdjusted) {\n                    // Ambiguous local time around transition\n                    return offsetLocal;\n                } else if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n                    // Negative offset change implies a gap in fall\n                    // which clocks in local time do not move backwards\n                    return offsetLocal;\n                } \n            } else {\n                // Positive offset change implies a gap in spring\n                // which clocks in local time move forward\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..83c8bb44 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (nextLocal == nextAdjusted) {\n+                    // Ambiguous local time around transition\n+                    return offsetLocal;\n+                } else if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n+                    // Negative offset change implies a gap in fall\n+                    // which clocks in local time do not move backwards\n+                    return offsetLocal;\n+                } \n+            } else {\n+                // Positive offset change implies a gap in spring\n+                // which clocks in local time move forward\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}