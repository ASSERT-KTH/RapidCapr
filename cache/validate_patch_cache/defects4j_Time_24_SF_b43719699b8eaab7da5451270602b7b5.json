{
    "patch": "            iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n\n        // find the first field that may change year\n        DateTimeField yearField = null;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n            if (fieldType.equals(DateTimeFieldType.year())) {\n                yearField = savedFields[i].iField;\n                break;\n            }\n            if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n                yearField = iChrono.year();\n            }\n        }\n\n        // check if any fields occur after the year field that can change year\n        boolean yearAltered = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n            if (fieldType.compareTo(yearField.getType()) >= 0) {\n                if (fieldType.equals(DateTimeFieldType.year())) {\n                    yearAltered = true;\n                } else if (fieldType.equals(DateTimeFieldType.monthOfYear())\n                        || fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n                    if (!yearAltered) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        yearAltered = true;\n                    }\n                }\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..12051978 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,22 +328,37 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+            iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n             iSavedFieldsShared = false;\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+\n+        // find the first field that may change year\n+        DateTimeField yearField = null;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n+            if (fieldType.equals(DateTimeFieldType.year())) {\n+                yearField = savedFields[i].iField;\n+                break;\n+            }\n+            if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n+                yearField = iChrono.year();\n+            }\n+        }\n+\n+        // check if any fields occur after the year field that can change year\n+        boolean yearAltered = false;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeFieldType fieldType = savedFields[i].iField.getType();\n+            if (fieldType.compareTo(yearField.getType()) >= 0) {\n+                if (fieldType.equals(DateTimeFieldType.year())) {\n+                    yearAltered = true;\n+                } else if (fieldType.equals(DateTimeFieldType.monthOfYear())\n+                        || fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n+                    if (!yearAltered) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        yearAltered = true;\n+                    }\n+                }\n             }\n         }\n \n@@ -358,7 +373,7 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n@@ -366,16 +381,7 @@ public class DateTimeParserBucket {\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n                 String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n-        }\n-        \n-        return millis;\n-    }\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}