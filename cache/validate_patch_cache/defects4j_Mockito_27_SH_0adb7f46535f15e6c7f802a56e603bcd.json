{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n            .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nCallback[] callbacks = ((Factory) mock).getCallbacks();\nif (callbacks == null) {\n    ((Factory) mock).setCallback(0, newFilter);\n    return;\n}\nboolean filterExists = false;\nfor (int i = 0; i < callbacks.length && !filterExists; i++) {\n    filterExists = callbacks[i] instanceof MethodInterceptorFilter;\n}\nif (filterExists) {\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MethodInterceptorFilter) {\n            callbacks[i] = newFilter;\n        }\n    }\n} else {\n    ((Factory) mock).setCallbacks(addCallback(callbacks, newFilter));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ab4cc9a69 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+            .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Callback[] callbacks = ((Factory) mock).getCallbacks();\n+if (callbacks == null) {\n+    ((Factory) mock).setCallback(0, newFilter);\n+    return;\n+}\n+boolean filterExists = false;\n+for (int i = 0; i < callbacks.length && !filterExists; i++) {\n+    filterExists = callbacks[i] instanceof MethodInterceptorFilter;\n+}\n+if (filterExists) {\n+    for (int i = 0; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MethodInterceptorFilter) {\n+            callbacks[i] = newFilter;\n+        }\n+    }\n+} else {\n+    ((Factory) mock).setCallbacks(addCallback(callbacks, newFilter));\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}