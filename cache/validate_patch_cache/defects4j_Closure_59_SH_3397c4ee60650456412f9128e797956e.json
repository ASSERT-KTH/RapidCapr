{
    "patch": "if (options.checkGlobalThisLevel != null) {\n  if (!options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel.isOn() ? options.checkGlobalThisLevel : CheckLevel.WARNING);\n  }\n}\nelse {\n  if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n  }\n  else {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..b7c26323 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,19 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != null) {\n+  if (!options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel.isOn() ? options.checkGlobalThisLevel : CheckLevel.WARNING);\n+  }\n+}\n+else {\n+  if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n+  }\n+  else {\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+  }\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}