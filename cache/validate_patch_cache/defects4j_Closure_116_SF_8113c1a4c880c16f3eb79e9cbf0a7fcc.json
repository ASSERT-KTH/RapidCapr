{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    boolean hasRestParam = NodeUtil.getFunctionParameters(fnNode).hasRestParam();\n    while (cArg != null || fnParam != null) {\n      if (!hasRestParam && (cArg == null || !fnParam.isName())) {\n        // If we run out of parameters to match or see an argument without a corresponding parameter and we aren't using a rest parameter, we cannot inline\n        return CanInlineResult.NO;\n      } else if (!hasRestParam && (NodeUtil.mayHaveSideEffects(cArg, compiler)\n          || (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1))) {\n        // If we see an argument with side effects or an argument that is evaluated more than once with a corresponding parameter and we aren't using a rest parameter, we cannot inline\n        return CanInlineResult.NO;\n      } else if (hasRestParam && fnParam.getNext() == null) {\n        // If we have a rest parameter and fnParam list is over, we can inline\n        break;\n      } else {\n        // Otherwise, move to the next arg/param\n        if (fnParam.isName()) {\n          fnParam = fnParam.getNext();\n        }\n        if (cArg != null) {\n          cArg = cArg.getNext();\n        }\n      }\n    }\n\n    // Otherwise, inlining can proceed\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..35a4e8aa 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -694,7 +694,6 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -716,35 +715,31 @@ class FunctionInjector {\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    boolean hasRestParam = NodeUtil.getFunctionParameters(fnNode).hasRestParam();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+      if (!hasRestParam && (cArg == null || !fnParam.isName())) {\n+        // If we run out of parameters to match or see an argument without a corresponding parameter and we aren't using a rest parameter, we cannot inline\n+        return CanInlineResult.NO;\n+      } else if (!hasRestParam && (NodeUtil.mayHaveSideEffects(cArg, compiler)\n+          || (NodeUtil.mayEffectMutableState(cArg, compiler)\n+              && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1))) {\n+        // If we see an argument with side effects or an argument that is evaluated more than once with a corresponding parameter and we aren't using a rest parameter, we cannot inline\n+        return CanInlineResult.NO;\n+      } else if (hasRestParam && fnParam.getNext() == null) {\n+        // If we have a rest parameter and fnParam list is over, we can inline\n+        break;\n+      } else {\n+        // Otherwise, move to the next arg/param\n+        if (fnParam.isName()) {\n+          fnParam = fnParam.getNext();\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        if (cArg != null) {\n+          cArg = cArg.getNext();\n         }\n-        cArg = cArg.getNext();\n       }\n     }\n \n+    // Otherwise, inlining can proceed\n     return CanInlineResult.YES;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}