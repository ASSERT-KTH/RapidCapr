{
    "patch": "public static String unescape(String str) {\n    StringBuilder result = new StringBuilder();\n    int length = str.length();\n    for (int i = 0; i < length; i++) {\n        char currentChar = str.charAt(i);\n        if (currentChar == '\\\\') {\n            if (i < length - 1) {\n                char nextChar = str.charAt(i + 1);\n                switch (nextChar) {\n                    case 'n':\n                        result.append('\\n');\n                        i++;\n                        break;\n                    case 't':\n                        result.append('\\t');\n                        i++;\n                        break;\n                    case 'r':\n                        result.append('\\r');\n                        i++;\n                        break;\n                    case 'f':\n                        result.append('\\f');\n                        i++;\n                        break;\n                    case '\\\\':\n                        result.append('\\\\');\n                        i++;\n                        break;\n                    default:\n                        if (nextChar >= '0' && nextChar <= '7') {\n                            int octalValue = nextChar - '0';\n                            if (i < length - 2) {\n                                char nextNextChar = str.charAt(i + 2);\n                                if (nextNextChar >= '0' && nextNextChar <= '7') {\n                                    octalValue = octalValue * 8 + (nextNextChar - '0');\n                                    i++;\n                                }\n                            }\n                            if (i < length - 1) {\n                                char nextNextChar = str.charAt(i + 1);\n                                if (nextNextChar >= '0' && nextNextChar <= '7') {\n                                    octalValue = octalValue * 8 + (nextNextChar - '0');\n                                    i++;\n                                }\n                            }\n                            result.append((char) octalValue);\n                        } else {\n                            result.append('\\\\');\n                        }\n                        break;\n                }\n            } else {\n                result.append(currentChar);\n            }\n        } else {\n            result.append(currentChar);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0b0e73ef 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,67 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder result = new StringBuilder();\n+    int length = str.length();\n+    for (int i = 0; i < length; i++) {\n+        char currentChar = str.charAt(i);\n+        if (currentChar == '\\\\') {\n+            if (i < length - 1) {\n+                char nextChar = str.charAt(i + 1);\n+                switch (nextChar) {\n+                    case 'n':\n+                        result.append('\\n');\n+                        i++;\n+                        break;\n+                    case 't':\n+                        result.append('\\t');\n+                        i++;\n+                        break;\n+                    case 'r':\n+                        result.append('\\r');\n+                        i++;\n+                        break;\n+                    case 'f':\n+                        result.append('\\f');\n+                        i++;\n+                        break;\n+                    case '\\\\':\n+                        result.append('\\\\');\n+                        i++;\n+                        break;\n+                    default:\n+                        if (nextChar >= '0' && nextChar <= '7') {\n+                            int octalValue = nextChar - '0';\n+                            if (i < length - 2) {\n+                                char nextNextChar = str.charAt(i + 2);\n+                                if (nextNextChar >= '0' && nextNextChar <= '7') {\n+                                    octalValue = octalValue * 8 + (nextNextChar - '0');\n+                                    i++;\n+                                }\n+                            }\n+                            if (i < length - 1) {\n+                                char nextNextChar = str.charAt(i + 1);\n+                                if (nextNextChar >= '0' && nextNextChar <= '7') {\n+                                    octalValue = octalValue * 8 + (nextNextChar - '0');\n+                                    i++;\n+                                }\n+                            }\n+                            result.append((char) octalValue);\n+                        } else {\n+                            result.append('\\\\');\n+                        }\n+                        break;\n+                }\n+            } else {\n+                result.append(currentChar);\n+            }\n+        } else {\n+            result.append(currentChar);\n+        }\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}