{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                        jsDoc.hasThisType() ||\n                        jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them.\n        // e.g., var a = function() {};\n        // or function a() {} // or a.x = function() {};\n        int pType = parent.getType();\n        if (pType == Token.FUNCTION ||\n                pType == Token.COMMA ||\n                pType == Token.EXPR_RESULT) {\n            // Traverse function properties, expressions involving commas,\n            // and expression results.\n            return true;\n        } else if (pType == Token.NAME) {\n            Node grandparent = parent.getParent();\n            if (grandparent.getType() != Token.CALL) {\n                // If the node is a named function expression that is not being called,\n                // don't traverse.\n                return false;\n            }\n        } else if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.ASSIGN ||\n                pType == Token.VAR ||\n                pType == Token.LP ||\n                pType == Token.IF ||\n                pType == Token.FOR ||\n                pType == Token.WHILE ||\n                pType == Token.DO ||\n                pType == Token.SWITCH ||\n                pType == Token.TRY ||\n                pType == Token.CATCH ||\n                pType == Token.NEW ||\n                pType == Token.RETURN ||\n                pType == Token.THROW ||\n                pType == Token.CONTINUE ||\n                pType == Token.BREAK ||\n                pType == Token.GETTER_DEF ||\n                pType == Token.SETTER_DEF ||\n                pType == Token.METHOD_DEF ||\n                pType == Token.CLASS ||\n                pType == Token.OBJECTLIT)) {\n            // Do not traverse any other node types.\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment.\n            // To handle nested assignments properly, assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (lhs.getType() == Token.GETPROP &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..0f6a4842 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,88 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                        jsDoc.hasThisType() ||\n+                        jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them.\n+        // e.g., var a = function() {};\n+        // or function a() {} // or a.x = function() {};\n+        int pType = parent.getType();\n+        if (pType == Token.FUNCTION ||\n+                pType == Token.COMMA ||\n+                pType == Token.EXPR_RESULT) {\n+            // Traverse function properties, expressions involving commas,\n+            // and expression results.\n+            return true;\n+        } else if (pType == Token.NAME) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent.getType() != Token.CALL) {\n+                // If the node is a named function expression that is not being called,\n+                // don't traverse.\n+                return false;\n+            }\n+        } else if (!(pType == Token.BLOCK ||\n+                pType == Token.SCRIPT ||\n+                pType == Token.ASSIGN ||\n+                pType == Token.VAR ||\n+                pType == Token.LP ||\n+                pType == Token.IF ||\n+                pType == Token.FOR ||\n+                pType == Token.WHILE ||\n+                pType == Token.DO ||\n+                pType == Token.SWITCH ||\n+                pType == Token.TRY ||\n+                pType == Token.CATCH ||\n+                pType == Token.NEW ||\n+                pType == Token.RETURN ||\n+                pType == Token.THROW ||\n+                pType == Token.CONTINUE ||\n+                pType == Token.BREAK ||\n+                pType == Token.GETTER_DEF ||\n+                pType == Token.SETTER_DEF ||\n+                pType == Token.METHOD_DEF ||\n+                pType == Token.CLASS ||\n+                pType == Token.OBJECTLIT)) {\n+            // Do not traverse any other node types.\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment.\n+            // To handle nested assignments properly, assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (lhs.getType() == Token.GETPROP &&\n+                    lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}