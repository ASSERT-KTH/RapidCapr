{
    "patch": "MockHandler<T> oldMockHandlerImpl = getMockHandlerImpl(mock);\nMockSettingsImpl settings = (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerImpl, settings, mockCreationSettings.isSerializable());\nFactory newProxyInstance = JdkProxyFactory.INSTANCE.getProxy(mock.getClass().getClassLoader(), mockCreationSettings.getInterfaces().toArray(new Class[0]), newMethodInterceptor(newMockHandler));\n((org.mockito.internal.creation.cglib.BlockDispatcher) mock).setCallback(0, newProxyInstance);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..41f1fa4a9 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,14 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> oldMockHandlerImpl = getMockHandlerImpl(mock);\n+MockSettingsImpl settings = (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerImpl, settings, mockCreationSettings.isSerializable());\n+Factory newProxyInstance = JdkProxyFactory.INSTANCE.getProxy(mock.getClass().getClassLoader(), mockCreationSettings.getInterfaces().toArray(new Class[0]), newMethodInterceptor(newMockHandler));\n+((org.mockito.internal.creation.cglib.BlockDispatcher) mock).setCallback(0, newProxyInstance);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}