{
    "patch": "        if (block.isFunction) {\n          // Only consider the first assignment within a function as the\n          // initializing assignment. Subsequent assignments are just\n          // regular assignments.\n          return getInitializingReference() == ref;\n        } else if (block.isLoop && block != ref.getBasicBlock() && !ref.isVarDeclaration()) {\n          // Assignment is in a loop, cannot be assigned only once.\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ca9306d1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // Only consider the first assignment within a function as the\n+          // initializing assignment. Subsequent assignments are just\n+          // regular assignments.\n+          return getInitializingReference() == ref;\n+        } else if (block.isLoop && block != ref.getBasicBlock() && !ref.isVarDeclaration()) {\n+          // Assignment is in a loop, cannot be assigned only once.\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}