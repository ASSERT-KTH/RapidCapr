{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (NodeUtil.isGet(parent) &&\n    parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n  return false;\n}\n\n// Don't traverse functions in prototype properties.\nif (NodeUtil.isPrototypeProperty(parent)) {\n  return false;\n}\n\n// Don't traverse functions being assigned to prototype properties.\nNode grandparent = parent.getParent();\nif (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n  Node lhs = grandparent.getFirstChild();\n  if (lhs.getType() == Token.GETPROP &&\n      lhs.getLastChild().getString().equals(\"prototype\")) {\n    return false;\n  }\n}\n\n// Don't traverse functions being assigned to a global variable in a way\n// that might make the function accidentally usable in the global scope.\nif (NodeUtil.isNameDeclaration(parent.getParent())) {\n  if (NodeUtil.isGlobalName(parent.getFirstChild(), parent.getParent()) ||\n      NodeUtil.isFunctionExpression(n)) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..18775ff7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,35 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (NodeUtil.isGet(parent) &&\n+    parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+  return false;\n+}\n+\n+// Don't traverse functions in prototype properties.\n+if (NodeUtil.isPrototypeProperty(parent)) {\n+  return false;\n+}\n+\n+// Don't traverse functions being assigned to prototype properties.\n+Node grandparent = parent.getParent();\n+if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+  Node lhs = grandparent.getFirstChild();\n+  if (lhs.getType() == Token.GETPROP &&\n+      lhs.getLastChild().getString().equals(\"prototype\")) {\n+    return false;\n+  }\n+}\n+\n+// Don't traverse functions being assigned to a global variable in a way\n+// that might make the function accidentally usable in the global scope.\n+if (NodeUtil.isNameDeclaration(parent.getParent())) {\n+  if (NodeUtil.isGlobalName(parent.getFirstChild(), parent.getParent()) ||\n+      NodeUtil.isFunctionExpression(n)) {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}