{
    "patch": "if (typeVariable != null) {\n    Type[] bounds = typeVariable.getBounds();\n    if(bounds.length > 0) {\n        for (Type type : bounds) {\n            registerTypeVariablesOn(type);\n            if (type instanceof TypeVariable){\n                TypeVariable<?> typeVariable1 = (TypeVariable<?>) type;\n                Type[] bounds1 = typeVariable1.getBounds();\n                if (bounds1.length == 1 && bounds1[0] instanceof Class) {\n                    registerTypeVariablesOn(bounds1[0]);\n                }\n            }\n        }\n    } else {\n        Type genericSuperclass = Object.class;\n        if (typeVariable.getGenericDeclaration() instanceof Class) {\n            Class<?> superClass = ((Class<?>) typeVariable.getGenericDeclaration()).getSuperclass();\n            if (superClass != null) {\n                genericSuperclass = superClass.getGenericSuperclass();\n            }\n        }\n        registerTypeVariablesOn(genericSuperclass);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..ff8a74fc2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,35 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+if (typeVariable != null) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if(bounds.length > 0) {\n+        for (Type type : bounds) {\n+            registerTypeVariablesOn(type);\n+            if (type instanceof TypeVariable){\n+                TypeVariable<?> typeVariable1 = (TypeVariable<?>) type;\n+                Type[] bounds1 = typeVariable1.getBounds();\n+                if (bounds1.length == 1 && bounds1[0] instanceof Class) {\n+                    registerTypeVariablesOn(bounds1[0]);\n+                }\n+            }\n+        }\n+    } else {\n+        Type genericSuperclass = Object.class;\n+        if (typeVariable.getGenericDeclaration() instanceof Class) {\n+            Class<?> superClass = ((Class<?>) typeVariable.getGenericDeclaration()).getSuperclass();\n+            if (superClass != null) {\n+                genericSuperclass = superClass.getGenericSuperclass();\n+            }\n+        }\n+        registerTypeVariablesOn(genericSuperclass);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}