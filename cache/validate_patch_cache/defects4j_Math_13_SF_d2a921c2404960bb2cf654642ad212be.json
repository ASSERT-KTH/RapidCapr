{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final double[] factors = new double[n];\n    double maxFactor = Double.MIN_VALUE;\n    for (int i = 0; i < n; i++) {\n        final double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        factors[i] = Math.sqrt(eigenvalue);\n        if (factors[i] > maxFactor) {\n            maxFactor = factors[i];\n        }\n    }\n    final double threshold = 1e-5 * maxFactor;\n    for (int i = 0; i < n; i++) {\n        if (FastMath.abs(factors[i]) < threshold) {\n            factors[i] = 0;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (factors[i] == 0) {\n            continue;\n        }\n        final RealMatrix col = v.getColumnMatrix(i);\n        final RealMatrix row = v.getRowMatrix(i);\n        final RealMatrix r = col.multiply(row).scalarMultiply(factors[i]);\n        if (i == 0) {\n            continue;\n        }\n        m.setSubMatrix(r.getData(), i, 0);\n    }\n    final RealMatrix s = m.getSubMatrix(0, n - 1, 0, n - 1);\n    final RealMatrix sqrt = new CholeskyDecomposition(s).getL();\n    if (sqrt == null) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n    }\n    if (n > 1) {\n        for (int i = 1; i < n; i++) {\n            sqrt.setSubMatrix(new double[i][n - i], i, 0);\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..dd74c7a42 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,51 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final double[] factors = new double[n];\n+    double maxFactor = Double.MIN_VALUE;\n+    for (int i = 0; i < n; i++) {\n+        final double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        factors[i] = Math.sqrt(eigenvalue);\n+        if (factors[i] > maxFactor) {\n+            maxFactor = factors[i];\n+        }\n+    }\n+    final double threshold = 1e-5 * maxFactor;\n+    for (int i = 0; i < n; i++) {\n+        if (FastMath.abs(factors[i]) < threshold) {\n+            factors[i] = 0;\n+        }\n     }\n+    for (int i = 0; i < n; i++) {\n+        if (factors[i] == 0) {\n+            continue;\n+        }\n+        final RealMatrix col = v.getColumnMatrix(i);\n+        final RealMatrix row = v.getRowMatrix(i);\n+        final RealMatrix r = col.multiply(row).scalarMultiply(factors[i]);\n+        if (i == 0) {\n+            continue;\n+        }\n+        m.setSubMatrix(r.getData(), i, 0);\n+    }\n+    final RealMatrix s = m.getSubMatrix(0, n - 1, 0, n - 1);\n+    final RealMatrix sqrt = new CholeskyDecomposition(s).getL();\n+    if (sqrt == null) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+    }\n+    if (n > 1) {\n+        for (int i = 1; i < n; i++) {\n+            sqrt.setSubMatrix(new double[i][n - i], i, 0);\n+        }\n+    }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}