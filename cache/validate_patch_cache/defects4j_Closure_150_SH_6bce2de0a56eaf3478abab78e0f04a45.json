{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n>>> [ INFILL ] <<<\n      if (n.getType() == Token.NAME) {\n          String name = n.getString();\n          if (parent.getType() == Token.CATCH) {\n            if (isGlobalScope()) {\n              defineDeclaredCatchVar(name, n);\n            } else {\n              defineCatchVar(name, n);\n            }\n          } else {\n            defineVar(name, n, false);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ffa3350b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1463,6 +1463,18 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+>>> [ INFILL ] <<<\n+      if (n.getType() == Token.NAME) {\n+          String name = n.getString();\n+          if (parent.getType() == Token.CATCH) {\n+            if (isGlobalScope()) {\n+              defineDeclaredCatchVar(name, n);\n+            } else {\n+              defineCatchVar(name, n);\n+            }\n+          } else {\n+            defineVar(name, n, false);\n+          }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}