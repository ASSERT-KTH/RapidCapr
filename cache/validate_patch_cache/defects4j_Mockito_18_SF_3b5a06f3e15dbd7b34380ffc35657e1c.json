{
    "patch": "public static <T> ReturnValue<T> getFirst(Iterable<T> iterable) {\n    Iterator<T> iterator = iterable.iterator();\n    if (iterator.hasNext()) {\n        T first = iterator.next();\n        return ReturnValue.successful(first);\n    }\n    return ReturnValue.successful(null); // Return null when iterable is empty\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a4a374475 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,14 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> getFirst(Iterable<T> iterable) {\n+    Iterator<T> iterator = iterable.iterator();\n+    if (iterator.hasNext()) {\n+        T first = iterator.next();\n+        return ReturnValue.successful(first);\n+    }\n+    return ReturnValue.successful(null); // Return null when iterable is empty\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}