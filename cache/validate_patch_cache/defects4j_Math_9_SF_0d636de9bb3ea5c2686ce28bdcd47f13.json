{
    "patch": "import java.math.MathContext;\n\npublic Line revert() {\n    final Vector3D zero = Vector3D.ZERO;\n    final Vector3D revertedDirection = direction.negate();\n    final Line reverted = new Line(zero, revertedDirection);\n    final MathContext mc = new MathContext(15);\n    final Line roundedReverted = new Line(reverted.getOrigin().round(), reverted.getDirection().round(mc));\n    return roundedReverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..e7e1122d0 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+import java.math.MathContext;\n+\n+public Line revert() {\n+    final Vector3D zero = Vector3D.ZERO;\n+    final Vector3D revertedDirection = direction.negate();\n+    final Line reverted = new Line(zero, revertedDirection);\n+    final MathContext mc = new MathContext(15);\n+    final Line roundedReverted = new Line(reverted.getOrigin().round(), reverted.getDirection().round(mc));\n+    return roundedReverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}