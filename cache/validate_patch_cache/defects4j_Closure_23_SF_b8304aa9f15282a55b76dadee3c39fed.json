{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If the GETELEM node is the target of an assignment, do not fold it.\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    // If the index is not a number, do not fold it.\n    if (!right.isNumber()) {\n        return n;\n    }\n\n    // If the index is not an integer or is negative, report an error and do not fold it.\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // Find the i-th element of the array.\n    Node elem = null;\n    for (Node current = left.getFirstChild(); current != null; current = current.getNext()) {\n        // If we found the i-th element, save it and break.\n        if (intIndex == 0) {\n            elem = current;\n            break;\n        }\n        intIndex--;\n    }\n\n    // If we did not find the i-th element or if it is empty, create an undefined node in its place.\n    if (elem == null || elem.isEmpty()) {\n        if (intIndex == 0 && left.isArrayLit() && left.getFirstChild() != null && left.getFirstChild().getNext() == null) {\n            elem = NodeUtil.newUndefinedNode(left);\n        } else {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n    } else {\n        // If we found the i-th element, remove it from the array.\n        left.removeChild(elem);\n    }\n\n    // Replace the GETELEM node with the i-th element.\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..abdccb26 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,54 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+    // If the GETELEM node is the target of an assignment, do not fold it.\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n+    // If the index is not a number, do not fold it.\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n \n+    // If the index is not an integer or is negative, report an error and do not fold it.\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (intIndex != index || intIndex < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    Node current = left.getFirstChild();\n+    // Find the i-th element of the array.\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    for (Node current = left.getFirstChild(); current != null; current = current.getNext()) {\n+        // If we found the i-th element, save it and break.\n+        if (intIndex == 0) {\n+            elem = current;\n+            break;\n+        }\n+        intIndex--;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    // If we did not find the i-th element or if it is empty, create an undefined node in its place.\n+    if (elem == null || elem.isEmpty()) {\n+        if (intIndex == 0 && left.isArrayLit() && left.getFirstChild() != null && left.getFirstChild().getNext() == null) {\n+            elem = NodeUtil.newUndefinedNode(left);\n+        } else {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        }\n     } else {\n-      left.removeChild(elem);\n+        // If we found the i-th element, remove it from the array.\n+        left.removeChild(elem);\n     }\n \n-    // Replace the entire GETELEM with the value\n+    // Replace the GETELEM node with the i-th element.\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 0.0 1 [source_file: testcode] at testcode line 1 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}