{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    Node parent = n.getParent();\n\n    // Don't fold expressions that are not function calls or member access expressions.\n    if (!(child.isExprCall() || child.isGetElem() || child.isGetProp())) {\n      return false;\n    }\n    if (parent != null) {\n      if (parent.getType() == Token.EXPR_RESULT) {\n        // Don't fold expressions that are function calls if they have an EXPR_RESULT parent.\n        if (child.isExprCall()) {\n          return false;\n        }\n\n        // Don't fold expressions that are member access expressions if they have an EXPR_RESULT parent\n        if (child.isGetElem() || child.isGetProp()) {\n          if (child.getLastChild().isName() && child.getLastChild().getString().equals(\"call\")) {\n            return false;\n          }\n        }\n      } else if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n        // Don't fold expressions that are arguments to a CALL or NEW node.\n        return false;\n      }\n    }\n\n    // Only fold expressions that are not function expressions, function declarations, or generator function declarations.\n    if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n      return false;\n    }\n\n    // Don't fold expressions that may have side effects.\n    if (NodeUtil.mayHaveSideEffects(child)) {\n      return false;\n    }\n\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..f123d57c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    Node parent = n.getParent();\n+\n+    // Don't fold expressions that are not function calls or member access expressions.\n+    if (!(child.isExprCall() || child.isGetElem() || child.isGetProp())) {\n+      return false;\n+    }\n+    if (parent != null) {\n+      if (parent.getType() == Token.EXPR_RESULT) {\n+        // Don't fold expressions that are function calls if they have an EXPR_RESULT parent.\n+        if (child.isExprCall()) {\n+          return false;\n+        }\n+\n+        // Don't fold expressions that are member access expressions if they have an EXPR_RESULT parent\n+        if (child.isGetElem() || child.isGetProp()) {\n+          if (child.getLastChild().isName() && child.getLastChild().getString().equals(\"call\")) {\n+            return false;\n+          }\n+        }\n+      } else if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n+        // Don't fold expressions that are arguments to a CALL or NEW node.\n+        return false;\n       }\n     }\n \n-    return false;\n+    // Only fold expressions that are not function expressions, function declarations, or generator function declarations.\n+    if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n+      return false;\n+    }\n+\n+    // Don't fold expressions that may have side effects.\n+    if (NodeUtil.mayHaveSideEffects(child)) {\n+      return false;\n+    }\n+\n+    return true;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}