{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JSONArray arr = new JSONArray(json);\n        double count = 0.0;\n        for(int i = 0; i < arr.length(); i++) {\n            JSONObject obj = arr.getJSONObject(i);\n            if(obj.has(\"type\") && obj.getString(\"type\").equals(\"typed\")) {\n                count++;\n            }\n        }\n        return (count/arr.length())*100;\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8535fa1b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JSONArray arr = new JSONArray(json);\n+        double count = 0.0;\n+        for(int i = 0; i < arr.length(); i++) {\n+            JSONObject obj = arr.getJSONObject(i);\n+            if(obj.has(\"type\") && obj.getString(\"type\").equals(\"typed\")) {\n+                count++;\n+            }\n+        }\n+        return (count/arr.length())*100;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return -1;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}