{
    "patch": "import java.lang.reflect.Array;\nimport java.math.BigDecimal;\nimport java.util.Arrays;\n\npublic class EqualsBuilder {\n    private boolean isEquals;\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public EqualsBuilder() {\n        isEquals = true;\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n            return this;\n        } else if (lhs instanceof long[]) {\n            append(Arrays.equals((long[]) lhs, (long[]) rhs));\n        } else if (lhs instanceof int[]) {\n            append(Arrays.equals((int[]) lhs, (int[]) rhs));\n        } else if (lhs instanceof short[]) {\n            append(Arrays.equals((short[]) lhs, (short[]) rhs));\n        } else if (lhs instanceof char[]) {\n            append(Arrays.equals((char[]) lhs, (char[]) rhs));\n        } else if (lhs instanceof byte[]) {\n            append(Arrays.equals((byte[]) lhs, (byte[]) rhs));\n        } else if (lhs instanceof double[]) {\n            append(Arrays.equals((double[]) lhs, (double[]) rhs));\n        } else if (lhs instanceof float[]) {\n            append(Arrays.equals((float[]) lhs, (float[]) rhs));\n        } else if (lhs instanceof boolean[]) {\n            append(Arrays.equals((boolean[]) lhs, (boolean[]) rhs));\n        } else {\n            // Not an array of primitives\n            final int lhsLength = Array.getLength(lhs);\n            if (lhsLength != Array.getLength(rhs)) {\n                isEquals = false;\n                return this;\n            }\n            for (int i = 0; i < lhsLength && isEquals; ++i) {\n                final Object lhsItem = Array.get(lhs, i);\n                final Object rhsItem = Array.get(rhs, i);\n                // recursive call!\n                append(lhsItem, rhsItem);\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(byte lhs, byte rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(char lhs, char rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(double lhs, double rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        long lhsBits = Double.doubleToLongBits(lhs);\n        long rhsBits = Double.doubleToLongBits(rhs);\n        isEquals = lhsBits == rhsBits;\n        return this;\n    }\n\n    public EqualsBuilder append(float lhs, float rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        int lhsBits = Float.floatToIntBits(lhs);\n        int rhsBits = Float.floatToIntBits(rhs);\n        isEquals = lhsBits == rhsBits;\n        return this;\n    }\n\n    public EqualsBuilder append(int lhs, int rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(long lhs, long rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.getClass() != rhs.getClass()) {\n            this.setEquals(false);\n            return this;\n        }\n        isEquals = Arrays.deepEquals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(short lhs, short rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(String lhs, String rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs || (lhs != null && lhs.equals(rhs));\n        return this;\n    }\n\n    public EqualsBuilder append(BigDecimal lhs, BigDecimal rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs || (lhs != null && lhs.compareTo(rhs) == 0);\n        return this;\n    }\n\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = Arrays.equals(lhs, rhs);\n        return this;\n    }\n\n    public EqualsBuilder appendSuper(boolean superEquals) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = superEquals;\n        return this;\n    }\n\n    public boolean build() {\n        return isEquals();\n    }\n\n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    public EqualsBuilder append(boolean[] array1, boolean[] array2, boolean defaultEquals) {\n        if (isEquals == false) {\n            return this;\n        }\n\n        if (array1 == array2) {\n            return this;\n        }\n\n        if (array1 == null || array2 == null) {\n            setEquals(defaultEquals);\n            return this;\n        }\n\n        if (array1.length != array2.length) {\n            setEquals(defaultEquals);\n            return this;\n        }\n\n        for (int i = 0; i < array1.length; i++) {\n            append(array1[i], array2[i]);\n        }\n\n        return this;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..7890fa23 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,21 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.lang.reflect.Array;\n+import java.math.BigDecimal;\n+import java.util.Arrays;\n+\n+public class EqualsBuilder {\n+    private boolean isEquals;\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public EqualsBuilder() {\n+        isEquals = true;\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -375,39 +390,257 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n+            return this;\n+        } else if (lhs instanceof long[]) {\n+            append(Arrays.equals((long[]) lhs, (long[]) rhs));\n         } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n+            append(Arrays.equals((int[]) lhs, (int[]) rhs));\n         } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n+            append(Arrays.equals((short[]) lhs, (short[]) rhs));\n         } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n+            append(Arrays.equals((char[]) lhs, (char[]) rhs));\n         } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n+            append(Arrays.equals((byte[]) lhs, (byte[]) rhs));\n         } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n+            append(Arrays.equals((double[]) lhs, (double[]) rhs));\n         } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n+            append(Arrays.equals((float[]) lhs, (float[]) rhs));\n         } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+            append(Arrays.equals((boolean[]) lhs, (boolean[]) rhs));\n         } else {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            final int lhsLength = Array.getLength(lhs);\n+            if (lhsLength != Array.getLength(rhs)) {\n+                isEquals = false;\n+                return this;\n+            }\n+            for (int i = 0; i < lhsLength && isEquals; ++i) {\n+                final Object lhsItem = Array.get(lhs, i);\n+                final Object rhsItem = Array.get(rhs, i);\n+                // recursive call!\n+                append(lhsItem, rhsItem);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(boolean lhs, boolean rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte lhs, byte rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char lhs, char rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double lhs, double rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        long lhsBits = Double.doubleToLongBits(lhs);\n+        long rhsBits = Double.doubleToLongBits(rhs);\n+        isEquals = lhsBits == rhsBits;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float lhs, float rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        int lhsBits = Float.floatToIntBits(lhs);\n+        int rhsBits = Float.floatToIntBits(rhs);\n+        isEquals = lhsBits == rhsBits;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int lhs, int rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long lhs, long rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.getClass() != rhs.getClass()) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        isEquals = Arrays.deepEquals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short lhs, short rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(String lhs, String rhs) {\n+        if (isEquals == false) {\n+            return this;\n         }\n+        isEquals = lhs == rhs || (lhs != null && lhs.equals(rhs));\n         return this;\n     }\n \n+    public EqualsBuilder append(BigDecimal lhs, BigDecimal rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs || (lhs != null && lhs.compareTo(rhs) == 0);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char[] lhs, char[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double[] lhs, double[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float[] lhs, float[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int[] lhs, int[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long[] lhs, long[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short[] lhs, short[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = Arrays.equals(lhs, rhs);\n+        return this;\n+    }\n+\n+    public EqualsBuilder appendSuper(boolean superEquals) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = superEquals;\n+        return this;\n+    }\n+\n+    public boolean build() {\n+        return isEquals();\n+    }\n+\n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    public EqualsBuilder append(boolean[] array1, boolean[] array2, boolean defaultEquals) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+\n+        if (array1 == array2) {\n+            return this;\n+        }\n+\n+        if (array1 == null || array2 == null) {\n+            setEquals(defaultEquals);\n+            return this;\n+        }\n+\n+        if (array1.length != array2.length) {\n+            setEquals(defaultEquals);\n+            return this;\n+        }\n+\n+        for (int i = 0; i < array1.length; i++) {\n+            append(array1[i], array2[i]);\n+        }\n+\n+        return this;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}