{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    long instant = 0L;\n\n    int maxDayOfMonth = -1;\n    int dayOfMonthIndex = -1;\n    boolean leapYear = false;\n\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType fieldType = partial.getFieldType(i);\n\n        if (fieldType == DateTimeFieldType.monthOfYear()) {\n            int year = iChronology.year().get(instant);\n            int monthOfYear = values[i];\n\n            // check and handle leap year\n            if (monthOfYear == 2) {\n                boolean isLeap = iChronology.year().isLeap(year);\n                if (isLeap) {\n                    maxDayOfMonth = 29;\n                    leapYear = true;\n                } else {\n                    maxDayOfMonth = 28;\n                    leapYear = false;\n                }\n            } else {\n                maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n            }\n\n            // calculate new month and year values\n            int totalMonths = year * 12 + monthOfYear - 1;\n            totalMonths += valueToAdd;\n\n            year = totalMonths / 12;\n            monthOfYear = totalMonths % 12 + 1;\n\n            if (year < iChronology.year().getMinimumValue() ||\n                year > iChronology.year().getMaximumValue()) {\n                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.year(), String.valueOf(year));\n            }\n\n            if (monthOfYear < iChronology.monthOfYear().getMinimumValue() ||\n                monthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(monthOfYear));\n            }\n\n            // set the updated year and month values in the instant\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, monthOfYear);\n\n            dayOfMonthIndex = i;\n        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n            int dayOfMonth = values[i];\n            if (dayOfMonth > maxDayOfMonth) {\n                dayOfMonth = maxDayOfMonth;\n            }\n            instant = fieldType.getField(iChronology).set(instant, dayOfMonth);\n        } else {\n            instant = fieldType.getField(iChronology).set(instant, values[i]);\n        }\n    }\n\n    // handle case where leap year day is being added to 02-29\n    if (valueToAdd > 0 && leapYear && dayOfMonthIndex != -1 \n            && partial.getFieldType(dayOfMonthIndex) == DateTimeFieldType.dayOfMonth() \n            && partial.getValue(dayOfMonthIndex) == 29) {\n        instant = iChronology.dayOfMonth().set(instant, 29);\n    }\n\n    // handle case where a day goes out of bound due to month increment\n    int[] newValues = iChronology.get(partial, instant);\n\n    // check if there was an out of bound day\n    if (dayOfMonthIndex != -1 \n            && newValues[dayOfMonthIndex] != values[dayOfMonthIndex]) {\n        // if so, set it to the max value for that month and year\n        int year = iChronology.year().get(instant);\n        int monthOfYear = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(\n                iChronology.yearMonth().set(instant, year * 12 + monthOfYear));\n\n        newValues[dayOfMonthIndex] = maxDayOfMonth;\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..656fd920 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,98 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    long instant = 0L;\n+\n+    int maxDayOfMonth = -1;\n+    int dayOfMonthIndex = -1;\n+    boolean leapYear = false;\n+\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType fieldType = partial.getFieldType(i);\n+\n+        if (fieldType == DateTimeFieldType.monthOfYear()) {\n+            int year = iChronology.year().get(instant);\n+            int monthOfYear = values[i];\n+\n+            // check and handle leap year\n+            if (monthOfYear == 2) {\n+                boolean isLeap = iChronology.year().isLeap(year);\n+                if (isLeap) {\n+                    maxDayOfMonth = 29;\n+                    leapYear = true;\n+                } else {\n+                    maxDayOfMonth = 28;\n+                    leapYear = false;\n+                }\n+            } else {\n+                maxDayOfMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+            }\n+\n+            // calculate new month and year values\n+            int totalMonths = year * 12 + monthOfYear - 1;\n+            totalMonths += valueToAdd;\n+\n+            year = totalMonths / 12;\n+            monthOfYear = totalMonths % 12 + 1;\n+\n+            if (year < iChronology.year().getMinimumValue() ||\n+                year > iChronology.year().getMaximumValue()) {\n+                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.year(), String.valueOf(year));\n+            }\n+\n+            if (monthOfYear < iChronology.monthOfYear().getMinimumValue() ||\n+                monthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n+                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(monthOfYear));\n+            }\n+\n+            // set the updated year and month values in the instant\n+            instant = iChronology.year().set(instant, year);\n+            instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+\n+            dayOfMonthIndex = i;\n+        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+            int dayOfMonth = values[i];\n+            if (dayOfMonth > maxDayOfMonth) {\n+                dayOfMonth = maxDayOfMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            instant = fieldType.getField(iChronology).set(instant, dayOfMonth);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = fieldType.getField(iChronology).set(instant, values[i]);\n         }\n     }\n \n+    // handle case where leap year day is being added to 02-29\n+    if (valueToAdd > 0 && leapYear && dayOfMonthIndex != -1 \n+            && partial.getFieldType(dayOfMonthIndex) == DateTimeFieldType.dayOfMonth() \n+            && partial.getValue(dayOfMonthIndex) == 29) {\n+        instant = iChronology.dayOfMonth().set(instant, 29);\n+    }\n+\n+    // handle case where a day goes out of bound due to month increment\n+    int[] newValues = iChronology.get(partial, instant);\n+\n+    // check if there was an out of bound day\n+    if (dayOfMonthIndex != -1 \n+            && newValues[dayOfMonthIndex] != values[dayOfMonthIndex]) {\n+        // if so, set it to the max value for that month and year\n+        int year = iChronology.year().get(instant);\n+        int monthOfYear = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(\n+                iChronology.yearMonth().set(instant, year * 12 + monthOfYear));\n+\n+        newValues[dayOfMonthIndex] = maxDayOfMonth;\n+    }\n+\n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}