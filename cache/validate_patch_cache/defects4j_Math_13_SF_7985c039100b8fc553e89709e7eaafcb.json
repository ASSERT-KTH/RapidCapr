{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix D = dec.getD();\n    RealMatrix V = dec.getV();\n\n    /* Check if the matrix has complex eigenvalues */\n    double maxImag = 0.0;\n    double epsilon = 1e-12;\n    for (int i = 0; i < D.getRowDimension(); i++) {\n        if (FastMath.abs(D.getEntry(i, i)) < epsilon) {\n            continue;\n        }\n        double imag = FastMath.abs(D.getEntry(i, i + 1));\n        if (imag > maxImag) {\n            maxImag = imag;\n        }\n    }\n    if (maxImag > epsilon) {\n        throw new MathIllegalArgumentException(LocalizedFormats.COMPLEX_MATRIX_NOT_SUPPORTED);\n    }\n\n    /* Compute the square root of the eigenvalues */\n    for (int i = 0; i < D.getRowDimension(); i++) {\n        double value = D.getEntry(i, i);\n        if (value < 0) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);\n        } else if (value < epsilon) {\n            D.setEntry(i, i, 0);\n        } else {\n            D.setEntry(i, i, FastMath.sqrt(value));\n        }\n    }\n\n    /* Compute the square root of the matrix */\n    RealMatrix sqrtM = V.multiply(D).multiply(V.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3766cce13 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,42 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix D = dec.getD();\n+    RealMatrix V = dec.getV();\n+\n+    /* Check if the matrix has complex eigenvalues */\n+    double maxImag = 0.0;\n+    double epsilon = 1e-12;\n+    for (int i = 0; i < D.getRowDimension(); i++) {\n+        if (FastMath.abs(D.getEntry(i, i)) < epsilon) {\n+            continue;\n+        }\n+        double imag = FastMath.abs(D.getEntry(i, i + 1));\n+        if (imag > maxImag) {\n+            maxImag = imag;\n+        }\n+    }\n+    if (maxImag > epsilon) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.COMPLEX_MATRIX_NOT_SUPPORTED);\n     }\n+\n+    /* Compute the square root of the eigenvalues */\n+    for (int i = 0; i < D.getRowDimension(); i++) {\n+        double value = D.getEntry(i, i);\n+        if (value < 0) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);\n+        } else if (value < epsilon) {\n+            D.setEntry(i, i, 0);\n+        } else {\n+            D.setEntry(i, i, FastMath.sqrt(value));\n+        }\n+    }\n+\n+    /* Compute the square root of the matrix */\n+    RealMatrix sqrtM = V.multiply(D).multiply(V.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}