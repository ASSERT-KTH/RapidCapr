{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          if (ref.getBasicBlock().getCondition() != null) {\n            return false;\n          }\n          // Make sure this is the only assignment in the loop, and that all\n          // back-edges in the loop lead here.\n          BasicBlock loop = block.getCanonicalizedLoopHeader();\n          if (loop == null || !loop.getSuccessors().contains(ref.getBasicBlock())) {\n            return false;\n          }\n          int count = 0;\n          List<BasicBlock> blocks = Lists.newArrayList(block);\n          while (!blocks.isEmpty()) {\n            block = blocks.remove(blocks.size() - 1);\n            if (block.getSuccessors().contains(loop) || block == loop) {\n              count++;\n              // Make sure that there is only one back-edge and that the\n              // back-edge leads to the beginning of the loop.\n              if (count > 1 || !block.getSuccessors().contains(loop)) {\n                return false;\n              }\n            } else {\n              blocks.addAll(block.getSuccessors());\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4372953d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,34 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          if (ref.getBasicBlock().getCondition() != null) {\n+            return false;\n+          }\n+          // Make sure this is the only assignment in the loop, and that all\n+          // back-edges in the loop lead here.\n+          BasicBlock loop = block.getCanonicalizedLoopHeader();\n+          if (loop == null || !loop.getSuccessors().contains(ref.getBasicBlock())) {\n+            return false;\n+          }\n+          int count = 0;\n+          List<BasicBlock> blocks = Lists.newArrayList(block);\n+          while (!blocks.isEmpty()) {\n+            block = blocks.remove(blocks.size() - 1);\n+            if (block.getSuccessors().contains(loop) || block == loop) {\n+              count++;\n+              // Make sure that there is only one back-edge and that the\n+              // back-edge leads to the beginning of the loop.\n+              if (count > 1 || !block.getSuccessors().contains(loop)) {\n+                return false;\n+              }\n+            } else {\n+              blocks.addAll(block.getSuccessors());\n+            }\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}