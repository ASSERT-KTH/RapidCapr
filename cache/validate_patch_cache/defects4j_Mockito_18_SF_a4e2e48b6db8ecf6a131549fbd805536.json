{
    "patch": "public Iterable<String> filterValuesByType(ReturnValues values, Class<?> desiredType) {\n    if (values == null || desiredType == null) {\n        throw new IllegalArgumentException(\"Arguments cannot be null\");\n    }\n    List<String> desiredValues = new ArrayList<>();\n    for (Object obj : values.getAllReturnValues()) {\n        if (desiredType.isInstance(obj)) {\n            desiredValues.add(obj.toString());\n        }\n    }\n    return desiredValues;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..22cb02ded 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<String> filterValuesByType(ReturnValues values, Class<?> desiredType) {\n+    if (values == null || desiredType == null) {\n+        throw new IllegalArgumentException(\"Arguments cannot be null\");\n+    }\n+    List<String> desiredValues = new ArrayList<>();\n+    for (Object obj : values.getAllReturnValues()) {\n+        if (desiredType.isInstance(obj)) {\n+            desiredValues.add(obj.toString());\n+        }\n+    }\n+    return desiredValues;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}