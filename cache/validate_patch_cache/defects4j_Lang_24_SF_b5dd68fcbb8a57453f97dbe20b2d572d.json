{
    "patch": "public static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    int sz = str.length();\n    boolean hasExp = false;\n    boolean hasDecimalPoint = false;\n    boolean allowSigns = true;\n    boolean foundDigit = false;\n    int start = 0;\n    if (sz > 1 && str.charAt(0) == '-') {\n        start = 1;\n        allowSigns = false;\n    }\n    if (sz > start + 1 && str.charAt(start) == '0') {\n        if (str.charAt(start + 1) == 'x' || str.charAt(start + 1) == 'X') {\n            int i = start + 2;\n            if (i == sz) {\n                return false; // str == \"0x\" || str == \"0X\"\n            }\n            // checking hex (it can't be anything else)\n            for (; i < str.length(); i++) {\n                if ((str.charAt(i) < '0' || str.charAt(i) > '9')\n                        && (str.charAt(i) < 'a' || str.charAt(i) > 'f')\n                        && (str.charAt(i) < 'A' || str.charAt(i) > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        } else if(Character.isDigit(str.charAt(start + 1))) {\n            // leading zero implies octal value\n            int i = start + 1;\n            while (i < sz) {\n                if (str.charAt(i) == '.') {\n                    if (hasDecimalPoint || hasExp) {\n                        return false;\n                    }\n                    hasDecimalPoin",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 4a1d8459..d351d7f6 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1316,108 +1316,43 @@ public class NumberUtils {\n      * @param str  the <code>String</code> to check\n      * @return <code>true</code> if the string is a correctly formatted number\n      */\n-    public static boolean isNumber(String str) {\n-        if (StringUtils.isEmpty(str)) {\n-            return false;\n-        }\n-        char[] chars = str.toCharArray();\n-        int sz = chars.length;\n-        boolean hasExp = false;\n-        boolean hasDecPoint = false;\n-        boolean allowSigns = false;\n-        boolean foundDigit = false;\n-        // deal with any possible sign up front\n-        int start = (chars[0] == '-') ? 1 : 0;\n-        if (sz > start + 1) {\n-            if (chars[start] == '0' && chars[start + 1] == 'x') {\n-                int i = start + 2;\n-                if (i == sz) {\n-                    return false; // str == \"0x\"\n-                }\n-                // checking hex (it can't be anything else)\n-                for (; i < chars.length; i++) {\n-                    if ((chars[i] < '0' || chars[i] > '9')\n-                        && (chars[i] < 'a' || chars[i] > 'f')\n-                        && (chars[i] < 'A' || chars[i] > 'F')) {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-        }\n-        sz--; // don't want to loop to the last char, check it afterwords\n-              // for type qualifiers\n-        int i = start;\n-        // loop to the next to last char or to the last char if we need another digit to\n-        // make a valid number (e.g. chars[0..5] = \"1234E\")\n-        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n-            if (chars[i] >= '0' && chars[i] <= '9') {\n-                foundDigit = true;\n-                allowSigns = false;\n-\n-            } else if (chars[i] == '.') {\n-                if (hasDecPoint || hasExp) {\n-                    // two decimal points or dec in exponent   \n-                    return false;\n-                }\n-                hasDecPoint = true;\n-            } else if (chars[i] == 'e' || chars[i] == 'E') {\n-                // we've already taken care of hex.\n-                if (hasExp) {\n-                    // two E's\n-                    return false;\n-                }\n-                if (!foundDigit) {\n-                    return false;\n-                }\n-                hasExp = true;\n-                allowSigns = true;\n-            } else if (chars[i] == '+' || chars[i] == '-') {\n-                if (!allowSigns) {\n-                    return false;\n-                }\n-                allowSigns = false;\n-                foundDigit = false; // we need a digit after the E\n-            } else {\n-                return false;\n-            }\n-            i++;\n-        }\n-        if (i < chars.length) {\n-            if (chars[i] >= '0' && chars[i] <= '9') {\n-                // no type qualifier, OK\n-                return true;\n-            }\n-            if (chars[i] == 'e' || chars[i] == 'E') {\n-                // can't have an E at the last byte\n-                return false;\n+public static boolean isNumber(String str) {\n+    if (StringUtils.isEmpty(str)) {\n+        return false;\n+    }\n+    int sz = str.length();\n+    boolean hasExp = false;\n+    boolean hasDecimalPoint = false;\n+    boolean allowSigns = true;\n+    boolean foundDigit = false;\n+    int start = 0;\n+    if (sz > 1 && str.charAt(0) == '-') {\n+        start = 1;\n+        allowSigns = false;\n+    }\n+    if (sz > start + 1 && str.charAt(start) == '0') {\n+        if (str.charAt(start + 1) == 'x' || str.charAt(start + 1) == 'X') {\n+            int i = start + 2;\n+            if (i == sz) {\n+                return false; // str == \"0x\" || str == \"0X\"\n             }\n-            if (chars[i] == '.') {\n-                if (hasDecPoint || hasExp) {\n-                    // two decimal points or dec in exponent\n+            // checking hex (it can't be anything else)\n+            for (; i < str.length(); i++) {\n+                if ((str.charAt(i) < '0' || str.charAt(i) > '9')\n+                        && (str.charAt(i) < 'a' || str.charAt(i) > 'f')\n+                        && (str.charAt(i) < 'A' || str.charAt(i) > 'F')) {\n                     return false;\n                 }\n-                // single trailing decimal point after non-exponent is ok\n-                return foundDigit;\n             }\n-            if (!allowSigns\n-                && (chars[i] == 'd'\n-                    || chars[i] == 'D'\n-                    || chars[i] == 'f'\n-                    || chars[i] == 'F')) {\n-                return foundDigit;\n-            }\n-            if (chars[i] == 'l'\n-                || chars[i] == 'L') {\n-                // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp;\n-            }\n-            // last character is illegal\n-            return false;\n-        }\n-        // allowSigns is true iff the val ends in 'E'\n-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n-        return !allowSigns && foundDigit;\n-    }\n+            return true;\n+        } else if(Character.isDigit(str.charAt(start + 1))) {\n+            // leading zero implies octal value\n+            int i = start + 1;\n+            while (i < sz) {\n+                if (str.charAt(i) == '.') {\n+                    if (hasDecimalPoint || hasExp) {\n+                        return false;\n+                    }\n+                    hasDecimalPoin\n     \n }",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}