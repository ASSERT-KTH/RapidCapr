{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      boolean isLentToPrototype = NodeUtil.isExpressionResultUsed(parent);\n      if (isLentToPrototype) {\n        Node current = parent;\n        while ((current = current.getParent()) != null) {\n          if (NodeUtil.isFunctionDeclaration(current)) {\n            break;\n          }\n          if (NodeUtil.isFunctionExpression(current)) {\n            JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(current);\n            if (jsDoc != null && jsDoc.isConstructor()) {\n              isLentToPrototype = false;\n              break;\n            }\n          }\n        }\n        if (isLentToPrototype) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6ac661fc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      boolean isLentToPrototype = NodeUtil.isExpressionResultUsed(parent);\n+      if (isLentToPrototype) {\n+        Node current = parent;\n+        while ((current = current.getParent()) != null) {\n+          if (NodeUtil.isFunctionDeclaration(current)) {\n+            break;\n+          }\n+          if (NodeUtil.isFunctionExpression(current)) {\n+            JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(current);\n+            if (jsDoc != null && jsDoc.isConstructor()) {\n+              isLentToPrototype = false;\n+              break;\n+            }\n+          }\n+        }\n+        if (isLentToPrototype) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}