{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (isExpressionFoldable(maybeExpr)) {\n      Node parent = n.getParent();\n      int parentType = parent.getType();\n      if (parentType == Token.ASSIGN || parentType == Token.VAR || parentType == Token.EXPR_RESULT) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isExpressionFoldable(Node n) {\n  // If the node is a simple expression, it's foldable.\n  if (isSimpleExpression(n)) {\n    return true;\n  }\n  // Otherwise, if it's a conditional expression, both its true and false branches must be foldable.\n  if (n.getType() == Token.HOOK) {\n    Node trueNode = n.getFirstChild().getNext();\n    Node falseNode = trueNode.getNext();\n    return isExpressionFoldable(trueNode) && isExpressionFoldable(falseNode);\n  }\n  // Otherwise, the expression is not foldable.\n  return false;\n}\n\nprivate boolean isSimpleExpression(Node n) {\n  int type = n.getType();\n  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..936bf67f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,40 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (isExpressionFoldable(maybeExpr)) {\n+      Node parent = n.getParent();\n+      int parentType = parent.getType();\n+      if (parentType == Token.ASSIGN || parentType == Token.VAR || parentType == Token.EXPR_RESULT) {\n+        return true;\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isExpressionFoldable(Node n) {\n+  // If the node is a simple expression, it's foldable.\n+  if (isSimpleExpression(n)) {\n+    return true;\n   }\n+  // Otherwise, if it's a conditional expression, both its true and false branches must be foldable.\n+  if (n.getType() == Token.HOOK) {\n+    Node trueNode = n.getFirstChild().getNext();\n+    Node falseNode = trueNode.getNext();\n+    return isExpressionFoldable(trueNode) && isExpressionFoldable(falseNode);\n+  }\n+  // Otherwise, the expression is not foldable.\n+  return false;\n+}\n+\n+private boolean isSimpleExpression(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n+      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}