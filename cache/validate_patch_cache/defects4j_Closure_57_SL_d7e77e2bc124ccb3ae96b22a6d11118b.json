{
    "patch": "if (callee != null && callee.getType() == Token.GETPROP) {\n    String qualifiedName = callee.getQualifiedName();\n    if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n        className = target != null && target.getType() == Token.STRING ? target.getString() : null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..ebe51fe2 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -194,7 +194,13 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n-          if (target != null) {\n+if (callee != null && callee.getType() == Token.GETPROP) {\n+    String qualifiedName = callee.getQualifiedName();\n+    if (functionName.equals(qualifiedName)) {\n+        Node target = callee.getNext();\n+        className = target != null && target.getType() == Token.STRING ? target.getString() : null;\n+    }\n+}\n             className = target.getString();\n           }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}