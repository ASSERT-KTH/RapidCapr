{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    if (nextLocal == nextAdjusted && getOffset(nextLocal - 1) != offsetAdjusted) {\n        // In an ambiguous hour (DST overlap), must check the previous offset to decide.\n        // If it's not equal to the adjusted offset, then we're in a gap.\n        int prevOffset = getOffset(nextLocal - 1);\n        return prevOffset != offsetAdjusted ? offsetLocal : offsetAdjusted;\n    } else {\n        // If one of the transitions matches the adjusted offset, return the adjusted offset.\n        int nextLocalOffset = getOffset(nextLocal);\n        if (nextLocalOffset == offsetAdjusted) {\n            return offsetAdjusted;\n        }\n        int nextAdjustedOffset = getOffset(nextAdjusted);\n        if (nextAdjustedOffset == offsetAdjusted) {\n            return offsetAdjusted;\n        }\n\n        // Otherwise return the offset corresponding to the earlier transition.\n        if (nextLocal < nextAdjusted) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b65a6112 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    if (nextLocal == nextAdjusted && getOffset(nextLocal - 1) != offsetAdjusted) {\n+        // In an ambiguous hour (DST overlap), must check the previous offset to decide.\n+        // If it's not equal to the adjusted offset, then we're in a gap.\n+        int prevOffset = getOffset(nextLocal - 1);\n+        return prevOffset != offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    } else {\n+        // If one of the transitions matches the adjusted offset, return the adjusted offset.\n+        int nextLocalOffset = getOffset(nextLocal);\n+        if (nextLocalOffset == offsetAdjusted) {\n+            return offsetAdjusted;\n+        }\n+        int nextAdjustedOffset = getOffset(nextAdjusted);\n+        if (nextAdjustedOffset == offsetAdjusted) {\n+            return offsetAdjusted;\n+        }\n+\n+        // Otherwise return the offset corresponding to the earlier transition.\n+        if (nextLocal < nextAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}