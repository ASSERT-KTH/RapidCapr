{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    if (bucket.getOverflow() != null || bucket.getFraction() != null) {\n        throw new IllegalArgumentException(\"Invalid date: \" + text);\n    }\n    \n    int year = defaultYear;\n    int month = 1;\n    int day = 1;\n    long millis = Long.MIN_VALUE;\n    \n    // parse year\n    if (bucket.containsField(DateTimeFieldType.year())) {\n        year = bucket.get(DateTimeFieldType.year());\n        if (year < 0) {\n            throw new IllegalArgumentException(\"Invalid year: \" + year);\n        } else if (year <= 100) {\n            year = DateTimeUtils.getChronology(chrono).year().set(instantLocal, year);\n        }\n    }\n    \n    // parse month\n    if (bucket.containsField(DateTimeFieldType.monthOfYear())) {\n        month = bucket.get(DateTimeFieldType.monthOfYear());\n        if (month < 1 || month > 12) {\n            throw new IllegalArgumentException(\"Invalid month: \" + month);\n        }\n    }\n    \n    // check for February 29th on non-leap years\n    boolean isLeapYear = DateTimeUtils.isLeapYear(year);\n    if (!isLeapYear && month == DateTimeConstants.FEBRUARY && bucket.getDayOfMonth() > 28) {\n        throw new IllegalArgumentException(\"Invalid date: \" + text);\n    }\n    \n    // parse day\n    if (bucket.containsField(DateTimeFieldType.dayOfMonth())) {\n        day = bucket.get(DateTimeFieldType.dayOfMonth());\n        if (day < 1 || day > chrono.dayOfMonth().getMaximumValue(year, month)) {\n            throw new IllegalArgumentException(\"Invalid date: \" + text);\n        }\n    }\n    \n    // parse time\n    if (bucket.containsField(DateTimeFieldType.hourOfDay()) ||\n            bucket.containsField(DateTimeFieldType.minuteOfHour()) ||\n            bucket.containsField(DateTimeFieldType.secondOfMinute()) ||\n            bucket.containsField(DateTimeFieldType.millisOfSecond())) {\n        LocalTime time = LocalTime.MIDNIGHT;\n        if (bucket.containsField(DateTimeFieldType.hourOfDay())) {\n            int hour = bucket.get(DateTimeFieldType.hourOfDay());\n            if (hour < 0 || hour > 23) {\n                throw new IllegalArgumentException(\"Invalid hour: \" + hour);\n            }\n            time = time.withHourOfDay(hour);\n        }\n        if (bucket.containsField(DateTimeFieldType.minuteOfHour())) {\n            int minute = bucket.get(DateTimeFieldType.minuteOfHour());\n            if (minute < 0 || minute > 59) {\n                throw new IllegalArgumentException(\"Invalid minute: \" + minute);\n            }\n            time = time.withMinuteOfHour(minute);\n        }\n        if (bucket.containsField(DateTimeFieldType.secondOfMinute())) {\n            int second = bucket.get(DateTimeFieldType.secondOfMinute());\n            if (second < 0 || second > 59) {\n                throw new IllegalArgumentException(\"Invalid second: \" + second);\n            }\n            time = time.withSecondOfMinute(second);\n        }\n        if (bucket.containsField(DateTimeFieldType.millisOfSecond())) {\n            int millisOfDay = time.getMillisOfDay();\n            int millis = bucket.get(DateTimeFieldType.millisOfSecond());\n            if (millis < 0 || millis > 999) {\n                throw new IllegalArgumentException(\"Invalid millisecond: \" + millis);\n            }\n            time = time.withMillisOfSecond(millis);\n            millis = time.getMillisOfDay();\n            if (millis != millisOfDay) {\n                throw new IllegalArgumentException(\"Invalid time: \" + text);\n            }\n        }\n        millis = time.toDateTimeToday(chrono).getMillis();\n    } else {\n        millis = chrono.getDateTimeMillis(year, month, day, 0);\n    }\n    \n    instant.setMillis(millis);\n    \n    if (bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        instant.setChronology(chrono.withZone(parsedZone));\n    } else if (bucket.getZone() != null) {\n        instant.setChronology(chrono.withZone(bucket.getZone()));\n    } else {\n        instant.setChronology(chrono);\n    }\n    \n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..0af800ad 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,125 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    if (bucket.getOverflow() != null || bucket.getFraction() != null) {\n+        throw new IllegalArgumentException(\"Invalid date: \" + text);\n+    }\n+    \n+    int year = defaultYear;\n+    int month = 1;\n+    int day = 1;\n+    long millis = Long.MIN_VALUE;\n+    \n+    // parse year\n+    if (bucket.containsField(DateTimeFieldType.year())) {\n+        year = bucket.get(DateTimeFieldType.year());\n+        if (year < 0) {\n+            throw new IllegalArgumentException(\"Invalid year: \" + year);\n+        } else if (year <= 100) {\n+            year = DateTimeUtils.getChronology(chrono).year().set(instantLocal, year);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+    }\n+    \n+    // parse month\n+    if (bucket.containsField(DateTimeFieldType.monthOfYear())) {\n+        month = bucket.get(DateTimeFieldType.monthOfYear());\n+        if (month < 1 || month > 12) {\n+            throw new IllegalArgumentException(\"Invalid month: \" + month);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    }\n+    \n+    // check for February 29th on non-leap years\n+    boolean isLeapYear = DateTimeUtils.isLeapYear(year);\n+    if (!isLeapYear && month == DateTimeConstants.FEBRUARY && bucket.getDayOfMonth() > 28) {\n+        throw new IllegalArgumentException(\"Invalid date: \" + text);\n+    }\n+    \n+    // parse day\n+    if (bucket.containsField(DateTimeFieldType.dayOfMonth())) {\n+        day = bucket.get(DateTimeFieldType.dayOfMonth());\n+        if (day < 1 || day > chrono.dayOfMonth().getMaximumValue(year, month)) {\n+            throw new IllegalArgumentException(\"Invalid date: \" + text);\n         }\n-        return newPos;\n     }\n+    \n+    // parse time\n+    if (bucket.containsField(DateTimeFieldType.hourOfDay()) ||\n+            bucket.containsField(DateTimeFieldType.minuteOfHour()) ||\n+            bucket.containsField(DateTimeFieldType.secondOfMinute()) ||\n+            bucket.containsField(DateTimeFieldType.millisOfSecond())) {\n+        LocalTime time = LocalTime.MIDNIGHT;\n+        if (bucket.containsField(DateTimeFieldType.hourOfDay())) {\n+            int hour = bucket.get(DateTimeFieldType.hourOfDay());\n+            if (hour < 0 || hour > 23) {\n+                throw new IllegalArgumentException(\"Invalid hour: \" + hour);\n+            }\n+            time = time.withHourOfDay(hour);\n+        }\n+        if (bucket.containsField(DateTimeFieldType.minuteOfHour())) {\n+            int minute = bucket.get(DateTimeFieldType.minuteOfHour());\n+            if (minute < 0 || minute > 59) {\n+                throw new IllegalArgumentException(\"Invalid minute: \" + minute);\n+            }\n+            time = time.withMinuteOfHour(minute);\n+        }\n+        if (bucket.containsField(DateTimeFieldType.secondOfMinute())) {\n+            int second = bucket.get(DateTimeFieldType.secondOfMinute());\n+            if (second < 0 || second > 59) {\n+                throw new IllegalArgumentException(\"Invalid second: \" + second);\n+            }\n+            time = time.withSecondOfMinute(second);\n+        }\n+        if (bucket.containsField(DateTimeFieldType.millisOfSecond())) {\n+            int millisOfDay = time.getMillisOfDay();\n+            int millis = bucket.get(DateTimeFieldType.millisOfSecond());\n+            if (millis < 0 || millis > 999) {\n+                throw new IllegalArgumentException(\"Invalid millisecond: \" + millis);\n+            }\n+            time = time.withMillisOfSecond(millis);\n+            millis = time.getMillisOfDay();\n+            if (millis != millisOfDay) {\n+                throw new IllegalArgumentException(\"Invalid time: \" + text);\n+            }\n+        }\n+        millis = time.toDateTimeToday(chrono).getMillis();\n+    } else {\n+        millis = chrono.getDateTimeMillis(year, month, day, 0);\n+    }\n+    \n+    instant.setMillis(millis);\n+    \n+    if (bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        instant.setChronology(chrono.withZone(parsedZone));\n+    } else if (bucket.getZone() != null) {\n+        instant.setChronology(chrono.withZone(bucket.getZone()));\n+    } else {\n+        instant.setChronology(chrono);\n+    }\n+    \n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}