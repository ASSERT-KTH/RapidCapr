{
    "patch": "    private boolean hasBeenSet = false;\n\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n\n        // If mean, variance or geomean have been overridden, need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        } else {\n            ((Mean) meanImpl).increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        } else {\n            ((Variance) varianceImpl).increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        } else {\n            ((GeometricMean) geoMeanImpl).increment(value);\n        }\n\n        n++;\n        hasBeenSet = false; // update indicator\n    }\n\n    /**\n     * Returns the mean of the available values.\n     *\n     * @return The mean or Double.NaN if no values have been added.\n     */\n    public double getMean() {\n        if (hasBeenSet) {\n            return mean;\n        }\n        if (n > 0) {\n            mean = meanImpl.getResult();\n            hasBeenSet = true;\n            return mean;\n        }\n        return Double.NaN;\n    }\n\n    /**\n     * Returns the variance of the available values.\n     *\n     * @return The variance, Double.NaN if no values have been added or 0.0 for a single value set.\n     */\n    public double getVariance() {\n        if (hasBeenSet) {\n            return variance;\n        }\n        if (n <= 1) {\n            return Double.NaN;\n        }\n        variance = varianceImpl.getResult();\n        hasBeenSet = true;\n        return variance;\n    }\n\n    /**\n     * Returns the standard deviation of the available values.\n     *\n     * @return The standard deviation, Double.NaN if no values have been added or 0.0 for a single value set.\n     */\n    public double getStandardDeviation() {\n        final double stdDev;\n        if (n <= 1) {\n            stdDev = Double.NaN;\n        } else {\n            stdDev = Math.sqrt(getVariance());\n        }\n        return stdDev;\n    }\n\n    /**\n     * Returns the geometric mean of the available values.\n     *\n     * @return The geometric mean or Double.NaN if no values have been added.\n     */\n    public double getGeometricMean() {\n        if (hasBeenSet) {\n            return geoMean;\n        }\n        if (n > 0) {\n            geoMean = geoMeanImpl.getResult();\n            hasBeenSet = true;\n            return geoMean;\n        }\n        return Double.NaN;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..1b6f78244 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,6 +146,8 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n+    private boolean hasBeenSet = false;\n+\n     public void addValue(double value) {\n         sumImpl.increment(value);\n         sumsqImpl.increment(value);\n@@ -153,18 +155,92 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n         maxImpl.increment(value);\n         sumLogImpl.increment(value);\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n+\n+        // If mean, variance or geomean have been overridden, need to increment these\n         if (!(meanImpl instanceof Mean)) {\n             meanImpl.increment(value);\n+        } else {\n+            ((Mean) meanImpl).increment(value);\n         }\n         if (!(varianceImpl instanceof Variance)) {\n             varianceImpl.increment(value);\n+        } else {\n+            ((Variance) varianceImpl).increment(value);\n         }\n         if (!(geoMeanImpl instanceof GeometricMean)) {\n             geoMeanImpl.increment(value);\n+        } else {\n+            ((GeometricMean) geoMeanImpl).increment(value);\n         }\n+\n         n++;\n+        hasBeenSet = false; // update indicator\n+    }\n+\n+    /**\n+     * Returns the mean of the available values.\n+     *\n+     * @return The mean or Double.NaN if no values have been added.\n+     */\n+    public double getMean() {\n+        if (hasBeenSet) {\n+            return mean;\n+        }\n+        if (n > 0) {\n+            mean = meanImpl.getResult();\n+            hasBeenSet = true;\n+            return mean;\n+        }\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * Returns the variance of the available values.\n+     *\n+     * @return The variance, Double.NaN if no values have been added or 0.0 for a single value set.\n+     */\n+    public double getVariance() {\n+        if (hasBeenSet) {\n+            return variance;\n+        }\n+        if (n <= 1) {\n+            return Double.NaN;\n+        }\n+        variance = varianceImpl.getResult();\n+        hasBeenSet = true;\n+        return variance;\n+    }\n+\n+    /**\n+     * Returns the standard deviation of the available values.\n+     *\n+     * @return The standard deviation, Double.NaN if no values have been added or 0.0 for a single value set.\n+     */\n+    public double getStandardDeviation() {\n+        final double stdDev;\n+        if (n <= 1) {\n+            stdDev = Double.NaN;\n+        } else {\n+            stdDev = Math.sqrt(getVariance());\n+        }\n+        return stdDev;\n+    }\n+\n+    /**\n+     * Returns the geometric mean of the available values.\n+     *\n+     * @return The geometric mean or Double.NaN if no values have been added.\n+     */\n+    public double getGeometricMean() {\n+        if (hasBeenSet) {\n+            return geoMean;\n+        }\n+        if (n > 0) {\n+            geoMean = geoMeanImpl.getResult();\n+            hasBeenSet = true;\n+            return geoMean;\n+        }\n+        return Double.NaN;\n     }\n \n     /**",
    "result_reason": "error: method getMean() is already defined in class SummaryStatistics",
    "test_result": "ERROR"
}