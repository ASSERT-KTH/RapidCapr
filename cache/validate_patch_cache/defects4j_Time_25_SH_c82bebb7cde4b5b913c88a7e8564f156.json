{
    "patch": "            // check if moving the instant back one millisecond hits the same offset\n            // if it does, we need to move back until we hit the next earliest transition\n            long prevLocal = previousTransition(instantLocal - offsetLocal);\n            long prevAdjusted = previousTransition(instantAdjusted);\n            if (prevLocal != prevAdjusted && offsetAdjusted == getOffset(prevAdjusted)) {\n                return offsetLocal;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bcb37786 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,13 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // check if moving the instant back one millisecond hits the same offset\n+            // if it does, we need to move back until we hit the next earliest transition\n+            long prevLocal = previousTransition(instantLocal - offsetLocal);\n+            long prevAdjusted = previousTransition(instantAdjusted);\n+            if (prevLocal != prevAdjusted && offsetAdjusted == getOffset(prevAdjusted)) {\n+                return offsetLocal;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}