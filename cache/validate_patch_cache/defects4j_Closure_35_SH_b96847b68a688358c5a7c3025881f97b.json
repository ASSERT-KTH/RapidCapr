{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType != null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.hasProperty(prop)) {\n        objType.defineInferredProperty(prop, propType, null);\n      } else if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType existingPropType = objType.getPropertyType(prop);\n        if (existingPropType.isUnknownType()) {\n          existingPropType = propType;\n        }\n        JSType inferredType =\n            existingPropType.getLeastSupertype(propType);\n        objType.defineInferredProperty(prop, inferredType, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2084241f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,23 +1118,27 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+  if (objType != null) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.hasProperty(prop)) {\n+        objType.defineInferredProperty(prop, propType, null);\n+      } else if (!objType.isPropertyTypeDeclared(prop)) {\n+        JSType existingPropType = objType.getPropertyType(prop);\n+        if (existingPropType.isUnknownType()) {\n+          existingPropType = propType;\n         }\n+        JSType inferredType =\n+            existingPropType.getLeastSupertype(propType);\n+        objType.defineInferredProperty(prop, inferredType, null);\n       }\n     }\n   }\n+}\n+    }\n+  }\n \n   /**\n    * If we access a property of a symbol, then that symbol is not",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}