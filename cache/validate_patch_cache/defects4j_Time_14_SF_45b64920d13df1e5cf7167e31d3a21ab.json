{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean isLeapYear = isLeapYear(values[0]);\n        int year = values[0];\n        int month = values[1];\n        int day = values[2];\n\n        int newMonth = (month + valueToAdd) % 12;\n        int yearDiff = (int) Math.floor((month + valueToAdd) / 12);\n\n        if (newMonth < 0) {\n            newMonth += 12;\n            yearDiff--;\n        }\n\n        // Check if new year is leap year\n        boolean isNewYearLeap = isLeapYear(year + yearDiff);\n        if (!isLeapYear && isNewYearLeap && day > 28) {\n            day = 29; // Leap year, adjust day accordingly\n        }\n\n        int newYear = year + yearDiff;\n\n        if (newMonth == 0) {\n            // Adjust year and month if newMonth is zero\n            newYear--;\n            newMonth = 12;\n        }\n\n        int maxDay = getMaxDaysInMonth(newYear, newMonth);\n        if (day > maxDay) {\n            day = maxDay; // Adjust day if necessary\n        }\n\n        int[] result = {newYear, newMonth, day};\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate int getMaxDaysInMonth(int year, int month) {\n    if (month == 2) {\n        if (isLeapYear(year)) {\n            return 29; // Leap year\n        } else {\n            return 28; // Non-leap year\n        }\n    }\n\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        return 30;\n    }\n\n    return 31;\n}\n\nprivate boolean isLeapYear(int year) {\n    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d9c7b6d1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,72 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean isLeapYear = isLeapYear(values[0]);\n+        int year = values[0];\n+        int month = values[1];\n+        int day = values[2];\n+\n+        int newMonth = (month + valueToAdd) % 12;\n+        int yearDiff = (int) Math.floor((month + valueToAdd) / 12);\n+\n+        if (newMonth < 0) {\n+            newMonth += 12;\n+            yearDiff--;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+        // Check if new year is leap year\n+        boolean isNewYearLeap = isLeapYear(year + yearDiff);\n+        if (!isLeapYear && isNewYearLeap && day > 28) {\n+            day = 29; // Leap year, adjust day accordingly\n+        }\n+\n+        int newYear = year + yearDiff;\n+\n+        if (newMonth == 0) {\n+            // Adjust year and month if newMonth is zero\n+            newYear--;\n+            newMonth = 12;\n+        }\n+\n+        int maxDay = getMaxDaysInMonth(newYear, newMonth);\n+        if (day > maxDay) {\n+            day = maxDay; // Adjust day if necessary\n+        }\n+\n+        int[] result = {newYear, newMonth, day};\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+}\n+\n+private int getMaxDaysInMonth(int year, int month) {\n+    if (month == 2) {\n+        if (isLeapYear(year)) {\n+            return 29; // Leap year\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            return 28; // Non-leap year\n         }\n     }\n \n+    if (month == 4 || month == 6 || month == 9 || month == 11) {\n+        return 30;\n+    }\n+\n+    return 31;\n+}\n+\n+private boolean isLeapYear(int year) {\n+    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 2",
    "test_result": "FAIL"
}