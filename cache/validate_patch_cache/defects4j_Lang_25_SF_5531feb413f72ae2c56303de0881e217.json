{
    "patch": "public static String unescapeJava(String input) {\n    if (input == null || input.isEmpty()) {\n        return input;\n    }\n    int len = input.length();\n    StringBuilder sb = new StringBuilder(len);\n    for (int i = 0; i < len; i++) {\n        char c = input.charAt(i);\n        if (c == '\\\\') {\n            if (++i >= len) {\n                sb.append('\\\\');\n                break;\n            }\n            c = input.charAt(i);\n            switch(c) {\n                case '\\\"': sb.append('\\\"'); break;\n                case '\\\\': sb.append('\\\\'); break;\n                case '/': sb.append('/'); break;\n                case 'b': sb.append('\\b'); break;\n                case 'f': sb.append('\\f'); break;\n                case 'n': sb.append('\\n'); break;\n                case 'r': sb.append('\\r'); break;\n                case 't': sb.append('\\t'); break;\n                case 'u':\n                    if (i+4 >= len) {\n                        sb.append(\"\\\\u\");\n                        break;\n                    }\n                    char unicodeChar = (char) Integer.parseInt(input.substring(i+1, i+5), 16);\n                    sb.append(unicodeChar);\n                    i += 4;\n                    break;\n                default:\n                    sb.append('\\\\').append(c);\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..83d62df3 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,47 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String input) {\n+    if (input == null || input.isEmpty()) {\n+        return input;\n+    }\n+    int len = input.length();\n+    StringBuilder sb = new StringBuilder(len);\n+    for (int i = 0; i < len; i++) {\n+        char c = input.charAt(i);\n+        if (c == '\\\\') {\n+            if (++i >= len) {\n+                sb.append('\\\\');\n+                break;\n+            }\n+            c = input.charAt(i);\n+            switch(c) {\n+                case '\\\"': sb.append('\\\"'); break;\n+                case '\\\\': sb.append('\\\\'); break;\n+                case '/': sb.append('/'); break;\n+                case 'b': sb.append('\\b'); break;\n+                case 'f': sb.append('\\f'); break;\n+                case 'n': sb.append('\\n'); break;\n+                case 'r': sb.append('\\r'); break;\n+                case 't': sb.append('\\t'); break;\n+                case 'u':\n+                    if (i+4 >= len) {\n+                        sb.append(\"\\\\u\");\n+                        break;\n+                    }\n+                    char unicodeChar = (char) Integer.parseInt(input.substring(i+1, i+5), 16);\n+                    sb.append(unicodeChar);\n+                    i += 4;\n+                    break;\n+                default:\n+                    sb.append('\\\\').append(c);\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}