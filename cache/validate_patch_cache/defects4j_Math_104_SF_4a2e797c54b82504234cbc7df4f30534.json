{
    "patch": "public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 1;\n    }\n\n    if (x >= a + 1) {\n        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n\n    double n = 1; // Current \"b\"; used to compute \"a1\" (see loop)\n    double an = a; // \"a\" in the loop\n    double sum = an / n;\n    double delta = sum * epsilon;\n    while (Math.abs(sum) > epsilon && n < maxIterations) {\n        an *= x / (a + n);\n        n++;\n        sum = an / n;\n        delta = sum * epsilon;\n        sum += delta; // Add correction to the next term in the series\n    }\n\n    return Math.exp(a * Math.log(x) - x - logGamma(a)) * sum;\n}\n\nprivate static double logGamma(double x) {\n    return Gamma.logGamma(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1490bf5b6 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,37 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 1;\n+    }\n+\n+    if (x >= a + 1) {\n+        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n+    }\n+\n+    double n = 1; // Current \"b\"; used to compute \"a1\" (see loop)\n+    double an = a; // \"a\" in the loop\n+    double sum = an / n;\n+    double delta = sum * epsilon;\n+    while (Math.abs(sum) > epsilon && n < maxIterations) {\n+        an *= x / (a + n);\n+        n++;\n+        sum = an / n;\n+        delta = sum * epsilon;\n+        sum += delta; // Add correction to the next term in the series\n+    }\n+\n+    return Math.exp(a * Math.log(x) - x - logGamma(a)) * sum;\n+}\n+\n+private static double logGamma(double x) {\n+    return Gamma.logGamma(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}