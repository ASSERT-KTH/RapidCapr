{
    "patch": "public void process(Node externs, Node root) {\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    NodeTraversal.traverse(compiler, root, this);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n    // reset the traversal state\n    resetTraversalState();\n  }\n\nprivate void resetTraversalState() {\n    constantAssignments.clear();\n    constantAnnotationWarnings.clear();\n    ctorTaintedProps.clear();\n    success = true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..4690c74e 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,18 +84,27 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n+public void process(Node externs, Node root) {\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n     removeDuplicateDeclarations(root);\n+    NodeTraversal.traverse(compiler, root, this);\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n+    // reset the traversal state\n+    resetTraversalState();\n   }\n \n+private void resetTraversalState() {\n+    constantAssignments.clear();\n+    constantAnnotationWarnings.clear();\n+    ctorTaintedProps.clear();\n+    success = true;\n+}\n+\n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     doStatementNormalizations(t, n, parent);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}