{
    "patch": "        if(sumXX > 0.0){\n            return sumYY - sumXY * sumXY / sumXX;\n        }else{\n            return 0.0;\n        }\n    ```\n3. ```java\n        if(Double.isNaN(sumXX) || Double.isInfinite(sumXX) || sumXX == 0.0){\n            return 0.0;\n        }else{\n            return sumYY - sumXY * sumXY / sumXX;\n        }\n    ```\nAll of these lines should fix the issue by ensuring that the value being returned is non-negative",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex dcf512b72..259c3478d 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -261,7 +261,20 @@ public class SimpleRegression implements Serializable {\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n+        if(sumXX > 0.0){\n+            return sumYY - sumXY * sumXY / sumXX;\n+        }else{\n+            return 0.0;\n+        }\n+    ```\n+3. ```java\n+        if(Double.isNaN(sumXX) || Double.isInfinite(sumXX) || sumXX == 0.0){\n+            return 0.0;\n+        }else{\n+            return sumYY - sumXY * sumXY / sumXX;\n+        }\n+    ```\n+All of these lines should fix the issue by ensuring that the value being returned is non-negative\n     }\n \n     /**",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}