{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getColumnDimension();\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    \n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] > 0.0) {\n            RealVector eigenvector = eigenvectors.getColumnVector(i);\n            double eigenvalueSqrt = FastMath.sqrt(eigenvalues[i]);\n            sqrt.setColumnVector(i, eigenvector.mapMultiply(eigenvalueSqrt));\n        }\n    }\n    \n    final RealMatrix transp = sqrt.transpose();\n    return transp.multiply(eigenvectors).scalarMultiply(0.5);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b7f6fbaa9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getColumnDimension();\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    \n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] > 0.0) {\n+            RealVector eigenvector = eigenvectors.getColumnVector(i);\n+            double eigenvalueSqrt = FastMath.sqrt(eigenvalues[i]);\n+            sqrt.setColumnVector(i, eigenvector.mapMultiply(eigenvalueSqrt));\n+        }\n     }\n+    \n+    final RealMatrix transp = sqrt.transpose();\n+    return transp.multiply(eigenvectors).scalarMultiply(0.5);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}