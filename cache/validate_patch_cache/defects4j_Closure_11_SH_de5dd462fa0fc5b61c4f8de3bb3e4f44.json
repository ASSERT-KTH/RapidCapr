{
    "patch": "import com.google.javascript.jscomp.JSError;\n\n...\n\nif (!n.isFromExterns() && parent != null && parent.isScript()) {\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        if (n.getFirstChild().getString().isEmpty()) {\n            warnings.add(JSError.make(n, ANONYMOUS_NAMED_FUNCTION_DECLARATION));\n        } else {\n            String qualifiedName = NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));\n            if (qualifiedName != null) {\n                boolean isAmbiguous = NodeUtil.isFunctionDeclaration(parent.getFirstChild(), qualifiedName);\n                if (isAmbiguous) {\n                    if (n.getJSType() != null && parent.isAssign()) {\n                        if (!n.getJSType().isFunctionType()) {\n                            // Add warning only if the new function is not a function type\n                            warnings.add(JSError.make(n, AMBIGUOUS_FUNCTION_DECLARATION, qualifiedName));\n                        }\n                        return;\n                    } else {\n                        // This handles regular function declarations (e.g. function blah() {})\n                        warnings.add(JSError.make(n, AMBIGUOUS_FUNCTION_DECLARATION, qualifiedName));\n                    }\n                }\n            }\n        }\n    } else if (NodeUtil.isVarDeclaration(n)) {\n        for (Node child : n.children()) {\n            String qualifiedName = NodeUtil.getBestLValueName(child);\n            if (qualifiedName != null && NodeUtil.isFunction(child)) {\n                boolean isAmbiguous = NodeUtil.isFunctionDeclaration(n.getFirstChild(), qualifiedName);\n                if (isAmbiguous) {\n                    warnings.add(JSError.make(child, AMBIGUOUS_FUNCTION_DECLARATION, qualifiedName));\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}