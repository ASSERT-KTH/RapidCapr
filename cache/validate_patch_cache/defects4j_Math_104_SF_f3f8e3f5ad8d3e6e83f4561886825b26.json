{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments for Gamma regularized function.\");\n    }\n\n    double sum = 0.0;\n    double term = 1.0 / a;\n\n    for (int n = 1; n <= maxIterations; n++) {\n        sum += term;\n        if (Math.abs(term / sum) < epsilon) {\n            return Math.exp(-x) * Math.pow(x, a) * sum / Gamma.gamma(a);\n        }\n        term *= x / (a + n);\n    }\n\n    throw new IllegalStateException(\"Unable to compute the Gamma regularized function within the required accuracy.\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5209f5e1f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for Gamma regularized function.\");\n+    }\n+\n+    double sum = 0.0;\n+    double term = 1.0 / a;\n+\n+    for (int n = 1; n <= maxIterations; n++) {\n+        sum += term;\n+        if (Math.abs(term / sum) < epsilon) {\n+            return Math.exp(-x) * Math.pow(x, a) * sum / Gamma.gamma(a);\n+        }\n+        term *= x / (a + n);\n+    }\n+\n+    throw new IllegalStateException(\"Unable to compute the Gamma regularized function within the required accuracy.\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}