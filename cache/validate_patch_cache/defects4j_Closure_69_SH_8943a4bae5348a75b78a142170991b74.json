{
    "patch": "      if (functionType.hasThisType() && n.getParent().isCall()) {\n        Node parent = n.getParent();\n        Node target = parent.getFirstChild();\n        if (parent.isCall() &&\n            (target.isGetElem() || target.isGetProp())) {\n          visitParameterList(t, n, functionType);\n          ensureTyped(t, n, functionType.getReturnType());\n          return;\n        } else {\n          report(t, parent, INVALID_THIS, functionType.toString());\n          // Recurse to trigger typing on any inferred arguments.\n          visitParameterList(t, n, functionType);\n          ensureTyped(t, n, functionType.getReturnType());\n          return;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..5c56c42d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.hasThisType() && n.getParent().isCall()) {\n+        Node parent = n.getParent();\n+        Node target = parent.getFirstChild();\n+        if (parent.isCall() &&\n+            (target.isGetElem() || target.isGetProp())) {\n+          visitParameterList(t, n, functionType);\n+          ensureTyped(t, n, functionType.getReturnType());\n+          return;\n+        } else {\n+          report(t, parent, INVALID_THIS, functionType.toString());\n+          // Recurse to trigger typing on any inferred arguments.\n+          visitParameterList(t, n, functionType);\n+          ensureTyped(t, n, functionType.getReturnType());\n+          return;\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}