{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double maxIterations = 1000;\n    double precision = 10e-15;\n\n    double gammaSum = 0.0;\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    double term = an;\n\n    while (Math.abs(term) > precision && n < maxIterations) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n        term = an / (a + n);\n        gammaSum += term;\n    }\n\n    if (n >= maxIterations) {\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    }\n\n    return Math.exp(-x + (a * Math.log(x)) - LogGamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b82a2c5b3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,38 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double maxIterations = 1000;\n+    double precision = 10e-15;\n+\n+    double gammaSum = 0.0;\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    double term = an;\n+\n+    while (Math.abs(term) > precision && n < maxIterations) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+        term = an / (a + n);\n+        gammaSum += term;\n+    }\n+\n+    if (n >= maxIterations) {\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    return Math.exp(-x + (a * Math.log(x)) - LogGamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}