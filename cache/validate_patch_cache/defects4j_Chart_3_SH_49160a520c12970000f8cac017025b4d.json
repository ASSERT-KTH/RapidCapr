{
    "patch": "        copy.data = new java.util.ArrayList<>();\n\n        int endIndex = Math.min(end, getItemCount() - 1);\n\n        if (endIndex >= start) {\n            for (int i = start; i <= endIndex; i++) {\n                TimeSeriesDataItem item = getDataItem(i);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n            copy.minY = Double.NaN;\n            copy.maxY = Double.NaN;\n            for (int i = 0; i < copy.getItemCount(); i++) {\n                double value = copy.getDataItem(i).getValue().doubleValue();\n                if (!Double.isNaN(value)) {\n                    if (value < copy.minY) {\n                        copy.minY = value;\n                    }\n                    if (value > copy.maxY) {\n                        copy.maxY = value;\n                    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..58a91b0 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,31 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = new java.util.ArrayList<>();\n+\n+        int endIndex = Math.min(end, getItemCount() - 1);\n+\n+        if (endIndex >= start) {\n+            for (int i = start; i <= endIndex; i++) {\n+                TimeSeriesDataItem item = getDataItem(i);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+            copy.minY = Double.NaN;\n+            copy.maxY = Double.NaN;\n+            for (int i = 0; i < copy.getItemCount(); i++) {\n+                double value = copy.getDataItem(i).getValue().doubleValue();\n+                if (!Double.isNaN(value)) {\n+                    if (value < copy.minY) {\n+                        copy.minY = value;\n+                    }\n+                    if (value > copy.maxY) {\n+                        copy.maxY = value;\n+                    }\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}