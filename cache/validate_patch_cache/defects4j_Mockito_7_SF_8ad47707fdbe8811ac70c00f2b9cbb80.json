{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type type = null;\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class<?> clazz = (Class<?>) typeVariable.getGenericDeclaration();\n        Type superType = clazz.getGenericSuperclass();\n        if (superType instanceof ParameterizedType) {\n            type = getActualTypeArgument(typeVariable, (ParameterizedType) superType);\n        } else {\n            Type[] superTypes = clazz.getGenericInterfaces();\n            for (Type each : superTypes) {\n                if (each instanceof ParameterizedType) {\n                    type = getActualTypeArgument(typeVariable, (ParameterizedType) each);\n                    if (type != null) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return type;\n}\n\nprivate Type getActualTypeArgument(TypeVariable<?> typeVariable, ParameterizedType parameterizedType) {\n    Type type = null;\n    Type[] types = parameterizedType.getActualTypeArguments();\n    TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (int i = 0; i < typeVariables.length; i++) {\n        if (typeVariables[i].equals(typeVariable)) {\n            type = types[i];\n            if (type instanceof TypeVariable) {\n                type = getActualTypeArgumentFor((TypeVariable<?>) type);\n            }\n            break;\n        }\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..35ba88389 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,44 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type type = null;\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class<?> clazz = (Class<?>) typeVariable.getGenericDeclaration();\n+        Type superType = clazz.getGenericSuperclass();\n+        if (superType instanceof ParameterizedType) {\n+            type = getActualTypeArgument(typeVariable, (ParameterizedType) superType);\n+        } else {\n+            Type[] superTypes = clazz.getGenericInterfaces();\n+            for (Type each : superTypes) {\n+                if (each instanceof ParameterizedType) {\n+                    type = getActualTypeArgument(typeVariable, (ParameterizedType) each);\n+                    if (type != null) {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return type;\n+}\n+\n+private Type getActualTypeArgument(TypeVariable<?> typeVariable, ParameterizedType parameterizedType) {\n+    Type type = null;\n+    Type[] types = parameterizedType.getActualTypeArguments();\n+    TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (int i = 0; i < typeVariables.length; i++) {\n+        if (typeVariables[i].equals(typeVariable)) {\n+            type = types[i];\n+            if (type instanceof TypeVariable) {\n+                type = getActualTypeArgumentFor((TypeVariable<?>) type);\n+            }\n+            break;\n+        }\n+    }\n+    return type;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}