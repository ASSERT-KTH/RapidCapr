{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = new RealPointValuePair[reflectedSimplex.length];\n                    for (int i = 0; i < reflectedSimplex.length - 1; i++) {\n                        simplex[i] = reflectedSimplex[i + 1];\n                    }\n                    simplex[simplex.length - 1] = reflected;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = new RealPointValuePair[contracted.length];\n                    for (int i = 0; i < contracted.length - 1; i++) {\n                        simplex[i] = contracted[i + 1];\n                    }\n                    simplex[simplex.length - 1] = contracted[0];\n\n                } else {\n                    break;\n                }\n            }\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..33049ef03 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -76,24 +76,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = new RealPointValuePair[reflectedSimplex.length];\n+                    for (int i = 0; i < reflectedSimplex.length - 1; i++) {\n+                        simplex[i] = reflectedSimplex[i + 1];\n+                    }\n+                    simplex[simplex.length - 1] = reflected;\n                 }\n \n-                return;\n-\n-            }\n+            } else {\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = new RealPointValuePair[contracted.length];\n+                    for (int i = 0; i < contracted.length - 1; i++) {\n+                        simplex[i] = contracted[i + 1];\n+                    }\n+                    simplex[simplex.length - 1] = contracted[0];\n \n-            // check convergence\n-                return;\n+                } else {\n+                    break;\n+                }\n             }\n-\n         }\n \n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}