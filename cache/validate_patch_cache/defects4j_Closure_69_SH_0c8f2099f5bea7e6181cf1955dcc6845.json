{
    "patch": " ObjectType thisType = functionType.getTypeOfThis() instanceof ObjectType\n        ? (ObjectType) functionType.getTypeOfThis() : null;\n      if (thisType != null) {\n        if (!NodeUtil.isGetOrSetKey(child, n)) {\n          report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n          ensureTyped(t, child, thisType);\n          return;\n        }\n        JSType getOrSetType = getJSType(NodeUtil.getGetOrSetImplicitArgument(child));\n        if (getOrSetType != null && !getOrSetType.isSubtypeOf(thisType)) {\n            report(t, child, THIS_TYPE_MISMATCH);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..25cec640 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ ObjectType thisType = functionType.getTypeOfThis() instanceof ObjectType\n+        ? (ObjectType) functionType.getTypeOfThis() : null;\n+      if (thisType != null) {\n+        if (!NodeUtil.isGetOrSetKey(child, n)) {\n+          report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n+          ensureTyped(t, child, thisType);\n+          return;\n+        }\n+        JSType getOrSetType = getJSType(NodeUtil.getGetOrSetImplicitArgument(child));\n+        if (getOrSetType != null && !getOrSetType.isSubtypeOf(thisType)) {\n+            report(t, child, THIS_TYPE_MISMATCH);\n+          }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}