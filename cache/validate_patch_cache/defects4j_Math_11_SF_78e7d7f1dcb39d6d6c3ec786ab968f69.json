{
    "patch": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        double coefficient = 1 / (FastMath.pow(2 * FastMath.PI, dim / 2.0) *\n            FastMath.sqrt(Math.abs(covarianceMatrixDeterminant)));\n        return coefficient * FastMath.exp(-0.5 * getMahalanobisDistance(vals));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..ef41fae83 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -180,9 +180,9 @@ public class MultivariateNormalDistribution\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+        double coefficient = 1 / (FastMath.pow(2 * FastMath.PI, dim / 2.0) *\n+            FastMath.sqrt(Math.abs(covarianceMatrixDeterminant)));\n+        return coefficient * FastMath.exp(-0.5 * getMahalanobisDistance(vals));\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}