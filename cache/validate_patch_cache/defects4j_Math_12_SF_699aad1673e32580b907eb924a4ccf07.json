{
    "patch": "import java.util.Arrays;\n\npublic class Distribution {\n    private double[] probabilities;\n\n    public Distribution(double[] probabilities) {\n        this.probabilities = probabilities;\n    }\n\n    public double[] getProbabilities() {\n        return probabilities;\n    }\n\n    public double[] cloneProbabilities() {\n        return probabilities.clone();\n    }\n\n    public void set(int i, double p) {\n        probabilities[i] = p;\n    }\n\n    public double probability(int i) {\n        return probabilities[i];\n    }\n\n    public int size() {\n        return probabilities.length;\n    }\n    \n    public static boolean isEqual(double a, double b, double threshold) {\n        return Math.abs(a - b) < threshold;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + Arrays.hashCode(probabilities);\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof Distribution)) {\n            return false;\n        }\n        Distribution other = (Distribution) obj;\n        if (!Arrays.equals(probabilities, other.probabilities)) {\n            return false;\n        }\n        return true;\n    }\n\n    public static double[] normalize(double[] probabilities) {\n        double total = 0d;\n        for (double d : probabilities) {\n            total += d;\n        }\n        if (total == 0d) {\n            return probabilities.clone(); // Easy special case\n        } else {\n            double[] output = new double[probabilities.length];\n            for (int i = 0; i < output.length; i++) {\n                output[i] = probabilities[i] / total;\n            }\n            return output;\n        }\n    }\n\n    public void normalize() {\n        probabilities = normalize(probabilities);\n    }\n\n    public Distribution clone() {\n        return new Distribution(cloneProbabilities());\n    }\n\n    public Distribution reversedClone() {\n        double[] reversed = cloneProbabilities();\n        int length = reversed.length;\n\n        for (int i = 0; i < length / 2; i++) {\n            double temp = reversed[i];\n            reversed[i] = reversed[length - 1 - i];\n            reversed[length - 1 - i] = temp;\n        }\n\n        return new Distribution(reversed);\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}