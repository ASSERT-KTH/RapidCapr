{
    "patch": "      Node curr = argList.getFirstChild();\n      while (curr != null) {\n        Node next = curr.getNext();\n        boolean isUnreferenced = true;\n        if (curr.isName()) {\n          Var var = fnScope.getVar(curr.getString());\n          isUnreferenced = !referenced.contains(var);\n        }\n        if (isUnreferenced) {\n          argList.removeChild(curr);\n          compiler.reportCodeChange();\n        }\n        curr = next;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4e9cc381 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node curr = argList.getFirstChild();\n+      while (curr != null) {\n+        Node next = curr.getNext();\n+        boolean isUnreferenced = true;\n+        if (curr.isName()) {\n+          Var var = fnScope.getVar(curr.getString());\n+          isUnreferenced = !referenced.contains(var);\n+        }\n+        if (isUnreferenced) {\n+          argList.removeChild(curr);\n+          compiler.reportCodeChange();\n+        }\n+        curr = next;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}