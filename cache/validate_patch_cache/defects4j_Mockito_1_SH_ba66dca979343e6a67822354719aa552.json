{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n\n    int argCount = rawArguments.length;\n    int matcherCount = matchers.size();\n\n    for (int i = 0; i < matcherCount; i++) {\n        Matche",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c8472595a 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+public void captureArgumentsFrom(Invocation invocation) {\n+    Object[] rawArguments = invocation.getRawArguments();\n+\n+    int argCount = rawArguments.length;\n+    int matcherCount = matchers.size();\n+\n+    for (int i = 0; i < matcherCount; i++) {\n+        Matche\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}