{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node child = n.getFirstChild();\n\n      // A single statement that can be folded needs:\n      //  - to be an expression statement or a variable statement,\n      //  - to have a single non-conditional, non-assignment, non-destructuring\n      //    expression inside it,\n      //  - and the outermost expression shouldn't be \"this\". Otherwise,\n      //    we will be changing the meaning of the code.\n\n      if (child.getType() == Token.EXPR_RESULT) {\n        Node expr = child.getFirstChild();\n        return expr != null && isFoldableExpression(expr);\n      } else if (child.getType() == Token.VAR) {\n        Node name = child.getFirstChild();\n        if (name != null && name.getFirstChild() != null) {\n          Node value = name.getFirstChild().getFirstChild();\n          return value != null && isFoldableExpression(value);\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isFoldableExpression(Node n) {\n  int type = n.getType();\n  return type == Token.NAME\n      || type == Token.THIS\n      || type == Token.NUMBER\n      || type == Token.STRING\n      || type == Token.TRUE\n      || type == Token.FALSE\n      || type == Token.NULL\n      || type == Token.OBJECTLIT\n      || type == Token.ARRAYLIT\n      || type == Token.REGEXP\n      || type == Token.GETPROP && (isFoldableExpression(n.getFirstChild())\n                                   || n.getFirstChild().getString().equals(\"goog\"))\n      || type == Token.HOOK\n          && isFoldableExpression(n.getFirstChild())\n          && isFoldableExpression(n.getLastChild())\n      || type == Token.ASSIGN && isFoldableExpression(n.getLastChild());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2f3db770 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node child = n.getFirstChild();\n+\n+      // A single statement that can be folded needs:\n+      //  - to be an expression statement or a variable statement,\n+      //  - to have a single non-conditional, non-assignment, non-destructuring\n+      //    expression inside it,\n+      //  - and the outermost expression shouldn't be \"this\". Otherwise,\n+      //    we will be changing the meaning of the code.\n+\n+      if (child.getType() == Token.EXPR_RESULT) {\n+        Node expr = child.getFirstChild();\n+        return expr != null && isFoldableExpression(expr);\n+      } else if (child.getType() == Token.VAR) {\n+        Node name = child.getFirstChild();\n+        if (name != null && name.getFirstChild() != null) {\n+          Node value = name.getFirstChild().getFirstChild();\n+          return value != null && isFoldableExpression(value);\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n+\n+private boolean isFoldableExpression(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME\n+      || type == Token.THIS\n+      || type == Token.NUMBER\n+      || type == Token.STRING\n+      || type == Token.TRUE\n+      || type == Token.FALSE\n+      || type == Token.NULL\n+      || type == Token.OBJECTLIT\n+      || type == Token.ARRAYLIT\n+      || type == Token.REGEXP\n+      || type == Token.GETPROP && (isFoldableExpression(n.getFirstChild())\n+                                   || n.getFirstChild().getString().equals(\"goog\"))\n+      || type == Token.HOOK\n+          && isFoldableExpression(n.getFirstChild())\n+          && isFoldableExpression(n.getLastChild())\n+      || type == Token.ASSIGN && isFoldableExpression(n.getLastChild());\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}