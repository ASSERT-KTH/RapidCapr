{
    "patch": "import java.util.Random;\n\npublic class Distribution {\n    private Random rand;\n    private double[] probs;\n\n    public Distribution(double[] probs) {\n        rand = new Random();\n        this.probs = probs;\n    }\n\n    public int next() {\n        double r = rand.nextDouble();\n        double sum = 0.0;\n        for (int i = 0; i < probs.length; i++) {\n            sum += probs[i];\n            if (r <= sum) {\n                return i;\n            }\n        }\n        return probs.length - 1;\n    }\n\n    public double[] simulate(int n) {\n        double[] frequencies = new double[probs.length];\n        for (int i = 0; i < n; i++) {\n            int val = next();\n            frequencies[val]++;\n        }\n        for (int i = 0; i < frequencies.length; i++) {\n            frequencies[i] /= n;\n        }\n        return frequencies;\n    }\n\n    public double klDivergence(Distribution that) {\n        double divergence = 0.0;\n        for (int i = 0; i < probs.length; i++) {\n            double p = probs[i];\n            double q = that.probs[i];\n            if (p == 0 && q == 0) {\n                divergence += 0;\n            } else if (p == 0) {\n                divergence += 0;\n            } else if (q == 0) {\n                divergence += Double.POSITIVE_INFINITY;\n            } else {\n                divergence += p * Math.log(p / q);\n            }\n        }\n        return divergence;\n    }\n\n    public double[] getProbs() {\n        return probs;\n    }\n\n    public static void main(String[] args) {\n        final int N = 10000000;\n        double[] p = {0.3, 0.2, 0.1, 0.4};\n        Distribution d1 = new Distribution(p);\n        Distribution d2 = new Distribution(p);\n        double[] f1 = d1.simulate(N);\n        double[] f2 = d2.simulate(N);\n        double klDiv = d1.klDivergence(d2);\n        double klDiv2 = d2.klDivergence(d1);\n        System.out.print(klDiv);\n        System.out.print('=');\n        System.out.println(klDiv2);\n\n        double s1 = 0;\n        double s2 = 0;\n        for (int i = 0; i < p.length; ++i) {\n            s1 += p[i];\n            s2 += f2[i];\n        }\n\n        Assert.assertEquals(s1, s2, 0.001);\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}