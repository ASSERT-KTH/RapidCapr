{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node property = parent.getLastChild();\n\n        if (parent.getParent().getType() != Token.CALL &&\n            property.getType() == Token.STRING &&\n            \"prototype\".equals(property.getString())) {\n          return false;\n        }\n      } else if (NodeUtil.isExpressionNode(parent) &&\n                 NodeUtil.isAssignmentOp(parent.getParent()) &&\n                 parent.getParent().getFirstChild().getType() == Token.GETPROP &&\n                 \"prototype\".equals(parent.getParent().getFirstChild().getLastChild().getString())) {\n        return false;\n      } else {\n        Node current = parent.getParent();\n        while (current != null) {\n          if (current.getType() == Token.CALL &&\n              current.getFirstChild().getType() == Token.GETPROP &&\n              current.getFirstChild().getLastChild().getString().equals(\"apply\") &&\n              current.getLastChild() == n) {\n            return false; // Don't traverse apply calls with this function as the last argument\n          }\n          current = current.getParent();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..05596e7e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,29 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node property = parent.getLastChild();\n+\n+        if (parent.getParent().getType() != Token.CALL &&\n+            property.getType() == Token.STRING &&\n+            \"prototype\".equals(property.getString())) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isExpressionNode(parent) &&\n+                 NodeUtil.isAssignmentOp(parent.getParent()) &&\n+                 parent.getParent().getFirstChild().getType() == Token.GETPROP &&\n+                 \"prototype\".equals(parent.getParent().getFirstChild().getLastChild().getString())) {\n+        return false;\n+      } else {\n+        Node current = parent.getParent();\n+        while (current != null) {\n+          if (current.getType() == Token.CALL &&\n+              current.getFirstChild().getType() == Token.GETPROP &&\n+              current.getFirstChild().getLastChild().getString().equals(\"apply\") &&\n+              current.getLastChild() == n) {\n+            return false; // Don't traverse apply calls with this function as the last argument\n+          }\n+          current = current.getParent();\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}