{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int initialOffset = getOffset(instantLocal);\n        long instantAdjusted = instantLocal - initialOffset;\n\n        // Get the offset at instantAdjusted (second estimate)\n        final int secondOffset = getOffset(instantAdjusted);\n\n        if (initialOffset == secondOffset) {\n            // The second estimate matches, we just return it.\n            return secondOffset;\n        }\n\n        // If the two estimates differ, we need to decide which is better.\n        // Doing this correctly is somewhat difficult. This implementation\n        // is extremely conservative. Basically, if we would normally be\n        // moving forward in time near a DST boundary, but the forward-in-time\n        // transition on or after instantLocal would\n        // immediately move us back again, then we assume the earlier\n        // transition is actually the correct one. Similarly, if we would\n        // normally be moving backward in time near a DST boundary, but the\n        // backward-in-time transition on or before instantLocal would\n        // immediately move us forward again, then we assume the earlier\n        // transition is the correct one.\n\n        // Note that we could end up accidentally using the later transition\n        // if we know that DST is ending soon, and the instant in question is\n        // in the \"gap\" in which there is no valid wall time. This corner case\n        // is tricky to handle correctly, but hopefully it won't cause any\n        // problems too often.\n\n        long nextTransition = nextTransition(instantAdjusted);\n        long nextButOneTransition = nextTransition(nextTransition);\n        if (initialOffset < secondOffset) {\n            if (nextButOneTransition > instantLocal - secondOffset) {\n                // Moving forward, hit the previous DST transition but set clock back again.\n                return initialOffset;\n            }\n            return secondOffset;\n        } else {\n            if (nextTransition <= instantLocal - secondOffset) {\n                // Moving backward, hit the next DST transition but set\n                // clock forward again.\n                return initialOffset;\n            }\n            return secondOffset;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..27a1f19c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+        final int initialOffset = getOffset(instantLocal);\n+        long instantAdjusted = instantLocal - initialOffset;\n+\n+        // Get the offset at instantAdjusted (second estimate)\n+        final int secondOffset = getOffset(instantAdjusted);\n+\n+        if (initialOffset == secondOffset) {\n+            // The second estimate matches, we just return it.\n+            return secondOffset;\n+        }\n+\n+        // If the two estimates differ, we need to decide which is better.\n+        // Doing this correctly is somewhat difficult. This implementation\n+        // is extremely conservative. Basically, if we would normally be\n+        // moving forward in time near a DST boundary, but the forward-in-time\n+        // transition on or after instantLocal would\n+        // immediately move us back again, then we assume the earlier\n+        // transition is actually the correct one. Similarly, if we would\n+        // normally be moving backward in time near a DST boundary, but the\n+        // backward-in-time transition on or before instantLocal would\n+        // immediately move us forward again, then we assume the earlier\n+        // transition is the correct one.\n+\n+        // Note that we could end up accidentally using the later transition\n+        // if we know that DST is ending soon, and the instant in question is\n+        // in the \"gap\" in which there is no valid wall time. This corner case\n+        // is tricky to handle correctly, but hopefully it won't cause any\n+        // problems too often.\n+\n+        long nextTransition = nextTransition(instantAdjusted);\n+        long nextButOneTransition = nextTransition(nextTransition);\n+        if (initialOffset < secondOffset) {\n+            if (nextButOneTransition > instantLocal - secondOffset) {\n+                // Moving forward, hit the previous DST transition but set clock back again.\n+                return initialOffset;\n+            }\n+            return secondOffset;\n+        } else {\n+            if (nextTransition <= instantLocal - secondOffset) {\n+                // Moving backward, hit the next DST transition but set\n+                // clock forward again.\n+                return initialOffset;\n             }\n+            return secondOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}