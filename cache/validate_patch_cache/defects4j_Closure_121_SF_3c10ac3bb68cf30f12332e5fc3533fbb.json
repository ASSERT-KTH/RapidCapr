{
    "patch": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  List<Reference> references = referenceInfo.references;\n  int refCount = references.size();\n  Reference declaration = references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n  staleVars.remove(v); // Clear current variable from staleVars.\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // if the variable is referenced more than once, we can only\n    // inline it if it's immutable and never defined before referenced.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, references);\n    staleVars.add(v);\n  } else if (refCount == firstRefAfterInit) {\n    // The variable likely only read once, try some more\n    // complex inlining heuristics.\n    Reference reference = references.get(firstRefAfterInit - 1);\n    if (canInline(declaration, init, reference)) {\n      inline(v, declaration, init, reference);\n      staleVars.add(v);\n    }\n  } else if (declaration != init && refCount == 2) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      // The only reference is the initialization, remove the assignment and\n      // the variable declaration.\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, references);\n      staleVars.add(v);\n    }\n  }\n\n  // If this variable was not inlined normally, check if we can\n  // inline an alias of it. (If the variable was inlined, then the\n  // reference data is out of sync. We're better off just waiting for\n  // the next pass.)\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n    boolean shouldInlineAllAliases = true;\n    for (int i = 1; i < refCount; i++) {\n      Var aliasVar = getVar(references.get(i));\n      if (isVarInlineForbidden(aliasVar) || staleVars.contains(aliasVar)) {\n        // If the aliasVar is not inlineable, or it has already been\n        // inlined during this pass, skip it.\n        continue;\n      }\n      if (aliasVar == v) {\n        // If the aliasVar is the same as the current variable, skip it.\n        continue;\n      }\n      AliasCandidate aliasCandidate = aliasCandidates.get(\n          references.get(i).getNode());\n      if (aliasCandidate != null && !staleVars.contains(\n              aliasCandidate.alias)) {\n        // We only want to inline aliasVar if its value is well-defined\n        // and assigned once in its lifetime.\n        if (!aliasCandidate.refInfo.isWellDefined() ||\n            !aliasCandidate.refInfo.isAssignedOnceInLifetime()) {\n          shouldInlineAllAliases = false;\n          break;\n        }\n      } else {\n        // If we don't have an AliasCandidate for this node, we can't inline it.\n        shouldInlineAllAliases = false;\n        break;\n      }\n    }\n    if (shouldInlineAllAliases) {\n      for (int i = 1; i < refCount; i++) {\n        Var aliasVar = getVar(references.get(i));\n        if (isVarInlineForbidden(aliasVar) || staleVars.contains(aliasVar)) {\n          // If the aliasVar is not inlineable, or it has already been\n          // inlined during this pass, skip it.\n          continue;\n        }\n        if (aliasVar == v) {\n          // If the aliasVar is the same as the current variable, skip it.\n          continue;\n        }\n        AliasCandidate aliasCandidate = aliasCandidates.get(\n            references.get(i).getNode());\n        if (aliasCandidate != null && !staleVars.contains(\n                aliasCandidate.alias)) {\n          Reference aliasInit = aliasCandidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(\n              aliasVar,\n              value,\n              aliasCandidate.refInfo.references);\n          staleVars.add(aliasVar);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..cde1f3aa 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,116 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n+private void inlineNonConstants(\n+    Var v, ReferenceCollection referenceInfo,\n+    boolean maybeModifiedArguments) {\n+  List<Reference> references = referenceInfo.references;\n+  int refCount = references.size();\n+  Reference declaration = references.get(0);\n+  Reference init = referenceInfo.getInitializingReference();\n+  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n+  staleVars.remove(v); // Clear current variable from staleVars.\n+\n+  if (refCount > 1 &&\n+      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+    // if the variable is referenced more than once, we can only\n+    // inline it if it's immutable and never defined before referenced.\n+    Node value;\n+    if (init != null) {\n+      value = init.getAssignedValue();\n+    } else {\n+      // Create a new node for variable that is never initialized.\n+      Node srcLocation = declaration.getNode();\n+      value = NodeUtil.newUndefinedNode(srcLocation);\n+    }\n+    Preconditions.checkNotNull(value);\n+    inlineWellDefinedVariable(v, value, references);\n+    staleVars.add(v);\n+  } else if (refCount == firstRefAfterInit) {\n+    // The variable likely only read once, try some more\n+    // complex inlining heuristics.\n+    Reference reference = references.get(firstRefAfterInit - 1);\n+    if (canInline(declaration, init, reference)) {\n+      inline(v, declaration, init, reference);\n+      staleVars.add(v);\n+    }\n+  } else if (declaration != init && refCount == 2) {\n+    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n+      // The only reference is the initialization, remove the assignment and\n+      // the variable declaration.\n+      Node value = init.getAssignedValue();\n+      Preconditions.checkNotNull(value);\n+      inlineWellDefinedVariable(v, value, references);\n+      staleVars.add(v);\n+    }\n+  }\n+\n+  // If this variable was not inlined normally, check if we can\n+  // inline an alias of it. (If the variable was inlined, then the\n+  // reference data is out of sync. We're better off just waiting for\n+  // the next pass.)\n+  if (!maybeModifiedArguments &&\n+      !staleVars.contains(v) &&\n+      referenceInfo.isWellDefined() &&\n+      referenceInfo.isAssignedOnceInLifetime()) {\n+    boolean shouldInlineAllAliases = true;\n+    for (int i = 1; i < refCount; i++) {\n+      Var aliasVar = getVar(references.get(i));\n+      if (isVarInlineForbidden(aliasVar) || staleVars.contains(aliasVar)) {\n+        // If the aliasVar is not inlineable, or it has already been\n+        // inlined during this pass, skip it.\n+        continue;\n+      }\n+      if (aliasVar == v) {\n+        // If the aliasVar is the same as the current variable, skip it.\n+        continue;\n+      }\n+      AliasCandidate aliasCandidate = aliasCandidates.get(\n+          references.get(i).getNode());\n+      if (aliasCandidate != null && !staleVars.contains(\n+              aliasCandidate.alias)) {\n+        // We only want to inline aliasVar if its value is well-defined\n+        // and assigned once in its lifetime.\n+        if (!aliasCandidate.refInfo.isWellDefined() ||\n+            !aliasCandidate.refInfo.isAssignedOnceInLifetime()) {\n+          shouldInlineAllAliases = false;\n+          break;\n         }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n+      } else {\n+        // If we don't have an AliasCandidate for this node, we can't inline it.\n+        shouldInlineAllAliases = false;\n+        break;\n+      }\n+    }\n+    if (shouldInlineAllAliases) {\n+      for (int i = 1; i < refCount; i++) {\n+        Var aliasVar = getVar(references.get(i));\n+        if (isVarInlineForbidden(aliasVar) || staleVars.contains(aliasVar)) {\n+          // If the aliasVar is not inlineable, or it has already been\n+          // inlined during this pass, skip it.\n+          continue;\n         }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n+        if (aliasVar == v) {\n+          // If the aliasVar is the same as the current variable, skip it.\n+          continue;\n         }\n-      }\n-\n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n+        AliasCandidate aliasCandidate = aliasCandidates.get(\n+            references.get(i).getNode());\n+        if (aliasCandidate != null && !staleVars.contains(\n+                aliasCandidate.alias)) {\n+          Reference aliasInit = aliasCandidate.refInfo.getInitializingReference();\n+          Node value = aliasInit.getAssignedValue();\n+          Preconditions.checkNotNull(value);\n+          inlineWellDefinedVariable(\n+              aliasVar,\n+              value,\n+              aliasCandidate.refInfo.references);\n+          staleVars.add(aliasVar);\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}