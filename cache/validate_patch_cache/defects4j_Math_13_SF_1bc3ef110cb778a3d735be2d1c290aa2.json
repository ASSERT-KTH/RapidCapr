{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealVector d = dec.getD();\n\n    final int size = d.getDimension();\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(size, size);\n\n    for (int i = 0; i < size; i++) {\n        final double sqrtD = Math.sqrt(d.getEntry(i));\n        final RealVector vi = v.getColumnVector(i);\n        sqrt.setColumnVector(i, vi.mapMultiply(sqrtD));\n    }\n\n    final RealMatrix sqrtT = sqrt.transpose();\n    return v.multiply(sqrtT);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e676d26c5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealVector d = dec.getD();\n+\n+    final int size = d.getDimension();\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(size, size);\n+\n+    for (int i = 0; i < size; i++) {\n+        final double sqrtD = Math.sqrt(d.getEntry(i));\n+        final RealVector vi = v.getColumnVector(i);\n+        sqrt.setColumnVector(i, vi.mapMultiply(sqrtD));\n     }\n+\n+    final RealMatrix sqrtT = sqrt.transpose();\n+    return v.multiply(sqrtT);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}