{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Keep track of resolved types and implicit prototype cycles\n  Set<BasicJSType> resolvedTypes = new HashSet<>();\n  Set<BasicJSType> cycleTypes = new HashSet<>();\n  \n  JSType resolvedType = null;\n  while (resolvedType == null) {\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    boolean cycleDetected = detectImplicitPrototypeCycle();\n\n    // If the type was resolved via registry, or if there was no cycle, return the resolved type\n    if (resolvedViaRegistry || !cycleDetected) {\n      resolvedType = this;\n    } else {\n      // Otherwise, handle the cycle by reporting the error and storing the current type\n      handleTypeCycle(t);\n      cycleTypes.add((BasicJSType)this);\n    }\n    \n    // If the current type is a resolved one or if it is stuck in a cycle, skip properties lookup\n    if (resolvedTypes.contains(resolvedType) || cycleTypes.contains(resolvedType)) {\n      break;\n    }\n    \n    // Attempt to resolve the type via properties\n    resolveViaProperties(t, enclosing);\n\n    // Check if a cycle was detected and handle it\n    cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected) {\n      handleTypeCycle(t);\n      cycleTypes.add((BasicJSType)this);\n    } else {\n      // Otherwise, the type is resolved via properties\n      resolvedType = this;\n    }\n    \n    // If the resolved type is new or it is stuck in a cycle, try the next iteration\n    if (!resolvedTypes.contains(resolvedType) && !cycleTypes.contains(resolvedType)) {\n      resolvedTypes.add((BasicJSType)resolvedType);\n    } else {\n      resolvedType = null;\n    }\n  }\n  \n  // If the current type is resolved, finish the property continuations before returning\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n  \n  // Return the referenced type if possible, or this otherwise\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..59a7ef06 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,60 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Keep track of resolved types and implicit prototype cycles\n+  Set<BasicJSType> resolvedTypes = new HashSet<>();\n+  Set<BasicJSType> cycleTypes = new HashSet<>();\n+  \n+  JSType resolvedType = null;\n+  while (resolvedType == null) {\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    boolean cycleDetected = detectImplicitPrototypeCycle();\n+\n+    // If the type was resolved via registry, or if there was no cycle, return the resolved type\n+    if (resolvedViaRegistry || !cycleDetected) {\n+      resolvedType = this;\n+    } else {\n+      // Otherwise, handle the cycle by reporting the error and storing the current type\n       handleTypeCycle(t);\n+      cycleTypes.add((BasicJSType)this);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    \n+    // If the current type is a resolved one or if it is stuck in a cycle, skip properties lookup\n+    if (resolvedTypes.contains(resolvedType) || cycleTypes.contains(resolvedType)) {\n+      break;\n     }\n-\n+    \n+    // Attempt to resolve the type via properties\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+\n+    // Check if a cycle was detected and handle it\n+    cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n+      cycleTypes.add((BasicJSType)this);\n+    } else {\n+      // Otherwise, the type is resolved via properties\n+      resolvedType = this;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    \n+    // If the resolved type is new or it is stuck in a cycle, try the next iteration\n+    if (!resolvedTypes.contains(resolvedType) && !cycleTypes.contains(resolvedType)) {\n+      resolvedTypes.add((BasicJSType)resolvedType);\n+    } else {\n+      resolvedType = null;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n+  \n+  // If the current type is resolved, finish the property continuations before returning\n+  if (isResolved()) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+  }\n+  \n+  // Return the referenced type if possible, or this otherwise\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}