{
    "patch": "public double getTypedPercent(String[] strings) {\n    int total = 0;\n    int typed = 0;\n    for (String s : strings) {\n        if (s.contains(\"{\") || s.contains(\"}\")) {\n            total++;\n            if (s.contains(\"=\")) {\n                typed++;\n            }\n        }\n    }\n    if (total == 0) {\n        return 0.0;\n    }\n    return (double) typed / total * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7e69d8c1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String[] strings) {\n+    int total = 0;\n+    int typed = 0;\n+    for (String s : strings) {\n+        if (s.contains(\"{\") || s.contains(\"}\")) {\n+            total++;\n+            if (s.contains(\"=\")) {\n+                typed++;\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 0.0;\n+    }\n+    return (double) typed / total * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}