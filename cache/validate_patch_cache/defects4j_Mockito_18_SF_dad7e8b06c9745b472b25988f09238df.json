{
    "patch": "\nimport java.util.*;\n\npublic class WordCounter {\n    \n    public static Map<String, Integer> countWords(List<String> words) {\n    \n        Map<String, Integer> wordCount = new HashMap<>();\n        \n        if (words == null || words.isEmpty()) {\n            return wordCount;\n        }\n        \n        for (String word : words) {\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n        \n        return wordCount;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e85864d0d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,26 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n+import java.util.*;\n+\n+public class WordCounter {\n+    \n+    public static Map<String, Integer> countWords(List<String> words) {\n+    \n+        Map<String, Integer> wordCount = new HashMap<>();\n+        \n+        if (words == null || words.isEmpty()) {\n+            return wordCount;\n+        }\n+        \n+        for (String word : words) {\n+            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n+        }\n+        \n+        return wordCount;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}