{
    "patch": "public static Number createNumber(String val) throws NumberFormatException {\n\tif (val == null) {\n\t\treturn null;\n\t}\n\tif (val.trim().length() == 0) {\n\t\tthrow new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n\t}\n\tif (val.startsWith(\"--\")) {\n\t\t// this is protection for poorness in java.lang.BigDecimal.\n\t\t// it accepts this as a legal value, but it does not appear\n\t\t// to be in specification of class. OS X Java parses it to\n\t\t// a wrong value.\n\t\treturn null;\n\t}\n\t// trim as it is important for HEX number parsing\n\tval = val.trim().toLowerCase(Locale.ROOT);\n\tchar lastChar = val.charAt(val.length() - 1);\n\tif (lastChar == 'f' || lastChar == 'd' || lastChar == 'l') {\n\t\tString numeric = val.substring(0, val.length() - 1);\n\t\tif (isNumber(numeric)) {\n\t\t\tswitch (lastChar) {\n\t\t\tcase 'f':\n\t\t\t\ttry {\n\t\t\t\t\treturn Float.valueOf(numeric);\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\t// ignore the bad number\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\t\ttry {\n\t\t\t\t\treturn Double.valueOf(numeric);\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\t// ignore the bad number\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\t\ttry {\n\t\t\t\t\treturn Long.valueOf(numeric);\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\t// ignore the bad number\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn createNumber(numeric);\n\t\t} else {\n\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n\t\t}\n\t}\n\tint decPos = val.indexOf('.');\n\tint expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\tif (decPos > -1 && expPos > -1) {\n\t\tif (expPos < decPos) {\n\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n\t\t}\n\t}\n\tif (decPos > -1) {\n\t\tif (val.indexOf('f') > decPos || val.indexOf('d') > decPos || val.indexOf('F') > decPos\n\t\t\t\t|| val.indexOf('D') > decPos) {\n\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n\t\t}\n\t\tString mant = val.substring(0, decPos);\n\t\tString dec = val.substring(decPos + 1);\n\t\tif (mant.length() == 0 && dec.length() == 1 && dec.charAt(0) == '0') {\n\t\t\treturn 0;\n\t\t}\n\t\treturn createDouble(val);\n\n\t} else if (expPos > -1) {\n\t\tif (val.indexOf('f') > expPos || val.indexOf('d') > expPos || val.indexOf('F') > expPos\n\t\t\t\t|| val.indexOf('D') > expPos) {\n\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n\t\t}\n\t\tString mant = val.substring(0, expPos);\n\t\tString exp = val.substring(expPos + 1);\n\t\tif (mant.length() == 0 && exp.length() == 1 && exp.charAt(0) == '0') {\n\t\t\treturn 0;\n\t\t}\n\t\treturn createDouble(val);\n\n\t} else {\n\t\tif (val.indexOf('l') > -1) {\n\t\t\tif (val.length() > 20 || !isDigits(val.substring(0, val.length() - 1))) {\n\t\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n\t\t\t}\n\t\t\treturn Long.valueOf(val);\n\n\t\t}\n\t\tif (val.indexOf('f') > -1) {\n\t\t\ttry {\n\t\t\t\treturn Float.valueOf(val);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t// ignore the bad number\n\t\t\t}\n\t\t\treturn createDouble(val);\n\n\t\t}\n\t\tif (val.indexOf('d') > -1) {\n\t\t\treturn createDouble(val);\n\t\t}\n\t\t// at this point we have no choice but to use a BigDecimal\n\t\treturn createBigDecimal(val);\n\n\t}\n}\n\nprivate static boolean isNumber(final String str) {\n\tif (StringUtils.isEmpty(str)) {\n\t\treturn false;\n\t}\n\tfinal int sz = str.length();\n\tfor (int i = 0; i < sz; i++) {\n\t\tif ((!Character.isDigit(str.charAt(i))) && (str.charAt(i) != '.') && (str.charAt(i) != '-')) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..b17d04ae 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,155 +135,123 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+public static Number createNumber(String val) throws NumberFormatException {\n+\tif (val == null) {\n+\t\treturn null;\n+\t}\n+\tif (val.trim().length() == 0) {\n+\t\tthrow new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+\t}\n+\tif (val.startsWith(\"--\")) {\n+\t\t// this is protection for poorness in java.lang.BigDecimal.\n+\t\t// it accepts this as a legal value, but it does not appear\n+\t\t// to be in specification of class. OS X Java parses it to\n+\t\t// a wrong value.\n+\t\treturn null;\n+\t}\n+\t// trim as it is important for HEX number parsing\n+\tval = val.trim().toLowerCase(Locale.ROOT);\n+\tchar lastChar = val.charAt(val.length() - 1);\n+\tif (lastChar == 'f' || lastChar == 'd' || lastChar == 'l') {\n+\t\tString numeric = val.substring(0, val.length() - 1);\n+\t\tif (isNumber(numeric)) {\n+\t\t\tswitch (lastChar) {\n+\t\t\tcase 'f':\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Float.valueOf(numeric);\n+\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t// ignore the bad number\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase 'd':\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Double.valueOf(numeric);\n+\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t// ignore the bad number\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase 'l':\n+\t\t\t\ttry {\n+\t\t\t\t\treturn Long.valueOf(numeric);\n+\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t// ignore the bad number\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\treturn createNumber(numeric);\n+\t\t} else {\n+\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n+\t\t}\n+\t}\n+\tint decPos = val.indexOf('.');\n+\tint expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+\tif (decPos > -1 && expPos > -1) {\n+\t\tif (expPos < decPos) {\n+\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n+\t\t}\n+\t}\n+\tif (decPos > -1) {\n+\t\tif (val.indexOf('f') > decPos || val.indexOf('d') > decPos || val.indexOf('F') > decPos\n+\t\t\t\t|| val.indexOf('D') > decPos) {\n+\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n+\t\t}\n+\t\tString mant = val.substring(0, decPos);\n+\t\tString dec = val.substring(decPos + 1);\n+\t\tif (mant.length() == 0 && dec.length() == 1 && dec.charAt(0) == '0') {\n+\t\t\treturn 0;\n+\t\t}\n+\t\treturn createDouble(val);\n \n-        if (decPos > -1) {\n+\t} else if (expPos > -1) {\n+\t\tif (val.indexOf('f') > expPos || val.indexOf('d') > expPos || val.indexOf('F') > expPos\n+\t\t\t\t|| val.indexOf('D') > expPos) {\n+\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n+\t\t}\n+\t\tString mant = val.substring(0, expPos);\n+\t\tString exp = val.substring(expPos + 1);\n+\t\tif (mant.length() == 0 && exp.length() == 1 && exp.charAt(0) == '0') {\n+\t\t\treturn 0;\n+\t\t}\n+\t\treturn createDouble(val);\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n-            }\n-            mant = val.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+\t} else {\n+\t\tif (val.indexOf('l') > -1) {\n+\t\t\tif (val.length() > 20 || !isDigits(val.substring(0, val.length() - 1))) {\n+\t\t\t\tthrow new NumberFormatException(val + \" is not a valid number.\");\n+\t\t\t}\n+\t\t\treturn Long.valueOf(val);\n \n-                    }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+\t\t}\n+\t\tif (val.indexOf('f') > -1) {\n+\t\t\ttry {\n+\t\t\t\treturn Float.valueOf(val);\n+\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t// ignore the bad number\n+\t\t\t}\n+\t\t\treturn createDouble(val);\n \n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n-                    }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+\t\t}\n+\t\tif (val.indexOf('d') > -1) {\n+\t\t\treturn createDouble(val);\n+\t\t}\n+\t\t// at this point we have no choice but to use a BigDecimal\n+\t\treturn createBigDecimal(val);\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                return createBigInteger(val);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-\n-                return createBigDecimal(val);\n-\n-            }\n+\t}\n+}\n \n-        }\n-    }\n+private static boolean isNumber(final String str) {\n+\tif (StringUtils.isEmpty(str)) {\n+\t\treturn false;\n+\t}\n+\tfinal int sz = str.length();\n+\tfor (int i = 0; i < sz; i++) {\n+\t\tif ((!Character.isDigit(str.charAt(i))) && (str.charAt(i) != '.') && (str.charAt(i) != '-')) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\treturn true;\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: method isNumber(String) is already defined in class NumberUtils",
    "test_result": "ERROR"
}