{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int size = m.getRowDimension();\n    if (size * size > Math.pow(2, 22)) { // limit the size of the matrix to avoid out of memory errors\n        throw new RuntimeException(\"Matrix size exceeds maximum allowed limit\");\n    }\n    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    final RealMatrix u = svd.getU();\n    final RealMatrix s = svd.getS();\n    final RealMatrix v = svd.getVT();\n    final RealMatrix sqrtS = MatrixUtils.createRealMatrix(size, size);\n    for (int i = 0; i < size; i++) {\n        sqrtS.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n    }\n    return u.multiply(sqrtS).multiply(v);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bff6d9988 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int size = m.getRowDimension();\n+    if (size * size > Math.pow(2, 22)) { // limit the size of the matrix to avoid out of memory errors\n+        throw new RuntimeException(\"Matrix size exceeds maximum allowed limit\");\n     }\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    final RealMatrix u = svd.getU();\n+    final RealMatrix s = svd.getS();\n+    final RealMatrix v = svd.getVT();\n+    final RealMatrix sqrtS = MatrixUtils.createRealMatrix(size, size);\n+    for (int i = 0; i < size; i++) {\n+        sqrtS.setEntry(i, i, Math.sqrt(s.getEntry(i, i)));\n+    }\n+    return u.multiply(sqrtS).multiply(v);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}