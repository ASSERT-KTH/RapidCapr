{
    "patch": "      // Make sure this assignment is not in a loop or condition.\n      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop || block.isConditionalBranch()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1edb75ab 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop or condition.\n+      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop || block.isConditionalBranch()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}