{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n    int rows = eigenValues.getRowDimension();\n    int cols = eigenValues.getColumnDimension();\n    RealMatrix sqrtEigenValuesMat = MatrixUtils.createRealMatrix(rows, cols);\n\n    for (int i = 0; i < rows; i++) {\n        double sqrtValue = Math.sqrt(Math.max(0.0, eigenValues.getEntry(i, i)));\n        sqrtEigenValuesMat.setEntry(i, i, sqrtValue);\n    }\n\n    RealMatrix sqrtM = eigenVectors.multiply(sqrtEigenValuesMat).multiply(eigenVectors.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d809b6d3c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+    int rows = eigenValues.getRowDimension();\n+    int cols = eigenValues.getColumnDimension();\n+    RealMatrix sqrtEigenValuesMat = MatrixUtils.createRealMatrix(rows, cols);\n+\n+    for (int i = 0; i < rows; i++) {\n+        double sqrtValue = Math.sqrt(Math.max(0.0, eigenValues.getEntry(i, i)));\n+        sqrtEigenValuesMat.setEntry(i, i, sqrtValue);\n     }\n+\n+    RealMatrix sqrtM = eigenVectors.multiply(sqrtEigenValuesMat).multiply(eigenVectors.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}