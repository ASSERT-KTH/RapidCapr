{
    "patch": "              if (finallyNode != null) {\n                // If we are in a finally block itself then control can't be\n                // transferred anywhere (the finally block transfers control to\n                // its own symbolic return node after it's done).\n                cfa.createEdge(fromNode, Branch.UNCOND,\n                    node.isFinallyBlock() ? null : finallyNode);\n              } else {\n                // Control goes up the AST if we don't find a finally node.\n                return computeFollowNode(fromNode, parent, cfa);\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..27fe6695 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (finallyNode != null) {\n+                // If we are in a finally block itself then control can't be\n+                // transferred anywhere (the finally block transfers control to\n+                // its own symbolic return node after it's done).\n+                cfa.createEdge(fromNode, Branch.UNCOND,\n+                    node.isFinallyBlock() ? null : finallyNode);\n+              } else {\n+                // Control goes up the AST if we don't find a finally node.\n+                return computeFollowNode(fromNode, parent, cfa);\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}