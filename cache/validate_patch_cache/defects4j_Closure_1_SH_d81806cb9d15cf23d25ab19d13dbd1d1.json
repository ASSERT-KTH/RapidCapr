{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      // Use Java's HashMap data structure instead of HashSet for performance reasons.\n      HashMap<Node, Integer> unusedParameters = new HashMap<>();\n\n      // Create a placeholder Node that always points to the first parameter.\n      Node param = argList.getFirstChild();\n      while (param != null) {\n        Var var = fnScope.getVar(param.getString());\n        if (!referenced.contains(var)) {\n          unusedParameters.put(param, 1);\n        }\n\n        // Move to the next argument.\n        param = param.getNext();\n      }\n\n      // Iterate from the last parameter to the first parameter and remove unused parameter.\n      int numUnusedParameters = unusedParameters.size();\n      Iterator<Node> unusedParametersIterator = unusedParameters.keySet().iterator();\n      for (int i = argList.getChildCount() - 1; i >= 0 && unusedParametersIterator.hasNext(); i--) {\n        Node currentParameter = argList.getChildAtIndex(i);\n        if (unusedParameters.containsKey(currentParameter)) {\n          argList.removeChild(currentParameter);\n          unusedParametersIterator.next();\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..94285f94 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,48 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      // Use Java's HashMap data structure instead of HashSet for performance reasons.\n+      HashMap<Node, Integer> unusedParameters = new HashMap<>();\n+\n+      // Create a placeholder Node that always points to the first parameter.\n+      Node param = argList.getFirstChild();\n+      while (param != null) {\n+        Var var = fnScope.getVar(param.getString());\n+        if (!referenced.contains(var)) {\n+          unusedParameters.put(param, 1);\n+        }\n+\n+        // Move to the next argument.\n+        param = param.getNext();\n+      }\n+\n+      // Iterate from the last parameter to the first parameter and remove unused parameter.\n+      int numUnusedParameters = unusedParameters.size();\n+      Iterator<Node> unusedParametersIterator = unusedParameters.keySet().iterator();\n+      for (int i = argList.getChildCount() - 1; i >= 0 && unusedParametersIterator.hasNext(); i--) {\n+        Node currentParameter = argList.getChildAtIndex(i);\n+        if (unusedParameters.containsKey(currentParameter)) {\n+          argList.removeChild(currentParameter);\n+          unusedParametersIterator.next();\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}