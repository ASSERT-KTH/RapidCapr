{
    "patch": "// Define your class here only\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class MyClass {\n    public static double getTypedPercent(JSONArray json) {\n        int count = 0;\n        int typedCount = 0;\n        for (int i = 0; i < json.length(); i++) {\n            JSONObject obj = json.getJSONObject(i);\n            String type = obj.getString(\"type\");\n            if (type != null && !type.isEmpty()) {\n                typedCount++;\n            }\n            count++;\n        }\n        return (double) typedCount / (double) count * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..60e90cb8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+// Define your class here only\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+public class MyClass {\n+    public static double getTypedPercent(JSONArray json) {\n+        int count = 0;\n+        int typedCount = 0;\n+        for (int i = 0; i < json.length(); i++) {\n+            JSONObject obj = json.getJSONObject(i);\n+            String type = obj.getString(\"type\");\n+            if (type != null && !type.isEmpty()) {\n+                typedCount++;\n+            }\n+            count++;\n+        }\n+        return (double) typedCount / (double) count * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}