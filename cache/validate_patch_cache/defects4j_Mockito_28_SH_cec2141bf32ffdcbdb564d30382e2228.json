{
    "patch": "            List<MockCandidateFilter.Candidate> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if(candidates.isEmpty()){\n                continue;\n            }\n            MockCandidateFilter.Candidate bestCandidate = candidates.get(0);\n            for(int i = 1; i < candidates.size(); i++){\n                MockCandidateFilter.Candidate currentCandidate = candidates.get(i);\n                if(currentCandidate.distance < bestCandidate.distance){\n                    bestCandidate = currentCandidate;\n                }\n            }\n            bestCandidate.thenInject();",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..07f33e133 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,21 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            List<MockCandidateFilter.Candidate> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if(candidates.isEmpty()){\n+                continue;\n+            }\n+            MockCandidateFilter.Candidate bestCandidate = candidates.get(0);\n+            for(int i = 1; i < candidates.size(); i++){\n+                MockCandidateFilter.Candidate currentCandidate = candidates.get(i);\n+                if(currentCandidate.distance < bestCandidate.distance){\n+                    bestCandidate = currentCandidate;\n+                }\n+            }\n+            bestCandidate.thenInject();\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}