{
    "patch": "    Node functionNode = fnScope.getRootNode();\n    Preconditions.checkState(NodeUtil.isFunctionDeclaration(functionNode) ||\n        NodeUtil.isFunctionExpression(functionNode),\n        \"Unexpected function at: \" + functionNode);\n    Node parent = functionNode.getParent();\n    Node parameterList = functionNode.getSecondChild();\n    if (NodeUtil.isGetOrSetKey(parent)) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(functionNode);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node param = parameterList.getLastChild();\n      while (param != null) {\n        Node next = param.getPrevious();\n        String paramName = param.getString();\n        if (!referenced.contains(fnScope.getVar(paramName))) {\n          compiler.reportChangeToEnclosingScope(param);\n          parameterList.removeChild(param);\n        } else if (!param.isDefaultValue() && !param.isRest()) {\n          // We can't remove default values otherwise the parameter count is\n          // affected.\n          // Similarly, we can't remove a rest parameter, becacuse then the\n          // number of arguments passed to the function matters.\n          break;\n        }\n        param = next;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, false);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8eb9a130 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node functionNode = fnScope.getRootNode();\n+    Preconditions.checkState(NodeUtil.isFunctionDeclaration(functionNode) ||\n+        NodeUtil.isFunctionExpression(functionNode),\n+        \"Unexpected function at: \" + functionNode);\n+    Node parent = functionNode.getParent();\n+    Node parameterList = functionNode.getSecondChild();\n+    if (NodeUtil.isGetOrSetKey(parent)) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(functionNode);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node param = parameterList.getLastChild();\n+      while (param != null) {\n+        Node next = param.getPrevious();\n+        String paramName = param.getString();\n+        if (!referenced.contains(fnScope.getVar(paramName))) {\n+          compiler.reportChangeToEnclosingScope(param);\n+          parameterList.removeChild(param);\n+        } else if (!param.isDefaultValue() && !param.isRest()) {\n+          // We can't remove default values otherwise the parameter count is\n+          // affected.\n+          // Similarly, we can't remove a rest parameter, becacuse then the\n+          // number of arguments passed to the function matters.\n+          break;\n+        }\n+        param = next;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, false);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}