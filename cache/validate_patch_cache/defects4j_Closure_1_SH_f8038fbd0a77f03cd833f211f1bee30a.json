{
    "patch": "      // Strip unreferenced args off the beginning of function expression\n      if (function.isFunctionExpression()) {\n        trimLeadingUnreferencedArgs(function);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n  \n  private void trimLeadingUnreferencedArgs(Node function) {\n    Preconditions.checkState(function.isFunctionExpression());\n    Node argList = getFunctionArgList(function);\n    while (argList.getFirstChild() != null) {\n      Node firstArg = argList.getFirstChild();\n      Var var = getVarFromNameNode(firstArg);\n      if (!referenced.contains(var)) {\n        argList.removeChild(firstArg);\n        compiler.reportCodeChange();\n      } else {\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7ccba8eb 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Strip unreferenced args off the beginning of function expression\n+      if (function.isFunctionExpression()) {\n+        trimLeadingUnreferencedArgs(function);\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n+  \n+  private void trimLeadingUnreferencedArgs(Node function) {\n+    Preconditions.checkState(function.isFunctionExpression());\n+    Node argList = getFunctionArgList(function);\n+    while (argList.getFirstChild() != null) {\n+      Node firstArg = argList.getFirstChild();\n+      Var var = getVarFromNameNode(firstArg);\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(firstArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}