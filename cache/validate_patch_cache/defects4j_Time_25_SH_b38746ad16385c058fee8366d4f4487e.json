{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary (spring-forward or fall-back transition)\n    long gapStart = previousTransition(instantLocal);\n    long gapEnd = nextTransition(instantLocal);\n    long gapLength = gapEnd - gapStart;\n    if ((instantLocal - gapStart < gapLength) && (gapEnd - instantLocal <= gapLength)) {\n        // we are inside the \"gap\" created by the DST transition\n        // choose the offset that was in effect before the transition\n        return offsetLocal;\n    } else {\n        // we are outside the \"gap\" - use the adjusted offset\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3445427a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary (spring-forward or fall-back transition)\n+    long gapStart = previousTransition(instantLocal);\n+    long gapEnd = nextTransition(instantLocal);\n+    long gapLength = gapEnd - gapStart;\n+    if ((instantLocal - gapStart < gapLength) && (gapEnd - instantLocal <= gapLength)) {\n+        // we are inside the \"gap\" created by the DST transition\n+        // choose the offset that was in effect before the transition\n+        return offsetLocal;\n+    } else {\n+        // we are outside the \"gap\" - use the adjusted offset\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}