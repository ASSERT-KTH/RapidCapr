{
    "patch": "if (node.getType() == Token.CALL) {\n  Node child = node.getFirstChild();\n  if (child != null && child.getType() == Token.NAME) {\n    String functionName = child.getString();\n    if (functionName != null && !functionName.isEmpty() &&\n        !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n      changed.add(functionName);\n    }\n  } else if (child != null) { // handle cases with function calls without a name\n    findCalledFunctions(child, changed);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..959ff8a1 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,18 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if (node.getType() == Token.CALL) {\n+  Node child = node.getFirstChild();\n+  if (child != null && child.getType() == Token.NAME) {\n+    String functionName = child.getString();\n+    if (functionName != null && !functionName.isEmpty() &&\n+        !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n+      changed.add(functionName);\n+    }\n+  } else if (child != null) { // handle cases with function calls without a name\n+    findCalledFunctions(child, changed);\n+  }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}