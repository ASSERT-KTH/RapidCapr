{
    "patch": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        prettyPrint = false;\n        TypeSerializer typeSerializer = new TypeSerializer(propertiesToType.values());\n        isPrinting = true;\n        List<String> properties = new ArrayList<>(propertyOrder.size());\n        for (String prop : propertyOrder) {\n            if (propertyDefs.containsKey(prop)) {\n                JSTypeExpression type = getTypeOfPropertyCommon(prop);\n                String typeString = type == null ? \"?\" : typeSerializer.serialize(type);\n                properties.add(prop + \": \" + typeString);\n            }\n        }\n        // Handle the case where we just recursed on a recursive type:\n        boolean rootPrint = top != this;\n        isPrinting = false;\n        StringBuilder sb = new StringBuilder();\n        append(sb, \"{\", properties, rootPrint);\n        sb.append(\"}\");\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}\n\nprivate static void append(StringBuilder sb, String start, List<String> properties, boolean rootPrint) {\n    boolean first = true;\n    for (int i = 0; i < properties.size(); i++) {\n        if (!first) {\n            sb.append(\", \");\n        }\n        first = false;\n        sb.append(properties.get(i));\n    }\n    if (!rootPrint) {\n        // If we're not at the root print, print up to the max number of properties\n        // and then add an ellipsis to ensure the pretty printing doesn't get too long.\n        int remainingProps = properties.size() - MAX_PRETTY_PRINTED_PROPERTIES;\n        if (remainingProps > 0) {\n            sb.append(\", ...\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..9b949b7e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,53 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        prettyPrint = false;\n+        TypeSerializer typeSerializer = new TypeSerializer(propertiesToType.values());\n+        isPrinting = true;\n+        List<String> properties = new ArrayList<>(propertyOrder.size());\n+        for (String prop : propertyOrder) {\n+            if (propertyDefs.containsKey(prop)) {\n+                JSTypeExpression type = getTypeOfPropertyCommon(prop);\n+                String typeString = type == null ? \"?\" : typeSerializer.serialize(type);\n+                properties.add(prop + \": \" + typeString);\n+            }\n         }\n+        // Handle the case where we just recursed on a recursive type:\n+        boolean rootPrint = top != this;\n+        isPrinting = false;\n+        StringBuilder sb = new StringBuilder();\n+        append(sb, \"{\", properties, rootPrint);\n+        sb.append(\"}\");\n+        prettyPrint = true;\n+        return sb.toString();\n+    } else {\n+        return \"{...}\";\n+    }\n+}\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+private static void append(StringBuilder sb, String start, List<String> properties, boolean rootPrint) {\n+    boolean first = true;\n+    for (int i = 0; i < properties.size(); i++) {\n+        if (!first) {\n+            sb.append(\", \");\n+        }\n+        first = false;\n+        sb.append(properties.get(i));\n+    }\n+    if (!rootPrint) {\n+        // If we're not at the root print, print up to the max number of properties\n+        // and then add an ellipsis to ensure the pretty printing doesn't get too long.\n+        int remainingProps = properties.size() - MAX_PRETTY_PRINTED_PROPERTIES;\n+        if (remainingProps > 0) {\n+            sb.append(\", ...\");\n         }\n-      }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}