{
    "patch": "for (Type type : typeVariable.getBounds()) {\n    if (!(type instanceof TypeVariable)) {\n        registerTypeVariablesOn(type);\n    }\n    else {\n        TypeVariable<?> typeVariable2 = (TypeVariable<?>) type;\n        Type[] bounds = typeVariable2.getBounds();\n        if (bounds.length == 0) {\n            continue;\n        }\n        else if (!(bounds[0] instanceof TypeVariable)) {\n            registerTypeVariablesOn(bounds[0]);\n        }\n        else {\n            TypeVariable<?> typeVariable3 = (TypeVariable<?>) bounds[0];\n            if (typeVariable3.getName().equals(typeVariable2.getName())) {\n                throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable3.getName());\n            } else {\n                registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable3));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7af719dbc 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+for (Type type : typeVariable.getBounds()) {\n+    if (!(type instanceof TypeVariable)) {\n+        registerTypeVariablesOn(type);\n+    }\n+    else {\n+        TypeVariable<?> typeVariable2 = (TypeVariable<?>) type;\n+        Type[] bounds = typeVariable2.getBounds();\n+        if (bounds.length == 0) {\n+            continue;\n+        }\n+        else if (!(bounds[0] instanceof TypeVariable)) {\n+            registerTypeVariablesOn(bounds[0]);\n+        }\n+        else {\n+            TypeVariable<?> typeVariable3 = (TypeVariable<?>) bounds[0];\n+            if (typeVariable3.getName().equals(typeVariable2.getName())) {\n+                throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable3.getName());\n+            } else {\n+                registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable3));\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}