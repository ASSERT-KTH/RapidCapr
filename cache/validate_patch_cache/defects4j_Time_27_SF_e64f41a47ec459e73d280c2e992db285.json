{
    "patch": "        } else if (size == 0) {\n            if (notParser) {\n                return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n            } else {\n                throw new IllegalArgumentException(\"No parser supplied\");\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            if(comp[1] == null){\n                return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n            }else{\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            }\n        } else if (notParser) {\n            if(comp[0] == null){\n                return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n            }else{\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            }\n        } else if(comp[0] == null && comp[1] == null){\n            return PeriodFormatterBuilder.emptyFormatter().toFormatter();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..04010b8e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,28 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+        } else if (size == 0) {\n+            if (notParser) {\n+                return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n+            } else {\n+                throw new IllegalArgumentException(\"No parser supplied\");\n+            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            if(comp[1] == null){\n+                return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n+            }else{\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            }\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            if(comp[0] == null){\n+                return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n+            }else{\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            }\n+        } else if(comp[0] == null && comp[1] == null){\n+            return PeriodFormatterBuilder.emptyFormatter().toFormatter();\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}