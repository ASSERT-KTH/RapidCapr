{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    Set<String> referencedArgs = new HashSet<>();\n    for (Var var : referenced) {\n      if (var.isParam()) {\n        referencedArgs.add(var.getName());\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String argName = lastArg.getString();\n        if (!referencedArgs.contains(argName)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // Strip unreferenced args off the start of the function declaration, by\n      // rewiring it as a function expression.\n      Node functionClone = function.cloneTree();\n      functionClone.setIsArrowFunction(false);\n      functionClone.setIsAsyncFunction(false);\n      Node newName = IR.name(\"\");\n      Node newTarget = IR.function(\n          newName, IR.functionSignature(), functionClone.removeChildren());\n      NodeUtil.addFeatureToScript(compiler, Feature.FUNCTION_DECLARATIONS);\n      function.getParent().replaceChild(function, newTarget);\n\n      for (Node curr = argList.getFirstChild(); curr != null; curr = curr.getNext()) {\n        if (referencedArgs.contains(curr.getString())) {\n          break;\n        } else {\n          curr.detach();\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referencedArgs);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6c28ad4c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,58 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    Set<String> referencedArgs = new HashSet<>();\n+    for (Var var : referenced) {\n+      if (var.isParam()) {\n+        referencedArgs.add(var.getName());\n+      }\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String argName = lastArg.getString();\n+        if (!referencedArgs.contains(argName)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // Strip unreferenced args off the start of the function declaration, by\n+      // rewiring it as a function expression.\n+      Node functionClone = function.cloneTree();\n+      functionClone.setIsArrowFunction(false);\n+      functionClone.setIsAsyncFunction(false);\n+      Node newName = IR.name(\"\");\n+      Node newTarget = IR.function(\n+          newName, IR.functionSignature(), functionClone.removeChildren());\n+      NodeUtil.addFeatureToScript(compiler, Feature.FUNCTION_DECLARATIONS);\n+      function.getParent().replaceChild(function, newTarget);\n+\n+      for (Node curr = argList.getFirstChild(); curr != null; curr = curr.getNext()) {\n+        if (referencedArgs.contains(curr.getString())) {\n+          break;\n+        } else {\n+          curr.detach();\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referencedArgs);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}