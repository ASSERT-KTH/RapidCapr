{
    "patch": "if (val.isEmpty() || val.startsWith(\"--\")) {\n    return null;\n}\nif (val.startsWith(\"+\") || val.startsWith(\"-\")) {\n    if (val.length() == 1) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    char secondChar = val.charAt(1);\n    if (val.startsWith(\"-0\") || val.startsWith(\"+0\")) {\n        if (val.length() == 2 || !Character.isDigit(secondChar)) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        if (val.startsWith(\"--\")) {\n            return null;\n        }\n    }\n    if (val.startsWith(\"+\")) {\n        val = val.substring(1);\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    try {\n        return createLong(val);\n    } catch (NumberFormatException nfe) {\n        // ignore the bad input\n    }\n    return createBigDecimal(val);\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..768350df 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,42 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.isEmpty() || val.startsWith(\"--\")) {\n+    return null;\n+}\n+if (val.startsWith(\"+\") || val.startsWith(\"-\")) {\n+    if (val.length() == 1) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    char secondChar = val.charAt(1);\n+    if (val.startsWith(\"-0\") || val.startsWith(\"+0\")) {\n+        if (val.length() == 2 || !Character.isDigit(secondChar)) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear \n+        // to be in specification of class. OS X Java parses it to \n+        // a wrong value.\n+        if (val.startsWith(\"--\")) {\n+            return null;\n+        }\n+    }\n+    if (val.startsWith(\"+\")) {\n+        val = val.substring(1);\n+    }\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        return createInteger(val);\n+    }\n+    try {\n+        return createLong(val);\n+    } catch (NumberFormatException nfe) {\n+        // ignore the bad input\n+    }\n+    return createBigDecimal(val);\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 8 failed expected:<-1234.5> but was:<-1234.5>",
    "test_result": "FAIL"
}