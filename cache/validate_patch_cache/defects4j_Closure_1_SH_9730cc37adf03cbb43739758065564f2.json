{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\n\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers && argList.hasChildren()) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg = argList.getLastChild();\n  int numArgsToRemove = 0;\n  while (lastArg != null) {\n    if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n      numArgsToRemove++;\n      lastArg = lastArg.getPrevious();\n    } else {\n      break;\n    }\n  }\n\n  while (numArgsToRemove > 0) {\n    Node lastArgToRemove = argList.getLastChild();\n    argList.removeChild(lastArgToRemove);\n    numArgsToRemove--;\n    compiler.reportCodeChange();\n  }\n} else if (modifyCallers) {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..dc538ff5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers && argList.hasChildren()) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg = argList.getLastChild();\n+  int numArgsToRemove = 0;\n+  while (lastArg != null) {\n+    if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+      numArgsToRemove++;\n+      lastArg = lastArg.getPrevious();\n+    } else {\n+      break;\n+    }\n+  }\n+\n+  while (numArgsToRemove > 0) {\n+    Node lastArgToRemove = argList.getLastChild();\n+    argList.removeChild(lastArgToRemove);\n+    numArgsToRemove--;\n+    compiler.reportCodeChange();\n+  }\n+} else if (modifyCallers) {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}