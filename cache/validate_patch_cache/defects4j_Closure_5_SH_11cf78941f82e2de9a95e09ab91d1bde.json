{
    "patch": "          for (Node child = val.getFirstChild(); child != null;\n               child = child.getNext()) {\n            if (child.isGetterDef() ||\n                child.isSetterDef()) {\n              // ES5 get/set not supported.\n              return false;\n            }\n\n            String propName = child.getString();\n            validProperties.add(propName);\n\n            Node childVal = child.getFirstChild();\n            if (childVal == null) {\n              continue;\n            }\n\n            // Detect self-referential property assignments\n            Set<Var> childVars = NodeUtil.getVarsDeclaredInFunction(childVal);\n            for (Var childVar : childVars) {\n              if (refs.containsAll(childVar.getReferences())\n                  && nodeContains(childVar.getNode(), parent)) {\n                return false;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..6ac61187 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,29 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          for (Node child = val.getFirstChild(); child != null;\n+               child = child.getNext()) {\n+            if (child.isGetterDef() ||\n+                child.isSetterDef()) {\n+              // ES5 get/set not supported.\n+              return false;\n+            }\n+\n+            String propName = child.getString();\n+            validProperties.add(propName);\n+\n+            Node childVal = child.getFirstChild();\n+            if (childVal == null) {\n+              continue;\n+            }\n+\n+            // Detect self-referential property assignments\n+            Set<Var> childVars = NodeUtil.getVarsDeclaredInFunction(childVal);\n+            for (Var childVar : childVars) {\n+              if (refs.containsAll(childVar.getReferences())\n+                  && nodeContains(childVar.getNode(), parent)) {\n+                return false;\n+              }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}