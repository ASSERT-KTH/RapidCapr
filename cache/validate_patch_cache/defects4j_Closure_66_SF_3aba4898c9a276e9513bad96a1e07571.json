{
    "patch": "public static double getTypedPercent(Map<String, Object> json) {\n    double totalFields = json.size();\n    double typedFields = 0;\n\n    for (Map.Entry<String, Object> entry : json.entrySet()) {\n        if (entry.getValue() instanceof Integer || entry.getValue() instanceof Double) {\n            typedFields++;\n        }\n    }\n\n    if (totalFields == 0) {\n        return 0;\n    }\n\n    return (typedFields / totalFields) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..aa621b6f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(Map<String, Object> json) {\n+    double totalFields = json.size();\n+    double typedFields = 0;\n+\n+    for (Map.Entry<String, Object> entry : json.entrySet()) {\n+        if (entry.getValue() instanceof Integer || entry.getValue() instanceof Double) {\n+            typedFields++;\n+        }\n+    }\n+\n+    if (totalFields == 0) {\n+        return 0;\n+    }\n+\n+    return (typedFields / totalFields) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}