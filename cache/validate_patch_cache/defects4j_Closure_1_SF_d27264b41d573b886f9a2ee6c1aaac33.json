{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n\n  final Node paramNode = NodeUtil.getFunctionParameters(function);\n  if (paramNode == null) {\n    return;\n  }\n\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    Node paramToAddBack = null;\n\n    for (Node param : paramNode.children()) {\n      Var var = fnScope.getVar(param.getString());\n      if (!referenced.contains(var)) {\n        if (param.getNext() != null && param.getNext().isFunction()) {\n          checkArgument(!param.hasChildren(), param);\n          // The parameter is followed by a destructuring pattern and shouldn't be removed.\n          continue;\n        }\n        param.detach();\n        compiler.reportCodeChange();\n      } else {\n        if (paramToAddBack != null) {\n          // A previous parameter was removed.\n          return;\n        }\n        paramToAddBack = param;\n      }\n    }\n    if (paramToAddBack != null) {\n      if (paramToAddBack.getNext() != null &&\n          NodeUtil.hasRestParams(paramToAddBack.getNext())) {\n        // If the last parameter is part of a rest parameter, it shouldn't be added back.\n        return;\n      }\n      // Re-add the parameter at the end. This is necessary for the function\n      // length property. Note that this could create a non-duplicated\n      // parameter name. This is invalid syntax, but it is a rare case and\n      // should be preserved.\n      Node lastParam = paramNode.getLastChild();\n      if (lastParam != null) {\n        lastParam.addAfter(paramToAddBack.cloneNode(), lastParam.getLastChild());\n      } else {\n        // Add the parameter to the function.\n        function.addChildToBack(paramToAddBack.cloneNode());\n      }\n      compiler.reportCodeChange();\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..dcb0ce63 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,64 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    return;\n+  }\n+\n+  final Node paramNode = NodeUtil.getFunctionParameters(function);\n+  if (paramNode == null) {\n+    return;\n+  }\n+\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    Node paramToAddBack = null;\n+\n+    for (Node param : paramNode.children()) {\n+      Var var = fnScope.getVar(param.getString());\n+      if (!referenced.contains(var)) {\n+        if (param.getNext() != null && param.getNext().isFunction()) {\n+          checkArgument(!param.hasChildren(), param);\n+          // The parameter is followed by a destructuring pattern and shouldn't be removed.\n+          continue;\n         }\n+        param.detach();\n+        compiler.reportCodeChange();\n+      } else {\n+        if (paramToAddBack != null) {\n+          // A previous parameter was removed.\n+          return;\n+        }\n+        paramToAddBack = param;\n+      }\n+    }\n+    if (paramToAddBack != null) {\n+      if (paramToAddBack.getNext() != null &&\n+          NodeUtil.hasRestParams(paramToAddBack.getNext())) {\n+        // If the last parameter is part of a rest parameter, it shouldn't be added back.\n+        return;\n+      }\n+      // Re-add the parameter at the end. This is necessary for the function\n+      // length property. Note that this could create a non-duplicated\n+      // parameter name. This is invalid syntax, but it is a rare case and\n+      // should be preserved.\n+      Node lastParam = paramNode.getLastChild();\n+      if (lastParam != null) {\n+        lastParam.addAfter(paramToAddBack.cloneNode(), lastParam.getLastChild());\n+      } else {\n+        // Add the parameter to the function.\n+        function.addChildToBack(paramToAddBack.cloneNode());\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      compiler.reportCodeChange();\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}