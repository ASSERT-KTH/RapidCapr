{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n        \n        // handle weekyear properly\n        DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n        DurationField weekyears = DurationFieldType.weekyears().getField(iChrono);\n        if (compareReverse(first, weekyears) >= 0) {\n            // first field is weekyear or weekOfWeekyear\n            int year = iDefaultYear;\n            int weekyear = iChrono.getWeekyear(millis);\n            int weekOfWeekyear = 0;\n            for (int i = 0; i < count; i++) {\n                SavedField field = savedFields[i];\n                DurationField durationField = field.iField.getDurationField();\n                if (compareReverse(durationField, weeks) >= 0 && compareReverse(durationField, weekyears) <= 0) {\n                    int value = field.iValue;\n                    if (compareReverse(durationField, weeks) == 0) {\n                        weekOfWeekyear = value;\n                    } else if (compareReverse(durationField, weekyears) == 0) {\n                        int gap = weekyear - year;\n                        year = value;\n                        weekyear = iChrono.setWeekyear(year, weekyear);\n                        if (iChrono.getWeekyear(millis) != weekyear) {\n                            throw new IllegalArgumentException(\"Weekyear must be set to valid value\");\n                        }\n                        // adjust computed millis to ensure no double counting of transition.\n                        millis = iChrono.getWeeksInYear(weekyear);\n                        if (gap > 0 && iChrono.weekyear().isLeap(weekyear)) {\n                            millis += DateTimeConstants.MILLIS_PER_WEEK;\n                        } else if (gap < 0 && iChrono.weekyear().isLeap(year)) {\n                            millis -= DateTimeConstants.MILLIS_PER_WEEK;\n                        }\n                    }\n                }\n            }\n            if (weekOfWeekyear > 0) {\n                millis = iChrono.setWeekOfWeekyear(millis, weekOfWeekyear);\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fe085278 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,91 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n-\n-        long millis = iMillis;\n-        try {\n+        \n+        // handle weekyear properly\n+        DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+        DurationField weekyears = DurationFieldType.weekyears().getField(iChrono);\n+        if (compareReverse(first, weekyears) >= 0) {\n+            // first field is weekyear or weekOfWeekyear\n+            int year = iDefaultYear;\n+            int weekyear = iChrono.getWeekyear(millis);\n+            int weekOfWeekyear = 0;\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+                SavedField field = savedFields[i];\n+                DurationField durationField = field.iField.getDurationField();\n+                if (compareReverse(durationField, weeks) >= 0 && compareReverse(durationField, weekyears) <= 0) {\n+                    int value = field.iValue;\n+                    if (compareReverse(durationField, weeks) == 0) {\n+                        weekOfWeekyear = value;\n+                    } else if (compareReverse(durationField, weekyears) == 0) {\n+                        int gap = weekyear - year;\n+                        year = value;\n+                        weekyear = iChrono.setWeekyear(year, weekyear);\n+                        if (iChrono.getWeekyear(millis) != weekyear) {\n+                            throw new IllegalArgumentException(\"Weekyear must be set to valid value\");\n+                        }\n+                        // adjust computed millis to ensure no double counting of transition.\n+                        millis = iChrono.getWeeksInYear(weekyear);\n+                        if (gap > 0 && iChrono.weekyear().isLeap(weekyear)) {\n+                            millis += DateTimeConstants.MILLIS_PER_WEEK;\n+                        } else if (gap < 0 && iChrono.weekyear().isLeap(year)) {\n+                            millis -= DateTimeConstants.MILLIS_PER_WEEK;\n+                        }\n+                    }\n+                }\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            if (weekOfWeekyear > 0) {\n+                millis = iChrono.setWeekOfWeekyear(millis, weekOfWeekyear);\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}