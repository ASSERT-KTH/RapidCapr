{
    "patch": "public String fixCode(String code) {\n    final String regex = \"(for\\\\s*\\\\(.*?)(\\\\s+in\\\\s+)(.*?\\\\s*\\\\))\";\n    final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);\n    final Matcher matcher = pattern.matcher(code);\n    \n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        String replacement = \"for \" + matcher.group(1) + \" ? 0 : (function(){\" +\n                \"let arr = \" + matcher.group(3) + \";\" +\n                \"for (let i = 0; i < arr.length; i++) {\" +\n                \"if (arr[i]) {\" +\n                \"return i;\" +\n                \"}\" +\n                \"}\" +\n                \"return -1;\" +\n                \"})()\";\n        matcher.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..075802a0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    final String regex = \"(for\\\\s*\\\\(.*?)(\\\\s+in\\\\s+)(.*?\\\\s*\\\\))\";\n+    final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);\n+    final Matcher matcher = pattern.matcher(code);\n+    \n+    StringBuffer sb = new StringBuffer();\n+    while (matcher.find()) {\n+        String replacement = \"for \" + matcher.group(1) + \" ? 0 : (function(){\" +\n+                \"let arr = \" + matcher.group(3) + \";\" +\n+                \"for (let i = 0; i < arr.length; i++) {\" +\n+                \"if (arr[i]) {\" +\n+                \"return i;\" +\n+                \"}\" +\n+                \"}\" +\n+                \"return -1;\" +\n+                \"})()\";\n+        matcher.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n+    }\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}