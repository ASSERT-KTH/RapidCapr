{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // Fix for leap years when adding/subtracting months\n            if (partial instanceof LocalDate.Property && ((LocalDate.Property) partial).getFieldType().getName().equals(\"MonthOfYear\")) {\n                LocalDate.Property month = (LocalDate.Property) partial;\n                LocalDate date = month.getLocalDate();\n                int year = date.getYear();\n                int monthOfYear = month.get();\n                int dayOfMonth = date.getDayOfMonth();\n                int lastDayOfMonth = date.dayOfMonth().withMaximumValue().getDayOfMonth();\n                while (Math.abs(valueToAdd) >= 12) {\n                    int change = (valueToAdd > 0 ? 1 : -1) * 12;\n                    year += change;\n                    monthOfYear = (monthOfYear + change + 12) % 12;\n                    if (monthOfYear == 0) {\n                        monthOfYear = 12;\n                    }\n                    lastDayOfMonth = Math.min(lastDayOfMonth, date.withYearMonth(dayOfMonth, monthOfYear).dayOfMonth().withMaximumValue().getDayOfMonth());\n                    valueToAdd -= change;\n                }\n                int newMonthOfYear = (monthOfYear + valueToAdd + 12) % 12;\n                if (newMonthOfYear == 0) {\n                    newMonthOfYear = 12;\n                }\n                if (dayOfMonth > lastDayOfMonth) {\n                    dayOfMonth = lastDayOfMonth;\n                }\n                instant = date.withYearMonthDay(year, newMonthOfYear, dayOfMonth).getLocalMillis();\n            } else {\n                // Use standard Joda-Time function\n                instant = add(instant, valueToAdd);\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c79266b9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+            // Fix for leap years when adding/subtracting months\n+            if (partial instanceof LocalDate.Property && ((LocalDate.Property) partial).getFieldType().getName().equals(\"MonthOfYear\")) {\n+                LocalDate.Property month = (LocalDate.Property) partial;\n+                LocalDate date = month.getLocalDate();\n+                int year = date.getYear();\n+                int monthOfYear = month.get();\n+                int dayOfMonth = date.getDayOfMonth();\n+                int lastDayOfMonth = date.dayOfMonth().withMaximumValue().getDayOfMonth();\n+                while (Math.abs(valueToAdd) >= 12) {\n+                    int change = (valueToAdd > 0 ? 1 : -1) * 12;\n+                    year += change;\n+                    monthOfYear = (monthOfYear + change + 12) % 12;\n+                    if (monthOfYear == 0) {\n+                        monthOfYear = 12;\n+                    }\n+                    lastDayOfMonth = Math.min(lastDayOfMonth, date.withYearMonth(dayOfMonth, monthOfYear).dayOfMonth().withMaximumValue().getDayOfMonth());\n+                    valueToAdd -= change;\n+                }\n+                int newMonthOfYear = (monthOfYear + valueToAdd + 12) % 12;\n+                if (newMonthOfYear == 0) {\n+                    newMonthOfYear = 12;\n+                }\n+                if (dayOfMonth > lastDayOfMonth) {\n+                    dayOfMonth = lastDayOfMonth;\n+                }\n+                instant = date.withYearMonthDay(year, newMonthOfYear, dayOfMonth).getLocalMillis();\n+            } else {\n+                // Use standard Joda-Time function\n+                instant = add(instant, valueToAdd);\n+            }\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: package LocalDate does not exist",
    "test_result": "ERROR"
}