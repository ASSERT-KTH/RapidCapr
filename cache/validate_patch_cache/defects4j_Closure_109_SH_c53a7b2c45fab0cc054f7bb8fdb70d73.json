{
    "patch": "      // if the expression is a type name\n      if (token.isType(TokenType.TYPE)) {\n        return parseTypeName(token);\n      }\n      // if the expression is a parameterized type\n      if (token.isType(TokenType.LT)) {\n        return parseParameterizedType(token);\n      }\n      // if the expression is an array type\n      if (token.isType(TokenType.LBRACKET)) {\n        return parseArrayType(token);\n      }\n      // if the expression is a record type\n      if (token.isType(TokenType.LBRACE)) {\n        return parseRecordType(token);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..c2931356 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,22 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+      // if the expression is a type name\n+      if (token.isType(TokenType.TYPE)) {\n+        return parseTypeName(token);\n+      }\n+      // if the expression is a parameterized type\n+      if (token.isType(TokenType.LT)) {\n+        return parseParameterizedType(token);\n+      }\n+      // if the expression is an array type\n+      if (token.isType(TokenType.LBRACKET)) {\n+        return parseArrayType(token);\n+      }\n+      // if the expression is a record type\n+      if (token.isType(TokenType.LBRACE)) {\n+        return parseRecordType(token);\n+      }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}