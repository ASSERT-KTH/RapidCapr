{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal + initialOffset;\n    int finalOffset = getOffset(instantAdjusted);\n    \n    // Check if we are in a gap\n    if (initialOffset > finalOffset) {\n        long nextTransition = nextTransition(instantAdjusted);\n        // If we are in a gap, then the local instant falls between two zone transitions\n        // (i.e. it is not a valid instant in this time zone)\n        if ((nextTransition - instantAdjusted) < (finalOffset - initialOffset)) {\n            return initialOffset;\n        } else {\n            return finalOffset;\n        }\n    }\n    // Check if we are in an overlap\n    else if (initialOffset < finalOffset) {\n        long previousTransition = previousTransition(instantAdjusted);\n        long nextTransition = nextTransition(instantAdjusted);\n        // If we are in an overlap, then the local instant falls inside the overlap for two offsets\n        if ((instantAdjusted - previousTransition) < (nextTransition - instantAdjusted)) {\n            return initialOffset;\n        } else {\n            return finalOffset;\n        }\n    }\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..aa8d0807 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,35 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal + initialOffset;\n+    int finalOffset = getOffset(instantAdjusted);\n+    \n+    // Check if we are in a gap\n+    if (initialOffset > finalOffset) {\n+        long nextTransition = nextTransition(instantAdjusted);\n+        // If we are in a gap, then the local instant falls between two zone transitions\n+        // (i.e. it is not a valid instant in this time zone)\n+        if ((nextTransition - instantAdjusted) < (finalOffset - initialOffset)) {\n+            return initialOffset;\n+        } else {\n+            return finalOffset;\n+        }\n+    }\n+    // Check if we are in an overlap\n+    else if (initialOffset < finalOffset) {\n+        long previousTransition = previousTransition(instantAdjusted);\n+        long nextTransition = nextTransition(instantAdjusted);\n+        // If we are in an overlap, then the local instant falls inside the overlap for two offsets\n+        if ((instantAdjusted - previousTransition) < (nextTransition - instantAdjusted)) {\n+            return initialOffset;\n+        } else {\n+            return finalOffset;\n         }\n-        return offsetAdjusted;\n     }\n+    return initialOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}