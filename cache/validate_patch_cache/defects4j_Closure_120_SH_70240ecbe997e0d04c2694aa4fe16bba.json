{
    "patch": "          if (block.getBackEdges().stream()\n              .map(DiGraphEdge::getDest)\n              .noneMatch(loopBlock -> loopBlock.maybeGetJumps().orElse(ImmutableList.of())\n                  .stream().anyMatch(jump -> jump.getDestination() == ref))) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4002c576 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (block.getBackEdges().stream()\n+              .map(DiGraphEdge::getDest)\n+              .noneMatch(loopBlock -> loopBlock.maybeGetJumps().orElse(ImmutableList.of())\n+                  .stream().anyMatch(jump -> jump.getDestination() == ref))) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}