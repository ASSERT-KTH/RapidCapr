{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n != null && isTopLevelVarDeclaration(n)) {\n      Node init = n.getFirstChild();\n      if (init != null && init.isQualifiedName()) {\n        String name = init.getQualifiedName();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          String qualifiedName = extractQualifiedName(aliasVar.getInitialValue());\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // Not an alias, remove from map.\n          // This could be a local variable that shadows an alias.\n          aliases.remove(name);\n          // Report variable declarations that are not aliases.\n          report(t, init, GOOG_SCOPE_NON_ALIAS_LOCAL, init.getString());\n        }\n      }\n    }\n  }\n}\n\nprivate boolean isTopLevelVarDeclaration(Node node) {\n  return node.getParent().isScript() && node.isVar() && !node.getBooleanProp(Node.IS_NAMESPACE));\n}\n\nprivate String extractQualifiedName(Node node) {\n  if (node.isName()) {\n    return node.getString();\n  } else if (node.isGetProp()) {\n    String ownerName = extractQualifiedName(node.getFirstChild());\n    String propName = node.getLastChild().getString();\n    if (!ownerName.isEmpty() && !propName.isEmpty()) {\n      return ownerName + \".\" + propName;\n    }\n  }\n  return \"\";\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..0f2638df 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,47 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n != null && isTopLevelVarDeclaration(n)) {\n+      Node init = n.getFirstChild();\n+      if (init != null && init.isQualifiedName()) {\n+        String name = init.getQualifiedName();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+          String qualifiedName = extractQualifiedName(aliasVar.getInitialValue());\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          // Not an alias, remove from map.\n+          // This could be a local variable that shadows an alias.\n+          aliases.remove(name);\n+          // Report variable declarations that are not aliases.\n+          report(t, init, GOOG_SCOPE_NON_ALIAS_LOCAL, init.getString());\n         }\n       }\n     }\n+  }\n+}\n+\n+private boolean isTopLevelVarDeclaration(Node node) {\n+  return node.getParent().isScript() && node.isVar() && !node.getBooleanProp(Node.IS_NAMESPACE));\n+}\n+\n+private String extractQualifiedName(Node node) {\n+  if (node.isName()) {\n+    return node.getString();\n+  } else if (node.isGetProp()) {\n+    String ownerName = extractQualifiedName(node.getFirstChild());\n+    String propName = node.getLastChild().getString();\n+    if (!ownerName.isEmpty() && !propName.isEmpty()) {\n+      return ownerName + \".\" + propName;\n+    }\n+  }\n+  return \"\";\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}