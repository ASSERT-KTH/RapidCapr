{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double eps = 1e-10;\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    final RealMatrix L = cholesky.getL();\n    final RealMatrix Lt = L.transpose();\n    RealMatrix S = identity;\n    RealMatrix tmp = identity;\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        tmp = tmp.multiply(Lt.getColumnMatrix(i));\n        for (int j = 0; j <= i; j++) {\n            double e = 0.0;\n            for (int k = 0; k < m.getRowDimension(); k++) {\n                e += tmp.getEntry(k, 0) * S.getEntry(k, j);\n            }\n            if (i == j) {\n                S.setEntry(j, j, Math.sqrt(Math.max(e, 0.0)));\n            } else if (e == 0.0) {\n                S.setEntry(j, i, 0.0);\n                S.setEntry(i, j, 0.0);\n            } else {\n                double d = Math.sqrt(Math.max(S.getEntry(j, j), 0.0));\n                double x = Math.sqrt(Math.max(e, 0.0));\n                S.setEntry(j, i, e / d);\n                S.setEntry(i, j, e / d);\n            }\n        }\n    }\n    RealMatrix sqrtM = cholesky.solve(S).multiply(cholesky.getLT());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3c96e63ce 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double eps = 1e-10;\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+    final CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    final RealMatrix L = cholesky.getL();\n+    final RealMatrix Lt = L.transpose();\n+    RealMatrix S = identity;\n+    RealMatrix tmp = identity;\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        tmp = tmp.multiply(Lt.getColumnMatrix(i));\n+        for (int j = 0; j <= i; j++) {\n+            double e = 0.0;\n+            for (int k = 0; k < m.getRowDimension(); k++) {\n+                e += tmp.getEntry(k, 0) * S.getEntry(k, j);\n+            }\n+            if (i == j) {\n+                S.setEntry(j, j, Math.sqrt(Math.max(e, 0.0)));\n+            } else if (e == 0.0) {\n+                S.setEntry(j, i, 0.0);\n+                S.setEntry(i, j, 0.0);\n+            } else {\n+                double d = Math.sqrt(Math.max(S.getEntry(j, j), 0.0));\n+                double x = Math.sqrt(Math.max(e, 0.0));\n+                S.setEntry(j, i, e / d);\n+                S.setEntry(i, j, e / d);\n+            }\n+        }\n     }\n+    RealMatrix sqrtM = cholesky.solve(S).multiply(cholesky.getLT());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}