{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n            final RealPointValuePair[] currentSimplex = simplex;\n            final RealPointValuePair best = currentSimplex[0];\n            final RealPointValuePair worst = currentSimplex[currentSimplex.length - 1];\n            final RealPointValuePair secondWorst = currentSimplex[currentSimplex.length - 2];\n            final RealPointValuePair centroid = computeCentroid(currentSimplex, currentSimplex.length - 1);\n            final RealPointValuePair reflected = evaluateNewSimplex(centroid, currentSimplex[currentSimplex.length - 1], alpha, comparator);\n            if (comparator.compare(reflected, worst) < 0) {\n                final RealPointValuePair expanded = evaluateNewSimplex(centroid, reflected, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex[currentSimplex.length - 1] = expanded;\n                } else {\n                    simplex[currentSimplex.length - 1] = reflected;\n                }\n            } else {\n                if (comparator.compare(reflected, secondWorst) < 0) {\n                    simplex[currentSimplex.length - 1] = reflected;\n                } else {\n                    final RealPointValuePair contracted = evaluateNewSimplex(centroid, worst, rho, comparator);\n                    if (comparator.compare(contracted, worst) < 0) {\n                        simplex[currentSimplex.length - 1] = contracted;\n                    } else {\n                        final RealPointValuePair[] newSimplex = new RealPointValuePair[currentSimplex.length];\n                        newSimplex[0] = best;\n                        for (int i = 0; i < currentSimplex.length - 1; ++i) {\n                            newSimplex[i + 1] = new RealPointValuePair(currentSimplex[i].getPoint(), 0.0);\n                        }\n                        simplex = newSimplex;\n                    }\n                }\n            }\n            if (iterations > maxIterations) {\n                throw new OptimizationException(\"Maximum number of iterations exceeded\");\n            }\n            final double range = worst.getValue() - best.getValue();\n            final double tolerance = relTolerance * (Math.abs(best.getValue()) + Math.abs(worst.getValue())) / 2 + absTolerance;\n            if (range <= tolerance) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7a412f841 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n         while (true) {\n-\n             incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            final RealPointValuePair[] currentSimplex = simplex;\n+            final RealPointValuePair best = currentSimplex[0];\n+            final RealPointValuePair worst = currentSimplex[currentSimplex.length - 1];\n+            final RealPointValuePair secondWorst = currentSimplex[currentSimplex.length - 2];\n+            final RealPointValuePair centroid = computeCentroid(currentSimplex, currentSimplex.length - 1);\n+            final RealPointValuePair reflected = evaluateNewSimplex(centroid, currentSimplex[currentSimplex.length - 1], alpha, comparator);\n+            if (comparator.compare(reflected, worst) < 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(centroid, reflected, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex[currentSimplex.length - 1] = expanded;\n+                } else {\n+                    simplex[currentSimplex.length - 1] = reflected;\n+                }\n+            } else {\n+                if (comparator.compare(reflected, secondWorst) < 0) {\n+                    simplex[currentSimplex.length - 1] = reflected;\n+                } else {\n+                    final RealPointValuePair contracted = evaluateNewSimplex(centroid, worst, rho, comparator);\n+                    if (comparator.compare(contracted, worst) < 0) {\n+                        simplex[currentSimplex.length - 1] = contracted;\n+                    } else {\n+                        final RealPointValuePair[] newSimplex = new RealPointValuePair[currentSimplex.length];\n+                        newSimplex[0] = best;\n+                        for (int i = 0; i < currentSimplex.length - 1; ++i) {\n+                            newSimplex[i + 1] = new RealPointValuePair(currentSimplex[i].getPoint(), 0.0);\n+                        }\n+                        simplex = newSimplex;\n+                    }\n                 }\n-\n-                return;\n-\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            if (iterations > maxIterations) {\n+                throw new OptimizationException(\"Maximum number of iterations exceeded\");\n             }\n-\n-        }\n-\n-    }\n+            final double range = worst.getValue() - best.getValue();\n+            final double tolerance = relTolerance * (Math.abs(best.getValue()) + Math.abs(worst.getValue())) / 2 + absTolerance;\n+            if (range <= tolerance) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}