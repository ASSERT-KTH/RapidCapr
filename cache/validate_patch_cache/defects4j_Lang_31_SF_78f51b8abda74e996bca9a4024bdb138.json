{
    "patch": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n\n    int strLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = strLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < strLength; i++) {\n        char ch = cs.charAt(i);\n        if (isHighSurrogate(ch) && i < csLast) {\n            char ch2 = cs.charAt(i + 1);\n            if (isLowSurrogate(ch2)) {\n                ch = toSupplementary(ch, ch2);\n                i++;\n            }\n        }\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (isSupplementary(ch)) {\n                    return true;\n                } else {\n                    /*\n                     * ch is in the Basic Multilingual Plane.\n                     * Need to check for an adjacent surrogate character (if there is one)\n                     * to ensure we do not return a false positive.\n                     */\n                    if (j == searchLast) {\n                        return true;\n                    } else if (i < csLast) {\n                        char next = cs.charAt(i + 1);\n                        if (isLowSurrogate(next) && searchChars[j + 1] == next) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean isHighSurrogate(char ch) {\n    return ch >= MIN_HIGH_SURROGATE && ch <= MAX_HIGH_SURROGATE;\n}\n\nprivate static boolean isLowSurrogate(char ch) {\n    return ch >= MIN_LOW_SURROGATE && ch <= MAX_LOW_SURROGATE;\n}\n\nprivate static boolean isSupplementary(char ch) {\n    return ch >= MIN_SUPPLEMENTARY_CODE_POINT;\n}\n\nprivate static char toSupplementary(char high, char low) {\n    return (char) ((high << 10) + low - SURROGATE_OFFSET);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..84ab3c94 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,64 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence cs, char[] searchChars) {\n+    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+\n+    int strLength = cs.length();\n+    int searchLength = searchChars.length;\n+    int csLast = strLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = cs.charAt(i);\n+        if (isHighSurrogate(ch) && i < csLast) {\n+            char ch2 = cs.charAt(i + 1);\n+            if (isLowSurrogate(ch2)) {\n+                ch = toSupplementary(ch, ch2);\n+                i++;\n+            }\n+        }\n+        for (int j = 0; j < searchLength; j++) {\n+            if (searchChars[j] == ch) {\n+                if (isSupplementary(ch)) {\n+                    return true;\n+                } else {\n+                    /*\n+                     * ch is in the Basic Multilingual Plane.\n+                     * Need to check for an adjacent surrogate character (if there is one)\n+                     * to ensure we do not return a false positive.\n+                     */\n+                    if (j == searchLast) {\n+                        return true;\n+                    } else if (i < csLast) {\n+                        char next = cs.charAt(i + 1);\n+                        if (isLowSurrogate(next) && searchChars[j + 1] == next) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isHighSurrogate(char ch) {\n+    return ch >= MIN_HIGH_SURROGATE && ch <= MAX_HIGH_SURROGATE;\n+}\n+\n+private static boolean isLowSurrogate(char ch) {\n+    return ch >= MIN_LOW_SURROGATE && ch <= MAX_LOW_SURROGATE;\n+}\n+\n+private static boolean isSupplementary(char ch) {\n+    return ch >= MIN_SUPPLEMENTARY_CODE_POINT;\n+}\n+\n+private static char toSupplementary(char high, char low) {\n+    return (char) ((high << 10) + low - SURROGATE_OFFSET);\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}