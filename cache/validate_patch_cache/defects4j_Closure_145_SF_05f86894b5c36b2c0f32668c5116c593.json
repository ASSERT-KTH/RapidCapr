{
    "patch": "    if (n.getType() == Token.LABEL) {\n      Node child = n.getFirstChild();\n      if (child.getType() == Token.BLOCK) {\n        if (child.hasChildren() && child.getLastChild().getNext() == null) {\n          return isOneExactlyFunctionOrDo(child.getFirstChild());\n        }\n        return false;\n      } else {\n        return isOneExactlyFunctionOrDo(child);\n      }\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..c28133bc 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,18 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+    if (n.getType() == Token.LABEL) {\n+      Node child = n.getFirstChild();\n+      if (child.getType() == Token.BLOCK) {\n+        if (child.hasChildren() && child.getLastChild().getNext() == null) {\n+          return isOneExactlyFunctionOrDo(child.getFirstChild());\n+        }\n+        return false;\n+      } else {\n+        return isOneExactlyFunctionOrDo(child);\n+      }\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}