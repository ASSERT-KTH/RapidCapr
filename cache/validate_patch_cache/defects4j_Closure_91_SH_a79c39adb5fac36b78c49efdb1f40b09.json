{
    "patch": "      if (parent.getType() == Token.ASSIGN &&\n          NodeUtil.isGet(parent.getFirstChild()) &&\n          isPrototypeProperty(parent.getFirstChild())) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (isPrototypeProperty(lhs)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /** Returns whether the node is a prototype property or a subproperty of one. */\n  private boolean isPrototypeProperty(Node node) {\n    Node name = node.getLastChild();\n    if (name.getType() != Token.STRING || !\"prototype\".equals(name.getString())) {\n      return false;\n    }\n    node = node.getFirstChild();\n    while (node != null) {\n      if (node.getType() == Token.STRING || node.getType() == Token.NUMBER) {\n        return true;\n      }\n      if (node.getType() == Token.GETPROP) {\n        node = node.getFirstChild();\n      } else {\n        return false;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..af93fdff 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,56 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN &&\n+          NodeUtil.isGet(parent.getFirstChild()) &&\n+          isPrototypeProperty(parent.getFirstChild())) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (isPrototypeProperty(lhs)) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /** Returns whether the node is a prototype property or a subproperty of one. */\n+  private boolean isPrototypeProperty(Node node) {\n+    Node name = node.getLastChild();\n+    if (name.getType() != Token.STRING || !\"prototype\".equals(name.getString())) {\n+      return false;\n+    }\n+    node = node.getFirstChild();\n+    while (node != null) {\n+      if (node.getType() == Token.STRING || node.getType() == Token.NUMBER) {\n+        return true;\n+      }\n+      if (node.getType() == Token.GETPROP) {\n+        node = node.getFirstChild();\n+      } else {\n+        return false;\n+      }\n+    }\n+    return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}