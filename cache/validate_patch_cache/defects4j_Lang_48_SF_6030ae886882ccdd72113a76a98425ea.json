{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n\n    // Check object references first:\n    if (lhs == rhs) {\n        return this;\n    }\n\n    // Check for nullity:\n    if (lhs == null || rhs == null) {\n        setEquals(false);\n        return this;\n    }\n\n    Class<?> lhsClass = lhs.getClass();\n    Class<?> rhsClass = rhs.getClass();\n\n    // Check if values have the same runtime type:\n    if (lhsClass != rhsClass) {\n        setEquals(false);\n        return this;\n    }\n\n    // Check value types:\n    if (!lhsClass.isArray()) {\n        // The simple case, not an array, just test the element\n        setEquals(lhs.equals(rhs));\n    } else if (lhs instanceof Object[] && rhs instanceof Object[]) {\n        append((Object[]) lhs, (Object[]) rhs);\n    } else if (lhs instanceof byte[] && rhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else if (lhs instanceof short[] && rhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[] && rhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof int[] && rhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof long[] && rhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof float[] && rhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof double[] && rhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else {\n        // Unsupported array type combination\n        setEquals(false);\n    }\n\n    return this;\n\n}\n\nprivate void append(Object[] lhs, Object[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    for (int i = 0; i < lhs.length; i++) {\n        append(lhs[i], rhs[i]);\n        if (!isEquals) {\n            break;\n        }\n    }\n}\n\nprivate void append(byte[] lhs, byte[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(boolean[] lhs, boolean[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(short[] lhs, short[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(char[] lhs, char[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(int[] lhs, int[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(long[] lhs, long[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(float[] lhs, float[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}\n\nprivate void append(double[] lhs, double[] rhs) {\n    if (lhs.length != rhs.length) {\n        setEquals(false);\n        return;\n    }\n    setEquals(Arrays.equals(lhs, rhs));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..26c188b3 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,50 +364,136 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n-        }\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+\n+    // Check object references first:\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+\n+    // Check for nullity:\n+    if (lhs == null || rhs == null) {\n+        setEquals(false);\n+        return this;\n+    }\n+\n+    Class<?> lhsClass = lhs.getClass();\n+    Class<?> rhsClass = rhs.getClass();\n+\n+    // Check if values have the same runtime type:\n+    if (lhsClass != rhsClass) {\n+        setEquals(false);\n         return this;\n     }\n \n+    // Check value types:\n+    if (!lhsClass.isArray()) {\n+        // The simple case, not an array, just test the element\n+        setEquals(lhs.equals(rhs));\n+    } else if (lhs instanceof Object[] && rhs instanceof Object[]) {\n+        append((Object[]) lhs, (Object[]) rhs);\n+    } else if (lhs instanceof byte[] && rhs instanceof byte[]) {\n+        append((byte[]) lhs, (byte[]) rhs);\n+    } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {\n+        append((boolean[]) lhs, (boolean[]) rhs);\n+    } else if (lhs instanceof short[] && rhs instanceof short[]) {\n+        append((short[]) lhs, (short[]) rhs);\n+    } else if (lhs instanceof char[] && rhs instanceof char[]) {\n+        append((char[]) lhs, (char[]) rhs);\n+    } else if (lhs instanceof int[] && rhs instanceof int[]) {\n+        append((int[]) lhs, (int[]) rhs);\n+    } else if (lhs instanceof long[] && rhs instanceof long[]) {\n+        append((long[]) lhs, (long[]) rhs);\n+    } else if (lhs instanceof float[] && rhs instanceof float[]) {\n+        append((float[]) lhs, (float[]) rhs);\n+    } else if (lhs instanceof double[] && rhs instanceof double[]) {\n+        append((double[]) lhs, (double[]) rhs);\n+    } else {\n+        // Unsupported array type combination\n+        setEquals(false);\n+    }\n+\n+    return this;\n+\n+}\n+\n+private void append(Object[] lhs, Object[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    for (int i = 0; i < lhs.length; i++) {\n+        append(lhs[i], rhs[i]);\n+        if (!isEquals) {\n+            break;\n+        }\n+    }\n+}\n+\n+private void append(byte[] lhs, byte[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(boolean[] lhs, boolean[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(short[] lhs, short[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(char[] lhs, char[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(int[] lhs, int[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(long[] lhs, long[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(float[] lhs, float[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n+private void append(double[] lhs, double[] rhs) {\n+    if (lhs.length != rhs.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    setEquals(Arrays.equals(lhs, rhs));\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}