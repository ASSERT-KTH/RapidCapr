{
    "patch": "      if (parent != null && NodeUtil.isGet(parent)) {\n        // Don't traverse functions that are getting lent to a prototype.\n        if (isPrototypeProperty(parent)) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (isPrototypeProperty(lhs)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n  \n  /**\n   * Returns whether the given node is accessing a prototype property or subproperty.\n   */\n  private boolean isPrototypeProperty(Node n) {\n    if (n.getType() == Token.GETPROP) {\n      Node lastChild = n.getLastChild();\n      if (lastChild.getType() == Token.STRING &&\n          lastChild.getString().equals(\"prototype\")) {\n        return true;\n      }\n      return isPrototypeProperty(n.getFirstChild());\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..81bee07a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,52 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isGet(parent)) {\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (isPrototypeProperty(parent)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (isPrototypeProperty(lhs)) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+  \n+  /**\n+   * Returns whether the given node is accessing a prototype property or subproperty.\n+   */\n+  private boolean isPrototypeProperty(Node n) {\n+    if (n.getType() == Token.GETPROP) {\n+      Node lastChild = n.getLastChild();\n+      if (lastChild.getType() == Token.STRING &&\n+          lastChild.getString().equals(\"prototype\")) {\n+        return true;\n+      }\n+      return isPrototypeProperty(n.getFirstChild());\n+    }\n+    return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}