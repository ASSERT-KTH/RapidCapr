{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix eigenvalues = dec.getD();\n\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        double root = Math.sqrt(eigenvalues.getEntry(i, i));\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            sqrt.setEntry(i, j, eigenvectors.getEntry(i, j) * root);\n        }\n    }\n    return sqrt.multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d0e4acc5d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix eigenvalues = dec.getD();\n+\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        double root = Math.sqrt(eigenvalues.getEntry(i, i));\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            sqrt.setEntry(i, j, eigenvectors.getEntry(i, j) * root);\n+        }\n     }\n+    return sqrt.multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}