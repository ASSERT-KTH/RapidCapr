{
    "patch": "          && assign.getParent() != null \n          && assign.getParent().getType() == Token.EXPR_RESULT \n          && assign.getNext() == null\n          && n != null \n          && n.getType() == Token.GETPROP \n          && n.getFirstChild() != null \n          && n.getFirstChild().getType() == Token.GETPROP \n          && n.getFirstChild().getFirstChild() != null \n          && n.getFirstChild().getFirstChild().getNext() != null \n          && n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING \n          && n.getFirstChild().getFirstChild().getNext().getString() != null \n          && n.getFirstChild().getFirstChild().getNext().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..349e510e 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,18 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && assign.getParent() != null \n+          && assign.getParent().getType() == Token.EXPR_RESULT \n+          && assign.getNext() == null\n+          && n != null \n+          && n.getType() == Token.GETPROP \n+          && n.getFirstChild() != null \n+          && n.getFirstChild().getType() == Token.GETPROP \n+          && n.getFirstChild().getFirstChild() != null \n+          && n.getFirstChild().getFirstChild().getNext() != null \n+          && n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING \n+          && n.getFirstChild().getFirstChild().getNext().getString() != null \n+          && n.getFirstChild().getFirstChild().getNext().getString().equals(\"prototype\")) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}