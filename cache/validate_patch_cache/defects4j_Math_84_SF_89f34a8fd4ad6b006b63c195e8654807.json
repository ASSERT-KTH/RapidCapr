{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            final RealPointValuePair[] expanded = new RealPointValuePair[n + 1];\n            final RealPointValuePair highest = original[n];\n            for (int i = 0; i < n + 1; i++) {\n                final double[] point = new double[n];\n                for (int k = 0; k < point.length; ++k) {\n                    point[k] = gamma * highest.getPointRef()[k] + (1 - gamma) * original[i].getPointRef()[k];\n                }\n                expanded[i] = new RealPointValuePair(point, Double.NaN, false);\n            }\n            final RealPointValuePair potentialNewBest = evaluateNewSimplex(expanded, 1.0, comparator);\n            if (comparator.compare(potentialNewBest, best) < 0) {\n                System.arraycopy(expanded, 0, simplex, 0, n + 1);\n                simplex[n] = potentialNewBest;\n            } else {\n                System.arraycopy(expanded, 0, simplex, 0, n + 1);\n                simplex[n] = reflected;\n            }\n        } else {\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                System.arraycopy(original, 0, simplex, 0, n + 1);\n                simplex[n] = contracted;\n            } else {\n                for (int i = 1; i < n + 1; i++) {\n                    simplex[i] = new RealPointValuePair(\n                            add(original[0].getPointRef(),\n                                    subtract(simplex[i].getPointRef(), original[0].getPointRef()),\n                                    sigma),\n                            Double.NaN, false);\n                }\n            }\n        }\n        if (isConverged(simplex, comparator)) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e08f07a37 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,51 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    while (true) {\n+        incrementIterationsCounter();\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair[] expanded = new RealPointValuePair[n + 1];\n+            final RealPointValuePair highest = original[n];\n+            for (int i = 0; i < n + 1; i++) {\n+                final double[] point = new double[n];\n+                for (int k = 0; k < point.length; ++k) {\n+                    point[k] = gamma * highest.getPointRef()[k] + (1 - gamma) * original[i].getPointRef()[k];\n                 }\n-\n-                return;\n-\n+                expanded[i] = new RealPointValuePair(point, Double.NaN, false);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair potentialNewBest = evaluateNewSimplex(expanded, 1.0, comparator);\n+            if (comparator.compare(potentialNewBest, best) < 0) {\n+                System.arraycopy(expanded, 0, simplex, 0, n + 1);\n+                simplex[n] = potentialNewBest;\n+            } else {\n+                System.arraycopy(expanded, 0, simplex, 0, n + 1);\n+                simplex[n] = reflected;\n+            }\n+        } else {\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                System.arraycopy(original, 0, simplex, 0, n + 1);\n+                simplex[n] = contracted;\n+            } else {\n+                for (int i = 1; i < n + 1; i++) {\n+                    simplex[i] = new RealPointValuePair(\n+                            add(original[0].getPointRef(),\n+                                    subtract(simplex[i].getPointRef(), original[0].getPointRef()),\n+                                    sigma),\n+                            Double.NaN, false);\n+                }\n             }\n-\n         }\n-\n+        if (isConverged(simplex, comparator)) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}