{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double v1n = v1.getNorm();\n    final double v2n = v2.getNorm();\n\n    if (v1n == 0 || v2n == 0) {\n        throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM);\n    }\n\n    final double scale;\n    if (v1n >= v2n) {\n        scale = 1.0 / v1n;\n    } else {\n        scale = 1.0 / v2n;\n    }\n\n    final double v1X = v1.getX() * scale;\n    final double v1Y = v1.getY() * scale;\n    final double v1Z = v1.getZ() * scale;\n\n    final double v2X = v2.getX() * scale;\n    final double v2Y = v2.getY() * scale;\n    final double v2Z = v2.getZ() * scale;\n\n    final double rx = v1Y * v2Z - v1Z * v2Y;\n    final double ry = v1Z * v2X - v1X * v2Z;\n    final double rz = v1X * v2Y - v1Y * v2X;\n\n    final double norm = FastMath.sqrt(rx * rx + ry * ry + rz * rz);\n\n    if (norm == 0) {\n        throw new MathArithmeticException(LocalizedCoreFormats.ZERO_NORM_AFTER_PRECONDITIONING);\n    }\n\n    return new Vector3D(rx, ry, rz);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..fe777e977 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,43 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    final double v1n = v1.getNorm();\n+    final double v2n = v2.getNorm();\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    if (v1n == 0 || v2n == 0) {\n+        throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM);\n+    }\n+\n+    final double scale;\n+    if (v1n >= v2n) {\n+        scale = 1.0 / v1n;\n+    } else {\n+        scale = 1.0 / v2n;\n+    }\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double v1X = v1.getX() * scale;\n+    final double v1Y = v1.getY() * scale;\n+    final double v1Z = v1.getZ() * scale;\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double v2X = v2.getX() * scale;\n+    final double v2Y = v2.getY() * scale;\n+    final double v2Z = v2.getZ() * scale;\n \n+    final double rx = v1Y * v2Z - v1Z * v2Y;\n+    final double ry = v1Z * v2X - v1X * v2Z;\n+    final double rz = v1X * v2Y - v1Y * v2X;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    final double norm = FastMath.sqrt(rx * rx + ry * ry + rz * rz);\n \n-  }\n+    if (norm == 0) {\n+        throw new MathArithmeticException(LocalizedCoreFormats.ZERO_NORM_AFTER_PRECONDITIONING);\n+    }\n+\n+    return new Vector3D(rx, ry, rz);\n+\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}