{
    "patch": "parent.detachFromParent();\ncompiler.reportCodeChange();\nif (!providedNames.containsKey(ns)) {\n    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n} else {\n    ProvidedName provided = providedNames.get(ns);\n    if (!provided.isExplicitlyProvided() || (provided.isExplicitlyProvided() && \n        (provided.explicitModule == null || provided.explicitModule != t.getModule()))) {\n            JSModule providedModule = provided.explicitModule;\n            if (providedModule != null && moduleGraph != null && !moduleGraph.dependsOn(t.getModule(), providedModule)) {\n                compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                    providedModule.getName(), t.getModule().getName()));\n            }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..f69b7a8a 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,21 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+parent.detachFromParent();\n+compiler.reportCodeChange();\n+if (!providedNames.containsKey(ns)) {\n+    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+} else {\n+    ProvidedName provided = providedNames.get(ns);\n+    if (!provided.isExplicitlyProvided() || (provided.isExplicitlyProvided() && \n+        (provided.explicitModule == null || provided.explicitModule != t.getModule()))) {\n+            JSModule providedModule = provided.explicitModule;\n+            if (providedModule != null && moduleGraph != null && !moduleGraph.dependsOn(t.getModule(), providedModule)) {\n+                compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                    providedModule.getName(), t.getModule().getName()));\n+            }\n+    }\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}