{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getRowDimension();\n    double[] sqrtEig = new double[n];\n    Complex[] eig = d.getEigenvalues();\n    boolean allNonNegative = true;\n    for (int i = 0; i < n; i++) {\n        if (eig[i].getReal() < 0.0) {\n            allNonNegative = false;\n            break;\n        } \n        sqrtEig[i] = Math.sqrt(eig[i].getReal());\n    }\n    if (!allNonNegative) {\n        // Return NaN matrix if input matrix not positive semi-definite\n        return MatrixUtils.createRealMatrix(n, n).scalarMultiply(Double.NaN);\n    }\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEig);\n    return v.multiply(sqrtD).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..72a82cd3c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getRowDimension();\n+    double[] sqrtEig = new double[n];\n+    Complex[] eig = d.getEigenvalues();\n+    boolean allNonNegative = true;\n+    for (int i = 0; i < n; i++) {\n+        if (eig[i].getReal() < 0.0) {\n+            allNonNegative = false;\n+            break;\n+        } \n+        sqrtEig[i] = Math.sqrt(eig[i].getReal());\n     }\n+    if (!allNonNegative) {\n+        // Return NaN matrix if input matrix not positive semi-definite\n+        return MatrixUtils.createRealMatrix(n, n).scalarMultiply(Double.NaN);\n+    }\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEig);\n+    return v.multiply(sqrtD).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}