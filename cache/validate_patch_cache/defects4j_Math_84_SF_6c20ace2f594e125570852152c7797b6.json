{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    int numIterations = 0;\n    final int maxIterations = getMaxIterations();\n    while (numIterations < maxIterations) {\n\n        incrementIterationsCounter();\n        numIterations++;\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = expanded;\n            } else {\n                simplex = reflectedSimplex;\n            }\n\n            continue;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = original[0].getPointRef();\n            for (int i = 1; i <= numVertices; i++) {\n                simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n                                                    Double.NaN);\n            }\n            continue;\n        }\n\n        // perform an inside contraction\n        final RealPointValuePair contractedIns = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contractedIns, original[numVertices]) < 0) {\n            simplex = original[0].getPointRef();\n            for (int i = 1; i <= numVertices; i++) {\n                simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n                                                    Double.NaN);\n            }\n            continue;\n        }\n\n        // perform an outside contraction\n        final RealPointValuePair contractedOut = evaluateNewSimplex(original, -chi, comparator);\n        if (comparator.compare(contractedOut, best) < 0) {\n            simplex = original[0].getPointRef();\n            for (int i = 1; i <= numVertices; i++) {\n                simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n                                                    Double.NaN);\n            }\n            continue;\n        }\n\n        // shrink the simplex\n        simplex = original[0].getPointRef();\n        for (int i = 1; i <= numVertices; i++) {\n            simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n                                                Double.NaN);\n        }\n\n    }\n\n    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n}\n\n/**\n * Helper contracting function used when the algorithm enters the contract phase.\n * @param point contracted point\n * @param center center point\n * @param contractionFactor contraction coefficient (must be positive)\n * @return the contracted point\n */\nprivate double[] contractShrink(final double[] point, final double[] center, final double contractionFactor) {\n    final int dim = point.length;\n    final double[] contracted = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        contracted[i] = center[i] + contractionFactor * (point[i] - center[i]);\n    }\n    return contracted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5076a6ab5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,98 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    int numIterations = 0;\n+    final int maxIterations = getMaxIterations();\n+    while (numIterations < maxIterations) {\n+\n+        incrementIterationsCounter();\n+        numIterations++;\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = expanded;\n+            } else {\n+                simplex = reflectedSimplex;\n+            }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            continue;\n \n-                return;\n+        }\n \n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = original[0].getPointRef();\n+            for (int i = 1; i <= numVertices; i++) {\n+                simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n+                                                    Double.NaN);\n             }\n+            continue;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // perform an inside contraction\n+        final RealPointValuePair contractedIns = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contractedIns, original[numVertices]) < 0) {\n+            simplex = original[0].getPointRef();\n+            for (int i = 1; i <= numVertices; i++) {\n+                simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n+                                                    Double.NaN);\n+            }\n+            continue;\n+        }\n \n-            // check convergence\n-                return;\n+        // perform an outside contraction\n+        final RealPointValuePair contractedOut = evaluateNewSimplex(original, -chi, comparator);\n+        if (comparator.compare(contractedOut, best) < 0) {\n+            simplex = original[0].getPointRef();\n+            for (int i = 1; i <= numVertices; i++) {\n+                simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n+                                                    Double.NaN);\n             }\n+            continue;\n+        }\n \n+        // shrink the simplex\n+        simplex = original[0].getPointRef();\n+        for (int i = 1; i <= numVertices; i++) {\n+            simplex[i] = new RealPointValuePair(contractShrink(original[i].getPoint(), original[0].getPoint(), sigma),\n+                                                Double.NaN);\n         }\n \n     }\n \n+    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n+}\n+\n+/**\n+ * Helper contracting function used when the algorithm enters the contract phase.\n+ * @param point contracted point\n+ * @param center center point\n+ * @param contractionFactor contraction coefficient (must be positive)\n+ * @return the contracted point\n+ */\n+private double[] contractShrink(final double[] point, final double[] center, final double contractionFactor) {\n+    final int dim = point.length;\n+    final double[] contracted = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        contracted[i] = center[i] + contractionFactor * (point[i] - center[i]);\n+    }\n+    return contracted;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}