{
    "patch": "The correct fix line for this code is `} else if (!NodeUtil.isExpressionResultUsed(parent.getParent())) {`. This fixes the issue by checking whether the parent node of the assignment node is an expression whose result is unused. If so, then the dependency scope is associated with the assignment node's RHS, otherwise, it is associated with the LHS.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..f15440aa 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,7 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+The correct fix line for this code is `} else if (!NodeUtil.isExpressionResultUsed(parent.getParent())) {`. This fixes the issue by checking whether the parent node of the assignment node is an expression whose result is unused. If so, then the dependency scope is associated with the assignment node's RHS, otherwise, it is associated with the LHS.\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}