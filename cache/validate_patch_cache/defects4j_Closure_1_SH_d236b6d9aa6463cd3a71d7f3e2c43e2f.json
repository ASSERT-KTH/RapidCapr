{
    "patch": "      Node curr = argList.getFirstChild();\n      for (int i = 0; curr != null; i++) {\n        Node next = curr.getNext();\n        if (i >= function.getLastChild().getChildCount()) {\n          argList.removeChild(curr);\n          compiler.reportCodeChange();\n        } else {\n          boolean isReferenced = false;\n          for (Var ref : referenced) {\n            if (ref.getName().equals(curr.getString())) {\n              isReferenced = true;\n              break;\n            }\n          }\n          if (!isReferenced) {\n            argList.removeChild(curr);\n            compiler.reportCodeChange();\n          }\n        }\n        curr = next;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bcd3f75f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node curr = argList.getFirstChild();\n+      for (int i = 0; curr != null; i++) {\n+        Node next = curr.getNext();\n+        if (i >= function.getLastChild().getChildCount()) {\n+          argList.removeChild(curr);\n+          compiler.reportCodeChange();\n+        } else {\n+          boolean isReferenced = false;\n+          for (Var ref : referenced) {\n+            if (ref.getName().equals(curr.getString())) {\n+              isReferenced = true;\n+              break;\n+            }\n+          }\n+          if (!isReferenced) {\n+            argList.removeChild(curr);\n+            compiler.reportCodeChange();\n+          }\n+        }\n+        curr = next;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}