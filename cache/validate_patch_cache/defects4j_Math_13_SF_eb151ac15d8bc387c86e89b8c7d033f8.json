{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    LUDecomposition lu = new LUDecomposition(m);\n    RealMatrix u = lu.getU();\n    RealMatrix v = lu.getSolver().getInverse().multiply(u.transpose());\n\n    for (int i = 0; i < v.getRowDimension(); i++) {\n        for (int j = 0; j < v.getColumnDimension(); j++) {\n            v.setEntry(i, j, Math.sqrt(Math.max(v.getEntry(i, j), 0)));\n        }\n    }\n\n    return u.multiply(v).multiply(u.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..00a3046c5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    LUDecomposition lu = new LUDecomposition(m);\n+    RealMatrix u = lu.getU();\n+    RealMatrix v = lu.getSolver().getInverse().multiply(u.transpose());\n+\n+    for (int i = 0; i < v.getRowDimension(); i++) {\n+        for (int j = 0; j < v.getColumnDimension(); j++) {\n+            v.setEntry(i, j, Math.sqrt(Math.max(v.getEntry(i, j), 0)));\n+        }\n     }\n+\n+    return u.multiply(v).multiply(u.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}