{
    "patch": "copy.setMaximumItemCount(end - start + 1);\ncopy.data = new java.util.ArrayList();\nint originalSize = this.data.size();\nif (end >= originalSize) {\n    // If the end index is beyond the end of the series, adjust it to the last item index\n    end = originalSize - 1;\n}\nif (start < 0 || start >= originalSize || start > end) {\n    // If start is before the start of the series or after end, throw an exception\n    throw new IllegalArgumentException(\"Invalid start/end values.\");\n}\nif (this.data.size() > 0) {\n    for (int index = start; index <= end; index++) {\n        TimeSeriesDataItem item = this.getDataItem(index);\n        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n        try {\n            copy.add(clone);\n        } catch (SeriesException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\ncopy.setMaximumItemAge(this.maximumItemAge);",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..620a024 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,29 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+copy.setMaximumItemCount(end - start + 1);\n+copy.data = new java.util.ArrayList();\n+int originalSize = this.data.size();\n+if (end >= originalSize) {\n+    // If the end index is beyond the end of the series, adjust it to the last item index\n+    end = originalSize - 1;\n+}\n+if (start < 0 || start >= originalSize || start > end) {\n+    // If start is before the start of the series or after end, throw an exception\n+    throw new IllegalArgumentException(\"Invalid start/end values.\");\n+}\n+if (this.data.size() > 0) {\n+    for (int index = start; index <= end; index++) {\n+        TimeSeriesDataItem item = this.getDataItem(index);\n+        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+        try {\n+            copy.add(clone);\n+        } catch (SeriesException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n+copy.setMaximumItemAge(this.maximumItemAge);\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2> but was:<0>",
    "test_result": "FAIL"
}