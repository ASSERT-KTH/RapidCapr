{
    "patch": "// Maybe STRING_KEY, STRING, GETPROP, GET, SET\nif (!NodeUtil.isGetOrSetKey(child)) {\n  if (!child.isStringKey()) {\n    continue;\n  }\n  String propName = null;\n  if(NodeUtil.isGetProp(child) && child.hasTwoChildren()) {\n    propName = child.getLastChild().getString();\n    child = child.getFirstChild();\n  } else {\n    propName = child.getString();\n  }\n  String name = propName;\n  T type = typeSystem.getType(getScope(), n, propName);\n\n  Property prop = getProperty(propName);\n  if (!prop.scheduleRenaming(child,\n                             processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(propName)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(propName),\n          Warnings.INVALIDATION, propName,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..d24d4ae4 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,34 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Maybe STRING_KEY, STRING, GETPROP, GET, SET\n+if (!NodeUtil.isGetOrSetKey(child)) {\n+  if (!child.isStringKey()) {\n+    continue;\n+  }\n+  String propName = null;\n+  if(NodeUtil.isGetProp(child) && child.hasTwoChildren()) {\n+    propName = child.getLastChild().getString();\n+    child = child.getFirstChild();\n+  } else {\n+    propName = child.getString();\n+  }\n+  String name = propName;\n+  T type = typeSystem.getType(getScope(), n, propName);\n+\n+  Property prop = getProperty(propName);\n+  if (!prop.scheduleRenaming(child,\n+                             processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(propName)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(propName),\n+          Warnings.INVALIDATION, propName,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}