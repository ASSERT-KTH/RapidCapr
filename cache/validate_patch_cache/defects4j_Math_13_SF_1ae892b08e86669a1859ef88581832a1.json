{
    "patch": "The following function may prevent the out of memory error:\n```\n    private RealMatrix squareRoot(RealMatrix m) throws NotPositiveDefiniteMatrixException {\n        final EigenDecomposition dec = new EigenDecomposition(m, 0);\n        if (!dec.decomp()) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        RealMatrix sqrtm = dec.getSquareRoot();\n        return sqrtm;\n    }\n```\nNote: The NotPositiveDefiniteMatrixException is a custom exception which may need to be implemented.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1184557db 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+The following function may prevent the out of memory error:\n+```\n+    private RealMatrix squareRoot(RealMatrix m) throws NotPositiveDefiniteMatrixException {\n+        final EigenDecomposition dec = new EigenDecomposition(m, 0);\n+        if (!dec.decomp()) {\n+            throw new NotPositiveDefiniteMatrixException();\n+        }\n+        RealMatrix sqrtm = dec.getSquareRoot();\n+        return sqrtm;\n     }\n+```\n+Note: The NotPositiveDefiniteMatrixException is a custom exception which may need to be implemented.\n }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}