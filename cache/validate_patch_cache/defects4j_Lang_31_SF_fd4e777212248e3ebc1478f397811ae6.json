{
    "patch": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    if (searchLength == 0) {\n        return false;\n    }\n    boolean[] matched = new boolean[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLength; i++) {\n        char searchChar = searchChars[i];\n        if (searchChar < Character.MIN_VALUE || searchChar > Character.MAX_VALUE) {\n            continue;\n        }\n        matched[searchChar] = true;\n    }\n    for (int i = 0; i < csLength; i++) {\n        char c = cs.charAt(i);\n        if (c < Character.MIN_VALUE || c > Character.MAX_VALUE) {\n            continue;\n        }\n        if (matched[c]) {\n            return true;\n        }\n        if (Character.isHighSurrogate(c) && i < csLength - 1) {\n            int codePoint = Character.toCodePoint(c, cs.charAt(i + 1));\n            i++;\n            if (matched[codePoint]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..70950d54 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence cs, char[] searchChars) {\n+    if (cs == null || searchChars == null) {\n+        return false;\n+    }\n+    int csLength = cs.length();\n+    int searchLength = searchChars.length;\n+    if (searchLength == 0) {\n+        return false;\n+    }\n+    boolean[] matched = new boolean[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLength; i++) {\n+        char searchChar = searchChars[i];\n+        if (searchChar < Character.MIN_VALUE || searchChar > Character.MAX_VALUE) {\n+            continue;\n+        }\n+        matched[searchChar] = true;\n+    }\n+    for (int i = 0; i < csLength; i++) {\n+        char c = cs.charAt(i);\n+        if (c < Character.MIN_VALUE || c > Character.MAX_VALUE) {\n+            continue;\n+        }\n+        if (matched[c]) {\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(c) && i < csLength - 1) {\n+            int codePoint = Character.toCodePoint(c, cs.charAt(i + 1));\n+            i++;\n+            if (matched[codePoint]) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}