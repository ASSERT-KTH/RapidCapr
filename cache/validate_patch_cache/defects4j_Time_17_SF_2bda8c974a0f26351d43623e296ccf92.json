{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 2 days before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 2 * DateTimeConstants.MILLIS_PER_DAY);\n    long instantAfter = convertUTCToLocal(instant + 2 * DateTimeConstants.MILLIS_PER_DAY);\n\n    if (instantBefore >= instantAfter) {\n        return instant; // only happens in pathological cases\n    }\n\n    boolean isGap = false;\n    boolean isOverlap = false;\n    boolean foundNegative = false;\n    boolean foundPositive = false;\n\n    // evaluate all hour offsets between before and after range\n    for (int hour = -47; hour <= 47; hour++) {\n        if (hour == 0) {\n            continue;\n        }\n\n        long hourOffset = hour * DateTimeConstants.MILLIS_PER_HOUR;\n        long local = convertUTCToLocal(instant + hourOffset);\n        boolean prevFoundNegative = foundNegative;\n        boolean prevFoundPositive = foundPositive;\n\n        if (local > instantAfter) {\n            foundPositive = true;\n        } else if (local < instantBefore) {\n            foundNegative = true;\n        } else if (foundNegative && foundPositive) {\n            isOverlap = true;\n            break;\n        } else {\n            isGap = true;\n        }\n\n        if (foundNegative && prevFoundPositive) {\n            isOverlap = true;\n            break;\n        }\n\n        if (foundPositive && prevFoundNegative) {\n            isOverlap = true;\n            break;\n        }\n    }\n\n    if (isGap || (!isGap && !isOverlap)) {\n        return instant;\n    }\n\n    for (int hour = -47; hour <= 47; hour++) {\n        if (hour == 0) {\n            continue;\n        }\n\n        long hourOffset = hour * DateTimeConstants.MILLIS_PER_HOUR;\n        long local = convertUTCToLocal(instant + hourOffset);\n\n        // find the start of the overlap\n        if (local == convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR)) {\n            return instant - DateTimeConstants.MILLIS_PER_HOUR;\n        }\n\n        // find the end of the overlap\n        if (local == convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR)) {\n            return instant + DateTimeConstants.MILLIS_PER_HOUR;\n        }\n    }\n\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..b11c0305 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,78 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // evaluate 2 days before and after to work out if anything is happening\n+    long instantBefore = convertUTCToLocal(instant - 2 * DateTimeConstants.MILLIS_PER_DAY);\n+    long instantAfter = convertUTCToLocal(instant + 2 * DateTimeConstants.MILLIS_PER_DAY);\n+\n+    if (instantBefore >= instantAfter) {\n+        return instant; // only happens in pathological cases\n+    }\n+\n+    boolean isGap = false;\n+    boolean isOverlap = false;\n+    boolean foundNegative = false;\n+    boolean foundPositive = false;\n+\n+    // evaluate all hour offsets between before and after range\n+    for (int hour = -47; hour <= 47; hour++) {\n+        if (hour == 0) {\n+            continue;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+\n+        long hourOffset = hour * DateTimeConstants.MILLIS_PER_HOUR;\n+        long local = convertUTCToLocal(instant + hourOffset);\n+        boolean prevFoundNegative = foundNegative;\n+        boolean prevFoundPositive = foundPositive;\n+\n+        if (local > instantAfter) {\n+            foundPositive = true;\n+        } else if (local < instantBefore) {\n+            foundNegative = true;\n+        } else if (foundNegative && foundPositive) {\n+            isOverlap = true;\n+            break;\n+        } else {\n+            isGap = true;\n+        }\n+\n+        if (foundNegative && prevFoundPositive) {\n+            isOverlap = true;\n+            break;\n+        }\n+\n+        if (foundPositive && prevFoundNegative) {\n+            isOverlap = true;\n+            break;\n+        }\n+    }\n+\n+    if (isGap || (!isGap && !isOverlap)) {\n+        return instant;\n     }\n+\n+    for (int hour = -47; hour <= 47; hour++) {\n+        if (hour == 0) {\n+            continue;\n+        }\n+\n+        long hourOffset = hour * DateTimeConstants.MILLIS_PER_HOUR;\n+        long local = convertUTCToLocal(instant + hourOffset);\n+\n+        // find the start of the overlap\n+        if (local == convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR)) {\n+            return instant - DateTimeConstants.MILLIS_PER_HOUR;\n+        }\n+\n+        // find the end of the overlap\n+        if (local == convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR)) {\n+            return instant + DateTimeConstants.MILLIS_PER_HOUR;\n+        }\n+    }\n+\n+    return instant;\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}