{
    "patch": "      Node lastArg = argList.getLastChild();\n      Node prevArg = null;\n      while (lastArg != null) {\n        String paramName = lastArg.getString();\n        Var var = fnScope.getVar(paramName);\n        lastArg = lastArg.getPrevious();\n        if (referenced.contains(var)) {\n          prevArg = lastArg;\n        } else {\n          if (prevArg == null) {\n            argList.removeChild(lastArg.getNext());\n          } else {\n            argList.removeChild(prevArg.getNext(), lastArg.getNext());\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c5afea1f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      Node prevArg = null;\n+      while (lastArg != null) {\n+        String paramName = lastArg.getString();\n+        Var var = fnScope.getVar(paramName);\n+        lastArg = lastArg.getPrevious();\n+        if (referenced.contains(var)) {\n+          prevArg = lastArg;\n+        } else {\n+          if (prevArg == null) {\n+            argList.removeChild(lastArg.getNext());\n+          } else {\n+            argList.removeChild(prevArg.getNext(), lastArg.getNext());\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}