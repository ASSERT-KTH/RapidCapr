{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Cannot store elements of different types in the same array\");\n    }\n    @SuppressWarnings(\"unchecked\")\n    final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    for (int i = 0; i < array2.length; i++) {\n        if (!type1.isInstance(array2[i])) {\n            throw new IllegalArgumentException(\n                \"Cannot store elements of different types in the same array\");\n        }\n        joinedArray[array1.length + i] = (T) array2[i];\n    }\n    return joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..478dd60f 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,29 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+        throw new IllegalArgumentException(\"Cannot store elements of different types in the same array\");\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+    for (int i = 0; i < array2.length; i++) {\n+        if (!type1.isInstance(array2[i])) {\n+            throw new IllegalArgumentException(\n+                \"Cannot store elements of different types in the same array\");\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n+        joinedArray[array1.length + i] = (T) array2[i];\n     }\n+    return joinedArray;\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "java.lang.IllegalArgumentException: Cannot store elements of different types in the same array",
    "test_result": "FAIL"
}