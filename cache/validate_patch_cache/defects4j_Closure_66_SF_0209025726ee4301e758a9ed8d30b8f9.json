{
    "patch": "public static double getTypedPercent(JSONObject json) throws JSONException {\n    double numTyped = 0.0;\n    double numFields = 0.0;\n\n    JSONArray fields = json.getJSONArray(\"fields\");\n\n    for (int i = 0; i < fields.length(); i++) {\n        JSONObject field = fields.getJSONObject(i);\n\n        if(field.has(\"fields\")) {\n            numTyped += getTypedPercent(field);\n        } else {\n            numFields += 1.0;\n            if (field.getString(\"type\").equals(\"text\")) {\n                numTyped += 1.0;\n            }\n        }\n    }\n\n    double percentTyped = numTyped / numFields * 100.0;\n    return percentTyped;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c1e0b9d1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject json) throws JSONException {\n+    double numTyped = 0.0;\n+    double numFields = 0.0;\n+\n+    JSONArray fields = json.getJSONArray(\"fields\");\n+\n+    for (int i = 0; i < fields.length(); i++) {\n+        JSONObject field = fields.getJSONObject(i);\n+\n+        if(field.has(\"fields\")) {\n+            numTyped += getTypedPercent(field);\n+        } else {\n+            numFields += 1.0;\n+            if (field.getString(\"type\").equals(\"text\")) {\n+                numTyped += 1.0;\n+            }\n+        }\n+    }\n+\n+    double percentTyped = numTyped / numFields * 100.0;\n+    return percentTyped;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}