{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments for the RegularizedGammaP function\");\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    } else {\n        double sum = 1.0 / a;\n        double term = sum;\n        double n = 1.0;\n        while (Math.abs(term) > 1e-15 * Math.abs(sum)) {\n            term *= x / (a + n);\n            sum += term;\n            n += 1.0;\n        }\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    double result;\n    if (Double.isNaN(a) || Double.isNaN(x) || a < 0.0 || x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        result = 1.0;\n    } else if (x < a + 1.0) {\n        result = 1.0 - regularizedGammaP(a, x);\n    } else {\n        double lg = logGamma(a);\n        double x1 = 1.0 - a;\n        double li = incompleteGammaSeries(a, x);\n        double factor = Math.exp(-x + a * Math.log(x) - lg) / a;\n        result = factor * x1 * li;\n    }\n    return result;\n}\n\npublic static double incompleteGammaSeries(double a, double x) {\n    double eps = 1e-15;\n    double sum = 1 / a;\n    double term = sum;\n    int i = 1;\n    while (Math.abs(term) > eps * Math.abs(sum)) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n    }\n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..609f0f46c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,64 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments for the RegularizedGammaP function\");\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    } else {\n+        double sum = 1.0 / a;\n+        double term = sum;\n+        double n = 1.0;\n+        while (Math.abs(term) > 1e-15 * Math.abs(sum)) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n += 1.0;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    double result;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a < 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        result = 1.0;\n+    } else if (x < a + 1.0) {\n+        result = 1.0 - regularizedGammaP(a, x);\n+    } else {\n+        double lg = logGamma(a);\n+        double x1 = 1.0 - a;\n+        double li = incompleteGammaSeries(a, x);\n+        double factor = Math.exp(-x + a * Math.log(x) - lg) / a;\n+        result = factor * x1 * li;\n+    }\n+    return result;\n+}\n+\n+public static double incompleteGammaSeries(double a, double x) {\n+    double eps = 1e-15;\n+    double sum = 1 / a;\n+    double term = sum;\n+    int i = 1;\n+    while (Math.abs(term) > eps * Math.abs(sum)) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+    }\n+    return sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}