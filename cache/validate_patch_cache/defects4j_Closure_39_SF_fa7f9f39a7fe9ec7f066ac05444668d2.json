{
    "patch": "  public boolean canBeCalled() {\n    return isCallable();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    }\n\n    if (prettyPrint) {\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n\n        // Avoid circular reference.\n        if (this == current) {\n          propertyNames.add(\"...\");\n          break;\n        }\n\n        if (current.getProperties() != null) {\n          propertyNames.addAll(current.getProperties().keySet());\n        }\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        ObjectType type = getPropertyType(property);\n        if (type == null || type.toStringHelper(prettyPrint).equals(\"{...}\")) {\n          sb.append(\"{...}\");\n        } else {\n          sb.append(type);\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..5150576b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,15 +346,16 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return isCallable();\n   }\n \n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n+    }\n+\n+    if (prettyPrint) {\n       prettyPrint = false;\n \n       // Use a tree set so that the properties are sorted.\n@@ -363,7 +364,16 @@ class PrototypeObjectType extends ObjectType {\n            current != null && !current.isNativeObjectType() &&\n                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+\n+        // Avoid circular reference.\n+        if (this == current) {\n+          propertyNames.add(\"...\");\n+          break;\n+        }\n+\n+        if (current.getProperties() != null) {\n+          propertyNames.addAll(current.getProperties().keySet());\n+        }\n       }\n \n       StringBuilder sb = new StringBuilder();\n@@ -377,7 +387,12 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        ObjectType type = getPropertyType(property);\n+        if (type == null || type.toStringHelper(prettyPrint).equals(\"{...}\")) {\n+          sb.append(\"{...}\");\n+        } else {\n+          sb.append(type);\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -387,7 +402,6 @@ class PrototypeObjectType extends ObjectType {\n       }\n \n       sb.append(\"}\");\n-\n       prettyPrint = true;\n       return sb.toString();\n     } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}