{
    "patch": "    ArrayList<Node> argReferences = Lists.newArrayList();\n    NodeTraversal.traverse(compiler, function, new NodeVisitor() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName() && parent.isParamList()) {\n          argReferences.add(n);\n        }\n      }\n    });\n\n    if (!argReferences.isEmpty()) {\n      Node lastArg;\n      // Strip unreferenced args off the end of the function declaration.\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (!argReferences.remove(lastArg)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // Remove any arguments from the beginning or middle that are never\n      // referenced.\n      if (!argReferences.isEmpty()) {\n        for (Node arg : argList.children()) {\n          if (!argReferences.contains(arg)) {\n            arg.detachFromParent();\n            compiler.reportCodeChange();\n          }\n        }\n      }\n    } else if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3ea904a3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ArrayList<Node> argReferences = Lists.newArrayList();\n+    NodeTraversal.traverse(compiler, function, new NodeVisitor() {\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName() && parent.isParamList()) {\n+          argReferences.add(n);\n+        }\n+      }\n+    });\n+\n+    if (!argReferences.isEmpty()) {\n+      Node lastArg;\n+      // Strip unreferenced args off the end of the function declaration.\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (!argReferences.remove(lastArg)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // Remove any arguments from the beginning or middle that are never\n+      // referenced.\n+      if (!argReferences.isEmpty()) {\n+        for (Node arg : argList.children()) {\n+          if (!argReferences.contains(arg)) {\n+            arg.detachFromParent();\n+            compiler.reportCodeChange();\n+          }\n+        }\n+      }\n+    } else if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}