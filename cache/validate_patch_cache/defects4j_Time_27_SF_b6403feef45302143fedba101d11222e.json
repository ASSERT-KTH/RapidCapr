{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n\n    if (!notPrinter && printer == null) {\n        printer = new PeriodFormatterBuilder().toPrinter(elementPairs);\n    }\n\n    if (!notParser && parser == null) {\n        parser = new PeriodFormatterBuilder().toParser(elementPairs);\n    }\n\n    if (printer == null || parser == null) {\n        throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c9d89745 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,32 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n+    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n+\n+    if (!notPrinter && printer == null) {\n+        printer = new PeriodFormatterBuilder().toPrinter(elementPairs);\n     }\n \n+    if (!notParser && parser == null) {\n+        parser = new PeriodFormatterBuilder().toParser(elementPairs);\n+    }\n+\n+    if (printer == null || parser == null) {\n+        throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: method toPrinter in class PeriodFormatterBuilder cannot be applied to given types;",
    "test_result": "ERROR"
}