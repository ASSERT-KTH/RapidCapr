{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n        double eps;\n        do {\n            xOld.setSubMatrix(x.getData(), 0, 0);\n            final RealMatrix y = xOld.multiply(xOld);\n            eps = y.subtract(m).getNorm()/m.getNorm();\n            x.setSubMatrix(xOld.add(y.subtract(m).multiply(i).multiply(xOld).scalarMultiply(0.5)).getData(), 0, 0);\n        } while (eps > 1e-9);\n\n        // Check if the result is positive semidefinite\n        EigenDecomposition dec = new EigenDecomposition(x);\n        RealMatrix d = dec.getD();\n        boolean allPositive = true;\n        for(int i = 0; i < d.getRowDimension(); i++) {\n            if(d.getEntry(i,i) < 0) {\n                allPositive = false;\n                break;\n            }\n        }\n\n        if(allPositive) {\n            return x;\n        } else {\n            // Fallback to EigenDecomposition method\n            dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e93623bde 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n+        double eps;\n+        do {\n+            xOld.setSubMatrix(x.getData(), 0, 0);\n+            final RealMatrix y = xOld.multiply(xOld);\n+            eps = y.subtract(m).getNorm()/m.getNorm();\n+            x.setSubMatrix(xOld.add(y.subtract(m).multiply(i).multiply(xOld).scalarMultiply(0.5)).getData(), 0, 0);\n+        } while (eps > 1e-9);\n+\n+        // Check if the result is positive semidefinite\n+        EigenDecomposition dec = new EigenDecomposition(x);\n+        RealMatrix d = dec.getD();\n+        boolean allPositive = true;\n+        for(int i = 0; i < d.getRowDimension(); i++) {\n+            if(d.getEntry(i,i) < 0) {\n+                allPositive = false;\n+                break;\n+            }\n+        }\n+\n+        if(allPositive) {\n+            return x;\n+        } else {\n+            // Fallback to EigenDecomposition method\n+            dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n     }\n }",
    "result_reason": "error: variable i is already defined in method squareRoot(RealMatrix)",
    "test_result": "ERROR"
}