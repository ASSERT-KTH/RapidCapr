{
    "patch": "    if (left.isObjectLit() || left.isArrayLit()) {\n      // For literals. Convert to a string.\n      String stringIndex = null;\n      if (NodeUtil.isGetElem(n) && right.isString()) {\n        stringIndex = right.getString();\n      }\n      // Fold index into literal.\n      if (stringIndex != null) {\n        Node key = Node.newString(stringIndex);\n        Node value = NodeUtil.getFirstPropMatchingKey(left, key.getString());\n        // Remove it from the literal array.\n        if (value != null) {\n          left.removeChild(value);\n        }\n        // Insert the value at the index.\n        key.setType(Token.NUMBER);\n        key.setDouble(Double.parseDouble(stringIndex));\n        Node newElem = NodeUtil.newExpr(right.detach());\n        if (value != null) {\n          left.addChildBefore(newElem, value);\n          left.addChildBefore(key, newElem);\n        } else {\n          left.addChildToBack(key);\n          left.addChildToBack(newElem);\n        }\n        reportCodeChange();\n        return newElem;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..30a66c52 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,34 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.isObjectLit() || left.isArrayLit()) {\n+      // For literals. Convert to a string.\n+      String stringIndex = null;\n+      if (NodeUtil.isGetElem(n) && right.isString()) {\n+        stringIndex = right.getString();\n+      }\n+      // Fold index into literal.\n+      if (stringIndex != null) {\n+        Node key = Node.newString(stringIndex);\n+        Node value = NodeUtil.getFirstPropMatchingKey(left, key.getString());\n+        // Remove it from the literal array.\n+        if (value != null) {\n+          left.removeChild(value);\n+        }\n+        // Insert the value at the index.\n+        key.setType(Token.NUMBER);\n+        key.setDouble(Double.parseDouble(stringIndex));\n+        Node newElem = NodeUtil.newExpr(right.detach());\n+        if (value != null) {\n+          left.addChildBefore(newElem, value);\n+          left.addChildBefore(key, newElem);\n+        } else {\n+          left.addChildToBack(key);\n+          left.addChildToBack(newElem);\n+        }\n+        reportCodeChange();\n+        return newElem;\n+      }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}