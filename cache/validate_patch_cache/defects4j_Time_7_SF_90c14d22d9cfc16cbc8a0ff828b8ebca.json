{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n        \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int parsedOffset = 0;\n    boolean parsedWithOffset = false;\n        \n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    int pivotYear = (iPivotYear != null ? iPivotYear.intValue() : defaultYear);\n        \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n        \n    int newPos = parser.parseInto(bucket, text, position);\n        \n    if (newPos >= 0) {\n        if (iOffsetParsed) {\n            Integer offsetInteger = bucket.getOffsetInteger();\n            if (offsetInteger != null) {\n                parsedOffset = offsetInteger.intValue();\n                parsedWithOffset = true;\n            } else {\n                parsedOffset = bucket.getZone().getOffset(bucket.getMillis());\n                parsedWithOffset = true;\n            }\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            chrono = chrono.withZone(zone);\n        }\n        \n        if (parsedWithOffset) {\n            instantLocal = bucket.computeMillis(parsedOffset);\n        } else {\n            instantLocal = bucket.computeMillis();\n        }\n        \n        if (parsedWithOffset) {\n            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(zone);\n        }\n\n        instant.setMillis(instantLocal);\n        instant.setChronology(chrono);\n\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (parsedWithOffset) {\n            instant.setZone(zone);\n        }\n    } else {\n        newPos = ~newPos;\n    }\n        \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..bf4be330 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,68 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n         \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int parsedOffset = 0;\n+    boolean parsedWithOffset = false;\n+        \n+    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    int pivotYear = (iPivotYear != null ? iPivotYear.intValue() : defaultYear);\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n+        \n+    int newPos = parser.parseInto(bucket, text, position);\n+        \n+    if (newPos >= 0) {\n+        if (iOffsetParsed) {\n+            Integer offsetInteger = bucket.getOffsetInteger();\n+            if (offsetInteger != null) {\n+                parsedOffset = offsetInteger.intValue();\n+                parsedWithOffset = true;\n+            } else {\n+                parsedOffset = bucket.getZone().getOffset(bucket.getMillis());\n+                parsedWithOffset = true;\n+            }\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n+            chrono = chrono.withZone(zone);\n         }\n+        \n+        if (parsedWithOffset) {\n+            instantLocal = bucket.computeMillis(parsedOffset);\n+        } else {\n+            instantLocal = bucket.computeMillis();\n+        }\n+        \n+        if (parsedWithOffset) {\n+            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            chrono = chrono.withZone(zone);\n+        }\n+\n+        instant.setMillis(instantLocal);\n         instant.setChronology(chrono);\n+\n         if (iZone != null) {\n             instant.setZone(iZone);\n+        } else if (parsedWithOffset) {\n+            instant.setZone(zone);\n         }\n-        return newPos;\n+    } else {\n+        newPos = ~newPos;\n     }\n+        \n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}