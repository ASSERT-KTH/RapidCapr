{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = arrayNode;\n    Node elem = arrayNode.getFirstChild();\n    boolean isEmpty = true;\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else if (elem.getType() == Token.EMPTY) {\n        // do nothing for empty nodes\n      } else if (NodeUtil.isNumber(elem) || NodeUtil.isBoolean(elem)) {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        Node newElem = new Node(Token.STRING);\n        newElem.setString(NodeUtil.getStringValue(elem));\n        arrayFoldedChildren.add(newElem);\n        isEmpty = false;\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        isEmpty = false;\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n      isEmpty = false;\n    }\n\n    if (isEmpty) { // check if empty array\n      Node foldedStringNode = Node.newString(\"\").copyInformationFrom(n);\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    } else if (arrayFoldedChildren.size() == 1) { // check if there's only one element\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      // only fold join if the resulting string is smaller\n      if (foldedSize <= InlineCostEstimator.getCost(n)) {\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      }\n    } else { // folding required\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n      // only fold join if the resulting string is smaller\n      if (foldedSize <= InlineCostEstimator.getCost(n)) {\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        return n;\n      }\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..76990b50 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -386,23 +386,38 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n-    Node prev = null;\n+    Node prev = arrayNode;\n     Node elem = arrayNode.getFirstChild();\n+    boolean isEmpty = true;\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+      if (NodeUtil.isImmutableValue(elem)) {\n         if (sb == null) {\n           sb = new StringBuilder();\n         } else {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getArrayElementStringValue(elem));\n+      } else if (elem.getType() == Token.EMPTY) {\n+        // do nothing for empty nodes\n+      } else if (NodeUtil.isNumber(elem) || NodeUtil.isBoolean(elem)) {\n+        if (sb != null) {\n+          Preconditions.checkNotNull(prev);\n+          // + 2 for the quotes.\n+          foldedSize += sb.length() + 2;\n+          arrayFoldedChildren.add(\n+              Node.newString(sb.toString()).copyInformationFrom(prev));\n+          sb = null;\n+        }\n+        foldedSize += InlineCostEstimator.getCost(elem);\n+        Node newElem = new Node(Token.STRING);\n+        newElem.setString(NodeUtil.getStringValue(elem));\n+        arrayFoldedChildren.add(newElem);\n+        isEmpty = false;\n       } else {\n         if (sb != null) {\n           Preconditions.checkNotNull(prev);\n@@ -414,6 +429,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n+        isEmpty = false;\n       }\n       prev = elem;\n       elem = elem.getNext();\n@@ -425,22 +441,18 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(\n           Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n+      isEmpty = false;\n+    }\n+\n+    if (isEmpty) { // check if empty array\n+      Node foldedStringNode = Node.newString(\"\").copyInformationFrom(n);\n+      n.getParent().replaceChild(n, foldedStringNode);\n+      reportCodeChange();\n+      return foldedStringNode;\n+    } else if (arrayFoldedChildren.size() == 1) { // check if there's only one element\n+      Node foldedStringNode = arrayFoldedChildren.remove(0);\n+      // only fold join if the resulting string is smaller\n+      if (foldedSize <= InlineCostEstimator.getCost(n)) {\n         arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n           // If the Node is not a string literal, ensure that\n@@ -453,23 +465,20 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n+      }\n+    } else { // folding required\n+      int kJoinOverhead = \"[].join()\".length();\n+      foldedSize += kJoinOverhead;\n+      foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+      // only fold join if the resulting string is smaller\n+      if (foldedSize <= InlineCostEstimator.getCost(n)) {\n         arrayNode.detachChildren();\n         for (Node node : arrayFoldedChildren) {\n           arrayNode.addChildToBack(node);\n         }\n         reportCodeChange();\n-        break;\n+        return n;\n+      }\n     }\n \n     return n;\n@@ -642,4 +651,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}