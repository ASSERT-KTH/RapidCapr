{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // separate out years and months from the result period\n        int years = result.getYears();\n        int months = result.getMonths();\n\n        // compute the total number of months represented by the period\n        int totalMonths = years * 12 + months;\n\n        // if total months is non-zero, normalize it\n        if (totalMonths != 0) {\n            // extract the number of years and excess months from the total months\n            int excessYears = totalMonths / 12;\n            int excessMonths = totalMonths % 12;\n\n            // create a new Period object with the extracted values added using plusX() calls\n            result = result.plusYears(excessYears).plusMonths(excessMonths);\n\n            // continue normalizing the period until the total number of months is zero\n            while (result.getYears() * 12 + result.getMonths() != 0) {\n                result = result.normalizedStandard(type);\n            }\n        }\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..7e39e3bc 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1622,18 +1622,29 @@ public final class Period\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+\n+        // separate out years and months from the result period\n+        int years = result.getYears();\n+        int months = result.getMonths();\n+\n+        // compute the total number of months represented by the period\n+        int totalMonths = years * 12 + months;\n+\n+        // if total months is non-zero, normalize it\n+        if (totalMonths != 0) {\n+            // extract the number of years and excess months from the total months\n+            int excessYears = totalMonths / 12;\n+            int excessMonths = totalMonths % 12;\n+\n+            // create a new Period object with the extracted values added using plusX() calls\n+            result = result.plusYears(excessYears).plusMonths(excessMonths);\n+\n+            // continue normalizing the period until the total number of months is zero\n+            while (result.getYears() * 12 + result.getMonths() != 0) {\n+                result = result.normalizedStandard(type);\n             }\n         }\n+\n         return result;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P27M> but was:<P0M>",
    "test_result": "FAIL"
}