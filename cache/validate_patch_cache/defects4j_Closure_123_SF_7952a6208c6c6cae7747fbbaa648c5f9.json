{
    "patch": "public String fixCode(String code) {\n   String pattern = \"for\\\\s*\\\\(\\\\s*(.*?)\\\\s*:\\\\s*(.*?)\\\\s*\\\\)\";\n   Matcher matcher = Pattern.compile(pattern, Pattern.DOTALL).matcher(code);\n   StringBuffer sb = new StringBuffer();\n   \n   while (matcher.find()) {\n       String original = matcher.group(0);\n       String colonValue = matcher.group(1);\n       String iterableValue = matcher.group(2);\n       \n       String[] colonValues = colonValue.split(\"\\\\s*,\\\\s*\");\n       String newValue = \"\";\n       \n       if (colonValues.length == 1) {\n           String varType = \"Object\";\n           String varName = \"var\" + colonValues[0].substring(1);\n           if (colonValues[0].contains(\":\")) {\n               String[] varSplit = colonValues[0].split(\"\\\\s*:\\\\s*\");\n               varType = varSplit[0];\n               varName = varSplit[1];\n           }\n           newValue = String.format(\"%s %s : (Iterable<%s>) %s\", varType, varName, varType, iterableValue);\n       } else if (colonValues.length == 2) {\n           String indexVarType = \"int\";\n           String itemVarType = \"Object\";\n           String indexVarName = \"index\";\n           String itemVarName = \"item\";\n           String[] varSplit = colonValues[0].split(\"\\\\s*:\\\\s*\");\n           if (varSplit.length == 2) {\n               indexVarType = varSplit[0];\n               indexVarName = varSplit[1];\n           }\n           varSplit = colonValues[1].split(\"\\\\s*:\\\\s*\");\n           if (varSplit.length == 2) {\n               itemVarType = varSplit[0];\n               itemVarName = varSplit[1];\n           }\n           \n           newValue = String.format(\"%s %s = 0; %s %s : (Iterable<%s>) %s)\", indexVarType, indexVarName, itemVarType, itemVarName, itemVarType, iterableValue);\n       }\n       \n       matcher.appendReplacement(sb, Matcher.quoteReplacement(newValue));\n   }\n   \n   matcher.appendTail(sb);\n   return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..4f4400ee 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,53 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+   String pattern = \"for\\\\s*\\\\(\\\\s*(.*?)\\\\s*:\\\\s*(.*?)\\\\s*\\\\)\";\n+   Matcher matcher = Pattern.compile(pattern, Pattern.DOTALL).matcher(code);\n+   StringBuffer sb = new StringBuffer();\n+   \n+   while (matcher.find()) {\n+       String original = matcher.group(0);\n+       String colonValue = matcher.group(1);\n+       String iterableValue = matcher.group(2);\n+       \n+       String[] colonValues = colonValue.split(\"\\\\s*,\\\\s*\");\n+       String newValue = \"\";\n+       \n+       if (colonValues.length == 1) {\n+           String varType = \"Object\";\n+           String varName = \"var\" + colonValues[0].substring(1);\n+           if (colonValues[0].contains(\":\")) {\n+               String[] varSplit = colonValues[0].split(\"\\\\s*:\\\\s*\");\n+               varType = varSplit[0];\n+               varName = varSplit[1];\n+           }\n+           newValue = String.format(\"%s %s : (Iterable<%s>) %s\", varType, varName, varType, iterableValue);\n+       } else if (colonValues.length == 2) {\n+           String indexVarType = \"int\";\n+           String itemVarType = \"Object\";\n+           String indexVarName = \"index\";\n+           String itemVarName = \"item\";\n+           String[] varSplit = colonValues[0].split(\"\\\\s*:\\\\s*\");\n+           if (varSplit.length == 2) {\n+               indexVarType = varSplit[0];\n+               indexVarName = varSplit[1];\n+           }\n+           varSplit = colonValues[1].split(\"\\\\s*:\\\\s*\");\n+           if (varSplit.length == 2) {\n+               itemVarType = varSplit[0];\n+               itemVarName = varSplit[1];\n+           }\n+           \n+           newValue = String.format(\"%s %s = 0; %s %s : (Iterable<%s>) %s)\", indexVarType, indexVarName, itemVarType, itemVarName, itemVarType, iterableValue);\n+       }\n+       \n+       matcher.appendReplacement(sb, Matcher.quoteReplacement(newValue));\n+   }\n+   \n+   matcher.appendTail(sb);\n+   return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}