{
    "patch": "@Test\nvoid should_return_empty_iterable() {\n    int[] nums = {1, 3, 5};\n    ReturnValue values = mock(ReturnValue.class);\n    when(values.returnValueFor(Iterable.class)).thenReturn(new ArrayList<>());\n    Iterable<Integer> result = getEvenNumbers(nums);\n    assertFalse(result.iterator().hasNext());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..befbea3f9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,14 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+@Test\n+void should_return_empty_iterable() {\n+    int[] nums = {1, 3, 5};\n+    ReturnValue values = mock(ReturnValue.class);\n+    when(values.returnValueFor(Iterable.class)).thenReturn(new ArrayList<>());\n+    Iterable<Integer> result = getEvenNumbers(nums);\n+    assertFalse(result.iterator().hasNext());\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}