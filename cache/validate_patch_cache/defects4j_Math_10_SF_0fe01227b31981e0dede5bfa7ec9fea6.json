{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n\n        if (Double.compare(tmp2[0], 0) == 0 && Double.compare(y[yOffset], 0) == 0) {\n            for (int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = 0.0;\n            }\n        } else if (Double.isInfinite(tmp2[0]) && Double.isInfinite(y[yOffset])) {\n            final double[] sign = new double[1];\n            sign[0] = FastMath.copySign(1.0, y[yOffset]) * FastMath.copySign(1.0, x[xOffset]);\n            for (int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = sign[0] * FastMath.PI / 4.0;\n            }\n        } else {\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        \n        if (Double.compare(tmp2[0], 0) == 0 && Double.compare(y[yOffset], 0) == 0) {\n            for (int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = Double.NaN;\n            }\n        } else if (Double.isInfinite(tmp2[0]) && Double.isInfinite(y[yOffset])) {\n            final double[] sign = new double[1];\n            sign[0] = FastMath.copySign(1.0, y[yOffset]) * FastMath.copySign(1.0, x[xOffset]);\n            final int idx = FastMath.max(0, Math.getExponent(sign[0]));\n            sign[0] = Double.longBitsToDouble((Double.doubleToRawLongBits(FastMath.nextAfter(sign[0], -1L))&0xffffffff00000000L) | (idx-52+1023L));\n            result[resultOffset] = sign[0] * FastMath.PI / 2.0;\n            for (int i = 1; i < result.length; ++i) {\n                result[resultOffset + i] = sign[0] * FastMath.PI / 4.0;\n            }\n        } else {\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            final double[] sign = new double[1];\n            sign[0] = (y[yOffset] >= 0) ? FastMath.PI : -FastMath.PI;\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = sign[0] - 2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n        }\n\n    }\n\n    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..aa74a589f 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,46 +1379,75 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    // compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    if (x[xOffset] >= 0) {\n+\n+        // compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+\n+        if (Double.compare(tmp2[0], 0) == 0 && Double.compare(y[yOffset], 0) == 0) {\n+            for (int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = 0.0;\n+            }\n+        } else if (Double.isInfinite(tmp2[0]) && Double.isInfinite(y[yOffset])) {\n+            final double[] sign = new double[1];\n+            sign[0] = FastMath.copySign(1.0, y[yOffset]) * FastMath.copySign(1.0, x[xOffset]);\n+            for (int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = sign[0] * FastMath.PI / 4.0;\n+            }\n+        } else {\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n             for (int i = 0; i < tmp2.length; ++i) {\n                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n             }\n+        }\n \n-        } else {\n+    } else {\n \n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+        \n+        if (Double.compare(tmp2[0], 0) == 0 && Double.compare(y[yOffset], 0) == 0) {\n+            for (int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = Double.NaN;\n+            }\n+        } else if (Double.isInfinite(tmp2[0]) && Double.isInfinite(y[yOffset])) {\n+            final double[] sign = new double[1];\n+            sign[0] = FastMath.copySign(1.0, y[yOffset]) * FastMath.copySign(1.0, x[xOffset]);\n+            final int idx = FastMath.max(0, Math.getExponent(sign[0]));\n+            sign[0] = Double.longBitsToDouble((Double.doubleToRawLongBits(FastMath.nextAfter(sign[0], -1L))&0xffffffff00000000L) | (idx-52+1023L));\n+            result[resultOffset] = sign[0] * FastMath.PI / 2.0;\n+            for (int i = 1; i < result.length; ++i) {\n+                result[resultOffset + i] = sign[0] * FastMath.PI / 4.0;\n+            }\n+        } else {\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            final double[] sign = new double[1];\n+            sign[0] = (y[yOffset] >= 0) ? FastMath.PI : -FastMath.PI;\n+            for (int i = 0; i < tmp2.length; ++i) {\n+                result[resultOffset + i] = sign[0] - 2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n             }\n-\n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-\n     }\n \n+    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+\n+}\n+\n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand\n      * @param operandOffset offset of the operand in its array",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}