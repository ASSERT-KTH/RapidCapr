{
    "patch": "if(currentStrategy != null) {\n    collector.add(currentStrategy);\n}\nif (nextStrategy != null) {\n    if (nextStrategy.addRegex(this, regex)) {\n        collector.add(nextStrategy);\n    }\n}\nstrategies = collector.toArray(new Strategy[collector.size()]);\ncurrentFormatField = null;\nStringBuilder patternBuilder = new StringBuilder();\nfor (Strategy strategy : collector) {\n    patternBuilder.append(strategy.getRegex());\n}\nparsePattern = Pattern.compile(patternBuilder.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..84a5b9f2 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,21 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if(currentStrategy != null) {\n+    collector.add(currentStrategy);\n+}\n+if (nextStrategy != null) {\n+    if (nextStrategy.addRegex(this, regex)) {\n+        collector.add(nextStrategy);\n+    }\n+}\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+currentFormatField = null;\n+StringBuilder patternBuilder = new StringBuilder();\n+for (Strategy strategy : collector) {\n+    patternBuilder.append(strategy.getRegex());\n+}\n+parsePattern = Pattern.compile(patternBuilder.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}