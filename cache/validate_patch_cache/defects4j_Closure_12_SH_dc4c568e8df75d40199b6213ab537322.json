{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<Node> successors = getSuccessors(cfgNode);\n    for (Node successor : successors) {\n        if (isCatchBlock(successor)) {\n            return true;\n        } else {\n            boolean successorHasExceptionHandler = hasExceptionHandler(successor);\n            if (successorHasExceptionHandler) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..b33bcb41 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,20 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<Node> successors = getSuccessors(cfgNode);\n+    for (Node successor : successors) {\n+        if (isCatchBlock(successor)) {\n+            return true;\n+        } else {\n+            boolean successorHasExceptionHandler = hasExceptionHandler(successor);\n+            if (successorHasExceptionHandler) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}