{
    "patch": "        ...\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n\n                // adjust for base year if weekyear is being parsed\n                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                    DurationFieldType weeks = DurationFieldType.weeks().getField(iChrono);\n                    DurationField days = DurationFieldType.days().getField(iChrono);\n                    int weeksInYear = iChrono.weeksInYear().getMaximumValue();\n                    int parsedWeekyear = iChrono.weekyear().get(millis);\n                    if (parsedWeekyear < iDefaultYear || parsedWeekyear > iDefaultYear + 1) {\n                        if (resetFields) {\n                            throw new IllegalFieldValueException(\n                                \"Resetting the complete date results in a year outside of the range [\"\n                                + iMinYear + ',' + iMaxYear + ']', DateTimeFieldType.year(), null, null);\n                        } else {\n                            break;\n                        }\n                    }\n                    int weeksInParsedWeekyear = iChrono.weeksInYear().get(parsedWeekyear);\n                    int diffWeeks = (weeksInYear == weeksInParsedWeekyear ? 0 :\n                                     (weeksInYear > weeksInParsedWeekyear ? -1 : 1));\n                    saveField(DateTimeFieldType.weekyear(), parsedWeekyear);\n                    saveField(DateTimeFieldType.weekOfWeekyear(), savedFields[i + 1].iValue + diffWeeks);\n                    savedFields[i + 1] = new SavedField(DateTimeFieldType.weekyear(), parsedWeekyear);\n                    savedFields[i + 2] = new SavedField(DateTimeFieldType.weekOfWeekyear(),\n                                                         savedFields[i + 1].iValue + diffWeeks);\n                    i = i + 2;\n                    millis = savedFields[i].set(millis, false);\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n        ...",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c9ba0d49 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        ...\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+\n+                // adjust for base year if weekyear is being parsed\n+                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n+                    DurationFieldType weeks = DurationFieldType.weeks().getField(iChrono);\n+                    DurationField days = DurationFieldType.days().getField(iChrono);\n+                    int weeksInYear = iChrono.weeksInYear().getMaximumValue();\n+                    int parsedWeekyear = iChrono.weekyear().get(millis);\n+                    if (parsedWeekyear < iDefaultYear || parsedWeekyear > iDefaultYear + 1) {\n+                        if (resetFields) {\n+                            throw new IllegalFieldValueException(\n+                                \"Resetting the complete date results in a year outside of the range [\"\n+                                + iMinYear + ',' + iMaxYear + ']', DateTimeFieldType.year(), null, null);\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    int weeksInParsedWeekyear = iChrono.weeksInYear().get(parsedWeekyear);\n+                    int diffWeeks = (weeksInYear == weeksInParsedWeekyear ? 0 :\n+                                     (weeksInYear > weeksInParsedWeekyear ? -1 : 1));\n+                    saveField(DateTimeFieldType.weekyear(), parsedWeekyear);\n+                    saveField(DateTimeFieldType.weekOfWeekyear(), savedFields[i + 1].iValue + diffWeeks);\n+                    savedFields[i + 1] = new SavedField(DateTimeFieldType.weekyear(), parsedWeekyear);\n+                    savedFields[i + 2] = new SavedField(DateTimeFieldType.weekOfWeekyear(),\n+                                                         savedFields[i + 1].iValue + diffWeeks);\n+                    i = i + 2;\n+                    millis = savedFields[i].set(millis, false);\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+        ...\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}