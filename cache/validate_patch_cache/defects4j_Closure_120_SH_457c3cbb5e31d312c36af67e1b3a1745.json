{
    "patch": "  /**\n   * @return Whether the variable is only assigned a value once for its\n   *     lifetime.\n   */\n  boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n      return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    for (BasicBlock block = ref.getBasicBlock();\n         block != null; block = block.getParent()) {\n      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * @return The reference that provides the value for the variable at the\n   * time of the first read, if known, otherwise null.\n   *\n   * This is either the variable declaration (\"var a = ...\") or first\n   * reference following the declaration if it is an assignment.\n   */\n  Reference getInitializingReference() {\n    if (isInitializingDeclarationAt(0)) {\n      return references.get(0);\n    } else if (isInitializingAssignmentAt(0)) {\n      return references.get(0);\n    }\n    return null;\n  }\n\n  /**\n   * Constants are allowed to be defined after their first use.\n   */\n  Reference getInitializingReferenceForConstants() {\n    int size = references.size();\n    for (int i = 0; i < size; i++) {\n      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n        return references.get(i);\n      }\n    }\n    return null;\n  }\n\n  private boolean isInitializingAssignmentAt(int index) {\n    if (index < references.size() - 1 && index >= 0) {\n      Reference maybeDecl = references.get(index);\n      Reference maybeInit = references.get(index + 1);\n      if (maybeInit.isSimpleAssignmentToName() &&\n          maybeInit.getNode() != null &&\n          maybeInit.getNode().equals(maybeDecl.getNode())) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  boolean isInitializingDeclarationAt(int index) {\n    if (index >= references.size()) {\n      return false;\n    }\n    Reference r = references.get(index);\n    return r.isVarDeclaration() && r.isInitializingDeclaration();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5f0276a4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,78 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  /**\n+   * @return Whether the variable is only assigned a value once for its\n+   *     lifetime.\n+   */\n+  boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+      return false;\n+    }\n+\n+    // Make sure this assignment is not in a loop.\n+    for (BasicBlock block = ref.getBasicBlock();\n+         block != null; block = block.getParent()) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * @return The reference that provides the value for the variable at the\n+   * time of the first read, if known, otherwise null.\n+   *\n+   * This is either the variable declaration (\"var a = ...\") or first\n+   * reference following the declaration if it is an assignment.\n+   */\n+  Reference getInitializingReference() {\n+    if (isInitializingDeclarationAt(0)) {\n+      return references.get(0);\n+    } else if (isInitializingAssignmentAt(0)) {\n+      return references.get(0);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Constants are allowed to be defined after their first use.\n+   */\n+  Reference getInitializingReferenceForConstants() {\n+    int size = references.size();\n+    for (int i = 0; i < size; i++) {\n+      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+        return references.get(i);\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private boolean isInitializingAssignmentAt(int index) {\n+    if (index < references.size() - 1 && index >= 0) {\n+      Reference maybeDecl = references.get(index);\n+      Reference maybeInit = references.get(index + 1);\n+      if (maybeInit.isSimpleAssignmentToName() &&\n+          maybeInit.getNode() != null &&\n+          maybeInit.getNode().equals(maybeDecl.getNode())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  boolean isInitializingDeclarationAt(int index) {\n+    if (index >= references.size()) {\n+      return false;\n+    }\n+    Reference r = references.get(index);\n+    return r.isVarDeclaration() && r.isInitializingDeclaration();\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}