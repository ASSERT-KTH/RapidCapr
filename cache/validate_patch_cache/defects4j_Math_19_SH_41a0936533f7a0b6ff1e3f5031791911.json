{
    "patch": "            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new NumberIsTooLargeException();\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                final double[] lower = boundaries[0];\n                final double[] upper = boundaries[1];\n                boolean truncated = false;\n                for (int i = 0; i < lower.length; i++) {\n                    final double span = upper[i] - lower[i];\n                    final double scaledSpan = Math.max(Math.abs(lower[i]), Math.abs(upper[i]));\n                    if (scaledSpan > Double.MAX_VALUE / 2) {\n                        throw new NumberIsTooLargeException(scaledSpan, Double.MAX_VALUE / 2, true);\n                    }\n                    if (span > Integer.MAX_VALUE) {\n                        truncated = true;\n                        upper[i] = lower[i] + Integer.MAX_VALUE;\n                    }\n                }\n                if (truncated) {\n                    throw new NumberIsTooLargeException();\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..05fe1564c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,35 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (hasInfiniteBounds) {\n+                // If there is at least one finite bound, none can be infinite,\n+                // because mixed cases are not supported by the current code.\n+                throw new NumberIsTooLargeException();\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                final double[] lower = boundaries[0];\n+                final double[] upper = boundaries[1];\n+                boolean truncated = false;\n+                for (int i = 0; i < lower.length; i++) {\n+                    final double span = upper[i] - lower[i];\n+                    final double scaledSpan = Math.max(Math.abs(lower[i]), Math.abs(upper[i]));\n+                    if (scaledSpan > Double.MAX_VALUE / 2) {\n+                        throw new NumberIsTooLargeException(scaledSpan, Double.MAX_VALUE / 2, true);\n+                    }\n+                    if (span > Integer.MAX_VALUE) {\n+                        truncated = true;\n+                        upper[i] = lower[i] + Integer.MAX_VALUE;\n+                    }\n+                }\n+                if (truncated) {\n+                    throw new NumberIsTooLargeException();\n+                }\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: no suitable constructor found for NumberIsTooLargeException()",
    "test_result": "ERROR"
}