{
    "patch": "            if (offsetLocal > offsetAdjusted) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                final long nextLocal = nextTransition(instantAdjusted);\n                final int offsetNext = getOffset(nextLocal);\n                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                    return offsetLocal;\n                }\n                \n                if (offsetLocal < 0 && offsetAdjusted == 0) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal != prevAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n                \n                if (offsetLocal == 0 && offsetAdjusted > 0 && instantLocal + offsetAdjusted < nextTransition(instantAdjusted)) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (prevLocal != prevAdjusted) {\n                        return getOffset(prevAdjusted);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cfe8df83 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal > offsetAdjusted) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final int offsetNext = getOffset(nextLocal);\n+                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                    return offsetLocal;\n+                }\n+                \n+                if (offsetLocal < 0 && offsetAdjusted == 0) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal != prevAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                \n+                if (offsetLocal == 0 && offsetAdjusted > 0 && instantLocal + offsetAdjusted < nextTransition(instantAdjusted)) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (prevLocal != prevAdjusted) {\n+                        return getOffset(prevAdjusted);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}