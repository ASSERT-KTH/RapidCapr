{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    boolean isGetPropOrGetElem = NodeUtil.isGet(child) || NodeUtil.isGetElem(child);\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = NodeUtil.getBestJSDocInfo(child);\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceFileName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource != null && functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      if (!isGetPropOrGetElem && thisType != null && !thisType.isUnknownType()) {\n        report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else if (NodeUtil.isConstructor(child)) {\n      // Account for calling a constructor without \"new\".\n      Node constructorRoot = NodeUtil.getPrototypeAccess(child);\n      FunctionType constructorType = getJSType(constructorRoot).restrictByNotNullOrUndefined().toMaybeFunctionType();\n      if (constructorType != null) {\n        n.putProp(Node.CONSTRUCTOR_PROP, constructorRoot);\n        n.putProp(Node.ORIGINALNAME_PROP, constructorType.getSource());\n      }\n      visitParameterList(t, n, constructorType);\n      ensureTyped(t, n, constructorType != null ? constructorType.getInstanceType() : null);\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2cfc7349 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1544,6 +1544,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+    boolean isGetPropOrGetElem = NodeUtil.isGet(child) || NodeUtil.isGetElem(child);\n \n     if (!childType.canBeCalled()) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n@@ -1553,15 +1554,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n+    if (childType.isFunctionType()) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n \n       boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      JSDocInfo functionJSDocInfo = NodeUtil.getBestJSDocInfo(child);\n       if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n+        String sourceName = functionJSDocInfo.getSourceFileName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n+        isExtern = functionSource != null && functionSource.isExtern();\n       }\n \n       // Non-native constructors should not be called directly\n@@ -1575,11 +1576,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n+      // Functions with explicit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (!isGetPropOrGetElem && thisType != null && !thisType.isUnknownType()) {\n+        report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n+    } else if (NodeUtil.isConstructor(child)) {\n+      // Account for calling a constructor without \"new\".\n+      Node constructorRoot = NodeUtil.getPrototypeAccess(child);\n+      FunctionType constructorType = getJSType(constructorRoot).restrictByNotNullOrUndefined().toMaybeFunctionType();\n+      if (constructorType != null) {\n+        n.putProp(Node.CONSTRUCTOR_PROP, constructorRoot);\n+        n.putProp(Node.ORIGINALNAME_PROP, constructorType.getSource());\n+      }\n+      visitParameterList(t, n, constructorType);\n+      ensureTyped(t, n, constructorType != null ? constructorType.getInstanceType() : null);\n     } else {\n       ensureTyped(t, n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}