{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"java.\") && !functionName.startsWith(\"javax.\")) {\n          changed.add(functionName);\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..db4fef3a 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      if (child != null && child.getType() == Token.NAME) {\n+        String functionName = child.getString();\n+        if (functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"java.\") && !functionName.startsWith(\"javax.\")) {\n+          changed.add(functionName);\n+        }\n       }\n     }\n \n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n       findCalledFunctions(c, changed);\n     }\n-  }\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}