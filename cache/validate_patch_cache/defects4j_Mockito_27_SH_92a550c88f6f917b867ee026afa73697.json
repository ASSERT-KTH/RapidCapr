{
    "patch": "        if (oldMockHandler instanceof Proxy) {\n            Proxy.newProxyInstance(\n                    mock.getClass().getClassLoader(),\n                    new Class[]{mock.getClass()},\n                    (proxy, method, args) -> {\n                        Object result;\n                        try {\n                            result = method.invoke(mock, args);\n                        } catch (InvocationTargetException e) {\n                            throw e.getCause();\n                        }\n                        if (method.getReturnType().equals(void.class)) {\n                            listener.reportInvocation(new MethodInvocationReport(method.getName(), args));\n                        }\n                        return result;\n                    });\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b68ea1d54 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (oldMockHandler instanceof Proxy) {\n+            Proxy.newProxyInstance(\n+                    mock.getClass().getClassLoader(),\n+                    new Class[]{mock.getClass()},\n+                    (proxy, method, args) -> {\n+                        Object result;\n+                        try {\n+                            result = method.invoke(mock, args);\n+                        } catch (InvocationTargetException e) {\n+                            throw e.getCause();\n+                        }\n+                        if (method.getReturnType().equals(void.class)) {\n+                            listener.reportInvocation(new MethodInvocationReport(method.getName(), args));\n+                        }\n+                        return result;\n+                    });\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}