{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node maybeExpr = n.getFirstChild();\n\n  // Check if the node is an expression\n  if (!NodeUtil.isExpressionNode(maybeExpr)) {\n    return false;\n  }\n\n  Node parent = maybeExpr.getParent();\n\n  // Don't fold if the parent node is an EXPR_RESULT\n  if (parent.getType() == Token.EXPR_RESULT) {\n    return false;\n  }\n\n  // Don't fold if the parent node is a CALL or NEW node\n  if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n    return false;\n  }\n\n  // Don't fold if the block contains function declaration or function expression\n  if (NodeUtil.isFunctionDeclaration(maybeExpr) || NodeUtil.isFunctionExpression(maybeExpr)) {\n    return false;\n  }\n\n  // IE has a bug where event handlers behave differently when\n  // their return value is used vs. when their return value is in\n  // an EXPR_RESULT. It's pretty freaking weird. See:\n  // https://github.com/google/closure-compiler/issues/1093\n  // We try to detect this case, and not fold EXPR_RESULTs\n  // into other expressions.\n  if (parent.getType() == Token.IF && parent.getChildCount() == 2) {\n    Node thenBlock = parent.getLastChild();\n    Node elseBlock = thenBlock.getNext();\n    if (thenBlock.isBlock() && elseBlock != null && elseBlock.isBlock()\n        && thenBlock.getLastChild().isExprResult() && elseBlock.getLastChild().isExprResult()) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..9db14850 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,53 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node maybeExpr = n.getFirstChild();\n+\n+  // Check if the node is an expression\n+  if (!NodeUtil.isExpressionNode(maybeExpr)) {\n+    return false;\n+  }\n+\n+  Node parent = maybeExpr.getParent();\n \n+  // Don't fold if the parent node is an EXPR_RESULT\n+  if (parent.getType() == Token.EXPR_RESULT) {\n     return false;\n   }\n \n+  // Don't fold if the parent node is a CALL or NEW node\n+  if (parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n+    return false;\n+  }\n+\n+  // Don't fold if the block contains function declaration or function expression\n+  if (NodeUtil.isFunctionDeclaration(maybeExpr) || NodeUtil.isFunctionExpression(maybeExpr)) {\n+    return false;\n+  }\n+\n+  // IE has a bug where event handlers behave differently when\n+  // their return value is used vs. when their return value is in\n+  // an EXPR_RESULT. It's pretty freaking weird. See:\n+  // https://github.com/google/closure-compiler/issues/1093\n+  // We try to detect this case, and not fold EXPR_RESULTs\n+  // into other expressions.\n+  if (parent.getType() == Token.IF && parent.getChildCount() == 2) {\n+    Node thenBlock = parent.getLastChild();\n+    Node elseBlock = thenBlock.getNext();\n+    if (thenBlock.isBlock() && elseBlock != null && elseBlock.isBlock()\n+        && thenBlock.getLastChild().isExprResult() && elseBlock.getLastChild().isExprResult()) {\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}