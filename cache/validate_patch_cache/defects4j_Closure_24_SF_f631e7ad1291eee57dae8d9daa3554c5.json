{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node functionNode = t.getScopeRoot();\n    // Check that the goog.scope function is being called with an anonymous function\n    if (functionNode != null\n            && functionNode.isCall()\n            && functionNode.getFirstChild() != null\n            && functionNode.getFirstChild().matchesQualifiedName(\"goog.scope\")\n            && functionNode.getSecondChild().isFunction()) {\n        Node function = functionNode.getSecondChild();\n        if (function.getSecondChild() != null) {\n            report(t, function.getSecondChild(), SINGLE_PARAM_EXPECTED);\n            return;\n        } else {\n            Node param = function.getFirstChild();\n            if (param.isParamList() || param.isBlock()) {\n                report(t, param, SINGLE_PARAM_EXPECTED);\n                return;\n            } else {\n                // Find all alias declarations in the goog.scope function\n                for (Node child = param.getFirstChild(); child != null; child = child.getNext()) {\n                    if (child.isVar() && child.getFirstChild() != null && child.getFirstChild().isName()) {\n                        Node name = child.getFirstChild();\n                        Var aliasVar = scope.getVar(name.getString());\n                        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                            aliases.put(name.getString(), aliasVar);\n                            transformation.addAlias(name.getString(), qualifiedName);\n                        } else {\n                            report(t, name, GOOG_SCOPE_NON_ALIAS_LOCAL, name.getString());\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        return; // Not a goog.scope call, nothing to do\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..366d45e5 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,45 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node functionNode = t.getScopeRoot();\n+    // Check that the goog.scope function is being called with an anonymous function\n+    if (functionNode != null\n+            && functionNode.isCall()\n+            && functionNode.getFirstChild() != null\n+            && functionNode.getFirstChild().matchesQualifiedName(\"goog.scope\")\n+            && functionNode.getSecondChild().isFunction()) {\n+        Node function = functionNode.getSecondChild();\n+        if (function.getSecondChild() != null) {\n+            report(t, function.getSecondChild(), SINGLE_PARAM_EXPECTED);\n+            return;\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+            Node param = function.getFirstChild();\n+            if (param.isParamList() || param.isBlock()) {\n+                report(t, param, SINGLE_PARAM_EXPECTED);\n+                return;\n+            } else {\n+                // Find all alias declarations in the goog.scope function\n+                for (Node child = param.getFirstChild(); child != null; child = child.getNext()) {\n+                    if (child.isVar() && child.getFirstChild() != null && child.getFirstChild().isName()) {\n+                        Node name = child.getFirstChild();\n+                        Var aliasVar = scope.getVar(name.getString());\n+                        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                            aliases.put(name.getString(), aliasVar);\n+                            transformation.addAlias(name.getString(), qualifiedName);\n+                        } else {\n+                            report(t, name, GOOG_SCOPE_NON_ALIAS_LOCAL, name.getString());\n+                        }\n+                    }\n+                }\n+            }\n         }\n-      }\n+    } else {\n+        return; // Not a goog.scope call, nothing to do\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}