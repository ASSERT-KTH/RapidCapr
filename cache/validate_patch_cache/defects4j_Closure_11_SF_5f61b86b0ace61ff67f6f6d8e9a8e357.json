{
    "patch": "public static String getProp(String propName) throws IOException {\n    String result = \"\";\n    InputStream inputStream = null;\n    try {\n        Properties prop = new Properties();\n        String propFileName = \"config.properties\";\n\n        inputStream = ConfigReader.class.getClassLoader().getResourceAsStream(propFileName);\n\n        if (inputStream != null) {\n            prop.load(inputStream);\n        } else {\n            throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n        }\n        result = prop.getProperty(propName, \"\");\n        if (result.trim().isEmpty()) {\n            System.err.println(\"Property value not found for \" + propName);\n        }\n    } catch (Exception e) {\n        System.err.println(\"Exception: \" + e);\n    } finally {\n        if (inputStream != null) {\n            inputStream.close();\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..e99d1947 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String propName) throws IOException {\n+    String result = \"\";\n+    InputStream inputStream = null;\n+    try {\n+        Properties prop = new Properties();\n+        String propFileName = \"config.properties\";\n+\n+        inputStream = ConfigReader.class.getClassLoader().getResourceAsStream(propFileName);\n+\n+        if (inputStream != null) {\n+            prop.load(inputStream);\n+        } else {\n+            throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n+        }\n+        result = prop.getProperty(propName, \"\");\n+        if (result.trim().isEmpty()) {\n+            System.err.println(\"Property value not found for \" + propName);\n+        }\n+    } catch (Exception e) {\n+        System.err.println(\"Exception: \" + e);\n+    } finally {\n+        if (inputStream != null) {\n+            inputStream.close();\n+        }\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}