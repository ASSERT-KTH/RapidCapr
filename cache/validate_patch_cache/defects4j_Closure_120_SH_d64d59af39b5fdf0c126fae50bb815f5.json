{
    "patch": "      if (block.isFunction) {\n        // Function declarations have their own var scope.\n        return getOneAndOnlyAssignment() == ref;\n      } else if (block.isLoop) {\n        return false;\n      } else if (!block.equals(ref.getBasicBlock())) {\n        // If the block is not the one containing the assignment, the variable may be modified elsewhere.\n        return false;\n      } else {\n        return true; // If we reach here, we know that the variable is assigned exactly once in its lifetime.\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d7c4f277 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Function declarations have their own var scope.\n+        return getOneAndOnlyAssignment() == ref;\n+      } else if (block.isLoop) {\n+        return false;\n+      } else if (!block.equals(ref.getBasicBlock())) {\n+        // If the block is not the one containing the assignment, the variable may be modified elsewhere.\n+        return false;\n+      } else {\n+        return true; // If we reach here, we know that the variable is assigned exactly once in its lifetime.\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}