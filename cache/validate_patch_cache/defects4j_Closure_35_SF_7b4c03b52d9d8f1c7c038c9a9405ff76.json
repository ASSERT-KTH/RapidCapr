{
    "patch": "  /* Fix Issue 669: This method calculates inferred property types (JSType) based on the\n     constraint object. Additionally, it checks for mismatch on any declared properties. */\n  void inferPropertyTypes(\n    JSType type, JSType constraint, Node n, List<JSError> warnings) {\n    if (type == null || constraint == null) {\n      return;\n    }\n    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType declaredPropType = objType.getDeclaredPropertyType(prop);\n            JSType narrowed = declaredPropType.restrictByNotNullOrUndefined();\n            if (!narrowed.isSubtype(propType) && !propType.isSubtype(narrowed)) {\n              warnings.add(JSError.make(n, ReportLevel.WARNING, CheckLevel.STRICT,\n                  TypeValidator.NEW_PROPERTY_TYPE_MISMATCH, prop, propType.toString(),\n                  declaredPropType.toString()));\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..8e03577e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,13 +1111,14 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+  /* Fix Issue 669: This method calculates inferred property types (JSType) based on the\n+     constraint object. Additionally, it checks for mismatch on any declared properties. */\n+  void inferPropertyTypes(\n+    JSType type, JSType constraint, Node n, List<JSError> warnings) {\n     if (type == null || constraint == null) {\n       return;\n     }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n@@ -1126,27 +1127,19 @@ class TypeInference\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType declaredPropType = objType.getDeclaredPropertyType(prop);\n+            JSType narrowed = declaredPropType.restrictByNotNullOrUndefined();\n+            if (!narrowed.isSubtype(propType) && !propType.isSubtype(narrowed)) {\n+              warnings.add(JSError.make(n, ReportLevel.WARNING, CheckLevel.STRICT,\n+                  TypeValidator.NEW_PROPERTY_TYPE_MISMATCH, prop, propType.toString(),\n+                  declaredPropType.toString()));\n+            }\n           }\n         }\n-      }\n-    }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}