{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // Subtyping is contravariant in the parameter types.\n    // For each parameter of this, there must exist a corresponding parameter in that\n    // such that the JSType of that is a subtype of the JSType of this.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        if (thisParamType == null && thatParamType == null) {\n            // Both parameters are optional, so this one matches.\n            // Skip to the next set of parameters.\n            thisParam = thisParam.getNext();\n            thatParam = thatParam.getNext();\n            continue;\n        }\n\n        if (thisParamType == null || thatParamType == null) {\n            // One is optional and the other is required, or they are both required but one is missing.\n            // This does not match, so return false.\n            return false;\n        }\n\n        if (thatParamType.isSubtype(thisParamType)) {\n            // The types match, so move on to the next parameter pair.\n            thisParam = thisParam.getNext();\n            thatParam = thatParam.getNext();\n        } else if (thisParam.isVarArgs() && thatParam.isVarArgs()) {\n            // If both sets of parameters are varargs, but the types mismatch,\n            // continue to the next parameter pair, as the typechecking of varargs\n            // is more forgiving.\n            thisParam = null;\n            thatParam = null;\n            continue;\n        } else if (thisParam.isVarArgs() || thatParam.isVarArgs()) {\n            // One set of parameters is varargs and the other is not.\n            return false;\n        } else {\n            // The parameter types did not match, so return false.\n            return false;\n        }\n    }\n\n    // If one function has more required parameter types than the other, it is not a subtype.\n    if (thisParam != null && !thisParam.isVarArgs()) {\n        return false;\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..32ab9dec 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,9 +77,9 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n@@ -89,69 +89,59 @@ final class ArrowType extends JSType {\n \n     // this.returnType <: that.returnType (covariant)\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // Subtyping is contravariant in the parameter types.\n+    // For each parameter of this, there must exist a corresponding parameter in that\n+    // such that the JSType of that is a subtype of the JSType of this.\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType thatParamType = thatParam.getJSType();\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        if (thisParamType == null && thatParamType == null) {\n+            // Both parameters are optional, so this one matches.\n+            // Skip to the next set of parameters.\n+            thisParam = thisParam.getNext();\n+            thatParam = thatParam.getNext();\n+            continue;\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+        if (thisParamType == null || thatParamType == null) {\n+            // One is optional and the other is required, or they are both required but one is missing.\n+            // This does not match, so return false.\n+            return false;\n+        }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+        if (thatParamType.isSubtype(thisParamType)) {\n+            // The types match, so move on to the next parameter pair.\n+            thisParam = thisParam.getNext();\n+            thatParam = thatParam.getNext();\n+        } else if (thisParam.isVarArgs() && thatParam.isVarArgs()) {\n+            // If both sets of parameters are varargs, but the types mismatch,\n+            // continue to the next parameter pair, as the typechecking of varargs\n+            // is more forgiving.\n+            thisParam = null;\n+            thatParam = null;\n+            continue;\n+        } else if (thisParam.isVarArgs() || thatParam.isVarArgs()) {\n+            // One set of parameters is varargs and the other is not.\n+            return false;\n+        } else {\n+            // The parameter types did not match, so return false.\n+            return false;\n+        }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If one function has more required parameter types than the other, it is not a subtype.\n+    if (thisParam != null && !thisParam.isVarArgs()) {\n+        return false;\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}