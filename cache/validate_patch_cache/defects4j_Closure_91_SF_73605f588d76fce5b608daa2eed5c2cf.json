{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.hasThisType() ||jsDoc.isOverride())) {\n            return false;\n        }\n\n        Node functionParent = n.getParent();\n        if (functionParent.isExprResult() && functionParent.getParent() instanceof Node) {\n            Node functionOwner = functionParent.getParent();\n            // Don't traverse a function that is the right-hand side of an assignment expression that is not an object property.\n            if (functionOwner.getType() == Token.ASSIGN &&\n                !isAssignmentTargetToObjectProperty(functionOwner.getFirstChild())) {\n                return false;\n            } else if (!NodeUtil.isStatement(functionOwner)) {\n                // Don't traverse functions unless they would normally be able to have a @this annotation associated with them. \n                // In other words, ensure that the parent of the function node is a block, a name, an assign, or an object literal key.\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n// Checks whether an assignment target is an object property.\nprivate boolean isAssignmentTargetToObjectProperty(Node assignTarget) {\n    if (assignTarget.isGetProp()) {\n        return isAssignmentTargetToObjectProperty(assignTarget.getFirstChild());\n    } else {\n        return assignTarget.isName() ||\n               assignTarget.isThis() ||\n               assignTarget.isSuper() ||\n               assignTarget.isFunction();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c74bd41c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,43 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        // Don't traverse functions that have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.hasThisType() ||jsDoc.isOverride())) {\n             return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n         }\n-      }\n+\n+        Node functionParent = n.getParent();\n+        if (functionParent.isExprResult() && functionParent.getParent() instanceof Node) {\n+            Node functionOwner = functionParent.getParent();\n+            // Don't traverse a function that is the right-hand side of an assignment expression that is not an object property.\n+            if (functionOwner.getType() == Token.ASSIGN &&\n+                !isAssignmentTargetToObjectProperty(functionOwner.getFirstChild())) {\n+                return false;\n+            } else if (!NodeUtil.isStatement(functionOwner)) {\n+                // Don't traverse functions unless they would normally be able to have a @this annotation associated with them. \n+                // In other words, ensure that the parent of the function node is a block, a name, an assign, or an object literal key.\n+                return false;\n+            }\n+        }\n     }\n \n     return true;\n-  }\n+}\n+\n+// Checks whether an assignment target is an object property.\n+private boolean isAssignmentTargetToObjectProperty(Node assignTarget) {\n+    if (assignTarget.isGetProp()) {\n+        return isAssignmentTargetToObjectProperty(assignTarget.getFirstChild());\n+    } else {\n+        return assignTarget.isName() ||\n+               assignTarget.isThis() ||\n+               assignTarget.isSuper() ||\n+               assignTarget.isFunction();\n+    }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}