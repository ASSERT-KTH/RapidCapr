{
    "patch": "         } else if (block.isLoop) {\n           return false;\n         }\n       }\n\n-      return true;\n+      // Check if there is more than one assignment to the variable\n+      for (int i = 0; i < references.size(); i++) {\n+        if (references.get(i).isAssignmentToName() && i != index) {\n+          return false;\n+        }\n+      }\n+      return true;\n     }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5fa968cb 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+         } else if (block.isLoop) {\n+           return false;\n+         }\n+       }\n+\n+-      return true;\n++      // Check if there is more than one assignment to the variable\n++      for (int i = 0; i < references.size(); i++) {\n++        if (references.get(i).isAssignmentToName() && i != index) {\n++          return false;\n++        }\n++      }\n++      return true;\n+     }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}