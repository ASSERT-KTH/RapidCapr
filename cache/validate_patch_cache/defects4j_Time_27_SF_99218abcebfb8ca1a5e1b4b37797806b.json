{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    } else if (size == 2) {\n        Object first = elementPairs.get(0);\n        Object second = elementPairs.get(1);\n        if (!(first instanceof Separator) && !(second instanceof Separator)) {\n            Object[] comp = createComposite(elementPairs);\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    boolean containsSeparator = false;\n    for (int i = 0; i < size; i += 2) {\n        Object obj = elementPairs.get(i);\n        if (!(obj instanceof Separator)) {\n            containsSeparator = true;\n            break;\n        }\n    }\n    if (!containsSeparator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        for (int i = 2; i < size; i += 2) {\n            sep = sep.finish(null, null);\n            sep = sep.appendSeparator((Separator) elementPairs.get(i));\n        }\n        return new PeriodFormatter(sep, sep);\n    }\n\n    List<Object> printers = new ArrayList<>();\n    List<Object> parsers = new ArrayList<>();\n    Separator defS = null;\n\n    // build lists of printers, parsers and default separator\n    for (int i = 0; i < size; i += 2) {\n        Object obj = elementPairs.get(i);\n        if (i == 0 && obj instanceof Separator) {\n            defS = (Separator) obj;\n        }\n        printers.add(obj instanceof PeriodPrinter ? obj : null);\n        parsers.add(obj instanceof PeriodParser ? obj : null);\n    }\n\n    // remove nulls and smaller lists\n    printers.removeAll(Collections.singleton(null));\n    parsers.removeAll(Collections.singleton(null));\n    int printersSize = printers.size();\n    int parsersSize = parsers.size();\n    if (printersSize < parsersSize) {\n        parsers.subList(printersSize, parsersSize).clear();\n    } else if (parsersSize < printersSize) {\n        printers.subList(parsersSize, printersSize).clear();\n    }\n\n    // recursive call to create formatter\n    Separator sep = defS;\n    if (printersSize != 0 && parsersSize != 0) {\n        PeriodFormatter formatter = toFormatter(createPairs(printers, parsers), false, false);\n        sep = defS == null ? formatter.getDefaultSeparator() : defS.finish(formatter.getPrinter(), formatter.getParser());\n    } else if (defS == null) {\n        throw new IllegalStateException(\"Cannot create formatter, elementPairs: \" + elementPairs);\n    }\n\n    // append separators\n    for (int i = 1; i < size; i += 2) {\n        Separator s = (Separator) elementPairs.get(i);\n        sep = sep == null ? s : sep.appendSeparator(s);\n    }\n    return new PeriodFormatter(sep, sep);\n}\n\nprivate static List<Object> createPairs(List<Object> list1, List<Object> list2) {\n    List<Object> pairs = new ArrayList<>();\n    Iterator<Object> i1 = list1.iterator(), i2 = list2.iterator();\n    while (i1.hasNext() && i2.hasNext()) {\n        pairs.add(i1.next());\n        pairs.add(i2.next());\n    }\n    return pairs;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d9ee904a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,105 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n         } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n+        }\n+    } else if (size == 2) {\n+        Object first = elementPairs.get(0);\n+        Object second = elementPairs.get(1);\n+        if (!(first instanceof Separator) && !(second instanceof Separator)) {\n+            Object[] comp = createComposite(elementPairs);\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n \n+    boolean containsSeparator = false;\n+    for (int i = 0; i < size; i += 2) {\n+        Object obj = elementPairs.get(i);\n+        if (!(obj instanceof Separator)) {\n+            containsSeparator = true;\n+            break;\n+        }\n+    }\n+    if (!containsSeparator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        for (int i = 2; i < size; i += 2) {\n+            sep = sep.finish(null, null);\n+            sep = sep.appendSeparator((Separator) elementPairs.get(i));\n+        }\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    List<Object> printers = new ArrayList<>();\n+    List<Object> parsers = new ArrayList<>();\n+    Separator defS = null;\n+\n+    // build lists of printers, parsers and default separator\n+    for (int i = 0; i < size; i += 2) {\n+        Object obj = elementPairs.get(i);\n+        if (i == 0 && obj instanceof Separator) {\n+            defS = (Separator) obj;\n+        }\n+        printers.add(obj instanceof PeriodPrinter ? obj : null);\n+        parsers.add(obj instanceof PeriodParser ? obj : null);\n+    }\n+\n+    // remove nulls and smaller lists\n+    printers.removeAll(Collections.singleton(null));\n+    parsers.removeAll(Collections.singleton(null));\n+    int printersSize = printers.size();\n+    int parsersSize = parsers.size();\n+    if (printersSize < parsersSize) {\n+        parsers.subList(printersSize, parsersSize).clear();\n+    } else if (parsersSize < printersSize) {\n+        printers.subList(parsersSize, printersSize).clear();\n+    }\n+\n+    // recursive call to create formatter\n+    Separator sep = defS;\n+    if (printersSize != 0 && parsersSize != 0) {\n+        PeriodFormatter formatter = toFormatter(createPairs(printers, parsers), false, false);\n+        sep = defS == null ? formatter.getDefaultSeparator() : defS.finish(formatter.getPrinter(), formatter.getParser());\n+    } else if (defS == null) {\n+        throw new IllegalStateException(\"Cannot create formatter, elementPairs: \" + elementPairs);\n+    }\n+\n+    // append separators\n+    for (int i = 1; i < size; i += 2) {\n+        Separator s = (Separator) elementPairs.get(i);\n+        sep = sep == null ? s : sep.appendSeparator(s);\n+    }\n+    return new PeriodFormatter(sep, sep);\n+}\n+\n+private static List<Object> createPairs(List<Object> list1, List<Object> list2) {\n+    List<Object> pairs = new ArrayList<>();\n+    Iterator<Object> i1 = list1.iterator(), i2 = list2.iterator();\n+    while (i1.hasNext() && i2.hasNext()) {\n+        pairs.add(i1.next());\n+        pairs.add(i2.next());\n+    }\n+    return pairs;\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}