{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double v1x = v1.getX();\n      double v1y = v1.getY();\n      double v1z = v1.getZ();\n      double v2x = v2.getX();\n      double v2y = v2.getY();\n      double v2z = v2.getZ();\n      double ax = Math.abs(v1x);\n      double ay = Math.abs(v1y);\n      double az = Math.abs(v1z);\n      double bx = Math.abs(v2x);\n      double by = Math.abs(v2y);\n      double bz = Math.abs(v2z);\n      double max = Math.max(ax, Math.max(ay, az));\n      double eps = 1e-16;\n      double factor = 1.0;\n      if (max < 380) {\n        if (bx < eps && by < eps && bz < eps) {\n          return new Vector3D(0.0, 0.0, 0.0);\n        }\n        double d1 = bx;\n        double d2 = by;\n        double d3 = bz;\n        if (d1 < d2) {\n          double temp = d1;\n          d1 = d2;\n          d2 = temp;\n        }\n        if (d2 < d3) {\n          double temp = d2;\n          d2 = d3;\n          d3 = temp;\n        }\n        if (d1 < d2) {\n          double temp = d1;\n          d1 = d2;\n          d2 = temp;\n        }\n        if ((d1 * 3.1e-11) < d3) {\n          double vh = 1.0 / d1;\n          factor = vh * d3;\n        }\n      }\n      Vector3D v3 = new Vector3D(v1x - v2x * factor, v1y - v2y * factor, v1z - v2z * factor);\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v3.y * v2z - v3.z * v2y, v3.z * v2x - v3.x * v2z, v3.x * v2y - v3.y * v2x);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..acc8827b4 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,22 +456,53 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n+      double v1x = v1.getX();\n+      double v1y = v1.getY();\n+      double v1z = v1.getZ();\n+      double v2x = v2.getX();\n+      double v2y = v2.getY();\n+      double v2z = v2.getZ();\n+      double ax = Math.abs(v1x);\n+      double ay = Math.abs(v1y);\n+      double az = Math.abs(v1z);\n+      double bx = Math.abs(v2x);\n+      double by = Math.abs(v2y);\n+      double bz = Math.abs(v2z);\n+      double max = Math.max(ax, Math.max(ay, az));\n+      double eps = 1e-16;\n+      double factor = 1.0;\n+      if (max < 380) {\n+        if (bx < eps && by < eps && bz < eps) {\n+          return new Vector3D(0.0, 0.0, 0.0);\n+        }\n+        double d1 = bx;\n+        double d2 = by;\n+        double d3 = bz;\n+        if (d1 < d2) {\n+          double temp = d1;\n+          d1 = d2;\n+          d2 = temp;\n+        }\n+        if (d2 < d3) {\n+          double temp = d2;\n+          d2 = d3;\n+          d3 = temp;\n+        }\n+        if (d1 < d2) {\n+          double temp = d1;\n+          d1 = d2;\n+          d2 = temp;\n+        }\n+        if ((d1 * 3.1e-11) < d3) {\n+          double vh = 1.0 / d1;\n+          factor = vh * d3;\n+        }\n+      }\n+      Vector3D v3 = new Vector3D(v1x - v2x * factor, v1y - v2y * factor, v1z - v2z * factor);\n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n+      return new Vector3D(v3.y * v2z - v3.z * v2y, v3.z * v2x - v3.x * v2z, v3.x * v2y - v3.y * v2x);\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}