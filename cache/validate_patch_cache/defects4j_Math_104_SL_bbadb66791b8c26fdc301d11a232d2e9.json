{
    "patch": "private static final double DEFAULT_EPSILON = 1e-9;\n\npublic static double regularizedGammaP(double a, double x) {\n    return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n}\n\nprivate static double lanczos(double z) {\n    // implementation omitted for brevity\n}\n\nprivate static double regularizedGammaP(double a, double x,\n                                       double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    }\n\n    double gln = Gamma.logGamma(a);\n    double ap = a;\n    double sum = 1.0 / a;\n    double del = sum;\n    for (int n = 1; n <= maxIterations; n++) {\n        ++ap;\n        del *= x / ap;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * epsilon) {\n            return sum * Math.exp(-x + a * Math.log(x) - gln);\n        }\n    }\n    throw new MaxIterationsExceededException(maxIterations);\n}\n\nprivate static double regularizedGammaQ(double a, double x,\n                                       double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 1.0;\n    }\n\n    if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n\n    double gln = Gamma.logGamma(a);\n    double b = x + 1 - a;\n    double c = 1 / DEFAULT_EPSILON;\n    double d = 1 / b;\n    double h = d;\n    for (int i = 1; i <= maxIterations; i++) {\n        double an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < Double.MIN_NORMAL) {\n            d = Double.MIN_NORMAL;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < Double.MIN_NORMAL) {\n            c = Double.MIN_NORMAL;\n        }\n        d = 1 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) <= epsilon) {\n            return h * Math.exp(-x + a * Math.log(x) - gln);\n        }\n    }\n    throw new MaxIterationsExceededException(maxIterations);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}