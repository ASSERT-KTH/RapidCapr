{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        Set<String> inferredProps = new HashSet<>();\n        for (String propName : objType.getOwnPropertyNames()) {\n          if (objType.getPropertyType(propName).isEquivalentTo(getNativeType(UNKNOWN_TYPE))) {\n            inferredProps.add(propName);\n          }\n        }\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (!inferredProps.contains(prop)) {\n            continue;\n          }\n          JSType propType = constraintObj.getPropertyType(prop);\n          objType.defineInferredProperty(prop, propType, null);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..35f0bc40 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,18 +1121,19 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+        Set<String> inferredProps = new HashSet<>();\n+        for (String propName : objType.getOwnPropertyNames()) {\n+          if (objType.getPropertyType(propName).isEquivalentTo(getNativeType(UNKNOWN_TYPE))) {\n+            inferredProps.add(propName);\n+          }\n+        }\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!inferredProps.contains(prop)) {\n+            continue;\n           }\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          objType.defineInferredProperty(prop, propType, null);\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}