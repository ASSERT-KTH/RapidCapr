{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    int days = getDays();\n    int weeks = getWeeks();\n    int months = getMonths();\n    int years = getYears();\n\n    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n    boolean weeksSupported  = type.isSupported(DurationFieldType.weeks());\n    boolean yearsSupported  = type.isSupported(DurationFieldType.years());\n\n    if (monthsSupported) {\n        months += years * 12;\n        months += (weeks * 7 + days) / 30;\n        years = months / 12;\n        months %= 12;\n    } else if (weeksSupported) {\n        days += weeks * 7;\n    }\n\n    if (yearsSupported) {\n        years += months / 12;\n        months %= 12;\n    }\n\n    if (weeksSupported) {\n        weeks = days / 7;\n        days %= 7;\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(weeks)\n            .withDays(days);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..62ec92f4 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,49 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    int months = getMonths();\n+    int years = getYears();\n+\n+    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n+    boolean weeksSupported  = type.isSupported(DurationFieldType.weeks());\n+    boolean yearsSupported  = type.isSupported(DurationFieldType.years());\n+\n+    if (monthsSupported) {\n+        months += years * 12;\n+        months += (weeks * 7 + days) / 30;\n+        years = months / 12;\n+        months %= 12;\n+    } else if (weeksSupported) {\n+        days += weeks * 7;\n+    }\n+\n+    if (yearsSupported) {\n+        years += months / 12;\n+        months %= 12;\n     }\n \n+    if (weeksSupported) {\n+        weeks = days / 7;\n+        days %= 7;\n+    }\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(weeks)\n+            .withDays(days);\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1W5D>",
    "test_result": "FAIL"
}