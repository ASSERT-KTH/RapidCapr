{
    "patch": "case Token.CATCH: // Handle global names in catch block\n    Node catchParam = n.getFirstChild();\n    String paramName = catchParam.getString();\n    if (!scope.isDeclared(paramName, true)) {\n        Var var = scope.getVar(paramName);\n        if (var == null || !var.isGlobal()) {\n            scope.declare(paramName, n, NameDeclaration.Kind.LET, false);\n        }\n    }\n    break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..9fb07f37 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,16 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.CATCH: // Handle global names in catch block\n+    Node catchParam = n.getFirstChild();\n+    String paramName = catchParam.getString();\n+    if (!scope.isDeclared(paramName, true)) {\n+        Var var = scope.getVar(paramName);\n+        if (var == null || !var.isGlobal()) {\n+            scope.declare(paramName, n, NameDeclaration.Kind.LET, false);\n+        }\n+    }\n+    break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}