{
    "patch": "    // Handle entry point function specially: It gets defined globally\n    if (n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(n)) {\n      defineDeclaredFunction(n, parent);\n      return;\n    }\n\n    if (n == scope.getRootNode()) {\n      Node enclosingFunction = NodeUtil.getEnclosingNode(\n          parent, Token.FUNCTION, Token.SCRIPT);\n      if (enclosingFunction != null) {\n        defineDeclaredFunction(enclosingFunction, enclosingFunction.getParent());\n        return;\n      }\n    } else if (n.getType() == Token.LP) {\n      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n        defineDeclaredFunction(grandparent, grandparent.getParent());\n        return;\n      } else if (parent == scope.getRootNode() || parent.getType() == Token.SCRIPT) {\n        handleFunctionInputs(parent);\n        return;\n      }\n    }\n    switch (n.getType()) {\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..569b4fe2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    // Handle entry point function specially: It gets defined globally\n+    if (n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(n)) {\n+      defineDeclaredFunction(n, parent);\n+      return;\n+    }\n+\n+    if (n == scope.getRootNode()) {\n+      Node enclosingFunction = NodeUtil.getEnclosingNode(\n+          parent, Token.FUNCTION, Token.SCRIPT);\n+      if (enclosingFunction != null) {\n+        defineDeclaredFunction(enclosingFunction, enclosingFunction.getParent());\n+        return;\n+      }\n+    } else if (n.getType() == Token.LP) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n+        defineDeclaredFunction(grandparent, grandparent.getParent());\n+        return;\n+      } else if (parent == scope.getRootNode() || parent.getType() == Token.SCRIPT) {\n+        handleFunctionInputs(parent);\n+        return;\n       }\n     }\n+    switch (n.getType()) {\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}