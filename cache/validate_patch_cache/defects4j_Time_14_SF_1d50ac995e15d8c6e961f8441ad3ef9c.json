{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    Chronology chrono = partial.getChronology();\n    DateTimeField field = partial.getField(fieldIndex);\n    long curValue = values[fieldIndex];\n    long newValue = field.add(curValue, valueToAdd);\n    int[] newValues = Arrays.copyOf(values, values.length);\n    newValues[fieldIndex] = (int) newValue;\n\n    // Check if new date is a legal date\n    if (fieldIndex == 1 || fieldIndex == 2) {  // for monthOfYear and dayOfMonth\n        if (newValue < 1) {\n            // for negative months or days\n            // reduce the value repeatedly until a legal date is found\n            while (newValue < field.getMinimumValue()) {\n                newValues[fieldIndex - 1]--;\n                newValue = field.add(newValue, field.getMaximumValue() - field.getMinimumValue() + 1);\n            }\n        } else {\n            // for positive months or days\n            // increase the value repeatedly until a legal date is found\n            int maxVal = Math.min(field.getMaximumValue(), field.getMaximumValue(newValues, newValue));\n            while (newValue > maxVal) {\n                newValues[fieldIndex - 1]++;\n                newValue = field.add(newValue, field.getMinimumValue() - field.getMaximumValue() - 1);\n                maxVal = Math.min(field.getMaximumValue(), field.getMaximumValue(newValues, newValue));\n            }\n        }\n    }\n\n    // Check if the new date is valid in the next Chronology if it has changed\n    Chronology newChrono = partial.getField(fieldIndex).getChronology();\n    if (chrono != newChrono) {\n        Partial newPartial = new Partial(newChrono, newValues, partial.getFields());\n        if (!newChrono.validate(newPartial)) {\n            throw new IllegalFieldValueException(field.getType(), newValue, field.getMinimumValue(), field.getMaximumValue(), null);\n        }\n    } else {\n        // Check that the new date is still valid\n        if (!field.isSupported(newChrono)) {\n            throw new IllegalFieldValueException(field.getType(), null, null, null, null);\n        } else if (newValue < field.getMinimumValue(newChrono) || newValue > field.getMaximumValue(newChrono)) {\n            throw new IllegalFieldValueException(field.getType(), newValue, field.getMinimumValue(newChrono), field.getMaximumValue(newChrono), null);\n        }\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..54563ebb 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    Chronology chrono = partial.getChronology();\n+    DateTimeField field = partial.getField(fieldIndex);\n+    long curValue = values[fieldIndex];\n+    long newValue = field.add(curValue, valueToAdd);\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    newValues[fieldIndex] = (int) newValue;\n+\n+    // Check if new date is a legal date\n+    if (fieldIndex == 1 || fieldIndex == 2) {  // for monthOfYear and dayOfMonth\n+        if (newValue < 1) {\n+            // for negative months or days\n+            // reduce the value repeatedly until a legal date is found\n+            while (newValue < field.getMinimumValue()) {\n+                newValues[fieldIndex - 1]--;\n+                newValue = field.add(newValue, field.getMaximumValue() - field.getMinimumValue() + 1);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // for positive months or days\n+            // increase the value repeatedly until a legal date is found\n+            int maxVal = Math.min(field.getMaximumValue(), field.getMaximumValue(newValues, newValue));\n+            while (newValue > maxVal) {\n+                newValues[fieldIndex - 1]++;\n+                newValue = field.add(newValue, field.getMinimumValue() - field.getMaximumValue() - 1);\n+                maxVal = Math.min(field.getMaximumValue(), field.getMaximumValue(newValues, newValue));\n+            }\n         }\n     }\n \n+    // Check if the new date is valid in the next Chronology if it has changed\n+    Chronology newChrono = partial.getField(fieldIndex).getChronology();\n+    if (chrono != newChrono) {\n+        Partial newPartial = new Partial(newChrono, newValues, partial.getFields());\n+        if (!newChrono.validate(newPartial)) {\n+            throw new IllegalFieldValueException(field.getType(), newValue, field.getMinimumValue(), field.getMaximumValue(), null);\n+        }\n+    } else {\n+        // Check that the new date is still valid\n+        if (!field.isSupported(newChrono)) {\n+            throw new IllegalFieldValueException(field.getType(), null, null, null, null);\n+        } else if (newValue < field.getMinimumValue(newChrono) || newValue > field.getMaximumValue(newChrono)) {\n+            throw new IllegalFieldValueException(field.getType(), newValue, field.getMinimumValue(newChrono), field.getMaximumValue(newChrono), null);\n+        }\n+    }\n+\n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}