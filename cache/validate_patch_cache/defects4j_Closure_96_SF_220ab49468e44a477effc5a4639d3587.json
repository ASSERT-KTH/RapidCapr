{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  // For var_args functions with no formal parameters, we need to\n  // handle excess arguments like normal positional parameters.\n  if (functionType.isVarArgs() && !functionType.hasFormalParameters()) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n    int ordinal = 0;\n    while (arguments.hasNext() && ordinal < minArgs) {\n      Node argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n                                                getJSType(argument),\n                                                functionType.getReturnType(),\n                                                call, ordinal);\n    }\n  } else {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() && parameters.hasNext()) {\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n                                                getJSType(argument),\n                                                getJSType(parameter),\n                                                call, ordinal);\n    }\n\n    // Handle excess arguments for var_args types\n    if (functionType.isVarArgs()) {\n      while (arguments.hasNext()) {\n        Node argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n                                                  getJSType(argument),\n                                                  functionType.getReturnType(),\n                                                  call, ordinal++);\n      }\n    }\n  }\n\n  if (numArgs < minArgs || numArgs > maxArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..0d45e0d6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  // For var_args functions with no formal parameters, we need to\n+  // handle excess arguments like normal positional parameters.\n+  if (functionType.isVarArgs() && !functionType.hasFormalParameters()) {\n+    Iterator<Node> arguments = call.children().iterator();\n+    arguments.next(); // skip the function name\n+    int ordinal = 0;\n+    while (arguments.hasNext() && ordinal < minArgs) {\n+      Node argument = arguments.next();\n+      ordinal++;\n+\n+      validator.expectArgumentMatchesParameter(t, argument,\n+                                                getJSType(argument),\n+                                                functionType.getReturnType(),\n+                                                call, ordinal);\n+    }\n+  } else {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,30 +1425,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    while (arguments.hasNext() && parameters.hasNext()) {\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+                                                getJSType(argument),\n+                                                getJSType(parameter),\n+                                                call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    // Handle excess arguments for var_args types\n+    if (functionType.isVarArgs()) {\n+      while (arguments.hasNext()) {\n+        Node argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                                                  getJSType(argument),\n+                                                  functionType.getReturnType(),\n+                                                  call, ordinal++);\n+      }\n     }\n   }\n \n+  if (numArgs < minArgs || numArgs > maxArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ?\n+            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}