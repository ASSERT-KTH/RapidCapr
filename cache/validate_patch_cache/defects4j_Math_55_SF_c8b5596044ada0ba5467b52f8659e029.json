{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n    final double eps = 1e-12;\n    double mag = Math.sqrt(x * x + y * y + z * z);\n\n    if (mag < eps) {\n        final double absV1X = Math.abs(v1.getX());\n        final double absV1Y = Math.abs(v1.getY());\n        final double absV1Z = Math.abs(v1.getZ());\n        final double absV2X = Math.abs(v2.getX());\n        final double absV2Y = Math.abs(v2.getY());\n        final double absV2Z = Math.abs(v2.getZ());\n\n        if (absV1X >= absV1Y && absV1X >= absV1Z) {\n            final double subTerm = (absV2Y * absV1Z + absV2Z * absV1Y);\n            double yPrime;\n            double zPrime;\n            if (subTerm == 0) {\n                yPrime = 1;\n                zPrime = 0;\n            } else {\n                yPrime = absV1X;\n                zPrime = subTerm / absV1X;\n            }\n            return new Vector3D(0.0, zPrime, -yPrime).normalize();\n        } else if (absV1Y >= absV1X && absV1Y >= absV1Z) {\n            final double subTerm = (absV2X * absV1Z + absV2Z * absV1X);\n            double xPrime;\n            double zPrime;\n            if (subTerm == 0) {\n                xPrime = 1;\n                zPrime = 0;\n            } else {\n                xPrime = absV1Y;\n                zPrime = subTerm / absV1Y;\n            }\n            return new Vector3D(-zPrime, 0.0, xPrime).normalize();\n        } else {\n            final double subTerm = (absV2X * absV1Y + absV2Y * absV1X);\n            double xPrime;\n            double yPrime;\n            if (subTerm == 0) {\n                xPrime = 1;\n                yPrime = 0;\n            } else {\n                xPrime = absV1Z;\n                yPrime = subTerm / absV1Z;\n            }\n            return new Vector3D(yPrime, -xPrime, 0.0).normalize();\n        }\n    } else {\n        return new Vector3D(x, y, z).normalize();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..442b0d2b1 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,62 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n+    final double eps = 1e-12;\n+    double mag = Math.sqrt(x * x + y * y + z * z);\n+\n+    if (mag < eps) {\n+        final double absV1X = Math.abs(v1.getX());\n+        final double absV1Y = Math.abs(v1.getY());\n+        final double absV1Z = Math.abs(v1.getZ());\n+        final double absV2X = Math.abs(v2.getX());\n+        final double absV2Y = Math.abs(v2.getY());\n+        final double absV2Z = Math.abs(v2.getZ());\n+\n+        if (absV1X >= absV1Y && absV1X >= absV1Z) {\n+            final double subTerm = (absV2Y * absV1Z + absV2Z * absV1Y);\n+            double yPrime;\n+            double zPrime;\n+            if (subTerm == 0) {\n+                yPrime = 1;\n+                zPrime = 0;\n+            } else {\n+                yPrime = absV1X;\n+                zPrime = subTerm / absV1X;\n+            }\n+            return new Vector3D(0.0, zPrime, -yPrime).normalize();\n+        } else if (absV1Y >= absV1X && absV1Y >= absV1Z) {\n+            final double subTerm = (absV2X * absV1Z + absV2Z * absV1X);\n+            double xPrime;\n+            double zPrime;\n+            if (subTerm == 0) {\n+                xPrime = 1;\n+                zPrime = 0;\n+            } else {\n+                xPrime = absV1Y;\n+                zPrime = subTerm / absV1Y;\n+            }\n+            return new Vector3D(-zPrime, 0.0, xPrime).normalize();\n+        } else {\n+            final double subTerm = (absV2X * absV1Y + absV2Y * absV1X);\n+            double xPrime;\n+            double yPrime;\n+            if (subTerm == 0) {\n+                xPrime = 1;\n+                yPrime = 0;\n+            } else {\n+                xPrime = absV1Z;\n+                yPrime = subTerm / absV1Z;\n+            }\n+            return new Vector3D(yPrime, -xPrime, 0.0).normalize();\n+        }\n+    } else {\n+        return new Vector3D(x, y, z).normalize();\n+    }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.2860387767736777>",
    "test_result": "FAIL"
}