{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n        if (outStream == null) {\n            setErrorManager(\n                new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer =\n                new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    //If the checkGlobalThisLevel is on, add a DiagnosticGroupWarningsGuard to the guards.\n    if (options.checkGlobalThisLevel.isOn()) {\n        //When LanguageMode is ECMASCRIPT5_STRICT, set warning levels.\n        if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n            options.setWarningLevel(\n                DiagnosticGroups.ES5_STRICT,\n                CheckLevel.ERROR);\n        }\n        //Add a DiagnosticGroupWarningsGuard to the guards.\n        guards.add(new DiagnosticGroupWarningsGuard(\n            DiagnosticGroups.GLOBAL_THIS,\n            options.checkGlobalThisLevel));\n    } \n    \n    //If the checkGlobalThisLevel is off, set warning level to OFF.\n    else {\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS,\n            CheckLevel.OFF);\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = false;\n    } else if (!options.checkTypes) {\n        // If DiagnosticGroups did not override the plain checkTypes\n        // option, and checkTypes is enabled, then turn off the parser\n        // type warnings.\n        options.setWarningLevel(\n            DiagnosticGroup.forType(\n                RhinoErrorReporter.TYPE_PARSE_ERROR),\n            CheckLevel.OFF);\n    }\n\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n        composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n            DiagnosticGroups.CHECK_VARIABLES,\n            CheckLevel.OFF));\n    }\n\n    this.warningsGuard = composedGuards;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..e69fdcbe 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,45 +223,18 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n     if (errorManager == null) {\n-      if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n-      } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n-      }\n-    }\n-\n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = false;\n-    } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n-    }\n-\n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n-    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.ES5_STRICT,\n-          CheckLevel.ERROR);\n+        if (outStream == null) {\n+            setErrorManager(\n+                new LoggerErrorManager(createMessageFormatter(), logger));\n+        } else {\n+            PrintStreamErrorManager printer =\n+                new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+            setErrorManager(printer);\n+        }\n     }\n \n     // Initialize the warnings guard.\n@@ -271,21 +244,57 @@ public class Compiler extends AbstractCompiler {\n             getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n+    //If the checkGlobalThisLevel is on, add a DiagnosticGroupWarningsGuard to the guards.\n+    if (options.checkGlobalThisLevel.isOn()) {\n+        //When LanguageMode is ECMASCRIPT5_STRICT, set warning levels.\n+        if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n+            options.setWarningLevel(\n+                DiagnosticGroups.ES5_STRICT,\n+                CheckLevel.ERROR);\n+        }\n+        //Add a DiagnosticGroupWarningsGuard to the guards.\n+        guards.add(new DiagnosticGroupWarningsGuard(\n+            DiagnosticGroups.GLOBAL_THIS,\n+            options.checkGlobalThisLevel));\n+    } \n+    \n+    //If the checkGlobalThisLevel is off, set warning level to OFF.\n+    else {\n+        options.setWarningLevel(\n+            DiagnosticGroups.GLOBAL_THIS,\n+            CheckLevel.OFF);\n+    }\n+\n+    // DiagnosticGroups override the plain checkTypes option.\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes = true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes = false;\n+    } else if (!options.checkTypes) {\n+        // If DiagnosticGroups did not override the plain checkTypes\n+        // option, and checkTypes is enabled, then turn off the parser\n+        // type warnings.\n+        options.setWarningLevel(\n+            DiagnosticGroup.forType(\n+                RhinoErrorReporter.TYPE_PARSE_ERROR),\n+            CheckLevel.OFF);\n+    }\n+\n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n \n     // All passes must run the variable check. This synthesizes\n     // variables later so that the compiler doesn't crash. It also\n     // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n+    // about missing variable declarations, we shut that specific error off.\n     if (!options.checkSymbols &&\n         !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n-      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+        composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n+            DiagnosticGroups.CHECK_VARIABLES,\n+            CheckLevel.OFF));\n     }\n \n     this.warningsGuard = composedGuards;\n-  }\n+}\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 2 time(s). expected:<2> but was:<0>",
    "test_result": "FAIL"
}