{
    "patch": "public static double regularizedGamma(double x, double a) {\n    double eps = 10e-15;\n    int maxIters = 1000;\n    double gln = gammaln(a);\n    double b = x+1-a;\n    double c = 1./eps;\n    double d = 1./b;\n    double h = d;\n    double an, del, g;\n    for (int i = 1; i <= maxIters; i++) {\n        an = -i*(i-a);\n        b += 2;\n        d = an*d + b;\n        if (Math.abs(d) < eps) d = eps;\n        c = b + an/c;\n        if (Math.abs(c) < eps) c = eps;\n        d = 1./d;\n        del = d*c;\n        h *= del;\n        if (Math.abs(del-1.) < eps) break;\n    }\n    if (i > maxIters) throw new RuntimeException(\"Regularized gamma function did not converge\");\n    g = Math.exp(-x+a*Math.log(x)-gln)*h;\n    return (g > 0.) ? g : 0.;\n}\n\npublic static double gammaln(double x) {\n    double[] cof = {76.18009172947146,-86.50532032941677,\n            24.01409824083091,-1.231739572450155,\n            0.1208650973866179e-2,-0.5395239384953e-5};\n    double stp = 2.5066282746310005;\n\n    double ser = cof[0];\n    double tmp = x + 5.5;\n    tmp -= (x+0.5)*Math.log(tmp);\n    double res = 0.9999999999998099;\n    for (int j = 1; j <= 6; j++){\n        res += cof[j]/(++x);\n    }\n    return -tmp + Math.log(stp*res);   \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c45c3185e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,47 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double x, double a) {\n+    double eps = 10e-15;\n+    int maxIters = 1000;\n+    double gln = gammaln(a);\n+    double b = x+1-a;\n+    double c = 1./eps;\n+    double d = 1./b;\n+    double h = d;\n+    double an, del, g;\n+    for (int i = 1; i <= maxIters; i++) {\n+        an = -i*(i-a);\n+        b += 2;\n+        d = an*d + b;\n+        if (Math.abs(d) < eps) d = eps;\n+        c = b + an/c;\n+        if (Math.abs(c) < eps) c = eps;\n+        d = 1./d;\n+        del = d*c;\n+        h *= del;\n+        if (Math.abs(del-1.) < eps) break;\n+    }\n+    if (i > maxIters) throw new RuntimeException(\"Regularized gamma function did not converge\");\n+    g = Math.exp(-x+a*Math.log(x)-gln)*h;\n+    return (g > 0.) ? g : 0.;\n+}\n+\n+public static double gammaln(double x) {\n+    double[] cof = {76.18009172947146,-86.50532032941677,\n+            24.01409824083091,-1.231739572450155,\n+            0.1208650973866179e-2,-0.5395239384953e-5};\n+    double stp = 2.5066282746310005;\n+\n+    double ser = cof[0];\n+    double tmp = x + 5.5;\n+    tmp -= (x+0.5)*Math.log(tmp);\n+    double res = 0.9999999999998099;\n+    for (int j = 1; j <= 6; j++){\n+        res += cof[j]/(++x);\n+    }\n+    return -tmp + Math.log(stp*res);   \n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}