{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (!dec.getRealEigenvaluesStream().allMatch(x -> x >= 0)) {\n        throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n    }\n    final RealMatrix v = dec.getV();\n    final int n = v.getRowDimension();\n    RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        double sqrtEigenvalue = Math.sqrt(dec.getRealEigenvalue(i));\n        sqrtD.setEntry(i, i, sqrtEigenvalue);\n    }\n    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..55679e7e3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    if (!dec.getRealEigenvaluesStream().allMatch(x -> x >= 0)) {\n+        throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n     }\n+    final RealMatrix v = dec.getV();\n+    final int n = v.getRowDimension();\n+    RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        double sqrtEigenvalue = Math.sqrt(dec.getRealEigenvalue(i));\n+        sqrtD.setEntry(i, i, sqrtEigenvalue);\n+    }\n+    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}