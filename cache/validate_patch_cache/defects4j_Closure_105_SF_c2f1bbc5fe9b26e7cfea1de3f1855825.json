{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (!arrayNode.isArrayLit() || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = new LinkedList<>();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(NodeUtil.getStringValue(elem));\n        } else {\n            if (sb.length() > 0) {\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalNodeSize = InlineCostEstimator.getCost(n);\n\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            // Replace with empty string.\n            parent.replaceChild(n, Node.newString(\"\"));\n            break;\n\n        case 1:\n            // Replace with a single string.\n            Node foldedNode = arrayFoldedChildren.remove(0);\n            int size = InlineCostEstimator.getCost(foldedNode);\n            if (size < originalNodeSize) {\n                if (!foldedNode.isString()) {\n                    Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedNode);\n                    foldedNode = replacement;\n                }\n                parent.replaceChild(n, foldedNode);\n                t.getCompiler().reportCodeChange();\n            }\n            break;\n\n        default:\n            // Replace with a single call to join().\n            int joinOverhead = \"[]\".length() + \"join\".length() + \" ()\".length();\n            int callOverhead = \"()\".length();\n            int joinStringSize = NodeUtil.getStringValue(right).length();\n            int newNodesSize = foldedSize + joinOverhead + callOverhead + joinStringSize;\n            if (newNodesSize <= originalNodeSize) {\n                Node newCall = new Node(Token.CALL, left.cloneTree());\n                newCall.putBooleanProp(Node.FREE_CALL, true);\n                if (joinStringSize == 0) {\n                    // Without a join string, we can use the faster join algorithm.\n                    newCall.putBooleanProp(Node.JOIN_NORMAL, true);\n                } else {\n                    newCall.putBooleanProp(Node.JOIN_KNOWN_SEPARATOR, true);\n                    newCall.addChildToBack(right.cloneTree());\n                }\n                arrayNode.detachChildren();\n                for (Node node : arrayFoldedChildren) {\n                    arrayNode.addChildToBack(node);\n                }\n                parent.replaceChild(n, newCall);\n                t.getCompiler().reportCodeChange();\n            }\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..05125a50 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,97 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if (!arrayNode.isArrayLit() || !functionName.getString().equals(\"join\")) {\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    List<Node> arrayFoldedChildren = new LinkedList<>();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (NodeUtil.isImmutableValue(elem)) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            sb.append(NodeUtil.getStringValue(elem));\n+        } else {\n+            if (sb.length() > 0) {\n+                foldedSize += sb.length() + 2;\n+                arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                sb = new StringBuilder();\n+            }\n+            foldedSize += InlineCostEstimator.getCost(elem);\n+            arrayFoldedChildren.add(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+        elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n+\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n+    int originalNodeSize = InlineCostEstimator.getCost(n);\n+\n     switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+        case 0:\n+            // Replace with empty string.\n+            parent.replaceChild(n, Node.newString(\"\"));\n+            break;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+        case 1:\n+            // Replace with a single string.\n+            Node foldedNode = arrayFoldedChildren.remove(0);\n+            int size = InlineCostEstimator.getCost(foldedNode);\n+            if (size < originalNodeSize) {\n+                if (!foldedNode.isString()) {\n+                    Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedNode);\n+                    foldedNode = replacement;\n+                }\n+                parent.replaceChild(n, foldedNode);\n+                t.getCompiler().reportCodeChange();\n+            }\n+            break;\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+        default:\n+            // Replace with a single call to join().\n+            int joinOverhead = \"[]\".length() + \"join\".length() + \" ()\".length();\n+            int callOverhead = \"()\".length();\n+            int joinStringSize = NodeUtil.getStringValue(right).length();\n+            int newNodesSize = foldedSize + joinOverhead + callOverhead + joinStringSize;\n+            if (newNodesSize <= originalNodeSize) {\n+                Node newCall = new Node(Token.CALL, left.cloneTree());\n+                newCall.putBooleanProp(Node.FREE_CALL, true);\n+                if (joinStringSize == 0) {\n+                    // Without a join string, we can use the faster join algorithm.\n+                    newCall.putBooleanProp(Node.JOIN_NORMAL, true);\n+                } else {\n+                    newCall.putBooleanProp(Node.JOIN_KNOWN_SEPARATOR, true);\n+                    newCall.addChildToBack(right.cloneTree());\n+                }\n+                arrayNode.detachChildren();\n+                for (Node node : arrayFoldedChildren) {\n+                    arrayNode.addChildToBack(node);\n+                }\n+                parent.replaceChild(n, newCall);\n+                t.getCompiler().reportCodeChange();\n+            }\n+            break;\n     }\n-    t.getCompiler().reportCodeChange();\n-  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}