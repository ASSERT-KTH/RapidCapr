{
    "patch": "    public Dfp multiply(final int x) {\n        Dfp result = newInstance(getField());\n        if (isNaN() || result.isNaN()) {\n            result = NaN;\n            result.getField().setIEEEFlagsBits(IEEEHelper.BIT_INVALID);\n            return result;\n        }\n\n        result.exp = exp;\n        result.sign = sign;\n        result.precision = precision;\n        result.roundingMode = roundingMode;\n\n        // multiply mantissas with proper rounding\n        result.mant = multiply(mant, x);\n        result.normalize();\n\n        return dotrap(Dfp.TRAP_NONE, \"multiply\", result, result);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..824b980b1 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,23 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        Dfp result = newInstance(getField());\n+        if (isNaN() || result.isNaN()) {\n+            result = NaN;\n+            result.getField().setIEEEFlagsBits(IEEEHelper.BIT_INVALID);\n+            return result;\n+        }\n+\n+        result.exp = exp;\n+        result.sign = sign;\n+        result.precision = precision;\n+        result.roundingMode = roundingMode;\n+\n+        // multiply mantissas with proper rounding\n+        result.mant = multiply(mant, x);\n+        result.normalize();\n+\n+        return dotrap(Dfp.TRAP_NONE, \"multiply\", result, result);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: no suitable method found for newInstance(DfpField)",
    "test_result": "ERROR"
}