{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !newSet.contains(lastArg.getString())) {\n        argList.removeChild(lastArg);\n        lastArg = argList.getLastChild();\n        compiler.reportCodeChange();\n      }\n      if (lastArg != null) {\n        Node arg = lastArg.getPrevious();\n        while (arg != null) {\n          if (!newSet.contains(arg.getString())) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n          }\n          arg = arg.getPrevious();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..08f138fd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !newSet.contains(lastArg.getString())) {\n+        argList.removeChild(lastArg);\n+        lastArg = argList.getLastChild();\n+        compiler.reportCodeChange();\n+      }\n+      if (lastArg != null) {\n+        Node arg = lastArg.getPrevious();\n+        while (arg != null) {\n+          if (!newSet.contains(arg.getString())) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+          }\n+          arg = arg.getPrevious();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}