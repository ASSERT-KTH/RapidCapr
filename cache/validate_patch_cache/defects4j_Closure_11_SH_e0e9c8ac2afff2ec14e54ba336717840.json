{
    "patch": "  /** Override the prototype via assignment. */\n  private void maybeOverridePrototype(NodeTraversal t, Node original, Node targetName,\n                                       Node overrideValue) {\n    if (original.getNext().isGetProp()\n        && original.getNext().isQualifiedName()\n        && overrideValue.isObjectLit()\n        && targetName.matchesQualifiedName(\"prototype\")) {\n      Node parent = original.getParent();\n      Node n = original.getNext();\n      // corrected missing null check for parent\n      if (n.getJSType() != null && parent != null &&  parent.isAssign()) {\n        return;\n      }\n\n      // Add to the existing prototype assignment.\n      Node objLit = overrideValue;\n      Node currentProto = n.getLastChild();\n      for (Node key = objLit.getFirstChild(); key != null; key = key.getNext()) {\n        Node val = key.getFirstChild();\n        String propName = key.getString();\n        if (propName.equals(\"constructor\") && val.matchesQualifiedName(\n            original.getNext().getQualifiedName())) {\n          parent.putBooleanProp(Node.EXPORT, true);\n        }\n        val = val.isTemplateLit() ? IR.string(val.getOriginalString()) : val.cloneTree();\n        val.useSourceInfoIfMissingFrom(key);\n        Node newProp = IR.propDef(propName, val);\n        if (currentProto.isObjectLit()) {\n          for (Node curProp = currentProto.getFirstChild();\n               curProp != null;\n               curProp = curProp.getNext()) {\n            if (curProp.getString().equals(newProp.getString())) {\n              currentProto.removeChild(curProp);\n              break;\n            }\n          }\n        } else {\n          checkState(currentProto.isEmpty());\n          Node currentProtoVar = new Node(\n              Token.VAR, IR.name(MINIMIZED_CURRENT_PROTOTYPE), IR.objectlit());\n          currentProtoVar.getFirstChild().getLastChild().addChildToFront(newProp);\n          currentProto.replaceWith(currentProtoVar.getFirstChild());\n          currentProto = currentProtoVar.getFirstChild().getLastChild();\n        }\n        currentProto.addChildToBack(newProp);\n      }\n      // In case this is the first such assignment, add the prototype assignment to a var.\n      if (parent.isExprResult()) {\n        Node varNode = IR.var(Node.newString(Token.NAME, MINIMIZED_CURRENT_PROTOTYPE),\n                new Node(Token.OBJECTLIT));\n        varNode.getFirstFirstChild().addChildToFront(newProp(Node.newString(\"prototype\"), objLit));\n        parent.replaceWith(varNode, parent.getPrevious());\n      }\n      t.getCompiler().reportChangeToEnclosingScope(parent);\n      t.getCompiler().addToPropertyMap((Name) targetName, propAccess.getProp());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}