{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final String ENTITY_REGEX = \"&#([0-9]{1,7}|x[0-9a-fA-F]{1,6});\";\n    final Pattern ENTITY_PATTERN = Pattern.compile(ENTITY_REGEX, Pattern.CASE_INSENSITIVE);\n\n    Matcher matcher = ENTITY_PATTERN.matcher(input);\n    if (matcher.find(index) && matcher.start() == index) {\n        String entity = matcher.group();\n        int entityValue;\n        try {\n            if (entity.startsWith(\"&#x\")) {\n                entityValue = Integer.parseInt(entity.substring(3, entity.length()-1), 16);\n            } else {\n                entityValue = Integer.parseInt(entity.substring(2, entity.length()-1));\n            }\n        } catch(NumberFormatException nfe) {\n            // Invalid numeric entity\n            return 0;\n        }\n\n        if (Character.isValidCodePoint(entityValue)) {\n            if (Character.isBmpCodePoint(entityValue)) {\n                out.write(entityValue);\n            } else {\n                char[] surrogatePair = Character.toChars(entityValue);\n                out.write(surrogatePair[0]);\n                out.write(surrogatePair[1]);\n            }\n            return entity.length();\n        } else {\n            // Invalid code point\n            return 0;\n        }\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..8ecdc673 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,40 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final String ENTITY_REGEX = \"&#([0-9]{1,7}|x[0-9a-fA-F]{1,6});\";\n+    final Pattern ENTITY_PATTERN = Pattern.compile(ENTITY_REGEX, Pattern.CASE_INSENSITIVE);\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n+    Matcher matcher = ENTITY_PATTERN.matcher(input);\n+    if (matcher.find(index) && matcher.start() == index) {\n+        String entity = matcher.group();\n+        int entityValue;\n+        try {\n+            if (entity.startsWith(\"&#x\")) {\n+                entityValue = Integer.parseInt(entity.substring(3, entity.length()-1), 16);\n+            } else {\n+                entityValue = Integer.parseInt(entity.substring(2, entity.length()-1));\n             }\n+        } catch(NumberFormatException nfe) {\n+            // Invalid numeric entity\n+            return 0;\n+        }\n \n+        if (Character.isValidCodePoint(entityValue)) {\n+            if (Character.isBmpCodePoint(entityValue)) {\n                 out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            } else {\n+                char[] surrogatePair = Character.toChars(entityValue);\n+                out.write(surrogatePair[0]);\n+                out.write(surrogatePair[1]);\n+            }\n+            return entity.length();\n+        } else {\n+            // Invalid code point\n+            return 0;\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}