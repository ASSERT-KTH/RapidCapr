{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\t\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n          // For each named parameter check if a mutable argument use more than one.\n          String name = fnParam.getString();\n          if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n              NodeUtil.getNameReferenceCount(block, name, callNode) > 1) {\n            return CanInlineResult.NO;\n          }\n          // Move to the next argument.\n          cArg = cArg.getNext();\n          fnParam = fnParam.getNext();\n        } else {\n          return CanInlineResult.NO;\n        }\n      } else if (cArg != null) {\n        // For every argument check for side-effects, even if there\n        // isn't a named parameter to match.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    // Inlined code should not contain return statements unless they\n    // appear in a try-catch.\n    if (NodeUtil.has(returnControlFlowAnalysis, block) && !NodeUtil.hasFinallyOrCatch(block)) {\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..86bdf6d4 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,15 +686,14 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n-\n-\n+\t\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -717,27 +716,23 @@ class FunctionInjector {\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+          // For each named parameter check if a mutable argument use more than one.\n+          String name = fnParam.getString();\n+          if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+              NodeUtil.getNameReferenceCount(block, name, callNode) > 1) {\n             return CanInlineResult.NO;\n           }\n+          // Move to the next argument.\n+          cArg = cArg.getNext();\n+          fnParam = fnParam.getNext();\n+        } else {\n+          return CanInlineResult.NO;\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n+      } else if (cArg != null) {\n+        // For every argument check for side-effects, even if there\n+        // isn't a named parameter to match.\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n@@ -745,6 +740,12 @@ class FunctionInjector {\n       }\n     }\n \n+    // Inlined code should not contain return statements unless they\n+    // appear in a try-catch.\n+    if (NodeUtil.has(returnControlFlowAnalysis, block) && !NodeUtil.hasFinallyOrCatch(block)) {\n+      return CanInlineResult.NO;\n+    }\n+\n     return CanInlineResult.YES;\n   }\n ",
    "result_reason": "error: method getNameReferenceCount in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}