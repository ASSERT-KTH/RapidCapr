{
    "patch": "public boolean isSubtype(JSType other) {\n  // Check that `other` is an `ArrowType`.\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Check that the return type of `this` is a subtype of the return type of `that`.\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Check that all parameters of `that` are subtypes of the corresponding parameters of `this`.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null) {\n    // If `thatParam` is null, it means that `this` has more parameters than `that`,\n    // which is allowed as long as the extra `this` parameters are optional or varargs.\n    if (thatParam == null) {\n      return thisParam.isOptional() || thisParam.isVarArgs();\n    }\n    \n    // Check that the type of `thatParam` is a subtype of the type of `thisParam`.\n    if (!thatParam.getJSType().isSubtype(thisParam.getJSType())) {\n      return false;\n    }\n\n    // Advance to the next parameter. If one of the current parameters is varargs,\n    // we don't need to check any further, as all remaining parameters will match\n    // the varargs type. (Note that in this implementation, the varargs parameter\n    // must be the last parameter and cannot be followed by additional required parameters.)\n    if (thisParam.isVarArgs() || thatParam.isVarArgs()) {\n      break;\n    }\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  // If `thatParam` is not null, it means that `that` has more parameters than `this`,\n  // which is allowed as long as the extra `that` parameters are optional or varargs.\n  if (thatParam != null) {\n    return thatParam.isOptional() || thatParam.isVarArgs();\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..5f2c053b 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,54 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  // Check that `other` is an `ArrowType`.\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  // Check that the return type of `this` is a subtype of the return type of `that`.\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+  // Check that all parameters of `that` are subtypes of the corresponding parameters of `this`.\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n+  while (thisParam != null) {\n+    // If `thatParam` is null, it means that `this` has more parameters than `that`,\n+    // which is allowed as long as the extra `this` parameters are optional or varargs.\n+    if (thatParam == null) {\n+      return thisParam.isOptional() || thisParam.isVarArgs();\n+    }\n+    \n+    // Check that the type of `thatParam` is a subtype of the type of `thisParam`.\n+    if (!thatParam.getJSType().isSubtype(thisParam.getJSType())) {\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+    // Advance to the next parameter. If one of the current parameters is varargs,\n+    // we don't need to check any further, as all remaining parameters will match\n+    // the varargs type. (Note that in this implementation, the varargs parameter\n+    // must be the last parameter and cannot be followed by additional required parameters.)\n+    if (thisParam.isVarArgs() || thatParam.isVarArgs()) {\n+      break;\n     }\n+    thisParam = thisParam.getNext();\n+    thatParam = thatParam.getNext();\n+  }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n-    return true;\n+  // If `thatParam` is not null, it means that `that` has more parameters than `this`,\n+  // which is allowed as long as the extra `that` parameters are optional or varargs.\n+  if (thatParam != null) {\n+    return thatParam.isOptional() || thatParam.isVarArgs();\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}