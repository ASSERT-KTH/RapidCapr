{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        Node fnNameNode = NodeUtil.getBestLValueNameNode(n);\n        String fnName = fnNameNode != null ? fnNameNode.getString() : null;\n        if (fnName != null) {\n          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(constructor);\n          FunctionType functionType = getNativeType(UNKNOWN_TYPE).toMaybeFunctionType();\n          if (jsDoc != null) {\n            functionType = IR.function().setJSDocInfo(jsDoc).buildDeclaredType();\n          }\n          Var var = getScope().getVar(fnName);\n          var.setType(getNativeType(JSTypeNative.UNKNOWN_TYPE).toMaybeFunctionType());\n        }\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..4908c304 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,7 +1032,7 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n@@ -1041,6 +1041,17 @@ class TypeInference\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n+        Node fnNameNode = NodeUtil.getBestLValueNameNode(n);\n+        String fnName = fnNameNode != null ? fnNameNode.getString() : null;\n+        if (fnName != null) {\n+          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(constructor);\n+          FunctionType functionType = getNativeType(UNKNOWN_TYPE).toMaybeFunctionType();\n+          if (jsDoc != null) {\n+            functionType = IR.function().setJSDocInfo(jsDoc).buildDeclaredType();\n+          }\n+          Var var = getScope().getVar(fnName);\n+          var.setType(getNativeType(JSTypeNative.UNKNOWN_TYPE).toMaybeFunctionType());\n+        }\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}