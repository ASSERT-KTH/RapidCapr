{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n            \"observed counts must be non-negative and expected counts must be positive\"\n        );\n    }\n    double sumSq = 0.0d;\n\n    for (int i = 0; i < observed.length; i++) {\n        if (Double.isInfinite(expected[i])) {\n            throw new IllegalArgumentException(\"All values in the expected array must be finite\");\n        }\n        if (expected[i] == 0.0d && observed[i] != 0l) {\n            throw new IllegalArgumentException(\"Observed count (\" + observed[i] + \") is non-zero \" +\n                    \"for a bin with an expected count of zero.\");\n        }\n        double dev = observed[i] - expected[i];\n        sumSq += (dev * dev) / expected[i];\n    }\n\n    // Exit early if the resulting sumSq is infinite\n    if (Double.isInfinite(sumSq)) {\n        throw new IllegalArgumentException(\"Sum of squared deviations resulted in infinity\");\n    }\n\n    // Round the sumSq value to 12 decimal places to fix rounding errors\n    return round(sumSq, 12);\n}\n\n// Helper method to check if all values in an array are positive\nprivate boolean isPositive(double[] values) {\n    for (double value : values) {\n        if (value <= 0.0d) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Helper method to check if all values in an array are non-negative\nprivate boolean isNonNegative(long[] values) {\n    for (long value : values) {\n        if (value < 0L) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Helper method to round a double value to the given number of decimal places\nprivate double round(double value, int decimalPlaces) {\n    double factor = Math.pow(10.0d, decimalPlaces);\n    return Math.round(value * factor) / factor;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..7969a6c37 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,63 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if ((expected.length < 2) || (expected.length != observed.length)) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+    if (!isPositive(expected) || !isNonNegative(observed)) {\n+        throw new IllegalArgumentException(\n+            \"observed counts must be non-negative and expected counts must be positive\"\n+        );\n+    }\n+    double sumSq = 0.0d;\n+\n+    for (int i = 0; i < observed.length; i++) {\n+        if (Double.isInfinite(expected[i])) {\n+            throw new IllegalArgumentException(\"All values in the expected array must be finite\");\n         }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+        if (expected[i] == 0.0d && observed[i] != 0l) {\n+            throw new IllegalArgumentException(\"Observed count (\" + observed[i] + \") is non-zero \" +\n+                    \"for a bin with an expected count of zero.\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+        double dev = observed[i] - expected[i];\n+        sumSq += (dev * dev) / expected[i];\n+    }\n+\n+    // Exit early if the resulting sumSq is infinite\n+    if (Double.isInfinite(sumSq)) {\n+        throw new IllegalArgumentException(\"Sum of squared deviations resulted in infinity\");\n+    }\n+\n+    // Round the sumSq value to 12 decimal places to fix rounding errors\n+    return round(sumSq, 12);\n+}\n+\n+// Helper method to check if all values in an array are positive\n+private boolean isPositive(double[] values) {\n+    for (double value : values) {\n+        if (value <= 0.0d) {\n+            return false;\n         }\n-        return sumSq;\n     }\n+    return true;\n+}\n+\n+// Helper method to check if all values in an array are non-negative\n+private boolean isNonNegative(long[] values) {\n+    for (long value : values) {\n+        if (value < 0L) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+// Helper method to round a double value to the given number of decimal places\n+private double round(double value, int decimalPlaces) {\n+    double factor = Math.pow(10.0d, decimalPlaces);\n+    return Math.round(value * factor) / factor;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: method isPositive(double[]) is already defined in class ChiSquareTestImpl",
    "test_result": "ERROR"
}