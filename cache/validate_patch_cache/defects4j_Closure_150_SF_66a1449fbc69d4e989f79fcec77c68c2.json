{
    "patch": "    @Override \n    public final void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isScript()) {\n        scope = new Scope(RootScopeBuilder.buildRootScope());\n        return;\n      }\n\n      attachLiteralTypes(n);\n\n      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent.getParent());\n        return;\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME:\n          defineVar(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b5946e4c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,15 +1440,25 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override \n+    public final void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.isScript()) {\n+        scope = new Scope(RootScopeBuilder.buildRootScope());\n+        return;\n+      }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      attachLiteralTypes(n);\n+\n+      if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n         handleFunctionInputs(parent);\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+      if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n+        handleFunctionInputs(parent.getParent());\n+        return;\n+      }\n+\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1456,6 +1466,9 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME:\n+          defineVar(n, parent);\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n@@ -1463,6 +1476,11 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}