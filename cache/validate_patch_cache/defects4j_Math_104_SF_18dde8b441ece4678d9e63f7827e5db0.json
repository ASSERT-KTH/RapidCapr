{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double eps = 10e-15;\n    double gln = logGamma(a);\n    double ap = a;\n    double del = 1.0 / a;\n    double sum = 1.0 / a;\n\n    while (Math.abs(del) > Math.abs(sum) * eps && ap < 1000) {\n        ap += 1.0;\n        del *= x / ap;\n        sum += del;\n    }\n\n    double gamma = sum * Math.exp(-x + a * Math.log(x) - gln);\n    if (x == 0.0) {\n        gamma = 0.0;\n    } else if (x < a + 1.0) {\n        gamma *= continuedFraction(a, x) / a;\n    }\n    return gamma;\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\nprivate static double continuedFraction(double a, double x) {\n    double eps = 10e-15;\n    double f = Math.sqrt(2.0 * Math.PI) / Math.exp(logGamma(a));\n    double C = f;\n    double D = 0.0;\n    double i = 1.0;\n    double a1 = x;\n    double h = a1;\n\n    while (Math.abs(D - 1.0) > eps) {\n        double a2 = i - a;\n        double a3 = -(i + a);\n        a1 = 2.0 * (x * a1 + a2 * a1) + a3 * h;\n        a2 = -(i * i - a * a);\n        a3 = 2.0 * i + 1.0 - a;\n        D = a3 + a2 * D;\n        if (Math.abs(D) < eps) {\n            D = eps;\n        }\n        D = 1.0 / D;\n        double delta = D * a1;\n        h = delta * h;\n        C = C * h;\n        i = i + 1.0;\n    }\n\n    return 1.0 / C;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..26a931e7f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 10e-15;\n+    double gln = logGamma(a);\n+    double ap = a;\n+    double del = 1.0 / a;\n+    double sum = 1.0 / a;\n+\n+    while (Math.abs(del) > Math.abs(sum) * eps && ap < 1000) {\n+        ap += 1.0;\n+        del *= x / ap;\n+        sum += del;\n+    }\n+\n+    double gamma = sum * Math.exp(-x + a * Math.log(x) - gln);\n+    if (x == 0.0) {\n+        gamma = 0.0;\n+    } else if (x < a + 1.0) {\n+        gamma *= continuedFraction(a, x) / a;\n+    }\n+    return gamma;\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+private static double continuedFraction(double a, double x) {\n+    double eps = 10e-15;\n+    double f = Math.sqrt(2.0 * Math.PI) / Math.exp(logGamma(a));\n+    double C = f;\n+    double D = 0.0;\n+    double i = 1.0;\n+    double a1 = x;\n+    double h = a1;\n+\n+    while (Math.abs(D - 1.0) > eps) {\n+        double a2 = i - a;\n+        double a3 = -(i + a);\n+        a1 = 2.0 * (x * a1 + a2 * a1) + a3 * h;\n+        a2 = -(i * i - a * a);\n+        a3 = 2.0 * i + 1.0 - a;\n+        D = a3 + a2 * D;\n+        if (Math.abs(D) < eps) {\n+            D = eps;\n+        }\n+        D = 1.0 / D;\n+        double delta = D * a1;\n+        h = delta * h;\n+        C = C * h;\n+        i = i + 1.0;\n+    }\n+\n+    return 1.0 / C;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}