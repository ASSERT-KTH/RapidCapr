{
    "patch": "public boolean hasSameMethod(Invocation candidate) {\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    // if the declaring classes of the two methods are not the same but\n    // their names and parameter types are the same, they are forwarding methods,\n    // so we need to compare the methods they forward to instead\n    if (!m1.getDeclaringClass().equals(m2.getDeclaringClass())\n            && m1.getName().equals(m2.getName())\n            && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {\n        m1 = m1.getDeclaringClass().getDeclaredMethod(m1.getName(), m1.getParameterTypes());\n        m2 = m2.getDeclaringClass().getDeclaredMethod(m2.getName(), m2.getParameterTypes());\n    }\n\n    // now we can safely compare the two methods using equals()\n    return m1.equals(m2);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..fad338725 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,15 +89,23 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+public boolean hasSameMethod(Invocation candidate) {\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+\n+    // if the declaring classes of the two methods are not the same but\n+    // their names and parameter types are the same, they are forwarding methods,\n+    // so we need to compare the methods they forward to instead\n+    if (!m1.getDeclaringClass().equals(m2.getDeclaringClass())\n+            && m1.getName().equals(m2.getName())\n+            && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())) {\n+        m1 = m1.getDeclaringClass().getDeclaredMethod(m1.getName(), m1.getParameterTypes());\n+        m2 = m2.getDeclaringClass().getDeclaredMethod(m2.getName(), m2.getParameterTypes());\n     }\n+\n+    // now we can safely compare the two methods using equals()\n+    return m1.equals(m2);\n+}\n     \n     public Location getLocation() {\n         return invocation.getLocation();\n@@ -126,4 +134,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}