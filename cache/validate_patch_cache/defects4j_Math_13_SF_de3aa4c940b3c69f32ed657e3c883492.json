{
    "patch": "import org.apache.commons.math3.linear.*;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final SchurTransformer transformer = new SchurTransformer(m);\n    final RealMatrix t = transformer.getT();\n    final RealMatrix sqrtT = MatrixUtils.createRealMatrix(t.getRowDimension(), t.getColumnDimension());\n    for (int i = 0; i < sqrtT.getRowDimension(); i++) {\n        for (int j = 0; j < sqrtT.getColumnDimension(); j++) {\n            if (i == j) {\n                sqrtT.setEntry(i, j, FastMath.sqrt(t.getEntry(i, j)));\n            } else {\n                sqrtT.setEntry(i, j, 0.0);\n            }\n        }\n    }\n    final RealMatrix sqrtM = transformer.getQ().multiply(sqrtT).multiply(transformer.getQT());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..acc6d30bf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.*;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SchurTransformer transformer = new SchurTransformer(m);\n+    final RealMatrix t = transformer.getT();\n+    final RealMatrix sqrtT = MatrixUtils.createRealMatrix(t.getRowDimension(), t.getColumnDimension());\n+    for (int i = 0; i < sqrtT.getRowDimension(); i++) {\n+        for (int j = 0; j < sqrtT.getColumnDimension(); j++) {\n+            if (i == j) {\n+                sqrtT.setEntry(i, j, FastMath.sqrt(t.getEntry(i, j)));\n+            } else {\n+                sqrtT.setEntry(i, j, 0.0);\n+            }\n+        }\n     }\n+    final RealMatrix sqrtM = transformer.getQ().multiply(sqrtT).multiply(transformer.getQT());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}