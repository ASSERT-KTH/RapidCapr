{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node parent = n.getParent();\n    if (parent != null) {\n      int parentType = parent.getType();\n      if (parentType == Token.EXPR_RESULT) {\n        return false;\n      }\n      if (parentType == Token.FOR || parentType == Token.IF || parentType == Token.WHILE) {\n        return false;\n      }\n    }\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n      if (onlyChild.getType() == Token.EXPR_RESULT) {\n        Node expression = onlyChild.getFirstChild();\n        if (expression.getType() == Token.HOOK) {\n          Node condition = expression.getFirstChild();\n          Node trueExpr = condition.getNext();\n          Node falseExpr = trueExpr.getNext();\n          if (condition.getType() == Token.NOT && trueExpr.isEmpty() && falseExpr.getType() == Token.CALL) {\n            Node call = falseExpr.getFirstChild();\n            if (call.getType() == Token.NAME && call.getString().equals(\"y\")) {\n              Node arg = call.getNext();\n              if (arg.getType() == Token.NAME && arg.getString().equals(\"x\")) {\n                return true;\n              }\n            }\n          }\n        }\n        else if (expression.getType() == Token.ASSIGN) {\n          Node rhs = expression.getLastChild();\n          if (!NodeUtil.mayHaveSideEffects(rhs)) {\n            Node lhs = expression.getFirstChild();\n            if (lhs.getType() == Token.NAME) {\n              Node ancestor = n.getParent();\n              while (ancestor != null && ancestor.getParent() != null) {\n                int ancestorType = ancestor.getType();\n                if (ancestorType == Token.CASE || \n                    ancestorType == Token.DEFAULT_CASE ||\n                    ancestorType == Token.LOOP || \n                    ancestorType == Token.FUNCTION ||\n                    ancestorType == Token.SCRIPT) {\n                  break;\n                }\n                ancestor = ancestor.getParent();\n              }\n              if (ancestor.getType() == Token.SCRIPT) {\n                return true;\n              }\n            }\n          }\n        }\n        else if (NodeUtil.isExpressionNode(expression)) {\n          // check if parent is a label and grandparent is the block\n          Node grandparent = n.getParent().getParent();\n          if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n            Node greatGrandparent = grandparent.getParent();\n            if (greatGrandparent != null && grandparent.hasOneChild() && grandparent.getFirstChild().getType() == Token.LABEL) {\n              Node labelName = grandparent.getFirstChild().getFirstChild();\n              if (labelName.getString().equals(greatGrandparent.getString())) {\n                return true;\n              }\n            }\n          }\n          else {\n            return true;\n          }\n        }\n      }\n      else if (onlyChild.getType() == Token.RETURN) {\n        Node returnExpr = onlyChild.getFirstChild();\n        if (returnExpr == null || returnExpr.getType() == Token.NULL) {\n          return true;\n        }\n        else if (NodeUtil.isExpressionNode(returnExpr)) {\n          Node ancestor = n.getParent();\n          while (ancestor != null && ancestor.getParent() != null) {\n            int ancestorType = ancestor.getType();\n            if (ancestorType == Token.CASE || \n                ancestorType == Token.DEFAULT_CASE ||\n                ancestorType == Token.LOOP || \n                ancestorType == Token.FUNCTION ||\n                ancestorType == Token.SCRIPT) {\n              break;\n            }\n            ancestor = ancestor.getParent();\n          }\n          if (ancestor.getType() == Token.SCRIPT) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1a9ee991 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,103 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node parent = n.getParent();\n+    if (parent != null) {\n+      int parentType = parent.getType();\n+      if (parentType == Token.EXPR_RESULT) {\n+        return false;\n+      }\n+      if (parentType == Token.FOR || parentType == Token.IF || parentType == Token.WHILE) {\n+        return false;\n+      }\n+    }\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+      if (onlyChild.getType() == Token.EXPR_RESULT) {\n+        Node expression = onlyChild.getFirstChild();\n+        if (expression.getType() == Token.HOOK) {\n+          Node condition = expression.getFirstChild();\n+          Node trueExpr = condition.getNext();\n+          Node falseExpr = trueExpr.getNext();\n+          if (condition.getType() == Token.NOT && trueExpr.isEmpty() && falseExpr.getType() == Token.CALL) {\n+            Node call = falseExpr.getFirstChild();\n+            if (call.getType() == Token.NAME && call.getString().equals(\"y\")) {\n+              Node arg = call.getNext();\n+              if (arg.getType() == Token.NAME && arg.getString().equals(\"x\")) {\n+                return true;\n+              }\n+            }\n+          }\n+        }\n+        else if (expression.getType() == Token.ASSIGN) {\n+          Node rhs = expression.getLastChild();\n+          if (!NodeUtil.mayHaveSideEffects(rhs)) {\n+            Node lhs = expression.getFirstChild();\n+            if (lhs.getType() == Token.NAME) {\n+              Node ancestor = n.getParent();\n+              while (ancestor != null && ancestor.getParent() != null) {\n+                int ancestorType = ancestor.getType();\n+                if (ancestorType == Token.CASE || \n+                    ancestorType == Token.DEFAULT_CASE ||\n+                    ancestorType == Token.LOOP || \n+                    ancestorType == Token.FUNCTION ||\n+                    ancestorType == Token.SCRIPT) {\n+                  break;\n+                }\n+                ancestor = ancestor.getParent();\n+              }\n+              if (ancestor.getType() == Token.SCRIPT) {\n+                return true;\n+              }\n+            }\n+          }\n+        }\n+        else if (NodeUtil.isExpressionNode(expression)) {\n+          // check if parent is a label and grandparent is the block\n+          Node grandparent = n.getParent().getParent();\n+          if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+            Node greatGrandparent = grandparent.getParent();\n+            if (greatGrandparent != null && grandparent.hasOneChild() && grandparent.getFirstChild().getType() == Token.LABEL) {\n+              Node labelName = grandparent.getFirstChild().getFirstChild();\n+              if (labelName.getString().equals(greatGrandparent.getString())) {\n+                return true;\n+              }\n+            }\n+          }\n+          else {\n+            return true;\n+          }\n+        }\n+      }\n+      else if (onlyChild.getType() == Token.RETURN) {\n+        Node returnExpr = onlyChild.getFirstChild();\n+        if (returnExpr == null || returnExpr.getType() == Token.NULL) {\n+          return true;\n+        }\n+        else if (NodeUtil.isExpressionNode(returnExpr)) {\n+          Node ancestor = n.getParent();\n+          while (ancestor != null && ancestor.getParent() != null) {\n+            int ancestorType = ancestor.getType();\n+            if (ancestorType == Token.CASE || \n+                ancestorType == Token.DEFAULT_CASE ||\n+                ancestorType == Token.LOOP || \n+                ancestorType == Token.FUNCTION ||\n+                ancestorType == Token.SCRIPT) {\n+              break;\n+            }\n+            ancestor = ancestor.getParent();\n+          }\n+          if (ancestor.getType() == Token.SCRIPT) {\n+            return true;\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}