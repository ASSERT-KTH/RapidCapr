{
    "patch": "if (left.isObjectLit()) {\n  if (parent != null && parent.isAssign()) {\n    // When object literal is used as an assignment target, it needs\n    // to be preserved to maintain side-effect.\n    return n;\n  } else {\n    // Replace the entire GETELEM with 'undefined'\n    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n    parent.replaceChild(n, undefinedNode);\n    reportCodeChange();\n    return undefinedNode;\n  }\n} else if (left.isArrayLit()) {\n  if (left.hasChildren()) {\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Replace the entire GETELEM with the indexed array literal element\n    Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  } else {\n    // Don't fold empty array literals because they don't have the side-effects\n    // we would like for GETPROP/GETELEM targets.\n    if (parent != null && parent.isAssign()) {\n      // When empty array literal is used as an assignment target, it needs\n      // to be preserved to maintain side-effect.\n      return n;\n    } else {\n      // Replace the entire GETELEM with 'undefined'\n      Node undefinedNode = NodeUtil.newUndefinedNode(n);\n      parent.replaceChild(n, undefinedNode);\n      reportCodeChange();\n      return undefinedNode;\n    }\n  }\n} else {\n  // Unsupported left-hand side(s) for GETELEM optimization\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..ba9f3fc0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,62 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.isObjectLit()) {\n+  if (parent != null && parent.isAssign()) {\n+    // When object literal is used as an assignment target, it needs\n+    // to be preserved to maintain side-effect.\n+    return n;\n+  } else {\n+    // Replace the entire GETELEM with 'undefined'\n+    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+    parent.replaceChild(n, undefinedNode);\n+    reportCodeChange();\n+    return undefinedNode;\n+  }\n+} else if (left.isArrayLit()) {\n+  if (left.hasChildren()) {\n+    if (right.getType() != Token.NUMBER) {\n+      // Sometimes people like to use complex expressions to index into\n+      // arrays, or strings to index into array methods.\n+      return n;\n+    }\n+\n+    double index = right.getDouble();\n+    int intIndex = (int) index;\n+    if (intIndex != index) {\n+      error(INVALID_GETELEM_INDEX_ERROR, right);\n+      return n;\n+    }\n+\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    // Replace the entire GETELEM with the indexed array literal element\n+    Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n+    parent.replaceChild(n, elem);\n+    reportCodeChange();\n+    return elem;\n+  } else {\n+    // Don't fold empty array literals because they don't have the side-effects\n+    // we would like for GETPROP/GETELEM targets.\n+    if (parent != null && parent.isAssign()) {\n+      // When empty array literal is used as an assignment target, it needs\n+      // to be preserved to maintain side-effect.\n+      return n;\n+    } else {\n+      // Replace the entire GETELEM with 'undefined'\n+      Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+      parent.replaceChild(n, undefinedNode);\n+      reportCodeChange();\n+      return undefinedNode;\n+    }\n+  }\n+} else {\n+  // Unsupported left-hand side(s) for GETELEM optimization\n+  return n;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}