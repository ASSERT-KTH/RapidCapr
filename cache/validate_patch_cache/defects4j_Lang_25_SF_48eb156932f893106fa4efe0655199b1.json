{
    "patch": "public static String escapeISO8859_1(String str) {\n    StringBuilder retStr = new StringBuilder();\n    for (int i = 0; i < str.length(); i++) {\n        int codePoint = str.codePointAt(i);\n        if (codePoint <= 255) {\n            // Escape characters in ISO-8859-1 range\n            if (codePoint == '\\r') {\n                retStr.append(\"\\\\r\");\n            } else if (codePoint == '\\n') {\n                retStr.append(\"\\\\n\");\n            } else if (codePoint == '\\t') {\n                retStr.append(\"\\\\t\");\n            } else if (codePoint == '\"' || codePoint == '\\'' || codePoint == '\\\\') {\n                retStr.append('\\\\');\n                retStr.append((char) codePoint);\n            } else if (codePoint < 32) {\n                // Control characters are not valid characters in JSON\n                if (codePoint == '\\b') {\n                    retStr.append(\"\\\\b\");\n                } else if (codePoint == '\\f') {\n                    retStr.append(\"\\\\f\");\n                } else {\n                    retStr.append(String.format(\"\\\\u%04x\", codePoint));\n                }\n            } else {\n                retStr.append((char) codePoint);\n            }\n            i += Character.charCount(codePoint) - 1;\n        } else {\n            retStr.append(Character.toChars(codePoint));\n        }\n    }\n    return retStr.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..6306a123 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,40 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeISO8859_1(String str) {\n+    StringBuilder retStr = new StringBuilder();\n+    for (int i = 0; i < str.length(); i++) {\n+        int codePoint = str.codePointAt(i);\n+        if (codePoint <= 255) {\n+            // Escape characters in ISO-8859-1 range\n+            if (codePoint == '\\r') {\n+                retStr.append(\"\\\\r\");\n+            } else if (codePoint == '\\n') {\n+                retStr.append(\"\\\\n\");\n+            } else if (codePoint == '\\t') {\n+                retStr.append(\"\\\\t\");\n+            } else if (codePoint == '\"' || codePoint == '\\'' || codePoint == '\\\\') {\n+                retStr.append('\\\\');\n+                retStr.append((char) codePoint);\n+            } else if (codePoint < 32) {\n+                // Control characters are not valid characters in JSON\n+                if (codePoint == '\\b') {\n+                    retStr.append(\"\\\\b\");\n+                } else if (codePoint == '\\f') {\n+                    retStr.append(\"\\\\f\");\n+                } else {\n+                    retStr.append(String.format(\"\\\\u%04x\", codePoint));\n+                }\n+            } else {\n+                retStr.append((char) codePoint);\n+            }\n+            i += Character.charCount(codePoint) - 1;\n+        } else {\n+            retStr.append(Character.toChars(codePoint));\n+        }\n+    }\n+    return retStr.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}