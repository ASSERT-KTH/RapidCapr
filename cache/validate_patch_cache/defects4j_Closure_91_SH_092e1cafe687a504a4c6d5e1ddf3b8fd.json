{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n  } else if (NodeUtil.isGet(lhs)) {\n    Node llhs = lhs.getFirstChild();\n    if (llhs.getType() == Token.GETPROP) {\n      String propName = llhs.getLastChild().getString();\n      if (propName.equals(\"prototype\") || propName.equals(\"constructor\")) {\n        // Don't traverse assignments to the 'prototype' or 'constructor'\n        // properties of an object.\n        return false;\n      }\n    }\n  }\n\n  // Don't traverse functions that are getting lent to a prototype.\n  if (NodeUtil.isPrototypeProperty(lhs)) {\n    return false;\n  }\n\n  // Don't traverse functions that are conditionally constructed.\n  if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..beaa3435 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,39 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+  } else if (NodeUtil.isGet(lhs)) {\n+    Node llhs = lhs.getFirstChild();\n+    if (llhs.getType() == Token.GETPROP) {\n+      String propName = llhs.getLastChild().getString();\n+      if (propName.equals(\"prototype\") || propName.equals(\"constructor\")) {\n+        // Don't traverse assignments to the 'prototype' or 'constructor'\n+        // properties of an object.\n+        return false;\n+      }\n+    }\n+  }\n+\n+  // Don't traverse functions that are getting lent to a prototype.\n+  if (NodeUtil.isPrototypeProperty(lhs)) {\n+    return false;\n+  }\n+\n+  // Don't traverse functions that are conditionally constructed.\n+  if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}