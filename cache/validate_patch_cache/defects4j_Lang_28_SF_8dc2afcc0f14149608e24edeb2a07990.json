{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        int inputLength = input.length();\n        if (inputLength <= index + 1) {\n            return 0;\n        }\n        if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (inputLength > start + 1 && input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            start++;\n            isHex = true;\n        }\n        int end = start;\n        while (end < inputLength && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if(end == inputLength) {\n            return 0;\n        }\n        String valueStr = input.subSequence(start, end).toString();\n        if(valueStr.length()==0) {\n            return 0;\n        }\n        int numericValue;\n        try{\n            numericValue = Integer.parseInt(valueStr, isHex? 16:10);\n        }\n        catch(NumberFormatException e) {\n            return 0;\n        }\n        if(Character.isDefined(numericValue)) {\n            out.write((numericValue));\n            return end + 1 - index;\n        }\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..14cb8c61 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,34 +34,42 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+        int inputLength = input.length();\n+        if (inputLength <= index + 1) {\n+            return 0;\n+        }\n+        if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+            return 0;\n+        }\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+        if (inputLength > start + 1 && input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n+        int end = start;\n+        while (end < inputLength && input.charAt(end) != ';') {\n+            end++;\n+        }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if(end == inputLength) {\n+            return 0;\n+        }\n+        String valueStr = input.subSequence(start, end).toString();\n+        if(valueStr.length()==0) {\n+            return 0;\n+        }\n+        int numericValue;\n+        try{\n+            numericValue = Integer.parseInt(valueStr, isHex? 16:10);\n+        }\n+        catch(NumberFormatException e) {\n+            return 0;\n+        }\n+        if(Character.isDefined(numericValue)) {\n+            out.write((numericValue));\n+            return end + 1 - index;\n         }\n         return 0;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 887 expected:<\u0377[\u0378]> but was:<\u0377[&#x378;]>",
    "test_result": "FAIL"
}