{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    final double factor = Math.exp(a * Math.log(x) - x - logGamma(a));\n    final double[] continuedFractions = new double[]{1.0, (1.0 - a)};\n    final ContinuedFraction cf = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            return 2 * n + 1 - a + x;\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n * (a - n);\n        }\n    };\n\n    final double inverse = x / a;\n\n    return inverse < 1.0\n            ? factor * cf.evaluate(inverse) / a\n            : 1.0 - factor / (cf.evaluate(1.0 / inverse) * inverse);\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2663caf26 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,37 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    final double factor = Math.exp(a * Math.log(x) - x - logGamma(a));\n+    final double[] continuedFractions = new double[]{1.0, (1.0 - a)};\n+    final ContinuedFraction cf = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            return 2 * n + 1 - a + x;\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n * (a - n);\n+        }\n+    };\n+\n+    final double inverse = x / a;\n+\n+    return inverse < 1.0\n+            ? factor * cf.evaluate(inverse) / a\n+            : 1.0 - factor / (cf.evaluate(1.0 / inverse) * inverse);\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}