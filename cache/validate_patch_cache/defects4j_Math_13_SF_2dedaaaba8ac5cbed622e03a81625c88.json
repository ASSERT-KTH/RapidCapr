{
    "patch": "        if (m.getRowDimension() * m.getColumnDimension() > 1000000) {\n            // Use iterative method for large matrices\n            return iterativeSquareRoot(m);\n        } else {\n            // Use eigen decomposition for small matrices\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }\n    \n    private RealMatrix iterativeSquareRoot(RealMatrix m) {\n        // Use iterative method for large matrices\n        RealMatrix x = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n        RealMatrix y = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n        final double epsilon = 1e-6;\n        int iteration = 0;\n        while (iteration < 100 && norm(y.subtract(x)) > epsilon) {\n            x = y;\n            y = x.add(m.multiply(inverse(x)).scalarMultiply(-0.5));\n            iteration++;\n        }\n        return y;\n    }\n    \n    private RealMatrix inverse(RealMatrix m) {\n        // Use LUDecomposition to calculate the inverse\n        final LUDecomposition luDecomposition = new LUDecomposition(m);\n        return luDecomposition.getSolver().getInverse();\n    }\n    \n    private double norm(RealMatrix m) {\n        double sum = 0;\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            for (int j = 0; j < m.getColumnDimension(); j++) {\n                sum += m.getEntry(i, j) * m.getEntry(i, j);\n            }\n        }\n        return Math.sqrt(sum);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0504893f5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,42 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        if (m.getRowDimension() * m.getColumnDimension() > 1000000) {\n+            // Use iterative method for large matrices\n+            return iterativeSquareRoot(m);\n+        } else {\n+            // Use eigen decomposition for small matrices\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n+    }\n+    \n+    private RealMatrix iterativeSquareRoot(RealMatrix m) {\n+        // Use iterative method for large matrices\n+        RealMatrix x = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+        RealMatrix y = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+        final double epsilon = 1e-6;\n+        int iteration = 0;\n+        while (iteration < 100 && norm(y.subtract(x)) > epsilon) {\n+            x = y;\n+            y = x.add(m.multiply(inverse(x)).scalarMultiply(-0.5));\n+            iteration++;\n+        }\n+        return y;\n     }\n+    \n+    private RealMatrix inverse(RealMatrix m) {\n+        // Use LUDecomposition to calculate the inverse\n+        final LUDecomposition luDecomposition = new LUDecomposition(m);\n+        return luDecomposition.getSolver().getInverse();\n+    }\n+    \n+    private double norm(RealMatrix m) {\n+        double sum = 0;\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            for (int j = 0; j < m.getColumnDimension(); j++) {\n+                sum += m.getEntry(i, j) * m.getEntry(i, j);\n+            }\n+        }\n+        return Math.sqrt(sum);\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}