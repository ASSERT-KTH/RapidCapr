{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType() ||\n            type.isFunctionPrototypeType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else if (type.toObjectType() != null &&\n            type.toObjectType().getConstructor() != null) {\n        // Otherwise, use the constructor name.\n        return type.toObjectType().getConstructor().getDisplayName();\n    } else if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            // classes\n            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                objectType = objectType.getImplicitPrototype();\n            }\n            if (objectType != null) {\n                // If the property is a constructor, use its display name instead of its qualified name.\n                JSType propType = objectType.getOwnSlot(propName).getType();\n                if (propType != null && propType.isConstructor()) {\n                    FunctionType propConstructorType = propType.toMaybeFunctionType();\n                    if (propConstructorType != null) {\n                        return propConstructorType.getDisplayName();\n                    }\n                }\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n    return type.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..ebc52d66 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,49 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n-\n+String getReadableJSTypeName(Node n, boolean dereference) {\n     // The best type name is the actual type name.\n-\n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n-    if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n-    }\n-\n     JSType type = getJSType(n);\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n-    }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+        ObjectType dereferenced = type.dereference();\n+        if (dereferenced != null) {\n+            type = dereferenced;\n+        }\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n-    } else {\n-      return type.toString();\n+        return qualifiedName;\n+    } else if (type.isFunctionType() ||\n+            type.isFunctionPrototypeType()) {\n+        // Don't show complex function names.\n+        return \"function\";\n+    } else if (type.toObjectType() != null &&\n+            type.toObjectType().getConstructor() != null) {\n+        // Otherwise, use the constructor name.\n+        return type.toObjectType().getConstructor().getDisplayName();\n+    } else if (n.isGetProp()) {\n+        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+        if (objectType != null) {\n+            String propName = n.getLastChild().getString();\n+            // classes\n+            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+                objectType = objectType.getImplicitPrototype();\n+            }\n+            if (objectType != null) {\n+                // If the property is a constructor, use its display name instead of its qualified name.\n+                JSType propType = objectType.getOwnSlot(propName).getType();\n+                if (propType != null && propType.isConstructor()) {\n+                    FunctionType propConstructorType = propType.toMaybeFunctionType();\n+                    if (propConstructorType != null) {\n+                        return propConstructorType.getDisplayName();\n+                    }\n+                }\n+                return objectType.toString() + \".\" + propName;\n+            }\n+        }\n     }\n-  }\n+    return type.toString();\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...tual parameter 1 of [Window.prototype].alert does not matc...> but was:<...tual parameter 1 of [this].alert does not matc...>",
    "test_result": "FAIL"
}