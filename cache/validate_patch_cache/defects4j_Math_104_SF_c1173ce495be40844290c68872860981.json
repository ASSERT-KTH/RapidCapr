{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double gamma = Gamma.gamma(a);\n    double regularized = Gamma.regularizedGammaP(a, x);\n    double epsilon = 10e-15;\n    double sum = 1.0;\n    double term = 1.0;\n    double n = 1.0;\n\n    while (sum / regularized >= epsilon) {\n        term *= x / (a + n);\n        sum += term;\n        n += 1.0;\n    }\n\n    return gamma * sum / regularized;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0b6cdbf36 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double gamma = Gamma.gamma(a);\n+    double regularized = Gamma.regularizedGammaP(a, x);\n+    double epsilon = 10e-15;\n+    double sum = 1.0;\n+    double term = 1.0;\n+    double n = 1.0;\n+\n+    while (sum / regularized >= epsilon) {\n+        term *= x / (a + n);\n+        sum += term;\n+        n += 1.0;\n+    }\n+\n+    return gamma * sum / regularized;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}