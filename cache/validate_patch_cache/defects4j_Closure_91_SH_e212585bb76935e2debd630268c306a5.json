{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        // Only traverse functions that are being assigned as properties of an object\n        // or being assigned to a variable.\n        if (!(lhs.getType() == Token.GETPROP ||\n              lhs.getType() == Token.NAME)) {\n          return false;\n        }\n\n        // Don't traverse functions being assigned to prototype properties or\n        // being assigned to nested object structures.\n        Node object = lhs.getLastChild();\n        Node assignParent = parent.getParent();\n        if (object != null && object.getString().equals(\"prototype\")) {\n          return false;\n        } else if (assignParent != null && assignParent.getType() == Token.GETPROP) {\n          if (assignParent.getLastChild() != lhs) {\n            return false;\n          }\n          object = assignParent.getFirstChild();\n          if (object != null && object.getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..882bb834 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        // Only traverse functions that are being assigned as properties of an object\n+        // or being assigned to a variable.\n+        if (!(lhs.getType() == Token.GETPROP ||\n+              lhs.getType() == Token.NAME)) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions being assigned to prototype properties or\n+        // being assigned to nested object structures.\n+        Node object = lhs.getLastChild();\n+        Node assignParent = parent.getParent();\n+        if (object != null && object.getString().equals(\"prototype\")) {\n+          return false;\n+        } else if (assignParent != null && assignParent.getType() == Token.GETPROP) {\n+          if (assignParent.getLastChild() != lhs) {\n+            return false;\n+          }\n+          object = assignParent.getFirstChild();\n+          if (object != null && object.getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}