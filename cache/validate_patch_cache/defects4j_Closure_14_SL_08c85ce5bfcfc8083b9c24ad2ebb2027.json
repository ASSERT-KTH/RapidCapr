{
    "patch": "if (cfa != null) {\n  Node finallyParent = finallyNode.getParent();\n  Node nextNode = finallyNode.getNext();\n  if (finallyParent.isBlock() && nextNode != null) { // Finally not terminating block.\n    if (finallyParent.getParent() != null) { // Finally not block terminator.\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(nextNode));\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(nextNode, finallyParent, cfa));\n    } else { // Finally was the last block in this function.\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n    }\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..a9f2ca53 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,20 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node finallyParent = finallyNode.getParent();\n+  Node nextNode = finallyNode.getNext();\n+  if (finallyParent.isBlock() && nextNode != null) { // Finally not terminating block.\n+    if (finallyParent.getParent() != null) { // Finally not block terminator.\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(nextNode));\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(nextNode, finallyParent, cfa));\n+    } else { // Finally was the last block in this function.\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n+    }\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}