{
    "patch": "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).ifPresent(candidate -> {\n    try {\n        field.setAccessible(true);\n        field.set(fieldInstance, candidate);\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n    }\n    mocks.remove(candidate);\n});",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2a7da40e5 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,18 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).ifPresent(candidate -> {\n+    try {\n+        field.setAccessible(true);\n+        field.set(fieldInstance, candidate);\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+    }\n+    mocks.remove(candidate);\n+});\n         }\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}