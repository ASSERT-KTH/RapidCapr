{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        boolean next = offsetAdjusted > offsetLocal;\n        long instantNext;\n        int offsetNext;\n        if (next) {\n            instantNext = nextTransition(instantAdjusted);\n            offsetNext = getOffset(instantNext);\n        } else {\n            instantNext = previousTransition(instantAdjusted);\n            if (instantNext == instantAdjusted) {\n                instantNext = previousTransition(instantAdjusted - 1);\n            }\n            offsetNext = getOffset(instantNext);\n        }\n        if ((offsetLocal - offsetNext) < 0) {\n            // we need to adjust as we are near a DST gap\n            // with positive offsets, we should return the later instant\n            // with negative offsets, we should return the earlier instant\n            if ((next && (offsetLocal - offsetAdjusted) < 0) ||\n                (!next && (offsetLocal - offsetAdjusted) >= 0)) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted || (offsetAdjusted > offsetLocal && nextLocal - instantLocal < nextAdjusted - instantAdjusted)) {\n                    offsetAdjusted = offsetLocal;\n                }\n            }\n        } else {\n            // we need to adjust as we are near a DST overlap\n            // with positive offsets, we should return the earlier instant\n            // with negative offsets, we should return the later instant\n            if ((next && (offsetAdjusted - offsetLocal) >= 0) ||\n                (!next && (offsetAdjusted - offsetLocal) < 0)) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantAdjusted - offsetLocal);\n                if (prevLocal != prevAdjusted || (offsetAdjusted > offsetLocal && instantLocal - prevLocal < instantAdjusted - prevAdjusted)) {\n                    offsetAdjusted = offsetLocal;\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b9fc429a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,55 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        boolean next = offsetAdjusted > offsetLocal;\n+        long instantNext;\n+        int offsetNext;\n+        if (next) {\n+            instantNext = nextTransition(instantAdjusted);\n+            offsetNext = getOffset(instantNext);\n+        } else {\n+            instantNext = previousTransition(instantAdjusted);\n+            if (instantNext == instantAdjusted) {\n+                instantNext = previousTransition(instantAdjusted - 1);\n+            }\n+            offsetNext = getOffset(instantNext);\n+        }\n+        if ((offsetLocal - offsetNext) < 0) {\n+            // we need to adjust as we are near a DST gap\n+            // with positive offsets, we should return the later instant\n+            // with negative offsets, we should return the earlier instant\n+            if ((next && (offsetLocal - offsetAdjusted) < 0) ||\n+                (!next && (offsetLocal - offsetAdjusted) >= 0)) {\n                 long nextLocal = nextTransition(instantAdjusted);\n                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+                if (nextLocal != nextAdjusted || (offsetAdjusted > offsetLocal && nextLocal - instantLocal < nextAdjusted - instantAdjusted)) {\n+                    offsetAdjusted = offsetLocal;\n+                }\n+            }\n+        } else {\n+            // we need to adjust as we are near a DST overlap\n+            // with positive offsets, we should return the earlier instant\n+            // with negative offsets, we should return the later instant\n+            if ((next && (offsetAdjusted - offsetLocal) >= 0) ||\n+                (!next && (offsetAdjusted - offsetLocal) < 0)) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantAdjusted - offsetLocal);\n+                if (prevLocal != prevAdjusted || (offsetAdjusted > offsetLocal && instantLocal - prevLocal < instantAdjusted - prevAdjusted)) {\n+                    offsetAdjusted = offsetLocal;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}