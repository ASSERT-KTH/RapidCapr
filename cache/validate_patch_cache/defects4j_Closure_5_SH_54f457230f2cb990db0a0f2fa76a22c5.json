{
    "patch": "  public class MinimizeExitPoints\n      implements CompilerPass {\n    AbstractCompiler compiler;\n\n    public MinimizeExitPoints(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n\n    public void process(Node externs, Node js) {\n      // Set a flag if the minimize_exit_points command-line option is set.\n      boolean minimizeExitPoints =\n          \"true\".equals(compiler.getOptions().get(\"minimize_exit_points\"));\n      if (minimizeExitPoints) {\n        for (NodeTraversal.Callback cb : ImmutableList.of(\n            new ReplaceReturns(),\n            new RemoveExtraStatements(),\n            new MinimizeExitPointsCallback())) {\n          NodeTraversal.builder()\n              .setCompiler(compiler)\n              .setCallback(cb)\n              .build()\n              .traverseWithScope(js, js.getEnclosingScope());\n        }\n      } else {\n        runOnFunctionBody(js);\n      }\n    }\n\n    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n      if (!fn.isFunction()) {\n        return false;\n      }\n\n      if (!NodeUtil.isFunctionExpression(fn)) {\n        return false;\n      }\n\n      return NodeUtil.getDeclaredVars(fn.getParent()).length == 0;\n    }\n\n    static void runOnFunctionBody(Node root) {\n      new NodeTraversal(new MinimizeExitPointsCallback())\n          .traverseWithScope(root, root.getEnclosingScope());\n    }\n    \n    // The rest of the class has been omitted for brevity\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..954ce536 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,53 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+  public class MinimizeExitPoints\n+      implements CompilerPass {\n+    AbstractCompiler compiler;\n+\n+    public MinimizeExitPoints(AbstractCompiler compiler) {\n+      this.compiler = compiler;\n+    }\n+\n+    public void process(Node externs, Node js) {\n+      // Set a flag if the minimize_exit_points command-line option is set.\n+      boolean minimizeExitPoints =\n+          \"true\".equals(compiler.getOptions().get(\"minimize_exit_points\"));\n+      if (minimizeExitPoints) {\n+        for (NodeTraversal.Callback cb : ImmutableList.of(\n+            new ReplaceReturns(),\n+            new RemoveExtraStatements(),\n+            new MinimizeExitPointsCallback())) {\n+          NodeTraversal.builder()\n+              .setCompiler(compiler)\n+              .setCallback(cb)\n+              .build()\n+              .traverseWithScope(js, js.getEnclosingScope());\n+        }\n+      } else {\n+        runOnFunctionBody(js);\n+      }\n+    }\n+\n+    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n+      if (!fn.isFunction()) {\n+        return false;\n+      }\n+\n+      if (!NodeUtil.isFunctionExpression(fn)) {\n+        return false;\n+      }\n+\n+      return NodeUtil.getDeclaredVars(fn.getParent()).length == 0;\n+    }\n+\n+    static void runOnFunctionBody(Node root) {\n+      new NodeTraversal(new MinimizeExitPointsCallback())\n+          .traverseWithScope(root, root.getEnclosingScope());\n+    }\n+    \n+    // The rest of the class has been omitted for brevity\n+  }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}