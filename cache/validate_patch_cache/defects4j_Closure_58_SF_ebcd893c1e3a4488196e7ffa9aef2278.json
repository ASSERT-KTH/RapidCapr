{
    "patch": " private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF: {\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        Node child = n.getLastChild();\n        if (child != null) {\n          computeGenKill(child, gen, kill, conditional);\n        }\n        break;\n      }\n      case Token.FOR: {\n        if (!NodeUtil.isForIn(n)) {\n          Node init = NodeUtil.getConditionExpression(n);\n          if (init != null) {\n            computeGenKill(init, gen, kill, true);\n          }\n          Node child = NodeUtil.getForInIterator(n);\n          if (child != null) {\n            addToSetIfLocal(child, kill);\n            addToSetIfLocal(child, gen);\n            computeGenKill(child.getNext(), gen, kill, true);\n          }\n          Node block = NodeUtil.getForInBlock(n);\n          if (block != null) {\n            computeGenKill(block, gen, kill, conditional);\n          }\n        } else {\n          // Accept either VAR or NAME for lhs of IN.\n          Node child = n.getFirstChild();\n          Node lhs;\n          if (child.getType() == Token.VAR) {\n            lhs = child.getFirstChild();\n          } else {\n            lhs = child;\n          }\n          addToSetIfLocal(lhs, kill);\n          addToSetIfLocal(lhs, gen);\n          Node rhs = child.getNext();\n          computeGenKill(rhs, gen, kill, true);\n          Node block = n.getLastChild();\n          if (block != null) {\n            computeGenKill(block, gen, kill, conditional);\n          }\n        }\n        break;\n      }\n\n      case Token.FOR_OF: {\n        Node init = n.getFirstChild();\n        computeGenKill(init, gen, kill, true);\n        Node child = NthIterator.getNth(init.getFirstChild(), 1);\n        addChildVars(child, kill, gen, true);\n        Node block = n.getLastChild();\n        computeGenKill(block, gen, kill, conditional);\n        break;\n      }\n\n      case Token.VAR: {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, true);\n          }\n          if (!conditional) {\n            addToSetIfLocal(c, kill);\n          }\n        }\n        break;\n      }\n\n      case Token.AND:\n      case Token.OR: {\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        break;\n      }\n\n      case Token.HOOK: {\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        break;\n      }\n\n      case Token.NAME: {\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        break;\n      }\n\n      default: {\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, true);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, true);\n          }\n        }\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..bf9b02d0 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,74 +175,106 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+ private void computeGenKill(Node n, BitSet gen, BitSet kill,\n       boolean conditional) {\n-\n     switch (n.getType()) {\n       case Token.SCRIPT:\n       case Token.BLOCK:\n       case Token.FUNCTION:\n         return;\n-\n       case Token.WHILE:\n       case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n+      case Token.IF: {\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+        Node child = n.getLastChild();\n+        if (child != null) {\n+          computeGenKill(child, gen, kill, conditional);\n+        }\n+        break;\n+      }\n+      case Token.FOR: {\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          Node init = NodeUtil.getConditionExpression(n);\n+          if (init != null) {\n+            computeGenKill(init, gen, kill, true);\n+          }\n+          Node child = NodeUtil.getForInIterator(n);\n+          if (child != null) {\n+            addToSetIfLocal(child, kill);\n+            addToSetIfLocal(child, gen);\n+            computeGenKill(child.getNext(), gen, kill, true);\n+          }\n+          Node block = NodeUtil.getForInBlock(n);\n+          if (block != null) {\n+            computeGenKill(block, gen, kill, conditional);\n+          }\n         } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+          // Accept either VAR or NAME for lhs of IN.\n+          Node child = n.getFirstChild();\n+          Node lhs;\n+          if (child.getType() == Token.VAR) {\n+            lhs = child.getFirstChild();\n+          } else {\n+            lhs = child;\n+          }\n+          addToSetIfLocal(lhs, kill);\n+          addToSetIfLocal(lhs, gen);\n+          Node rhs = child.getNext();\n+          computeGenKill(rhs, gen, kill, true);\n+          Node block = n.getLastChild();\n+          if (block != null) {\n+            computeGenKill(block, gen, kill, conditional);\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n         }\n-        return;\n+        break;\n+      }\n \n-      case Token.VAR:\n+      case Token.FOR_OF: {\n+        Node init = n.getFirstChild();\n+        computeGenKill(init, gen, kill, true);\n+        Node child = NthIterator.getNth(init.getFirstChild(), 1);\n+        addChildVars(child, kill, gen, true);\n+        Node block = n.getLastChild();\n+        computeGenKill(block, gen, kill, conditional);\n+        break;\n+      }\n+\n+      case Token.VAR: {\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n-            }\n+            computeGenKill(c.getFirstChild(), gen, kill, true);\n+          }\n+          if (!conditional) {\n+            addToSetIfLocal(c, kill);\n           }\n         }\n-        return;\n+        break;\n+      }\n \n       case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n+      case Token.OR: {\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n+        break;\n+      }\n \n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n+      case Token.HOOK: {\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n+        break;\n+      }\n \n-      case Token.NAME:\n+      case Token.NAME: {\n         if (isArgumentsName(n)) {\n           markAllParametersEscaped();\n         } else {\n           addToSetIfLocal(n, gen);\n         }\n-        return;\n+        break;\n+      }\n \n-      default:\n+      default: {\n         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n           Node lhs = n.getFirstChild();\n           if (!conditional) {\n@@ -252,15 +284,14 @@ class LiveVariablesAnalysis extends\n             // assignments such as a += 1 reads a.\n             addToSetIfLocal(lhs, gen);\n           }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n+          computeGenKill(lhs.getNext(), gen, kill, true);\n         } else {\n           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+            computeGenKill(c, gen, kill, true);\n           }\n         }\n-        return;\n-    }\n-  }\n+        break;\n+      }\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}