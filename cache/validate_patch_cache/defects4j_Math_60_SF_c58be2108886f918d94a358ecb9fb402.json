{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        try {\n            if (Double.isInfinite(dev)) {\n                return dev < 0 ? 0.0 : 1.0;\n            } else {\n                return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n            }\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..79284a480 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -124,8 +124,11 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n     public double cumulativeProbability(double x) throws MathException {\n         final double dev = x - mean;\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            if (Double.isInfinite(dev)) {\n+                return dev < 0 ? 0.0 : 1.0;\n+            } else {\n+                return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n+            }\n         } catch (MaxIterationsExceededException ex) {\n             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                 return 0;",
    "result_reason": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e",
    "test_result": "FAIL"
}