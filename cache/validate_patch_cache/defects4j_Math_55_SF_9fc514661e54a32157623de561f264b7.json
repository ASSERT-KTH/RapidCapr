{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double eps = 1e-10;\n    double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n    double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n\n    double crossProductX = v1y * v2z - v1z * v2y;\n    double crossProductY = v1z * v2x - v1x * v2z;\n    double crossProductZ = v1x * v2y - v1y * v2x;\n    double crossProductNorm = Math.sqrt(crossProductX*crossProductX + crossProductY*crossProductY + crossProductZ*crossProductZ);\n\n    if(crossProductNorm < eps * v1.getNorm() * v2.getNorm()) {\n        double x = Math.abs(v1x) < eps ? 1 : 0;\n        double y = Math.abs(v1y) < eps ? 1 : 0;\n        double z = Math.abs(v1z) < eps ? 1 : 0;\n        // try another combination if cross product is still too small\n        if((x+y+z) < 1) {\n            double s = Math.sqrt((y - z)*(y - z) + (z - x)*(z - x) + (x - y)*(x - y));\n            x = s * ((y - z) * crossProductX - (v1y - v1z) * crossProductZ);\n            y = s * ((z - x) * crossProductY - (v1z - v1x) * crossProductX);\n            z = s * ((x - y) * crossProductZ - (v1x - v1y) * crossProductY);\n        }\n        double norm = Math.sqrt(x*x + y*y + z*z);\n        return new Vector3D(x / norm, y / norm, z / norm);\n    }\n    return new Vector3D(crossProductX / crossProductNorm, crossProductY / crossProductNorm, crossProductZ / crossProductNorm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..29ee0233f 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,32 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double eps = 1e-10;\n+    double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n+    double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n+\n+    double crossProductX = v1y * v2z - v1z * v2y;\n+    double crossProductY = v1z * v2x - v1x * v2z;\n+    double crossProductZ = v1x * v2y - v1y * v2x;\n+    double crossProductNorm = Math.sqrt(crossProductX*crossProductX + crossProductY*crossProductY + crossProductZ*crossProductZ);\n+\n+    if(crossProductNorm < eps * v1.getNorm() * v2.getNorm()) {\n+        double x = Math.abs(v1x) < eps ? 1 : 0;\n+        double y = Math.abs(v1y) < eps ? 1 : 0;\n+        double z = Math.abs(v1z) < eps ? 1 : 0;\n+        // try another combination if cross product is still too small\n+        if((x+y+z) < 1) {\n+            double s = Math.sqrt((y - z)*(y - z) + (z - x)*(z - x) + (x - y)*(x - y));\n+            x = s * ((y - z) * crossProductX - (v1y - v1z) * crossProductZ);\n+            y = s * ((z - x) * crossProductY - (v1z - v1x) * crossProductX);\n+            z = s * ((x - y) * crossProductZ - (v1x - v1y) * crossProductY);\n+        }\n+        double norm = Math.sqrt(x*x + y*y + z*z);\n+        return new Vector3D(x / norm, y / norm, z / norm);\n+    }\n+    return new Vector3D(crossProductX / crossProductNorm, crossProductY / crossProductNorm, crossProductZ / crossProductNorm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28603877677367767>",
    "test_result": "FAIL"
}