{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null &&\n          (!value.isFunction() && !NodeUtil.mayHaveSideEffects(n)) &&\n          (value.isNumber() || value.isString())) {\n        Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..6e46a75d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -210,17 +210,11 @@ class PeepholeSubstituteAlternateSyntax\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n           callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n+      if (value != null &&\n+          (!value.isFunction() && !NodeUtil.mayHaveSideEffects(n)) &&\n+          (value.isNumber() || value.isString())) {\n+        Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n         n.getParent().replaceChild(n, addition);\n         reportCodeChange();\n         return addition;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}