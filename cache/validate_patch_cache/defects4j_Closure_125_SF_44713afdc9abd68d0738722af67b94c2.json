{
    "patch": "private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    \n    if (!type.isConstructor()) {\n        report(t, constructor, NOT_A_CONSTRUCTO",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..dc1d8375 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1653,22 +1653,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits a NEW node.\n    */\n-  private void visitNew(NodeTraversal t, Node n) {\n+private void visitNew(NodeTraversal t, Node n) {\n     Node constructor = n.getFirstChild();\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n-      FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n-        visitParameterList(t, n, fnType);\n-        ensureTyped(t, n, fnType.getInstanceType());\n-      } else {\n-        ensureTyped(t, n);\n-      }\n-    } else {\n-      report(t, n, NOT_A_CONSTRUCTOR);\n-      ensureTyped(t, n);\n-    }\n-  }\n+    \n+    if (!type.isConstructor()) {\n+        report(t, constructor, NOT_A_CONSTRUCTO\n \n   /**\n    * Check whether there's any property conflict for for a particular super",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}