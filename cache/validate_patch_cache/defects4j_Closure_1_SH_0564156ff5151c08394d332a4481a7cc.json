{
    "patch": "    if (!argList.hasChildren()) {\n      // If there are no arguments, return early.\n      return;\n    }\n    Node curArg = argList.getFirstChild();\n    while (curArg != null) {\n      boolean shouldBeRemoved = false;\n      if (!referenced.contains(fnScope.getVar(curArg.getString()))) {\n        shouldBeRemoved = true;\n        NodeUtil.markFunctionsDeletedLocal(curArg, compiler);\n        NodeUtil.markParametersIndexInvalid(function);\n        // Unfortunately, removing the unused argument above has\n        // the effect of preserving its name in the function signature.\n        // We could rename it, but that would be expensive and confusing.\n        // Instead, we rely on the sanity check performed later that will\n        // refuse to remove the last preserved parameter if it's unused.\n      }\n      Node nextArg = curArg.getNext();\n      if (shouldBeRemoved) {\n        argList.removeChild(curArg);\n        compiler.reportCodeChange();\n      }\n      curArg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bc0315e8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (!argList.hasChildren()) {\n+      // If there are no arguments, return early.\n+      return;\n+    }\n+    Node curArg = argList.getFirstChild();\n+    while (curArg != null) {\n+      boolean shouldBeRemoved = false;\n+      if (!referenced.contains(fnScope.getVar(curArg.getString()))) {\n+        shouldBeRemoved = true;\n+        NodeUtil.markFunctionsDeletedLocal(curArg, compiler);\n+        NodeUtil.markParametersIndexInvalid(function);\n+        // Unfortunately, removing the unused argument above has\n+        // the effect of preserving its name in the function signature.\n+        // We could rename it, but that would be expensive and confusing.\n+        // Instead, we rely on the sanity check performed later that will\n+        // refuse to remove the last preserved parameter if it's unused.\n+      }\n+      Node nextArg = curArg.getNext();\n+      if (shouldBeRemoved) {\n+        argList.removeChild(curArg);\n+        compiler.reportCodeChange();\n+      }\n+      curArg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}