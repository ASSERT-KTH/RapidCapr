{
    "patch": "if (n == scope.getRootNode()) return;\n\nswitch (n.getType()) {\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.FUNCTION:\n    if (NodeUtil.isFunctionDeclaration(n)) {\n      defineDeclaredFunction(n, parent);\n    } else if (NodeUtil.isFunctionExpression(n)) {\n      Node grandparent = n.getParent().getParent();\n      if (grandparent.getType() == Token.BLOCK) {\n        defineDeclaredFunction(n, grandparent);\n      } else {\n        handleFunctionInputs(n.getParent());\n      }\n    }\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.LP:\n    if (parent.getType() == Token.EXPR_RESULT\n        && parent.getFirstChild() != null\n        && parent.getFirstChild().getType() == Token.FUNCTION) {\n      handleFunctionInputs(parent);\n    }\n    break;\n}\n\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e2db63e9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+if (n == scope.getRootNode()) return;\n+\n+switch (n.getType()) {\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.FUNCTION:\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+      defineDeclaredFunction(n, parent);\n+    } else if (NodeUtil.isFunctionExpression(n)) {\n+      Node grandparent = n.getParent().getParent();\n+      if (grandparent.getType() == Token.BLOCK) {\n+        defineDeclaredFunction(n, grandparent);\n+      } else {\n+        handleFunctionInputs(n.getParent());\n       }\n     }\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.LP:\n+    if (parent.getType() == Token.EXPR_RESULT\n+        && parent.getFirstChild() != null\n+        && parent.getFirstChild().getType() == Token.FUNCTION) {\n+      handleFunctionInputs(parent);\n+    }\n+    break;\n+}\n+\n+attachLiteralTypes(n);\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}