{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n                                  FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (!arguments.hasNext()) {\n        if (functionType.isVarArgs()) {\n          break;\n        } else {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n              functionType.getMaxArguments() != Integer.MAX_VALUE ?\n              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n          return;\n        }\n      }\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    \n    // if end of parameters list is reached, but there are still arguments left\n    if (!functionType.isVarArgs() && arguments.hasNext()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n          \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n      return;\n    }\n    \n    // if there are more parameters than arguments\n    if (!functionType.isVarArgs() && parameters.hasNext()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n          \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..4ac33007 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1397,7 +1397,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * Visits the parameters of a CALL or a NEW node.\n    */\n   private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+                                  FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,27 +1405,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (!arguments.hasNext()) {\n+        if (functionType.isVarArgs()) {\n+          break;\n+        } else {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+              functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+          return;\n+        }\n+      }\n       argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    \n+    // if end of parameters list is reached, but there are still arguments left\n+    if (!functionType.isVarArgs() && arguments.hasNext()) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+          \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+      return;\n+    }\n+    \n+    // if there are more parameters than arguments\n+    if (!functionType.isVarArgs() && parameters.hasNext()) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+          \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}