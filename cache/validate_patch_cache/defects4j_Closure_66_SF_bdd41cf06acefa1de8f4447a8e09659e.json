{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, List<String>>>(){}.getType();\n    Map<String, List<String>> map = gson.fromJson(jsonStr, type);\n    int totalCount = 0;\n    int typedCount = 0;\n    for (List<String> list : map.values()) {\n        totalCount += list.size();\n        for (String value : list) {\n            if (!value.equals(\"null\")) {\n                typedCount++;\n            }\n        }\n    }\n    return ((double)typedCount/totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..896c9286 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, List<String>>>(){}.getType();\n+    Map<String, List<String>> map = gson.fromJson(jsonStr, type);\n+    int totalCount = 0;\n+    int typedCount = 0;\n+    for (List<String> list : map.values()) {\n+        totalCount += list.size();\n+        for (String value : list) {\n+            if (!value.equals(\"null\")) {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    return ((double)typedCount/totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}