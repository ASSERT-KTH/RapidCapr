{
    "patch": "public void testGetprop4() {\n    String[] command = { \"getprop\", \"nonexistent.property\" };\n    Shell.Result result = Shell.execute(command);\n    assertFalse(\"expected non-zero exit code\", result.isSuccess());\n    String[] errors = result.getErr().split(\"\\n\");\n    boolean warning = false;\n    for (String error : errors) {\n        if (error.contains(\"error\") || error.contains(\"failed\")) {\n            fail(error);\n        } else if (error.contains(\"warning\")) {\n            warning = true;\n        }\n    }\n    assertTrue(\"expected a warning\", warning);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..13b928bd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String[] command = { \"getprop\", \"nonexistent.property\" };\n+    Shell.Result result = Shell.execute(command);\n+    assertFalse(\"expected non-zero exit code\", result.isSuccess());\n+    String[] errors = result.getErr().split(\"\\n\");\n+    boolean warning = false;\n+    for (String error : errors) {\n+        if (error.contains(\"error\") || error.contains(\"failed\")) {\n+            fail(error);\n+        } else if (error.contains(\"warning\")) {\n+            warning = true;\n+        }\n+    }\n+    assertTrue(\"expected a warning\", warning);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}