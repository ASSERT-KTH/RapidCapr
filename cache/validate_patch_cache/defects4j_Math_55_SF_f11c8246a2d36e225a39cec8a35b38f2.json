{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double factor1 = v1.getNorm() / v1.getNorm1();\n    final double factor2 = v2.getNorm() / v2.getNorm1();\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double rho   = Math.ulp(1d) * (v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) /\n                         (v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ());\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    final double resX  = (v1.getY() - rho * v2.getY()) * (v2.getZ() * factor2) -\n                         (v1.getZ() - rho * v2.getZ()) * (v2.getY() * factor2);\n    final double resY  = (v1.getZ() - rho * v2.getZ()) * (v2.getX() * factor2) -\n                         (v1.getX() - rho * v2.getX()) * (v2.getZ() * factor2);\n    final double resZ  = (v1.getX() - rho * v2.getX()) * (v2.getY() * factor2) -\n                         (v1.getY() - rho * v2.getY()) * (v2.getX() * factor2);\n\n    return new Vector3D(resX * factor1, resY * factor1, resZ * factor1);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..94657392b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,34 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double factor1 = v1.getNorm() / v1.getNorm1();\n+    final double factor2 = v2.getNorm() / v2.getNorm1();\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rho   = Math.ulp(1d) * (v1.getX() * v2.getX() + v1.getY() * v2.getY() + v1.getZ() * v2.getZ()) /\n+                         (v2.getX() * v2.getX() + v2.getY() * v2.getY() + v2.getZ() * v2.getZ());\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    final double resX  = (v1.getY() - rho * v2.getY()) * (v2.getZ() * factor2) -\n+                         (v1.getZ() - rho * v2.getZ()) * (v2.getY() * factor2);\n+    final double resY  = (v1.getZ() - rho * v2.getZ()) * (v2.getX() * factor2) -\n+                         (v1.getX() - rho * v2.getX()) * (v2.getZ() * factor2);\n+    final double resZ  = (v1.getX() - rho * v2.getX()) * (v2.getY() * factor2) -\n+                         (v1.getY() - rho * v2.getY()) * (v2.getX() * factor2);\n \n+    return new Vector3D(resX * factor1, resY * factor1, resZ * factor1);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.4034991517074563>",
    "test_result": "FAIL"
}