{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        if (name.getDeclaration() != null && name.aliasingGets > 0) {\n            for (Ref ref : name.getRefs()) {\n                if (ref.type != Ref.Type.ALIASING_GET || !ref.scope.isLocal()) {\n                    continue;\n                }\n                if (inlineAliasIfPossible(ref, namespace)) {\n                    name.aliasingGets--;\n                    if (name.aliasingGets == 0 && name.isGetOrSetDefinition()) {\n                        name.removeProp(name.getParent(), name.getName());\n                    }\n                    break; // re-run the outer loop because inlining a local alias\n                    // may allow more definitions to be inlined.\n                }\n            }\n            if (name.aliasingGets == 0 && name.isGetOrSetDefinition()) {\n                name.removeProp(name.getParent(), name.getName());\n            }\n        } else if ((name.type == Name.Type.FUNCTION\n                    || name.type == Name.Type.OBJECTLIT) \n                   && name.globalSets == 1 && name.localSets == 0 \n                   && name.aliasingGets == 0 && name.isGetOrSetDefinition()) {\n            name.removeProp(name.getParent(), name.getName());\n        }\n\n        if ((name.type == Name.Type.OBJECTLIT ||\n                name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 \n                && name.globalSets == 0 && name.getDeclaration() == null \n                && name.localSets == 0 && name.props != null) {\n            workList.addAll(name.props);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..6b6b5432 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,47 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    while (!workList.isEmpty()) {\n+        Name name = workList.pop();\n+\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n+\n+        if (name.getDeclaration() != null && name.aliasingGets > 0) {\n+            for (Ref ref : name.getRefs()) {\n+                if (ref.type != Ref.Type.ALIASING_GET || !ref.scope.isLocal()) {\n+                    continue;\n+                }\n+                if (inlineAliasIfPossible(ref, namespace)) {\n+                    name.aliasingGets--;\n+                    if (name.aliasingGets == 0 && name.isGetOrSetDefinition()) {\n+                        name.removeProp(name.getParent(), name.getName());\n+                    }\n+                    break; // re-run the outer loop because inlining a local alias\n+                    // may allow more definitions to be inlined.\n+                }\n+            }\n+            if (name.aliasingGets == 0 && name.isGetOrSetDefinition()) {\n+                name.removeProp(name.getParent(), name.getName());\n+            }\n+        } else if ((name.type == Name.Type.FUNCTION\n+                    || name.type == Name.Type.OBJECTLIT) \n+                   && name.globalSets == 1 && name.localSets == 0 \n+                   && name.aliasingGets == 0 && name.isGetOrSetDefinition()) {\n+            name.removeProp(name.getParent(), name.getName());\n+        }\n+\n+        if ((name.type == Name.Type.OBJECTLIT ||\n+                name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 \n+                && name.globalSets == 0 && name.getDeclaration() == null \n+                && name.localSets == 0 && name.props != null) {\n+            workList.addAll(name.props);\n+        }\n+    }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}