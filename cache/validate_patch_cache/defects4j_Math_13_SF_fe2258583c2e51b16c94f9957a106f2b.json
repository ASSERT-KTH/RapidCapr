{
    "patch": "import org.apache.commons.math3.linear.CholeskyDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixUtils;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.linear.RealVectorPreservingVisitor;\n\nprivate RealMatrix squareRoot(final RealMatrix m) {\n    // Calculate the Cholesky Decomposition of the matrix.\n    final CholeskyDecomposition chol = new CholeskyDecomposition(m);\n\n    // Get the upper triangle of the Cholesky Decomposition.\n    final RealMatrix l = chol.getL();\n\n    // Apply the square root transformation to the matrix.\n    final RealMatrixPreservingVisitor sqrtVisitor = new RealMatrixPreservingVisitor() {\n        @Override\n        public void visit(final int row, final int column, final double value) {\n            l.setEntry(row, column, l.getEntry(row, column) * Math.sqrt(value));\n        }\n\n        @Override\n        public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn,\n                final int endColumn) {\n        }\n\n        @Override\n        public void end() {\n        }\n    };\n\n    m.walkInColumnOrder(sqrtVisitor);\n\n    final RealMatrix transposeL = l.transpose();\n\n    // Create a new matrix that is the product of the upper and lower triangles.\n    final RealMatrix product = l.multiply(transposeL);\n\n    return RealMatrixUtils.createRealMatrix(product.getData());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cf202a336 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,44 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+import org.apache.commons.math3.linear.CholeskyDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n+import org.apache.commons.math3.linear.RealMatrixUtils;\n+import org.apache.commons.math3.linear.RealVector;\n+import org.apache.commons.math3.linear.RealVectorPreservingVisitor;\n+\n+private RealMatrix squareRoot(final RealMatrix m) {\n+    // Calculate the Cholesky Decomposition of the matrix.\n+    final CholeskyDecomposition chol = new CholeskyDecomposition(m);\n+\n+    // Get the upper triangle of the Cholesky Decomposition.\n+    final RealMatrix l = chol.getL();\n+\n+    // Apply the square root transformation to the matrix.\n+    final RealMatrixPreservingVisitor sqrtVisitor = new RealMatrixPreservingVisitor() {\n+        @Override\n+        public void visit(final int row, final int column, final double value) {\n+            l.setEntry(row, column, l.getEntry(row, column) * Math.sqrt(value));\n+        }\n+\n+        @Override\n+        public void start(final int rows, final int columns, final int startRow, final int endRow, final int startColumn,\n+                final int endColumn) {\n+        }\n+\n+        @Override\n+        public void end() {\n+        }\n+    };\n+\n+    m.walkInColumnOrder(sqrtVisitor);\n+\n+    final RealMatrix transposeL = l.transpose();\n+\n+    // Create a new matrix that is the product of the upper and lower triangles.\n+    final RealMatrix product = l.multiply(transposeL);\n+\n+    return RealMatrixUtils.createRealMatrix(product.getData());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}