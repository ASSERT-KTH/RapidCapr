{
    "patch": "private static void inferPropertiesFromConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            String inferredDescription = null;\n            if (propType.hasInferredTypeMarker()) {\n              inferredDescription = \"inferred type: \" + propType.getResolvedInferredType();\n            }\n\n            JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n            objType.defineInferredProperty(prop, inferred, inferredDescription);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   * @param n the node being dereferenced\n   * @param scope the current flow scope\n   * @return the narrowed flow scope\n   */\n  private static FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n      inferPropertiesFromConstraint(type, narrowed);\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..f87a9183 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,7 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+private static void inferPropertiesFromConstraint(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1126,10 +1127,15 @@ class TypeInference\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            String inferredDescription = null;\n+            if (propType.hasInferredTypeMarker()) {\n+              inferredDescription = \"inferred type: \" + propType.getResolvedInferredType();\n+            }\n+\n+            JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n+            objType.defineInferredProperty(prop, inferred, inferredDescription);\n           }\n         }\n       }\n@@ -1139,14 +1145,20 @@ class TypeInference\n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n+   * @param n the node being dereferenced\n+   * @param scope the current flow scope\n+   * @return the narrowed flow scope\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  private static FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+      inferPropertiesFromConstraint(type, narrowed);\n+    }\n+    return scope;\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}