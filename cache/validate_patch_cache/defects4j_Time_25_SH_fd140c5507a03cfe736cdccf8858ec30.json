{
    "patch": "            if (offsetLocal > offsetAdjusted) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                final long nextLocal = nextTransition(instantAdjusted);\n                final int offsetNext = getOffset(nextLocal);\n                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                    return offsetLocal;\n                }\n\n                // We need to ensure that time is not near before the DST transition\n                // this happens naturally for negative offsets, but not for positive\n                if (offsetLocal < offsetAdjusted) {\n                    long nextLocal2 = nextTransition(instantAdjusted);\n                    long nextAdjusted2 = nextTransition(instantLocal - offsetAdjusted + 1L);\n                    if (nextLocal2 != nextAdjusted2) {\n                        return offsetLocal;    \n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2bbf3a33 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal > offsetAdjusted) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final int offsetNext = getOffset(nextLocal);\n+                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                    return offsetLocal;\n+                }\n+\n+                // We need to ensure that time is not near before the DST transition\n+                // this happens naturally for negative offsets, but not for positive\n+                if (offsetLocal < offsetAdjusted) {\n+                    long nextLocal2 = nextTransition(instantAdjusted);\n+                    long nextAdjusted2 = nextTransition(instantLocal - offsetAdjusted + 1L);\n+                    if (nextLocal2 != nextAdjusted2) {\n+                        return offsetLocal;    \n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}