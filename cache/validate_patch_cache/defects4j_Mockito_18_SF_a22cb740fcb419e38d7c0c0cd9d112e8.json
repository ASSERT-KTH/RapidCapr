{
    "patch": "public class MyClass<T> {\n    private T value;\n    \n    public MyClass(T value) {\n        this.value = value;\n    }\n    \n    public <T> T returnValueFor(Class<T> clazz) {\n        if (clazz == null) {\n            return null;\n        } else if (Iterable.class.isAssignableFrom(clazz)) {\n            return clazz.cast(Collections.singleton(value));\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..12c8d0ebb 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass<T> {\n+    private T value;\n+    \n+    public MyClass(T value) {\n+        this.value = value;\n+    }\n+    \n+    public <T> T returnValueFor(Class<T> clazz) {\n+        if (clazz == null) {\n+            return null;\n+        } else if (Iterable.class.isAssignableFrom(clazz)) {\n+            return clazz.cast(Collections.singleton(value));\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}