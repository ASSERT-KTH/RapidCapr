{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    long instant = 0;\n    if (year > 1582 || (year == 1582 && (monthOfYear > 10 || (monthOfYear == 10 && dayOfMonth >= 15)))) {\n        instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else {\n        instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    if (instant < iCutoverMillis) {\n        // The date is in the gap between the end of the Julian\n        // calendar and the start of the Gregorian calendar.\n        throw new IllegalArgumentException(\"Date is in the cutover gap, it does not exist\");\n    }\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..51212dd0 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,36 +347,37 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n+    long instant = 0;\n+    if (year > 1582 || (year == 1582 && (monthOfYear > 10 || (monthOfYear == 10 && dayOfMonth >= 15)))) {\n+        instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } else {\n+        instant = iJulianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n-        }\n-        return instant;\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n     }\n \n+    if (instant < iCutoverMillis) {\n+        // The date is in the gap between the end of the Julian\n+        // calendar and the start of the Gregorian calendar.\n+        throw new IllegalArgumentException(\"Date is in the cutover gap, it does not exist\");\n+    }\n+    return instant;\n+}\n+\n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.\n      * @return the cutover instant",
    "result_reason": "java.lang.IllegalArgumentException: Date is in the cutover gap, it does not exist",
    "test_result": "FAIL"
}