{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockAccess;\nimport org.mockito.internal.handler.MockHandlerFactory;\n\nimport java.lang.reflect.Proxy;\n\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MockSettingsImpl settings = new MockSettingsImpl();\n    settings.setSpiedInstance(mock);\n    settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n    if (mock instanceof MockAccess) {\n        MockAccess mockAccess = (MockAccess) mock;\n        MockHandler handler = mockAccess.getMockitoInterceptor().getMockHandler();\n        handler.setInterceptors(newFilter);\n    } else {\n        mock = (T) Proxy.newProxyInstance(\n                mock.getClass().getClassLoader(),\n                new Class<?>[]{mock.getClass().getInterfaces()[0], MockAccess.class},\n                new MockHandlerFactory().createMockHandler(newFilter));\n        setMockHandler(mock, newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..bedff77f8 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockAccess;\n+import org.mockito.internal.handler.MockHandlerFactory;\n+\n+import java.lang.reflect.Proxy;\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MockSettingsImpl settings = new MockSettingsImpl();\n+    settings.setSpiedInstance(mock);\n+    settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+    if (mock instanceof MockAccess) {\n+        MockAccess mockAccess = (MockAccess) mock;\n+        MockHandler handler = mockAccess.getMockitoInterceptor().getMockHandler();\n+        handler.setInterceptors(newFilter);\n+    } else {\n+        mock = (T) Proxy.newProxyInstance(\n+                mock.getClass().getClassLoader(),\n+                new Class<?>[]{mock.getClass().getInterfaces()[0], MockAccess.class},\n+                new MockHandlerFactory().createMockHandler(newFilter));\n+        setMockHandler(mock, newMockHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}