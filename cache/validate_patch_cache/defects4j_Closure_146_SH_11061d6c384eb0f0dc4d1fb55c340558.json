{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n        TypePair p = that.getTypesUnderInequality(this);\n        return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n        case TRUE:\n            JSType restrictedA = this.restrictByNotNullOrUndefined();\n            JSType restrictedB = that.restrictByNotNullOrUndefined();\n            if (restrictedA.isEquivalentTo(restrictedB)) {\n                return new TypePair(restrictedA, restrictedB);\n            }\n            return new TypePair(restrictedA, restrictedB);\n\n        case FALSE:\n        case UNKNOWN:\n            return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..38b5aa51 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,31 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+public TypePair getTypesUnderInequality(JSType that) {\n+    // unions types\n+    if (that instanceof UnionType) {\n+        TypePair p = that.getTypesUnderInequality(this);\n+        return new TypePair(p.typeB, p.typeA);\n+    }\n+\n+    // other types\n+    switch (this.testForEquality(that)) {\n+        case TRUE:\n+            JSType restrictedA = this.restrictByNotNullOrUndefined();\n+            JSType restrictedB = that.restrictByNotNullOrUndefined();\n+            if (restrictedA.isEquivalentTo(restrictedB)) {\n+                return new TypePair(restrictedA, restrictedB);\n+            }\n+            return new TypePair(restrictedA, restrictedB);\n+\n+        case FALSE:\n+        case UNKNOWN:\n+            return new TypePair(this, that);\n+    }\n+\n+    // switch case is exhaustive\n+    throw new IllegalStateException();\n+}\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}