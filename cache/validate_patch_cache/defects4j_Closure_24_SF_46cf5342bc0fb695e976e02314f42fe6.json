{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar() && parent.getChildCount() == 1) {\n      // Get the variable's name and qualified name.\n      String name = n.getString();\n      String qualifiedName = null;\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        qualifiedName = n.getFirstChild().getQualifiedName();\n      }\n\n      // Check if the variable is an alias (i.e., has a qualified name).\n      if (qualifiedName != null) {\n        // Get the alias variable and its initial value.\n        Var aliasVar = scope.getVar(name);\n        Node initialValue = aliasVar.getInitialValue();\n\n        // Check if the initial value is also a qualified name.\n        if (initialValue != null && initialValue.isQualifiedName()) {\n          String aliasQualifiedName = initialValue.getQualifiedName();\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, aliasQualifiedName);\n        }\n      } else if (isPrivateName(name)) {\n        // TODO(robbyw): Support using locals for private variables.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..b0d14886 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,38 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar() && parent.getChildCount() == 1) {\n+      // Get the variable's name and qualified name.\n+      String name = n.getString();\n+      String qualifiedName = null;\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        qualifiedName = n.getFirstChild().getQualifiedName();\n+      }\n \n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+      // Check if the variable is an alias (i.e., has a qualified name).\n+      if (qualifiedName != null) {\n+        // Get the alias variable and its initial value.\n+        Var aliasVar = scope.getVar(name);\n+        Node initialValue = aliasVar.getInitialValue();\n+\n+        // Check if the initial value is also a qualified name.\n+        if (initialValue != null && initialValue.isQualifiedName()) {\n+          String aliasQualifiedName = initialValue.getQualifiedName();\n+          aliases.put(name, aliasVar);\n+          transformation.addAlias(name, aliasQualifiedName);\n         }\n+      } else if (isPrivateName(name)) {\n+        // TODO(robbyw): Support using locals for private variables.\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}