{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n        if (mock instanceof Serializable) {\n            Serializable serializableMock = (Serializable) mock;\n            ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n            ObjectOutputStream objectOut = new ObjectOutputStream(byteOut);\n            objectOut.writeObject(serializableMock);\n            objectOut.flush();\n            ObjectInputStream objectIn = new ObjectInputStream(new ByteArrayInputStream(byteOut.toByteArray()));\n            Serializable copy = (Serializable) objectIn.readObject();\n            ((Factory) copy).setCallbacks(new Callback[]{newFilter});\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..332996ad9 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+        if (mock instanceof Serializable) {\n+            Serializable serializableMock = (Serializable) mock;\n+            ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n+            ObjectOutputStream objectOut = new ObjectOutputStream(byteOut);\n+            objectOut.writeObject(serializableMock);\n+            objectOut.flush();\n+            ObjectInputStream objectIn = new ObjectInputStream(new ByteArrayInputStream(byteOut.toByteArray()));\n+            Serializable copy = (Serializable) objectIn.readObject();\n+            ((Factory) copy).setCallbacks(new Callback[]{newFilter});\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}