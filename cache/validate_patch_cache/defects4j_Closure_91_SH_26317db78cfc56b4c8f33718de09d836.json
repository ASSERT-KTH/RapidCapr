{
    "patch": "      if (parent.getType() == Token.CALL && !parent.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n        Node callee = parent.getFirstChild();\n        if (callee.getType() == Token.GETPROP) {\n          callee = callee.getFirstChild();\n        }\n        if (callee.getType() == Token.NAME &&\n            (callee.matchesQualifiedName(\"goog.abstractMethod\") ||\n             callee.matchesQualifiedName(\"goog.functions.constant\"))) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..032a0aa4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.CALL && !parent.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n+        Node callee = parent.getFirstChild();\n+        if (callee.getType() == Token.GETPROP) {\n+          callee = callee.getFirstChild();\n+        }\n+        if (callee.getType() == Token.NAME &&\n+            (callee.matchesQualifiedName(\"goog.abstractMethod\") ||\n+             callee.matchesQualifiedName(\"goog.functions.constant\"))) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}