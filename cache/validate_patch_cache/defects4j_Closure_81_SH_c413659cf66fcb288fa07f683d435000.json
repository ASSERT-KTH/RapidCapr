{
    "patch": "  /** Returns true if the given function node represents an expression lambda. */\n  private boolean isExpressionLambda(FunctionNode functionNode) {\n    // If the function node has a parent, then it cannot represent an expression lambda.\n    if (functionNode.getParent() != null) {\n      return false;\n    }\n    // An expression lambda must have only one parameter and a non-null return statement.\n    List<AstNode> params = functionNode.getParams();\n    return params.size() == 1 && functionNode.getBody().getLastChild() instanceof ReturnStatement;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..bd65fa5d 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,16 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+  /** Returns true if the given function node represents an expression lambda. */\n+  private boolean isExpressionLambda(FunctionNode functionNode) {\n+    // If the function node has a parent, then it cannot represent an expression lambda.\n+    if (functionNode.getParent() != null) {\n+      return false;\n+    }\n+    // An expression lambda must have only one parameter and a non-null return statement.\n+    List<AstNode> params = functionNode.getParams();\n+    return params.size() == 1 && functionNode.getBody().getLastChild() instanceof ReturnStatement;\n+  }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}