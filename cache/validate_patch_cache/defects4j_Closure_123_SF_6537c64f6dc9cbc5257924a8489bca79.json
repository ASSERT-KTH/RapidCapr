{
    "patch": "public static String fixForLoop(String input) {\n    if (input == null || input.isEmpty()) {\n        return input;\n    }\n    \n    Pattern pattern = Pattern.compile(\"for\\\\((.*?);(.*?);(.*?)\\\\)\");\n    Matcher matcher = pattern.matcher(input);\n\n    StringBuffer sb = new StringBuffer();\n    while (matcher.find()) {\n        String cond = matcher.group(2);\n\n        if (!cond.contains(\"in\")) {\n            continue;\n        }\n\n        cond = cond.replaceAll(\"[(\\\\[][\\\\s]*[0-9a-zA-Z]+[\\\\s]*[\\\\])]\", \"\");\n        Matcher inMatcher = Pattern.compile(\"(.*?)[\\\\s]*in[\\\\s]*(.*)\").matcher(cond);\n        if (!inMatcher.matches()) {\n            continue;\n        }\n\n        String indexVar = matcher.group(1);\n        String collection = inMatcher.group(2);\n        String replacement = \"for (\" + indexVar + \"=0; \" + indexVar + \"<\" + collection + \".length; \" + indexVar + \"++)\";\n        matcher.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n    }\n    matcher.appendTail(sb);\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..66e74b5d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,37 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixForLoop(String input) {\n+    if (input == null || input.isEmpty()) {\n+        return input;\n+    }\n+    \n+    Pattern pattern = Pattern.compile(\"for\\\\((.*?);(.*?);(.*?)\\\\)\");\n+    Matcher matcher = pattern.matcher(input);\n+\n+    StringBuffer sb = new StringBuffer();\n+    while (matcher.find()) {\n+        String cond = matcher.group(2);\n+\n+        if (!cond.contains(\"in\")) {\n+            continue;\n+        }\n+\n+        cond = cond.replaceAll(\"[(\\\\[][\\\\s]*[0-9a-zA-Z]+[\\\\s]*[\\\\])]\", \"\");\n+        Matcher inMatcher = Pattern.compile(\"(.*?)[\\\\s]*in[\\\\s]*(.*)\").matcher(cond);\n+        if (!inMatcher.matches()) {\n+            continue;\n+        }\n+\n+        String indexVar = matcher.group(1);\n+        String collection = inMatcher.group(2);\n+        String replacement = \"for (\" + indexVar + \"=0; \" + indexVar + \"<\" + collection + \".length; \" + indexVar + \"++)\";\n+        matcher.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n+    }\n+    matcher.appendTail(sb);\n+\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}