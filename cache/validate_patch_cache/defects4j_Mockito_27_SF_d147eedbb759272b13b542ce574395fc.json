{
    "patch": "public <T> T resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    // reset the mock object\n    org.mockito.Mockito.reset(mock);\n\n    // ensure that the correct version of the Factory class is used\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, null);\n    }\n\n    // create a new MockHandler and set up the MethodInterceptorFilter\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    // set up the mock object with the new filter\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n        return mock;\n    } else {\n        return Mockito.mock(mock.getClass(), newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..48354f3b0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> T resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    // reset the mock object\n+    org.mockito.Mockito.reset(mock);\n+\n+    // ensure that the correct version of the Factory class is used\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, null);\n+    }\n+\n+    // create a new MockHandler and set up the MethodInterceptorFilter\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    // set up the mock object with the new filter\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+        return mock;\n+    } else {\n+        return Mockito.mock(mock.getClass(), newFilter);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}