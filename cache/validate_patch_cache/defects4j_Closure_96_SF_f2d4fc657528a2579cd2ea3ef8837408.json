{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs), \" and no less than \" + minArgs + \" argument(s).\");\n    } else if (maxArgs < numArgs && maxArgs != Integer.MAX_VALUE) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                \" and no more than \" + maxArgs + \" argument(s).\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..0d2e7578 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1404,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (arguments.hasNext() && parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        argument = arguments.next();\n+        ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (minArgs > numArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(minArgs), \" and no less than \" + minArgs + \" argument(s).\");\n+    } else if (maxArgs < numArgs && maxArgs != Integer.MAX_VALUE) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(minArgs),\n+                \" and no more than \" + maxArgs + \" argument(s).\");\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<... than 0 argument(s).[]> but was:<... than 0 argument(s).[.]>",
    "test_result": "FAIL"
}