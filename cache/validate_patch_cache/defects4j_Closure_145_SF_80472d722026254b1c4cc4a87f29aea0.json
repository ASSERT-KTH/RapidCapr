{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node node) {\n    if (node.getType() == Token.LABEL) {\n        // Get the second child of the label, since the first child is always the label name.\n        Node labeledChild = node.getFirstChild().getNext();\n        \n        // If the labeled child is an empty statement, get the next child.\n        if (labeledChild.getType() == Token.EMPTY) {\n            labeledChild = labeledChild.getNext();\n        }\n        \n        // Recursively check if the labeled child is a single function or do node.\n        return isOneExactlyFunctionOrDo(labeledChild);\n    } else if (node.getType() == Token.BLOCK) {\n        // Check if the block has exactly one child and recursively check if it is a function or do node.\n        return node.getChildCount() == 1 && isOneExactlyFunctionOrDo(node.getFirstChild());\n    } else {\n        // Check if the node is a function or do node.\n        return node.getType() == Token.FUNCTION || node.getType() == Token.DO;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..e62981c3 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,26 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node node) {\n+    if (node.getType() == Token.LABEL) {\n+        // Get the second child of the label, since the first child is always the label name.\n+        Node labeledChild = node.getFirstChild().getNext();\n+        \n+        // If the labeled child is an empty statement, get the next child.\n+        if (labeledChild.getType() == Token.EMPTY) {\n+            labeledChild = labeledChild.getNext();\n+        }\n+        \n+        // Recursively check if the labeled child is a single function or do node.\n+        return isOneExactlyFunctionOrDo(labeledChild);\n+    } else if (node.getType() == Token.BLOCK) {\n+        // Check if the block has exactly one child and recursively check if it is a function or do node.\n+        return node.getChildCount() == 1 && isOneExactlyFunctionOrDo(node.getFirstChild());\n+    } else {\n+        // Check if the node is a function or do node.\n+        return node.getType() == Token.FUNCTION || node.getType() == Token.DO;\n+    }\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}