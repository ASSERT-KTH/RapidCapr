{
    "patch": " if (child.isNumber()) {\n   // Don't handle array literals yet.\n   throw new IllegalStateException();\n } else {\n   String name = child.getString();\n   T type = typeSystem.getType(getScope(), n, name);\n\n   Property prop = getProperty(name);\n   if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n     if (propertiesToErrorFor.containsKey(name)) {\n       compiler.report(JSError.make(\n           t.getSourceName(), child, propertiesToErrorFor.get(name),\n           Warnings.INVALIDATION, name,\n           (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n     }\n   }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..832c64c5 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,24 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+ if (child.isNumber()) {\n+   // Don't handle array literals yet.\n+   throw new IllegalStateException();\n+ } else {\n+   String name = child.getString();\n+   T type = typeSystem.getType(getScope(), n, name);\n+\n+   Property prop = getProperty(name);\n+   if (!prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+     if (propertiesToErrorFor.containsKey(name)) {\n+       compiler.report(JSError.make(\n+           t.getSourceName(), child, propertiesToErrorFor.get(name),\n+           Warnings.INVALIDATION, name,\n+           (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+     }\n+   }\n+ }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>",
    "test_result": "FAIL"
}