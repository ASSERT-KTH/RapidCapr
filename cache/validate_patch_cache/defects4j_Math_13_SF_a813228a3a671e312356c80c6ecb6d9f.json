{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    RealMatrix l = dec.getL();\n    RealMatrix lower = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            if (i >= j) {\n                lower.setEntry(i, j, l.getEntry(i, j));\n            } else {\n                lower.setEntry(i, j, 0);\n            }\n        }\n    }\n    RealMatrix lowerT = lower.transpose();\n    return lower.multiply(lowerT);    \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..982a7f6e5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    RealMatrix l = dec.getL();\n+    RealMatrix lower = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            if (i >= j) {\n+                lower.setEntry(i, j, l.getEntry(i, j));\n+            } else {\n+                lower.setEntry(i, j, 0);\n+            }\n+        }\n     }\n+    RealMatrix lowerT = lower.transpose();\n+    return lower.multiply(lowerT);    \n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}