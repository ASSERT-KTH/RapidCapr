{
    "patch": "      // Can't remove parameters object literal setters.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = null;\n      for (Node arg : argList.children()) {\n        // Once we hit an unreferenced argument, `lastArg` is set and we start removing arguments.\n        // If a referenced argument follows an unreferenced argument, we reset `lastArg` to null.\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var) && lastArg == null) {\n          lastArg = arg;\n        } else if (referenced.contains(var)) {\n          lastArg = null;\n        }\n        if (lastArg != null) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4a967f40 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Can't remove parameters object literal setters.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = null;\n+      for (Node arg : argList.children()) {\n+        // Once we hit an unreferenced argument, `lastArg` is set and we start removing arguments.\n+        // If a referenced argument follows an unreferenced argument, we reset `lastArg` to null.\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var) && lastArg == null) {\n+          lastArg = arg;\n+        } else if (referenced.contains(var)) {\n+          lastArg = null;\n+        }\n+        if (lastArg != null) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}