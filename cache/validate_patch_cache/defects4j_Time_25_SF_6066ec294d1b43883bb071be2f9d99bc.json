{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long adjustedInstant = instantLocal - initialOffset;  // adjust instant using the initial offset\n    final int adjustedOffset = getOffset(adjustedInstant);\n    if (initialOffset == adjustedOffset) {\n        // the adjustment didn't change the offset, return the adjusted offset\n        return adjustedOffset;\n    }\n    // we must be near a DST transition\n    final long nextTransitionInstant = nextTransition(adjustedInstant);\n    final int nextTransitionOffset = getOffset(nextTransitionInstant);\n    if (initialOffset > adjustedOffset) {\n        // we have jumped ahead in time over a DST gap and need to move back\n        final long previousTransitionInstant = previousTransition(adjustedInstant);\n        final int previousTransitionOffset = getOffset(previousTransitionInstant);\n        if (previousTransitionOffset < nextTransitionOffset) {\n            // we have moved back before the initial transition\n            return previousTransitionOffset;\n        } else {\n            // the current time is within the DST gap\n            return initialOffset;\n        }\n    } else {\n        // we have moved back in time just before a DST gap\n        if (nextTransitionInstant - adjustedInstant > adjustedOffset - nextTransitionOffset) {\n            // the current time is within the DST gap\n            return nextTransitionOffset;\n        }\n        // the current time is just before the DST gap\n        return adjustedOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5614b569 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long adjustedInstant = instantLocal - initialOffset;  // adjust instant using the initial offset\n+    final int adjustedOffset = getOffset(adjustedInstant);\n+    if (initialOffset == adjustedOffset) {\n+        // the adjustment didn't change the offset, return the adjusted offset\n+        return adjustedOffset;\n+    }\n+    // we must be near a DST transition\n+    final long nextTransitionInstant = nextTransition(adjustedInstant);\n+    final int nextTransitionOffset = getOffset(nextTransitionInstant);\n+    if (initialOffset > adjustedOffset) {\n+        // we have jumped ahead in time over a DST gap and need to move back\n+        final long previousTransitionInstant = previousTransition(adjustedInstant);\n+        final int previousTransitionOffset = getOffset(previousTransitionInstant);\n+        if (previousTransitionOffset < nextTransitionOffset) {\n+            // we have moved back before the initial transition\n+            return previousTransitionOffset;\n+        } else {\n+            // the current time is within the DST gap\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n+    } else {\n+        // we have moved back in time just before a DST gap\n+        if (nextTransitionInstant - adjustedInstant > adjustedOffset - nextTransitionOffset) {\n+            // the current time is within the DST gap\n+            return nextTransitionOffset;\n+        }\n+        // the current time is just before the DST gap\n+        return adjustedOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}