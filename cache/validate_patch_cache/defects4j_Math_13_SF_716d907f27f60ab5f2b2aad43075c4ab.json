{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        final EigenDecomposition dec;\n        final double trace = m.getTrace();\n        if (trace <= 0) {\n            throw new IllegalArgumentException(\"Matrix not positive definite\");\n        }\n        final double lambda = trace / n;\n        if (lambda > 0) {\n            final RealMatrix v = MatrixUtils.createRealIdentityMatrix(n);\n            final CholeskyDecomposition choleskyDec = new CholeskyDecomposition(m.scalarMultiply(lambda));\n            final RealMatrix b = choleskyDec.getL();\n            final RealMatrix bInv = new LUDecomposition(b).getSolver().getInverse();\n            final RealMatrix l = v.subtract(bInv.multiply(m).scalarMultiply(bInv).multiply(b));\n            dec = new EigenDecomposition(l);\n            final RealMatrix d = dec.getD();\n            for (int i = 0; i < n; ++i) {\n                d.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n            }\n            final RealMatrix result = dec.getV().multiply(d).multiply(dec.getV().transpose());\n            return b.multiply(result).multiply(b);\n        } else {\n            throw new IllegalArgumentException(\"Matrix not positive definite\");\n        }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4843605e2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec;\n+        final double trace = m.getTrace();\n+        if (trace <= 0) {\n+            throw new IllegalArgumentException(\"Matrix not positive definite\");\n+        }\n+        final double lambda = trace / n;\n+        if (lambda > 0) {\n+            final RealMatrix v = MatrixUtils.createRealIdentityMatrix(n);\n+            final CholeskyDecomposition choleskyDec = new CholeskyDecomposition(m.scalarMultiply(lambda));\n+            final RealMatrix b = choleskyDec.getL();\n+            final RealMatrix bInv = new LUDecomposition(b).getSolver().getInverse();\n+            final RealMatrix l = v.subtract(bInv.multiply(m).scalarMultiply(bInv).multiply(b));\n+            dec = new EigenDecomposition(l);\n+            final RealMatrix d = dec.getD();\n+            for (int i = 0; i < n; ++i) {\n+                d.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n+            }\n+            final RealMatrix result = dec.getV().multiply(d).multiply(dec.getV().transpose());\n+            return b.multiply(result).multiply(b);\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix not positive definite\");\n+        }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}