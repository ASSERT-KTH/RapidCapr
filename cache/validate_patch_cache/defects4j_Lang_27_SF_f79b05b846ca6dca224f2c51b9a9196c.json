{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    // Trim the input string\n    str = str.trim();\n\n    // Check for hexadecimal format\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n\n    // Check for trailing letters to specify the type of number\n    if (lastChar == 'f' || lastChar == 'F') {\n        return createFloat(str.substring(0, str.length() - 1));\n    }\n    if (lastChar == 'd' || lastChar == 'D') {\n        return createDouble(str.substring(0, str.length() - 1));\n    }\n    if (lastChar == 'l' || lastChar == 'L') {\n        return createLong(str.substring(0, str.length() - 1));\n    }\n\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n    // Check for exponential format\n    if (expPos > -1) {\n        if (decPos == -1) {\n            decPos = expPos - 1;\n        }\n        String mant = str.substring(0, expPos);\n        String exp = str.substring(expPos + 1);\n\n        // Check for valid integer exponent\n        if (exp.matches(\"[-+]?[0-9]+\")) {\n            if (decPos > -1) {\n                mant = str.substring(0, decPos) + str.substring(decPos + 1, expPos);\n            } else {\n                mant = str.substring(0, expPos);\n            }\n\n            // Check for trailing decimal places\n            if (mant.matches(\"[-+]?[0-9]*\\\\.?[0-9]+\")) {\n                try {\n                    if (lastChar == 'f' || lastChar == 'F') {\n                        return createFloat(str);\n                    }\n                    if (lastChar == 'd' || lastChar == 'D') {\n                        return createDouble(str);\n                    }\n                    return createBigDecimal(str);\n                } catch (NumberFormatException e) {\n                    // ignore bad number\n                }\n            }\n        }\n    }\n\n    // Check for decimal format\n    if (decPos > -1) {\n        String intPart = str.substring(0, decPos);\n        String decPart = str.substring(decPos + 1);\n\n        // Check for trailing decimal places\n        if (decPart.matches(\"[0-9]*\")) {\n            if (intPart.isEmpty()) {\n                intPart = \"0\";\n            }\n\n            // Check for valid integer and decimal parts\n            if (intPart.matches(\"[-+]?[0-9]+\") && decPart.matches(\"[0-9]+\")) {\n                try {\n                    if (lastChar == 'f' || lastChar == 'F') {\n                        return createFloat(str);\n                    }\n                    if (lastChar == 'd' || lastChar == 'D') {\n                        return createDouble(str);\n                    }\n                    return createBigDecimal(str);\n                } catch (NumberFormatException e) {\n                    // ignore bad number\n                }\n            }\n        }\n    }\n\n    // Check for integer format\n    if (str.matches(\"[-+]?[0-9]+\")) {\n        try {\n            if (lastChar == 'l' || lastChar == 'L') {\n                return createLong(str);\n            }\n            if (lastChar == 'f' || lastChar == 'F') {\n                return createFloat(str);\n            }\n            if (lastChar == 'd' || lastChar == 'D') {\n                return createDouble(str);\n            }\n            return createInteger(str);\n        } catch (NumberFormatException e) {\n            // ignore bad number\n        }\n    }\n\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..19d281fa 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,155 +449,117 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    // Trim the input string\n+    str = str.trim();\n+\n+    // Check for hexadecimal format\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+\n+    char lastChar = str.charAt(str.length() - 1);\n+\n+    // Check for trailing letters to specify the type of number\n+    if (lastChar == 'f' || lastChar == 'F') {\n+        return createFloat(str.substring(0, str.length() - 1));\n+    }\n+    if (lastChar == 'd' || lastChar == 'D') {\n+        return createDouble(str.substring(0, str.length() - 1));\n+    }\n+    if (lastChar == 'l' || lastChar == 'L') {\n+        return createLong(str.substring(0, str.length() - 1));\n+    }\n+\n+    int decPos = str.indexOf('.');\n+    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+\n+    // Check for exponential format\n+    if (expPos > -1) {\n+        if (decPos == -1) {\n+            decPos = expPos - 1;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n+        String mant = str.substring(0, expPos);\n+        String exp = str.substring(expPos + 1);\n+\n+        // Check for valid integer exponent\n+        if (exp.matches(\"[-+]?[0-9]+\")) {\n+            if (decPos > -1) {\n+                mant = str.substring(0, decPos) + str.substring(decPos + 1, expPos);\n             } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n                 mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n             }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n \n+            // Check for trailing decimal places\n+            if (mant.matches(\"[-+]?[0-9]*\\\\.?[0-9]+\")) {\n+                try {\n+                    if (lastChar == 'f' || lastChar == 'F') {\n+                        return createFloat(str);\n                     }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n+                    if (lastChar == 'd' || lastChar == 'D') {\n+                        return createDouble(str);\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n+                    return createBigDecimal(str);\n+                } catch (NumberFormatException e) {\n+                    // ignore bad number\n+                }\n             }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n+        }\n+    }\n+\n+    // Check for decimal format\n+    if (decPos > -1) {\n+        String intPart = str.substring(0, decPos);\n+        String decPart = str.substring(decPos + 1);\n+\n+        // Check for trailing decimal places\n+        if (decPart.matches(\"[0-9]*\")) {\n+            if (intPart.isEmpty()) {\n+                intPart = \"0\";\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                return createBigInteger(str);\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+            // Check for valid integer and decimal parts\n+            if (intPart.matches(\"[-+]?[0-9]+\") && decPart.matches(\"[0-9]+\")) {\n                 try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                    if (lastChar == 'f' || lastChar == 'F') {\n+                        return createFloat(str);\n                     }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                    if (lastChar == 'd' || lastChar == 'D') {\n+                        return createDouble(str);\n                     }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                    return createBigDecimal(str);\n+                } catch (NumberFormatException e) {\n+                    // ignore bad number\n                 }\n+            }\n+        }\n+    }\n \n-                return createBigDecimal(str);\n-\n+    // Check for integer format\n+    if (str.matches(\"[-+]?[0-9]+\")) {\n+        try {\n+            if (lastChar == 'l' || lastChar == 'L') {\n+                return createLong(str);\n+            }\n+            if (lastChar == 'f' || lastChar == 'F') {\n+                return createFloat(str);\n+            }\n+            if (lastChar == 'd' || lastChar == 'D') {\n+                return createDouble(str);\n             }\n+            return createInteger(str);\n+        } catch (NumberFormatException e) {\n+            // ignore bad number\n         }\n     }\n \n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 1 failed expected:<1234.5> but was:<1234.5>",
    "test_result": "FAIL"
}