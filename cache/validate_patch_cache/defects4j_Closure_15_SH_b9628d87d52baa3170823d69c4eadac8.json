{
    "patch": "if (n.isGetProp()) {\n  Node propNode = n.getLastChild();\n    \n  // Treat accesses to random props as having side-effects.\n  JSType objType = n.getFirstChild().getJSTypeBeforePlumbing();\n  if (objType == null || objType.isUnknownType() || objType.isNoType()) {\n    return true;\n  }\n\n  String propName = propNode.getString();\n  if (objType.isNominalConstructorOrInterface()) {\n    TiProperty def = getPropDef(objType, propName);\n    if (def != null && NodeUtil.mayHaveSideEffects(def.defSiteJSType())) {\n      return true;\n    }\n  } else if (objType.isLiteralObject()) {\n    ObjectType otype = ObjectType.cast(objType);\n    JSDocInfo objInfo = otype.getJSDocInfo();\n    JSType propType = otype.getPropertyType(propName);\n    if (propType != null && objInfo != null && objInfo.hasSideEffects()) {\n      return true;\n    }\n    if (controlledVars != null && controlledVars.containsProp(otype.toString(), propName)) {\n      if (propType != null && NodeUtil.mayHaveSideEffects(propType.getNominalType().getDefsite())) {\n        return true;\n      }\n      if (NodeUtil.isObjectCallMethod(n)) {\n        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n          if (NodeUtil.mayHaveSideEffects(child)) {\n            return true;\n          }\n        }\n      }\n    }\n  } else if (objType.isFunctionPrototypeType()) {\n    FunctionType funcType = objType.toMaybeFunctionType();\n    TiProperty def = funcType == null ? null : funcType.getProperty(propName);\n    if (def != null && NodeUtil.mayHaveSideEffects(def.defSiteJSType())) {\n      return true;\n    }\n    if (controlledVars != null && controlledVars.isFuncOptimized(objType.toString())) {\n      return true;\n    }\n  } else if (controlledVars != null && controlledVars.containsProp(objType.toString(), propName)) {\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..52025be5 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,53 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isGetProp()) {\n+  Node propNode = n.getLastChild();\n+    \n+  // Treat accesses to random props as having side-effects.\n+  JSType objType = n.getFirstChild().getJSTypeBeforePlumbing();\n+  if (objType == null || objType.isUnknownType() || objType.isNoType()) {\n+    return true;\n+  }\n+\n+  String propName = propNode.getString();\n+  if (objType.isNominalConstructorOrInterface()) {\n+    TiProperty def = getPropDef(objType, propName);\n+    if (def != null && NodeUtil.mayHaveSideEffects(def.defSiteJSType())) {\n+      return true;\n+    }\n+  } else if (objType.isLiteralObject()) {\n+    ObjectType otype = ObjectType.cast(objType);\n+    JSDocInfo objInfo = otype.getJSDocInfo();\n+    JSType propType = otype.getPropertyType(propName);\n+    if (propType != null && objInfo != null && objInfo.hasSideEffects()) {\n+      return true;\n+    }\n+    if (controlledVars != null && controlledVars.containsProp(otype.toString(), propName)) {\n+      if (propType != null && NodeUtil.mayHaveSideEffects(propType.getNominalType().getDefsite())) {\n+        return true;\n+      }\n+      if (NodeUtil.isObjectCallMethod(n)) {\n+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+          if (NodeUtil.mayHaveSideEffects(child)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+  } else if (objType.isFunctionPrototypeType()) {\n+    FunctionType funcType = objType.toMaybeFunctionType();\n+    TiProperty def = funcType == null ? null : funcType.getProperty(propName);\n+    if (def != null && NodeUtil.mayHaveSideEffects(def.defSiteJSType())) {\n+      return true;\n+    }\n+    if (controlledVars != null && controlledVars.isFuncOptimized(objType.toString())) {\n+      return true;\n+    }\n+  } else if (controlledVars != null && controlledVars.containsProp(objType.toString(), propName)) {\n+    return true;\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}