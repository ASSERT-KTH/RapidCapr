{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrt = dec.getSquareRoot();\n\n    // check if the eigenvalues are real and non-negative within tolerance\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final double tolerance = 1e-8;\n    for (double e : eigenvalues) {\n        if (e < -tolerance) {\n            throw new IllegalArgumentException(\"Square root matrix has non-real eigenvalues\");\n        } else if (e < 0) {\n            e = 0;\n        }\n    }\n\n    // check if the resulting matrix is symmetric within tolerance\n    final double symTolerance = 1e-6;\n    if (!isSymmetric(sqrt, symTolerance)) {\n        throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n    }\n\n    final int n = m.getRowDimension();\n    final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n    final RealMatrix root = sqrt.multiply(eye.scalarMultiply(1e-5)); // add a small value to avoid zero eigen values\n    \n    final double[] eigenValues = new EigenDecomposition(root).getRealEigenvalues();\n    if (Arrays.stream(eigenValues).anyMatch(x -> x < 0)) { // check that all eigen values are greater than zero\n        throw new IllegalArgumentException(\"Square root matrix has negative eigen values\");\n    }\n\n    return root;\n}\n\n// helper function to check if a matrix is symmetric within tolerance\nprivate boolean isSymmetric(RealMatrix m, double tolerance) {\n    final int n = m.getRowDimension();\n    for (int i = 0; i < n; i++) {\n        for (int j = i+1; j < n; j++) {\n            final double diff = m.getEntry(i, j) - m.getEntry(j, i);\n            if (FastMath.abs(diff) > tolerance) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8eb0daa41 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,50 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrt = dec.getSquareRoot();\n+\n+    // check if the eigenvalues are real and non-negative within tolerance\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final double tolerance = 1e-8;\n+    for (double e : eigenvalues) {\n+        if (e < -tolerance) {\n+            throw new IllegalArgumentException(\"Square root matrix has non-real eigenvalues\");\n+        } else if (e < 0) {\n+            e = 0;\n+        }\n+    }\n+\n+    // check if the resulting matrix is symmetric within tolerance\n+    final double symTolerance = 1e-6;\n+    if (!isSymmetric(sqrt, symTolerance)) {\n+        throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n+    }\n+\n+    final int n = m.getRowDimension();\n+    final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n+    final RealMatrix root = sqrt.multiply(eye.scalarMultiply(1e-5)); // add a small value to avoid zero eigen values\n+    \n+    final double[] eigenValues = new EigenDecomposition(root).getRealEigenvalues();\n+    if (Arrays.stream(eigenValues).anyMatch(x -> x < 0)) { // check that all eigen values are greater than zero\n+        throw new IllegalArgumentException(\"Square root matrix has negative eigen values\");\n+    }\n+\n+    return root;\n+}\n+\n+// helper function to check if a matrix is symmetric within tolerance\n+private boolean isSymmetric(RealMatrix m, double tolerance) {\n+    final int n = m.getRowDimension();\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i+1; j < n; j++) {\n+            final double diff = m.getEntry(i, j) - m.getEntry(j, i);\n+            if (FastMath.abs(diff) > tolerance) {\n+                return false;\n+            }\n+        }\n     }\n+    return true;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}