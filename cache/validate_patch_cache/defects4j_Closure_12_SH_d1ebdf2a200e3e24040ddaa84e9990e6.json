{
    "patch": "private boolean processIncomingCondition(Node cfgNode, List<Node> visited) {\n    if (!visited.contains(cfgNode)) {\n        visited.add(cfgNode);\n        if (NodeUtil.isCatchBlock(cfgNode)) {\n            return true;\n        }\n        switch (cfgNode.getType()) {\n            case Token.IF:\n            case Token.HOOK:\n                Node left = cfgNode.getFirstChild();\n                Node right = left.getNext();\n                if (processIncomingCondition(left, visited)\n                        || processIncomingCondition(right, visited)) {\n                    return true;\n                }\n                break;\n            case Token.AND:\n            case Token.OR:\n                left = cfgNode.getFirstChild();\n                right = left.getNext();\n                if (processIncomingCondition(left, visited)\n                        && processIncomingCondition(right, visited)) {\n                    return true;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    return false;\n}\n\nprivate boolean hasExceptionHandler(Node cfgNode) {\n    List<Node> visited = new ArrayList<>();\n    return processIncomingCondition(cfgNode, visited);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..1506954e 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,42 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean processIncomingCondition(Node cfgNode, List<Node> visited) {\n+    if (!visited.contains(cfgNode)) {\n+        visited.add(cfgNode);\n+        if (NodeUtil.isCatchBlock(cfgNode)) {\n+            return true;\n+        }\n+        switch (cfgNode.getType()) {\n+            case Token.IF:\n+            case Token.HOOK:\n+                Node left = cfgNode.getFirstChild();\n+                Node right = left.getNext();\n+                if (processIncomingCondition(left, visited)\n+                        || processIncomingCondition(right, visited)) {\n+                    return true;\n+                }\n+                break;\n+            case Token.AND:\n+            case Token.OR:\n+                left = cfgNode.getFirstChild();\n+                right = left.getNext();\n+                if (processIncomingCondition(left, visited)\n+                        && processIncomingCondition(right, visited)) {\n+                    return true;\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+    return false;\n+}\n+\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<Node> visited = new ArrayList<>();\n+    return processIncomingCondition(cfgNode, visited);\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}