{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta >= 0) {\n    final long nextTransition = nextTransition(instantAdjusted);\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n            return getOffset(nextTransition) + delta;\n        }\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n} else {\n    long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n    final long lastAdj = previousTransition(instantAdjusted);\n    final int offsetLast = getOffset(lastTransition);\n    if (offsetLast < offsetAdjusted) {\n        lastTransition = previousTransition(lastAdj);\n    }\n    final int offsetBeforeLast = getOffset(lastTransition);\n    final int offsetBeforeLastAdj = getOffset(lastAdj);\n    if (offsetBeforeLastAdj > offsetAdjusted) {\n        if (offsetAdjusted >= offsetLocal) {\n            return offsetAdjusted;\n        } else if (offsetLocal >= offsetBeforeLast) {\n            return offsetLocal;\n        } else {\n            return offsetBeforeLast;\n        }\n    }\n    if (offsetBeforeLast >= offsetAdjusted) {\n        return offsetLocal;\n    }\n    final int minDelta = Math.min(delta, 0);\n    if (offsetBeforeLast < offsetLocal + minDelta) {\n        // Choose last transition, and set DST to the before-last offset\n        return offsetBeforeLast;\n    }\n    final int maxDelta = Math.max(delta, 0);\n    if (offsetAdjusted < offsetLocal + maxDelta) {\n        // Choose next transition, and set DST to the new offset\n        return offsetAdjusted;\n    }\n    // Choose last transition, and set DST to the new offset\n    return offsetLocal + maxDelta;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6ccaae5d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,52 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta >= 0) {\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n+            return getOffset(nextTransition) + delta;\n+        }\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+} else {\n+    long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n+    final long lastAdj = previousTransition(instantAdjusted);\n+    final int offsetLast = getOffset(lastTransition);\n+    if (offsetLast < offsetAdjusted) {\n+        lastTransition = previousTransition(lastAdj);\n+    }\n+    final int offsetBeforeLast = getOffset(lastTransition);\n+    final int offsetBeforeLastAdj = getOffset(lastAdj);\n+    if (offsetBeforeLastAdj > offsetAdjusted) {\n+        if (offsetAdjusted >= offsetLocal) {\n+            return offsetAdjusted;\n+        } else if (offsetLocal >= offsetBeforeLast) {\n+            return offsetLocal;\n+        } else {\n+            return offsetBeforeLast;\n+        }\n+    }\n+    if (offsetBeforeLast >= offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+    final int minDelta = Math.min(delta, 0);\n+    if (offsetBeforeLast < offsetLocal + minDelta) {\n+        // Choose last transition, and set DST to the before-last offset\n+        return offsetBeforeLast;\n+    }\n+    final int maxDelta = Math.max(delta, 0);\n+    if (offsetAdjusted < offsetLocal + maxDelta) {\n+        // Choose next transition, and set DST to the new offset\n+        return offsetAdjusted;\n+    }\n+    // Choose last transition, and set DST to the new offset\n+    return offsetLocal + maxDelta;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}