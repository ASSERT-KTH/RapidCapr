{
    "patch": "        super();\n        iPeriod = new int[8];\n        iPeriodType = new DurationFieldType[8];\n\n        setPeriod(DurationFieldType.millis(), duration);\n\n        int weeks = 0;\n        long millis = duration;\n\n        if (millis >= DateTimeConstants.MILLIS_PER_WEEK) {\n            weeks = (int) (millis / DateTimeConstants.MILLIS_PER_WEEK);\n            millis = millis - (weeks * DateTimeConstants.MILLIS_PER_WEEK);\n        }\n\n        if (weeks != 0) {\n            setPeriod(DurationFieldType.weeks(), weeks);\n        }\n\n        setPeriod(DurationFieldType.millis(), millis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..f05d3794 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,25 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        super();\n+        iPeriod = new int[8];\n+        iPeriodType = new DurationFieldType[8];\n+\n+        setPeriod(DurationFieldType.millis(), duration);\n+\n+        int weeks = 0;\n+        long millis = duration;\n+\n+        if (millis >= DateTimeConstants.MILLIS_PER_WEEK) {\n+            weeks = (int) (millis / DateTimeConstants.MILLIS_PER_WEEK);\n+            millis = millis - (weeks * DateTimeConstants.MILLIS_PER_WEEK);\n+        }\n+\n+        if (weeks != 0) {\n+            setPeriod(DurationFieldType.weeks(), weeks);\n+        }\n+\n+        setPeriod(DurationFieldType.millis(), millis);\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}