{
    "patch": "    Node function = n.getLastChild();\n    if (!function.isFunction()) {\n      Node child = function.getFirstChild();\n      if(!NodeUtil.isGet(child) && !NodeUtil.isCast(child)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..f74fa341 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,13 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    Node function = n.getLastChild();\n+    if (!function.isFunction()) {\n+      Node child = function.getFirstChild();\n+      if(!NodeUtil.isGet(child) && !NodeUtil.isCast(child)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+    }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}