{
    "patch": "public static String getProp(String propName) {\n    String[] warnings = new String[0];\n    String propValue = \"\";\n    try {\n        propValue = System.getProperty(propName);\n    } catch (Exception e) {\n        warnings = new String[1];\n        warnings[0] = \"unable to get property \" + propName + \" - \" + e.getMessage();\n    }\n    assertTrue(\"expected a warning\", warnings.length > 0);\n    return propValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..25cd8b45 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String propName) {\n+    String[] warnings = new String[0];\n+    String propValue = \"\";\n+    try {\n+        propValue = System.getProperty(propName);\n+    } catch (Exception e) {\n+        warnings = new String[1];\n+        warnings[0] = \"unable to get property \" + propName + \" - \" + e.getMessage();\n+    }\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+    return propValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}