{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n<<<<<<< HEAD\n        changed.add(child.getString());\n=======\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          Node parent = node.getParent();\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.NAME:\n                String parentName = parent.getString();\n                if (!parentName.isEmpty() && !parentName.startsWith(\"goog.\")) {\n                  findCalledFunctions(\n                      getCfg().getEntry().getBlock(), changed, parentName + \".\" + functionName);\n                }\n                break;\n              case Token.DOT:\n                Node grandparent = parent.getParent();\n                if (grandparent != null && grandparent.getType() == Token.NAME) {\n                  String grandparentName = grandparent.getString();\n                  if (!grandparentName.isEmpty() && !grandparentName.startsWith(\"goog.\")) {\n                    findCalledFunctions(\n                        getCfg().getEntry().getBlock(), changed, grandparentName + \".\" + functionName);\n                  }\n                }\n                break;\n              default:\n                findCalledFunctions(getCfg().getEntry().getBlock(), changed, functionName);\n                break;\n            }\n          }\n        }\n>>>>>>> ceb0b393d8b007c62f8e157328c5d6609dea3f26\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..bae48df1 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,46 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n+<<<<<<< HEAD\n         changed.add(child.getString());\n+=======\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          Node parent = node.getParent();\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.NAME:\n+                String parentName = parent.getString();\n+                if (!parentName.isEmpty() && !parentName.startsWith(\"goog.\")) {\n+                  findCalledFunctions(\n+                      getCfg().getEntry().getBlock(), changed, parentName + \".\" + functionName);\n+                }\n+                break;\n+              case Token.DOT:\n+                Node grandparent = parent.getParent();\n+                if (grandparent != null && grandparent.getType() == Token.NAME) {\n+                  String grandparentName = grandparent.getString();\n+                  if (!grandparentName.isEmpty() && !grandparentName.startsWith(\"goog.\")) {\n+                    findCalledFunctions(\n+                        getCfg().getEntry().getBlock(), changed, grandparentName + \".\" + functionName);\n+                  }\n+                }\n+                break;\n+              default:\n+                findCalledFunctions(getCfg().getEntry().getBlock(), changed, functionName);\n+                break;\n+            }\n+          }\n+        }\n+>>>>>>> ceb0b393d8b007c62f8e157328c5d6609dea3f26\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}