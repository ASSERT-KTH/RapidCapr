{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild() && n.getFirstChild().getType() == Token.EXPR_RESULT) {\n      Node exprNode = n.getFirstChild();\n      Node expr = exprNode.getFirstChild();\n      if (expr.getNext() == null && NodeUtil.isExpressionNode(expr)) {\n        Node parent = exprNode.getParent();\n        if (parent.getType() == Token.IF && parent.getChildCount() == 2\n            && parent.getFirstChild().getType() == Token.NOT) {\n          return false;\n        }\n        return !isInHookOrFunction(parent) || isAllSiblingsFoldable(parent, exprNode);\n      }\n    } else if (n.getChildCount() == 2 && n.getFirstChild().getType() == Token.IF\n        && n.getChildAtIndex(1).getType() == Token.BLOCK) {\n      return false;\n    } else {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!isFoldableExpressBlock(child)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean isInHookOrFunction(Node n) {\n  Node parent = n.getParent();\n  return parent != null && (parent.getType() == Token.HOOK || NodeUtil.isAnyFunction(parent));\n}\n\nprivate boolean isAllSiblingsFoldable(Node parent, Node exprNode) {\n  for (Node child = parent.getFirstChild(); child != null; child = child.getNext()) {\n    if (child != exprNode && !isFoldableExpressBlock(child)) {\n      return false;\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..d9aafbb9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild() && n.getFirstChild().getType() == Token.EXPR_RESULT) {\n+      Node exprNode = n.getFirstChild();\n+      Node expr = exprNode.getFirstChild();\n+      if (expr.getNext() == null && NodeUtil.isExpressionNode(expr)) {\n+        Node parent = exprNode.getParent();\n+        if (parent.getType() == Token.IF && parent.getChildCount() == 2\n+            && parent.getFirstChild().getType() == Token.NOT) {\n+          return false;\n+        }\n+        return !isInHookOrFunction(parent) || isAllSiblingsFoldable(parent, exprNode);\n+      }\n+    } else if (n.getChildCount() == 2 && n.getFirstChild().getType() == Token.IF\n+        && n.getChildAtIndex(1).getType() == Token.BLOCK) {\n+      return false;\n+    } else {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!isFoldableExpressBlock(child)) {\n+          return false;\n+        }\n       }\n+      return true;\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isInHookOrFunction(Node n) {\n+  Node parent = n.getParent();\n+  return parent != null && (parent.getType() == Token.HOOK || NodeUtil.isAnyFunction(parent));\n+}\n+\n+private boolean isAllSiblingsFoldable(Node parent, Node exprNode) {\n+  for (Node child = parent.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child != exprNode && !isFoldableExpressBlock(child)) {\n+      return false;\n+    }\n   }\n+  return true;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}