{
    "patch": "public static double regularizedGamma(double a, double x)\n    throws MathException {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        throw new MathException(LocalizedFormats.INPUT_VALUE_NAN_NEGATIVE, a, x);\n    }\n\n    if (x == 0) {\n        return 0;\n    }\n\n    if (x >= a + 1) {\n        // use regularizedGammaQ because it should converge faster in this case.\n        return 1 - regularizedGammaQ(a, x);\n    }\n\n    final double epsilon = 10e-15;\n    double currentTerm = a;\n    double sum = currentTerm;\n    for (int i = 1;\n         i < org.apache.commons.math3.analysis.function.Gamma.LANCZOS.length;\n         i++) {\n        // Multiply 2i - 1 and add a\n        final double dbld = i * 2 - 1 + a;\n        currentTerm *= x / dbld;\n        sum += currentTerm;\n        if (Math.abs(currentTerm / sum) < epsilon) {\n            return sum * FastMath.exp(-x + a * FastMath.log(x) -\n                    org.apache.commons.math3.analysis.function.Gamma.logGamma(a));\n        }\n    }\n\n    throw new MathException(LocalizedFormats.NON_CONVERGENT_BLAS);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b10686f98 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x)\n+    throws MathException {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        throw new MathException(LocalizedFormats.INPUT_VALUE_NAN_NEGATIVE, a, x);\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    }\n+\n+    if (x >= a + 1) {\n+        // use regularizedGammaQ because it should converge faster in this case.\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+\n+    final double epsilon = 10e-15;\n+    double currentTerm = a;\n+    double sum = currentTerm;\n+    for (int i = 1;\n+         i < org.apache.commons.math3.analysis.function.Gamma.LANCZOS.length;\n+         i++) {\n+        // Multiply 2i - 1 and add a\n+        final double dbld = i * 2 - 1 + a;\n+        currentTerm *= x / dbld;\n+        sum += currentTerm;\n+        if (Math.abs(currentTerm / sum) < epsilon) {\n+            return sum * FastMath.exp(-x + a * FastMath.log(x) -\n+                    org.apache.commons.math3.analysis.function.Gamma.logGamma(a));\n+        }\n+    }\n+\n+    throw new MathException(LocalizedFormats.NON_CONVERGENT_BLAS);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}