{
    "patch": "if (functionType.isConstructor() &&\n      !functionType.isNativeObjectType() && !isExtern &&\n      (functionType.getReturnType().isUnknownType() ||\n       functionType.getReturnType().isVoidType())) {\n    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n}\nif (functionType.getTypeOfThis() != null) {\n    Node parent = n.getParent();\n    if (!parent.isGetProp() && !parent.isGetElem()) {\n        report(t, n, FUNCTION_WITHOUT_THIS_PROPERTY,\n            functionType.getTypeOfThis().toString(),\n            childType.toString());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c405e788 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor() &&\n+      !functionType.isNativeObjectType() && !isExtern &&\n+      (functionType.getReturnType().isUnknownType() ||\n+       functionType.getReturnType().isVoidType())) {\n+    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+}\n+if (functionType.getTypeOfThis() != null) {\n+    Node parent = n.getParent();\n+    if (!parent.isGetProp() && !parent.isGetElem()) {\n+        report(t, n, FUNCTION_WITHOUT_THIS_PROPERTY,\n+            functionType.getTypeOfThis().toString(),\n+            childType.toString());\n+    }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}