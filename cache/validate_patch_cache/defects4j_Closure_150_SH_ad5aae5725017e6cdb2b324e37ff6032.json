{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.NAME:\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.FUNCTION:\n        if (parent != null) {\n          int type = parent.getType();\n          if (type == Token.NAME) {\n            return;\n          }\n          if (type == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent.getParent());\n          } else if (type == Token.CATCH) {\n            defineDeclaredFunction(n, parent.getLastChild());\n          } else if (type == Token.SCRIPT) {\n            defineDeclaredFunction(n, parent);\n          }\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        if (parent.getType() == Token.ASSIGN) {\n          handleFunctionInputs(parent.getParent());\n        } else if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK) {\n          handleFunctionInputs(parent.getParent());\n        } else if (parent.getType() == Token.FUNCTION) {\n          handleFunctionInputs(parent);\n        } else if (parent.getType() == Token.SCRIPT) {\n          handleFunctionInputs(parent);\n        }\n        break;\n      default:\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..55803f5a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,47 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionExpression(n)) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      case Token.FUNCTION:\n+        if (parent != null) {\n+          int type = parent.getType();\n+          if (type == Token.NAME) {\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+          if (type == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent.getParent());\n+          } else if (type == Token.CATCH) {\n+            defineDeclaredFunction(n, parent.getLastChild());\n+          } else if (type == Token.SCRIPT) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        if (parent.getType() == Token.ASSIGN) {\n+          handleFunctionInputs(parent.getParent());\n+        } else if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK) {\n+          handleFunctionInputs(parent.getParent());\n+        } else if (parent.getType() == Token.FUNCTION) {\n+          handleFunctionInputs(parent);\n+        } else if (parent.getType() == Token.SCRIPT) {\n+          handleFunctionInputs(parent);\n+        }\n+        break;\n+      default:\n+        break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}