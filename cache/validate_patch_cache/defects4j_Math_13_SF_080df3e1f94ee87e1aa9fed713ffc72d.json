{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n\n        if (dec.getEigenvector(0).getEntry(0) < 0) {\n            // the matrix is not positive semi-definite\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n        }\n\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = dec.getD();\n        final int n = m.getRowDimension();\n\n        for (int i = 0; i < n; i++) {\n            final double x = d.getEntry(i, i);\n            if (x < 0) {\n                // negative eigenvalue\n                throw new IllegalArgumentException(\"Matrix contains negative eigenvalues\");\n            }\n            d.setEntry(i, i, Math.sqrt(x));\n        }\n\n        // get the square root of m using v * d * v^-1\n        final RealMatrix vT = v.transpose();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                double value = 0;\n                for (int k = 0; k < n; k++) {\n                    value += v.getEntry(i, k) * d.getEntry(k, j);\n                }\n                vT.setEntry(i, j, value);\n            }\n        }\n\n        return v.multiply(vT);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c5eedba88 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+        if (dec.getEigenvector(0).getEntry(0) < 0) {\n+            // the matrix is not positive semi-definite\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+        }\n+\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = dec.getD();\n+        final int n = m.getRowDimension();\n+\n+        for (int i = 0; i < n; i++) {\n+            final double x = d.getEntry(i, i);\n+            if (x < 0) {\n+                // negative eigenvalue\n+                throw new IllegalArgumentException(\"Matrix contains negative eigenvalues\");\n+            }\n+            d.setEntry(i, i, Math.sqrt(x));\n+        }\n+\n+        // get the square root of m using v * d * v^-1\n+        final RealMatrix vT = v.transpose();\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                double value = 0;\n+                for (int k = 0; k < n; k++) {\n+                    value += v.getEntry(i, k) * d.getEntry(k, j);\n+                }\n+                vT.setEntry(i, j, value);\n+            }\n+        }\n+\n+        return v.multiply(vT);\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}