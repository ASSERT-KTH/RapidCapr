{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n        if (actualTypeArguments != null) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                if (actualTypeArgument != null) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            }\n        }\n    } else if (typeVariable instanceof TypeVariable) {\n        // If the type variable is not a ParameterizedType, we can try to\n        // extract its actual type argument using its lower and upper bounds.\n        Type[] upperBounds = ((TypeVariable<?>) typeVariable).getBounds();\n        if (upperBounds != null && upperBounds.length > 0) {\n            // We can use the first bound as the actual type argument\n            registerTypeVariablesOn(upperBounds[0]);\n        } else {\n            // If no upper bounds are specified, we can use Object as the actual type argument\n            registerTypeVariablesOn(Object.class);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..9f7665a1d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n+        if (actualTypeArguments != null) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                if (actualTypeArgument != null) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            }\n+        }\n+    } else if (typeVariable instanceof TypeVariable) {\n+        // If the type variable is not a ParameterizedType, we can try to\n+        // extract its actual type argument using its lower and upper bounds.\n+        Type[] upperBounds = ((TypeVariable<?>) typeVariable).getBounds();\n+        if (upperBounds != null && upperBounds.length > 0) {\n+            // We can use the first bound as the actual type argument\n+            registerTypeVariablesOn(upperBounds[0]);\n+        } else {\n+            // If no upper bounds are specified, we can use Object as the actual type argument\n+            registerTypeVariablesOn(Object.class);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}