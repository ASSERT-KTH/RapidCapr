{
    "patch": "      return;\n    }\n    \n    ObjectType thisType = getCommonTypes().fromFunctionType(getJSType());\n    ObjectType constraintProps = constraintObj.getImplicitPrototype();\n\n    // Check if the constraintObj is a supertype of thisType.\n    if (constraintProps.isSubtypeWithoutStructuralTyping(thisType)) {\n      return;\n    }\n    \n    // Handle the case where this type is a record type.\n    if (thisType.isRecordType()) {\n      for (String prop : thisType.getOwnPropertyNames()) {\n        JSType propType = thisType.getPropertyType(prop);\n        JSType constrainedPropType = constraintProps.getPropertyType(prop);\n        if (constrainedPropType != null\n            && !constrainedPropType.isSubtype(propType)) {\n          warnings.add(JSError.make(\n              propType + \" of \" + prop + \" not declared in \" + thisType));",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..b151d94a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,26 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      return;\n+    }\n+    \n+    ObjectType thisType = getCommonTypes().fromFunctionType(getJSType());\n+    ObjectType constraintProps = constraintObj.getImplicitPrototype();\n+\n+    // Check if the constraintObj is a supertype of thisType.\n+    if (constraintProps.isSubtypeWithoutStructuralTyping(thisType)) {\n+      return;\n+    }\n+    \n+    // Handle the case where this type is a record type.\n+    if (thisType.isRecordType()) {\n+      for (String prop : thisType.getOwnPropertyNames()) {\n+        JSType propType = thisType.getPropertyType(prop);\n+        JSType constrainedPropType = constraintProps.getPropertyType(prop);\n+        if (constrainedPropType != null\n+            && !constrainedPropType.isSubtype(propType)) {\n+          warnings.add(JSError.make(\n+              propType + \" of \" + prop + \" not declared in \" + thisType));\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}