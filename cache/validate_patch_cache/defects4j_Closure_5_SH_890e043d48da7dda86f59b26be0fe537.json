{
    "patch": "          if (parent.getLastChild().getString().equals(\"toString\") &&\n              NodeUtil.isObjectCall(ref.getParent())) {\n            // Don't inline toString, as an inlined method might reference this\n            // too. This will be a bit less efficient, but much simpler.\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..fdd7d83f 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,12 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (parent.getLastChild().getString().equals(\"toString\") &&\n+              NodeUtil.isObjectCall(ref.getParent())) {\n+            // Don't inline toString, as an inlined method might reference this\n+            // too. This will be a bit less efficient, but much simpler.\n+            return false;\n+          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}