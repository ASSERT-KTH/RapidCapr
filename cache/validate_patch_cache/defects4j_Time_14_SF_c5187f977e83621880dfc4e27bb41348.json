{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (fieldIndex == 1) { \n            int month = values[1] + valueToAdd;\n            int year = values[0];\n            if (month > 0) {\n                year += month / 12;\n                month = month % 12;\n            } else { // month <= 0\n                year += (month - 11) / 12;\n                month = (month - 11) % 12 + 11;\n            }\n            // get the last day of the month to make sure that the day is valid\n            int day = values[2];\n            int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n            if (day > lastDayOfMonth) {\n                day = lastDayOfMonth;\n            }\n            return new int[] {year, month, day};\n        } else if (DateTimeUtils.isContiguous(partial)) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..61a7fc40 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,25 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // month is largest field and being added to, such as month-day\n+        if (fieldIndex == 1) { \n+            int month = values[1] + valueToAdd;\n+            int year = values[0];\n+            if (month > 0) {\n+                year += month / 12;\n+                month = month % 12;\n+            } else { // month <= 0\n+                year += (month - 11) / 12;\n+                month = (month - 11) % 12 + 11;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            // get the last day of the month to make sure that the day is valid\n+            int day = values[2];\n+            int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n+            if (day > lastDayOfMonth) {\n+                day = lastDayOfMonth;\n+            }\n+            return new int[] {year, month, day};\n+        } else if (DateTimeUtils.isContiguous(partial)) {\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}