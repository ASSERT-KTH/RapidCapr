{
    "patch": "                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = updateSimplex(expanded, reflectedSimplex, comparator);\n                }\n\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n                if (comparator.compare(contracted, best) >= 0) {\n                    simplex = contractShrink(original, best, sigma, comparator);\n                } else {\n                    simplex = contractShrink(original, best, rho, comparator);\n                }\n            }\n\n            // check convergence\n            if (converged(simplex, comparator)) {\n                return;\n            }\n        }\n    }\n    \n    private RealPointValuePair[] contractShrink(final RealPointValuePair[] original, \n                                                 final RealPointValuePair best,\n                                                 final double contractionFactor,\n                                                 final Comparator<RealPointValuePair> comparator) {\n        final int dimension = original[0].getPointRef().length;\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        contractedSimplex[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final double[] contractedPoint = new double[dimension];\n            final double[] originalI = original[i].getPointRef();\n            for (int j = 0; j < dimension; j++) {\n                contractedPoint[j] = best.getPoint()[j] + contractionFactor * (originalI[j] - best.getPoint()[j]);\n            }\n            contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n        }\n        Arrays.sort(contractedSimplex, comparator);\n        return contractedSimplex;\n    }\n\n    private RealPointValuePair[] updateSimplex(final RealPointValuePair expanded,\n                                                final RealPointValuePair[] reflectedSimplex,\n                                                final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] updatedSimplex = new RealPointValuePair[reflectedSimplex.length];\n        final int dimension = expanded.getPointRef().length;\n        updatedSimplex[0] = expanded;\n\n        for (int i = 1; i < updatedSimplex.length; i++) {\n            final double[] updatedPoint = new double[dimension];\n            final double[] reflectedPoint = reflectedSimplex[i].getPointRef();\n            final double[] bestPoint = reflectedSimplex[0].getPointRef();\n\n            for (int j = 0; j < dimension; j++) {\n                updatedPoint[j] = (1.0 + psi) * bestPoint[j] - psi * reflectedPoint[j];\n            }\n\n            updatedSimplex[i] = new RealPointValuePair(updatedPoint, Double.NaN);\n        }\n\n        Arrays.sort(updatedSimplex, comparator);\n\n        return updatedSimplex;\n    }\n\n    private boolean converged(final RealPointValuePair[] simplex, final Comparator<RealPointValuePair> comparator) {\n        final int n = simplex.length - 1;\n        final double[] xSmallest = simplex[0].getPointRef();\n        final double[] xLargest = simplex[n].getPointRef();\n        final double[] centroid = new double[xSmallest.length];\n        \n        for (int i = 0; i < n; i++) {\n            final double[] x = simplex[i].getPointRef();\n            for (int j = 0; j < x.length; j++) {\n                centroid[j] += x[j];\n            }\n        }\n        \n        for (int j = 0; j < centroid.length; j++) {\n            centroid[j] /= n;\n        }\n        \n        final double[] reflected = new double[centroid.length];\n        final double[] diff = new double[centroid.length];\n        for (int j = 0; j < centroid.length; j++) {\n            reflected[j] = (1 + rho) * centroid[j] - rho * xLargest[j];\n            diff[j] = Math.abs(reflected[j] - xSmallest[j]);\n        }\n        \n        Arrays.sort(diff);\n        \n        return comparator.compare(new RealPointValuePair(xSmallest, Double.NaN),\n                new RealPointValuePair(reflected, Double.NaN)) >= 0 &&\n                diff[diff.length - 1] <= relativeThreshold * (Math.abs(xLargest[0]) + Math.abs(xSmallest[0])) / 2;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..faf926a23 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,103 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = updateSimplex(expanded, reflectedSimplex, comparator);\n                 }\n \n-                return;\n+            } else {\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n \n+                if (comparator.compare(contracted, best) >= 0) {\n+                    simplex = contractShrink(original, best, sigma, comparator);\n+                } else {\n+                    simplex = contractShrink(original, best, rho, comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (converged(simplex, comparator)) {\n                 return;\n             }\n+        }\n+    }\n+    \n+    private RealPointValuePair[] contractShrink(final RealPointValuePair[] original, \n+                                                 final RealPointValuePair best,\n+                                                 final double contractionFactor,\n+                                                 final Comparator<RealPointValuePair> comparator) {\n+        final int dimension = original[0].getPointRef().length;\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        contractedSimplex[0] = best;\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] contractedPoint = new double[dimension];\n+            final double[] originalI = original[i].getPointRef();\n+            for (int j = 0; j < dimension; j++) {\n+                contractedPoint[j] = best.getPoint()[j] + contractionFactor * (originalI[j] - best.getPoint()[j]);\n+            }\n+            contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+        }\n+        Arrays.sort(contractedSimplex, comparator);\n+        return contractedSimplex;\n+    }\n+\n+    private RealPointValuePair[] updateSimplex(final RealPointValuePair expanded,\n+                                                final RealPointValuePair[] reflectedSimplex,\n+                                                final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] updatedSimplex = new RealPointValuePair[reflectedSimplex.length];\n+        final int dimension = expanded.getPointRef().length;\n+        updatedSimplex[0] = expanded;\n+\n+        for (int i = 1; i < updatedSimplex.length; i++) {\n+            final double[] updatedPoint = new double[dimension];\n+            final double[] reflectedPoint = reflectedSimplex[i].getPointRef();\n+            final double[] bestPoint = reflectedSimplex[0].getPointRef();\n \n+            for (int j = 0; j < dimension; j++) {\n+                updatedPoint[j] = (1.0 + psi) * bestPoint[j] - psi * reflectedPoint[j];\n+            }\n+\n+            updatedSimplex[i] = new RealPointValuePair(updatedPoint, Double.NaN);\n         }\n \n+        Arrays.sort(updatedSimplex, comparator);\n+\n+        return updatedSimplex;\n     }\n \n+    private boolean converged(final RealPointValuePair[] simplex, final Comparator<RealPointValuePair> comparator) {\n+        final int n = simplex.length - 1;\n+        final double[] xSmallest = simplex[0].getPointRef();\n+        final double[] xLargest = simplex[n].getPointRef();\n+        final double[] centroid = new double[xSmallest.length];\n+        \n+        for (int i = 0; i < n; i++) {\n+            final double[] x = simplex[i].getPointRef();\n+            for (int j = 0; j < x.length; j++) {\n+                centroid[j] += x[j];\n+            }\n+        }\n+        \n+        for (int j = 0; j < centroid.length; j++) {\n+            centroid[j] /= n;\n+        }\n+        \n+        final double[] reflected = new double[centroid.length];\n+        final double[] diff = new double[centroid.length];\n+        for (int j = 0; j < centroid.length; j++) {\n+            reflected[j] = (1 + rho) * centroid[j] - rho * xLargest[j];\n+            diff[j] = Math.abs(reflected[j] - xSmallest[j]);\n+        }\n+        \n+        Arrays.sort(diff);\n+        \n+        return comparator.compare(new RealPointValuePair(xSmallest, Double.NaN),\n+                new RealPointValuePair(reflected, Double.NaN)) >= 0 &&\n+                diff[diff.length - 1] <= relativeThreshold * (Math.abs(xLargest[0]) + Math.abs(xSmallest[0])) / 2;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}