{
    "patch": "        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..1e1b4a23 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -761,11 +761,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n             return computeFollowNode(fromNode, parent, cfa);\n           }\n         // If we are coming out of the FINALLY block...\n+        } else if (parent.getLastChild() == node){\n+          if (cfa != null) {\n+            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n+          } else {\n+            return computeFollowNode(fromNode, parent, cfa);\n+          }\n+        }\n+            }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n         }",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}