{
    "patch": "// We only want to match constraints on anonymous types.\nif (!(constraintObj instanceof NamedType)) {\n  if (constraintObj instanceof ObjectType && ((ObjectType)constraintObj).isRecordType()) {\n    ObjectType objType = (ObjectType) constraintObj;\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    for (String prop : objType.getOwnPropertyNames()) {\n      JSType propType = objType.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..eb7572f4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,9 +552,10 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n+// We only want to match constraints on anonymous types.\n+if (!(constraintObj instanceof NamedType)) {\n+  if (constraintObj instanceof ObjectType && ((ObjectType)constraintObj).isRecordType()) {\n+    ObjectType objType = (ObjectType) constraintObj;\n     // Handle the case where the constraint object is a record type.\n     //\n     // param constraintObj {{prop: (number|undefined)}}\n@@ -564,18 +565,17 @@ class PrototypeObjectType extends ObjectType {\n     // We want to modify the object literal to match the constraint, by\n     // taking any each property on the record and trying to match\n     // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+    for (String prop : objType.getOwnPropertyNames()) {\n+      JSType propType = objType.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}