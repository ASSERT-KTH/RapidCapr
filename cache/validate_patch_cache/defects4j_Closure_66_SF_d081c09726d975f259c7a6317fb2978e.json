{
    "patch": "public static double getTypedPercent(String json) {\n  try {\n    ObjectMapper mapper = new ObjectMapper();\n    Map<String, Object> map = mapper.readValue(json, Map.class);\n    int typedCounter = 0;\n    int totalCounter = 0;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      totalCounter++;\n      if (entry.getValue() != null && !entry.getValue().toString().isEmpty()) {\n        typedCounter++;\n      }\n    }\n    return (double) typedCounter / totalCounter * 100;\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n  return 0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e18bc8d1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+  try {\n+    ObjectMapper mapper = new ObjectMapper();\n+    Map<String, Object> map = mapper.readValue(json, Map.class);\n+    int typedCounter = 0;\n+    int totalCounter = 0;\n+    for (Map.Entry<String, Object> entry : map.entrySet()) {\n+      totalCounter++;\n+      if (entry.getValue() != null && !entry.getValue().toString().isEmpty()) {\n+        typedCounter++;\n+      }\n+    }\n+    return (double) typedCounter / totalCounter * 100;\n+  } catch (Exception ex) {\n+    ex.printStackTrace();\n+  }\n+  return 0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}