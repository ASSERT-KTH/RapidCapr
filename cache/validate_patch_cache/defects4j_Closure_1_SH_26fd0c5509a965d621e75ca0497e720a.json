{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Strip unreferenced args off the end of the function declaration.\n    Node arg = argList.getFirstChild();\n    int argIndex = 0;\n    while (arg != null) {\n      Var var = fnScope.getVar(arg.getString());\n      Node next = arg.getNext();\n      if (!referenced.contains(var)) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        Node name = arg;\n        if (name.isDefaultValue()) {\n          name = name.getFirstChild();\n        }\n        name.setString(\"a\" + argIndex++);\n      }\n      arg = next;\n    }\n\n    callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..08b49f22 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node arg = argList.getFirstChild();\n+    int argIndex = 0;\n+    while (arg != null) {\n+      Var var = fnScope.getVar(arg.getString());\n+      Node next = arg.getNext();\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        Node name = arg;\n+        if (name.isDefaultValue()) {\n+          name = name.getFirstChild();\n+        }\n+        name.setString(\"a\" + argIndex++);\n+      }\n+      arg = next;\n+    }\n+\n+    callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}