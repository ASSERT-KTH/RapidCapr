{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n\n    sort(savedFields, count);\n\n    boolean monthOrDayFound = false;\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            monthOrDayFound = true;\n            int year = iDefaultYear;\n\n            // set the date to 01-January of that year to calculate the default year\n            saveField(DateTimeFieldType.monthOfYear(), 1);\n            saveField(DateTimeFieldType.dayOfMonth(), 1);\n\n            try {\n                year = (int)savedFields[0].set(year, false);\n            } catch (IllegalFieldValueException e) {\n                // ignore and use default year\n            }\n\n            // reset the monthOfYear and dayOfMonth fields for the actual parsing\n            resetField(DateTimeFieldType.monthOfYear());\n            resetField(DateTimeFieldType.dayOfMonth());\n            saveField(DateTimeFieldType.year(), year);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (monthOrDayFound) {\n        // reconstruct the date to check for February 29th leap year issue\n        LocalDate reconstructedDate = new LocalDate(millis, iChrono);\n        if (reconstructedDate.getMonthOfYear() == DateTimeConstants.FEBRUARY && reconstructedDate.getDayOfMonth() == 29) {\n            try {\n                // set the year to February 28th to avoid leap year issue\n                saveField(DateTimeFieldType.dayOfMonth(), 28);\n                millis = computeMillis(resetFields, text);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        }\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2020a98a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,91 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+\n+    sort(savedFields, count);\n+\n+    boolean monthOrDayFound = false;\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            monthOrDayFound = true;\n+            int year = iDefaultYear;\n+\n+            // set the date to 01-January of that year to calculate the default year\n+            saveField(DateTimeFieldType.monthOfYear(), 1);\n+            saveField(DateTimeFieldType.dayOfMonth(), 1);\n+\n+            try {\n+                year = (int)savedFields[0].set(year, false);\n+            } catch (IllegalFieldValueException e) {\n+                // ignore and use default year\n             }\n+\n+            // reset the monthOfYear and dayOfMonth fields for the actual parsing\n+            resetField(DateTimeFieldType.monthOfYear());\n+            resetField(DateTimeFieldType.dayOfMonth());\n+            saveField(DateTimeFieldType.year(), year);\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (monthOrDayFound) {\n+        // reconstruct the date to check for February 29th leap year issue\n+        LocalDate reconstructedDate = new LocalDate(millis, iChrono);\n+        if (reconstructedDate.getMonthOfYear() == DateTimeConstants.FEBRUARY && reconstructedDate.getDayOfMonth() == 29) {\n+            try {\n+                // set the year to February 28th to avoid leap year issue\n+                saveField(DateTimeFieldType.dayOfMonth(), 28);\n+                millis = computeMillis(resetFields, text);\n+            } catch (IllegalFieldValueException e) {\n                 if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                 }\n-                throw new IllegalArgumentException(message);\n+                throw e;\n             }\n         }\n-        \n-        return millis;\n     }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}