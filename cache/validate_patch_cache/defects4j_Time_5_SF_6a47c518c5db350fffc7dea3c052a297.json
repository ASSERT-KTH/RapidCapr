{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    ISOChronology chrono = ISOChronology.getInstanceUTC();\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, chrono);\n\n    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n    boolean weeksSupported = type.isSupported(DurationFieldType.weeks());\n    boolean daysSupported = type.isSupported(DurationFieldType.days());\n\n    if (yearsSupported || monthsSupported) {\n        // Calculate total months in the period\n        int totalMonths = getYears() * 12 + getMonths() + (getWeeks()*7+getDays()) / 30;\n        int years = totalMonths / 12;\n        int months = totalMonths % 12;\n\n        // Add the total years and months to the period\n        if (yearsSupported && years != getYears()) {\n            result = result.withYears(years);\n        }\n        if (monthsSupported && months != getMonths()) {\n            result = result.withMonths(months);\n        }\n\n        // Calculate the remaining weeks and days\n        int remainingWeeks = 0, remainingDays = 0;\n        if (weeksSupported || daysSupported) {\n            int totalDays = getDays() + getWeeks() * 7;\n            remainingWeeks = totalDays / 7;\n            remainingDays = totalDays % 7;\n        }\n\n        // Add or subtract the remaining weeks and/or days to/from the period\n        if (weeksSupported && remainingWeeks != 0) {\n            result = result.plusWeeks(remainingWeeks);\n        }\n        if (daysSupported && remainingDays != 0) {\n            result = result.plusDays(remainingDays);\n        }\n    }\n    else {\n        // If years and months are not supported, simply add weeks and days\n        if (weeksSupported) {\n            result = result.plusWeeks(getWeeks());\n        }\n        if (daysSupported) {\n            result = result.plusDays(getDays());\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ae23eb18 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,63 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    ISOChronology chrono = ISOChronology.getInstanceUTC();\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, type, chrono);\n+\n+    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n+    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n+    boolean weeksSupported = type.isSupported(DurationFieldType.weeks());\n+    boolean daysSupported = type.isSupported(DurationFieldType.days());\n+\n+    if (yearsSupported || monthsSupported) {\n+        // Calculate total months in the period\n+        int totalMonths = getYears() * 12 + getMonths() + (getWeeks()*7+getDays()) / 30;\n+        int years = totalMonths / 12;\n+        int months = totalMonths % 12;\n+\n+        // Add the total years and months to the period\n+        if (yearsSupported && years != getYears()) {\n+            result = result.withYears(years);\n+        }\n+        if (monthsSupported && months != getMonths()) {\n+            result = result.withMonths(months);\n+        }\n+\n+        // Calculate the remaining weeks and days\n+        int remainingWeeks = 0, remainingDays = 0;\n+        if (weeksSupported || daysSupported) {\n+            int totalDays = getDays() + getWeeks() * 7;\n+            remainingWeeks = totalDays / 7;\n+            remainingDays = totalDays % 7;\n+        }\n+\n+        // Add or subtract the remaining weeks and/or days to/from the period\n+        if (weeksSupported && remainingWeeks != 0) {\n+            result = result.plusWeeks(remainingWeeks);\n+        }\n+        if (daysSupported && remainingDays != 0) {\n+            result = result.plusDays(remainingDays);\n         }\n-        return result;\n     }\n+    else {\n+        // If years and months are not supported, simply add weeks and days\n+        if (weeksSupported) {\n+            result = result.plusWeeks(getWeeks());\n+        }\n+        if (daysSupported) {\n+            result = result.plusDays(getDays());\n+        }\n+    }\n+\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P4W10D>",
    "test_result": "FAIL"
}