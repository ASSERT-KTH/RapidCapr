{
    "patch": "      // strip whole arg list if unused\n>>>   boolean removeArgs = true;\n      for (Node arg : argList.children()) {\n        if (arg.isDefaultValue() && NodeUtil.mayHaveSideEffects(arg.getLastChild())) {\n          // Side-effecting default value will always be used.\n          removeArgs = false;\n          break;\n        }\n        if (!arg.hasChildren() || NodeUtil.isLiteralValue(arg.getLastChild())) {\n          // Unused non-default argument.\n>>>       String paramName = arg.getString();\n>>>       Var var = fnScope.getVar(paramName);\n>>>       if (var == null || !referenced.contains(var)) {\n>>>         arg.detach();\n>>>         compiler.reportCodeChange();\n>>>       } else { // arg has uses\n>>>         removeArgs = false;\n>>>       }\n        } else { // arg has non-literal side-effecting default value.\n          removeArgs = false;\n        }\n      }\n>>>   if (removeArgs) {\n>>>     NodeUtil.deleteNode(argList);\n>>>     compiler.reportCodeChange();\n>>>     return;\n>>>   }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9a922cea 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // strip whole arg list if unused\n+>>>   boolean removeArgs = true;\n+      for (Node arg : argList.children()) {\n+        if (arg.isDefaultValue() && NodeUtil.mayHaveSideEffects(arg.getLastChild())) {\n+          // Side-effecting default value will always be used.\n+          removeArgs = false;\n+          break;\n+        }\n+        if (!arg.hasChildren() || NodeUtil.isLiteralValue(arg.getLastChild())) {\n+          // Unused non-default argument.\n+>>>       String paramName = arg.getString();\n+>>>       Var var = fnScope.getVar(paramName);\n+>>>       if (var == null || !referenced.contains(var)) {\n+>>>         arg.detach();\n+>>>         compiler.reportCodeChange();\n+>>>       } else { // arg has uses\n+>>>         removeArgs = false;\n+>>>       }\n+        } else { // arg has non-literal side-effecting default value.\n+          removeArgs = false;\n+        }\n+      }\n+>>>   if (removeArgs) {\n+>>>     NodeUtil.deleteNode(argList);\n+>>>     compiler.reportCodeChange();\n+>>>     return;\n+>>>   }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}