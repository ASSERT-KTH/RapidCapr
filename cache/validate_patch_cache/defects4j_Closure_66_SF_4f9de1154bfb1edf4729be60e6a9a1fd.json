{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double total = 0.0;\n    double typed = 0.0;\n\n    JSONArray stats = jsonObject.getJSONArray(\"stats\");\n    for (int i = 0; i < stats.length(); i++) {\n        JSONObject obj = stats.getJSONObject(i);\n        if (obj.getString(\"name\").equals(\"characters_typed\")) {\n            typed = obj.getDouble(\"value\");\n        } else if (obj.getString(\"name\").equals(\"backspace_count\") ||\n                obj.getString(\"name\").equals(\"delete_count\") ||\n                obj.getString(\"name\").equals(\"skip_word_count\") ||\n                obj.getString(\"name\").equals(\"undo_count\")) {\n            total += obj.getDouble(\"value\");\n        }\n    }\n\n    return (typed / (total + typed)) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f62f4820 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double total = 0.0;\n+    double typed = 0.0;\n+\n+    JSONArray stats = jsonObject.getJSONArray(\"stats\");\n+    for (int i = 0; i < stats.length(); i++) {\n+        JSONObject obj = stats.getJSONObject(i);\n+        if (obj.getString(\"name\").equals(\"characters_typed\")) {\n+            typed = obj.getDouble(\"value\");\n+        } else if (obj.getString(\"name\").equals(\"backspace_count\") ||\n+                obj.getString(\"name\").equals(\"delete_count\") ||\n+                obj.getString(\"name\").equals(\"skip_word_count\") ||\n+                obj.getString(\"name\").equals(\"undo_count\")) {\n+            total += obj.getDouble(\"value\");\n+        }\n+    }\n+\n+    return (typed / (total + typed)) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}