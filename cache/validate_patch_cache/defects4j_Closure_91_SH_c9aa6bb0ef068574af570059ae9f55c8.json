{
    "patch": "      if (parent != null && NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild()) &&\n            (parent.getFirstChild().getLastChild().getString().equals(\"prototype\") || parent.getFirstChild().getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN && n == parent.getFirstChild()) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g.: (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n\n        return true;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..703c0837 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild()) &&\n+            (parent.getFirstChild().getLastChild().getString().equals(\"prototype\") || parent.getFirstChild().getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN && n == parent.getFirstChild()) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g.: (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+\n+        return true;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 46 expected:<0> but was:<1>",
    "test_result": "FAIL"
}