{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double[][] a = m.getData();\n    final double[][] x = new double[n][n];\n    final double[][] y = new double[n][n];\n    final double[][] z = new double[n][n];\n\n    // initialize X to identity matrix\n    for (int i = 0; i < n; i++) {\n        x[i][i] = 1;\n    }\n\n    // compute the square root of the matrix\n    for (int k = 0; k < 10; k++) {\n        // solve Y^T * Y = A * X\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n; i++) {\n                double s = a[i][j];\n                for (int l = 0; l < j; l++) {\n                    s -= y[l][i] * y[l][j];\n                }\n                if (i == j) {\n                    y[j][i] = Math.sqrt(s);\n                } else {\n                    y[j][i] = s / y[i][i];\n                }\n            }\n        }\n\n        // solve Z^T * Z = X * Y\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < n; i++) {\n                double s = 0;\n                for (int l = 0; l < n; l++) {\n                    s += x[l][i] * y[l][j];\n                }\n                if (i == j) {\n                    z[j][i] = Math.sqrt(s);\n                } else {\n                    z[j][i] = s / z[i][i];\n                }\n            }\n        }\n\n        // update X\n        double[][] temp = x;\n        x = z;\n        z = temp;\n    }\n\n    return MatrixUtils.createRealMatrix(x);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6a1457687 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,56 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double[][] a = m.getData();\n+    final double[][] x = new double[n][n];\n+    final double[][] y = new double[n][n];\n+    final double[][] z = new double[n][n];\n+\n+    // initialize X to identity matrix\n+    for (int i = 0; i < n; i++) {\n+        x[i][i] = 1;\n     }\n+\n+    // compute the square root of the matrix\n+    for (int k = 0; k < 10; k++) {\n+        // solve Y^T * Y = A * X\n+        for (int j = 0; j < n; j++) {\n+            for (int i = 0; i < n; i++) {\n+                double s = a[i][j];\n+                for (int l = 0; l < j; l++) {\n+                    s -= y[l][i] * y[l][j];\n+                }\n+                if (i == j) {\n+                    y[j][i] = Math.sqrt(s);\n+                } else {\n+                    y[j][i] = s / y[i][i];\n+                }\n+            }\n+        }\n+\n+        // solve Z^T * Z = X * Y\n+        for (int j = 0; j < n; j++) {\n+            for (int i = 0; i < n; i++) {\n+                double s = 0;\n+                for (int l = 0; l < n; l++) {\n+                    s += x[l][i] * y[l][j];\n+                }\n+                if (i == j) {\n+                    z[j][i] = Math.sqrt(s);\n+                } else {\n+                    z[j][i] = s / z[i][i];\n+                }\n+            }\n+        }\n+\n+        // update X\n+        double[][] temp = x;\n+        x = z;\n+        z = temp;\n+    }\n+\n+    return MatrixUtils.createRealMatrix(x);\n+}\n }",
    "result_reason": "error: cannot assign a value to final variable x",
    "test_result": "ERROR"
}