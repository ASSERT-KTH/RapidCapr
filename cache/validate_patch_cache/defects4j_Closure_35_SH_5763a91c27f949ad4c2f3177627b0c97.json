{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              warnings.add(JSError.make(\n                  n,\n                  WARNING_INVALIDATION,\n                  \"inferred \" + typeToInfer + \" for \" + prop));\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..e983e992 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1128,12 +1128,17 @@ class TypeInference\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              warnings.add(JSError.make(\n+                  n,\n+                  WARNING_INVALIDATION,\n+                  \"inferred \" + typeToInfer + \" for \" + prop));\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}