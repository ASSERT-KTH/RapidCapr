{
    "patch": "    Node first = n.getFirstChild();\n    while (NodeUtil.isCast(first)) {\n      first = first.getFirstChild();\n    }\n\n    if (!NodeUtil.isGet(first)) {\n      n.putBooleanProp(Node.FREE_CALL, true);\n    }\n\n    if (first.isName() && \"eval\".equals(first.getString())) {\n      Node current = n;\n      boolean isInWith = false;\n      while (current.getParent() != null) {\n        current = current.getParent();\n        if (current.isWith()) {\n          isInWith = true;\n          break;\n        }\n      }\n      first.putBooleanProp(Node.DIRECT_EVAL, !isInWith);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..be1f12bc 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,26 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    Node first = n.getFirstChild();\n+    while (NodeUtil.isCast(first)) {\n+      first = first.getFirstChild();\n+    }\n+\n+    if (!NodeUtil.isGet(first)) {\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+    }\n+\n+    if (first.isName() && \"eval\".equals(first.getString())) {\n+      Node current = n;\n+      boolean isInWith = false;\n+      while (current.getParent() != null) {\n+        current = current.getParent();\n+        if (current.isWith()) {\n+          isInWith = true;\n+          break;\n+        }\n+      }\n+      first.putBooleanProp(Node.DIRECT_EVAL, !isInWith);\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}