{
    "patch": "        MockHandlerInterface<T> mockHandler = getMockHandler(mock);\n        if (mockHandler instanceof ProxyObject) {\n            ProxyFactory pf = new ProxyFactory();\n            pf.setSuperclass(mock.getClass());\n            pf.setInterfaces(getExtraInterfaces(mock));\n            pf.setFilter(new MockFixedFilter(pf, mockHandler));\n            T newMock = mock((Class<T>) pf.createClass(), getMockSettings(mock).getMockName());\n            getMockHandler(newMock).setMockitoInterceptor(newFilter);\n            mock = newMock;\n        } else {\n            getMockHandler(mock).setMockitoInterceptor(newFilter);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..29f880798 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandlerInterface<T> mockHandler = getMockHandler(mock);\n+        if (mockHandler instanceof ProxyObject) {\n+            ProxyFactory pf = new ProxyFactory();\n+            pf.setSuperclass(mock.getClass());\n+            pf.setInterfaces(getExtraInterfaces(mock));\n+            pf.setFilter(new MockFixedFilter(pf, mockHandler));\n+            T newMock = mock((Class<T>) pf.createClass(), getMockSettings(mock).getMockName());\n+            getMockHandler(newMock).setMockitoInterceptor(newFilter);\n+            mock = newMock;\n+        } else {\n+            getMockHandler(mock).setMockitoInterceptor(newFilter);\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}