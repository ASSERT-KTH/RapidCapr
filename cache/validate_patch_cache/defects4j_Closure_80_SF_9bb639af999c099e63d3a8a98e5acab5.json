{
    "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n        boolean result = false;\n        switch (value.getToken()) {\n            case ASSIGN:\n                boolean isImmutable = NodeUtil.isImmutableValue(value.getLastChild());\n                if (isImmutable || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals))) {\n                    result = true;\n                }\n                break;\n            case COMMA:\n                result = evaluatesToLocalValue(value.getLastChild(), locals);\n                break;\n            case AND:\n            case OR:\n                result = evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n                break;\n            case HOOK:\n                result = evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n                break;\n            case INC:\n            case DEC:\n                if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                    result = evaluatesToLocalValue(value.getFirstChild(), locals);\n                } else {\n                    result = true;\n                }\n                break;\n            case THIS:\n            case NAME:\n                result = NodeUtil.isImmutableValue(value) || locals.test(value);\n                break;\n            case GETELEM:\n            case GETPROP:\n                result = locals.test(value);\n                break;\n            case CALL:\n                result = NodeUtil.callHasLocalResult(value) || NodeUtil.isToStringMethodCall(value) || locals.test(value);\n                break;\n            case NEW:\n                result = NodeUtil.newHasLocalResult(value) || locals.test(value);\n                break;\n            case FUNCTION:\n            case REGEXP:\n            case ARRAYLIT:\n            case OBJECTLIT:\n                result = true;\n                break;\n            case IN:\n                result = true;\n                break;\n            default:\n                if (NodeUtil.isAssignmentOp(value) || NodeUtil.isSimpleOperator(value) || NodeUtil.isImmutableValue(value)) {\n                    result = true;\n                } else {\n                    throw new IllegalStateException(\"Unexpected expression node\" + value\n                            + \"\\n parent:\" + value.getParent());\n                }\n                break;\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..4f7d9951 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,67 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n-        return true;\n-      default:\n-        return false;\n-    }\n-  }\n-\n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n-    }\n-    return false;\n-  }\n-\n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n-\n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n-  }\n-\n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+        boolean result = false;\n+        switch (value.getToken()) {\n+            case ASSIGN:\n+                boolean isImmutable = NodeUtil.isImmutableValue(value.getLastChild());\n+                if (isImmutable || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals))) {\n+                    result = true;\n+                }\n+                break;\n+            case COMMA:\n+                result = evaluatesToLocalValue(value.getLastChild(), locals);\n+                break;\n+            case AND:\n+            case OR:\n+                result = evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n+                break;\n+            case HOOK:\n+                result = evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n+                break;\n+            case INC:\n+            case DEC:\n+                if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+                    result = evaluatesToLocalValue(value.getFirstChild(), locals);\n+                } else {\n+                    result = true;\n+                }\n+                break;\n+            case THIS:\n+            case NAME:\n+                result = NodeUtil.isImmutableValue(value) || locals.test(value);\n+                break;\n+            case GETELEM:\n+            case GETPROP:\n+                result = locals.test(value);\n+                break;\n+            case CALL:\n+                result = NodeUtil.callHasLocalResult(value) || NodeUtil.isToStringMethodCall(value) || locals.test(value);\n+                break;\n+            case NEW:\n+                result = NodeUtil.newHasLocalResult(value) || locals.test(value);\n+                break;\n+            case FUNCTION:\n+            case REGEXP:\n+            case ARRAYLIT:\n+            case OBJECTLIT:\n+                result = true;\n+                break;\n+            case IN:\n+                result = true;\n+                break;\n+            default:\n+                if (NodeUtil.isAssignmentOp(value) || NodeUtil.isSimpleOperator(value) || NodeUtil.isImmutableValue(value)) {\n+                    result = true;\n+                } else {\n+                    throw new IllegalStateException(\"Unexpected expression node\" + value\n+                            + \"\\n parent:\" + value.getParent());\n+                }\n+                break;\n+        }\n+        return result;\n     }\n-  }\n-\n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n-\n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n-  }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}