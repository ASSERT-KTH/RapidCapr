{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (!thisType.isUnknownType()) {\n        Node parent = n.getParent();\n        Node.Kind parentKind = parent == null ? null : parent.getToken();\n        if (parentKind != Token.GETPROP && parentKind != Token.GETELEM) {\n          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c747af69 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (!thisType.isUnknownType()) {\n+        Node parent = n.getParent();\n+        Node.Kind parentKind = parent == null ? null : parent.getToken();\n+        if (parentKind != Token.GETPROP && parentKind != Token.GETELEM) {\n+          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}