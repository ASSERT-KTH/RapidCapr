{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n      if (NodeUtil.isStatement(n) && !NodeUtil.isFunctionDeclaration(n)) {\n        return;\n      }\n      if (NodeUtil.isFunctionDeclaration(n) || n.getType() == Token.CATCH) {\n        define(n, parent);\n      }\n    }\n\n    private void define(Node n, Node parent) {\n      Preconditions.checkArgument(\n          parent == n.getParent() || parent == n.getGrandparent(),\n          \"Expected parent or grandparent, found %s\", parent);\n      if (n.isFunction()) {\n        defineDeclaredFunction(n, parent);\n      } else if (n.isCatch()) {\n        defineCatch(n, parent);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c78aedaf 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,28 +1440,25 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (NodeUtil.isStatement(n) && !NodeUtil.isFunctionDeclaration(n)) {\n         return;\n       }\n+      if (NodeUtil.isFunctionDeclaration(n) || n.getType() == Token.CATCH) {\n+        define(n, parent);\n+      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    private void define(Node n, Node parent) {\n+      Preconditions.checkArgument(\n+          parent == n.getParent() || parent == n.getGrandparent(),\n+          \"Expected parent or grandparent, found %s\", parent);\n+      if (n.isFunction()) {\n+        defineDeclaredFunction(n, parent);\n+      } else if (n.isCatch()) {\n+        defineCatch(n, parent);\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}