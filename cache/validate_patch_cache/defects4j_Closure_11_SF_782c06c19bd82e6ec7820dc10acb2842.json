{
    "patch": "public String getProperty(String key) {\n    String value = null;\n    try {\n        InputStream is = getClass().getResourceAsStream(\"myapp.properties\");\n        Properties prop = new Properties();\n        prop.load(is);\n        value = prop.getProperty(key);\n        if (value == null || value.equals(\"\")) {\n            throw new IllegalArgumentException(\"Value not found for key : \" + key);\n        }\n    } catch (IllegalArgumentException e) {\n        System.err.println(\"Error: \" + e.getMessage());\n    } catch (IOException e) {\n        System.err.println(\"Error while getting the property value : \" + e.getMessage());\n    } catch (Exception e) {\n        System.err.println(\"Error while getting the property value : \" + e);\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..58a498d7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String key) {\n+    String value = null;\n+    try {\n+        InputStream is = getClass().getResourceAsStream(\"myapp.properties\");\n+        Properties prop = new Properties();\n+        prop.load(is);\n+        value = prop.getProperty(key);\n+        if (value == null || value.equals(\"\")) {\n+            throw new IllegalArgumentException(\"Value not found for key : \" + key);\n+        }\n+    } catch (IllegalArgumentException e) {\n+        System.err.println(\"Error: \" + e.getMessage());\n+    } catch (IOException e) {\n+        System.err.println(\"Error while getting the property value : \" + e.getMessage());\n+    } catch (Exception e) {\n+        System.err.println(\"Error while getting the property value : \" + e);\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}