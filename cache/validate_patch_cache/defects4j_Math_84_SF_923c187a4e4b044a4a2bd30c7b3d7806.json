{
    "patch": "                } else {\n                    simplex = shrink(original, comparator);\n                }\n                continue;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint();\n            } else {\n                simplex = shrink(original, comparator);\n            }\n\n            // check convergence\n            if (checker != null &&\n                simplex != null &&\n                checker.converged(getIterations(), best, simplex[0])) {\n                return;\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                         final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair[] newArray = new RealPointValuePair[original.length];\n        newArray[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final double[] res = new double[original[i].getPoint().length];\n            for (int j = 0; j < res.length; j++) {\n                res[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);\n            }\n            newArray[i] = new RealPointValuePair(res, Double.NaN, false);\n        }\n        Arrays.sort(newArray, comparator);\n        return newArray;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7149408c7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n                 }\n-\n-                return;\n-\n+                continue;\n             }\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted.getPoint();\n+            } else {\n+                simplex = shrink(original, comparator);\n+            }\n \n             // check convergence\n+            if (checker != null &&\n+                simplex != null &&\n+                checker.converged(getIterations(), best, simplex[0])) {\n                 return;\n             }\n \n         }\n \n     }\n+    \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                         final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] newArray = new RealPointValuePair[original.length];\n+        newArray[0] = best;\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] res = new double[original[i].getPoint().length];\n+            for (int j = 0; j < res.length; j++) {\n+                res[j] = best.getPoint()[j] + sigma * (original[i].getPoint()[j] - best.getPoint()[j]);\n+            }\n+            newArray[i] = new RealPointValuePair(res, Double.NaN, false);\n+        }\n+        Arrays.sort(newArray, comparator);\n+        return newArray;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}