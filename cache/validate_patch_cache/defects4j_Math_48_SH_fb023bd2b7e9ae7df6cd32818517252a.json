{
    "patch": "                    // Detect early that algorithm is stuck, instead of waiting for\n                    // the maximum number of iterations to be exceeded.\n                    final double delta = FastMath.max(rtol * FastMath.abs(x1),\n                            atol);\n                    if (FastMath.abs(f1) <= ftol || FastMath.abs(x1 - x) < delta) {\n                        switch (allowed) {\n                            case ANY_SIDE:\n                                return x1;\n                            case LEFT_SIDE:\n                                return inverted ? x1 : x0;\n                            case RIGHT_SIDE:\n                                return inverted ? x0 : x1;\n                            case BELOW_SIDE:\n                                return (f1 <= 0) ? x1 : x0;\n                            case ABOVE_SIDE:\n                                return (f1 >= 0) ? x1 : x0;\n                            default:\n                                throw new MathInternalError();\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..a16cb7b47 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,26 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    // Detect early that algorithm is stuck, instead of waiting for\n+                    // the maximum number of iterations to be exceeded.\n+                    final double delta = FastMath.max(rtol * FastMath.abs(x1),\n+                            atol);\n+                    if (FastMath.abs(f1) <= ftol || FastMath.abs(x1 - x) < delta) {\n+                        switch (allowed) {\n+                            case ANY_SIDE:\n+                                return x1;\n+                            case LEFT_SIDE:\n+                                return inverted ? x1 : x0;\n+                            case RIGHT_SIDE:\n+                                return inverted ? x0 : x1;\n+                            case BELOW_SIDE:\n+                                return (f1 <= 0) ? x1 : x0;\n+                            case ABOVE_SIDE:\n+                                return (f1 >= 0) ? x1 : x0;\n+                            default:\n+                                throw new MathInternalError();\n+                        }\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<java.lang.AssertionError>",
    "test_result": "FAIL"
}