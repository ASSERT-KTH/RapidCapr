{
    "patch": "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n                } else if (c == ')') {\n                    depth -= 1;\n                    if (depth < 0) {\n                        return new ArrayList<Integer>(); // Return empty list if parentheses are not balanced\n                    }\n                }\n            }\n            if (depth != 0) {\n                return new ArrayList<Integer>(); // Return empty list if parentheses are not balanced\n            }\n\n            result.add(max_depth);\n        }\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\nindex 6bc914f..0548486 100644\n--- a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\n+++ b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\n@@ -15,6 +15,33 @@ public class PARSE_NESTED_PARENS {\n                 if (c == '('){\n                     depth += 1;\n                     max_depth = Math.max(depth, max_depth);\n+    public static List<Integer> parse_nested_parens(String paren_string) {\n+        String[] paren_groups = paren_string.split(\" \");\n+        List<Integer> result = new ArrayList<Integer>();\n+\n+        for (String paren_group : paren_groups) {\n+            int depth = 0;\n+            int max_depth = 0;\n+            for (char c : paren_group.toCharArray()){\n+                if (c == '('){\n+                    depth += 1;\n+                    max_depth = Math.max(depth, max_depth);\n+                } else if (c == ')') {\n+                    depth -= 1;\n+                    if (depth < 0) {\n+                        return new ArrayList<Integer>(); // Return empty list if parentheses are not balanced\n+                    }\n+                }\n+            }\n+            if (depth != 0) {\n+                return new ArrayList<Integer>(); // Return empty list if parentheses are not balanced\n+            }\n+\n+            result.add(max_depth);\n+        }\n+\n+        return result;\n+    }\n                 }\n             }\n             result.add(max_depth);",
    "result_reason": " /tmp/humaneval-PARSE_NESTED_PARENS/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java:[18,5] illegal start of expression",
    "test_result": "ERROR"
}