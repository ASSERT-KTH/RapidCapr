{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !\"join\".equals(functionName.getString())) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          foldedSize += sb.length() + 2;\n          Node nodeString = IR.string(sb.toString()).copyInformationFrom(prev);\n          arrayFoldedChildren.add(NodeUtil.newBinaryOperator(Token.ADD, nodeString, IR.string(\"\").cloneTree()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      foldedSize += sb.length() + 2;\n      Node nodeString = IR.string(sb.toString()).copyInformationFrom(prev);\n      arrayFoldedChildren.add(NodeUtil.newBinaryOperator(Token.ADD, nodeString, IR.string(\"\").cloneTree()).copyInformationFrom(prev));\n    }\n\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure it is coerced to a string.\n          foldedStringNode = NodeUtil.newBinaryOperator(Token.ADD, IR.string(\"\"), foldedStringNode);\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        foldedSize += InlineCostEstimator.getCost(right) + \"[].join()\".length();\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        Node newArgs = null;\n        if (right == null) {\n          newArgs = new Node(Token.ARRAYLIT);\n        } else {\n          newArgs = Node.newString(right.getString());\n        }\n        Node newArrayJoinNode = NodeUtil.newCallNode(IR.name(\"\").cloneNode(), newArgs);\n        Node newArrayNode = new Node(Token.ARRAYLIT);\n        for (Node node : arrayFoldedChildren) {\n          newArrayNode.addChildToBack(node);\n        }\n        newArrayJoinNode.addChildToBack(newArrayNode);\n        newArrayJoinNode.addChildToBack(IR.string(joinString));\n        if (right != null) {\n          newArrayJoinNode.addChildToBack(right.cloneNode());\n        }\n        newArrayJoinNode.useSourceInfoFrom(n);\n        n.getParent().replaceChild(n, newArrayJoinNode);\n        reportCodeChange();\n        return newArrayJoinNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..d7ff9095 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,38 +364,29 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n-\n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n       return n;\n     }\n-\n     Node right = callTarget.getNext();\n     if (right != null) {\n       if (!NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n     }\n-\n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !\"join\".equals(functionName.getString())) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n     Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n         if (sb == null) {\n           sb = new StringBuilder();\n@@ -406,27 +397,24 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       } else {\n         if (sb != null) {\n           Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n+          Node nodeString = IR.string(sb.toString()).copyInformationFrom(prev);\n+          arrayFoldedChildren.add(NodeUtil.newBinaryOperator(Token.ADD, nodeString, IR.string(\"\").cloneTree()).copyInformationFrom(prev));\n           sb = null;\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n-      elem = elem.getNext();\n     }\n \n     if (sb != null) {\n       Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      Node nodeString = IR.string(sb.toString()).copyInformationFrom(prev);\n+      arrayFoldedChildren.add(NodeUtil.newBinaryOperator(Token.ADD, nodeString, IR.string(\"\").cloneTree()).copyInformationFrom(prev));\n     }\n-    // one for each comma.\n+\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n@@ -441,39 +429,41 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         if (foldedSize > originalSize) {\n           return n;\n         }\n-        arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+          // If the Node is not a string literal, ensure it is coerced to a string.\n+          foldedStringNode = NodeUtil.newBinaryOperator(Token.ADD, IR.string(\"\"), foldedStringNode);\n         }\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n       default:\n-        // No folding could actually be performed.\n         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n           return n;\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+        foldedSize += InlineCostEstimator.getCost(right) + \"[].join()\".length();\n         if (foldedSize > originalSize) {\n           return n;\n         }\n-        arrayNode.detachChildren();\n+        Node newArgs = null;\n+        if (right == null) {\n+          newArgs = new Node(Token.ARRAYLIT);\n+        } else {\n+          newArgs = Node.newString(right.getString());\n+        }\n+        Node newArrayJoinNode = NodeUtil.newCallNode(IR.name(\"\").cloneNode(), newArgs);\n+        Node newArrayNode = new Node(Token.ARRAYLIT);\n         for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+          newArrayNode.addChildToBack(node);\n+        }\n+        newArrayJoinNode.addChildToBack(newArrayNode);\n+        newArrayJoinNode.addChildToBack(IR.string(joinString));\n+        if (right != null) {\n+          newArrayJoinNode.addChildToBack(right.cloneNode());\n         }\n+        newArrayJoinNode.useSourceInfoFrom(n);\n+        n.getParent().replaceChild(n, newArrayJoinNode);\n         reportCodeChange();\n-        break;\n-    }\n-\n-    return n;\n-  }\n+        return newArrayJoinNode;\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +632,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}