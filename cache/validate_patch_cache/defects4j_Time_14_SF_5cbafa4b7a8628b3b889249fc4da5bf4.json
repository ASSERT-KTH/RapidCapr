{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = values.clone();\n\n    long instant = 0L;\n\n    boolean monthBased = false;\n    boolean dayBased = false;\n    int maxDayOfMonth = 0;\n    int monthIndex = -1;\n    int dayIndex = -1;\n\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType type = partial.getFieldType(i);\n        int value = values[i];\n\n        if (type == DateTimeFieldType.monthOfYear()) {\n            monthBased = true;\n            monthIndex = i;\n            int totalMonths = iChronology.year().get(instant) * 12 + value - 1;\n            totalMonths += valueToAdd;\n            int year = totalMonths / 12;\n            int month = totalMonths % 12 + 1;\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, month);\n            newValues[i] = month;\n        } else if (type == DateTimeFieldType.dayOfMonth()) {\n            dayBased = true;\n            dayIndex = i;\n            int dayOfMonth = value + valueToAdd;\n            if (dayOfMonth < 1) {\n                while (dayOfMonth < 1) {\n                    instant = iChronology.monthOfYear().add(instant, -1);\n                    int maxDayOfPreviousMonth = iChronology.monthOfYear().getMaximumValue(instant);\n                    dayOfMonth += maxDayOfPreviousMonth;\n                }\n                int month = iChronology.monthOfYear().get(instant);\n                newValues[monthIndex] = month;\n            } else {\n                int maxDayOfMonthThisMonth = iChronology.monthOfYear().getMaximumValue(instant);\n                while (dayOfMonth > maxDayOfMonthThisMonth) {\n                    dayOfMonth -= maxDayOfMonthThisMonth;\n                    instant = iChronology.monthOfYear().add(instant, 1);\n                    maxDayOfMonthThisMonth = iChronology.monthOfYear().getMaximumValue(instant);\n                    int month = iChronology.monthOfYear().get(instant);\n                    newValues[monthIndex] = month;\n                }\n            }\n            instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n            newValues[i] = dayOfMonth;\n        } else {\n            instant = type.getField(iChronology).set(instant, value);\n        }\n    }\n\n    if (monthBased && dayBased) {\n        if (monthIndex < dayIndex) {\n            // set day field first\n            int newDayOfMonth = newValues[dayIndex];\n            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n            instant = iChronology.monthOfYear().set(instant, newValues[monthIndex]);\n        } else if (monthIndex > dayIndex) {\n            // set month field first\n            instant = iChronology.monthOfYear().set(instant, newValues[monthIndex]);\n            int newDayOfMonth = newValues[dayIndex];\n            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n        } else {\n            throw new IllegalStateException(\"Month and day indices should not be equal.\");\n        }\n    } else if (monthBased) {\n        instant = iChronology.monthOfYear().set(instant, newValues[monthIndex]);\n    } else if (dayBased) {\n        instant = iChronology.dayOfMonth().set(instant, newValues[dayIndex]);\n    } else {\n        throw new IllegalStateException(\"Partial must be either month-based or day-based.\");\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1a566685 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,89 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = values.clone();\n+\n+    long instant = 0L;\n+\n+    boolean monthBased = false;\n+    boolean dayBased = false;\n+    int maxDayOfMonth = 0;\n+    int monthIndex = -1;\n+    int dayIndex = -1;\n+\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType type = partial.getFieldType(i);\n+        int value = values[i];\n+\n+        if (type == DateTimeFieldType.monthOfYear()) {\n+            monthBased = true;\n+            monthIndex = i;\n+            int totalMonths = iChronology.year().get(instant) * 12 + value - 1;\n+            totalMonths += valueToAdd;\n+            int year = totalMonths / 12;\n+            int month = totalMonths % 12 + 1;\n+            instant = iChronology.year().set(instant, year);\n+            instant = iChronology.monthOfYear().set(instant, month);\n+            newValues[i] = month;\n+        } else if (type == DateTimeFieldType.dayOfMonth()) {\n+            dayBased = true;\n+            dayIndex = i;\n+            int dayOfMonth = value + valueToAdd;\n+            if (dayOfMonth < 1) {\n+                while (dayOfMonth < 1) {\n+                    instant = iChronology.monthOfYear().add(instant, -1);\n+                    int maxDayOfPreviousMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+                    dayOfMonth += maxDayOfPreviousMonth;\n+                }\n+                int month = iChronology.monthOfYear().get(instant);\n+                newValues[monthIndex] = month;\n+            } else {\n+                int maxDayOfMonthThisMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+                while (dayOfMonth > maxDayOfMonthThisMonth) {\n+                    dayOfMonth -= maxDayOfMonthThisMonth;\n+                    instant = iChronology.monthOfYear().add(instant, 1);\n+                    maxDayOfMonthThisMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+                    int month = iChronology.monthOfYear().get(instant);\n+                    newValues[monthIndex] = month;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+            newValues[i] = dayOfMonth;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = type.getField(iChronology).set(instant, value);\n         }\n     }\n \n+    if (monthBased && dayBased) {\n+        if (monthIndex < dayIndex) {\n+            // set day field first\n+            int newDayOfMonth = newValues[dayIndex];\n+            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+            instant = iChronology.monthOfYear().set(instant, newValues[monthIndex]);\n+        } else if (monthIndex > dayIndex) {\n+            // set month field first\n+            instant = iChronology.monthOfYear().set(instant, newValues[monthIndex]);\n+            int newDayOfMonth = newValues[dayIndex];\n+            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+        } else {\n+            throw new IllegalStateException(\"Month and day indices should not be equal.\");\n+        }\n+    } else if (monthBased) {\n+        instant = iChronology.monthOfYear().set(instant, newValues[monthIndex]);\n+    } else if (dayBased) {\n+        instant = iChronology.dayOfMonth().set(instant, newValues[dayIndex]);\n+    } else {\n+        throw new IllegalStateException(\"Partial must be either month-based or day-based.\");\n+    }\n+\n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "junit.framework.AssertionFailedError: expected:<--01-29> but was:<--03-04>",
    "test_result": "FAIL"
}