{
    "patch": "    // Use Sets to reduce the complexity of contains() calls\n    Set<String> referencedArgNames =\n        referenced.stream()\n                  .filter(v -> v.getParentNode() == function) // The variable must be a parameter\n                  .map(v -> v.getName())\n                  .collect(Collectors.toSet());\n\n    Set<Node> unusedArgs = NodeUtil.findUnusedVars(argList, referencedArgNames);\n\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null && unusedArgs.contains(lastArg)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        unusedArgs.remove(lastArg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d2af11e8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Use Sets to reduce the complexity of contains() calls\n+    Set<String> referencedArgNames =\n+        referenced.stream()\n+                  .filter(v -> v.getParentNode() == function) // The variable must be a parameter\n+                  .map(v -> v.getName())\n+                  .collect(Collectors.toSet());\n+\n+    Set<Node> unusedArgs = NodeUtil.findUnusedVars(argList, referencedArgNames);\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null && unusedArgs.contains(lastArg)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        unusedArgs.remove(lastArg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}