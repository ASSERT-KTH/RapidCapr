{
    "patch": "public double getTypedPercent(List<String> testCases) {\n    int totalTestCases = testCases.size();\n    int typedTestCases = 0;\n\n    for (String testCase : testCases) {\n        String[] parts = testCase.split(\" \");\n        if (parts[0].equals(parts[1])) {\n            typedTestCases++;\n        }\n    }\n\n    double typedPercent;\n\n    if (totalTestCases == 0) {\n        typedPercent = 0;\n    } else {\n        typedPercent = ((double) typedTestCases / totalTestCases) * 100;\n    }\n\n    return typedPercent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5fb5776f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(List<String> testCases) {\n+    int totalTestCases = testCases.size();\n+    int typedTestCases = 0;\n+\n+    for (String testCase : testCases) {\n+        String[] parts = testCase.split(\" \");\n+        if (parts[0].equals(parts[1])) {\n+            typedTestCases++;\n+        }\n+    }\n+\n+    double typedPercent;\n+\n+    if (totalTestCases == 0) {\n+        typedPercent = 0;\n+    } else {\n+        typedPercent = ((double) typedTestCases / totalTestCases) * 100;\n+    }\n+\n+    return typedPercent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}