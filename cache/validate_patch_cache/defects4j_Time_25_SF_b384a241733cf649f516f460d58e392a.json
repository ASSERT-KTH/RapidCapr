{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n    // check if instantLocal is in a transition gap/overlap\n    final boolean isGap = isTransitionGap(initialOffset);\n    final boolean isOverlap = isTransitionOverlap(initialOffset);\n    // if the instant is not in a gap/overlap, return initialOffset\n    if (!isGap && !isOverlap) {\n        return initialOffset;\n    }\n    // if instantLocal is in a gap, find the previous transition and return its offset\n    if (isGap) {\n        long prevTransition = previousTransition(instantLocal);\n        int prevOffset = getOffset(prevTransition);\n        if (prevOffset > initialOffset) {\n            return prevOffset;\n        }\n    }\n    // if instantLocal is in an overlap, find the next transition and determine the correct offset\n    if (isOverlap) {\n        long nextTransition = nextTransition(instantLocal - initialOffset);\n        if (nextTransition == Transition.MIN) {\n            // if there is no next transition, return the current offset\n            return initialOffset;\n        }\n        int nextOffset = getOffset(nextTransition);\n        if (nextOffset > initialOffset) {\n            return initialOffset;\n        }\n        // if the next transition happens at midnight, determine the correct offset\n        if (nextTransition % DateTimeConstants.MILLIS_PER_DAY == 0) {\n            long prevTransition = previousTransition(instantLocal - initialOffset);\n            if (prevTransition == Transition.MIN) {\n                // if there is no previous transition, return the current offset\n                return initialOffset;\n            }\n            int prevOffset = getOffset(prevTransition);\n            if (prevOffset != nextOffset) {\n                // if the offset changes at midnight, return the offset of the later transition\n                return nextOffset;\n            }\n        }\n    }\n    // return the initial offset if all else fails\n    return initialOffset;\n}\n\n// method to check if a given offset is in a transition gap\nprivate boolean isTransitionGap(int offset) {\n    long instant = now().getMillis();\n    long next = nextTransition(instant);\n    if (next == Transition.MIN || instant + offset < next) {\n        return false;\n    }\n    long prev = previousTransition(instant);\n    if (prev == Transition.MIN || instant + offset >= prev) {\n        return false;\n    }\n    return true;\n}\n\n// method to check if a given offset is in a transition overlap\nprivate boolean isTransitionOverlap(int offset) {\n    long instant = now().getMillis();\n    long next = nextTransition(instant);\n    if (next == Transition.MIN || instant + offset < next) {\n        return false;\n    }\n    long prev = previousTransition(instant);\n    if (prev == Transition.MIN || instant + offset > prev) {\n        return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6f240879 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,80 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+    // check if instantLocal is in a transition gap/overlap\n+    final boolean isGap = isTransitionGap(initialOffset);\n+    final boolean isOverlap = isTransitionOverlap(initialOffset);\n+    // if the instant is not in a gap/overlap, return initialOffset\n+    if (!isGap && !isOverlap) {\n+        return initialOffset;\n+    }\n+    // if instantLocal is in a gap, find the previous transition and return its offset\n+    if (isGap) {\n+        long prevTransition = previousTransition(instantLocal);\n+        int prevOffset = getOffset(prevTransition);\n+        if (prevOffset > initialOffset) {\n+            return prevOffset;\n+        }\n+    }\n+    // if instantLocal is in an overlap, find the next transition and determine the correct offset\n+    if (isOverlap) {\n+        long nextTransition = nextTransition(instantLocal - initialOffset);\n+        if (nextTransition == Transition.MIN) {\n+            // if there is no next transition, return the current offset\n+            return initialOffset;\n+        }\n+        int nextOffset = getOffset(nextTransition);\n+        if (nextOffset > initialOffset) {\n+            return initialOffset;\n+        }\n+        // if the next transition happens at midnight, determine the correct offset\n+        if (nextTransition % DateTimeConstants.MILLIS_PER_DAY == 0) {\n+            long prevTransition = previousTransition(instantLocal - initialOffset);\n+            if (prevTransition == Transition.MIN) {\n+                // if there is no previous transition, return the current offset\n+                return initialOffset;\n+            }\n+            int prevOffset = getOffset(prevTransition);\n+            if (prevOffset != nextOffset) {\n+                // if the offset changes at midnight, return the offset of the later transition\n+                return nextOffset;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    // return the initial offset if all else fails\n+    return initialOffset;\n+}\n+\n+// method to check if a given offset is in a transition gap\n+private boolean isTransitionGap(int offset) {\n+    long instant = now().getMillis();\n+    long next = nextTransition(instant);\n+    if (next == Transition.MIN || instant + offset < next) {\n+        return false;\n+    }\n+    long prev = previousTransition(instant);\n+    if (prev == Transition.MIN || instant + offset >= prev) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+// method to check if a given offset is in a transition overlap\n+private boolean isTransitionOverlap(int offset) {\n+    long instant = now().getMillis();\n+    long next = nextTransition(instant);\n+    if (next == Transition.MIN || instant + offset < next) {\n+        return false;\n+    }\n+    long prev = previousTransition(instant);\n+    if (prev == Transition.MIN || instant + offset > prev) {\n+        return false;\n+    }\n+    return true;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}