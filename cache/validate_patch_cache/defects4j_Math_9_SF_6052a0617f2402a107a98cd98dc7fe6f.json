{
    "patch": "        final Vector3D origMinusDir = direction.negate();\n        final double norm = origMinusDir.getNorm();\n        final Vector3D normalizedDir = origMinusDir.scalarMultiply(1/norm);\n        final double dist = zero.dotProduct(normalizedDir);\n        final Vector3D revertedOrigin = zero.add(normalizedDir.scalarMultiply(-2*dist));\n        final Line reverted = new Line(revertedOrigin, origMinusDir);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..0e4607180 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,12 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+        final Vector3D origMinusDir = direction.negate();\n+        final double norm = origMinusDir.getNorm();\n+        final Vector3D normalizedDir = origMinusDir.scalarMultiply(1/norm);\n+        final double dist = zero.dotProduct(normalizedDir);\n+        final Vector3D revertedOrigin = zero.add(normalizedDir.scalarMultiply(-2*dist));\n+        final Line reverted = new Line(revertedOrigin, origMinusDir);\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}