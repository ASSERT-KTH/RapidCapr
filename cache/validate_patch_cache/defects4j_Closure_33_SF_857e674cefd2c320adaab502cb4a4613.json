{
    "patch": "    /**\n     * Matches the constraints of a given object type with the properties of this object.\n     * Records with undeclared properties are inferred as `VOID_TYPE`.\n     *\n     * <p>For example:\n     * <pre><code>\n     *  param constraintObj {{prop: (number|undefined)}}\n     *  function f(constraintObj) {}\n     *  f({});\n     * </code></pre>\n     *\n     * <p>The code block above should modify the object `{}` to `{\\prop: undefined}`.\n     *\n     * @param constraintObj The object type to match constraints with.\n     */\n    public void matchConstraint(ObjectType constraintObj) {\n        if (!hasNominalType() && !isFunctionType()) {\n            return;\n        }\n\n        // Handle the case where the constraint object is a record type.\n        //\n        // param constraintObj {{prop: (number|undefined)}}\n        // function f(constraintObj) {}\n        // f({});\n        //\n        // We want to modify the object literal to match the constraint, by\n        // taking each property on the record and trying to match\n        // properties on this object.\n        if (constraintObj.isRecordType()) {\n            for (String prop : constraintObj.getOwnPropertyNames()) {\n                if (!hasProperty(prop)) {\n                    JSType propType = constraintObj.getPropertyType(prop);\n                    defineInferredProperty(prop,\n                            propType.isUnknownType() ? getNativeType(JSTypeNative.NO_TYPE) : propType,\n                            null);\n                }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..2192911b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,42 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+    /**\n+     * Matches the constraints of a given object type with the properties of this object.\n+     * Records with undeclared properties are inferred as `VOID_TYPE`.\n+     *\n+     * <p>For example:\n+     * <pre><code>\n+     *  param constraintObj {{prop: (number|undefined)}}\n+     *  function f(constraintObj) {}\n+     *  f({});\n+     * </code></pre>\n+     *\n+     * <p>The code block above should modify the object `{}` to `{\\prop: undefined}`.\n+     *\n+     * @param constraintObj The object type to match constraints with.\n+     */\n+    public void matchConstraint(ObjectType constraintObj) {\n+        if (!hasNominalType() && !isFunctionType()) {\n+            return;\n         }\n-      }\n-    }\n-  }\n+\n+        // Handle the case where the constraint object is a record type.\n+        //\n+        // param constraintObj {{prop: (number|undefined)}}\n+        // function f(constraintObj) {}\n+        // f({});\n+        //\n+        // We want to modify the object literal to match the constraint, by\n+        // taking each property on the record and trying to match\n+        // properties on this object.\n+        if (constraintObj.isRecordType()) {\n+            for (String prop : constraintObj.getOwnPropertyNames()) {\n+                if (!hasProperty(prop)) {\n+                    JSType propType = constraintObj.getPropertyType(prop);\n+                    defineInferredProperty(prop,\n+                            propType.isUnknownType() ? getNativeType(JSTypeNative.NO_TYPE) : propType,\n+                            null);\n+                }\n+            }\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}