{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors, or are assigned to prototype attributes, or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        Node functionParent = n.getParent();\n        if (functionParent.getType() == Token.ASSIGN &&\n            functionParent.getFirstChild().getType() == Token.GETPROP) {\n            // Don't traverse functions assigned to prototype attributes.\n            Node lhs = functionParent.getFirstChild();\n            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n        }\n\n        // Don't traverse nested functions, and functions unless they would normally be able to have\n        // a @this annotation associated with them.\n        int parentType = parent.getType();\n        if ((n != t.getModule() && parentType != Token.SCRIPT && parentType != Token.BLOCK) || !canHaveThis(n)) {\n            return false;\n        }\n    } else if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.CATCH) {\n            // Don't traverse catch exceptions.\n            return false;\n        } else if (parentType == Token.ASSIGN) {\n            Node lhs = parent.getFirstChild();\n            if (n == lhs) {\n                if (assignLhsChild == null) {\n                    // Always traverse the left side of the assignment. To handle nested assignments properly\n                    // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n                    assignLhsChild = lhs;\n                } else if (lhs == assignLhsChild) {\n                    // If the current lhs of the assignment is the same as the outer lhs, then we are at a leaf node.\n                    return false;\n                }\n            } else {\n                Node grandparent = parent.getParent();\n                if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n                    // Don't traverse assignments to prototype properties or subproperties.\n                    return false;\n                } else if (lhs.getQualifiedName() != null &&\n                    (lhs.getQualifiedName().contains(\".prototype.\") || (grandparent.getType() == Token.CALL &&\n                        parent == grandparent.getFirstChild() && lhs == grandparent.getLastChild() &&\n                        lhs.getQualifiedName().equals(\"goog.inherits\")))) {\n                    // Don't traverse assignments to prototype properties or subproperties.\n                    // Don't traverse the base constructor in a goog.inherits call.\n                    return false;\n                }\n            }\n        } else if (parentType == Token.NAME && parent.getType() == Token.FUNCTION) {\n            int grandparentType = parent.getParent().getType();\n            if (grandparentType == Token.ASSIGN &&\n                parent.getFirstChild().getType() == Token.GETPROP) {\n                // Don't traverse functions assigned to prototype attributes.\n                Node lhs = parent.getFirstChild();\n                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b3b193c9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,74 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Don't traverse functions that are constructors, or are assigned to prototype attributes, or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n+        Node functionParent = n.getParent();\n+        if (functionParent.getType() == Token.ASSIGN &&\n+            functionParent.getFirstChild().getType() == Token.GETPROP) {\n+            // Don't traverse functions assigned to prototype attributes.\n+            Node lhs = functionParent.getFirstChild();\n+            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+\n+        // Don't traverse nested functions, and functions unless they would normally be able to have\n+        // a @this annotation associated with them.\n+        int parentType = parent.getType();\n+        if ((n != t.getModule() && parentType != Token.SCRIPT && parentType != Token.BLOCK) || !canHaveThis(n)) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+    } else if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.CATCH) {\n+            // Don't traverse catch exceptions.\n             return false;\n-          }\n-      }\n+        } else if (parentType == Token.ASSIGN) {\n+            Node lhs = parent.getFirstChild();\n+            if (n == lhs) {\n+                if (assignLhsChild == null) {\n+                    // Always traverse the left side of the assignment. To handle nested assignments properly\n+                    // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n+                    assignLhsChild = lhs;\n+                } else if (lhs == assignLhsChild) {\n+                    // If the current lhs of the assignment is the same as the outer lhs, then we are at a leaf node.\n+                    return false;\n+                }\n+            } else {\n+                Node grandparent = parent.getParent();\n+                if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                    // Don't traverse assignments to prototype properties or subproperties.\n+                    return false;\n+                } else if (lhs.getQualifiedName() != null &&\n+                    (lhs.getQualifiedName().contains(\".prototype.\") || (grandparent.getType() == Token.CALL &&\n+                        parent == grandparent.getFirstChild() && lhs == grandparent.getLastChild() &&\n+                        lhs.getQualifiedName().equals(\"goog.inherits\")))) {\n+                    // Don't traverse assignments to prototype properties or subproperties.\n+                    // Don't traverse the base constructor in a goog.inherits call.\n+                    return false;\n+                }\n+            }\n+        } else if (parentType == Token.NAME && parent.getType() == Token.FUNCTION) {\n+            int grandparentType = parent.getParent().getType();\n+            if (grandparentType == Token.ASSIGN &&\n+                parent.getFirstChild().getType() == Token.GETPROP) {\n+                // Don't traverse functions assigned to prototype attributes.\n+                Node lhs = parent.getFirstChild();\n+                if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+            }\n+        }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: incomparable types: Node and JSModule",
    "test_result": "ERROR"
}