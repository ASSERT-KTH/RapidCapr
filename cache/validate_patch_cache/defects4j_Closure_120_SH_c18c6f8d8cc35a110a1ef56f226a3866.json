{
    "patch": "boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n        return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    boolean inLoop = false;\n    for (BasicBlock block = ref.getBasicBlock();\n         block != null; block = block.getParent()) {\n        if (block.isFunction) {\n            break;\n        } else if (block.isLoop) {\n            inLoop = true;\n            break;\n        }\n    }\n    if (inLoop) {\n        return false;\n    }\n    // Make sure there are no other assignments after this one.\n    for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n        if (references.get(i).isAssignmentToSameName()) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8a9d08b6 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,34 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+        return false;\n+    }\n+\n+    // Make sure this assignment is not in a loop.\n+    boolean inLoop = false;\n+    for (BasicBlock block = ref.getBasicBlock();\n+         block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+            break;\n+        } else if (block.isLoop) {\n+            inLoop = true;\n+            break;\n+        }\n+    }\n+    if (inLoop) {\n+        return false;\n+    }\n+    // Make sure there are no other assignments after this one.\n+    for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n+        if (references.get(i).isAssignmentToSameName()) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}