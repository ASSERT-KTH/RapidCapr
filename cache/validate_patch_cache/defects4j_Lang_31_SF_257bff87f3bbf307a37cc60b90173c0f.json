{
    "patch": "public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLen = sequence.length();\n    int searchLen = searchChars.length;\n    int max = Character.MAX_CODE_POINT;\n    if (searchLen == 1 && Character.isBmpCodePoint(searchChars[0])) {\n        // slightly faster\n        char searchChar = searchChars[0];\n        for (int i = 0; i < strLen; i++) {\n            if (sequence.charAt(i) == searchChar) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (searchLen <= 0) {\n        return false;\n    }\n    if (searchLen <= 2) {\n        // special cases for performance\n        char searchChar1 = searchChars[0];\n        char searchChar2 = searchChars[1 < searchLen ? 1 : 0];\n        for (int i = 0; i < strLen; i++) {\n            char ch = sequence.charAt(i);\n            if (ch == searchChar1 || ch == searchChar2) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (searchLen <= max) {\n        // general case, use a HashSet for better performance\n        Set<Character> searchSet = new HashSet<>(Arrays.asList(ArrayUtils.toObject(searchChars)));\n        for (int i = 0; i < strLen; i++) {\n            if (searchSet.contains(sequence.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        // very long searchChars array, use a BitSet for better performance\n        BitSet searchSet = new BitSet(max);\n        for (char c : searchChars) {\n            searchSet.set(c);\n        }\n        for (int i = 0; i < strLen; i++) {\n            if (searchSet.get(sequence.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..dca42680 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,61 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLen = sequence.length();\n+    int searchLen = searchChars.length;\n+    int max = Character.MAX_CODE_POINT;\n+    if (searchLen == 1 && Character.isBmpCodePoint(searchChars[0])) {\n+        // slightly faster\n+        char searchChar = searchChars[0];\n+        for (int i = 0; i < strLen; i++) {\n+            if (sequence.charAt(i) == searchChar) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    if (searchLen <= 0) {\n+        return false;\n+    }\n+    if (searchLen <= 2) {\n+        // special cases for performance\n+        char searchChar1 = searchChars[0];\n+        char searchChar2 = searchChars[1 < searchLen ? 1 : 0];\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = sequence.charAt(i);\n+            if (ch == searchChar1 || ch == searchChar2) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    if (searchLen <= max) {\n+        // general case, use a HashSet for better performance\n+        Set<Character> searchSet = new HashSet<>(Arrays.asList(ArrayUtils.toObject(searchChars)));\n+        for (int i = 0; i < strLen; i++) {\n+            if (searchSet.contains(sequence.charAt(i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    } else {\n+        // very long searchChars array, use a BitSet for better performance\n+        BitSet searchSet = new BitSet(max);\n+        for (char c : searchChars) {\n+            searchSet.set(c);\n+        }\n+        for (int i = 0; i < strLen; i++) {\n+            if (searchSet.get(sequence.charAt(i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}