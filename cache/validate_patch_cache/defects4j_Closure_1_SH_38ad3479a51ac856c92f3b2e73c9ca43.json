{
    "patch": "    NodeTraversal.traverse(compiler, function.getFirstChild(), new NodeScanningCallback(referenced));\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node curArg = argList.getFirstChild();\n      while (curArg != null && !referenced.contains(fnScope.getVar(curArg.getString()))) {\n        Node nextArg = curArg.getNext();\n        argList.removeChild(curArg);\n        curArg = nextArg;\n        compiler.reportCodeChange();\n      }\n      while (curArg != null) {\n        Node nextArg = curArg.getNext();\n        if (!referenced.contains(fnScope.getVar(curArg.getString()))) {\n          argList.removeChild(curArg);\n          compiler.reportCodeChange();\n        }\n        curArg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9c11eb66 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    NodeTraversal.traverse(compiler, function.getFirstChild(), new NodeScanningCallback(referenced));\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node curArg = argList.getFirstChild();\n+      while (curArg != null && !referenced.contains(fnScope.getVar(curArg.getString()))) {\n+        Node nextArg = curArg.getNext();\n+        argList.removeChild(curArg);\n+        curArg = nextArg;\n+        compiler.reportCodeChange();\n+      }\n+      while (curArg != null) {\n+        Node nextArg = curArg.getNext();\n+        if (!referenced.contains(fnScope.getVar(curArg.getString()))) {\n+          argList.removeChild(curArg);\n+          compiler.reportCodeChange();\n+        }\n+        curArg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}