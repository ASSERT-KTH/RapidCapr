{
    "patch": "    protected double getInitialDomain(double p) {\n        double d = getDenominatorDegreesOfFreedom();\n        double ret;\n        if (d > 2.0) {\n            // use mean\n            ret = d / (d - 2.0);\n        } else if (d == 2.0) {\n            // use median\n            ret = 1.0;\n        } else {\n            throw new MathIllegalArgumentException(\n                    LocalizedFormats.NUMBER_OF_DEGREES_OF_FREEDOM,\n                    d);\n        }\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..3ddb321fe 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -141,10 +141,19 @@ public class FDistributionImpl\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n-        double ret;\n         double d = getDenominatorDegreesOfFreedom();\n+        double ret;\n+        if (d > 2.0) {\n             // use mean\n             ret = d / (d - 2.0);\n+        } else if (d == 2.0) {\n+            // use median\n+            ret = 1.0;\n+        } else {\n+            throw new MathIllegalArgumentException(\n+                    LocalizedFormats.NUMBER_OF_DEGREES_OF_FREEDOM,\n+                    d);\n+        }\n         return ret;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}