{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (mockedProxyType.isAnonymousClass()) {\n            // Anonymous classes have no constructor, so we use an Object constructor instead.\n            mockInstance = mockedProxyType.newInstance();\n        } else if (mockedProxyType.isMemberClass()) {\n            // For inner classes, we use a constructor that takes the outer instance as first argument.\n            Class<?> outerClass = mockedProxyType.getEnclosingClass();\n            Constructor<?> outerClassConstructor = outerClass.getDeclaredConstructor();\n            outerClassConstructor.setAccessible(true);\n            Object outerInstance = outerClassConstructor.newInstance();\n            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(outerClass, MockCreationSettings.class, MockHandler.class);\n            constructor.setAccessible(true);\n            mockInstance = (T) constructor.newInstance(outerInstance, settings, asInternalMockHandler(handler));\n        } else {\n            // For all other classes, we can just use the default constructor.\n            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n            constructor.setAccessible(true);\n            mockInstance = (T) constructor.newInstance(settings, asInternalMockHandler(handler));\n        }\n    } catch (Exception e) {\n        throw new MockitoException(\"Failed to create mock instance\", e);\n    }\n    \n    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..bd28fde4d 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,43 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance = null;\n+    try {\n+        if (mockedProxyType.isAnonymousClass()) {\n+            // Anonymous classes have no constructor, so we use an Object constructor instead.\n+            mockInstance = mockedProxyType.newInstance();\n+        } else if (mockedProxyType.isMemberClass()) {\n+            // For inner classes, we use a constructor that takes the outer instance as first argument.\n+            Class<?> outerClass = mockedProxyType.getEnclosingClass();\n+            Constructor<?> outerClassConstructor = outerClass.getDeclaredConstructor();\n+            outerClassConstructor.setAccessible(true);\n+            Object outerInstance = outerClassConstructor.newInstance();\n+            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(outerClass, MockCreationSettings.class, MockHandler.class);\n+            constructor.setAccessible(true);\n+            mockInstance = (T) constructor.newInstance(outerInstance, settings, asInternalMockHandler(handler));\n+        } else {\n+            // For all other classes, we can just use the default constructor.\n+            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n+            constructor.setAccessible(true);\n+            mockInstance = (T) constructor.newInstance(settings, asInternalMockHandler(handler));\n         }\n+    } catch (Exception e) {\n+        throw new MockitoException(\"Failed to create mock instance\", e);\n     }\n+    \n+    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+\n+    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Failed to create mock instance",
    "test_result": "FAIL"
}