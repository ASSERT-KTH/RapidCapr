{
    "patch": "public int compare(EventState es0, EventState es1) {\n    return Double.compare(es0.getEventTime(), es1.getEventTime());\n}\n\npublic void doEventsHandling(final double t, final double[] y) throws MaxCountExceededException {\n    boolean isLastStep = false;\n    final double[] y0 = y.clone();\n    final double previousT = integrator.getCurrentTime();\n    eventsHandlersManager.clear();\n    final List<EventState> occurringEvents = new ArrayList<EventState>();\n    final List<EventState> eventsStates = eventsStatesManager.getEventsStates();\n    for (final EventState state : eventsStates) {\n        state.reinitializeBegin(getStepStart(), y0, getStepSize());\n        if (state.evaluateStep(getStepStart(), y)) {\n            // the event occurs during the current step\n            occuringEvents.add(state);\n        }\n    }\n    final double stepEnd = getStepStart() + getStepSize();\n    while (!occurringEvents.isEmpty()) {\n        // handle the chronologically first event\n        EventState currentEvent = null;\n        int currentEventIndex = -1;\n        double firstEventTime = Double.NaN;\n        for (int i = 0; i < occurringEvents.size(); ++i) {\n            final EventState event = occurringEvents.get(i);\n            if (Double.isNaN(firstEventTime) || event.getEventTime() < firstEventTime) {\n                currentEvent = event;\n                currentEventIndex = i;\n                firstEventTime = currentEvent.getEventTime();\n            }\n        }\n        if (firstEventTime >= stepEnd) {\n            // the event is not detected to occur during the next step, we can leave\n            break;\n        }\n        occurringEvents.remove(currentEventIndex);\n        // restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        setSoftPreviousTime(previousT);\n        setSoftCurrentTime(eventT);\n\n        // get state at event time\n        Interpolator interpolator = getInterpolator();\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n           handler.handleStep(this);\n        }\n\n        // handle event\n        integrator.eventOccurred(currentEvent, isLastStep);\n\n        // handle the remaining part of the step after the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(this);\n        }\n    }\n    for (final StepHandler handler : stepHandlers) {\n        handler.finish(this);\n    }\n    integrator.setStepSize(getStepSize());\n    setSoftPreviousTime(t);\n    setSoftCurrentTime(t);\n    if (!isLastStep) {\n        // integrate remaining part of the step\n        integrator.integrate(new ExpandableStatefulODE(this), t + getStepSize(), y);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..24456bd4f 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,81 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n+public int compare(EventState es0, EventState es1) {\n+    return Double.compare(es0.getEventTime(), es1.getEventTime());\n+}\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n+public void doEventsHandling(final double t, final double[] y) throws MaxCountExceededException {\n+    boolean isLastStep = false;\n+    final double[] y0 = y.clone();\n+    final double previousT = integrator.getCurrentTime();\n+    eventsHandlersManager.clear();\n+    final List<EventState> occurringEvents = new ArrayList<EventState>();\n+    final List<EventState> eventsStates = eventsStatesManager.getEventsStates();\n+    for (final EventState state : eventsStates) {\n+        state.reinitializeBegin(getStepStart(), y0, getStepSize());\n+        if (state.evaluateStep(getStepStart(), y)) {\n+            // the event occurs during the current step\n+            occuringEvents.add(state);\n+        }\n+    }\n+    final double stepEnd = getStepStart() + getStepSize();\n+    while (!occurringEvents.isEmpty()) {\n+        // handle the chronologically first event\n+        EventState currentEvent = null;\n+        int currentEventIndex = -1;\n+        double firstEventTime = Double.NaN;\n+        for (int i = 0; i < occurringEvents.size(); ++i) {\n+            final EventState event = occurringEvents.get(i);\n+            if (Double.isNaN(firstEventTime) || event.getEventTime() < firstEventTime) {\n+                currentEvent = event;\n+                currentEventIndex = i;\n+                firstEventTime = currentEvent.getEventTime();\n             }\n+        }\n+        if (firstEventTime >= stepEnd) {\n+            // the event is not detected to occur during the next step, we can leave\n+            break;\n+        }\n+        occurringEvents.remove(currentEventIndex);\n+        // restrict the interpolator to the first part of the step, up to the event\n+        final double eventT = currentEvent.getEventTime();\n+        setSoftPreviousTime(previousT);\n+        setSoftCurrentTime(eventT);\n+\n+        // get state at event time\n+        Interpolator interpolator = getInterpolator();\n+        interpolator.setInterpolatedTime(eventT);\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n+\n+        // advance all event states to current time\n+        currentEvent.stepAccepted(eventT, eventY);\n+        isLastStep = currentEvent.stop();\n+\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+           handler.handleStep(this);\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        // handle event\n+        integrator.eventOccurred(currentEvent, isLastStep);\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        // handle the remaining part of the step after the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(this);\n+        }\n+    }\n+    for (final StepHandler handler : stepHandlers) {\n+        handler.finish(this);\n+    }\n+    integrator.setStepSize(getStepSize());\n+    setSoftPreviousTime(t);\n+    setSoftCurrentTime(t);\n+    if (!isLastStep) {\n+        // integrate remaining part of the step\n+        integrator.integrate(new ExpandableStatefulODE(this), t + getStepSize(), y);\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}