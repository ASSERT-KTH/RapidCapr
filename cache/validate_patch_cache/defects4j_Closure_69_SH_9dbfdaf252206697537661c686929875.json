{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      if (thisType.isNoResolvedType()) {\n        // Do nothing for non-existent or ambiguous 'this' types.\n      } else if (thisType.isUnionType()) {\n        // Check that all possible 'this' types are either subtypes of Object or are\n        // callable if called through a GETPROP or GETELEM.\n        for (JSType altType : thisType.toMaybeUnionType().getAlternates()) {\n          checkThisType(t, n, altType);\n        }\n      } else {\n        checkThisType(t, n, thisType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ea606a38 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType.isNoResolvedType()) {\n+        // Do nothing for non-existent or ambiguous 'this' types.\n+      } else if (thisType.isUnionType()) {\n+        // Check that all possible 'this' types are either subtypes of Object or are\n+        // callable if called through a GETPROP or GETELEM.\n+        for (JSType altType : thisType.toMaybeUnionType().getAlternates()) {\n+          checkThisType(t, n, altType);\n+        }\n+      } else {\n+        checkThisType(t, n, thisType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}