{
    "patch": "private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          for (Node astParameter : astParameters.children()) {\n            Node jsDocParameter = jsDocParameters.getFirstChild();\n            while (jsDocParameter != null && jsDocParameter.getToken() != JSDocToken.ELLIPSIS) {\n              defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n              jsDocParameter = jsDocParameter.getNext();\n            }\n            if (jsDocParameter != null && jsDocParameter.getToken() == JSDocToken.ELLIPSIS) {\n              defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..a16f7b1d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,21 +1731,22 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n+private void declareArguments(Node functionNode) {\n       Node astParameters = functionNode.getFirstChild().getNext();\n       Node body = astParameters.getNext();\n       FunctionType functionType = (FunctionType) functionNode.getJSType();\n       if (functionType != null) {\n         Node jsDocParameters = functionType.getParametersNode();\n         if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n           for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n+            Node jsDocParameter = jsDocParameters.getFirstChild();\n+            while (jsDocParameter != null && jsDocParameter.getToken() != JSDocToken.ELLIPSIS) {\n               defineSlot(astParameter, functionNode,\n                   jsDocParameter.getJSType(), true);\n               jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+            }\n+            if (jsDocParameter != null && jsDocParameter.getToken() == JSDocToken.ELLIPSIS) {\n+              defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n             }\n           }\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}