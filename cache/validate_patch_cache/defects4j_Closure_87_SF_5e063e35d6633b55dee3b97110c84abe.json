{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      \n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        if (maybeExpr.getType() == Token.VOID || maybeExpr.getType() == Token.TRUE || maybeExpr.getType() == Token.FALSE) {\n          // It is an expression statement with a nontrivial value.\n          return true;\n        } else if (maybeExpr.getType() == Token.CALL || maybeExpr.getType() == Token.NEW) {\n          // It is a call or a new expression.\n          return true;\n        }\n      }\n\n      if (NodeUtil.mayBeString(maybeExpr)) {\n        // It may be a string expression.\n        return true;\n      }\n      \n      if (maybeExpr.getType() == Token.RETURN\n          && maybeExpr.hasOneChild()\n          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n        // It is a return statement with an expression.\n        return !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..09ba0039 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,36 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      \n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        if (maybeExpr.getType() == Token.VOID || maybeExpr.getType() == Token.TRUE || maybeExpr.getType() == Token.FALSE) {\n+          // It is an expression statement with a nontrivial value.\n+          return true;\n+        } else if (maybeExpr.getType() == Token.CALL || maybeExpr.getType() == Token.NEW) {\n+          // It is a call or a new expression.\n+          return true;\n+        }\n       }\n-    }\n \n-    return false;\n+      if (NodeUtil.mayBeString(maybeExpr)) {\n+        // It may be a string expression.\n+        return true;\n+      }\n+      \n+      if (maybeExpr.getType() == Token.RETURN\n+          && maybeExpr.hasOneChild()\n+          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+        // It is a return statement with an expression.\n+        return !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n+      }\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}