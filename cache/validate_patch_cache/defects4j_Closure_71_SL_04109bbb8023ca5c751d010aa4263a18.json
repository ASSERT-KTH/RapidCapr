{
    "patch": "boolean isOverride = false;\nif(NodeUtil.isAssignmentOp(parent.getParent())) {\n  Node lvalue = parent.getParent().getFirstChild();\n  if (lvalue != getprop) {\n    // If we don't have a simple assignment to a property, then\n    // we aren't overriding it. For example,\n    // window['prop'] = val;\n    // doesn't override the 'prop' property of window.\n    //\n    // This also handles assignments to non-properties like\n    // arrays or map keys, because the parser treats them as\n    // GETELEMs and not GETPROPs.\n    return;\n  }\n  Node rvalue = parent.getParent().getLastChild();\n  ObjectType superType = objectType.getImplicitPrototype();\n  if (superType != null) {\n    JSDocInfo superDocInfo = null;\n    for (; superType != null; superType = superType.getImplicitPrototype()) {\n      superDocInfo = superType.getOwnPropertyJSDocInfo(propertyName);\n      if (superDocInfo != null &&\n          superDocInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (superDocInfo != null && !superType.isFunctionType()) {\n      // Check if there's a matching property on the superclass.\n      ObjectType objectTypeRval = (rvalue == null) ? null :\n          ObjectType.cast(dereference(rvalue.getJSType()));\n      String className = objectType.getReferenceName();\n      String ownerClassName = superType.getReferenceName();\n      if (objectTypeRval != null &&\n          !objectTypeRval.isSubtype(superType) &&\n          !ownerClassName.equals(className)) {\n        compiler.report(\n            t.makeError(getprop, INVALID_PROP_OVERRIDE,\n                        propertyName, className, ownerClassName));\n        return;\n      }\n      isOverride = true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..ffc3bac5 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,50 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false;\n+if(NodeUtil.isAssignmentOp(parent.getParent())) {\n+  Node lvalue = parent.getParent().getFirstChild();\n+  if (lvalue != getprop) {\n+    // If we don't have a simple assignment to a property, then\n+    // we aren't overriding it. For example,\n+    // window['prop'] = val;\n+    // doesn't override the 'prop' property of window.\n+    //\n+    // This also handles assignments to non-properties like\n+    // arrays or map keys, because the parser treats them as\n+    // GETELEMs and not GETPROPs.\n+    return;\n+  }\n+  Node rvalue = parent.getParent().getLastChild();\n+  ObjectType superType = objectType.getImplicitPrototype();\n+  if (superType != null) {\n+    JSDocInfo superDocInfo = null;\n+    for (; superType != null; superType = superType.getImplicitPrototype()) {\n+      superDocInfo = superType.getOwnPropertyJSDocInfo(propertyName);\n+      if (superDocInfo != null &&\n+          superDocInfo.getVisibility() != Visibility.INHERITED) {\n+        break;\n+      }\n+    }\n+\n+    if (superDocInfo != null && !superType.isFunctionType()) {\n+      // Check if there's a matching property on the superclass.\n+      ObjectType objectTypeRval = (rvalue == null) ? null :\n+          ObjectType.cast(dereference(rvalue.getJSType()));\n+      String className = objectType.getReferenceName();\n+      String ownerClassName = superType.getReferenceName();\n+      if (objectTypeRval != null &&\n+          !objectTypeRval.isSubtype(superType) &&\n+          !ownerClassName.equals(className)) {\n+        compiler.report(\n+            t.makeError(getprop, INVALID_PROP_OVERRIDE,\n+                        propertyName, className, ownerClassName));\n+        return;\n+      }\n+      isOverride = true;\n+    }\n+  }\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}