{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    if (Double.isNaN(value)) {\n        missing.increment(1);\n    } else {\n        if (meanImpl == null) {\n            // Initialize the mean with the first value\n            meanImpl = new Mean();\n            meanImpl.increment(value);\n        } else if (!(meanImpl instanceof Mean)) {\n            // Calculate mean using Welford's method\n            double currentMean = meanImpl.getResult();\n            double newMean = currentMean + (value - currentMean) / (n + 1);\n            meanImpl.increment(newMean - currentMean);\n        } else {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance) && !(varianceImpl instanceof MeanVarianceHolder)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..5adfe3adc 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,37 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    if (Double.isNaN(value)) {\n+        missing.increment(1);\n+    } else {\n+        if (meanImpl == null) {\n+            // Initialize the mean with the first value\n+            meanImpl = new Mean();\n+            meanImpl.increment(value);\n+        } else if (!(meanImpl instanceof Mean)) {\n+            // Calculate mean using Welford's method\n+            double currentMean = meanImpl.getResult();\n+            double newMean = currentMean + (value - currentMean) / (n + 1);\n+            meanImpl.increment(newMean - currentMean);\n+        } else {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+        if (!(varianceImpl instanceof Variance) && !(varianceImpl instanceof MeanVarianceHolder)) {\n             varianceImpl.increment(value);\n         }\n         if (!(geoMeanImpl instanceof GeometricMean)) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}