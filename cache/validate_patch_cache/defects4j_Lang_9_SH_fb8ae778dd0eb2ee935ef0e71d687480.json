{
    "patch": "// Add last strategy\nif (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\n\n// If no strategies to parse return null\nif (collector.isEmpty()) {\n    strategies = new Strategy[0];\n    parsePattern = null;\n    currentFormatField = null;\n    return;\n}\n\n// Compile regex and strategies\nstrategies = collector.toArray(new Strategy[collector.size()]);\nparsePattern = Pattern.compile(regex.toString());\ncurrentFormatField = null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..6f2427f0 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,23 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+// Add last strategy\n+if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+\n+// If no strategies to parse return null\n+if (collector.isEmpty()) {\n+    strategies = new Strategy[0];\n+    parsePattern = null;\n+    currentFormatField = null;\n+    return;\n+}\n+\n+// Compile regex and strategies\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+parsePattern = Pattern.compile(regex.toString());\n+currentFormatField = null;\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}