{
    "patch": "if (result == null) {\n  // If both types are objects, return NO_OBJECT_TYPE,\n  // Otherwise, return NO_TYPE.\n  if (this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  } else {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n} else {\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..e62333ba 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,17 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+if (result == null) {\n+  // If both types are objects, return NO_OBJECT_TYPE,\n+  // Otherwise, return NO_TYPE.\n+  if (this.isObject() && that.isObject()) {\n+    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+  } else {\n+    return getNativeType(JSTypeNative.NO_TYPE);\n+  }\n+} else {\n+  return result;\n+}\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}