{
    "patch": "// We only want to match constraints on anonymous types.\nif (constraintObj.isNominalType() && !constraintObj.hasDisplayName()) {\n    if (constraintObj.hasReferenceName() || constraintObj.isFunctionType() || constraintObj.isInterface()) {\n        return;\n    }\n} else {\n    return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..b78bcb3a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,14 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types.\n+if (constraintObj.isNominalType() && !constraintObj.hasDisplayName()) {\n+    if (constraintObj.hasReferenceName() || constraintObj.isFunctionType() || constraintObj.isInterface()) {\n+        return;\n+    }\n+} else {\n+    return;\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}