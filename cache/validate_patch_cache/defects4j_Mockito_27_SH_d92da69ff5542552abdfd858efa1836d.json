{
    "patch": "    @SuppressWarnings(\"unchecked\")\n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(RETURNS_DEFAULTS));\n        \n        if (mock instanceof Factory && Proxy.isProxyClass(mock.getClass())) {\n            ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n        } else if (mock instanceof MockitoJava8EnabledExtensions) {\n            ((MockitoJava8EnabledExtensions) mock).withSettings().spiedInstance(Mockito.mock((Class<T>) mock.getClass(), withSettings().defaultAnswer(RETURNS_DEFAULTS)));\n        } else if (mock instanceof InitializedSpy) {\n            final InitializedSpy<T> initializedSpy = (InitializedSpy<T>) mock;\n            T mockInstance = Mockito.mock((Class<T>) initializedSpy.getMockCreationSettings().getTypeToMock(), withSettings().defaultAnswer(RETURNS_DEFAULTS));\n            initializedSpy.initMock(mockInstance);\n        } else {\n            Field f;\n            try {\n                f = mock.getClass().getDeclaredField(\"mockHandler\");\n                f.setAccessible(true);\n                f.set(mock, newMockHandler);\n            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..dac707b97 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,33 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+        \n+        if (mock instanceof Factory && Proxy.isProxyClass(mock.getClass())) {\n+            ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n+        } else if (mock instanceof MockitoJava8EnabledExtensions) {\n+            ((MockitoJava8EnabledExtensions) mock).withSettings().spiedInstance(Mockito.mock((Class<T>) mock.getClass(), withSettings().defaultAnswer(RETURNS_DEFAULTS)));\n+        } else if (mock instanceof InitializedSpy) {\n+            final InitializedSpy<T> initializedSpy = (InitializedSpy<T>) mock;\n+            T mockInstance = Mockito.mock((Class<T>) initializedSpy.getMockCreationSettings().getTypeToMock(), withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+            initializedSpy.initMock(mockInstance);\n+        } else {\n+            Field f;\n+            try {\n+                f = mock.getClass().getDeclaredField(\"mockHandler\");\n+                f.setAccessible(true);\n+                f.set(mock, newMockHandler);\n+            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}