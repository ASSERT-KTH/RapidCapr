{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n        Name name = functionNode.getFunctionName();\n        Node node = newNode(Token.FUNCTION);\n        Node newName = transform(name);\n\n        // Check if function is unnamed\n        boolean isUnnamedFunction = name == null || \"\".equals(name.getIdentifier());\n        if (isUnnamedFunction) {\n            name = new Name();\n            newName.setLineno(functionNode.getLineno());\n            // Compute position of the opening parenthesis, by including the length of the 'function' keyword and the\n            // length of the parameters.\n            int lpPos = functionNode.getPosition() + \"function\".length();\n            if (!functionNode.getParams().isEmpty()) {\n                AstNode firstParam = functionNode.getParams().get(0);\n                lpPos = firstParam.getPosition();\n            }\n            newName.setCharno(position2Charno(lpPos));\n        }\n\n        node.addChildToBack(transform(name));\n        Node lp = newNode(Token.LP);\n        int lparenCharNo = functionNode.getPosition() + functionNode.getLength() - 1;\n        if (functionNode.getFirstInlineComment() != null) {\n            // The comment must go before the arguments.\n            int commentCharNo = functionNode.getFirstInlineComment().getPosition();\n            lp.addChildrenToFront(createCommentsBeforeAndAfterSource(\n                    commentCharNo, functionNode.getLp(), false));\n            lparenCharNo = commentCharNo + 1;\n        }\n        lp.setLineno(name.getLineno());\n        lp.setCharno(position2Charno(lparenCharNo));\n        for (AstNode param : functionNode.getParams()) {\n            lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n\n        Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n\n        return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..09473199 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,50 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+        Name name = functionNode.getFunctionName();\n+        Node node = newNode(Token.FUNCTION);\n+        Node newName = transform(name);\n+\n+        // Check if function is unnamed\n+        boolean isUnnamedFunction = name == null || \"\".equals(name.getIdentifier());\n+        if (isUnnamedFunction) {\n+            name = new Name();\n+            newName.setLineno(functionNode.getLineno());\n+            // Compute position of the opening parenthesis, by including the length of the 'function' keyword and the\n+            // length of the parameters.\n+            int lpPos = functionNode.getPosition() + \"function\".length();\n+            if (!functionNode.getParams().isEmpty()) {\n+                AstNode firstParam = functionNode.getParams().get(0);\n+                lpPos = firstParam.getPosition();\n+            }\n+            newName.setCharno(position2Charno(lpPos));\n+        }\n+\n+        node.addChildToBack(transform(name));\n+        Node lp = newNode(Token.LP);\n+        int lparenCharNo = functionNode.getPosition() + functionNode.getLength() - 1;\n+        if (functionNode.getFirstInlineComment() != null) {\n+            // The comment must go before the arguments.\n+            int commentCharNo = functionNode.getFirstInlineComment().getPosition();\n+            lp.addChildrenToFront(createCommentsBeforeAndAfterSource(\n+                    commentCharNo, functionNode.getLp(), false));\n+            lparenCharNo = commentCharNo + 1;\n+        }\n+        lp.setLineno(name.getLineno());\n+        lp.setCharno(position2Charno(lparenCharNo));\n+        for (AstNode param : functionNode.getParams()) {\n+            lp.addChildToBack(transform(param));\n+        }\n+        node.addChildToBack(lp);\n+\n+        Node bodyNode = transform(functionNode.getBody());\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+\n+        return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}