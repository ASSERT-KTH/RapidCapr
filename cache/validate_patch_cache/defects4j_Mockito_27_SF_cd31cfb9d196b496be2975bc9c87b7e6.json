{
    "patch": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> void resetMock(T mock) {\n    try {\n        // get the invocation interceptor for the mock\n        ObjectWriter objectWriter = null;\n        Object interceptorsField = FieldReader.field(\"CGLIB$CALLBACK_0\").ofType(Object.class).in(mock).read();\n        if (interceptorsField instanceof FieldInterceptor) {\n            objectWriter = FieldReader.field(\"fieldWriter\").ofType(ObjectWriter.class).in(interceptorsField).read();\n        } else if (interceptorsField instanceof InvocationHandlerAdapter) {\n            objectWriter = FieldReader.field(\"fieldWriter\").ofType(ObjectWriter.class).in(\n                    FieldReader.field(\"nextHandler\").ofType(Object.class).in(interceptorsField).read()).read();\n        }\n        MethodInterceptorFilter oldFilter = null;\n        List<Callback> callbacks = objectWriter.getCallbacks();\n        for (Callback callback : callbacks) {\n            if (callback instanceof MethodInterceptorFilter) {\n                oldFilter = (MethodInterceptorFilter) callback;\n                break;\n            }\n        }\n        if (oldFilter == null) {\n            throw new RuntimeException(\"Unable to find method interceptor filter\");\n        }\n\n        // create a new method interceptor filter and set it as the invocation interceptor\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldFilter.getMockHandler());\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        oldFilter.setMockHandler(newMockHandler);\n        oldFilter.setDelegate(newFilter);\n\n        // check if the mock has a mockito mock settings object; if so, update it to use the new defaults\n        Field settingsField = mock.getClass().getDeclaredField(\"mockitoInterceptorSettings\");\n        settingsField.setAccessible(true);\n        Object settingsObject = settingsField.get(mock);\n        if (settingsObject instanceof MockSettingsImpl) {\n            ((MockSettingsImpl) settingsObject).defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n        }\n\n    } catch (Exception e) {\n        throw new RuntimeException(\"Failed to reset mock\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ec1c75fa0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,49 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+public <T> void resetMock(T mock) {\n+    try {\n+        // get the invocation interceptor for the mock\n+        ObjectWriter objectWriter = null;\n+        Object interceptorsField = FieldReader.field(\"CGLIB$CALLBACK_0\").ofType(Object.class).in(mock).read();\n+        if (interceptorsField instanceof FieldInterceptor) {\n+            objectWriter = FieldReader.field(\"fieldWriter\").ofType(ObjectWriter.class).in(interceptorsField).read();\n+        } else if (interceptorsField instanceof InvocationHandlerAdapter) {\n+            objectWriter = FieldReader.field(\"fieldWriter\").ofType(ObjectWriter.class).in(\n+                    FieldReader.field(\"nextHandler\").ofType(Object.class).in(interceptorsField).read()).read();\n+        }\n+        MethodInterceptorFilter oldFilter = null;\n+        List<Callback> callbacks = objectWriter.getCallbacks();\n+        for (Callback callback : callbacks) {\n+            if (callback instanceof MethodInterceptorFilter) {\n+                oldFilter = (MethodInterceptorFilter) callback;\n+                break;\n+            }\n+        }\n+        if (oldFilter == null) {\n+            throw new RuntimeException(\"Unable to find method interceptor filter\");\n+        }\n+\n+        // create a new method interceptor filter and set it as the invocation interceptor\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldFilter.getMockHandler());\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        oldFilter.setMockHandler(newMockHandler);\n+        oldFilter.setDelegate(newFilter);\n+\n+        // check if the mock has a mockito mock settings object; if so, update it to use the new defaults\n+        Field settingsField = mock.getClass().getDeclaredField(\"mockitoInterceptorSettings\");\n+        settingsField.setAccessible(true);\n+        Object settingsObject = settingsField.get(mock);\n+        if (settingsObject instanceof MockSettingsImpl) {\n+            ((MockSettingsImpl) settingsObject).defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+        }\n+\n+    } catch (Exception e) {\n+        throw new RuntimeException(\"Failed to reset mock\", e);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}