{
    "patch": "public Line revert() {\n    final Vector2D negatedDirection = direction.negate();\n    final double[] directionArray = negatedDirection.toArray();\n    if (Double.isNaN(directionArray[0]) ||\n        Double.isInfinite(directionArray[0])) {\n        throw new RuntimeException(\"Invalid line direction\");\n    }\n    if (directionArray[0] == 0 && directionArray[1] == 0) {\n        throw new RuntimeException(\"Cannot perform line revert operation\");\n    }\n    return new Line(zero, negatedDirection);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..0735bf3fa 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,18 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+    final Vector2D negatedDirection = direction.negate();\n+    final double[] directionArray = negatedDirection.toArray();\n+    if (Double.isNaN(directionArray[0]) ||\n+        Double.isInfinite(directionArray[0])) {\n+        throw new RuntimeException(\"Invalid line direction\");\n     }\n+    if (directionArray[0] == 0 && directionArray[1] == 0) {\n+        throw new RuntimeException(\"Cannot perform line revert operation\");\n+    }\n+    return new Line(zero, negatedDirection);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}