{
    "patch": "    attachLiteralTypes(n);\n    if (n.getType() == Token.FUNCTION) {\n      if (NodeUtil.getEnclosingType(n) == null || NodeUtil.isStatement(n.getParent())) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n    }\n    if (n.getType() == Token.VAR) {\n      defineVar(n, parent);\n      return;\n    }\n    if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n      return;\n    }\n    if (n.getType() == Token.LP) {\n      if (parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n      }\n      return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..14e79b19 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,28 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    attachLiteralTypes(n);\n+    if (n.getType() == Token.FUNCTION) {\n+      if (NodeUtil.getEnclosingType(n) == null || NodeUtil.isStatement(n.getParent())) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n       }\n     }\n+    if (n.getType() == Token.VAR) {\n+      defineVar(n, parent);\n+      return;\n+    }\n+    if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+      return;\n+    }\n+    if (n.getType() == Token.LP) {\n+      if (parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+      }\n+      return;\n+    }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}