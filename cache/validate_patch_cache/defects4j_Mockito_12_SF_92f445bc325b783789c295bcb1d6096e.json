{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type fieldType = field.getGenericType();\n    if (fieldType instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) fieldType).getActualTypeArguments();\n        if (actualTypeArguments.length > 0) {\n            Type actualType = actualTypeArguments[0];\n            if (actualType instanceof Class) {\n                return (Class<?>) actualType;\n            } else if (actualType instanceof ParameterizedType) {\n                return (Class<?>) ((ParameterizedType) actualType).getRawType();\n            } else if (actualType instanceof TypeVariable) {\n                Type[] bounds = ((TypeVariable) actualType).getBounds();\n                if (bounds.length > 0) {\n                    Type boundType = bounds[0];\n                    if (boundType instanceof Class) {\n                        return (Class<?>) boundType;\n                    }\n                }\n            }\n        }\n    }\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..c25b50b4b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,27 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type fieldType = field.getGenericType();\n+    if (fieldType instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) fieldType).getActualTypeArguments();\n+        if (actualTypeArguments.length > 0) {\n+            Type actualType = actualTypeArguments[0];\n+            if (actualType instanceof Class) {\n+                return (Class<?>) actualType;\n+            } else if (actualType instanceof ParameterizedType) {\n+                return (Class<?>) ((ParameterizedType) actualType).getRawType();\n+            } else if (actualType instanceof TypeVariable) {\n+                Type[] bounds = ((TypeVariable) actualType).getBounds();\n+                if (bounds.length > 0) {\n+                    Type boundType = bounds[0];\n+                    if (boundType instanceof Class) {\n+                        return (Class<?>) boundType;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return Object.class;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}