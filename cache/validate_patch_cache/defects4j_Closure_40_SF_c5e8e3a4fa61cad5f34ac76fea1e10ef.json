{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  try {\n    if (t.inGlobalScope() && NodeUtil.isNameDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      while (nameNode != null) {\n        if (nameNode.isName()) {\n          JsName jsName = t.getScope().declareName(\n              nameNode.getString(), nameNode, null);\n          recordSet(jsName, nameNode);\n        }\n        nameNode = nameNode.getNext();\n      }\n    } else if (n.isAssign()) {\n      Node lhs = n.getFirstChild();\n      if (lhs.isName()) {\n        JsName jsName = rhs.getQualifiedName();\n        recordSet(jsName, lhs);\n      }\n    } else if (n.isCall()) {\n      Node callee = n.getFirstChild();\n      if (callee.isName()) {\n        JsName jsName = callee.getQualifiedName();\n        refNodes.add(jsName);\n      }\n    }\n  } catch (Exception e) {\n    System.err.println(\"Error processing node:\");\n    System.err.println(n);\n    System.err.println(\"Exception message:\");\n    System.err.println(e.getMessage());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..c1ed4a03 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,38 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  try {\n+    if (t.inGlobalScope() && NodeUtil.isNameDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      while (nameNode != null) {\n+        if (nameNode.isName()) {\n+          JsName jsName = t.getScope().declareName(\n+              nameNode.getString(), nameNode, null);\n+          recordSet(jsName, nameNode);\n         }\n+        nameNode = nameNode.getNext();\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n-        }\n+    } else if (n.isAssign()) {\n+      Node lhs = n.getFirstChild();\n+      if (lhs.isName()) {\n+        JsName jsName = rhs.getQualifiedName();\n+        recordSet(jsName, lhs);\n+      }\n+    } else if (n.isCall()) {\n+      Node callee = n.getFirstChild();\n+      if (callee.isName()) {\n+        JsName jsName = callee.getQualifiedName();\n+        refNodes.add(jsName);\n       }\n     }\n+  } catch (Exception e) {\n+    System.err.println(\"Error processing node:\");\n+    System.err.println(n);\n+    System.err.println(\"Exception message:\");\n+    System.err.println(e.getMessage());\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}