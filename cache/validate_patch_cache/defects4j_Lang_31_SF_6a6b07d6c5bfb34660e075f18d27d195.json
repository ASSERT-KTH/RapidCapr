{
    "patch": "public static boolean containsAny(String str, char[] chars) {\n    if (str == null || chars == null) {\n        return false;\n    }\n\n    int strLen = str.length();\n    int charsLen = chars.length;\n\n    if (charsLen == 0) {\n        return false;\n    }\n\n    for (int i = 0; i < strLen; i++) {\n        char c = str.charAt(i);\n        for (int j = 0; j < charsLen; j++) {\n            if (c == chars[j]) {\n                return true;\n            }\n        }\n        if (Character.isHighSurrogate(c) && i < strLen - 1) {\n            i++;\n            c = str.charAt(i);\n            if (Character.isLowSurrogate(c)) {\n                int codePoint = Character.toCodePoint(str.charAt(i - 1), c);\n                for (int k = 0; k < charsLen; k++) {\n                    if (Character.charCount(codePoint) == 1 && codePoint == chars[k]) {\n                        return true;\n                    } else if (Character.charCount(codePoint) == 2 && k + 1 < charsLen &&\n                            codePoint == Character.toCodePoint(chars[k], chars[k + 1])) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..20aa9e30 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] chars) {\n+    if (str == null || chars == null) {\n+        return false;\n+    }\n+\n+    int strLen = str.length();\n+    int charsLen = chars.length;\n+\n+    if (charsLen == 0) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < strLen; i++) {\n+        char c = str.charAt(i);\n+        for (int j = 0; j < charsLen; j++) {\n+            if (c == chars[j]) {\n+                return true;\n+            }\n+        }\n+        if (Character.isHighSurrogate(c) && i < strLen - 1) {\n+            i++;\n+            c = str.charAt(i);\n+            if (Character.isLowSurrogate(c)) {\n+                int codePoint = Character.toCodePoint(str.charAt(i - 1), c);\n+                for (int k = 0; k < charsLen; k++) {\n+                    if (Character.charCount(codePoint) == 1 && codePoint == chars[k]) {\n+                        return true;\n+                    } else if (Character.charCount(codePoint) == 2 && k + 1 < charsLen &&\n+                            codePoint == Character.toCodePoint(chars[k], chars[k + 1])) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}