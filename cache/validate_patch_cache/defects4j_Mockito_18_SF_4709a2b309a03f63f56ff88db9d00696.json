{
    "patch": "public static Map<String, Integer> countChars(String input) {\n    Map<String, Integer> result = new HashMap<>();\n    if(input == null || input.isEmpty()) {\n        return result;\n    }\n    for(int i = 0; i < input.length(); i++) {\n        String c = String.valueOf(input.charAt(i));\n        result.put(c, result.getOrDefault(c, 0) + 1);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f941f078c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countChars(String input) {\n+    Map<String, Integer> result = new HashMap<>();\n+    if(input == null || input.isEmpty()) {\n+        return result;\n+    }\n+    for(int i = 0; i < input.length(); i++) {\n+        String c = String.valueOf(input.charAt(i));\n+        result.put(c, result.getOrDefault(c, 0) + 1);\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}