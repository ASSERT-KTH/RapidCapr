{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n    int weeks = getWeeks();\n    long millis = (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK))\n                + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n                + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n                + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n                + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n                + ((long) getMillis());\n\n    if (type.isSupported(DurationFieldType.months())) {\n        int totalMonths = months + (years * 12);\n        months = totalMonths % 12;\n        years = totalMonths / 12;\n    }\n    if (years != 0 && type.isSupported(DurationFieldType.years())) {\n        if (type.isSupported(DurationFieldType.months())) {\n            return new Period(years, months, weeks, days, getHours(), getMinutes(),\n                              getSeconds(), getMillis(), type);\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported: Months\");\n        }\n    }\n    // if the period type doesn't contain weeks, convert them to days (as well as days if months or years are present)\n    if (!type.isSupported(DurationFieldType.weeks())) {\n        millis += (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        days += (weeks * 7);\n        weeks = 0;\n    } else if (weeks != 0 && type.isSupported(DurationFieldType.days())) {\n        days += (weeks * 7);\n        weeks = 0;\n    }\n    if (!type.isSupported(DurationFieldType.days())) {\n        millis += (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        days = 0;\n    }\n    return new Period(millis, new PeriodType(type.isPrecise(),\n                                              type.getFields(),\n                                              (type.isPrecise()\n                                               ? null\n                                               : selectMonthsOrYears(type))));\n}\n\n// Helper function to compute whether the output should have months or years\nprivate DurationFieldType[] selectMonthsOrYears(PeriodType type) {\n    List<DurationFieldType> fieldsList = new ArrayList<>();\n    for (DurationFieldType fieldType : type.getFields()) {\n        if (fieldType == DurationFieldType.years()\n                || fieldType == DurationFieldType.months()) {\n            fieldsList.add(fieldType);\n        }\n    }\n    if (fieldsList.isEmpty()) {\n        return null;\n    }\n    return fieldsList.toArray(new DurationFieldType[fieldsList.size()]);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2a0c6e63 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,65 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    long millis = (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK))\n+                + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+                + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+                + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+                + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+                + ((long) getMillis());\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        int totalMonths = months + (years * 12);\n+        months = totalMonths % 12;\n+        years = totalMonths / 12;\n+    }\n+    if (years != 0 && type.isSupported(DurationFieldType.years())) {\n+        if (type.isSupported(DurationFieldType.months())) {\n+            return new Period(years, months, weeks, days, getHours(), getMinutes(),\n+                              getSeconds(), getMillis(), type);\n+        } else {\n+            throw new UnsupportedOperationException(\"Field is not supported: Months\");\n         }\n-        return result;\n     }\n+    // if the period type doesn't contain weeks, convert them to days (as well as days if months or years are present)\n+    if (!type.isSupported(DurationFieldType.weeks())) {\n+        millis += (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        days += (weeks * 7);\n+        weeks = 0;\n+    } else if (weeks != 0 && type.isSupported(DurationFieldType.days())) {\n+        days += (weeks * 7);\n+        weeks = 0;\n+    }\n+    if (!type.isSupported(DurationFieldType.days())) {\n+        millis += (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        days = 0;\n+    }\n+    return new Period(millis, new PeriodType(type.isPrecise(),\n+                                              type.getFields(),\n+                                              (type.isPrecise()\n+                                               ? null\n+                                               : selectMonthsOrYears(type))));\n+}\n+\n+// Helper function to compute whether the output should have months or years\n+private DurationFieldType[] selectMonthsOrYears(PeriodType type) {\n+    List<DurationFieldType> fieldsList = new ArrayList<>();\n+    for (DurationFieldType fieldType : type.getFields()) {\n+        if (fieldType == DurationFieldType.years()\n+                || fieldType == DurationFieldType.months()) {\n+            fieldsList.add(fieldType);\n+        }\n+    }\n+    if (fieldsList.isEmpty()) {\n+        return null;\n+    }\n+    return fieldsList.toArray(new DurationFieldType[fieldsList.size()]);\n+}\n \n }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}