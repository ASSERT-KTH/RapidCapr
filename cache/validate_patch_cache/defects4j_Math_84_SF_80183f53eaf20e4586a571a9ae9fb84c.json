{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = performContraction(original, comparator, best, rho);\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = performContraction(original, comparator, best, sigma);\n                return;\n            }\n\n            // no improvement, shrink the simplex towards the best point\n            simplex = shrink(original, best, comparator, delta);\n\n        }\n    }\n    \n    private RealPointValuePair[] performContraction(RealPointValuePair[] original,\n                                                     Comparator<RealPointValuePair> comparator,\n                                                     RealPointValuePair best,\n                                                     double contractionFactor)\n            throws FunctionEvaluationException {\n        final RealPointValuePair contracted = evaluateNewSimplex(original, contractionFactor, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            return simplex;\n        } else {\n            return shrink(original, best, comparator, delta); // shrink towards best if contraction not successful\n        }\n    }\n\n    private RealPointValuePair[] shrink(RealPointValuePair[] original,\n                                         RealPointValuePair best,\n                                         Comparator<RealPointValuePair> comparator,\n                                         double contractionFactor)\n            throws FunctionEvaluationException {\n        final int dimension = original[0].getPoint().length;\n        final RealPointValuePair[] shrinked = new RealPointValuePair[dimension + 1];\n        shrinked[0] = best;\n        for (int i = 1; i < shrinked.length; ++i) {\n            final double[] point = new double[dimension];\n            for (int j = 0; j < dimension; ++j) {\n                point[j] = best.getPoint()[j] + contractionFactor *\n                        (original[i].getPoint()[j] - best.getPoint()[j]);\n            }\n            final double value = computeObjectiveValue(point);\n            shrinked[i] = new RealPointValuePair(point, value);\n        }\n        Arrays.sort(shrinked, comparator);\n        return shrinked;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5377be494 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -79,6 +79,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = performContraction(original, comparator, best, rho);\n                 }\n \n                 return;\n@@ -89,15 +91,49 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n+                simplex = performContraction(original, comparator, best, sigma);\n                 return;\n             }\n \n-        }\n+            // no improvement, shrink the simplex towards the best point\n+            simplex = shrink(original, best, comparator, delta);\n \n+        }\n+    }\n+    \n+    private RealPointValuePair[] performContraction(RealPointValuePair[] original,\n+                                                     Comparator<RealPointValuePair> comparator,\n+                                                     RealPointValuePair best,\n+                                                     double contractionFactor)\n+            throws FunctionEvaluationException {\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, contractionFactor, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            return simplex;\n+        } else {\n+            return shrink(original, best, comparator, delta); // shrink towards best if contraction not successful\n+        }\n     }\n \n+    private RealPointValuePair[] shrink(RealPointValuePair[] original,\n+                                         RealPointValuePair best,\n+                                         Comparator<RealPointValuePair> comparator,\n+                                         double contractionFactor)\n+            throws FunctionEvaluationException {\n+        final int dimension = original[0].getPoint().length;\n+        final RealPointValuePair[] shrinked = new RealPointValuePair[dimension + 1];\n+        shrinked[0] = best;\n+        for (int i = 1; i < shrinked.length; ++i) {\n+            final double[] point = new double[dimension];\n+            for (int j = 0; j < dimension; ++j) {\n+                point[j] = best.getPoint()[j] + contractionFactor *\n+                        (original[i].getPoint()[j] - best.getPoint()[j]);\n+            }\n+            final double value = computeObjectiveValue(point);\n+            shrinked[i] = new RealPointValuePair(point, value);\n+        }\n+        Arrays.sort(shrinked, comparator);\n+        return shrinked;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}