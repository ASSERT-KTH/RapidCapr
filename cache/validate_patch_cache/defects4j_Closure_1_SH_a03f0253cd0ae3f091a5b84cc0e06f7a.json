{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nNode body = ((Function) function).getBody();\n        \n// For setter methods in object literals, don't remove parameters.\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      if (body.isBlock()) {\n        Node lastStatement = body.getLastChild();\n        // If the last statement is a function expression, then can't remove the parameter yet.\n        if (lastStatement.isFunction()) {\n          lastStatement = ((Function) lastStatement).getBody().getLastChild();\n        }\n        if (NodeUtil.isFunctionDeclaration(lastStatement)) {\n          lastStatement = lastStatement.getLastChild();\n        }\n        if (lastStatement != null &&\n            (lastStatement.isExprResult() || lastStatement.isReturn())) {\n          Node lastStatementFirstChild = lastStatement.getFirstChild();\n          if (lastStatementFirstChild.isCall()) {\n            lastStatementFirstChild = lastStatementFirstChild.getFirstChild();\n          }\n          if (lastStatementFirstChild.matchesQualifiedName(function.getFirstChild().getQualifiedName())) {\n            // This occurs if the parameters are being mapped to new variable names, like:\n            // function(x, y) {\n            //   var a = x;\n            //   x = y;\n            //   y = a;\n            //   ...\n            // }\n            return;\n          }\n        }\n      }\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5c6991a3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,60 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+Node body = ((Function) function).getBody();\n+        \n+// For setter methods in object literals, don't remove parameters.\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      if (body.isBlock()) {\n+        Node lastStatement = body.getLastChild();\n+        // If the last statement is a function expression, then can't remove the parameter yet.\n+        if (lastStatement.isFunction()) {\n+          lastStatement = ((Function) lastStatement).getBody().getLastChild();\n+        }\n+        if (NodeUtil.isFunctionDeclaration(lastStatement)) {\n+          lastStatement = lastStatement.getLastChild();\n+        }\n+        if (lastStatement != null &&\n+            (lastStatement.isExprResult() || lastStatement.isReturn())) {\n+          Node lastStatementFirstChild = lastStatement.getFirstChild();\n+          if (lastStatementFirstChild.isCall()) {\n+            lastStatementFirstChild = lastStatementFirstChild.getFirstChild();\n+          }\n+          if (lastStatementFirstChild.matchesQualifiedName(function.getFirstChild().getQualifiedName())) {\n+            // This occurs if the parameters are being mapped to new variable names, like:\n+            // function(x, y) {\n+            //   var a = x;\n+            //   x = y;\n+            //   y = a;\n+            //   ...\n+            // }\n+            return;\n+          }\n+        }\n+      }\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}