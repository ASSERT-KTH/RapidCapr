{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    if (size == 1) {\n        if (elementPairs.get(0) instanceof PeriodPrinter && !notPrinter) {\n            return new PeriodFormatter((PeriodPrinter) elementPairs.get(0), null);\n        } else if (elementPairs.get(0) instanceof PeriodParser && !notParser) {\n            return new PeriodFormatter(null, (PeriodParser) elementPairs.get(0));\n        } else if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (notPrinter && notParser) {\n        return new PeriodFormatter(null, null);\n    }\n\n    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n\n    Separator sep = null;\n\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            sep = (Separator) elementPairs.get(i);\n            break;\n        }\n    }\n\n    if (sep != null) {\n        int sepIndex = elementPairs.indexOf(sep);\n        List<Object> beforeSeparatorList = elementPairs.subList(0, sepIndex);\n        List<Object> afterSeparatorList = elementPairs.subList(sepIndex + 1, size);\n\n        PeriodFormatter beforeFormatter = toFormatter(beforeSeparatorList, notPrinter, notParser);\n        PeriodFormatter afterFormatter = toFormatter(afterSeparatorList, notPrinter, notParser);\n        sep = sep.finish(beforeFormatter.getPrinter(), afterFormatter.getParser());\n\n        printer = sep == null ? printer : (printer == null ? null : new CompositePrinter(printer, sep));\n        parser = sep == null ? parser : (parser == null ? null : new CompositeParser(parser, sep));\n    }\n\n    return new PeriodFormatter(printer, parser); \n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bb5e679a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,61 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    if (size == 1) {\n+        if (elementPairs.get(0) instanceof PeriodPrinter && !notPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) elementPairs.get(0), null);\n+        } else if (elementPairs.get(0) instanceof PeriodParser && !notParser) {\n+            return new PeriodFormatter(null, (PeriodParser) elementPairs.get(0));\n+        } else if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (notPrinter && notParser) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n+    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n+\n+    Separator sep = null;\n+\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            sep = (Separator) elementPairs.get(i);\n+            break;\n         }\n     }\n \n+    if (sep != null) {\n+        int sepIndex = elementPairs.indexOf(sep);\n+        List<Object> beforeSeparatorList = elementPairs.subList(0, sepIndex);\n+        List<Object> afterSeparatorList = elementPairs.subList(sepIndex + 1, size);\n+\n+        PeriodFormatter beforeFormatter = toFormatter(beforeSeparatorList, notPrinter, notParser);\n+        PeriodFormatter afterFormatter = toFormatter(afterSeparatorList, notPrinter, notParser);\n+        sep = sep.finish(beforeFormatter.getPrinter(), afterFormatter.getParser());\n+\n+        printer = sep == null ? printer : (printer == null ? null : new CompositePrinter(printer, sep));\n+        parser = sep == null ? parser : (parser == null ? null : new CompositeParser(parser, sep));\n+    }\n+\n+    return new PeriodFormatter(printer, parser); \n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}