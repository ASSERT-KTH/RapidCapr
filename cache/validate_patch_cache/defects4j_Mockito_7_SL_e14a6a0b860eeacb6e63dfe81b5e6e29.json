{
    "patch": "private void readTypeVariables() {\n    if (typeVariable != null) {\n        Type[] bounds = typeVariable.getBounds();\n        if (bounds != null) {\n            for (Type type : bounds) {\n                if (type != null) {\n                    registerTypeVariablesOn(type);\n                }\n            }\n        }\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..248b04fa0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    if (typeVariable != null) {\n+        Type[] bounds = typeVariable.getBounds();\n+        if (bounds != null) {\n+            for (Type type : bounds) {\n+                if (type != null) {\n+                    registerTypeVariablesOn(type);\n+                }\n+            }\n+        }\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}