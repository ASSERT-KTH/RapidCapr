{
    "patch": "    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n    JSType type;\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType.isFunctionType()) {\n        ct = constructorType.toMaybeFunctionType();\n      }\n      if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n        type = ct.getInstanceType();\n      } else {\n        if (constructor.isQualifiedName()\n            && constructor.getParent().isAssign()\n            && constructor.getGrandparent().isExprResult()) {\n          JSType rhsType = getJSType(constructor.getNext(), scope);\n          if (rhsType != null) {\n            type = rhsType;\n          } else {\n            // We don't know, so quit trying to guess.\n            type = getNativeType(UNKNOWN_TYPE);\n          }\n        } else {\n          type = getNativeType(OBJECT_TYPE);\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..2848821f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,37 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n+    JSType type;\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType.isFunctionType()) {\n+        ct = constructorType.toMaybeFunctionType();\n+      }\n+      if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n+        type = ct.getInstanceType();\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (constructor.isQualifiedName()\n+            && constructor.getParent().isAssign()\n+            && constructor.getGrandparent().isExprResult()) {\n+          JSType rhsType = getJSType(constructor.getNext(), scope);\n+          if (rhsType != null) {\n+            type = rhsType;\n+          } else {\n+            // We don't know, so quit trying to guess.\n+            type = getNativeType(UNKNOWN_TYPE);\n+          }\n+        } else {\n+          type = getNativeType(OBJECT_TYPE);\n         }\n       }\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}