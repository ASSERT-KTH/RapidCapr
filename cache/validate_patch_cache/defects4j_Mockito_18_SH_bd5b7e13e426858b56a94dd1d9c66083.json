{
    "patch": "public ReturnValue execute(ExecutionEvent event) throws ExecutionException {\n    Object selection = PlatformUI.getWorkbench().getActiveWorkbenchWindow()\n                .getSelectionService().getSelection();\n    if (selection instanceof IStructuredSelection) {\n        IStructuredSelection ssel = (IStructuredSelection) selection;\n        Object obj = ssel.getFirstElement();\n        if (obj instanceof IFile) {\n            IFile file = (IFile) obj;\n            String fileName = file.getRawLocation().toFile().getAbsolutePath();\n            try {\n                String contents = new String(Files.readAllBytes(Paths.get(fileName)));\n                CompilationUnit cu = StaticJavaParser.parse(contents);\n                List<FieldDeclaration> fields = cu.findAll(FieldDeclaration.class);\n                List<FieldDeclaration> staticFields = fields.stream().filter(field -> field.isStatic()).collect(Collectors.toList());\n                List<VariableDeclarationExpr> variables = new ArrayList<>();\n                staticFields.forEach(field -> {\n                    field.getVariables().forEach(variable -> variables.add(variable));\n                });\n                ReturnValue values = new ReturnValue();\n                values.setValueFor(Iterable.class, variables);\n                return values;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    // unreachable code\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}