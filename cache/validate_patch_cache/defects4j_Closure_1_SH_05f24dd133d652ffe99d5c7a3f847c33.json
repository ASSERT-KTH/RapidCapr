{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Collect each unreferenced parameter's name and its Node so we can remove them\n    List<Pair<Node, Var>> unreferencedParams = new ArrayList<>();\n    for (Node arg: argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        unreferencedParams.add(Pair.of(arg, var));\n      } else if (!unreferencedParams.isEmpty()) {\n        // If an arg has been found that is not referenced and there are others that follow it\n        // that are referenced -- stop removing unreferenced args\n        break;\n      }\n    }\n\n    // Remove each unreferenced parameter's node\n    for (Pair<Node, Var> pair : unreferencedParams) {\n      argList.removeChild(pair.first);\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallSites) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d4c5ed42 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Collect each unreferenced parameter's name and its Node so we can remove them\n+    List<Pair<Node, Var>> unreferencedParams = new ArrayList<>();\n+    for (Node arg: argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        unreferencedParams.add(Pair.of(arg, var));\n+      } else if (!unreferencedParams.isEmpty()) {\n+        // If an arg has been found that is not referenced and there are others that follow it\n+        // that are referenced -- stop removing unreferenced args\n+        break;\n+      }\n+    }\n+\n+    // Remove each unreferenced parameter's node\n+    for (Pair<Node, Var> pair : unreferencedParams) {\n+      argList.removeChild(pair.first);\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallSites) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}