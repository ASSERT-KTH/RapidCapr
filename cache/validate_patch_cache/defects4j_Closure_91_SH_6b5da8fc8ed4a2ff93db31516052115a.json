{
    "patch": "      if (NodeUtil.isFunctionExpression(n) &&\n          isLendToNonPrototypeObject(n.getParent())) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns whether the given function AST node is getting lent to a non-prototype\n   * object.\n   */\n  private boolean isLendToNonPrototypeObject(Node fn) {\n    Node assign = NodeUtil.getEnclosingNode(fn, Token.ASSIGN);\n    if (assign == null) {\n      return false;\n    }\n    Node objectKey = assign.getFirstChild();\n    if (!NodeUtil.isGet(objectKey)) {\n      return false;\n    }\n    Node protoKey = objectKey.getLastChild();\n    if (!protoKey.isString() || !\"prototype\".equals(protoKey.getString())) {\n      return false;\n    }\n    Node object = objectKey.getFirstChild();\n    // This return value is used above.\n    return !(object.isThis() || NodeUtil.isFunctionExpression(object));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..515d9853 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,64 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionExpression(n) &&\n+          isLendToNonPrototypeObject(n.getParent())) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the given function AST node is getting lent to a non-prototype\n+   * object.\n+   */\n+  private boolean isLendToNonPrototypeObject(Node fn) {\n+    Node assign = NodeUtil.getEnclosingNode(fn, Token.ASSIGN);\n+    if (assign == null) {\n+      return false;\n+    }\n+    Node objectKey = assign.getFirstChild();\n+    if (!NodeUtil.isGet(objectKey)) {\n+      return false;\n+    }\n+    Node protoKey = objectKey.getLastChild();\n+    if (!protoKey.isString() || !\"prototype\".equals(protoKey.getString())) {\n+      return false;\n+    }\n+    Node object = objectKey.getFirstChild();\n+    // This return value is used above.\n+    return !(object.isThis() || NodeUtil.isFunctionExpression(object));\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}