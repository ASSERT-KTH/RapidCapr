{
    "patch": "      Node functionNode = NodeUtil.getEnclosingFunction(n);\n      if (NodeUtil.getEnclosingType(functionNode) == Token.OBJECTLIT &&\n          (NodeUtil.isObjectLitProperty(n, functionNode) ||\n          NodeUtil.isObjectLitProperty(parent, functionNode))) {\n        return false;\n      }\n\n      Node grandparent = parent.getParent();\n      if (grandparent != null &&\n          (grandparent.getType() == Token.EXPR_RESULT ||\n          (grandparent.getType() == Token.VAR &&\n          grandparent.getParent() != null &&\n          grandparent.getParent().getType() == Token.SCRIPT))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d9b6d2f0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,19 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node functionNode = NodeUtil.getEnclosingFunction(n);\n+      if (NodeUtil.getEnclosingType(functionNode) == Token.OBJECTLIT &&\n+          (NodeUtil.isObjectLitProperty(n, functionNode) ||\n+          NodeUtil.isObjectLitProperty(parent, functionNode))) {\n+        return false;\n+      }\n+\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null &&\n+          (grandparent.getType() == Token.EXPR_RESULT ||\n+          (grandparent.getType() == Token.VAR &&\n+          grandparent.getParent() != null &&\n+          grandparent.getParent().getType() == Token.SCRIPT))) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}