{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // start with whole milliseconds, try to normalize assuming all months are 30 days\n    long millis = getMillis() +\n            ((long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND) +\n            ((long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE) +\n            ((long) getHours() * DateTimeConstants.MILLIS_PER_HOUR) +\n            ((long) getDays() * DateTimeConstants.MILLIS_PER_DAY) +\n            ((long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n    int months = getMonths();\n    int years = getYears();\n    if (years != 0 || months != 0) {\n        long yearmillis = ((long) years) * (365L * 24L * 60L * 60L * 1000L);\n        long monthmillis = ((long) months) * (30L * 24L * 60L * 60L * 1000L);\n        millis = FieldUtils.safeAdd(millis, yearmillis);\n        millis = FieldUtils.safeAdd(millis, monthmillis);\n        int newMonths = ISOChronology.getInstanceUTC().dayOfMonth().get(millis) - 1;\n        millis = ISOChronology.getInstanceUTC().monthOfYear().set(millis, 1);\n        millis = ISOChronology.getInstanceUTC().dayOfMonth().set(millis, 1);\n        months = newMonths;\n        years = 0;\n    }\n    years = FieldUtils.safeAdd(years, FieldUtils.safeDivide(millis, 1000 * 60 * 60 * 24 * 365));\n    millis = FieldUtils.safeSubtract(millis, years * 365L * 24L * 60L * 60L * 1000L);\n    months = FieldUtils.safeAdd(months, FieldUtils.safeDivide(millis, 1000 * 60 * 60 * 24 * 30));\n    if (months > 11) {\n        years++;\n        months -= 12;\n    }\n    millis = FieldUtils.safeSubtract(millis, months * 30L * 24L * 60L * 60L * 1000L);\n    millis = ISOChronology.getInstanceUTC().year().add(millis, years);\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..d8987ef6 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,43 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    // start with whole milliseconds, try to normalize assuming all months are 30 days\n+    long millis = getMillis() +\n+            ((long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND) +\n+            ((long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE) +\n+            ((long) getHours() * DateTimeConstants.MILLIS_PER_HOUR) +\n+            ((long) getDays() * DateTimeConstants.MILLIS_PER_DAY) +\n+            ((long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+\n+    int months = getMonths();\n+    int years = getYears();\n+    if (years != 0 || months != 0) {\n+        long yearmillis = ((long) years) * (365L * 24L * 60L * 60L * 1000L);\n+        long monthmillis = ((long) months) * (30L * 24L * 60L * 60L * 1000L);\n+        millis = FieldUtils.safeAdd(millis, yearmillis);\n+        millis = FieldUtils.safeAdd(millis, monthmillis);\n+        int newMonths = ISOChronology.getInstanceUTC().dayOfMonth().get(millis) - 1;\n+        millis = ISOChronology.getInstanceUTC().monthOfYear().set(millis, 1);\n+        millis = ISOChronology.getInstanceUTC().dayOfMonth().set(millis, 1);\n+        months = newMonths;\n+        years = 0;\n+    }\n+    years = FieldUtils.safeAdd(years, FieldUtils.safeDivide(millis, 1000 * 60 * 60 * 24 * 365));\n+    millis = FieldUtils.safeSubtract(millis, years * 365L * 24L * 60L * 60L * 1000L);\n+    months = FieldUtils.safeAdd(months, FieldUtils.safeDivide(millis, 1000 * 60 * 60 * 24 * 30));\n+    if (months > 11) {\n+        years++;\n+        months -= 12;\n+    }\n+    millis = FieldUtils.safeSubtract(millis, months * 30L * 24L * 60L * 60L * 1000L);\n+    millis = ISOChronology.getInstanceUTC().year().add(millis, years);\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+    return result;\n+}\n \n }",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}