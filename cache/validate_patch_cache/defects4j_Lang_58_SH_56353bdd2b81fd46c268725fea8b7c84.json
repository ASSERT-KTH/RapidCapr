{
    "patch": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -995,7 +995,7 @@ public class NumberUtils {\n                 && (numeric.indexOf('.') < 0 && numeric.indexOf('e') < 0 && numeric.indexOf('E') < 0)) {\n             char chr = lastChar;\n             if (chr == 'l' || chr == 'L') {\n-                if (dec == null && exp == null && isDigits(numeric.substring(0, numeric.length() - 1))\n+                if (isDigits(numeric.replace(\"-\", \"\").substring(0, numeric.length() - 1))\n                     && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                     try {\n                         return createLong(numeric);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..2cee3cc6 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,17 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n++++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+@@ -995,7 +995,7 @@ public class NumberUtils {\n+                 && (numeric.indexOf('.') < 0 && numeric.indexOf('e') < 0 && numeric.indexOf('E') < 0)) {\n+             char chr = lastChar;\n+             if (chr == 'l' || chr == 'L') {\n+-                if (dec == null && exp == null && isDigits(numeric.substring(0, numeric.length() - 1))\n++                if (isDigits(numeric.replace(\"-\", \"\").substring(0, numeric.length() - 1))\n+                     && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                     try {\n+                         return createLong(numeric);\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}