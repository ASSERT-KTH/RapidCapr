{
    "patch": "int codePoint = Character.codePointAt(input, pos);\nint charCount = Character.charCount(codePoint);\nif (charCount > 1) {\n    // surrogate pair\n    translate(input.subSequence(pos, pos + charCount), out);\n} else {\n    boolean translated = false;\n    for (CharSequence[] seq : this.sequencePairs) {\n        CharSequence key = seq[0];\n        if (isEqual(input, pos, key)) {\n            int oldPos = pos;\n            pos += key.length();\n            translate(seq[1], out);\n            translated = true;\n            break;\n        }\n    }\n    if (!translated) {\n        out.write(input.charAt(pos));\n        pos++;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..c6e0f826 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,28 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int codePoint = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(codePoint);\n+if (charCount > 1) {\n+    // surrogate pair\n+    translate(input.subSequence(pos, pos + charCount), out);\n+} else {\n+    boolean translated = false;\n+    for (CharSequence[] seq : this.sequencePairs) {\n+        CharSequence key = seq[0];\n+        if (isEqual(input, pos, key)) {\n+            int oldPos = pos;\n+            pos += key.length();\n+            translate(seq[1], out);\n+            translated = true;\n+            break;\n+        }\n+    }\n+    if (!translated) {\n+        out.write(input.charAt(pos));\n+        pos++;\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}