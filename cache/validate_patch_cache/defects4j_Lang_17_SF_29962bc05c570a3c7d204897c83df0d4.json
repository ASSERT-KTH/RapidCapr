{
    "patch": "public static String unescape(String str) {\n    if (str == null) {\n        return null;\n    }\n    int pos = 0;\n    StringBuilder sb = new StringBuilder();\n    while (pos < str.length()) {\n        int start = str.indexOf(\"&#\", pos);\n        if (start == -1) {\n            // No more entities\n            sb.append(str.substring(pos));\n            break;\n        } else if (start > pos) {\n            // Append text before entity\n            sb.append(str.substring(pos, start));\n        }\n        int end = str.indexOf(\";\", start + 2);\n        if (end == -1) {\n            // No closing semicolon\n            sb.append(str.substring(pos));\n            break;\n        }\n        try {\n            int codePoint = Integer.parseInt(str.substring(start + 2, end));\n            sb.appendCodePoint(codePoint);\n        } catch (NumberFormatException e) {\n            // Invalid entity, append it as-is\n            sb.append(str.substring(start, end + 1));\n        }\n        pos = end + 1;\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..b0755590 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,39 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n+public static String unescape(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int pos = 0;\n+    StringBuilder sb = new StringBuilder();\n+    while (pos < str.length()) {\n+        int start = str.indexOf(\"&#\", pos);\n+        if (start == -1) {\n+            // No more entities\n+            sb.append(str.substring(pos));\n+            break;\n+        } else if (start > pos) {\n+            // Append text before entity\n+            sb.append(str.substring(pos, start));\n         }\n-        if (input == null) {\n-            return;\n+        int end = str.indexOf(\";\", start + 2);\n+        if (end == -1) {\n+            // No closing semicolon\n+            sb.append(str.substring(pos));\n+            break;\n         }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n-                }\n-                pos--;\n-            }\n-            pos++;\n+        try {\n+            int codePoint = Integer.parseInt(str.substring(start + 2, end));\n+            sb.appendCodePoint(codePoint);\n+        } catch (NumberFormatException e) {\n+            // Invalid entity, append it as-is\n+            sb.append(str.substring(start, end + 1));\n         }\n+        pos = end + 1;\n     }\n+    return sb.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}