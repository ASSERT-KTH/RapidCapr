{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {    \n  switch (n.getToken()) {\n    // Record global variable and function declarations\n    case VAR:\n    case LET:\n    case CONST:\n      Node nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, parent);\n\n        if (ns != null) {\n          recordSet(ns.name, nameNode);\n        }\n      }\n      break;\n    \n    case FUNCTION:\n      Node nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, parent);\n\n        if (ns != null) {\n          JsName nameInfo = getName(nameNode.getString(), true);\n          if (nameInfo != null) {\n            recordSet(nameInfo.name, nameNode);\n          }\n        }\n      }\n      break;\n    \n    case OBJECTLIT:\n      if (n.getParent() != null && n.getParent().isAssign()) {\n        nameNode = n.getParent().getFirstChild();\n        if (nameNode != null && nameNode.isGetProp()) {\n          Node objNode = nameNode.getFirstChild();\n          if (objNode != null && objNode.isName()) {\n            String objName = objNode.getString();\n            NameInformation ns = createNameInformation(t, n, parent);\n            if (ns != null) {\n              recordSet(objName + \".\" + ns.name, n);\n            }\n          }\n        } else {\n          nameNode = n.getFirstChild();\n          if (nameNode != null && nameNode.isString()) {\n            String name = nameNode.getString();\n            if (!name.isEmpty()) {\n              NameInformation ns = createNameInformation(t, n, parent);\n              if (ns != null) {\n                recordSet(name, n);\n              }\n            }\n          }\n        }\n      } else {\n        nameNode = n.getFirstChild();\n        if (nameNode != null && nameNode.isString()) {\n          String name = nameNode.getString();\n          if (!name.isEmpty()) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            if (ns != null) {\n              recordSet(name, n);\n            }\n          }\n        }\n      }\n      break;\n\n    // Record assignments and call sites\n    case ASSIGN:\n      nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.isGetProp()) {\n        Node objNode = nameNode.getFirstChild();\n        if (objNode != null && objNode.isName()) {\n          String objName = objNode.getString();\n          NameInformation ns = createNameInformation(t, nameNode, parent);\n          if (ns != null) {\n            if (ns.isPrototype) {\n              recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n            } else {\n              recordSet(objName + \".\" + ns.name, nameNode);\n            }\n          }\n        }\n      } else if (nameNode != null && nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, n);\n\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      }\n      break;\n\n    case CALL:\n      nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));\n          }\n        }\n      }\n      break;\n\n    default:\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..c05282eb 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,34 +593,93 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {    \n+  switch (n.getToken()) {\n+    // Record global variable and function declarations\n+    case VAR:\n+    case LET:\n+    case CONST:\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.isName()) {\n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n \n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n+        if (ns != null) {\n+          recordSet(ns.name, nameNode);\n+        }\n+      }\n+      break;\n+    \n+    case FUNCTION:\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.isName()) {\n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n+\n+        if (ns != null) {\n+          JsName nameInfo = getName(nameNode.getString(), true);\n+          if (nameInfo != null) {\n             recordSet(nameInfo.name, nameNode);\n           }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n+        }\n+      }\n+      break;\n+    \n+    case OBJECTLIT:\n+      if (n.getParent() != null && n.getParent().isAssign()) {\n+        nameNode = n.getParent().getFirstChild();\n+        if (nameNode != null && nameNode.isGetProp()) {\n+          Node objNode = nameNode.getFirstChild();\n+          if (objNode != null && objNode.isName()) {\n+            String objName = objNode.getString();\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            if (ns != null) {\n+              recordSet(objName + \".\" + ns.name, n);\n+            }\n+          }\n+        } else {\n+          nameNode = n.getFirstChild();\n+          if (nameNode != null && nameNode.isString()) {\n+            String name = nameNode.getString();\n+            if (!name.isEmpty()) {\n+              NameInformation ns = createNameInformation(t, n, parent);\n+              if (ns != null) {\n+                recordSet(name, n);\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        nameNode = n.getFirstChild();\n+        if (nameNode != null && nameNode.isString()) {\n+          String name = nameNode.getString();\n+          if (!name.isEmpty()) {\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            if (ns != null) {\n+              recordSet(name, n);\n+            }\n           }\n         }\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n+      break;\n+\n+    // Record assignments and call sites\n+    case ASSIGN:\n+      nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.isGetProp()) {\n+        Node objNode = nameNode.getFirstChild();\n+        if (objNode != null && objNode.isName()) {\n+          String objName = objNode.getString();\n+          NameInformation ns = createNameInformation(t, nameNode, parent);\n+          if (ns != null) {\n+            if (ns.isPrototype) {\n+              recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+            } else {\n+              recordSet(objName + \".\" + ns.name, nameNode);\n+            }\n+          }\n+        }\n+      } else if (nameNode != null && nameNode.isName()) {\n         NameInformation ns = createNameInformation(t, nameNode, n);\n+\n         if (ns != null) {\n           if (ns.isPrototype) {\n             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n@@ -628,18 +687,27 @@ final class NameAnalyzer implements CompilerPass {\n             recordSet(ns.name, nameNode);\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n+      }\n+      break;\n+\n+    case CALL:\n+      nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.isName()) {\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n           JsName name = getName(ns.name, false);\n           if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+            refNodes.add(new ClassDefiningFunctionNode(\n+                name, n, parent, parent.getParent()));\n           }\n         }\n       }\n-    }\n+      break;\n+\n+    default:\n+      break;\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}