{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\n\npublic RealMatrix squareRoot(final RealMatrix m) {\n    final int numRows = m.getRowDimension();\n    final int numCols = m.getColumnDimension();\n    final int k = Math.min(numRows, numCols);\n    final int maxNumIterations = 100;\n\n    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    final RealMatrix u = svd.getU();\n    final RealMatrix v = svd.getV();\n    final RealMatrix s = svd.getS();\n\n    // Compute the truncated singular value decomposition\n    final double tol = Math.max(numRows, numCols) * s.getEntry(0, 0) * 1e-15;\n    final int r = svd.getRank(tol);\n    final RealMatrix u1 = MatrixUtils.getSubMatrix(u, 0, numRows - 1, 0, r - 1);\n    final RealMatrix v1 = MatrixUtils.getSubMatrix(v, 0, numCols - 1, 0, r - 1);\n    final RealMatrix s1 = MatrixUtils.getSubMatrix(s, 0, r - 1, 0, r - 1);\n\n    // Compute the square root using randomized SVD\n    RealMatrix g = MatrixUtils.createRealIdentityMatrix(r);\n    for (int i = 0; i < maxNumIterations; i++) {\n        RealMatrix omega = MatrixUtils.createRealMatrix(r, k);\n        for (int j = 0; j < k; j++) {\n            double[] randValues = new double[r];\n            for (int l = 0; l < r; l++) {\n                randValues[l] = Math.random();\n            }\n            RealMatrix randVec = MatrixUtils.createColumnRealMatrix(randValues);\n            RealMatrix temp = m.multiply(v1.multiply(randVec));\n            omega.setColumnMatrix(j, temp.scalarMultiply(1 / s1.getEntry(j, j)));\n        }\n        RealMatrix q = omega.multiply(omega.transpose()).scalarMultiply(1 / k);\n        EigenDecomposition dec = new EigenDecomposition(q);\n        RealMatrix qSqrt = dec.getSquareRoot();\n        RealMatrix sigmaInv = MatrixUtils.createRealDiagonalMatrix(\n            dec.getRealEigenvalues().stream().map(x -> 1 / Math.sqrt(x)).toArray());\n        RealMatrix x = v1.multiply(sigmaInv).multiply(qSqrt).multiply(sigmaInv).multiply(v1.transpose()).multiply(m);\n        g = x.scalarMultiply(0.5).add(g.multiply(g));\n    }\n    return u1.multiply(g).multiply(u1.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bcf026792 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,50 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularValueDecomposition;\n+\n+public RealMatrix squareRoot(final RealMatrix m) {\n+    final int numRows = m.getRowDimension();\n+    final int numCols = m.getColumnDimension();\n+    final int k = Math.min(numRows, numCols);\n+    final int maxNumIterations = 100;\n+\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    final RealMatrix u = svd.getU();\n+    final RealMatrix v = svd.getV();\n+    final RealMatrix s = svd.getS();\n+\n+    // Compute the truncated singular value decomposition\n+    final double tol = Math.max(numRows, numCols) * s.getEntry(0, 0) * 1e-15;\n+    final int r = svd.getRank(tol);\n+    final RealMatrix u1 = MatrixUtils.getSubMatrix(u, 0, numRows - 1, 0, r - 1);\n+    final RealMatrix v1 = MatrixUtils.getSubMatrix(v, 0, numCols - 1, 0, r - 1);\n+    final RealMatrix s1 = MatrixUtils.getSubMatrix(s, 0, r - 1, 0, r - 1);\n+\n+    // Compute the square root using randomized SVD\n+    RealMatrix g = MatrixUtils.createRealIdentityMatrix(r);\n+    for (int i = 0; i < maxNumIterations; i++) {\n+        RealMatrix omega = MatrixUtils.createRealMatrix(r, k);\n+        for (int j = 0; j < k; j++) {\n+            double[] randValues = new double[r];\n+            for (int l = 0; l < r; l++) {\n+                randValues[l] = Math.random();\n+            }\n+            RealMatrix randVec = MatrixUtils.createColumnRealMatrix(randValues);\n+            RealMatrix temp = m.multiply(v1.multiply(randVec));\n+            omega.setColumnMatrix(j, temp.scalarMultiply(1 / s1.getEntry(j, j)));\n+        }\n+        RealMatrix q = omega.multiply(omega.transpose()).scalarMultiply(1 / k);\n+        EigenDecomposition dec = new EigenDecomposition(q);\n+        RealMatrix qSqrt = dec.getSquareRoot();\n+        RealMatrix sigmaInv = MatrixUtils.createRealDiagonalMatrix(\n+            dec.getRealEigenvalues().stream().map(x -> 1 / Math.sqrt(x)).toArray());\n+        RealMatrix x = v1.multiply(sigmaInv).multiply(qSqrt).multiply(sigmaInv).multiply(v1.transpose()).multiply(m);\n+        g = x.scalarMultiply(0.5).add(g.multiply(g));\n     }\n+    return u1.multiply(g).multiply(u1.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}