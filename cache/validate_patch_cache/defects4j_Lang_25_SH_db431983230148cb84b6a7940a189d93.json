{
    "patch": "// Apply the appropriate encoding scheme\nif (escapeType == ESCAPE_STANDARD) {\n    StringBuffer stringBuffer = new StringBuffer();\n    for (int i = 0; i < original.length(); i++) {\n        char ch = original.charAt(i);\n        if (ch == '<') {\n            stringBuffer.append(\"&lt;\");\n        } else if (ch == '>') {\n            stringBuffer.append(\"&gt;\");\n        } else if (ch == '&') {\n            stringBuffer.append(\"&amp;\");\n        } else if ((ch == '\"') && !ATTR_QUOTE.equals(\"apos\")) {\n            stringBuffer.append(\"&quot;\");\n        } else {\n            stringBuffer.append(ch);\n        }\n    }\n    escaped = stringBuffer.toString();\n} else if (escapeType == ESCAPE_CUSTOM) {\n    if (customRules != null) {\n        for (EscapeRule customRule : customRules) {\n            original = original.replace(customRule.getUnescaped(), customRule.getEscaped());  // fixed line\n        }\n    }\n    escaped = original;\n} else if (escapeType == ESCAPE_HTML_ATTRIBUTE) {\n    if (ATTR_QUOTE.equals(\"apos\")) {\n        escaped = StringEscapeUtils.escapeHtml4(original).replaceAll(\"\\\"\", \"&#034;\");\n    } else {\n        escaped = StringEscapeUtils.escapeHtml4(original).replaceAll(\"'\", \"&#039;\");\n    }\n} else if (escapeType == ESCAPE_XML) {\n    escaped = StringEscapeUtils.escapeXml10(original);\n} else if (escapeType == ESCAPE_JAVA) {\n    escaped = StringEscapeUtils.escapeJava(original);\n} else if (escapeType == ESCAPE_JAVASCRIPT) {\n    escaped = StringEscapeUtils.escapeEcmaScript(original);\n} else {\n    throw new IllegalArgumentException(\"Invalid escape type\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}