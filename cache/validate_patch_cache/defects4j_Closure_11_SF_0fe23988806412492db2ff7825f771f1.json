{
    "patch": "public String getProperty(String key) throws IOException {\n    Properties prop = new Properties();\n    InputStream input = null;\n    try {\n        input = new FileInputStream(\"config.properties\");\n        // load a properties file\n        prop.load(input);\n \n        // get the property value and return it\n        String value = prop.getProperty(key);\n        if (value == null || value.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid input value. Key: \" + key);\n        }\n        return value;\n    } catch (IOException ex) {\n        throw ex;\n    } finally {\n        if (input != null) {\n            try {\n                input.close();\n            } catch (IOException e) { /* Ignore */ }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..e2648a8e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String key) throws IOException {\n+    Properties prop = new Properties();\n+    InputStream input = null;\n+    try {\n+        input = new FileInputStream(\"config.properties\");\n+        // load a properties file\n+        prop.load(input);\n+ \n+        // get the property value and return it\n+        String value = prop.getProperty(key);\n+        if (value == null || value.isEmpty()) {\n+            throw new IllegalArgumentException(\"Invalid input value. Key: \" + key);\n+        }\n+        return value;\n+    } catch (IOException ex) {\n+        throw ex;\n+    } finally {\n+        if (input != null) {\n+            try {\n+                input.close();\n+            } catch (IOException e) { /* Ignore */ }\n+        }\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}