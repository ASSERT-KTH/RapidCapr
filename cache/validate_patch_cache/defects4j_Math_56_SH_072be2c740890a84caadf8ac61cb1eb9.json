{
    "patch": "        int idx = 1;\n        while (count <= index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        count -= idx;\n        indices[last - 1] = idx;\n        int remainingIndex = index - count;\n        indices[last] = remainingIndex;\n        for (int i = last - 2; i >= 0; i--) {\n            final int offset = uniCounterOffset[i];\n            idx = remainingIndex / offset;\n            indices[i] = idx;\n            remainingIndex -= idx * offset;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..c50c24e45 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,20 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n+        while (count <= index) {\n             count += idx;\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        count -= idx;\n+        indices[last - 1] = idx;\n+        int remainingIndex = index - count;\n+        indices[last] = remainingIndex;\n+        for (int i = last - 2; i >= 0; i--) {\n+            final int offset = uniCounterOffset[i];\n+            idx = remainingIndex / offset;\n+            indices[i] = idx;\n+            remainingIndex -= idx * offset;\n \n         return indices;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}