{
    "patch": "public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0.0) {\n        throw new IllegalArgumentException(\"a must be positive\");\n    }\n    if (x < 0.0) {\n        throw new IllegalArgumentException(\"x must be non-negative\");\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        // Use the upper incomplete gamma function.\n        return 1.0 - regularizedGammaUpper(a, x, epsilon, maxIterations);\n    }\n    // Use the series representation of the lower incomplete gamma function.\n    double series = 1.0 / a;\n    double term = series;\n    int i = 1;\n    while (Math.abs(term / series) > epsilon && i < maxIterations) {\n        term *= x / (a + i);\n        series += term;\n        i++;\n    }\n    return series * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\nprivate static double regularizedGammaUpper(double a, double x, double epsilon, int maxIterations) {\n    double phi = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    double X;\n    double delta;\n    if (x == 0.0) {\n        X = 0.0;\n        delta = 1.0;\n    } else {\n        X = 1.0 - phi;\n        delta = X / x;\n    }\n    for (int n = 1; n <= maxIterations; n++) {\n        double aN = n * (a - n);\n        delta = aN * delta + X;\n        X *= -phi;\n        double term = delta / (aN + x);\n        delta /= x;\n        if (Math.abs(term) <= epsilon) {\n            return phi * (1.0 - X);\n        }\n    }\n    throw new RuntimeException(\"Failed to converge during evaluation of the upper regularized Gamma function.\");\n}\n\nprivate static double logGamma(double x) {\n    if (x <= 0.0) {\n        throw new IllegalArgumentException(\"x must be positive\");\n    }\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ca96957ae 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,64 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0.0) {\n+        throw new IllegalArgumentException(\"a must be positive\");\n+    }\n+    if (x < 0.0) {\n+        throw new IllegalArgumentException(\"x must be non-negative\");\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        // Use the upper incomplete gamma function.\n+        return 1.0 - regularizedGammaUpper(a, x, epsilon, maxIterations);\n+    }\n+    // Use the series representation of the lower incomplete gamma function.\n+    double series = 1.0 / a;\n+    double term = series;\n+    int i = 1;\n+    while (Math.abs(term / series) > epsilon && i < maxIterations) {\n+        term *= x / (a + i);\n+        series += term;\n+        i++;\n+    }\n+    return series * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+private static double regularizedGammaUpper(double a, double x, double epsilon, int maxIterations) {\n+    double phi = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    double X;\n+    double delta;\n+    if (x == 0.0) {\n+        X = 0.0;\n+        delta = 1.0;\n+    } else {\n+        X = 1.0 - phi;\n+        delta = X / x;\n+    }\n+    for (int n = 1; n <= maxIterations; n++) {\n+        double aN = n * (a - n);\n+        delta = aN * delta + X;\n+        X *= -phi;\n+        double term = delta / (aN + x);\n+        delta /= x;\n+        if (Math.abs(term) <= epsilon) {\n+            return phi * (1.0 - X);\n+        }\n+    }\n+    throw new RuntimeException(\"Failed to converge during evaluation of the upper regularized Gamma function.\");\n+}\n+\n+private static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        throw new IllegalArgumentException(\"x must be positive\");\n+    }\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}