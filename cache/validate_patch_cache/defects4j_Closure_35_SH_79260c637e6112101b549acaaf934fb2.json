{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else if (constraintObj != null && constraintObj.isFunctionType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        Iterable<String> paramNames = constraintObj.getOwnPropertyNames();\n        List<Node> parameters = fnType.getParameters();\n        Iterator<Node> itr = parameters.iterator();\n        for (String paramName : paramNames) {\n          JSType paramType = constraintObj.getPropertyType(paramName);\n          if (itr.hasNext()) {\n            Node param = itr.next();\n            JSType typeToInfer =\n                paramType.getGreatestSubtype(param.getDeclaredType());\n            typeToInfer = typeToInfer.getLeastSupertype(param.getDeclaredType());\n            if (!paramType.isSubtype(typeToInfer)) {\n              typeToInfer = paramType.getGreatestSubtype(getNativeType(UNKNOWN_TYPE));\n            }\n            maybeInferQualifiedType(param, typeToInfer, scope);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..28d65c47 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1133,6 +1133,40 @@ class TypeInference\n           }\n         }\n       }\n+    } else if (constraintObj != null && constraintObj.isFunctionType()) {\n+      FunctionType fnType = type.toMaybeFunctionType();\n+      if (fnType != null) {\n+        Iterable<String> paramNames = constraintObj.getOwnPropertyNames();\n+        List<Node> parameters = fnType.getParameters();\n+        Iterator<Node> itr = parameters.iterator();\n+        for (String paramName : paramNames) {\n+          JSType paramType = constraintObj.getPropertyType(paramName);\n+          if (itr.hasNext()) {\n+            Node param = itr.next();\n+            JSType typeToInfer =\n+                paramType.getGreatestSubtype(param.getDeclaredType());\n+            typeToInfer = typeToInfer.getLeastSupertype(param.getDeclaredType());\n+            if (!paramType.isSubtype(typeToInfer)) {\n+              typeToInfer = paramType.getGreatestSubtype(getNativeType(UNKNOWN_TYPE));\n+            }\n+            maybeInferQualifiedType(param, typeToInfer, scope);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * If we access a property of a symbol, then that symbol is not\n+   * null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (type != narrowed) {\n+        scope = narrowScope(scope, n, narrowed);\n+      }\n     }\n   }\n ",
    "result_reason": "error: method dereferencePointer(Node,FlowScope) is already defined in class TypeInference",
    "test_result": "ERROR"
}