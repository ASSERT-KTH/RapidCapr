{
    "patch": "      // If function name is present, position it at the correct line number\n      if (functionNode.getFunctionName() != null) {\n        newName.setLineno(functionNode.getFunctionName().getLineno());\n      }\n      // Otherwise, use the line number of the function node to place the name\n      else {\n        newName.setLineno(functionNode.getLineno());\n      }\n\n      // Place the left parenthesis on the same line as the function name\n      lp.setLineno(newName.getLineno());\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      lp.setCharno(position2charno(lparenCharno));\n\n      // If there's no function name, tag the empty name node with the line\n      // number of the declaration and place the left parenthesis on the same line\n      if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n      }\n\n      node.addChildToBack(newName);\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..66509eff 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,36 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      // If function name is present, position it at the correct line number\n+      if (functionNode.getFunctionName() != null) {\n+        newName.setLineno(functionNode.getFunctionName().getLineno());\n+      }\n+      // Otherwise, use the line number of the function node to place the name\n+      else {\n+        newName.setLineno(functionNode.getLineno());\n+      }\n+\n+      // Place the left parenthesis on the same line as the function name\n+      lp.setLineno(newName.getLineno());\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+      lp.setCharno(position2charno(lparenCharno));\n+\n+      // If there's no function name, tag the empty name node with the line\n+      // number of the declaration and place the left parenthesis on the same line\n+      if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+      }\n+\n+      node.addChildToBack(newName);\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+     return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}