{
    "patch": "protected CompilerOptions createOptions() {\n    if (flags == null || flags.compilation_level == null || flags.warning_level == null) {\n        throw new IllegalArgumentException(\"Flags, compilation_level, and warning_level cannot be null\");\n    }\n\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n\n    flags.compilation_level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        flags.compilation_level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    flags.warning_level.setOptionsForWarningLevel(options);\n\n    if (flags.formatting != null) {\n        for (FormattingOption formattingOption : flags.formatting) {\n            if (formattingOption != null) {\n                formattingOption.applyToOptions(options);\n            }\n        }\n    }\n\n    if (flags.process_closure_primitives != null) {\n        options.closurePass = flags.process_closure_primitives;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..c75677ed 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,31 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n+    if (flags == null || flags.compilation_level == null || flags.warning_level == null) {\n+        throw new IllegalArgumentException(\"Flags, compilation_level, and warning_level cannot be null\");\n+    }\n+\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n+\n+    flags.compilation_level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        flags.compilation_level.setDebugOptionsForCompilationLevel(options);\n     }\n \n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n-    }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+    flags.warning_level.setOptionsForWarningLevel(options);\n+\n+    if (flags.formatting != null) {\n+        for (FormattingOption formattingOption : flags.formatting) {\n+            if (formattingOption != null) {\n+                formattingOption.applyToOptions(options);\n+            }\n+        }\n     }\n \n-    initOptionsFromFlags(options);\n-    return options;\n-  }\n+    if (flags.process_closure_primitives != null) {\n+        options.closurePass = flags.process_closure_primitives;\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}