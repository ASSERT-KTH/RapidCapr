{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // Ambiguous time occurs, return standard offset\n                    return offsetLocal;\n                }\n                int diff = offsetAdjusted - getOffset(nextLocal);\n                if (diff < 0) {\n                    // Gap in time occurs, return gap offset\n                    return offsetAdjusted;\n                } else if (diff > 0) {\n                    // Overlap in time occurs, return overlap offset\n                    return offsetAdjusted - diff;\n                } else {\n                    // Non-existent time occurs, return standard offset\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b2b3818f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // Ambiguous time occurs, return standard offset\n+                    return offsetLocal;\n+                }\n+                int diff = offsetAdjusted - getOffset(nextLocal);\n+                if (diff < 0) {\n+                    // Gap in time occurs, return gap offset\n+                    return offsetAdjusted;\n+                } else if (diff > 0) {\n+                    // Overlap in time occurs, return overlap offset\n+                    return offsetAdjusted - diff;\n+                } else {\n+                    // Non-existent time occurs, return standard offset\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}