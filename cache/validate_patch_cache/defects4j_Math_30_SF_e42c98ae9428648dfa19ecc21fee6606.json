{
    "patch": "private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {\n\n    final int N = n1 + n2;\n\n    // Use a more accurate approximation to the normal distribution mean and variance\n    final double mu_U = n1 * n2 / 2. - Umin;\n    final double var_U = mu_U * (N + 1.) * (n1 + n2 + 1. - N) / 6.;\n\n    final NormalDistribution standardNormal = new NormalDistribution();\n\n    // Compute p-value using either upper or lower tail\n    if (mu_U > 0) {\n        return 2. * standardNormal.cumulativeProbability(-FastMath.sqrt(var_U));\n    }\n    return 2. * standardNormal.cumulativeProbability(FastMath.sqrt(var_U));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..4469f1557 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,23 +165,22 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n-        throws ConvergenceException, MaxCountExceededException {\n+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+    final int N = n1 + n2;\n \n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n+    // Use a more accurate approximation to the normal distribution mean and variance\n+    final double mu_U = n1 * n2 / 2. - Umin;\n+    final double var_U = mu_U * (N + 1.) * (n1 + n2 + 1. - N) / 6.;\n \n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+    final NormalDistribution standardNormal = new NormalDistribution();\n \n-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n-\n-        return 2 * standardNormal.cumulativeProbability(z);\n+    // Compute p-value using either upper or lower tail\n+    if (mu_U > 0) {\n+        return 2. * standardNormal.cumulativeProbability(-FastMath.sqrt(var_U));\n     }\n+    return 2. * standardNormal.cumulativeProbability(FastMath.sqrt(var_U));\n+}\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}