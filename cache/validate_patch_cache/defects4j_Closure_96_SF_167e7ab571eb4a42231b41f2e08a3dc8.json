{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  List<Node> argumentsList = call.children().stream().skip(1).collect(Collectors.toList());\n  int numArgs = argumentsList.size();\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  if (numArgs < minArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != -1 ? \" and up to \" + maxArgs + \" argument(s)\" : \"\");\n    return;\n  }\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  for (int i = 0; i < numArgs && parameters.hasNext(); ++i) {\n    Node parameter = parameters.next();\n    Node argument = argumentsList.get(i);\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, i + 1);\n  }\n\n  if (parameters.hasNext()) {\n    // if there are more parameters than arguments\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != -1 ? \" and up to \" + maxArgs + \" argument(s)\" : \"\");\n  } else if (maxArgs != -1 && numArgs > maxArgs) {\n    // report if there are more arguments than max\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            \"and no more than \" + maxArgs + \" argument(s)\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..dd1c5120 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  List<Node> argumentsList = call.children().stream().skip(1).collect(Collectors.toList());\n+  int numArgs = argumentsList.size();\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  if (numArgs < minArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != -1 ? \" and up to \" + maxArgs + \" argument(s)\" : \"\");\n+    return;\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  for (int i = 0; i < numArgs && parameters.hasNext(); ++i) {\n+    Node parameter = parameters.next();\n+    Node argument = argumentsList.get(i);\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, i + 1);\n   }\n \n+  if (parameters.hasNext()) {\n+    // if there are more parameters than arguments\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != -1 ? \" and up to \" + maxArgs + \" argument(s)\" : \"\");\n+  } else if (maxArgs != -1 && numArgs > maxArgs) {\n+    // report if there are more arguments than max\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            \"and no more than \" + maxArgs + \" argument(s)\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}