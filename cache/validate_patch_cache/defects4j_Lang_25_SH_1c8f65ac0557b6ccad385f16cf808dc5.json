{
    "patch": "public static String unescape(String s) {\n    int i=0,len=s.length();\n    char c;\n    StringBuffer sb = new StringBuffer(len);\n\n    while (i < len) {\n        c = s.charAt(i++);\n        if (c == '\\\\') {\n            if (i < len) {\n                c = s.charAt(i++);\n                if (c == 'n') c = '\\n';\n                else if (c == 'r') c = '\\r';\n                else if (c == 't') c = '\\t';\n                else if (c == 'f') c = '\\f';\n                else if (c == '\\b') c = '\\b';\n                else if (c == '\\\"') c = '\\\"';\n                else if (c == '\\'') c = '\\'';\n                else if (c == '\\\\') c = '\\\\';\n                else if (c == 'u') {\n                    if (i+4 <= len) {\n                        try {\n                            c = (char)Integer.parseInt(s.substring(i,i+4),16);\n                            i += 4;\n                        } catch (NumberFormatException e) {\n                            throw new IllegalArgumentException(\"Malformed \\\\uxxxx encoding.\", e);\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\"Malformed \\\\uxxxx encoding.\");\n                    }\n                }\n            }\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}