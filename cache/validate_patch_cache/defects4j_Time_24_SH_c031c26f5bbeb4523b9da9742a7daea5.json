{
    "patch": "        long adjustedMillis = millis;\n        boolean next = false;\n        do {\n            next = false;\n            for (int i = 0; i < count; i++) {\n                try {\n                    long newAdjustedMillis = savedFields[i].set(adjustedMillis, resetFields);\n                    if (adjustedMillis != newAdjustedMillis) {\n                        adjustedMillis = newAdjustedMillis;\n                        int newOffset = iZone.getOffset(adjustedMillis);\n                        if (newOffset != iZone.getOffset(millis)) {\n                            next = true;\n                            millis =  adjustedMillis - iZone.getOffsetFromLocal(adjustedMillis);\n                            break;\n                        }\n                    }\n                } catch (IllegalArgumentException e) {\n                    if (text != null) {\n                        String message = \"Cannot parse \\\"\" + text + '\"';\n                        if (e.getMessage() != null && !e.getMessage().isEmpty()) {\n                            message += \": \" + e.getMessage();\n                        }\n                        throw new IllegalArgumentException(message);\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n        } while (next);\n\n        if (adjustedMillis < 0 && adjustedMillis + 24 * 60 * 60 * 1000 >= 0) {\n            // handle single negative day due to daylight savings time jump\n            adjustedMillis += 24 * 60 * 60 * 1000;\n            adjustedMillis = iChrono.dayOfYear().set(adjustedMillis, 1);\n            adjustedMillis = iChrono.year().add(adjustedMillis, 1);\n        }\n\n        if (iZone == null) {\n            adjustedMillis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(adjustedMillis);\n            adjustedMillis -= offset;\n            if (offset != iZone.getOffset(adjustedMillis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        millis = adjustedMillis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..95045b60 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,58 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long adjustedMillis = millis;\n+        boolean next = false;\n+        do {\n+            next = false;\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    long newAdjustedMillis = savedFields[i].set(adjustedMillis, resetFields);\n+                    if (adjustedMillis != newAdjustedMillis) {\n+                        adjustedMillis = newAdjustedMillis;\n+                        int newOffset = iZone.getOffset(adjustedMillis);\n+                        if (newOffset != iZone.getOffset(millis)) {\n+                            next = true;\n+                            millis =  adjustedMillis - iZone.getOffsetFromLocal(adjustedMillis);\n+                            break;\n+                        }\n+                    }\n+                } catch (IllegalArgumentException e) {\n+                    if (text != null) {\n+                        String message = \"Cannot parse \\\"\" + text + '\"';\n+                        if (e.getMessage() != null && !e.getMessage().isEmpty()) {\n+                            message += \": \" + e.getMessage();\n+                        }\n+                        throw new IllegalArgumentException(message);\n+                    } else {\n+                        throw e;\n+                    }\n+                }\n+            }\n+        } while (next);\n+\n+        if (adjustedMillis < 0 && adjustedMillis + 24 * 60 * 60 * 1000 >= 0) {\n+            // handle single negative day due to daylight savings time jump\n+            adjustedMillis += 24 * 60 * 60 * 1000;\n+            adjustedMillis = iChrono.dayOfYear().set(adjustedMillis, 1);\n+            adjustedMillis = iChrono.year().add(adjustedMillis, 1);\n+        }\n+\n+        if (iZone == null) {\n+            adjustedMillis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(adjustedMillis);\n+            adjustedMillis -= offset;\n+            if (offset != iZone.getOffset(adjustedMillis)) {\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+\n+        millis = adjustedMillis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}