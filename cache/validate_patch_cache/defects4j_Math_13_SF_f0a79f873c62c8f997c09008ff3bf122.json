{
    "patch": "private static RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(getSqrtArray(dec.getRealEigenvalues()));\n        final RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n        return sqrtM;\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n    }\n}\n\nprivate static double[] getSqrtArray(double[] ar) {\n    double[] result = new double[ar.length];\n    for (int i = 0; i < ar.length; i++) {\n        result[i] = Math.sqrt(ar[i]);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4bd1000d5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(getSqrtArray(dec.getRealEigenvalues()));\n+        final RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+        return sqrtM;\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n     }\n }\n+\n+private static double[] getSqrtArray(double[] ar) {\n+    double[] result = new double[ar.length];\n+    for (int i = 0; i < ar.length; i++) {\n+        result[i] = Math.sqrt(ar[i]);\n+    }\n+    return result;\n+}\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}