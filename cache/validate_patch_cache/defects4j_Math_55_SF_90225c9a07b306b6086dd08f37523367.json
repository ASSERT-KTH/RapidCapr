{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double normProduct = v1.getNorm() * v2.getNorm();\n    final double sin = Vector3D.dotProduct(v1, v2) / normProduct;\n    if (sin > 1 - 1e-10 || sin < -1 + 1e-10) {\n        // if the sine of the angle is close to zero, the vectors are almost parallel\n        return sin > 0 ? Vector3D.PLUS_K : Vector3D.MINUS_K;\n    }\n\n    final double cos = Vector3D.dotProduct(v1, v2) / normProduct;\n    final double angle = FastMath.atan2(sin, cos);\n\n    Vector3D crossProduct = new Vector3D(v1.getY() * v2.getZ() - v2.getY() * v1.getZ(),\n                                v1.getZ() * v2.getX() - v2.getZ() * v1.getX(),\n                                v1.getX() * v2.getY() - v2.getX() * v1.getY());\n    if (angle < 0) {\n        crossProduct = crossProduct.negate();\n    }\n    return crossProduct;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..81d8dd683 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,29 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double normProduct = v1.getNorm() * v2.getNorm();\n+    final double sin = Vector3D.dotProduct(v1, v2) / normProduct;\n+    if (sin > 1 - 1e-10 || sin < -1 + 1e-10) {\n+        // if the sine of the angle is close to zero, the vectors are almost parallel\n+        return sin > 0 ? Vector3D.PLUS_K : Vector3D.MINUS_K;\n+    }\n \n+    final double cos = Vector3D.dotProduct(v1, v2) / normProduct;\n+    final double angle = FastMath.atan2(sin, cos);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    Vector3D crossProduct = new Vector3D(v1.getY() * v2.getZ() - v2.getY() * v1.getZ(),\n+                                v1.getZ() * v2.getX() - v2.getZ() * v1.getX(),\n+                                v1.getX() * v2.getY() - v2.getX() * v1.getY());\n+    if (angle < 0) {\n+        crossProduct = crossProduct.negate();\n+    }\n+    return crossProduct;\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<0.0>",
    "test_result": "FAIL"
}