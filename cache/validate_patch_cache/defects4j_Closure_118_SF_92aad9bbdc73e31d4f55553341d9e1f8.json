{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild();\n            child != null;\n            child = child.getNext()) {\n        if(child.isObjectLit()) {\n            handleObjectLit(t, child);\n        } else if (child.isGetProp()) {\n            handleGetProp(t, child);\n        } else if (child.isString()) {\n            handleString(t, child);\n        }\n    }\n}\n  \nprivate void handleGetProp(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild();\n            child != null;\n            child = child.getNext()) {\n        if(child.isGetProp()) {\n            handleGetProp(t, child);\n        } else if (child.isString()) {\n            handleString(t, child);\n        }\n    }\n}\n  \nprivate void handleString(NodeTraversal t, Node n) {\n    String name = n.getString();\n    T type = typeSystem.getType(getScope(), n.getParent(), name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(n,\n            processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), n,\n                propertiesToErrorFor.get(name), Warnings.INVALIDATION,\n                name, (type == null ? \"null\" : type.toString()),\n                n.getParent().toString(), \"\"));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..4ceeccf2 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,48 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild();\n+            child != null;\n+            child = child.getNext()) {\n+        if(child.isObjectLit()) {\n+            handleObjectLit(t, child);\n+        } else if (child.isGetProp()) {\n+            handleGetProp(t, child);\n+        } else if (child.isString()) {\n+            handleString(t, child);\n+        }\n+    }\n+}\n+  \n+private void handleGetProp(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild();\n+            child != null;\n+            child = child.getNext()) {\n+        if(child.isGetProp()) {\n+            handleGetProp(t, child);\n+        } else if (child.isString()) {\n+            handleString(t, child);\n+        }\n+    }\n+}\n+  \n+private void handleString(NodeTraversal t, Node n) {\n+    String name = n.getString();\n+    T type = typeSystem.getType(getScope(), n.getParent(), name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(n,\n+            processProperty(t, prop, type, null))) {\n+        if (propertiesToErrorFor.containsKey(name)) {\n             compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+                t.getSourceName(), n,\n+                propertiesToErrorFor.get(name), Warnings.INVALIDATION,\n+                name, (type == null ? \"null\" : type.toString()),\n+                n.getParent().toString(), \"\"));\n         }\n-      }\n     }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: method handleGetProp(NodeTraversal,Node) is already defined in class DisambiguateProperties.FindRenameableProperties",
    "test_result": "ERROR"
}