{
    "patch": "public class StringUtils {\n    \n    public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return false;\n        }\n        final int csLength = cs.length();\n        final int searchCharsLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchLast = searchCharsLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            final char ch = cs.charAt(i);\n            for (int j = 0; j < searchCharsLength; j++) {\n                if (searchChars[j] > Character.MAX_VALUE) {\n                    final char[] surrogatePair = Character.toChars(searchChars[j]);\n                    if (i < csLast && Arrays.equals(surrogatePair, new char[] {ch, cs.charAt(i + 1)})) {\n                        return true;\n                    }\n                } else {\n                    if (ch == searchChars[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..ad78b934 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,34 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n+        if (cs == null || searchChars == null) {\n+            return false;\n+        }\n+        final int csLength = cs.length();\n+        final int searchCharsLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchLast = searchCharsLength - 1;\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = cs.charAt(i);\n+            for (int j = 0; j < searchCharsLength; j++) {\n+                if (searchChars[j] > Character.MAX_VALUE) {\n+                    final char[] surrogatePair = Character.toChars(searchChars[j]);\n+                    if (i < csLast && Arrays.equals(surrogatePair, new char[] {ch, cs.charAt(i + 1)})) {\n+                        return true;\n+                    }\n+                } else {\n+                    if (ch == searchChars[j]) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}