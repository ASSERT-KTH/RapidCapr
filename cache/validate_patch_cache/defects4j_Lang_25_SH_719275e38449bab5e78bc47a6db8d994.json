{
    "patch": "final byte[] bOut = new byte[length - 1];\nint outLen = 0;\nfor (int i = 1; i != length; i++) {\n    byte c = in[i];\n    if (c == '_') {\n        bOut[outLen++] = (byte) ' ';\n    } else {\n        if (c != '=') {\n            bOut[outLen++] = c;\n        } else {\n            // (c == '=')\n            i++;\n            try {\n                bOut[outLen++] = (byte) Integer.parseInt(new String(in, i, 2), 16);\n            } catch (final NumberFormatException e) {\n                throw new DecoderException(\"Invalid URL encoding: \" + new String(in), e);\n            }\n            i++; \n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}