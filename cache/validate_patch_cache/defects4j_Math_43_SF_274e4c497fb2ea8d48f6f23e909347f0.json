{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    // If mean, variance or geomean have been overridden,\n    // need to increment these\n    if (meanImpl != null) {\n        meanImpl.increment(value);\n    } else {\n        // If mean is not overridden, calculate it using sum\n        meanImpl = new Mean();\n        meanImpl.increment(sumImpl.getResult() / n);\n    }\n    if (varianceImpl != null) {\n        varianceImpl.increment(value);\n    } else {\n        // If variance is not overridden, calculate it using sum, sum of squares, and n\n        varianceImpl = new Variance();\n        varianceImpl.increment(sumImpl.getResult(), sumsqImpl.getResult(), n);\n    }\n    if (geoMeanImpl != null) {\n        geoMeanImpl.increment(value);\n    } else {\n        // If geomean is not overridden, calculate it using second moment and n\n        geoMeanImpl = new GeometricMean();\n        geoMeanImpl.increment(secondMoment.getResult(), n);\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..4d88bdfda 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,38 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n-    }\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    // If mean, variance or geomean have been overridden,\n+    // need to increment these\n+    if (meanImpl != null) {\n+        meanImpl.increment(value);\n+    } else {\n+        // If mean is not overridden, calculate it using sum\n+        meanImpl = new Mean();\n+        meanImpl.increment(sumImpl.getResult() / n);\n+    }\n+    if (varianceImpl != null) {\n+        varianceImpl.increment(value);\n+    } else {\n+        // If variance is not overridden, calculate it using sum, sum of squares, and n\n+        varianceImpl = new Variance();\n+        varianceImpl.increment(sumImpl.getResult(), sumsqImpl.getResult(), n);\n+    }\n+    if (geoMeanImpl != null) {\n+        geoMeanImpl.increment(value);\n+    } else {\n+        // If geomean is not overridden, calculate it using second moment and n\n+        geoMeanImpl = new GeometricMean();\n+        geoMeanImpl.increment(secondMoment.getResult(), n);\n+    }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: method increment in interface StorelessUnivariateStatistic cannot be applied to given types;",
    "test_result": "ERROR"
}