{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        final long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 0;\n        long q0 = 1;\n        long p1 = 1;\n        long q1 = 0;\n        long p2 = a0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long) FastMath.floor(r1);\n\n            long p3 = a1 * p2 + p1;\n            long q3 = a1 * q2 + q1;\n\n            if (q3 > maxDenominator) {\n                if (q2 <= maxDenominator) {\n                    this.numerator = (int) p2;\n                    this.denominator = (int) q2;\n                    return;\n                }\n                long deltaP = p1 - p0;\n                long deltaQ = q1 - q0;\n\n                for (int i = 0; i < 2; i++) {\n                    if (deltaP * q2 - p2 * deltaQ <= 0) {\n                        this.numerator = (int) p1;\n                        this.denominator = (int) q1;\n                    } else {\n                        this.numerator = (int) p2;\n                        this.denominator = (int) q2;\n                    }\n                    maxDenominator++;\n                }\n                return;\n            }\n\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            p2 = p3;\n            q2 = q3;\n\n            if (q2 != 0 && (n < maxIterations) && (FastMath.abs((double) p2 / (double) q2 - value) > epsilon)\n                && (FastMath.abs((double) q1 / (double) q2) < overflow)) {\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n        this.numerator = (int) p2;\n        this.denominator = (int) q2;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..4730ebf28 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,12 +172,12 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n         throws FractionConversionException\n     {\n-        long overflow = Integer.MAX_VALUE;\n+        final long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n+        long a0 = (long) FastMath.floor(r0);\n         if (a0 > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n@@ -190,32 +190,55 @@ public class Fraction\n             return;\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n+        long p0 = 0;\n+        long q0 = 1;\n+        long p1 = 1;\n+        long q1 = 0;\n+        long p2 = a0;\n         long q2 = 1;\n \n         int n = 0;\n         boolean stop = false;\n+\n         do {\n             ++n;\n             double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+            long a1 = (long) FastMath.floor(r1);\n+\n+            long p3 = a1 * p2 + p1;\n+            long q3 = a1 * q2 + q1;\n+\n+            if (q3 > maxDenominator) {\n+                if (q2 <= maxDenominator) {\n+                    this.numerator = (int) p2;\n+                    this.denominator = (int) q2;\n+                    return;\n+                }\n+                long deltaP = p1 - p0;\n+                long deltaQ = q1 - q0;\n+\n+                for (int i = 0; i < 2; i++) {\n+                    if (deltaP * q2 - p2 * deltaQ <= 0) {\n+                        this.numerator = (int) p1;\n+                        this.denominator = (int) q1;\n+                    } else {\n+                        this.numerator = (int) p2;\n+                        this.denominator = (int) q2;\n+                    }\n+                    maxDenominator++;\n+                }\n+                return;\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n+            p0 = p1;\n+            p1 = p2;\n+            q0 = q1;\n+            q1 = q2;\n+            p2 = p3;\n+            q2 = q3;\n+\n+            if (q2 != 0 && (n < maxIterations) && (FastMath.abs((double) p2 / (double) q2 - value) > epsilon)\n+                && (FastMath.abs((double) q1 / (double) q2) < overflow)) {\n                 a0 = a1;\n                 r0 = r1;\n             } else {\n@@ -226,15 +249,8 @@ public class Fraction\n         if (n >= maxIterations) {\n             throw new FractionConversionException(value, maxIterations);\n         }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n-        }\n-\n+        this.numerator = (int) p2;\n+        this.denominator = (int) q2;\n     }\n \n     /**",
    "result_reason": "error: variable numerator might be assigned in loop",
    "test_result": "ERROR"
}