{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] result = x.clone();\n    for (int i = 0; i < result.length; i++) {\n        if (result[i] < lower[i]) {\n            result[i] = lower[i] + Math.abs(upper[i] - lower[i]) / 2;\n        } else if (result[i] > upper[i]) {\n            result[i] = upper[i] - Math.abs(upper[i] - lower[i]) / 2;\n        }\n    }\n    return decode(result);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..b54d5dbe6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,17 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] result = x.clone();\n+    for (int i = 0; i < result.length; i++) {\n+        if (result[i] < lower[i]) {\n+            result[i] = lower[i] + Math.abs(upper[i] - lower[i]) / 2;\n+        } else if (result[i] > upper[i]) {\n+            result[i] = upper[i] - Math.abs(upper[i] - lower[i]) / 2;\n         }\n+    }\n+    return decode(result);\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}