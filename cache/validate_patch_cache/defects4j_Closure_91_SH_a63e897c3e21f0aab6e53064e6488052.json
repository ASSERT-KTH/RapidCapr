{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n\n          // Don't traverse functions that are getting lent to a prototype.\n          if (rhs.getType() == Token.FUNCTION) {\n            JSDocInfo jsDoc = getFunctionJsDocInfo(rhs);\n            if (jsDoc != null &&\n                (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.isOverride())) {\n              return false;\n            }\n            // Functions being lent shouldn't have returns or other side effects.\n            NodeTraversal lendingTraversal =\n                new NodeTraversal(compiler, new LendingFunctionCallback());\n            lendingTraversal.traverseInnerNode(rhs, parent);\n\n            // In general assigning a pseudonym to a function is an unsafe thing\n            // to do if the function uses the 'this' keyword. However we allow\n            // it in some simple situations, as follows.\n            if (jsDoc == null || !jsDoc.hasThisType()) {\n              isSimpleLValue = true;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..831e8547 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,53 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+\n+          // Don't traverse functions that are getting lent to a prototype.\n+          if (rhs.getType() == Token.FUNCTION) {\n+            JSDocInfo jsDoc = getFunctionJsDocInfo(rhs);\n+            if (jsDoc != null &&\n+                (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.isOverride())) {\n+              return false;\n+            }\n+            // Functions being lent shouldn't have returns or other side effects.\n+            NodeTraversal lendingTraversal =\n+                new NodeTraversal(compiler, new LendingFunctionCallback());\n+            lendingTraversal.traverseInnerNode(rhs, parent);\n+\n+            // In general assigning a pseudonym to a function is an unsafe thing\n+            // to do if the function uses the 'this' keyword. However we allow\n+            // it in some simple situations, as follows.\n+            if (jsDoc == null || !jsDoc.hasThisType()) {\n+              isSimpleLValue = true;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}