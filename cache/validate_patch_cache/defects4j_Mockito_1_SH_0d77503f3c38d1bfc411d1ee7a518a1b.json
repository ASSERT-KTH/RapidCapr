{
    "patch": "    Object[] rawArguments = invocation.getRawArguments();\n    int index = 0;\n    for (Matcher matcher: matchers) {\n        if (matcher instanceof CapturesArguments) {\n            if(invocation.getMethod().isVarArgs() && index >= invocation.getMethod().getParameterCount()-1 \n                && isVarargMatcher(matcher)){\n                Object varAr",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5372f5a71 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] rawArguments = invocation.getRawArguments();\n+    int index = 0;\n+    for (Matcher matcher: matchers) {\n+        if (matcher instanceof CapturesArguments) {\n+            if(invocation.getMethod().isVarArgs() && index >= invocation.getMethod().getParameterCount()-1 \n+                && isVarargMatcher(matcher)){\n+                Object varAr\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}