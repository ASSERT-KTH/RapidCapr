{
    "patch": " private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // NOTICE: removing unreferenced function args breaks\n    // Function.prototype.length. In advance mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source. Rather than create a new option for\n    // this, we assume that if the user is removing globals then it's OK\n    // to remove unused function args.\n    //\n    // see http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } else {\n      // Strip unreferenced args off the end of the function declaration.\n      int count = 0;\n      for (Node arg : argList.children()) {\n        if (!arg.isName() ||\n            referenced.contains(fnScope.getVar(arg.getString()))) {\n          break;\n        }\n\n        ++count;\n        arg.removeFirstChild();\n        compiler.reportCodeChange();\n      }\n\n      if (count != argList.getChildCount()) {\n        if (count == 0) {\n          // All the args were unused, we simply remove all of them.\n          argList.removeChildren();\n        } else {\n          // Remove the remaining unused args.\n          Node toRemove = argList.getLastChild();\n          while (count > 1) {\n            Node previous = toRemove.getPrevious();\n            argList.removeChild(toRemove);\n            toRemove = previous;\n            --count;\n          }\n          toRemove.detachFromParent();\n          compiler.reportCodeChange();\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c19a6664 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,42 +366,56 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n+ private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // NOTICE: removing unreferenced function args breaks\n+    // Function.prototype.length. In advance mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n+    // the function's lexical source. Rather than create a new option for\n+    // this, we assume that if the user is removing globals then it's OK\n+    // to remove unused function args.\n     //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+    // see http://code.google.com/p/closure-compiler/issues/detail?id=253\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n     }\n-\n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n+      int count = 0;\n+      for (Node arg : argList.children()) {\n+        if (!arg.isName() ||\n+            referenced.contains(fnScope.getVar(arg.getString()))) {\n           break;\n         }\n+\n+        ++count;\n+        arg.removeFirstChild();\n+        compiler.reportCodeChange();\n+      }\n+\n+      if (count != argList.getChildCount()) {\n+        if (count == 0) {\n+          // All the args were unused, we simply remove all of them.\n+          argList.removeChildren();\n+        } else {\n+          // Remove the remaining unused args.\n+          Node toRemove = argList.getLastChild();\n+          while (count > 1) {\n+            Node previous = toRemove.getPrevious();\n+            argList.removeChild(toRemove);\n+            toRemove = previous;\n+            --count;\n+          }\n+          toRemove.detachFromParent();\n+          compiler.reportCodeChange();\n+        }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}