{
    "patch": "      attachLiteralTypes(n);\n      \n      if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n      }\n\n      if (NodeUtil.isFunctionDeclaration(n) && parent.getLastChild() == n) {\n        defineDeclaredFunction(n, parent.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..eb5721c5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,20 +1449,24 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      \n+      if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n       }\n+\n+      if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+      }\n+\n+      if (NodeUtil.isFunctionDeclaration(n) && parent.getLastChild() == n) {\n+        defineDeclaredFunction(n, parent.getParent());\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}