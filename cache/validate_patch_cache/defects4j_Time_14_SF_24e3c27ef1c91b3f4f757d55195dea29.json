{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int monthIndex = indexOfSupported(partial, DateTimeFieldType.monthOfYear());\n        int yearIndex = indexOfSupported(partial, DateTimeFieldType.year());\n        if (monthIndex < 0 || yearIndex < 0) {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n        int months = valueToAdd;\n        int yearAdd = months / 12;\n        int monthOfYear = values[monthIndex] + (months % 12);\n        int year = values[yearIndex] + yearAdd;\n        if (monthOfYear < 1 || monthOfYear > 12) {\n            year += monthOfYear / 12;\n            monthOfYear = monthOfYear % 12;\n            if (monthOfYear < 1) {\n                monthOfYear += 12;\n            }\n        }\n        int dayOfMonth = values[indexOfSupported(partial, DateTimeFieldType.dayOfMonth())];\n        int maxDay = iChronology.getMaximumValue(DateTimeFieldType.dayOfMonth(), iChronology.getYearMonthMillis(year, monthOfYear));\n        if (dayOfMonth > maxDay) {\n            dayOfMonth = maxDay;\n        }\n        return set(partial, yearIndex, year, monthIndex, monthOfYear, indexOfSupported(partial, DateTimeFieldType.dayOfMonth()), dayOfMonth);\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..70963a42 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int monthIndex = indexOfSupported(partial, DateTimeFieldType.monthOfYear());\n+        int yearIndex = indexOfSupported(partial, DateTimeFieldType.year());\n+        if (monthIndex < 0 || yearIndex < 0) {\n+            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int months = valueToAdd;\n+        int yearAdd = months / 12;\n+        int monthOfYear = values[monthIndex] + (months % 12);\n+        int year = values[yearIndex] + yearAdd;\n+        if (monthOfYear < 1 || monthOfYear > 12) {\n+            year += monthOfYear / 12;\n+            monthOfYear = monthOfYear % 12;\n+            if (monthOfYear < 1) {\n+                monthOfYear += 12;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        int dayOfMonth = values[indexOfSupported(partial, DateTimeFieldType.dayOfMonth())];\n+        int maxDay = iChronology.getMaximumValue(DateTimeFieldType.dayOfMonth(), iChronology.getYearMonthMillis(year, monthOfYear));\n+        if (dayOfMonth > maxDay) {\n+            dayOfMonth = maxDay;\n+        }\n+        return set(partial, yearIndex, year, monthIndex, monthOfYear, indexOfSupported(partial, DateTimeFieldType.dayOfMonth()), dayOfMonth);\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}