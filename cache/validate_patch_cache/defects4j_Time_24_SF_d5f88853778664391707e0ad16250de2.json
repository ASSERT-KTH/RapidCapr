{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis = iMillis;\n    int year = iDefaultYear;\n\n    try {\n        for (int i = 0; i < count; i++) {\n            DurationField fieldToSet = savedFields[i].iField.getDurationField();\n            int value = savedFields[i].iValue;\n\n            if (fieldToSet.equals(DurationFieldType.months().getField(iChrono))) {\n                // Handle month fields\n                int month = value;\n                if (month < 1 || month > 12) {\n                    if (resetFields) {\n                        // Reset all the saved fields and try again\n                        iSavedFieldsCount = 0;\n                        count = 0;\n                        break;\n                    } else {\n                        throw new IllegalFieldValueException(\n                                DateTimeFieldType.monthOfYear(), value,\n                                DateTimeFieldType.monthOfYear().getMinimumValue(),\n                                DateTimeFieldType.monthOfYear().getMaximumValue()\n                        );\n                    }\n                }\n            } else if (fieldToSet.equals(DurationFieldType.years().getField(iChrono))) {\n                year = value;\n            }\n\n            millis = savedFields[i].set(millis, resetFields);\n        }\n\n        if (count > 0) {\n            // Re-sort the fields after handling potentially out-of-range months\n            sort(savedFields, count);\n\n            // Adjust the year if necessary\n            DateTimeField firstField = savedFields[0].iField;\n            int firstValue = savedFields[0].iValue;\n            if (firstField.getDurationField().equals(DurationFieldType.months().getField(iChrono))) {\n                try {\n                    // Attempt to create a LocalDate with the current fields\n                    new LocalDate(year, firstValue, 1, iChrono);\n                } catch (IllegalFieldValueException e) {\n                    if (e.getFieldType().equals(DateTimeFieldType.monthOfYear())) {\n                        // First field is a month that's out of range, adjust the year accordingly\n                        int month = firstValue;\n                        int minMonth = firstField.getMinimumValue();\n                        int maxMonth = firstField.getMaximumValue();\n\n                        if (month > maxMonth) {\n                            year += (month - maxMonth) / 12;\n                        } else if (month < minMonth) {\n                            year += (month - minMonth) / 12;\n                        }\n                    }\n                }\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ae1d649c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,98 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    long millis = iMillis;\n+    int year = iDefaultYear;\n+\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            DurationField fieldToSet = savedFields[i].iField.getDurationField();\n+            int value = savedFields[i].iValue;\n+\n+            if (fieldToSet.equals(DurationFieldType.months().getField(iChrono))) {\n+                // Handle month fields\n+                int month = value;\n+                if (month < 1 || month > 12) {\n+                    if (resetFields) {\n+                        // Reset all the saved fields and try again\n+                        iSavedFieldsCount = 0;\n+                        count = 0;\n+                        break;\n+                    } else {\n+                        throw new IllegalFieldValueException(\n+                                DateTimeFieldType.monthOfYear(), value,\n+                                DateTimeFieldType.monthOfYear().getMinimumValue(),\n+                                DateTimeFieldType.monthOfYear().getMaximumValue()\n+                        );\n+                    }\n+                }\n+            } else if (fieldToSet.equals(DurationFieldType.years().getField(iChrono))) {\n+                year = value;\n             }\n+\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        if (count > 0) {\n+            // Re-sort the fields after handling potentially out-of-range months\n+            sort(savedFields, count);\n+\n+            // Adjust the year if necessary\n+            DateTimeField firstField = savedFields[0].iField;\n+            int firstValue = savedFields[0].iValue;\n+            if (firstField.getDurationField().equals(DurationFieldType.months().getField(iChrono))) {\n+                try {\n+                    // Attempt to create a LocalDate with the current fields\n+                    new LocalDate(year, firstValue, 1, iChrono);\n+                } catch (IllegalFieldValueException e) {\n+                    if (e.getFieldType().equals(DateTimeFieldType.monthOfYear())) {\n+                        // First field is a month that's out of range, adjust the year accordingly\n+                        int month = firstValue;\n+                        int minMonth = firstField.getMinimumValue();\n+                        int maxMonth = firstField.getMaximumValue();\n+\n+                        if (month > maxMonth) {\n+                            year += (month - maxMonth) / 12;\n+                        } else if (month < minMonth) {\n+                            year += (month - minMonth) / 12;\n+                        }\n+                    }\n+                }\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}