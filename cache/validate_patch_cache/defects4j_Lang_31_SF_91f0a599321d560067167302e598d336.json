{
    "patch": "I apologize for the mistake. Here's the corrected implementation of the `containsAny` function:\n\n```\nimport java.util.Arrays;\n\npublic class StringUtils {\n    \n    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n            return false;\n        }\n        final int length = sequence.length();\n        final int searchLength = searchCharacters.length;\n        if (searchLength == 1) {\n            final char searchChar = searchCharacters[0];\n            for (int i = 0; i < length; i++) {\n                if (sequence.charAt(i) == searchChar) {\n                    return true;\n                }\n            }\n        } else {\n            final int[] searchChars = CharUtils.toCodePoints(searchCharacters);\n            final int[] strChars = toCodePoints(sequence);\n            outer:\n            for (int searchChar : searchChars) {\n                for (int strChar : strChars) {\n                    if (searchChar == strChar) {\n                        if (Character.isSupplementaryCodePoint(searchChar)) {\n                            final char[] chrs = Character.toChars(searchChar);\n                            if (contains(strChars, chrs[0]) && contains(strChars, chrs[1])) {\n                                continue outer;\n                            }\n                        }\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n    private static int[] toCodePoints(CharSequence str) {\n        if (isEmpty(str)) {\n            return new int[0];\n        }\n        final String s = str.toString();\n        final int len = s.length();\n        final int[] result = new int[len];\n        int index = 0;\n        for (int i = 0; i < len; ) {\n            final int cp = s.codePointAt(i);\n            result[index++] = cp;\n            i += Character.charCount(cp);\n        }\n        return Arrays.copyOf(result, index);\n    }\n    \n    private static boolean contains(int[] array, int valueToFind) {\n        for (int value : array) {\n            if (value == valueToFind) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}\n\nclass ArrayUtils {\n    public static boolean isEmpty(Object[] array) {\n        return array == null || array.length == 0;\n    }\n}\n\nclass CharUtils {\n    public static int[] toCodePoints(char[] chars) {\n        if (chars == null) {\n            return null;\n        }\n        if (chars.length == 0) {\n            return new int[0];\n        }\n        String str = new String(chars);\n        return str.codePoints().toArray();\n    }\n}\n```\n\nThis implementation should pass all the tests including `testContainsAnyCharArrayWithSupplementaryChars`.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..bd51a2d9 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,98 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the mistake. Here's the corrected implementation of the `containsAny` function:\n+\n+```\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+            return false;\n+        }\n+        final int length = sequence.length();\n+        final int searchLength = searchCharacters.length;\n+        if (searchLength == 1) {\n+            final char searchChar = searchCharacters[0];\n+            for (int i = 0; i < length; i++) {\n+                if (sequence.charAt(i) == searchChar) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            final int[] searchChars = CharUtils.toCodePoints(searchCharacters);\n+            final int[] strChars = toCodePoints(sequence);\n+            outer:\n+            for (int searchChar : searchChars) {\n+                for (int strChar : strChars) {\n+                    if (searchChar == strChar) {\n+                        if (Character.isSupplementaryCodePoint(searchChar)) {\n+                            final char[] chrs = Character.toChars(searchChar);\n+                            if (contains(strChars, chrs[0]) && contains(strChars, chrs[1])) {\n+                                continue outer;\n+                            }\n+                        }\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    private static int[] toCodePoints(CharSequence str) {\n+        if (isEmpty(str)) {\n+            return new int[0];\n+        }\n+        final String s = str.toString();\n+        final int len = s.length();\n+        final int[] result = new int[len];\n+        int index = 0;\n+        for (int i = 0; i < len; ) {\n+            final int cp = s.codePointAt(i);\n+            result[index++] = cp;\n+            i += Character.charCount(cp);\n+        }\n+        return Arrays.copyOf(result, index);\n+    }\n+    \n+    private static boolean contains(int[] array, int valueToFind) {\n+        for (int value : array) {\n+            if (value == valueToFind) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n+\n+class ArrayUtils {\n+    public static boolean isEmpty(Object[] array) {\n+        return array == null || array.length == 0;\n+    }\n+}\n+\n+class CharUtils {\n+    public static int[] toCodePoints(char[] chars) {\n+        if (chars == null) {\n+            return null;\n+        }\n+        if (chars.length == 0) {\n+            return new int[0];\n+        }\n+        String str = new String(chars);\n+        return str.codePoints().toArray();\n+    }\n+}\n+```\n+\n+This implementation should pass all the tests including `testContainsAnyCharArrayWithSupplementaryChars`.\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}