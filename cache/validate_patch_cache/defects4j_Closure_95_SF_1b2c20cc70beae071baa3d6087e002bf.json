{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(variableName != null && !variableName.isEmpty(),\n      \"Variable name not present or empty.\");\n\n  Scope currentScope = scope;\n  boolean shouldDeclareOnGlobalThis = false;\n\n  if (n.isName()) {\n    Preconditions.checkArgument(parent.isFunction() || parent.isVar() || parent.isParamList() || parent.isCatch(),\n        \"Invalid parent node type for name expression.\");\n    shouldDeclareOnGlobalThis = currentScope.isGlobal() && (parent.isVar() || parent.isFunction());\n  } else if (n.isGetProp()) {\n    Preconditions.checkArgument(parent.isExprResult() || NodeUtil.isAssignmentOp(parent),\n        \"Invalid parent node type for property expression.\");\n    // Traverse up to the root of the property reference.\n    Node root = n;\n    while (root.getFirstChild() != null && root.getFirstChild().isGetProp()) {\n      root = root.getFirstChild();\n    }\n    if (root.getFirstChild() != null && root.getFirstChild().isName()) {\n      String rootName = root.getFirstChild().getString();\n      Var var = currentScope.getVar(rootName);\n      // If the reference is to a local property of an object, declare it in the object's scope instead.\n      if (var != null && var.getType() != null && var.getType().isObject() && n instanceof Node) {\n        Node objNode = root.getNext();\n        if (objNode != null && objNode.isObjectLit()) {\n          JSType objectType = var.getType();\n          ObjectType objType = objectType.toObjectType();\n          // Declare the property in the object's scope.\n          Scope objScope = objType.getScope();\n          if (objScope == null) {\n            objScope = currentScope.getParentScope().declareScope(variableName,\n                objectType.toMaybeObjectType(), null);\n          }\n          declareInScope(objScope, objNode.getLastChild(), type, inferred, sourceName);\n          return;\n        }\n      }\n    }\n  } else {\n    throw new IllegalArgumentException(\"Invalid node type.\");\n  }\n\n  // Declare the variable in the current scope.\n  CompilerInput input = compiler.getInput(sourceName);\n  boolean isExtern = input.isExtern();\n  if (!inferred) {\n    setDeferredType(n, type);\n  }\n  boolean isDeclared = currentScope.isDeclared(variableName, false);\n  if (isDeclared && !currentScope.isGlobal()) {\n    Var oldVar = currentScope.getVar(variableName);\n    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n  } else if (!isDeclared) {\n    currentScope.declare(variableName, n, type, input, inferred);\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n  }\n\n  // If in the global scope and the variable is a function constructor or interface, declare its prototype property.\n  if (currentScope.isGlobal() && type != null && type.isFunctionType()) {\n    ObjectType objectType = type.toObjectType();\n    FunctionType fnType = (FunctionType) type;\n    ObjectType objType = objectType == null || fnType.isConstructor() || fnType.isInterface() ?\n        objectType :\n        fnType.getPrototype();\n    boolean shouldDeclare = objType != null && objType != objectType && typeRegistry.getNativeObjectPrototype() != objType;\n    if (shouldDeclare) {\n      Node protoNode = NodeUtil.newString(objType.getDisplayName() + \".prototype\");\n      compiler.reportChangeToEnclosingScope(protoNode);\n      declareInScope(currentScope, protoNode, objType, true /*inferred*/, sourceName);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..1198b4e6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,90 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(variableName != null && !variableName.isEmpty(),\n+      \"Variable name not present or empty.\");\n+\n+  Scope currentScope = scope;\n+  boolean shouldDeclareOnGlobalThis = false;\n+\n+  if (n.isName()) {\n+    Preconditions.checkArgument(parent.isFunction() || parent.isVar() || parent.isParamList() || parent.isCatch(),\n+        \"Invalid parent node type for name expression.\");\n+    shouldDeclareOnGlobalThis = currentScope.isGlobal() && (parent.isVar() || parent.isFunction());\n+  } else if (n.isGetProp()) {\n+    Preconditions.checkArgument(parent.isExprResult() || NodeUtil.isAssignmentOp(parent),\n+        \"Invalid parent node type for property expression.\");\n+    // Traverse up to the root of the property reference.\n+    Node root = n;\n+    while (root.getFirstChild() != null && root.getFirstChild().isGetProp()) {\n+      root = root.getFirstChild();\n+    }\n+    if (root.getFirstChild() != null && root.getFirstChild().isName()) {\n+      String rootName = root.getFirstChild().getString();\n+      Var var = currentScope.getVar(rootName);\n+      // If the reference is to a local property of an object, declare it in the object's scope instead.\n+      if (var != null && var.getType() != null && var.getType().isObject() && n instanceof Node) {\n+        Node objNode = root.getNext();\n+        if (objNode != null && objNode.isObjectLit()) {\n+          JSType objectType = var.getType();\n+          ObjectType objType = objectType.toObjectType();\n+          // Declare the property in the object's scope.\n+          Scope objScope = objType.getScope();\n+          if (objScope == null) {\n+            objScope = currentScope.getParentScope().declareScope(variableName,\n+                objectType.toMaybeObjectType(), null);\n           }\n+          declareInScope(objScope, objNode.getLastChild(), type, inferred, sourceName);\n+          return;\n         }\n+      }\n+    }\n+  } else {\n+    throw new IllegalArgumentException(\"Invalid node type.\");\n+  }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+  // Declare the variable in the current scope.\n+  CompilerInput input = compiler.getInput(sourceName);\n+  boolean isExtern = input.isExtern();\n+  if (!inferred) {\n+    setDeferredType(n, type);\n+  }\n+  boolean isDeclared = currentScope.isDeclared(variableName, false);\n+  if (isDeclared && !currentScope.isGlobal()) {\n+    Var oldVar = currentScope.getVar(variableName);\n+    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+  } else if (!isDeclared) {\n+    currentScope.declare(variableName, n, type, input, inferred);\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+            isExtern);\n+      } else {\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n       }\n     }\n+  }\n+\n+  // If in the global scope and the variable is a function constructor or interface, declare its prototype property.\n+  if (currentScope.isGlobal() && type != null && type.isFunctionType()) {\n+    ObjectType objectType = type.toObjectType();\n+    FunctionType fnType = (FunctionType) type;\n+    ObjectType objType = objectType == null || fnType.isConstructor() || fnType.isInterface() ?\n+        objectType :\n+        fnType.getPrototype();\n+    boolean shouldDeclare = objType != null && objType != objectType && typeRegistry.getNativeObjectPrototype() != objType;\n+    if (shouldDeclare) {\n+      Node protoNode = NodeUtil.newString(objType.getDisplayName() + \".prototype\");\n+      compiler.reportChangeToEnclosingScope(protoNode);\n+      declareInScope(currentScope, protoNode, objType, true /*inferred*/, sourceName);\n+    }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}