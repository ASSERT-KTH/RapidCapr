{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if(!lastArg.isName()) break;\n        String name = lastArg.getString();\n        if (referenceMap.containsKey(name)) {\n          // Check if any of the references are in the function body\n          if (NodeUtil.isReferenceInFunction(lastArg, function)) {\n            break;\n          }\n          // Check if this parameter is the \"arguments\" keyword, which is always referenced internally\n          if (name.equals(\"arguments\")) {\n            break;\n          }\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        }\n      }\n\n      // Strip unreferenced args off the beginning of the function declaration\n      Node firstArg;\n      while ((firstArg = argList.getFirstChild()) != null) {\n        if(!firstArg.isName()) break;\n        String name = firstArg.getString();\n        if (referenceMap.containsKey(name)) {\n          // Check if any of the references are in the function body\n          if (NodeUtil.isReferenceInFunction(firstArg, function)) {\n            break;\n          }\n          // Check if this parameter is the \"arguments\" keyword, which is always referenced internally\n          if (name.equals(\"arguments\")) {\n            break;\n          }\n          argList.removeChild(firstArg);\n          compiler.reportCodeChange();\n        } else {\n          argList.removeChild(firstArg);\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenceMap);\n    }\n  }\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4dd26c48 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -367,19 +367,9 @@ class RemoveUnusedVars\n    * @param fnScope The scope inside the function\n    */\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n-    Preconditions.checkState(function.isFunction());\n+    Preconditions.checkState(function.isFunction(), function);\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n@@ -388,24 +378,58 @@ class RemoveUnusedVars\n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n+\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n+        if(!lastArg.isName()) break;\n+        String name = lastArg.getString();\n+        if (referenceMap.containsKey(name)) {\n+          // Check if any of the references are in the function body\n+          if (NodeUtil.isReferenceInFunction(lastArg, function)) {\n+            break;\n+          }\n+          // Check if this parameter is the \"arguments\" keyword, which is always referenced internally\n+          if (name.equals(\"arguments\")) {\n+            break;\n+          }\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n+        }\n+      }\n+\n+      // Strip unreferenced args off the beginning of the function declaration\n+      Node firstArg;\n+      while ((firstArg = argList.getFirstChild()) != null) {\n+        if(!firstArg.isName()) break;\n+        String name = firstArg.getString();\n+        if (referenceMap.containsKey(name)) {\n+          // Check if any of the references are in the function body\n+          if (NodeUtil.isReferenceInFunction(firstArg, function)) {\n+            break;\n+          }\n+          // Check if this parameter is the \"arguments\" keyword, which is always referenced internally\n+          if (name.equals(\"arguments\")) {\n+            break;\n+          }\n+          argList.removeChild(firstArg);\n+          compiler.reportCodeChange();\n         } else {\n-          break;\n+          argList.removeChild(firstArg);\n+          compiler.reportCodeChange();\n         }\n       }\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      callSiteOptimizer.optimize(fnScope, referenceMap);\n     }\n   }\n \n \n+\n   /**\n    * @return the LP node containing the function parameters.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}