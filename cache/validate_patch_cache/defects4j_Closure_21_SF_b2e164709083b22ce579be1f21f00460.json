{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  // Determine whether the result of this node is used.\n  boolean resultUsed = NodeUtil.isExpressionResultUsed(n);\n  if (!resultUsed && n.isReturn()) {\n    // If this is a return statement, mark its result as used.\n    resultUsed = true;\n  } else if (!resultUsed) {\n    // Otherwise, look for ancestor nodes that are return statements.\n    Node currentParent = parent;\n    while (currentParent != null) {\n      if (currentParent.isReturn()) {\n        resultUsed = true;\n        break;\n      }\n      currentParent = currentParent.getParent();\n    }\n  }\n\n  // Check the parent node and the current node's position.\n  if (parent == null ||\n      parent.getType() == Token.EXPR_RESULT ||\n      parent.getType() == Token.BLOCK) {\n    return;\n  } else if (parent.getType() == Token.COMMA) {\n    if (resultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n        else break;\n      }\n    }\n  } else if (parent.getType() == Token.FOR) {\n    Node firstChild = parent.getFirstChild();\n    if (firstChild == n ||\n        firstChild.getNext() == n ||\n        firstChild.getNext().getNext() == n) {\n      return;\n    }\n  }\n\n  // Generate a warning for code that lacks side-effects.\n  if (NodeUtil.mayHaveSideEffects(n) && !resultUsed) {\n    String msg = \"The result of this expression is not being used.\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..f5b4cdbf 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,86 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n+  // I've been unable to think of any cases where this indicates a bug,\n+  // and apparently some people like keeping these semicolons around,\n+  // so we'll allow it.\n+  if (n.isEmpty() ||\n+      n.isComma()) {\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n+  // Do not try to remove a block or an expr result. We already handle\n+  // these cases when we visit the child, and the peephole passes will\n+  // fix up the tree in more clever ways when these are removed.\n+  if (n.isExprResult()) {\n+    return;\n+  }\n+\n+  // This no-op statement was there so that JSDoc information could\n+  // be attached to the name. This check should not complain about it.\n+  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    return;\n+  }\n+\n+  // Determine whether the result of this node is used.\n+  boolean resultUsed = NodeUtil.isExpressionResultUsed(n);\n+  if (!resultUsed && n.isReturn()) {\n+    // If this is a return statement, mark its result as used.\n+    resultUsed = true;\n+  } else if (!resultUsed) {\n+    // Otherwise, look for ancestor nodes that are return statements.\n+    Node currentParent = parent;\n+    while (currentParent != null) {\n+      if (currentParent.isReturn()) {\n+        resultUsed = true;\n+        break;\n+      }\n+      currentParent = currentParent.getParent();\n     }\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+  // Check the parent node and the current node's position.\n+  if (parent == null ||\n+      parent.getType() == Token.EXPR_RESULT ||\n+      parent.getType() == Token.BLOCK) {\n+    return;\n+  } else if (parent.getType() == Token.COMMA) {\n+    if (resultUsed) {\n       return;\n     }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    if (n == parent.getLastChild()) {\n+      for (Node an : parent.getAncestors()) {\n+        int ancestorType = an.getType();\n+        if (ancestorType == Token.COMMA) continue;\n+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+        else break;\n+      }\n+    }\n+  } else if (parent.getType() == Token.FOR) {\n+    Node firstChild = parent.getFirstChild();\n+    if (firstChild == n ||\n+        firstChild.getNext() == n ||\n+        firstChild.getNext().getNext() == n) {\n       return;\n     }\n+  }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n+  // Generate a warning for code that lacks side-effects.\n+  if (NodeUtil.mayHaveSideEffects(n) && !resultUsed) {\n+    String msg = \"The result of this expression is not being used.\";\n+    if (n.isString()) {\n+      msg = \"Is there a missing '+' on the previous line?\";\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    t.getCompiler().report(\n+        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+    if (!NodeUtil.isStatement(n)) {\n+      problemNodes.add(n);\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>",
    "test_result": "FAIL"
}