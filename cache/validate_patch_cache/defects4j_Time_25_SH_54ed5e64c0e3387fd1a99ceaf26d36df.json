{
    "patch": "            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n            if (nextLocal == nextAdjusted) {\n                int diff = offsetAdjusted - offsetLocal;\n                boolean dstGap = (diff < 0);\n                int offsetNext = getOffset(nextLocal - (dstGap ? 1 : 0));\n                int diffNext = offsetNext - offsetAdjusted;\n\n                // if the time diff is less than the boundaries, return the old offset\n                if ((instantLocal - nextLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR ||\n                        (nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                }\n\n                // if we're inside the DST gap, return the old offset\n                if (dstGap && (nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                }\n            } else {\n                int offsetNext = getOffset(nextLocal>instantLocal?nextLocal:nextAdjusted);\n\n                int diff = offsetNext - offsetLocal;\n                int diffNext = offsetAdjusted - offsetNext;\n\n                // if the time between the current and next zone is less than the boundaries, return the old offset\n                if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR ||\n                        (nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                }\n\n                // if we're inside the DST gap, return the old offset\n                if ((nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n                    // we're between transition and gap ends\n                    return offsetLocal;\n                }\n\n                if ((nextAdjusted - instantLocal) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n                    // we're between gap start and transition\n                    // or just after the end of the DST transition from last year\n                    if (nextLocal > instantLocal) {\n                        // just after DST transition end from previous year\n                        int offsetNext2 = getOffset(nextLocal);\n                        if (offsetNext2 <= offsetAdjusted) {\n                            return offsetLocal;\n                        }\n                    } else {\n                        return offsetNext;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..982d08f9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,55 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+            if (nextLocal == nextAdjusted) {\n+                int diff = offsetAdjusted - offsetLocal;\n+                boolean dstGap = (diff < 0);\n+                int offsetNext = getOffset(nextLocal - (dstGap ? 1 : 0));\n+                int diffNext = offsetNext - offsetAdjusted;\n+\n+                // if the time diff is less than the boundaries, return the old offset\n+                if ((instantLocal - nextLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR ||\n+                        (nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                }\n+\n+                // if we're inside the DST gap, return the old offset\n+                if (dstGap && (nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                int offsetNext = getOffset(nextLocal>instantLocal?nextLocal:nextAdjusted);\n+\n+                int diff = offsetNext - offsetLocal;\n+                int diffNext = offsetAdjusted - offsetNext;\n+\n+                // if the time between the current and next zone is less than the boundaries, return the old offset\n+                if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR ||\n+                        (nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                }\n+\n+                // if we're inside the DST gap, return the old offset\n+                if ((nextLocal - instantAdjusted) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    // we're between transition and gap ends\n+                    return offsetLocal;\n+                }\n+\n+                if ((nextAdjusted - instantLocal) < diffNext * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    // we're between gap start and transition\n+                    // or just after the end of the DST transition from last year\n+                    if (nextLocal > instantLocal) {\n+                        // just after DST transition end from previous year\n+                        int offsetNext2 = getOffset(nextLocal);\n+                        if (offsetNext2 <= offsetAdjusted) {\n+                            return offsetLocal;\n+                        }\n+                    } else {\n+                        return offsetNext;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}