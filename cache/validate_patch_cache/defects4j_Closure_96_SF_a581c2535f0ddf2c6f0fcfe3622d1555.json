{
    "patch": "    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (!arguments.hasNext()) {\n        // If there are no arguments left in the list, then the while loop above implies that this must be a\n        // varargs function if we haven't processed any parameters yet.\n        if (ordinal == 0 && varArgs) {\n          return;\n        }\n        // Otherwise, if there are no arguments left in the list and we still have parameters, then the function is not\n        // called with enough arguments.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n            varArgs ? \" and an arbitrary number of arguments\" :\n                (functionType.getMinArguments() != functionType.getMaxArguments() ?\n                    \" between \" + functionType.getMinArguments() + \" and \" + functionType.getMaxArguments() + \" arguments\" :\n                    \" \" + functionType.getMinArguments() + \" argument(s)\"));\n        return;\n      }\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    // If there are any arguments left in the list and we don't have any more parameters, then the function\n    // is called with too many arguments.\n    if (arguments.hasNext()) {\n      int numArgs = call.getChildCount() - 1;\n      int maxArgs = functionType.getMaxArguments();\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), varArgs ? \"0 or more\" : \"no more than \" + maxArgs,\n          varArgs ? \" and an arbitrary number of arguments\" :\n              (functionType.getMinArguments() != functionType.getMaxArguments() ?\n                  \" between \" + functionType.getMinArguments() + \" and \" + maxArgs + \" arguments\" :\n                  \" \" + functionType.getMinArguments() + \" argument(s)\"));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..1dc09410 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (!arguments.hasNext()) {\n+        // If there are no arguments left in the list, then the while loop above implies that this must be a\n+        // varargs function if we haven't processed any parameters yet.\n+        if (ordinal == 0 && varArgs) {\n+          return;\n+        }\n+        // Otherwise, if there are no arguments left in the list and we still have parameters, then the function is not\n+        // called with enough arguments.\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+            varArgs ? \" and an arbitrary number of arguments\" :\n+                (functionType.getMinArguments() != functionType.getMaxArguments() ?\n+                    \" between \" + functionType.getMinArguments() + \" and \" + functionType.getMaxArguments() + \" arguments\" :\n+                    \" \" + functionType.getMinArguments() + \" argument(s)\"));\n+        return;\n+      }\n       argument = arguments.next();\n       ordinal++;\n-\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    // If there are any arguments left in the list and we don't have any more parameters, then the function\n+    // is called with too many arguments.\n+    if (arguments.hasNext()) {\n+      int numArgs = call.getChildCount() - 1;\n+      int maxArgs = functionType.getMaxArguments();\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), varArgs ? \"0 or more\" : \"no more than \" + maxArgs,\n+          varArgs ? \" and an arbitrary number of arguments\" :\n+              (functionType.getMinArguments() != functionType.getMaxArguments() ?\n+                  \" between \" + functionType.getMinArguments() + \" and \" + maxArgs + \" arguments\" :\n+                  \" \" + functionType.getMinArguments() + \" argument(s)\"));\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}