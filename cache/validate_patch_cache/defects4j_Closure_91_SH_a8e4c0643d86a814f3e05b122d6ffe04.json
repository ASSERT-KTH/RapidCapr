{
    "patch": "      if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        Node grandparent = parent.getParent();\n        if (NodeUtil.isAssignmentOp(grandparent) && NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        } else if (!jsDoc.hasReturnType() && !jsDoc.hasThisType()) {\n          if (parent.getParent().getType() == Token.CALL &&\n              parent.getParent().getFirstChild() == parent) {\n            // `foo.method(bar)` but not `baz.method`.\n            Node method = parent.getPrevious();\n            if (NodeUtil.isGet(method)) {\n              return false;\n            }\n          } else {\n            Node expr = NodeUtil.getEnclosingExpression(parent);\n            while (expr != null) {\n              if (NodeUtil.isGet(expr)) {\n                return false;\n              }\n              expr = NodeUtil.getEnclosingExpression(expr);\n            }\n          }\n        }\n      }\n\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n          return !NodeUtil.isNew(parent) && !NodeUtil.isPrototypeProperty(parent.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..226e3f2c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,46 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        Node grandparent = parent.getParent();\n+        if (NodeUtil.isAssignmentOp(grandparent) && NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        } else if (!jsDoc.hasReturnType() && !jsDoc.hasThisType()) {\n+          if (parent.getParent().getType() == Token.CALL &&\n+              parent.getParent().getFirstChild() == parent) {\n+            // `foo.method(bar)` but not `baz.method`.\n+            Node method = parent.getPrevious();\n+            if (NodeUtil.isGet(method)) {\n+              return false;\n+            }\n+          } else {\n+            Node expr = NodeUtil.getEnclosingExpression(parent);\n+            while (expr != null) {\n+              if (NodeUtil.isGet(expr)) {\n+                return false;\n+              }\n+              expr = NodeUtil.getEnclosingExpression(expr);\n+            }\n+          }\n+        }\n+      }\n+\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+          return !NodeUtil.isNew(parent) && !NodeUtil.isPrototypeProperty(parent.getParent());\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}