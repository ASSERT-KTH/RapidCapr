{
    "patch": "public static String convertISO8859_1_ESCAPE(final String iso8859_1str) {\n    StringBuilder sb = new StringBuilder();\n    int i = 0;\n    int len = iso8859_1str.length();\n    while (i < len) {\n        char c = iso8859_1str.charAt(i++);\n        if (c == '\\\\' && i < len) {\n            c = iso8859_1str.charAt(i++);\n            if (c == 'n') {\n                c = '\\n';\n            } else if (c == 'r') {\n                c = '\\r';\n            } else if (c == 't') {\n                c = '\\t';\n            } else if (c == 'f') {\n                c = '\\f';\n            } else if (c == 'b') {\n                c = '\\b';\n            } else if (c >= '0' && c <= '7') {\n                int oct = c - '0';\n                if (i < len && iso8859_1str.charAt(i) >= '0' && iso8859_1str.charAt(i) <= '7') {\n                    oct = oct * 8 + iso8859_1str.charAt(i++) - '0';\n                    if (c <= '3' && i < len && iso8859_1str.charAt(i) >= '0' && iso8859_1str.charAt(i) <= '7') {\n                        oct = oct * 8 + iso8859_1str.charAt(i++) - '0';\n                    }\n                }\n                c = (char) oct;\n            }\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..b6658305 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,39 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String convertISO8859_1_ESCAPE(final String iso8859_1str) {\n+    StringBuilder sb = new StringBuilder();\n+    int i = 0;\n+    int len = iso8859_1str.length();\n+    while (i < len) {\n+        char c = iso8859_1str.charAt(i++);\n+        if (c == '\\\\' && i < len) {\n+            c = iso8859_1str.charAt(i++);\n+            if (c == 'n') {\n+                c = '\\n';\n+            } else if (c == 'r') {\n+                c = '\\r';\n+            } else if (c == 't') {\n+                c = '\\t';\n+            } else if (c == 'f') {\n+                c = '\\f';\n+            } else if (c == 'b') {\n+                c = '\\b';\n+            } else if (c >= '0' && c <= '7') {\n+                int oct = c - '0';\n+                if (i < len && iso8859_1str.charAt(i) >= '0' && iso8859_1str.charAt(i) <= '7') {\n+                    oct = oct * 8 + iso8859_1str.charAt(i++) - '0';\n+                    if (c <= '3' && i < len && iso8859_1str.charAt(i) >= '0' && iso8859_1str.charAt(i) <= '7') {\n+                        oct = oct * 8 + iso8859_1str.charAt(i++) - '0';\n+                    }\n+                }\n+                c = (char) oct;\n+            }\n+        }\n+        sb.append(c);\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}