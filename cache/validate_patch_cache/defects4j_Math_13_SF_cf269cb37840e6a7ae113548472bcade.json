{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix l = new LUDecomposition(m).getL();\n    int n = l.getRowDimension();\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            sqrt.setEntry(i, j, 0.0);\n        }\n        double sum = 0.0;\n        for (int j = i; j < n; j++) {\n            double s = 0.0;\n            for (int k = 0; k < i; k++) {\n                s += sqrt.getEntry(j, k) * sqrt.getEntry(i, k);\n            }\n            double e = l.getEntry(j, i) - s;\n            sqrt.setEntry(j, i, e / sqrt.getEntry(i, i));\n            sum += sqrt.getEntry(j, i) * sqrt.getEntry(j, i);\n        }\n        double d = l.getEntry(i, i) - sum;\n        if (d < 0.0) {\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n        }\n        sqrt.setEntry(i, i, Math.sqrt(d));\n    }\n    return sqrt.transpose().multiply(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3068c0271 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix l = new LUDecomposition(m).getL();\n+    int n = l.getRowDimension();\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < i; j++) {\n+            sqrt.setEntry(i, j, 0.0);\n+        }\n+        double sum = 0.0;\n+        for (int j = i; j < n; j++) {\n+            double s = 0.0;\n+            for (int k = 0; k < i; k++) {\n+                s += sqrt.getEntry(j, k) * sqrt.getEntry(i, k);\n+            }\n+            double e = l.getEntry(j, i) - s;\n+            sqrt.setEntry(j, i, e / sqrt.getEntry(i, i));\n+            sum += sqrt.getEntry(j, i) * sqrt.getEntry(j, i);\n+        }\n+        double d = l.getEntry(i, i) - sum;\n+        if (d < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+        }\n+        sqrt.setEntry(i, i, Math.sqrt(d));\n     }\n+    return sqrt.transpose().multiply(sqrt);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}