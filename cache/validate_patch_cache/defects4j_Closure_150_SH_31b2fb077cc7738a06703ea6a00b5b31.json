{
    "patch": "      attachLiteralTypes(n);\n      if (n.getType() == Token.FUNCTION) {\n        defineDeclaredFunction(n, parent);\n      } else if (n.getType() == Token.LP) {\n        if (NodeUtil.isExpression(parent) || parent.getType() == Token.PARAM_LIST ||\n             (parent.getType() == Token.CALL && n == parent.getFirstChild())) {\n          handleFunctionInputs(n);\n        }\n      } else {\n        switch (n.getType()) {\n          case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n          case Token.VAR:\n          case Token.NAME:\n            defineVar(n, parent);\n            break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..45c4ef97 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,20 +1449,23 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+      if (n.getType() == Token.FUNCTION) {\n+        defineDeclaredFunction(n, parent);\n+      } else if (n.getType() == Token.LP) {\n+        if (NodeUtil.isExpression(parent) || parent.getType() == Token.PARAM_LIST ||\n+             (parent.getType() == Token.CALL && n == parent.getFirstChild())) {\n+          handleFunctionInputs(n);\n+        }\n+      } else {\n+        switch (n.getType()) {\n+          case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n+          case Token.VAR:\n+          case Token.NAME:\n+            defineVar(n, parent);\n+            break;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}