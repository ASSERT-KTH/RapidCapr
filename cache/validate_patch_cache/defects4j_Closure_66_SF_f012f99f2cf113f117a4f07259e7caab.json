{
    "patch": "import org.json.*;\n\npublic class Util {\n    public static double getTypedPercent(String jsonStr) {\n        JSONObject jsonObject = null;\n        try {\n            jsonObject = new JSONObject(jsonStr);\n            double total = jsonObject.getDouble(\"total\");\n            double typed = jsonObject.getDouble(\"typed\");\n            if (total == 0) {\n                return 0.0;\n            }\n            return (typed / total) * 100;\n        } catch (JSONException e) {\n            return 0.0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..1ee229ed 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.*;\n+\n+public class Util {\n+    public static double getTypedPercent(String jsonStr) {\n+        JSONObject jsonObject = null;\n+        try {\n+            jsonObject = new JSONObject(jsonStr);\n+            double total = jsonObject.getDouble(\"total\");\n+            double typed = jsonObject.getDouble(\"typed\");\n+            if (total == 0) {\n+                return 0.0;\n+            }\n+            return (typed / total) * 100;\n+        } catch (JSONException e) {\n+            return 0.0;\n+        }\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}