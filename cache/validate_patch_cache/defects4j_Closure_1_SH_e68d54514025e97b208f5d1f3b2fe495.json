{
    "patch": "    Set<String> paramNames = new LinkedHashSet<>();\n    for (Node arg : argList.children()) {\n      paramNames.add(arg.getString());\n    }\n    if (!modifyCallers) {\n      // Strip unreferenced args that aren't leading object destructuring patterns\n      // off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (NodeUtil.isObjectDestructuringPattern(lastArg)) {\n          Set<String> usedVars = new HashSet<>();\n          NodeTraversal.traverse(compiler, lastArg, new AbstractPostOrderCallback() {\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.isName()) {\n                usedVars.add(n.getString());\n              }\n            }\n          });\n          for (String paramName : paramNames) {\n            // Remove last param if it can be and isn't used\n            if (lastArg.isName() && lastArg.getString().equals(paramName) && !referenced.contains(fnScope.getVar(lastArg.getString())) && !usedVars.contains(lastArg.getString())) {\n              argList.removeChild(lastArg);\n              compiler.reportCodeChange();\n              break;\n            }\n          }\n          if (!lastArg.hasChildren()) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n        } else {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d1bc3f05 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> paramNames = new LinkedHashSet<>();\n+    for (Node arg : argList.children()) {\n+      paramNames.add(arg.getString());\n+    }\n+    if (!modifyCallers) {\n+      // Strip unreferenced args that aren't leading object destructuring patterns\n+      // off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (NodeUtil.isObjectDestructuringPattern(lastArg)) {\n+          Set<String> usedVars = new HashSet<>();\n+          NodeTraversal.traverse(compiler, lastArg, new AbstractPostOrderCallback() {\n+            @Override\n+            public void visit(NodeTraversal t, Node n, Node parent) {\n+              if (n.isName()) {\n+                usedVars.add(n.getString());\n+              }\n+            }\n+          });\n+          for (String paramName : paramNames) {\n+            // Remove last param if it can be and isn't used\n+            if (lastArg.isName() && lastArg.getString().equals(paramName) && !referenced.contains(fnScope.getVar(lastArg.getString())) && !usedVars.contains(lastArg.getString())) {\n+              argList.removeChild(lastArg);\n+              compiler.reportCodeChange();\n+              break;\n+            }\n+          }\n+          if (!lastArg.hasChildren()) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}