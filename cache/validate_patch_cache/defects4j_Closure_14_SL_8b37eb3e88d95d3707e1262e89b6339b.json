{
    "patch": "if (node.getType() == Token.RETURN || NodeUtil.isJumpStatement(node)) {\n  return computeFollowNode(fromNode, parent, cfa);\n} else if (cfa != null) {\n  if (finallyNode != null && finallyNode != node\n      && !cfa.finallyMap.get(parent).contains(fromNode)) {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  } else {\n    return computeFollowNode(fromNode, computeFallThrough(node), cfa);\n  }\n} else {\n  if (finallyNode != null && finallyNode.getNext() != null) {\n    return computeFallThrough(finallyNode.getNext());\n  } else {\n    return computeFollowNode(fromNode, computeFallThrough(node), cfa);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..6a4ec8c6 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (node.getType() == Token.RETURN || NodeUtil.isJumpStatement(node)) {\n+  return computeFollowNode(fromNode, parent, cfa);\n+} else if (cfa != null) {\n+  if (finallyNode != null && finallyNode != node\n+      && !cfa.finallyMap.get(parent).contains(fromNode)) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  } else {\n+    return computeFollowNode(fromNode, computeFallThrough(node), cfa);\n+  }\n+} else {\n+  if (finallyNode != null && finallyNode.getNext() != null) {\n+    return computeFallThrough(finallyNode.getNext());\n+  } else {\n+    return computeFollowNode(fromNode, computeFallThrough(node), cfa);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}