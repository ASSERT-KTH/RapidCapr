{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n    Map<String, Object> dataMap = gson.fromJson(jsonStr, type);\n\n    int typed_count = 0;\n    int total_count = 0;\n\n    for (Object val : dataMap.values()) {\n        total_count++;\n\n        if (val instanceof String) {\n            String strVal = (String) val;\n            if (!strVal.isEmpty()) {\n                typed_count++;\n            }\n        } else {\n            typed_count++;\n        }\n    }\n\n    return (double) typed_count / total_count * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c6e6f94f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n+    Map<String, Object> dataMap = gson.fromJson(jsonStr, type);\n+\n+    int typed_count = 0;\n+    int total_count = 0;\n+\n+    for (Object val : dataMap.values()) {\n+        total_count++;\n+\n+        if (val instanceof String) {\n+            String strVal = (String) val;\n+            if (!strVal.isEmpty()) {\n+                typed_count++;\n+            }\n+        } else {\n+            typed_count++;\n+        }\n+    }\n+\n+    return (double) typed_count / total_count * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}