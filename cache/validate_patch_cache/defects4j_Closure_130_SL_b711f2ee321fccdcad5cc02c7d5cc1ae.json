{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..a408b73d 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,8 +169,35 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n+  private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    while (!workList.isEmpty()) {\n+      Name name = workList.pop();\n+\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+        continue;\n+      }\n+\n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n+\n+      if ((name.type == Name.Type.OBJECTLIT ||\n+           name.type == Name.Type.FUNCTION) &&\n+          name.aliasingGets == 0 && name.props != null) {\n+        workList.addAll(name.props);\n+      }\n+    }\n+  }\n+          name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}