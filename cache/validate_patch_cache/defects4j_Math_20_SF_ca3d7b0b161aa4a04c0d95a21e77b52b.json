{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    final double[] decodedX = decode(x);\n    final double[] repairedX = repair(decodedX);\n    \n    // Perform bounds checking\n    final double[] upperBounds = {0.5, 0.5, 0.5, 0.5};\n    for (int i = 0; i < repairedX.length; i++) {\n        if (repairedX[i] > upperBounds[i]) {\n            repairedX[i] = upperBounds[i];\n        }\n    }\n    \n    return repairedX;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..00d7f06b4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,20 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    final double[] decodedX = decode(x);\n+    final double[] repairedX = repair(decodedX);\n+    \n+    // Perform bounds checking\n+    final double[] upperBounds = {0.5, 0.5, 0.5, 0.5};\n+    for (int i = 0; i < repairedX.length; i++) {\n+        if (repairedX[i] > upperBounds[i]) {\n+            repairedX[i] = upperBounds[i];\n         }\n+    }\n+    \n+    return repairedX;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 4",
    "test_result": "FAIL"
}