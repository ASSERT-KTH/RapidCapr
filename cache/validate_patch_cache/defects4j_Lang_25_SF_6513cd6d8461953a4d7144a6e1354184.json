{
    "patch": "public static String ISO8859_1_ESCAPE(String str) {\n    int len = str.length();\n    StringBuffer outBuffer = new StringBuffer(len*2);\n\n    for (int x=0;x<len;x++) {\n        char aChar = str.charAt(x);\n        switch(aChar) {\n            case '\\t': outBuffer.append(\"\\\\t\"); break;\n            case '\\n': outBuffer.append(\"\\\\n\"); break;\n            case '\\r': outBuffer.append(\"\\\\r\"); break;\n            case '\\'': outBuffer.append(\"\\\\'\"); break;\n            case '\\\"': outBuffer.append(\"\\\\\\\"\"); break;\n            case '\\\\': outBuffer.append(\"\\\\\\\\\"); break;\n            case '\\u0085': outBuffer.append(\"\\\\u0085\"); break;\n            case '\\u2028': outBuffer.append(\"\\\\u2028\"); break;\n            case '\\u2029': outBuffer.append(\"\\\\u2029\"); break;\n            default:\n                if (aChar >= 32 && aChar <= 126) {\n                    outBuffer.append(aChar);\n                } else {\n                    outBuffer.append(\"\\\\u\");\n                    outBuffer.append(Integer.toHexString(aChar));\n                }\n        }\n    }\n\n    return outBuffer.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5af539e4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,34 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String ISO8859_1_ESCAPE(String str) {\n+    int len = str.length();\n+    StringBuffer outBuffer = new StringBuffer(len*2);\n+\n+    for (int x=0;x<len;x++) {\n+        char aChar = str.charAt(x);\n+        switch(aChar) {\n+            case '\\t': outBuffer.append(\"\\\\t\"); break;\n+            case '\\n': outBuffer.append(\"\\\\n\"); break;\n+            case '\\r': outBuffer.append(\"\\\\r\"); break;\n+            case '\\'': outBuffer.append(\"\\\\'\"); break;\n+            case '\\\"': outBuffer.append(\"\\\\\\\"\"); break;\n+            case '\\\\': outBuffer.append(\"\\\\\\\\\"); break;\n+            case '\\u0085': outBuffer.append(\"\\\\u0085\"); break;\n+            case '\\u2028': outBuffer.append(\"\\\\u2028\"); break;\n+            case '\\u2029': outBuffer.append(\"\\\\u2029\"); break;\n+            default:\n+                if (aChar >= 32 && aChar <= 126) {\n+                    outBuffer.append(aChar);\n+                } else {\n+                    outBuffer.append(\"\\\\u\");\n+                    outBuffer.append(Integer.toHexString(aChar));\n+                }\n+        }\n+    }\n+\n+    return outBuffer.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}