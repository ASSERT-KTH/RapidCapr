{
    "patch": "int size = elementPairs.size();\nList<Object> printersList = new ArrayList<>(size);\nList<Object> parsersList = new ArrayList<>(size);\nfor (int i = 0; i < size; i++) {\n    Object e = elementPairs.get(i);\n    char f;\n    if (e instanceof Separator) {\n        f = '\\uffff';\n    } else if (e instanceof PeriodPrinter) {\n        f = ' ';\n    } else {\n        f = 'J';\n    }\n    while (i + 1 < size && elementPairs.get(i + 1).getClass() == e.getClass()) {\n        i++;\n    }\n    Composite c = toComposite(e, f, printersList, parsersList);\n    printersList.add(c.printer);\n    parsersList.add(c.parser);\n}\nPeriodPrinter printer = null;\nPeriodParser parser = null;\nif (!notPrinter) {\n    if (printersList.size() == 1) {\n        printer = (PeriodPrinter) printersList.get(0);\n    } else {\n        printer = new CompositePrinter(printersList, printersList);\n    }\n}\nif (!notParser) {\n    if (parsersList.size() == 1) {\n        parser = (PeriodParser) parsersList.get(0);\n    } else {\n        parser = new CompositeParser(parsersList, parsersList);\n    }\n}\nreturn new PeriodFormatter(printer, parser);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e1d2eeab 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,43 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+int size = elementPairs.size();\n+List<Object> printersList = new ArrayList<>(size);\n+List<Object> parsersList = new ArrayList<>(size);\n+for (int i = 0; i < size; i++) {\n+    Object e = elementPairs.get(i);\n+    char f;\n+    if (e instanceof Separator) {\n+        f = '\\uffff';\n+    } else if (e instanceof PeriodPrinter) {\n+        f = ' ';\n+    } else {\n+        f = 'J';\n+    }\n+    while (i + 1 < size && elementPairs.get(i + 1).getClass() == e.getClass()) {\n+        i++;\n+    }\n+    Composite c = toComposite(e, f, printersList, parsersList);\n+    printersList.add(c.printer);\n+    parsersList.add(c.parser);\n+}\n+PeriodPrinter printer = null;\n+PeriodParser parser = null;\n+if (!notPrinter) {\n+    if (printersList.size() == 1) {\n+        printer = (PeriodPrinter) printersList.get(0);\n+    } else {\n+        printer = new CompositePrinter(printersList, printersList);\n+    }\n+}\n+if (!notParser) {\n+    if (parsersList.size() == 1) {\n+        parser = (PeriodParser) parsersList.get(0);\n+    } else {\n+        parser = new CompositeParser(parsersList, parsersList);\n     }\n+}\n+return new PeriodFormatter(printer, parser);\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}