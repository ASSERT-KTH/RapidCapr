{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double memoryFactor = 0.9; // fraction of available memory to use\n\n    final double usableMemory = Runtime.getRuntime().maxMemory() * memoryFactor; // total usable memory\n    final double requiredMemory = (long) m.getRowDimension() * (long) m.getColumnDimension() * 16; // total memory required for matrix\n\n    if (requiredMemory > usableMemory) {\n        throw new RuntimeException(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n    } else if (m.getRowDimension() > MAX_SIZE || m.getColumnDimension() > MAX_SIZE) {\n        throw new RuntimeException(\"Matrix size exceeds maximum allowed limit.\");\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..97ca3ed1c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double memoryFactor = 0.9; // fraction of available memory to use\n+\n+    final double usableMemory = Runtime.getRuntime().maxMemory() * memoryFactor; // total usable memory\n+    final double requiredMemory = (long) m.getRowDimension() * (long) m.getColumnDimension() * 16; // total memory required for matrix\n+\n+    if (requiredMemory > usableMemory) {\n+        throw new RuntimeException(\"Matrix size exceeds available memory. Please use a smaller matrix.\");\n+    } else if (m.getRowDimension() > MAX_SIZE || m.getColumnDimension() > MAX_SIZE) {\n+        throw new RuntimeException(\"Matrix size exceeds maximum allowed limit.\");\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}