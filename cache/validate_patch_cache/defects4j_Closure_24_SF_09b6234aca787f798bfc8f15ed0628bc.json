{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null) {\n      continue;\n    }\n\n    Node parent = n.getParent();\n    if (parent == null || !parent.isVar()) {\n      continue;\n    }\n\n    Node initializer = n.getFirstChild().getNext();\n    if (initializer == null || !initializer.isQualifiedName()) {\n      if (parent.getParent().isFunction()) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n      continue;\n    }\n\n    String name = n.getFirstChild().getString();\n    String qualifiedName = initializer.getQualifiedName();\n\n    // Check if this variable already has an alias in the scope.\n    // If it does, it is a duplicate declaration.\n    Var aliasVar = aliases.get(name);\n    if (aliasVar != null) {\n      n.detach();\n      String message = String.format(\"Duplicate alias declaration for %s. \" \n          + \"Original declaration at %s\", name, aliasVar.getNode().getSourceFileName());\n      report(t, initializer, DUPLICATE_ALIAS_DECLARATION, message);\n      continue;\n    }\n\n    aliases.put(name, v);\n    transformation.addAlias(name, qualifiedName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..d1daf814 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,33 +269,46 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null) {\n+      continue;\n+    }\n+\n+    Node parent = n.getParent();\n+    if (parent == null || !parent.isVar()) {\n+      continue;\n+    }\n+\n+    Node initializer = n.getFirstChild().getNext();\n+    if (initializer == null || !initializer.isQualifiedName()) {\n+      if (parent.getParent().isFunction()) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n+      continue;\n+    }\n+\n+    String name = n.getFirstChild().getString();\n+    String qualifiedName = initializer.getQualifiedName();\n+\n+    // Check if this variable already has an alias in the scope.\n+    // If it does, it is a duplicate declaration.\n+    Var aliasVar = aliases.get(name);\n+    if (aliasVar != null) {\n+      n.detach();\n+      String message = String.format(\"Duplicate alias declaration for %s. \" \n+          + \"Original declaration at %s\", name, aliasVar.getNode().getSourceFileName());\n+      report(t, initializer, DUPLICATE_ALIAS_DECLARATION, message);\n+      continue;\n     }\n \n+    aliases.put(name, v);\n+    transformation.addAlias(name, qualifiedName);\n+  }\n+}\n+\n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {\n         preprocessorSymbolTable.addReference(n.getFirstChild());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}