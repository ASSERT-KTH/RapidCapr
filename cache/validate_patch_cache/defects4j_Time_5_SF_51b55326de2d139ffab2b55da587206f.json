{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    if (getWeeks() != 0) {\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    }\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = result.getYears();\n    int months = result.getMonths();\n    int weeks = result.getWeeks();\n    int days = result.getDays();\n\n    if (type.isSupported(DurationFieldType.years())) {\n        int totalMonths = years * 12 + months;\n        int totalWeeks = weeks + (days / 7);\n        int totalDays = days % 7;\n        int yearsToAdd = totalMonths / 12;\n        int monthsToAdd = totalMonths % 12;\n        if (totalDays >= 4) {  // Add remaining days to weeks\n            totalWeeks += 1;\n            totalDays -= 7;\n        }\n        if (totalWeeks >= 1 && type.isSupported(DurationFieldType.weeks())) {  // Prefer weeks\n            result = result.withYears(0).withMonths(0).withDays(0).withWeeks(totalWeeks).withDays(totalDays);\n        } else {  // Use days\n            result = result.withYears(0).withMonths(0).withDays(totalDays);\n            if (totalWeeks == 0 && type.isSupported(DurationFieldType.weeks())) {  // Add weeks if necessary\n                result = result.withWeeks(0);\n            }\n            if (yearsToAdd != 0 && type.isSupported(DurationFieldType.years())) {\n                result = result.withYears(yearsToAdd);\n            }\n            if (monthsToAdd != 0 && type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(monthsToAdd);\n            }\n        }\n    } else if (type.isSupported(DurationFieldType.months())) {\n        int totalMonths = years * 12 + months;\n        int totalDays = weeks * 7 + days;\n        if (totalDays >= 15) {  // Add remaining days to months\n            totalMonths += 1;\n            totalDays -= 30;\n        }\n        int yearsToAdd = totalMonths / 12;\n        int monthsToAdd = totalMonths % 12;\n        result = result.withYears(0).withMonths(0).withDays(totalDays);\n        if (yearsToAdd != 0 && type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(yearsToAdd);\n        }\n        if (monthsToAdd != 0 && type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(monthsToAdd);\n        }\n    } else if (type.isSupported(DurationFieldType.weeks())) {\n        int totalDays = weeks * 7 + days;\n        result = result.withYears(0).withMonths(0).withDays(totalDays);\n        if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n            result = result.withWeeks(weeks);\n        }\n    } else {  // Only days are supported\n        int totalDays = years * 365 + months * 30 + weeks * 7 + days;\n        result = result.withYears(0).withMonths(0).withWeeks(0).withDays(totalDays);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..6251eb37 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,73 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    if (getWeeks() != 0) {\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+    }\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    int years = result.getYears();\n+    int months = result.getMonths();\n+    int weeks = result.getWeeks();\n+    int days = result.getDays();\n+\n+    if (type.isSupported(DurationFieldType.years())) {\n+        int totalMonths = years * 12 + months;\n+        int totalWeeks = weeks + (days / 7);\n+        int totalDays = days % 7;\n+        int yearsToAdd = totalMonths / 12;\n+        int monthsToAdd = totalMonths % 12;\n+        if (totalDays >= 4) {  // Add remaining days to weeks\n+            totalWeeks += 1;\n+            totalDays -= 7;\n+        }\n+        if (totalWeeks >= 1 && type.isSupported(DurationFieldType.weeks())) {  // Prefer weeks\n+            result = result.withYears(0).withMonths(0).withDays(0).withWeeks(totalWeeks).withDays(totalDays);\n+        } else {  // Use days\n+            result = result.withYears(0).withMonths(0).withDays(totalDays);\n+            if (totalWeeks == 0 && type.isSupported(DurationFieldType.weeks())) {  // Add weeks if necessary\n+                result = result.withWeeks(0);\n+            }\n+            if (yearsToAdd != 0 && type.isSupported(DurationFieldType.years())) {\n+                result = result.withYears(yearsToAdd);\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (monthsToAdd != 0 && type.isSupported(DurationFieldType.months())) {\n+                result = result.withMonths(monthsToAdd);\n             }\n         }\n-        return result;\n+    } else if (type.isSupported(DurationFieldType.months())) {\n+        int totalMonths = years * 12 + months;\n+        int totalDays = weeks * 7 + days;\n+        if (totalDays >= 15) {  // Add remaining days to months\n+            totalMonths += 1;\n+            totalDays -= 30;\n+        }\n+        int yearsToAdd = totalMonths / 12;\n+        int monthsToAdd = totalMonths % 12;\n+        result = result.withYears(0).withMonths(0).withDays(totalDays);\n+        if (yearsToAdd != 0 && type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(yearsToAdd);\n+        }\n+        if (monthsToAdd != 0 && type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(monthsToAdd);\n+        }\n+    } else if (type.isSupported(DurationFieldType.weeks())) {\n+        int totalDays = weeks * 7 + days;\n+        result = result.withYears(0).withMonths(0).withDays(totalDays);\n+        if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n+            result = result.withWeeks(weeks);\n+        }\n+    } else {  // Only days are supported\n+        int totalDays = years * 365 + months * 30 + weeks * 7 + days;\n+        result = result.withYears(0).withMonths(0).withWeeks(0).withDays(totalDays);\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P3W-2D>",
    "test_result": "FAIL"
}