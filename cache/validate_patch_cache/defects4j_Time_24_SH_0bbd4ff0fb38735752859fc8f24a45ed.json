{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is month or day\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n        // clear hours, minutes, seconds, and millis\n        millis = iChrono.millisOfDay().set(0, millis);\n        iSavedFields[0] = new SavedField(DateTimeFieldType.year(), iDefaultYear);\n        // preserve the rest of the fields\n        for (int i = 1; i < count; i++) {\n            iSavedFields[i] = null;\n        }\n        iSavedFieldsCount = 1;\n        iSavedFieldsShared = false;\n        return computeMillis(resetFields, text);\n    } else {\n        throw e;\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f4c77a04 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is month or day\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        // clear hours, minutes, seconds, and millis\n+        millis = iChrono.millisOfDay().set(0, millis);\n+        iSavedFields[0] = new SavedField(DateTimeFieldType.year(), iDefaultYear);\n+        // preserve the rest of the fields\n+        for (int i = 1; i < count; i++) {\n+            iSavedFields[i] = null;\n+        }\n+        iSavedFieldsCount = 1;\n+        iSavedFieldsShared = false;\n+        return computeMillis(resetFields, text);\n+    } else {\n+        throw e;\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable method found for set(int,long)",
    "test_result": "ERROR"
}