{
    "patch": "public static String getprop(String propName) {\n    String propValue = null;\n    try {\n        Process process = Runtime.getRuntime().exec(\"getprop \" + propName);\n        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        propValue = bufferedReader.readLine();\n        bufferedReader.close();\n        inputStreamReader.close();\n    } catch (IOException e) {\n        Log.e(TAG, \"Unable to read property \" + propName, e);\n    }\n    return propValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..0a8af5df 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String propName) {\n+    String propValue = null;\n+    try {\n+        Process process = Runtime.getRuntime().exec(\"getprop \" + propName);\n+        InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream());\n+        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+        propValue = bufferedReader.readLine();\n+        bufferedReader.close();\n+        inputStreamReader.close();\n+    } catch (IOException e) {\n+        Log.e(TAG, \"Unable to read property \" + propName, e);\n+    }\n+    return propValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}