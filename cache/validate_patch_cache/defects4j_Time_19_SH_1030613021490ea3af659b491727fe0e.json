{
    "patch": "        if (offsetLocal == offsetAdjusted && offsetLocal >= 0) {\n            return offsetAdjusted;\n        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                int diff = offsetPrev - offsetLocal;\n                if (instantAdjusted - prev <= diff) {\n                    return offsetPrev;\n                }\n            }\n            return offsetAdjusted;\n        } else if ((offsetLocal < 0 && offsetAdjusted < 0) && (offsetLocal != offsetAdjusted)) {\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                if (offsetPrev <= offsetLocal) {\n                    return offsetPrev;\n                }\n            }\n            long next = nextTransition(instantAdjusted);\n            if (next > instantAdjusted) {\n                int offsetNext = getOffset(next);\n                if (offsetLocal - offsetNext < 0) {\n                    return offsetNext;\n                }\n            }\n            return offsetLocal;\n        } else if ((offsetLocal < 0 && offsetAdjusted >= 0) || (offsetLocal >= 0 && offsetAdjusted < 0)) {\n            long prev = previousTransition(instantAdjusted);\n            long next = nextTransition(instantAdjusted);\n\n            if (offsetAdjusted >= 0) {\n                if (next > instantAdjusted) {\n                    int offsetNext = getOffset(next);\n                    if (offsetLocal - offsetNext < 0) {\n                        return offsetNext;\n                    }\n                }\n                return offsetAdjusted;\n            } else {\n                if (prev < instantAdjusted) {\n                    int offsetPrev = getOffset(prev);\n                    if (offsetPrev <= offsetLocal) {\n                        return offsetPrev;\n                    }\n                }\n                return offsetLocal;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid offsetLocal and offsetAdjusted combination\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..8d3969b0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,64 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal == offsetAdjusted && offsetLocal >= 0) {\n+            return offsetAdjusted;\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n+            long prev = previousTransition(instantAdjusted);\n+            if (prev < instantAdjusted) {\n+                int offsetPrev = getOffset(prev);\n+                int diff = offsetPrev - offsetLocal;\n+                if (instantAdjusted - prev <= diff) {\n+                    return offsetPrev;\n+                }\n+            }\n+            return offsetAdjusted;\n+        } else if ((offsetLocal < 0 && offsetAdjusted < 0) && (offsetLocal != offsetAdjusted)) {\n+            long prev = previousTransition(instantAdjusted);\n+            if (prev < instantAdjusted) {\n+                int offsetPrev = getOffset(prev);\n+                if (offsetPrev <= offsetLocal) {\n+                    return offsetPrev;\n+                }\n+            }\n+            long next = nextTransition(instantAdjusted);\n+            if (next > instantAdjusted) {\n+                int offsetNext = getOffset(next);\n+                if (offsetLocal - offsetNext < 0) {\n+                    return offsetNext;\n+                }\n+            }\n+            return offsetLocal;\n+        } else if ((offsetLocal < 0 && offsetAdjusted >= 0) || (offsetLocal >= 0 && offsetAdjusted < 0)) {\n+            long prev = previousTransition(instantAdjusted);\n+            long next = nextTransition(instantAdjusted);\n+\n+            if (offsetAdjusted >= 0) {\n+                if (next > instantAdjusted) {\n+                    int offsetNext = getOffset(next);\n+                    if (offsetLocal - offsetNext < 0) {\n+                        return offsetNext;\n+                    }\n+                }\n+                return offsetAdjusted;\n+            } else {\n+                if (prev < instantAdjusted) {\n+                    int offsetPrev = getOffset(prev);\n+                    if (offsetPrev <= offsetLocal) {\n+                        return offsetPrev;\n+                    }\n+                }\n+                return offsetLocal;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Invalid offsetLocal and offsetAdjusted combination\");\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}