{
    "patch": "// Functions with explicit 'this' types must be called in a GETPROP\n// or GETELEM.\nJSType typeOfThis = functionType.getTypeOfThis();\nif (typeOfThis != null) {\n  boolean isGetOrSetKey = NodeUtil.isGetOrSetKey(n.getParent());\n  boolean isFunctionExpression = NodeUtil.isFunctionExpression(n.getParent());\n  if (!isGetOrSetKey && !isFunctionExpression) {\n    Node grandparent = n.getAncestor(2);\n    boolean isCallOnSuper = grandparent.isCall() && \"super\".equals(grandparent.getFirstChild().getQualifiedName());\n\n    if (!isCallOnSuper) {\n      report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n      ensureTyped(t, n);\n      return;\n    }\n  }\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..b3fca56a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Functions with explicit 'this' types must be called in a GETPROP\n+// or GETELEM.\n+JSType typeOfThis = functionType.getTypeOfThis();\n+if (typeOfThis != null) {\n+  boolean isGetOrSetKey = NodeUtil.isGetOrSetKey(n.getParent());\n+  boolean isFunctionExpression = NodeUtil.isFunctionExpression(n.getParent());\n+  if (!isGetOrSetKey && !isFunctionExpression) {\n+    Node grandparent = n.getAncestor(2);\n+    boolean isCallOnSuper = grandparent.isCall() && \"super\".equals(grandparent.getFirstChild().getQualifiedName());\n+\n+    if (!isCallOnSuper) {\n+      report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+      ensureTyped(t, n);\n+      return;\n+    }\n+  }\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}