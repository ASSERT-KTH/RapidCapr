{
    "patch": "public static double getTypedPercent(String js) {\n    int numTyped = 0;\n    int numChars = 0;\n    boolean inQuote = false;\n\n    for (char c : js.toCharArray()) {\n        if (c == '\"') {\n            inQuote = !inQuote;\n        } else if (!inQuote) {\n            if (!Character.isWhitespace(c)) {\n                numChars++;\n                if (c != ',') {\n                    numTyped++;\n                }\n            }\n        }\n    }\n    return ((double)numTyped / (double)numChars) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8a689e20 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int numTyped = 0;\n+    int numChars = 0;\n+    boolean inQuote = false;\n+\n+    for (char c : js.toCharArray()) {\n+        if (c == '\"') {\n+            inQuote = !inQuote;\n+        } else if (!inQuote) {\n+            if (!Character.isWhitespace(c)) {\n+                numChars++;\n+                if (c != ',') {\n+                    numTyped++;\n+                }\n+            }\n+        }\n+    }\n+    return ((double)numTyped / (double)numChars) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}