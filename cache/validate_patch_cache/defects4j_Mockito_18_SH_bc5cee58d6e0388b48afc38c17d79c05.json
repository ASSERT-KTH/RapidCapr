{
    "patch": "public <T> MethodInvocationValues thenReturn(T value) {\n    methodCallBehavior.put(methodCallBehavior.size(), new ReturnValueBehavior(value));\n    return this;\n}\n\npublic <T> MethodInvocationValues thenReturn(Class<T> clazz) {\n    methodCallBehavior.put(methodCallBehavior.size(), new ReturnInstanceOfBehavior(clazz));\n    return this;\n}\n\npublic MethodInvocationValues thenThrow(Throwable throwable) {\n    methodCallBehavior.put(methodCallBehavior.size(), new ThrowExceptionBehavior(throwable));\n    return this;\n}\n\n@SuppressWarnings(\"unchecked\")\npublic <T> T returnValueFor(Class<T> clazz) throws Throwable {\n    for (Behavior behavior : methodCallBehavior.values()) {\n        if (behavior instanceof ReturnValueBehavior) {\n            return (T) ((ReturnValueBehavior) behavior).getValue();\n        }\n        if (behavior instanceof ReturnInstanceOfBehavior) {\n            ReturnInstanceOfBehavior returnInstanceOfBehavior = (ReturnInstanceOfBehavior) behavior;\n            if (returnInstanceOfBehavior.getClassToReturn().isAssignableFrom(clazz)) {\n                return (T) returnInstanceOfBehavior.getClassToReturn().newInstance();\n            }\n        }\n        if (behavior instanceof ThrowExceptionBehavior) {\n            ThrowExceptionBehavior throwExceptionBehavior = (ThrowExceptionBehavior) behavior;\n            throw throwExceptionBehavior.getThrowable();\n        }\n    }\n    return null; // this line was added after the last hunk, but it should not be reached\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}