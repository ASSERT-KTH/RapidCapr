{
    "patch": "import org.json.*;\n\npublic class MyClass {\n\tpublic static double getTypedPercent(String jsonString) {\n\t\ttry {\n\t\t\tJSONObject json = new JSONObject(jsonString);\n\t\t\tint total = json.getInt(\"total\");\n\t\t\tint typed = json.getInt(\"typed\");\n\t\t\tif (total == 0) return 100;\n\t\t\telse return ((double)typed / total) * 100;\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn -1.0;\n\t\t}\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..bd152b63 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.*;\n+\n+public class MyClass {\n+\tpublic static double getTypedPercent(String jsonString) {\n+\t\ttry {\n+\t\t\tJSONObject json = new JSONObject(jsonString);\n+\t\t\tint total = json.getInt(\"total\");\n+\t\t\tint typed = json.getInt(\"typed\");\n+\t\t\tif (total == 0) return 100;\n+\t\t\telse return ((double)typed / total) * 100;\n+\t\t} catch (JSONException e) {\n+\t\t\te.printStackTrace();\n+\t\t\treturn -1.0;\n+\t\t}\n+\t}\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}