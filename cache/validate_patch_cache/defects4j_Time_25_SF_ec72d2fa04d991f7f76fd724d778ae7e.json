{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // find the boundaries of the current zone\n    long nextTransition = nextTransition(instantLocal);\n    long previousTransition = previousTransition(instantLocal);\n\n    // if the local time is in a DST gap, return the earlier offset\n    if (nextTransition > 0 && instantLocal + getOffset(nextTransition - 1) >= nextTransition) {\n        return getOffset(nextTransition - 1);\n    }\n\n    // if the local time is in a DST overlap, return the later offset\n    if (previousTransition > 0 && instantLocal + getOffset(previousTransition - 1) >= previousTransition) {\n        return getOffset(previousTransition);\n    }\n\n    // otherwise return the usual offset for the current zone\n    return getOffset(instantLocal);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4f1d9d17 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,25 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // find the boundaries of the current zone\n+    long nextTransition = nextTransition(instantLocal);\n+    long previousTransition = previousTransition(instantLocal);\n+\n+    // if the local time is in a DST gap, return the earlier offset\n+    if (nextTransition > 0 && instantLocal + getOffset(nextTransition - 1) >= nextTransition) {\n+        return getOffset(nextTransition - 1);\n+    }\n+\n+    // if the local time is in a DST overlap, return the later offset\n+    if (previousTransition > 0 && instantLocal + getOffset(previousTransition - 1) >= previousTransition) {\n+        return getOffset(previousTransition);\n     }\n \n+    // otherwise return the usual offset for the current zone\n+    return getOffset(instantLocal);\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}