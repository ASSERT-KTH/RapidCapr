{
    "patch": "public static boolean containsAny(CharSequence str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    final int strLen = str.length();\n    final int searchLen = searchChars.length;\n    final int searchMax = searchLen - 1;\n    for (int i = 0; i < strLen; i++) {\n        final char ch = str.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            final char searchChar = searchChars[j];\n            if (ch == searchChar) {\n                return true;\n            }\n            if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE && j < searchMax) {\n                final int k = i + 1;\n                final char ch2 = str.charAt(k);\n                final int codePoint = Character.toCodePoint(ch, ch2);\n                if (codePoint == Character.toCodePoint(searchChar, searchChars[j + 1])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..64bd299f 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,32 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+    final int strLen = str.length();\n+    final int searchLen = searchChars.length;\n+    final int searchMax = searchLen - 1;\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = str.charAt(i);\n+        for (int j = 0; j < searchLen; j++) {\n+            final char searchChar = searchChars[j];\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+            if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE && j < searchMax) {\n+                final int k = i + 1;\n+                final char ch2 = str.charAt(k);\n+                final int codePoint = Character.toCodePoint(ch, ch2);\n+                if (codePoint == Character.toCodePoint(searchChar, searchChars[j + 1])) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}