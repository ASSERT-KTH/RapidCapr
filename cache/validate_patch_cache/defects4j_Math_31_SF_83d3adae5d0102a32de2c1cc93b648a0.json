{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = getB(0, x);\n    double p0 = hPrev * dPrev;\n    double q1 = dPrev;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * cPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scaleFactor = 1.0;\n            double lastScaleFactor = 1.0;\n            final int maxPower = 5;\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scale <= 0) {  // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < maxPower; i++) {\n                lastScaleFactor = scaleFactor;\n                scaleFactor *= scale;\n                cN = cPrev / lastScaleFactor + (b / scaleFactor * p0);\n                q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                    break;\n                }\n                if (i == maxPower - 1) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n            }\n        }\n\n        final double deltaN = cN / q2 / cPrev;\n        hN = cN / q2;\n\n        if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n            if (x == 0.0) {\n                return Double.POSITIVE_INFINITY;\n            }\n            double rho = a / b;\n            // Apply a 2nd round of convergence checks if the 1st round caused divergence\n            boolean tryAgain = true;\n            while (tryAgain) {\n                tryAgain = false;\n                rho = a / (b + rho);\n                if (Precision.equals(1.0 / rho, 0, epsilon)) {\n                    // Found a finite limit of the sequence of convergents\n                    return hN;\n                }\n\n                if (Double.isInfinite(rho) || Double.isNaN(rho)) {\n                    if (a == 0.0) {\n                        return Double.POSITIVE_INFINITY;\n                    }\n\n                    if (b == 0.0) {\n                        return 0.0;\n                    }\n\n                    // there is no finite limit of the sequence, but there is a subsequence with a limit\n                    // Running inverseTransform on a sequence of products *must necessarily* have formally infinite limits\n                    // E.g. a_n = infinity, b_n = 0 for large n;\n                    //      => a_n * b_n = 0\n                    hPrev = hN;\n                    p0 = rho;\n                    dPrev = 1.0;\n                    cPrev = hPrev;\n                    q1 = rho;\n                    n = 1;\n                    while (n < maxIterations) {\n                        final double aPrime = getA(n, x);\n                        final double bPrime = getB(n, x);\n                        dPrev = bPrime + aPrime * dPrev;\n                        if (Double.isInfinite(dPrev)) {\n                            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                        }\n                        if (Precision.equals(dPrev, 0.0, small)) {\n                            dPrev = small;\n                        }\n                        cPrev = bPrime + aPrime / cPrev;\n                        if (Double.isInfinite(cPrev)) {\n                            double scaleFactor = 1.0;\n                            double lastScaleFactor = 1.0;\n                            final int maxPower = 5;\n                            final double scale = FastMath.max(FastMath.abs(aPrime), FastMath.abs(bPrime));\n                            if (scale <= 0) {  // Can't scale\n                                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                            }\n                            for (int i = 0; i < maxPower; i++) {\n                                lastScaleFactor = scaleFactor;\n                                scaleFactor *= scale;\n                                cPrev = cPrev / lastScaleFactor + (bPrime / scaleFactor + aPrime * hPrev);\n                                if (!Double.isInfinite(cPrev)) {\n                                    break;\n                                }\n                                if (i == maxPower - 1) {\n                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                                }\n                            }\n                        }\n                        q1 = bPrime + aPrime / q1;\n                        if (Double.isInfinite(q1)) {\n                            double scaleFactor = 1.0;\n                            double lastScaleFactor = 1.0;\n                            final int maxPower = 5;\n                            final double scale = FastMath.max(FastMath.abs(aPrime), FastMath.abs(bPrime));\n                            if (scale <= 0) {  // Can't scale\n                                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                            }\n                            for (int i = 0; i < maxPower; i++) {\n                                lastScaleFactor = scaleFactor;\n                                scaleFactor *= scale;\n                                q1 = q1 / lastScaleFactor + (bPrime / scaleFactor + aPrime * rho);\n                                if (!Double.isInfinite(q1)) {\n                                    break;\n                                }\n                                if (i == maxPower - 1) {\n                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                                }\n                            }\n                        }\n                        hN = cPrev / q1;\n                        if (Double.isInfinite(hN)) {\n                            rho = a / (b + rho);\n                            tryAgain = true;\n                            break;\n                        } else if (FastMath.abs(hN / hPrev - 1.0) < epsilon) {\n                            // The ratio of consecutive terms has converged to within the specified accuracy\n                            // Return the last term\n                            return hN;\n                        } else {\n                            // Not converged yet, continue with the next term\n                            hPrev = hN;\n                        }\n                        n++;\n                    }\n\n                    // Subsequence doesn't converge. Giving up.\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n            }\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev * dPrev;\n        hPrev = hN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..2ead93c86 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,178 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+    int n = 1;\n+    double dPrev = getB(0, x);\n+    double p0 = hPrev * dPrev;\n+    double q1 = dPrev;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * cPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+            double scaleFactor = 1.0;\n+            double lastScaleFactor = 1.0;\n+            final int maxPower = 5;\n+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+            if (scale <= 0) {  // Can't scale\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            }\n+            for (int i = 0; i < maxPower; i++) {\n+                lastScaleFactor = scaleFactor;\n+                scaleFactor *= scale;\n+                cN = cPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                    break;\n                 }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n+                if (i == maxPower - 1) {\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                 }\n             }\n+        }\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+        final double deltaN = cN / q2 / cPrev;\n+        hN = cN / q2;\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+        if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n+            if (x == 0.0) {\n+                return Double.POSITIVE_INFINITY;\n             }\n+            double rho = a / b;\n+            // Apply a 2nd round of convergence checks if the 1st round caused divergence\n+            boolean tryAgain = true;\n+            while (tryAgain) {\n+                tryAgain = false;\n+                rho = a / (b + rho);\n+                if (Precision.equals(1.0 / rho, 0, epsilon)) {\n+                    // Found a finite limit of the sequence of convergents\n+                    return hN;\n+                }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n-            }\n+                if (Double.isInfinite(rho) || Double.isNaN(rho)) {\n+                    if (a == 0.0) {\n+                        return Double.POSITIVE_INFINITY;\n+                    }\n+\n+                    if (b == 0.0) {\n+                        return 0.0;\n+                    }\n \n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+                    // there is no finite limit of the sequence, but there is a subsequence with a limit\n+                    // Running inverseTransform on a sequence of products *must necessarily* have formally infinite limits\n+                    // E.g. a_n = infinity, b_n = 0 for large n;\n+                    //      => a_n * b_n = 0\n+                    hPrev = hN;\n+                    p0 = rho;\n+                    dPrev = 1.0;\n+                    cPrev = hPrev;\n+                    q1 = rho;\n+                    n = 1;\n+                    while (n < maxIterations) {\n+                        final double aPrime = getA(n, x);\n+                        final double bPrime = getB(n, x);\n+                        dPrev = bPrime + aPrime * dPrev;\n+                        if (Double.isInfinite(dPrev)) {\n+                            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                        }\n+                        if (Precision.equals(dPrev, 0.0, small)) {\n+                            dPrev = small;\n+                        }\n+                        cPrev = bPrime + aPrime / cPrev;\n+                        if (Double.isInfinite(cPrev)) {\n+                            double scaleFactor = 1.0;\n+                            double lastScaleFactor = 1.0;\n+                            final int maxPower = 5;\n+                            final double scale = FastMath.max(FastMath.abs(aPrime), FastMath.abs(bPrime));\n+                            if (scale <= 0) {  // Can't scale\n+                                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                            }\n+                            for (int i = 0; i < maxPower; i++) {\n+                                lastScaleFactor = scaleFactor;\n+                                scaleFactor *= scale;\n+                                cPrev = cPrev / lastScaleFactor + (bPrime / scaleFactor + aPrime * hPrev);\n+                                if (!Double.isInfinite(cPrev)) {\n+                                    break;\n+                                }\n+                                if (i == maxPower - 1) {\n+                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                                }\n+                            }\n+                        }\n+                        q1 = bPrime + aPrime / q1;\n+                        if (Double.isInfinite(q1)) {\n+                            double scaleFactor = 1.0;\n+                            double lastScaleFactor = 1.0;\n+                            final int maxPower = 5;\n+                            final double scale = FastMath.max(FastMath.abs(aPrime), FastMath.abs(bPrime));\n+                            if (scale <= 0) {  // Can't scale\n+                                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                            }\n+                            for (int i = 0; i < maxPower; i++) {\n+                                lastScaleFactor = scaleFactor;\n+                                scaleFactor *= scale;\n+                                q1 = q1 / lastScaleFactor + (bPrime / scaleFactor + aPrime * rho);\n+                                if (!Double.isInfinite(q1)) {\n+                                    break;\n+                                }\n+                                if (i == maxPower - 1) {\n+                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                                }\n+                            }\n+                        }\n+                        hN = cPrev / q1;\n+                        if (Double.isInfinite(hN)) {\n+                            rho = a / (b + rho);\n+                            tryAgain = true;\n+                            break;\n+                        } else if (FastMath.abs(hN / hPrev - 1.0) < epsilon) {\n+                            // The ratio of consecutive terms has converged to within the specified accuracy\n+                            // Return the last term\n+                            return hN;\n+                        } else {\n+                            // Not converged yet, continue with the next term\n+                            hPrev = hN;\n+                        }\n+                        n++;\n+                    }\n+\n+                    // Subsequence doesn't converge. Giving up.\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+            }\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            break;\n         }\n \n-        return hN;\n+        dPrev = q1;\n+        cPrev = cN / q2;\n+        p0 = hPrev * dPrev;\n+        hPrev = hN;\n+        q1 = q2;\n+        n++;\n+    }\n+\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n     }\n \n+    return hN;\n+}\n+\n }",
    "result_reason": "org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction convergents diverged to +/- infinity for value 0.1",
    "test_result": "FAIL"
}