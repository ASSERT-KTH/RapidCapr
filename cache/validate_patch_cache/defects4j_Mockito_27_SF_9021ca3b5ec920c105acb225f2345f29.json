{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Proxy) {\n        ProxyFactory proxyFactory = new ProxyFactory();\n        // remove callback if it exists\n        try {\n            proxyFactory.getCallback(0);\n            proxyFactory.setCallback(0, null);\n        } catch (IllegalArgumentException e) {\n            // do nothing, there was no callback to remove\n        }\n        proxyFactory.setSuperclass(mock.getClass().getSuperclass());\n        proxyFactory.setFilter(new MethodInterceptorFilter[0]);\n        mock = (T) proxyFactory.create(new Class<?>[0], new Object[0], newFilter);\n    } else if (mock instanceof CGLIBEnhanced) {\n        ((Factory) mock).setCallback(0, null);\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        throw new IllegalArgumentException(\"Mock object not supported\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..999b43423 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Proxy) {\n+        ProxyFactory proxyFactory = new ProxyFactory();\n+        // remove callback if it exists\n+        try {\n+            proxyFactory.getCallback(0);\n+            proxyFactory.setCallback(0, null);\n+        } catch (IllegalArgumentException e) {\n+            // do nothing, there was no callback to remove\n+        }\n+        proxyFactory.setSuperclass(mock.getClass().getSuperclass());\n+        proxyFactory.setFilter(new MethodInterceptorFilter[0]);\n+        mock = (T) proxyFactory.create(new Class<?>[0], new Object[0], newFilter);\n+    } else if (mock instanceof CGLIBEnhanced) {\n+        ((Factory) mock).setCallback(0, null);\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        throw new IllegalArgumentException(\"Mock object not supported\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}