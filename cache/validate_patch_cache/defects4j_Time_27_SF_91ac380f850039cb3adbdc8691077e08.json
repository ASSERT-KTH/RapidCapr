{
    "patch": "            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    private static Object[] createComposite(List<Object> elementPairs) {\n        int size = elementPairs.size();\n        if (size == 1) {\n            Object[] comp = new Object[2];\n            comp[0] = elementPairs.get(0);\n            comp[1] = elementPairs.get(0);\n            checkUnsupported(comp);\n            return comp;\n        }\n        Object[] comp = createComposite(elementPairs.subList(0, size - 1));\n        checkUnsupported(comp);\n        if (elementPairs.get(size - 1) instanceof Separator) {\n            comp[1] = ((Separator) elementPairs.get(size - 1)).finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        } else {\n            comp[0] = ((Element) elementPairs.get(size - 1)).finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            comp[1] = ((Element) elementPairs.get(size - 1)).finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n        return comp;\n    }\n\n    private static void checkUnsupported(Object[] comp) {\n        if (comp[0] != null && comp[1] != null && !((comp[0] instanceof UnsupportedDurationField) \n                && (comp[1] instanceof UnsupportedDurationField))) {\n            throw new UnsupportedOperationException(\"Mutually exclusive printing and parsing not supported\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d534b64a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,16 +791,9 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n@@ -812,6 +805,31 @@ public class PeriodFormatterBuilder {\n         }\n     }\n \n+    private static Object[] createComposite(List<Object> elementPairs) {\n+        int size = elementPairs.size();\n+        if (size == 1) {\n+            Object[] comp = new Object[2];\n+            comp[0] = elementPairs.get(0);\n+            comp[1] = elementPairs.get(0);\n+            checkUnsupported(comp);\n+            return comp;\n+        }\n+        Object[] comp = createComposite(elementPairs.subList(0, size - 1));\n+        checkUnsupported(comp);\n+        if (elementPairs.get(size - 1) instanceof Separator) {\n+            comp[1] = ((Separator) elementPairs.get(size - 1)).finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        } else {\n+            comp[0] = ((Element) elementPairs.get(size - 1)).finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            comp[1] = ((Element) elementPairs.get(size - 1)).finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        }\n+        return comp;\n+    }\n+\n+    private static void checkUnsupported(Object[] comp) {\n+        if (comp[0] != null && comp[1] != null && !((comp[0] instanceof UnsupportedDurationField) \n+                && (comp[1] instanceof UnsupportedDurationField))) {\n+            throw new UnsupportedOperationException(\"Mutually exclusive printing and parsing not supported\");\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}