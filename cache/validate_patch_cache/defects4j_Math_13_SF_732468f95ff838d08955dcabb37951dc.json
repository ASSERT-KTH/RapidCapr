{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVector = dec.getV();\n    for (int i = 0; i < eigenVector.getColumnDimension(); i++) {\n        RealVector colVector = eigenVector.getColumnVector(i);\n        for (int j = 0; j < colVector.getDimension(); j++) {\n            colVector.setEntry(j, FastMath.sqrt(FastMath.abs(dec.getRealEigenvalue(i))) * colVector.getEntry(j) / colVector.getNorm());\n        }\n        eigenVector.setColumnVector(i, colVector);\n    }\n    return eigenVector.multiply(eigenVector.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3f53837b4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVector = dec.getV();\n+    for (int i = 0; i < eigenVector.getColumnDimension(); i++) {\n+        RealVector colVector = eigenVector.getColumnVector(i);\n+        for (int j = 0; j < colVector.getDimension(); j++) {\n+            colVector.setEntry(j, FastMath.sqrt(FastMath.abs(dec.getRealEigenvalue(i))) * colVector.getEntry(j) / colVector.getNorm());\n+        }\n+        eigenVector.setColumnVector(i, colVector);\n     }\n+    return eigenVector.multiply(eigenVector.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}