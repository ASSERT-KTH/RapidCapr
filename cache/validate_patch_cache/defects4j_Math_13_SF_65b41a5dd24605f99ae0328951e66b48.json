{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = null;\n    if (dec.hasRealEigenvalues()) { // check for real eigenvalues\n        RealMatrix eigValSqrt = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            double eigVal = dec.getRealEigenvalue(i);\n            if (eigVal < 0) { // check for negative eigenvalues\n                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n            }\n            eigValSqrt.setEntry(i, i, Math.sqrt(eigVal));\n        }\n        RealMatrix eigVec = dec.getV();\n        sqrt = eigVec.multiply(eigValSqrt).multiply(eigVec.transpose());\n    } else {\n        // matrix does not have real eigenvalues, perform QR decomposition\n        QRDecomposition qr = new QRDecomposition(m);\n        RealMatrix q = qr.getQ();\n        RealMatrix r = qr.getR();\n        RealMatrix qSqrt = squareRoot(q);\n        RealMatrix rSqrt = squareRoot(r);\n        sqrt = qSqrt.multiply(rSqrt);\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7bb406878 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = null;\n+    if (dec.hasRealEigenvalues()) { // check for real eigenvalues\n+        RealMatrix eigValSqrt = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            double eigVal = dec.getRealEigenvalue(i);\n+            if (eigVal < 0) { // check for negative eigenvalues\n+                throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+            }\n+            eigValSqrt.setEntry(i, i, Math.sqrt(eigVal));\n+        }\n+        RealMatrix eigVec = dec.getV();\n+        sqrt = eigVec.multiply(eigValSqrt).multiply(eigVec.transpose());\n+    } else {\n+        // matrix does not have real eigenvalues, perform QR decomposition\n+        QRDecomposition qr = new QRDecomposition(m);\n+        RealMatrix q = qr.getQ();\n+        RealMatrix r = qr.getR();\n+        RealMatrix qSqrt = squareRoot(q);\n+        RealMatrix rSqrt = squareRoot(r);\n+        sqrt = qSqrt.multiply(rSqrt);\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}