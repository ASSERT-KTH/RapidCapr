{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset at the instant local\n    int initialOffset = getOffset(instantLocal);\n    // Adjust the instant local using the initial offset\n    long instantAdjusted = instantLocal - initialOffset;\n    // Get the offset at the adjusted instant\n    int secondOffset = getOffset(instantAdjusted);\n    // If the initial offset and the second offset are the same, return the initial offset\n    if (initialOffset == secondOffset) {\n        return initialOffset;\n    }\n    // Check if we are in a DST gap or overlap\n    boolean isGap = (initialOffset < secondOffset);\n    // Get the transition point\n    long transition = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    // Get the offset at the transition point\n    int transitionOffset = getOffset(transition);\n    // Check if the instant is within the DST gap or overlap\n    if (isWithinTransitionZone(instantLocal, initialOffset, transitionOffset, transition, isGap)) {\n        // If we are in a gap, return the initial offset\n        if (isGap) {\n            return initialOffset;\n        }\n        // If we are in an overlap, return the transition offset\n        else {\n            return transitionOffset;\n        }\n    }\n    // If we are not within the DST gap or overlap, return the correct offset for the instant\n    return isGap ? transitionOffset : initialOffset;\n}\n\nprivate boolean isWithinTransitionZone(long instantLocal, int initialOffset, int transitionOffset, long transition, boolean isGap) {\n    // Calculate the difference between the instant and the transition point\n    long diff = instantLocal - transition;\n    // Check if the instant is within the DST gap or overlap\n    return (isGap && (diff >= 0) && (diff < (transitionOffset - initialOffset))) ||\n           (!isGap && ((diff < 0) || (diff >= (transitionOffset - initialOffset))));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..43cf3055 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset at the instant local\n+    int initialOffset = getOffset(instantLocal);\n+    // Adjust the instant local using the initial offset\n+    long instantAdjusted = instantLocal - initialOffset;\n+    // Get the offset at the adjusted instant\n+    int secondOffset = getOffset(instantAdjusted);\n+    // If the initial offset and the second offset are the same, return the initial offset\n+    if (initialOffset == secondOffset) {\n+        return initialOffset;\n+    }\n+    // Check if we are in a DST gap or overlap\n+    boolean isGap = (initialOffset < secondOffset);\n+    // Get the transition point\n+    long transition = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    // Get the offset at the transition point\n+    int transitionOffset = getOffset(transition);\n+    // Check if the instant is within the DST gap or overlap\n+    if (isWithinTransitionZone(instantLocal, initialOffset, transitionOffset, transition, isGap)) {\n+        // If we are in a gap, return the initial offset\n+        if (isGap) {\n+            return initialOffset;\n+        }\n+        // If we are in an overlap, return the transition offset\n+        else {\n+            return transitionOffset;\n         }\n-        return offsetAdjusted;\n     }\n+    // If we are not within the DST gap or overlap, return the correct offset for the instant\n+    return isGap ? transitionOffset : initialOffset;\n+}\n+\n+private boolean isWithinTransitionZone(long instantLocal, int initialOffset, int transitionOffset, long transition, boolean isGap) {\n+    // Calculate the difference between the instant and the transition point\n+    long diff = instantLocal - transition;\n+    // Check if the instant is within the DST gap or overlap\n+    return (isGap && (diff >= 0) && (diff < (transitionOffset - initialOffset))) ||\n+           (!isGap && ((diff < 0) || (diff >= (transitionOffset - initialOffset))));\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}