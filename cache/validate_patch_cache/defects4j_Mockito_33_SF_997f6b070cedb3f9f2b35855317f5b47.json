{
    "patch": "public boolean hasSameMethod(Invocation candidate) {\n    if (invocation == null || candidate == null) {\n        return false;\n    }\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n    \n    // Check if both methods are from the same class\n    if (!m1.getDeclaringClass().equals(m2.getDeclaringClass())) {\n        return false;\n    }\n    \n    String m1Name = m1.getName();\n    String m2Name = m2.getName();\n    \n    if (!m1Name.equals(m2Name)) {\n        return false;\n    }\n    \n    if (m1.getParameterCount() != m2.getParameterCount()) {\n        return false;\n    }\n    \n    Class<?>[] m1Params = m1.getParameterTypes();\n    Class<?>[] m2Params = m2.getParameterTypes();\n    \n    for (int i = 0; i < m1Params.length; i++) {\n        if (!m1Params[i].equals(m2Params[i])) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..3a85ff805 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,16 +89,41 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+public boolean hasSameMethod(Invocation candidate) {\n+    if (invocation == null || candidate == null) {\n+        return false;\n+    }\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+    \n+    // Check if both methods are from the same class\n+    if (!m1.getDeclaringClass().equals(m2.getDeclaringClass())) {\n+        return false;\n+    }\n+    \n+    String m1Name = m1.getName();\n+    String m2Name = m2.getName();\n+    \n+    if (!m1Name.equals(m2Name)) {\n+        return false;\n+    }\n+    \n+    if (m1.getParameterCount() != m2.getParameterCount()) {\n+        return false;\n     }\n     \n+    Class<?>[] m1Params = m1.getParameterTypes();\n+    Class<?>[] m2Params = m2.getParameterTypes();\n+    \n+    for (int i = 0; i < m1Params.length; i++) {\n+        if (!m1Params[i].equals(m2Params[i])) {\n+            return false;\n+        }\n+    }\n+    \n+    return true;\n+}\n+    \n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n@@ -126,4 +151,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}