{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvalues = dec.getD();\n    final RealMatrix eigenvectors = dec.getV();\n\n    // Check for imaginary eigenvalues\n    if (eigenvalues.getTrace().getReal() < 0) {\n        throw new UnsupportedOperationException(\"Matrix square root is complex\");\n    }\n\n    // Compute the square root of the eigenvalues\n    final RealMatrix sqrtEigenvalues = eigenvalues.scalarMap(x -> FastMath.sqrt(FastMath.max(x, 0)));\n\n    // Compute V * D^(1/2)\n    final RealMatrix V_times_D_sqrt = eigenvectors.multiply(sqrtEigenvalues);\n\n    // Compute V * D^(1/2) * V^T using a projection scheme to avoid numerical issues\n    final RealMatrix projection;\n    try {\n        projection = V_times_D_sqrt.multiply(eigenvectors.transpose());\n    } catch (SingularMatrixException e) {\n        double maxEigenvalue = eigenvalues.getMaxValue();\n        projection = eigenvectors.multiply(eigenvectors.transpose().scalarMultiply(FastMath.sqrt(maxEigenvalue)));\n    }\n\n    // Remove small imaginary parts\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            double real = projection.getEntry(i, j);\n            double imag = projection.getEntry(i, j + 1);\n\n            if (FastMath.abs(imag) < FastMath.abs(real) * 1e-15) {\n                projection.setEntry(i, j + 1, 0.0);\n            } else if (FastMath.abs(real) < FastMath.abs(imag) * 1e-15) {\n                projection.setEntry(i, j, 0.0);\n            }\n        }\n    }\n\n    return projection;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6c8df13cf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,46 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvalues = dec.getD();\n+    final RealMatrix eigenvectors = dec.getV();\n+\n+    // Check for imaginary eigenvalues\n+    if (eigenvalues.getTrace().getReal() < 0) {\n+        throw new UnsupportedOperationException(\"Matrix square root is complex\");\n     }\n+\n+    // Compute the square root of the eigenvalues\n+    final RealMatrix sqrtEigenvalues = eigenvalues.scalarMap(x -> FastMath.sqrt(FastMath.max(x, 0)));\n+\n+    // Compute V * D^(1/2)\n+    final RealMatrix V_times_D_sqrt = eigenvectors.multiply(sqrtEigenvalues);\n+\n+    // Compute V * D^(1/2) * V^T using a projection scheme to avoid numerical issues\n+    final RealMatrix projection;\n+    try {\n+        projection = V_times_D_sqrt.multiply(eigenvectors.transpose());\n+    } catch (SingularMatrixException e) {\n+        double maxEigenvalue = eigenvalues.getMaxValue();\n+        projection = eigenvectors.multiply(eigenvectors.transpose().scalarMultiply(FastMath.sqrt(maxEigenvalue)));\n+    }\n+\n+    // Remove small imaginary parts\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            double real = projection.getEntry(i, j);\n+            double imag = projection.getEntry(i, j + 1);\n+\n+            if (FastMath.abs(imag) < FastMath.abs(real) * 1e-15) {\n+                projection.setEntry(i, j + 1, 0.0);\n+            } else if (FastMath.abs(real) < FastMath.abs(imag) * 1e-15) {\n+                projection.setEntry(i, j, 0.0);\n+            }\n+        }\n+    }\n+\n+    return projection;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}