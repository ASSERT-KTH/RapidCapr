{
    "patch": "public static <T> ReturnValue<?>[] removeIfContains(ReturnValue<T> value, Predicate<T> predicate) {\n    T val = value.returnValue();\n    if (val == null || !predicate.test(val)) {\n        return new ReturnValue<?>[]{value};\n    }\n    return new ReturnValue<?>[]{};\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a8ce4f18d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,13 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<?>[] removeIfContains(ReturnValue<T> value, Predicate<T> predicate) {\n+    T val = value.returnValue();\n+    if (val == null || !predicate.test(val)) {\n+        return new ReturnValue<?>[]{value};\n+    }\n+    return new ReturnValue<?>[]{};\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}