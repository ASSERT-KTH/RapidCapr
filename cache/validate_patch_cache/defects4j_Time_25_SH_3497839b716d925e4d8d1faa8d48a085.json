{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    // There was a gap in time.\n    // Move the local instant to the next valid time\n    long newLocal = nextTransition(instantAdjusted);\n    int newLocalOffset = getOffset(newLocal);\n    if (newLocalOffset == offsetAdjusted) {\n        // The new local instant is valid\n        return offsetAdjusted;\n    } else {\n        // There was another gap in time\n        // Go back to the previous transition and return its offset\n        long prevLocal = previousTransition(instantLocal);\n        return getOffset(prevLocal);\n    }\n} else if (offsetLocal < offsetAdjusted) {\n    // There was an overlap in time.\n    // Move the local instant to the next invalid time\n    long newLocal = nextTransition(instantAdjusted);\n    int newLocalOffset = getOffset(newLocal);\n    if (newLocalOffset == offsetAdjusted) {\n        // There was another overlap in time\n        // Move the local instant to the next invalid time\n        newLocal = nextTransition(newLocal);\n        newLocalOffset = getOffset(newLocal);\n        if (newLocalOffset == offsetAdjusted) {\n            // The new local instant is invalid\n            return offsetLocal;\n        } else {\n            // There was another gap in time\n            // Go back to the previous transition and return its offset\n            long prevLocal = previousTransition(instantLocal);\n            return getOffset(prevLocal);\n        }\n    } else {\n        // The new local instant is invalid\n        return offsetLocal;\n    }\n} else {\n    // The offsets are the same\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..89f852f8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    // There was a gap in time.\n+    // Move the local instant to the next valid time\n+    long newLocal = nextTransition(instantAdjusted);\n+    int newLocalOffset = getOffset(newLocal);\n+    if (newLocalOffset == offsetAdjusted) {\n+        // The new local instant is valid\n+        return offsetAdjusted;\n+    } else {\n+        // There was another gap in time\n+        // Go back to the previous transition and return its offset\n+        long prevLocal = previousTransition(instantLocal);\n+        return getOffset(prevLocal);\n+    }\n+} else if (offsetLocal < offsetAdjusted) {\n+    // There was an overlap in time.\n+    // Move the local instant to the next invalid time\n+    long newLocal = nextTransition(instantAdjusted);\n+    int newLocalOffset = getOffset(newLocal);\n+    if (newLocalOffset == offsetAdjusted) {\n+        // There was another overlap in time\n+        // Move the local instant to the next invalid time\n+        newLocal = nextTransition(newLocal);\n+        newLocalOffset = getOffset(newLocal);\n+        if (newLocalOffset == offsetAdjusted) {\n+            // The new local instant is invalid\n+            return offsetLocal;\n+        } else {\n+            // There was another gap in time\n+            // Go back to the previous transition and return its offset\n+            long prevLocal = previousTransition(instantLocal);\n+            return getOffset(prevLocal);\n+        }\n+    } else {\n+        // The new local instant is invalid\n+        return offsetLocal;\n+    }\n+} else {\n+    // The offsets are the same\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}