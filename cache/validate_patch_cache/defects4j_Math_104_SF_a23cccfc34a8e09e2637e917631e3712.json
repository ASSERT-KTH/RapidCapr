{
    "patch": "import org.apache.commons.math3.util.TestUtils;\n\npublic class RegularizedGamma {\n\n    public static double regularizedGamma(double a, double x, int maxIterations, double tolerance) {\n        if (a <= 0 || x < 0) {\n            throw new IllegalArgumentException();\n        }\n        double incompleteGamma = incompleteGammaSeries(a, x, maxIterations, tolerance);\n        double gamma = Gamma.gamma(a);\n        return incompleteGamma / gamma;\n    }\n    \n    private static double incompleteGammaSeries(double a, double x, int maxIterations, double tolerance) {\n        double incompleteGamma = 0;\n        double incompleteGammaPrev = 0;\n        for (int n = 0; n < maxIterations; n++) {\n            double coefficient = Math.pow(x, n) / (Gamma.gamma(a + n + 1));\n            incompleteGamma += coefficient;\n            if (Math.abs(incompleteGamma - incompleteGammaPrev) < tolerance) {\n                return incompleteGamma;\n            }\n            incompleteGammaPrev = incompleteGamma;\n        }\n        throw new RuntimeException();\n    }\n\n    public static void main(String[] args) {\n        double expected = 0.632120558828558;\n        double actualP = regularizedGamma(10.0, 3.0, 1000, 1e-10);\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c65967f19 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.TestUtils;\n+\n+public class RegularizedGamma {\n+\n+    public static double regularizedGamma(double a, double x, int maxIterations, double tolerance) {\n+        if (a <= 0 || x < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        double incompleteGamma = incompleteGammaSeries(a, x, maxIterations, tolerance);\n+        double gamma = Gamma.gamma(a);\n+        return incompleteGamma / gamma;\n+    }\n+    \n+    private static double incompleteGammaSeries(double a, double x, int maxIterations, double tolerance) {\n+        double incompleteGamma = 0;\n+        double incompleteGammaPrev = 0;\n+        for (int n = 0; n < maxIterations; n++) {\n+            double coefficient = Math.pow(x, n) / (Gamma.gamma(a + n + 1));\n+            incompleteGamma += coefficient;\n+            if (Math.abs(incompleteGamma - incompleteGammaPrev) < tolerance) {\n+                return incompleteGamma;\n+            }\n+            incompleteGammaPrev = incompleteGamma;\n+        }\n+        throw new RuntimeException();\n+    }\n+\n+    public static void main(String[] args) {\n+        double expected = 0.632120558828558;\n+        double actualP = regularizedGamma(10.0, 3.0, 1000, 1e-10);\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}