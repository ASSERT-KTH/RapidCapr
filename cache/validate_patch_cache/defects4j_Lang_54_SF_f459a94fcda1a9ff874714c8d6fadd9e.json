{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (!isAlpha(ch0) || !isAlpha(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (len == 2) {\n        return new Locale(str);\n    } else if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    } else {\n        int i = 3;\n        for (; i < len; i++) {\n            char ch = str.charAt(i);\n            if (ch == '_') {\n                break;\n            } else if (!isAlpha(ch)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n        String language = str.substring(0, i);\n        if (i == len) {\n            return new Locale(language);\n        }\n\n        i++;\n\n        int start = i;\n        for (; i < len; i++) {\n            char ch = str.charAt(i);\n            if (ch == '_') {\n                break;\n            } else if (!isAlpha(ch)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n\n        String country = str.substring(start, i);\n\n        if (i == len) {\n            return new Locale(language, country);\n        }\n\n        if (i + 1 >= len || str.charAt(i) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        i++;\n\n        String variant = str.substring(i);\n        if (variant.length() == 4 && isAlpha(variant.charAt(0)) && isAlpha(variant.charAt(1))\n                && isAlpha(variant.charAt(2)) && isAlpha(variant.charAt(3))) {\n            return new Locale(language, country, variant);\n        } else if (variant.length() == 3 && isAlpha(variant.charAt(0)) && isAlpha(variant.charAt(1))\n                && isAlpha(variant.charAt(2))) {\n            return new Locale(language, country, variant);\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n}\n\nprivate static boolean isAlpha(char ch) {\n    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..a7bf4974 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,80 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+\n+    int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    char ch0 = str.charAt(0);\n+    char ch1 = str.charAt(1);\n+    if (!isAlpha(ch0) || !isAlpha(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (len == 2) {\n+        return new Locale(str);\n+    } else if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    } else {\n+        int i = 3;\n+        for (; i < len; i++) {\n+            char ch = str.charAt(i);\n+            if (ch == '_') {\n+                break;\n+            } else if (!isAlpha(ch)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n         }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        String language = str.substring(0, i);\n+        if (i == len) {\n+            return new Locale(language);\n+        }\n+\n+        i++;\n+\n+        int start = i;\n+        for (; i < len; i++) {\n+            char ch = str.charAt(i);\n+            if (ch == '_') {\n+                break;\n+            } else if (!isAlpha(ch)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+        }\n+\n+        String country = str.substring(start, i);\n+\n+        if (i == len) {\n+            return new Locale(language, country);\n         }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n+\n+        if (i + 1 >= len || str.charAt(i) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n+        i++;\n+\n+        String variant = str.substring(i);\n+        if (variant.length() == 4 && isAlpha(variant.charAt(0)) && isAlpha(variant.charAt(1))\n+                && isAlpha(variant.charAt(2)) && isAlpha(variant.charAt(3))) {\n+            return new Locale(language, country, variant);\n+        } else if (variant.length() == 3 && isAlpha(variant.charAt(0)) && isAlpha(variant.charAt(1))\n+                && isAlpha(variant.charAt(2))) {\n+            return new Locale(language, country, variant);\n         } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n     }\n+}\n+\n+private static boolean isAlpha(char ch) {\n+    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<fr[]> but was:<fr[_]>",
    "test_result": "FAIL"
}