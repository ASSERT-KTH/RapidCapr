{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        // try to extract the actual type from the first type variable argument of a parameterized parent type\n        TypeVariable<?>[] parentTypeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n        for (TypeVariable<?> parentTypeVariable : parentTypeVariables) {\n            Type parentGenericType = getActualTypeArgumentFor(parentTypeVariable);\n            if (parentGenericType instanceof ParameterizedType) {\n                Type[] parentActualTypeArguments = ((ParameterizedType) parentGenericType).getActualTypeArguments();\n                for (Type parentActualTypeArgument : parentActualTypeArguments) {\n                    if (parentActualTypeArgument instanceof TypeVariable &&\n                            ((TypeVariable<?>) parentActualTypeArgument).getName().equals(typeVariable.getName())) {\n                        actualTypeArgument = parentActualTypeArgument;\n                        break;\n                    }\n                }\n            }\n            if (actualTypeArgument != null) {\n                break;\n            }\n        }\n    }\n\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..317ce9979 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,40 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        // try to extract the actual type from the first type variable argument of a parameterized parent type\n+        TypeVariable<?>[] parentTypeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+        for (TypeVariable<?> parentTypeVariable : parentTypeVariables) {\n+            Type parentGenericType = getActualTypeArgumentFor(parentTypeVariable);\n+            if (parentGenericType instanceof ParameterizedType) {\n+                Type[] parentActualTypeArguments = ((ParameterizedType) parentGenericType).getActualTypeArguments();\n+                for (Type parentActualTypeArgument : parentActualTypeArguments) {\n+                    if (parentActualTypeArgument instanceof TypeVariable &&\n+                            ((TypeVariable<?>) parentActualTypeArgument).getName().equals(typeVariable.getName())) {\n+                        actualTypeArgument = parentActualTypeArgument;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (actualTypeArgument != null) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.IllegalStateException: Unable to extract actual type for type variable: MC3",
    "test_result": "FAIL"
}