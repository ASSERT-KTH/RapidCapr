{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n\nif (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n    try {\n        field.setAccessible(true);\n        Object oldValue = field.get(fieldInstance);\n        field.set(fieldInstance, candidate);\n        mocks.remove(candidate);\n        if (oldValue != null) {\n            mocks.add(oldValue);\n        }\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n    }\n} else if (candidate != null) {\n    String message = String.format(\"Mock candidate %s is not compatible with field type %s\",\n                                candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n    throw new IllegalArgumentException(message);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..001787521 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+\n+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+    try {\n+        field.setAccessible(true);\n+        Object oldValue = field.get(fieldInstance);\n+        field.set(fieldInstance, candidate);\n+        mocks.remove(candidate);\n+        if (oldValue != null) {\n+            mocks.add(oldValue);\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+    }\n+} else if (candidate != null) {\n+    String message = String.format(\"Mock candidate %s is not compatible with field type %s\",\n+                                candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n+    throw new IllegalArgumentException(message);\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@3324270d> was not:<mockedBean>",
    "test_result": "FAIL"
}