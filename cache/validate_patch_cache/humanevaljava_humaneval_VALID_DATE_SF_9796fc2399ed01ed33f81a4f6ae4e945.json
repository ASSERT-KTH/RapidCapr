{
    "patch": "    public static boolean valid_date(String date) {\n        try {\n            // Split date string into day, month and year components\n            String[] dateComponents = date.trim().split(\"-\");\n\n            // If there are not exactly 3 components, date is invalid\n            if (dateComponents.length != 3) {\n                return false;\n            }\n\n            // Parse day, month and year values from components\n            int day = Integer.parseInt(dateComponents[0]);\n            int month = Integer.parseInt(dateComponents[1]);\n            int year = Integer.parseInt(dateComponents[2]);\n\n            // Check that month is within valid range (1-12)\n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            // Check that day is within valid range based on month and year\n            if (day < 1 || day > getDaysInMonth(month, year)) {\n                return false;\n            }\n        } catch (NumberFormatException e) {\n            // If any of the date components are not integers, date is invalid\n            return false;\n        }\n\n        // If we get here, date is valid\n        return true;\n    }\n\n    // Helper function to get number of days in a month, accounting for leap years\n    private static int getDaysInMonth(int month, int year) {\n        if (month == 2) {\n            return isLeapYear(year) ? 29 : 28;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        } else {\n            return 31;\n        }\n    }\n\n    // Helper function to determine if a year is a leap year\n    private static boolean isLeapYear(int year) {\n        // A year is a leap year if it is divisible by 4, but not by 100 (unless it is also divisible by 400)\n        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/VALID_DATE.java b/src/main/java/humaneval/buggy/VALID_DATE.java\nindex b8c80ef..e63f6dc 100644\n--- a/src/main/java/humaneval/buggy/VALID_DATE.java\n+++ b/src/main/java/humaneval/buggy/VALID_DATE.java\n@@ -24,28 +24,51 @@ package humaneval.buggy;\n public class VALID_DATE {\n     public static boolean valid_date(String date) {\n         try {\n-            date = date.trim();\n-            String[] date_info = date.split(\"-\");\n-            if(date_info.length > 3) return false;\n-            int month = Integer.parseInt(date_info[0]);\n-            int day = Integer.parseInt(date_info[1]);\n-            int year = Integer.parseInt(date_info[2]);\n-\n-            if(month < 1 || month > 12) return false;\n-\n-            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n-            for(int i = 0; i < month_check1.length; i++) {\n-                if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n+            // Split date string into day, month and year components\n+            String[] dateComponents = date.trim().split(\"-\");\n+\n+            // If there are not exactly 3 components, date is invalid\n+            if (dateComponents.length != 3) {\n+                return false;\n             }\n \n-            int[] month_check2 = {4, 6, 9, 11};\n-            for(int i = 0; i < month_check2.length; i++) {\n-                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n+            // Parse day, month and year values from components\n+            int day = Integer.parseInt(dateComponents[0]);\n+            int month = Integer.parseInt(dateComponents[1]);\n+            int year = Integer.parseInt(dateComponents[2]);\n+\n+            // Check that month is within valid range (1-12)\n+            if (month < 1 || month > 12) {\n+                return false;\n             }\n-            if(month == 2 && (day < 1 || day > 29)) return false;\n-        } catch (Exception e) {\n+\n+            // Check that day is within valid range based on month and year\n+            if (day < 1 || day > getDaysInMonth(month, year)) {\n+                return false;\n+            }\n+        } catch (NumberFormatException e) {\n+            // If any of the date components are not integers, date is invalid\n             return false;\n         }\n+\n+        // If we get here, date is valid\n         return true;\n     }\n+\n+    // Helper function to get number of days in a month, accounting for leap years\n+    private static int getDaysInMonth(int month, int year) {\n+        if (month == 2) {\n+            return isLeapYear(year) ? 29 : 28;\n+        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n+            return 30;\n+        } else {\n+            return 31;\n+        }\n+    }\n+\n+    // Helper function to determine if a year is a leap year\n+    private static boolean isLeapYear(int year) {\n+        // A year is a leap year if it is divisible by 4, but not by 100 (unless it is also divisible by 400)\n+        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n+    }\n }",
    "result_reason": "   TEST_VALID_DATE.test_1:10 expected:<false> but was:<true>",
    "test_result": "FAIL"
}