{
    "patch": "        try {\n            int newYear = iDefaultYear;\n            for (int i = 0; i < count; i++) {\n                // Get the new millis after setting the current field\n                long newMillis = savedFields[i].set(millis, resetFields);\n                \n                // If the new millis is different and we've reached the first field (year),\n                // we need to adjust the year manually to handle ISO week years.\n                if (i == 0 && newMillis != millis) {\n                    DateTimeField firstField = savedFields[i].iField;\n                    DurationFieldType firstFieldType = firstField.getType();\n                    if (firstFieldType == DateTimeFieldType.weekyearType() ||\n                            firstFieldType == DateTimeFieldType.weekyearOfEraType()) {\n                        newYear = firstField.get(newMillis);\n                        if (firstFieldType == DateTimeFieldType.weekyearOfEraType() && newYear < 1) {\n                            newYear = 1 - newYear;\n                        }\n                    }\n                }\n                \n                // If the new millis is different, and we're not at the first field, we need\n                // to recursively re-parse the fields with the adjusted year.\n                if (newMillis != millis && i > 0) {\n                    saveField(DateTimeFieldType.year(), newYear);\n                    return computeMillis(resetFields, text);\n                }\n                \n                // Update the current millis\n                millis = newMillis;\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d4e0cc05 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            int newYear = iDefaultYear;\n+            for (int i = 0; i < count; i++) {\n+                // Get the new millis after setting the current field\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                \n+                // If the new millis is different and we've reached the first field (year),\n+                // we need to adjust the year manually to handle ISO week years.\n+                if (i == 0 && newMillis != millis) {\n+                    DateTimeField firstField = savedFields[i].iField;\n+                    DurationFieldType firstFieldType = firstField.getType();\n+                    if (firstFieldType == DateTimeFieldType.weekyearType() ||\n+                            firstFieldType == DateTimeFieldType.weekyearOfEraType()) {\n+                        newYear = firstField.get(newMillis);\n+                        if (firstFieldType == DateTimeFieldType.weekyearOfEraType() && newYear < 1) {\n+                            newYear = 1 - newYear;\n+                        }\n+                    }\n+                }\n+                \n+                // If the new millis is different, and we're not at the first field, we need\n+                // to recursively re-parse the fields with the adjusted year.\n+                if (newMillis != millis && i > 0) {\n+                    saveField(DateTimeFieldType.year(), newYear);\n+                    return computeMillis(resetFields, text);\n+                }\n+                \n+                // Update the current millis\n+                millis = newMillis;\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}