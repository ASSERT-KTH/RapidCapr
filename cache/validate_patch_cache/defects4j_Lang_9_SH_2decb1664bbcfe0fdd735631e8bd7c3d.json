{
    "patch": "if (currentStrategy != null) {\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n} else {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\ncurrentFormatField = nextFormatField;\ncurrentStrategy = nextStrategy;\nwhile (currentStrategy != null) {\n    currentFormatField = patternMatcher.group();\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    if (patternMatcher.regionEnd() - patternMatcher.end() > 0) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if (!patternMatcher.find()) {\n            break;\n        }\n        currentStrategy = getStrategy(patternMatcher.group());\n    } else {\n        currentStrategy = null;\n    }\n}\ncurrentFormatField = null;\nif (collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..3ed23b63 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,37 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (currentStrategy != null) {\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+} else {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+currentFormatField = nextFormatField;\n+currentStrategy = nextStrategy;\n+while (currentStrategy != null) {\n+    currentFormatField = patternMatcher.group();\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    if (patternMatcher.regionEnd() - patternMatcher.end() > 0) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if (!patternMatcher.find()) {\n+            break;\n+        }\n+        currentStrategy = getStrategy(patternMatcher.group());\n+    } else {\n+        currentStrategy = null;\n+    }\n+}\n+currentFormatField = null;\n+if (collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}