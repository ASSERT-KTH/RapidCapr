{
    "patch": "if (cfa != null) {\n    if (!NodeUtil.mayHaveSideEffects(finallyNode)) {\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    } else if (finallyNode.getFirstChild() != null){\n        computeControlFlow(finallyNode.getFirstChild(), finallyNode);\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getFirstChild(), cfa));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..cde9ee8e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,14 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+    if (!NodeUtil.mayHaveSideEffects(finallyNode)) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    } else if (finallyNode.getFirstChild() != null){\n+        computeControlFlow(finallyNode.getFirstChild(), finallyNode);\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getFirstChild(), cfa));\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}