{
    "patch": "      if (n.isParamList() && parent.isFunction()) {\n        handleFunctionInputs(n);\n        return;\n      }\n\n      attachLiteralTypes(n);\n\n      switch (n.getToken()) {\n        case FUNCTION:\n          // Do not visit the name node of a named function.\n          if (NodeUtil.isFunctionExpression(n) || parent.isName()) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case CATCH:\n          defineCatch(n, parent);\n          break;\n        case VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d7fa1e69 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,29 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (n.isParamList() && parent.isFunction()) {\n+        handleFunctionInputs(n);\n         return;\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+\n+      switch (n.getToken()) {\n+        case FUNCTION:\n+          // Do not visit the name node of a named function.\n+          if (NodeUtil.isFunctionExpression(n) || parent.isName()) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n+        case VAR:\n           defineVar(n, parent);\n           break;\n-      }\n-    }\n+        default:\n+          break;\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}