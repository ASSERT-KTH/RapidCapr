{
    "patch": "    ArrayList<Var> args = new ArrayList<>();\n    Iterator<Var> iterator = fnScope.getVars();\n    while (iterator.hasNext()) {\n      Var var = iterator.next();\n      args.add(var);\n    }\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      boolean removeArgs = false;\n      Node child = argList.getFirstChild();\n      while (child != null) {\n        Var var = fnScope.getVar(child.getString());\n\n        if (removeArgs) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n          child = child.getNext();\n          continue;\n        }\n\n        if (!referenced.contains(var)) {\n          removeArgs = true;\n          // If the first declared argument is unused, we can remove it immediately.\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n          child = child.getNext();\n          continue;\n        }\n        child = child.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3b670cb5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ArrayList<Var> args = new ArrayList<>();\n+    Iterator<Var> iterator = fnScope.getVars();\n+    while (iterator.hasNext()) {\n+      Var var = iterator.next();\n+      args.add(var);\n+    }\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      boolean removeArgs = false;\n+      Node child = argList.getFirstChild();\n+      while (child != null) {\n+        Var var = fnScope.getVar(child.getString());\n+\n+        if (removeArgs) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+          child = child.getNext();\n+          continue;\n+        }\n+\n+        if (!referenced.contains(var)) {\n+          removeArgs = true;\n+          // If the first declared argument is unused, we can remove it immediately.\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+          child = child.getNext();\n+          continue;\n+        }\n+        child = child.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}