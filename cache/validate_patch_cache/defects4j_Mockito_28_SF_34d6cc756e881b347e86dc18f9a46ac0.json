{
    "patch": "        List<Field> instanceFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n        for (Field field : instanceFields) {\n            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mockCandidate);\n                    return; // Exit loop after successful injection\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        if (instanceFields.isEmpty()) {\n            throw new IllegalArgumentException(\"No instance fields found for class \" + awaitingInjectionClazz.getName());\n        } else {\n            throw new IllegalArgumentException(\"No matching mock found for class \" + instanceFields.get(0).getType().getName());",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..aa2a1e30d 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,24 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+        List<Field> instanceFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+        for (Field field : instanceFields) {\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, mockCandidate);\n+                    return; // Exit loop after successful injection\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+        if (instanceFields.isEmpty()) {\n+            throw new IllegalArgumentException(\"No instance fields found for class \" + awaitingInjectionClazz.getName());\n+        } else {\n+            throw new IllegalArgumentException(\"No matching mock found for class \" + instanceFields.get(0).getType().getName());\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}