{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.CompilerInput;\nimport com.google.javascript.jscomp.ScopeCreator;\nimport com.google.javascript.jscomp.scope.Scope;\nimport com.google.javascript.jscomp.type.JSType;\nimport com.google.javascript.jscomp.type.TypeRegistry;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.JSTypeExpression;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.jstype.Property;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nvoid defineSlot(Node n, Node parent, JSTypeExpression type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  switch (n.getToken()) {\n    case NAME:\n      switch (parent.getToken()) {\n        case FUNCTION:\n        case VAR:\n        case LET:\n        case CONST:\n        case CATCH:\n          shouldDeclareOnGlobalThis = scope.isGlobal() && (\n              parent.getToken() == Token.VAR ||\n                  parent.getToken() == Token.LET ||\n                  parent.getToken() == Token.CONST ||\n                  parent.getToken() == Token.FUNCTION);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Unsupported parent node: \" + parent);\n      }\n      break;\n    case GETPROP:\n      if (!NodeUtil.isAssignmentOp(parent) && !NodeUtil.isExpressionResult(parent)) {\n        throw new IllegalArgumentException(\"Unsupported parent node: \" + parent);\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Unsupported node: \" + n);\n  }\n\n  String variableName = NodeUtil.getName(n);\n  Preconditions.checkArgument(NodeUtil.isValidSimpleName(variableName),\n      \"Invalid variable name: %s\", variableName);\n\n  // Evaluate the JSTypeExpression to a JSType object\n  JSTypeRegistry registry = compiler.getTypeRegistry();\n  JSType resolvedType = null;\n  if (type != null) {\n    resolvedType = type.evaluate(registry, scope);\n  }\n\n  // Declare the variable using the resolvedType and isTypeInferred flag\n  CompilerInput input = compiler.getInput(sourceName);\n  checkNotNull(input, \"Input for source not found: %s\", sourceName);\n  scope.declare(variableName, n, resolvedType, input, inferred);\n\n  // Define properties on the global object if necessary\n  if (shouldDeclareOnGlobalThis) {\n    ObjectType globalThis = registry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n    boolean isExtern = input.isExtern();\n    if (inferred) {\n      globalThis.defineInferredProperty(variableName, resolvedType == null ?\n          registry.getNativeType(JSTypeNative.NO_TYPE) : resolvedType, isExtern);\n    } else {\n      globalThis.defineDeclaredProperty(variableName, resolvedType, isExtern);\n    }\n  }\n\n  // Declare prototype property if necessary\n  if (scope.isGlobal() && resolvedType instanceof FunctionType) {\n    FunctionType fnType = (FunctionType) resolvedType;\n    if (fnType.isConstructor() || fnType.isInterface()) {\n      FunctionType superClassCtor = fnType.getSuperClassConstructor();\n      scope.declare(variableName + \".prototype\", n, fnType.getPrototype(), input,\n          superClassCtor == null || superClassCtor.getInstanceType()\n              .equals(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..dc69e0d0 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,94 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.CompilerInput;\n+import com.google.javascript.jscomp.ScopeCreator;\n+import com.google.javascript.jscomp.scope.Scope;\n+import com.google.javascript.jscomp.type.JSType;\n+import com.google.javascript.jscomp.type.TypeRegistry;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.JSTypeExpression;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.Property;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+void defineSlot(Node n, Node parent, JSTypeExpression type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+  switch (n.getToken()) {\n+    case NAME:\n+      switch (parent.getToken()) {\n+        case FUNCTION:\n+        case VAR:\n+        case LET:\n+        case CONST:\n+        case CATCH:\n+          shouldDeclareOnGlobalThis = scope.isGlobal() && (\n+              parent.getToken() == Token.VAR ||\n+                  parent.getToken() == Token.LET ||\n+                  parent.getToken() == Token.CONST ||\n+                  parent.getToken() == Token.FUNCTION);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unsupported parent node: \" + parent);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n-\n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+      break;\n+    case GETPROP:\n+      if (!NodeUtil.isAssignmentOp(parent) && !NodeUtil.isExpressionResult(parent)) {\n+        throw new IllegalArgumentException(\"Unsupported parent node: \" + parent);\n       }\n+      break;\n+    default:\n+      throw new IllegalArgumentException(\"Unsupported node: \" + n);\n+  }\n+\n+  String variableName = NodeUtil.getName(n);\n+  Preconditions.checkArgument(NodeUtil.isValidSimpleName(variableName),\n+      \"Invalid variable name: %s\", variableName);\n+\n+  // Evaluate the JSTypeExpression to a JSType object\n+  JSTypeRegistry registry = compiler.getTypeRegistry();\n+  JSType resolvedType = null;\n+  if (type != null) {\n+    resolvedType = type.evaluate(registry, scope);\n+  }\n+\n+  // Declare the variable using the resolvedType and isTypeInferred flag\n+  CompilerInput input = compiler.getInput(sourceName);\n+  checkNotNull(input, \"Input for source not found: %s\", sourceName);\n+  scope.declare(variableName, n, resolvedType, input, inferred);\n+\n+  // Define properties on the global object if necessary\n+  if (shouldDeclareOnGlobalThis) {\n+    ObjectType globalThis = registry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+    boolean isExtern = input.isExtern();\n+    if (inferred) {\n+      globalThis.defineInferredProperty(variableName, resolvedType == null ?\n+          registry.getNativeType(JSTypeNative.NO_TYPE) : resolvedType, isExtern);\n+    } else {\n+      globalThis.defineDeclaredProperty(variableName, resolvedType, isExtern);\n+    }\n+  }\n+\n+  // Declare prototype property if necessary\n+  if (scope.isGlobal() && resolvedType instanceof FunctionType) {\n+    FunctionType fnType = (FunctionType) resolvedType;\n+    if (fnType.isConstructor() || fnType.isInterface()) {\n+      FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+      scope.declare(variableName + \".prototype\", n, fnType.getPrototype(), input,\n+          superClassCtor == null || superClassCtor.getInstanceType()\n+              .equals(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}