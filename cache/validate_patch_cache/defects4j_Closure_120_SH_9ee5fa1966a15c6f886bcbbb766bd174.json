{
    "patch": "\tprivate boolean isInitializingAssignmentAt(int index) {\n\t\tif (index < references.size() && index > 0) {\n\t\t\tReference maybeDecl = references.get(index - 1);\n\t\t\tif (maybeDecl.isVarDeclaration()) {\n\t\t\t\tPreconditions.checkState(!maybeDecl.isInitializingDeclaration());\n\t\t\t\tReference maybeInit = references.get(index);\n\t\t\t\tif (maybeInit.isSimpleAssignmentToName()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return The reference that provides the value for the variable at the\n\t *         time of the first read, if known, otherwise null.\n\t * \n\t *         This is either the variable declaration (\"var a = ...\") or first\n\t *         reference following the declaration if it is an assignment.\n\t */\n\tReference getInitializingReference() {\n\t\tif (isInitializingDeclarationAt(0)) {\n\t\t\treturn references.get(0);\n\t\t} else if (isInitializingAssignmentAt(1)) {\n\t\t\treturn references.get(1);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Constants are allowed to be defined after their first use.\n\t */\n\tReference getInitializingReferenceForConstants() {\n\t\tint size = references.size();\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tif (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n\t\t\t\treturn references.get(i);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @return Whether the variable is only assigned a value once for its\n\t *         lifetime.\n\t */\n\tboolean isAssignedOnceInLifetime() {\n\t\tList<Reference> assignments = getAssignmentsInLifetime();\n\t\treturn assignments.size() == 1 && assignments.get(0).getNode() == references.get(0).getNode();\n\t}\n\n\tprivate List<Reference> getAssignmentsInLifetime() {\n\t\tList<Reference> assignments = new ArrayList<>();\n\t\tSet<Node> visited = new HashSet<>();\n\t\tfor (Reference ref : references) {\n\t\t\tif (!ref.isLvalue()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tNode node = ref.getNode();\n\t\t\tif (visited.contains(node)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvisited.add(node);\n\t\t\tif (ref.isDeclaration()) {\n\t\t\t\tif (ref.isInitializingDeclaration()) {\n\t\t\t\t\tassignments.add(ref);\n\t\t\t\t}\n\t\t\t} else if (ref.isAssignment()) {\n\t\t\t\tassignments.add(ref);\n\t\t\t}\n\t\t}\n\t\treturn assignments;\n\t}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..cf5595a4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,80 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+\tprivate boolean isInitializingAssignmentAt(int index) {\n+\t\tif (index < references.size() && index > 0) {\n+\t\t\tReference maybeDecl = references.get(index - 1);\n+\t\t\tif (maybeDecl.isVarDeclaration()) {\n+\t\t\t\tPreconditions.checkState(!maybeDecl.isInitializingDeclaration());\n+\t\t\t\tReference maybeInit = references.get(index);\n+\t\t\t\tif (maybeInit.isSimpleAssignmentToName()) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * @return The reference that provides the value for the variable at the\n+\t *         time of the first read, if known, otherwise null.\n+\t * \n+\t *         This is either the variable declaration (\"var a = ...\") or first\n+\t *         reference following the declaration if it is an assignment.\n+\t */\n+\tReference getInitializingReference() {\n+\t\tif (isInitializingDeclarationAt(0)) {\n+\t\t\treturn references.get(0);\n+\t\t} else if (isInitializingAssignmentAt(1)) {\n+\t\t\treturn references.get(1);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t/**\n+\t * Constants are allowed to be defined after their first use.\n+\t */\n+\tReference getInitializingReferenceForConstants() {\n+\t\tint size = references.size();\n+\t\tfor (int i = 0; i < size; i++) {\n+\t\t\tif (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+\t\t\t\treturn references.get(i);\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t/**\n+\t * @return Whether the variable is only assigned a value once for its\n+\t *         lifetime.\n+\t */\n+\tboolean isAssignedOnceInLifetime() {\n+\t\tList<Reference> assignments = getAssignmentsInLifetime();\n+\t\treturn assignments.size() == 1 && assignments.get(0).getNode() == references.get(0).getNode();\n+\t}\n+\n+\tprivate List<Reference> getAssignmentsInLifetime() {\n+\t\tList<Reference> assignments = new ArrayList<>();\n+\t\tSet<Node> visited = new HashSet<>();\n+\t\tfor (Reference ref : references) {\n+\t\t\tif (!ref.isLvalue()) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tNode node = ref.getNode();\n+\t\t\tif (visited.contains(node)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tvisited.add(node);\n+\t\t\tif (ref.isDeclaration()) {\n+\t\t\t\tif (ref.isInitializingDeclaration()) {\n+\t\t\t\t\tassignments.add(ref);\n+\t\t\t\t}\n+\t\t\t} else if (ref.isAssignment()) {\n+\t\t\t\tassignments.add(ref);\n+\t\t\t}\n+\t\t}\n+\t\treturn assignments;\n+\t}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}