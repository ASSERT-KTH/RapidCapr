{
    "patch": "import com.google.javascript.jscomp.Compiler;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.jscomp.NodeTraversal.Callback;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.jscomp.Var;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.ObjectType;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static com.google.javascript.rhino.Token.FUNCTION;\n\nprivate void removeUnreferencedFunctionArgs(Scope fnScope, Set<Var> referenced, Compiler compiler) {\n  Node fnNode = fnScope.getRootNode();\n\n  if (fnNode.getType() != FUNCTION) {\n    return;\n  }\n\n  Node function = fnScope.getRootNode();\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = FunctionArguments.of(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      // Ignore references to the formal param in jsdoc\n      if (!referenced.contains(var) &&\n          NodeUtil.getBestJSDocInfo(lastArg).getParameterCount() == 0) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d31745b9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,57 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.jscomp.NodeTraversal.Callback;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.jscomp.Var;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.google.javascript.rhino.Token.FUNCTION;\n+\n+private void removeUnreferencedFunctionArgs(Scope fnScope, Set<Var> referenced, Compiler compiler) {\n+  Node fnNode = fnScope.getRootNode();\n+\n+  if (fnNode.getType() != FUNCTION) {\n+    return;\n+  }\n+\n+  Node function = fnScope.getRootNode();\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = FunctionArguments.of(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      // Ignore references to the formal param in jsdoc\n+      if (!referenced.contains(var) &&\n+          NodeUtil.getBestJSDocInfo(lastArg).getParameterCount() == 0) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}