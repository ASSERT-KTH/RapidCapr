{
    "patch": "            final int numCols = m.getColumnDimension();\n            double[][] sqrtData = new double[numCols][numCols];\n            for (int i = 0; i < numCols; i++) {\n                for (int j = 0; j < numCols; j++) {\n                    if (i == j) {\n                        sqrtData[i][i] = FastMath.sqrt(dec.getRealEigenvalue(i));\n                    } else {\n                        sqrtData[i][j] = dec.getRealEigenvalue(i) > PRECISION ? dec.getV().getEntry(i, j) * FastMath.sqrt(dec.getRealEigenvalue(i)) : 0.0;\n                    }\n                }\n            }\n            return MatrixUtils.createRealMatrix(sqrtData);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9cbf5c8e6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+            final int numCols = m.getColumnDimension();\n+            double[][] sqrtData = new double[numCols][numCols];\n+            for (int i = 0; i < numCols; i++) {\n+                for (int j = 0; j < numCols; j++) {\n+                    if (i == j) {\n+                        sqrtData[i][i] = FastMath.sqrt(dec.getRealEigenvalue(i));\n+                    } else {\n+                        sqrtData[i][j] = dec.getRealEigenvalue(i) > PRECISION ? dec.getV().getEntry(i, j) * FastMath.sqrt(dec.getRealEigenvalue(i)) : 0.0;\n+                    }\n+                }\n+            }\n+            return MatrixUtils.createRealMatrix(sqrtData);\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}