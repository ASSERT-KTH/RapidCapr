{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n    final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n\n    for (int i = 0; i < n; i++) {\n        sqrt.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n    }\n\n    double norm = 0.0;\n    double oldNorm = Double.POSITIVE_INFINITY;\n\n    while (norm < oldNorm) {\n        oldNorm = norm;\n        RealMatrix invSqrt = new LUDecomposition(sqrt).getSolver().getInverse();\n        sqrt.add(\n                invSqrt\n                        .multiply(m)\n                        .multiply(invSqrt)\n                        .subtract(eye)\n                        .scalarMultiply(0.5));\n        norm = sqrt.subtract(\n                invSqrt\n                        .multiply(m)\n                        .multiply(invSqrt)\n        ).getNorm();\n    }\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f3bbed59d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,34 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+    final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n+\n+    for (int i = 0; i < n; i++) {\n+        sqrt.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n+    }\n+\n+    double norm = 0.0;\n+    double oldNorm = Double.POSITIVE_INFINITY;\n+\n+    while (norm < oldNorm) {\n+        oldNorm = norm;\n+        RealMatrix invSqrt = new LUDecomposition(sqrt).getSolver().getInverse();\n+        sqrt.add(\n+                invSqrt\n+                        .multiply(m)\n+                        .multiply(invSqrt)\n+                        .subtract(eye)\n+                        .scalarMultiply(0.5));\n+        norm = sqrt.subtract(\n+                invSqrt\n+                        .multiply(m)\n+                        .multiply(invSqrt)\n+        ).getNorm();\n     }\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}