{
    "patch": "public static String fixCode(String code) {\n    String fixedCode = code.replace(\"(0 in\", \"[0 in\");\n    fixedCode = fixedCode.replace(\"foo()\", \"foo();\");\n    int forIndex = fixedCode.indexOf(\"for\");\n    int semicolonIndex = fixedCode.indexOf(\";\", forIndex + 1);\n    // add parentheses around the condition of the for loop\n    fixedCode = fixedCode.substring(0, forIndex + 3) + \"(\" + fixedCode.substring(forIndex + 3, semicolonIndex + 1) + \")\" + fixedCode.substring(semicolonIndex + 1);\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..bcb6edf9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,15 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String fixedCode = code.replace(\"(0 in\", \"[0 in\");\n+    fixedCode = fixedCode.replace(\"foo()\", \"foo();\");\n+    int forIndex = fixedCode.indexOf(\"for\");\n+    int semicolonIndex = fixedCode.indexOf(\";\", forIndex + 1);\n+    // add parentheses around the condition of the for loop\n+    fixedCode = fixedCode.substring(0, forIndex + 3) + \"(\" + fixedCode.substring(forIndex + 3, semicolonIndex + 1) + \")\" + fixedCode.substring(semicolonIndex + 1);\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}