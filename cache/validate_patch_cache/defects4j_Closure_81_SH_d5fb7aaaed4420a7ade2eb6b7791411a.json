{
    "patch": "Name name = functionNode.getFunctionName();\nNode node;\nif (name == null) {\n    AstNode fnBody = functionNode.getBody();\n    int functionStartPos = functionNode.getPosition();\n\n    // Adjust line number and char number to point to the function keyword.\n    int functionLine = functionNode.getLineno();\n    int functionChar = position2charno(functionStartPos);\n    name = new Name(functionLine, functionChar, \"\");\n    node = newNode(Token.FUNCTION, transform(name));\n    name.setParent(node);\n\n    // Add empty parameter list as first child of CALL.\n    Node callNode = newNode(Token.CALL, newNode(Token.NAME, NEW_ARGUMENTS));\n    callNode.putProp(Node.FUNCTION_PROPERTY, node);\n    callNode.setLineno(functionLine);\n    callNode.setCharno(functionChar);\n    Node lp = newNode(Token.LP, callNode);\n    lp.setLineno(functionLine);\n    lp.setCharno(functionChar + 8);  // Position after \"function\"\n\n    node.putProp(Node.LP_PROPERTY, lp);\n    node.putProp(Node.END_LINENO_PROP, fnBody.getLineno());\n    node.addChildToBack(lp);\n    node.addChildToBack(fnBody);\n} else {\n    node = newNode(Token.FUNCTION, transform(name));\n    node.addChildToBack(transformParams(functionNode));\n    parseFunctionBody(node, functionNode);\n}\n\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..91a20f8c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,39 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+Node node;\n+if (name == null) {\n+    AstNode fnBody = functionNode.getBody();\n+    int functionStartPos = functionNode.getPosition();\n+\n+    // Adjust line number and char number to point to the function keyword.\n+    int functionLine = functionNode.getLineno();\n+    int functionChar = position2charno(functionStartPos);\n+    name = new Name(functionLine, functionChar, \"\");\n+    node = newNode(Token.FUNCTION, transform(name));\n+    name.setParent(node);\n+\n+    // Add empty parameter list as first child of CALL.\n+    Node callNode = newNode(Token.CALL, newNode(Token.NAME, NEW_ARGUMENTS));\n+    callNode.putProp(Node.FUNCTION_PROPERTY, node);\n+    callNode.setLineno(functionLine);\n+    callNode.setCharno(functionChar);\n+    Node lp = newNode(Token.LP, callNode);\n+    lp.setLineno(functionLine);\n+    lp.setCharno(functionChar + 8);  // Position after \"function\"\n+\n+    node.putProp(Node.LP_PROPERTY, lp);\n+    node.putProp(Node.END_LINENO_PROP, fnBody.getLineno());\n+    node.addChildToBack(lp);\n+    node.addChildToBack(fnBody);\n+} else {\n+    node = newNode(Token.FUNCTION, transform(name));\n+    node.addChildToBack(transformParams(functionNode));\n+    parseFunctionBody(node, functionNode);\n+}\n+\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}