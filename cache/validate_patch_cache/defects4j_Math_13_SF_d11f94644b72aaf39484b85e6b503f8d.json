{
    "patch": "private RealMatrix squareRoot(RealMatrix M) {\n    EigenDecomposition dec = new EigenDecomposition(M);\n    RealMatrix V = dec.getV();\n    RealMatrix D = dec.getD();\n\n    for (int i = 0; i < D.getColumnDimension(); i++) {\n        double eigenvalue = D.getEntry(i, i);\n        if (eigenvalue < 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n        } else if (eigenvalue > 0.0) {\n            D.setEntry(i, i, Math.sqrt(eigenvalue));\n        }\n    }\n    RealMatrix Dsqrt = V.multiply(D).multiply(V.transpose());\n\n    double epsilon = 1e-12;\n\n    for (int i = 0; i < D.getColumnDimension(); i++) {\n        for (int j = 0; j < D.getColumnDimension(); j++) {\n            if (Math.abs(Dsqrt.getEntry(i, j)) < epsilon) {\n                Dsqrt.setEntry(i, j, 0.0);\n            }\n        }\n    }\n\n    return Dsqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b7cbef3ee 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix M) {\n+    EigenDecomposition dec = new EigenDecomposition(M);\n+    RealMatrix V = dec.getV();\n+    RealMatrix D = dec.getD();\n+\n+    for (int i = 0; i < D.getColumnDimension(); i++) {\n+        double eigenvalue = D.getEntry(i, i);\n+        if (eigenvalue < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n+        } else if (eigenvalue > 0.0) {\n+            D.setEntry(i, i, Math.sqrt(eigenvalue));\n+        }\n+    }\n+    RealMatrix Dsqrt = V.multiply(D).multiply(V.transpose());\n+\n+    double epsilon = 1e-12;\n+\n+    for (int i = 0; i < D.getColumnDimension(); i++) {\n+        for (int j = 0; j < D.getColumnDimension(); j++) {\n+            if (Math.abs(Dsqrt.getEntry(i, j)) < epsilon) {\n+                Dsqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n     }\n+\n+    return Dsqrt;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}