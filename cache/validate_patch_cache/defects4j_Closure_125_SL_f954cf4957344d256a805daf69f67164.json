{
    "patch": "```\nif (fnType != null && (type.isConstructor() || type.isInterface() || type.isUnionType() || type.isEnumType() ||\n      type.isFunctionType() && type.toMaybeFunctionType().isConstructor() && !type.toMaybeFunctionType().isGeneric())) {\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..8c7a75c5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,10 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+```\n+if (fnType != null && (type.isConstructor() || type.isInterface() || type.isUnionType() || type.isEnumType() ||\n+      type.isFunctionType() && type.toMaybeFunctionType().isConstructor() && !type.toMaybeFunctionType().isGeneric())) {\n+```\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}