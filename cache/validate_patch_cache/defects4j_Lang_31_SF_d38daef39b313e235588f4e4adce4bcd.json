{
    "patch": "I apologize for the inconvenience. Please find below the corrected code implementation.\n\n```\npublic static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int strLast = strLen - 1;\n    final int searchLast = searchLen - 1;\n    outer:\n    for (int i = 0; i < strLen; i++) {\n        final char ch = sequence.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            final int codePoint;\n            if (i < strLast) {\n                codePoint = Character.toCodePoint(ch, sequence.charAt(i + 1));\n            } else {\n                // Retain unmatched high surrogate\n                return false;\n            }\n            if (contains(searchChars, Character.highSurrogate(codePoint))) {\n                return true;\n            }\n            continue;\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // Found character match, so return true\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(final char[] array, final char ch) {\n    for (final char element : array) {\n        if (element == ch) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\nThis implementation should work correctly, including handling supplementary characters.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..fcac8b66 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,54 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the inconvenience. Please find below the corrected code implementation.\n+\n+```\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int strLast = strLen - 1;\n+    final int searchLast = searchLen - 1;\n+    outer:\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            final int codePoint;\n+            if (i < strLast) {\n+                codePoint = Character.toCodePoint(ch, sequence.charAt(i + 1));\n+            } else {\n+                // Retain unmatched high surrogate\n+                return false;\n+            }\n+            if (contains(searchChars, Character.highSurrogate(codePoint))) {\n+                return true;\n+            }\n+            continue;\n+        }\n+        for (int j = 0; j < searchLen; j++) {\n+            if (searchChars[j] == ch) {\n+                // Found character match, so return true\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(final char[] array, final char ch) {\n+    for (final char element : array) {\n+        if (element == ch) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+```\n+\n+This implementation should work correctly, including handling supplementary characters.\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}