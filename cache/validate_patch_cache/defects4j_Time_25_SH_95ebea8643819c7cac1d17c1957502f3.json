{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        long diff = instantLocal - nextTransition(instantLocal - offsetLocal);\n        long newInstantLocal = nextTransition(instantLocal - offsetLocal + diff);\n        int newOffsetLocal = getOffset(newInstantLocal);\n        if (newOffsetLocal != offsetAdjusted) {\n            // calculate the new offset for the updated instantLocal\n            int newOffsetAdjusted = getOffset(newInstantLocal - offsetAdjusted);\n            if (newOffsetAdjusted == offsetAdjusted) {\n                return newOffsetLocal;\n            } else {\n                // we have another offset transition, so update the instant and offset accordingly\n                return getOffset(nextTransition(newInstantLocal - offsetAdjusted));\n            }\n        }\n    } else if (offsetLocal > offsetAdjusted) {\n        long prevTransitionLocal = previousTransition(instantLocal - offsetAdjusted);\n        int prevOffsetLocal = getOffset(prevTransitionLocal);\n        if (prevOffsetLocal == offsetAdjusted) {\n            return offsetLocal;\n        } else {\n            // calculate the new offset for the updated instantLocal\n            int prevOffsetAdjusted = getOffset(prevTransitionLocal);\n            if (prevOffsetAdjusted == offsetAdjusted) {\n                return offsetAdjusted;\n            } else {\n                // we have another offset transition, so update the instant and offset accordingly\n                return getOffset(previousTransition(instantAdjusted));\n            }\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..23e8c265 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        long diff = instantLocal - nextTransition(instantLocal - offsetLocal);\n+        long newInstantLocal = nextTransition(instantLocal - offsetLocal + diff);\n+        int newOffsetLocal = getOffset(newInstantLocal);\n+        if (newOffsetLocal != offsetAdjusted) {\n+            // calculate the new offset for the updated instantLocal\n+            int newOffsetAdjusted = getOffset(newInstantLocal - offsetAdjusted);\n+            if (newOffsetAdjusted == offsetAdjusted) {\n+                return newOffsetLocal;\n+            } else {\n+                // we have another offset transition, so update the instant and offset accordingly\n+                return getOffset(nextTransition(newInstantLocal - offsetAdjusted));\n+            }\n+        }\n+    } else if (offsetLocal > offsetAdjusted) {\n+        long prevTransitionLocal = previousTransition(instantLocal - offsetAdjusted);\n+        int prevOffsetLocal = getOffset(prevTransitionLocal);\n+        if (prevOffsetLocal == offsetAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            // calculate the new offset for the updated instantLocal\n+            int prevOffsetAdjusted = getOffset(prevTransitionLocal);\n+            if (prevOffsetAdjusted == offsetAdjusted) {\n+                return offsetAdjusted;\n+            } else {\n+                // we have another offset transition, so update the instant and offset accordingly\n+                return getOffset(previousTransition(instantAdjusted));\n+            }\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}