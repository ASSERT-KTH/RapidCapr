{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean wordBoundary = false;\n    boolean escaped = false;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                regex.append(\"\\\\s+\");\n                wasWhite = true;\n                wordBoundary = false;\n            }\n            continue;\n        }\n\n        wasWhite = false;\n\n        if (c == '\\'' && unquote) {\n            if (++i == value.length()) {\n                break;\n            }\n            c = value.charAt(i);\n        }\n\n        if (c == '-' && !escaped) {\n            if (!wordBoundary && i > 0 && i < value.length() - 1 && (\n                    Character.isLetterOrDigit(value.charAt(i - 1)) || Character.isLetterOrDigit(value.charAt(i + 1)))) {\n                regex.append(\"\\\\b\");\n                wordBoundary = true;\n            }\n            regex.append('-');\n            escaped = false;\n        } else {\n            switch (c) {\n                case '?':\n                case '[':\n                case ']':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '\\\\':\n                case '|':\n                case '*':\n                case '+':\n                case '^':\n                case '$':\n                case '.':\n                    if (!escaped) {\n                        regex.append(\"\\\\\");\n                        escaped = true;\n                        wordBoundary = false;\n                    }\n                    break;\n                default:\n                    escaped = false;\n                    wordBoundary = false;\n                    break;\n            }\n\n            regex.append(c);\n        }\n    }\n\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n\n    if (escaped || wordBoundary) {\n        regex.append(\"\\\\b\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..114ab89c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,83 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean wordBoundary = false;\n+    boolean escaped = false;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                regex.append(\"\\\\s+\");\n+                wasWhite = true;\n+                wordBoundary = false;\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n+            continue;\n+        }\n+\n+        wasWhite = false;\n+\n+        if (c == '\\'' && unquote) {\n+            if (++i == value.length()) {\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n             }\n+            c = value.charAt(i);\n+        }\n+\n+        if (c == '-' && !escaped) {\n+            if (!wordBoundary && i > 0 && i < value.length() - 1 && (\n+                    Character.isLetterOrDigit(value.charAt(i - 1)) || Character.isLetterOrDigit(value.charAt(i + 1)))) {\n+                regex.append(\"\\\\b\");\n+                wordBoundary = true;\n+            }\n+            regex.append('-');\n+            escaped = false;\n+        } else {\n+            switch (c) {\n+                case '?':\n+                case '[':\n+                case ']':\n+                case '(':\n+                case ')':\n+                case '{':\n+                case '}':\n+                case '\\\\':\n+                case '|':\n+                case '*':\n+                case '+':\n+                case '^':\n+                case '$':\n+                case '.':\n+                    if (!escaped) {\n+                        regex.append(\"\\\\\");\n+                        escaped = true;\n+                        wordBoundary = false;\n+                    }\n+                    break;\n+                default:\n+                    escaped = false;\n+                    wordBoundary = false;\n+                    break;\n+            }\n+\n             regex.append(c);\n         }\n-        return regex;\n     }\n \n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+\n+    if (escaped || wordBoundary) {\n+        regex.append(\"\\\\b\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "junit.framework.AssertionFailedError: Locale bg failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}