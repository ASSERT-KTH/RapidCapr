{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    boolean hasPrinter = !notPrinter;\n    boolean hasParser = !notParser;\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    for (int i = 0; i < size; i++) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof PeriodPrinter && hasPrinter) {\n            printer = compositePrinter(printer, (PeriodPrinter) obj);\n            hasParser = true;\n        } else if (obj instanceof PeriodParser && hasParser) {\n            parser = compositeParser(parser, (PeriodParser) obj);\n            hasPrinter = true;\n        } else if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            List<Object> leftList = elementPairs.subList(0, i);\n            List<Object> rightList = elementPairs.subList(i + 1, size);\n            PeriodFormatter left = toFormatter(leftList, hasPrinter, hasParser);\n            PeriodFormatter right = toFormatter(rightList, hasPrinter, hasParser);\n            return new PeriodFormatter(sep.finish(left.getPrinter(), right.getPrinter()),\n                    sep.finish(left.getParser(), right.getParser()));\n        }\n    }\n\n    if (hasPrinter || hasParser) {\n        return new PeriodFormatter(printer, parser);\n    } else {\n        return new PeriodFormatter(null, null);\n    }\n}\n\nprivate static PeriodPrinter compositePrinter(PeriodPrinter before, PeriodPrinter after) {\n    return before == null ? after : new CompositePrinter(before, after);\n}\n\nprivate static PeriodParser compositeParser(PeriodParser before, PeriodParser after) {\n    return before == null ? after : new CompositeParser(before, after);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..cce43d37 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,60 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    boolean hasPrinter = !notPrinter;\n+    boolean hasParser = !notParser;\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    for (int i = 0; i < size; i++) {\n+        Object obj = elementPairs.get(i);\n+        if (obj instanceof PeriodPrinter && hasPrinter) {\n+            printer = compositePrinter(printer, (PeriodPrinter) obj);\n+            hasParser = true;\n+        } else if (obj instanceof PeriodParser && hasParser) {\n+            parser = compositeParser(parser, (PeriodParser) obj);\n+            hasPrinter = true;\n+        } else if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            List<Object> leftList = elementPairs.subList(0, i);\n+            List<Object> rightList = elementPairs.subList(i + 1, size);\n+            PeriodFormatter left = toFormatter(leftList, hasPrinter, hasParser);\n+            PeriodFormatter right = toFormatter(rightList, hasPrinter, hasParser);\n+            return new PeriodFormatter(sep.finish(left.getPrinter(), right.getPrinter()),\n+                    sep.finish(left.getParser(), right.getParser()));\n         }\n     }\n \n+    if (hasPrinter || hasParser) {\n+        return new PeriodFormatter(printer, parser);\n+    } else {\n+        return new PeriodFormatter(null, null);\n+    }\n+}\n+\n+private static PeriodPrinter compositePrinter(PeriodPrinter before, PeriodPrinter after) {\n+    return before == null ? after : new CompositePrinter(before, after);\n+}\n+\n+private static PeriodParser compositeParser(PeriodParser before, PeriodParser after) {\n+    return before == null ? after : new CompositeParser(before, after);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}