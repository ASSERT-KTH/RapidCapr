{
    "patch": "public Fraction reduce() {\n    int sign = Integer.signum(numerator) * Integer.signum(denominator);\n    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n    if (gcd == 0) {\n        return Fraction.ZERO;\n    }\n    int newNumerator = Math.abs(numerator) / gcd;\n    int newDenominator = Math.abs(denominator) / gcd;\n    if ((newNumerator == 1 && newDenominator % 10 == 0) || (newNumerator == 2 && newDenominator % 5 == 0) || (newNumerator == 4 && newDenominator % 25 == 0)) {\n        return Fraction.getFraction(sign * newNumerator, newDenominator / 10);\n    } else if (newDenominator == 1) {\n        return Fraction.getFraction(sign * newNumerator);\n    } else {\n        return Fraction.getFraction(sign * newNumerator, newDenominator);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..be54d073 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,22 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int sign = Integer.signum(numerator) * Integer.signum(denominator);\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+    if (gcd == 0) {\n+        return Fraction.ZERO;\n+    }\n+    int newNumerator = Math.abs(numerator) / gcd;\n+    int newDenominator = Math.abs(denominator) / gcd;\n+    if ((newNumerator == 1 && newDenominator % 10 == 0) || (newNumerator == 2 && newDenominator % 5 == 0) || (newNumerator == 4 && newDenominator % 25 == 0)) {\n+        return Fraction.getFraction(sign * newNumerator, newDenominator / 10);\n+    } else if (newDenominator == 1) {\n+        return Fraction.getFraction(sign * newNumerator);\n+    } else {\n+        return Fraction.getFraction(sign * newNumerator, newDenominator);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}