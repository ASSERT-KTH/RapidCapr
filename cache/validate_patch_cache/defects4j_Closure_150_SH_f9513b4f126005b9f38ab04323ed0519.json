{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.NAME:\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP: {\n        if (parent == scope.getRootNode()) {\n          handleFunctionInputs(parent);\n          return;\n        } else {\n          Node grandparent = parent.getParent();\n          if (grandparent == null || grandparent.getType() != Token.CALL) {\n            TypedScope oldScope = scope;\n            handleFunctionInputs(n);\n            scope = oldScope;\n          }\n        }\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7d7cf278 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,41 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionExpression(n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP: {\n+        if (parent == scope.getRootNode()) {\n+          handleFunctionInputs(parent);\n+          return;\n+        } else {\n+          Node grandparent = parent.getParent();\n+          if (grandparent == null || grandparent.getType() != Token.CALL) {\n+            TypedScope oldScope = scope;\n+            handleFunctionInputs(n);\n+            scope = oldScope;\n+          }\n+        }\n+        break;\n       }\n     }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}