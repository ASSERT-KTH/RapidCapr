{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n    }\n\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            readTypeVariablesFor((TypeVariable<?>) type);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}\n        \nprivate void readTypeVariablesFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n    }\n\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            readTypeVariablesFor((TypeVariable<?>) type);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}\n        \nprivate void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        registerTypeVariables(parameterizedType.getActualTypeArguments());\n        registerTypeVariables(parameterizedType.getOwnerType());\n        registerTypeVariablesOn(parameterizedType.getRawType());\n    } else if (type instanceof TypeVariable) {\n        typeVariableBindings.put((TypeVariable<?>) type, typeVariable);\n        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n        for (Type bound : bounds) {\n            if (bound != type) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    } else if (type instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) type;\n        registerTypeVariables(wildcardType.getLowerBounds());\n        registerTypeVariables(wildcardType.getUpperBounds());\n    } else if (type instanceof Class) {\n        Class<?> clazz = (Class<?>) type;\n        if (clazz.isArray()) {\n            registerTypeVariablesOn(clazz.getComponentType());\n        } else {\n            TypeVariable<? extends Class<?>>[] typeParameters = clazz.getTypeParameters();\n            for (TypeVariable<? extends Class<?>> typeParameter : typeParameters) {\n                Type typeValue = getTypeVariableBinding(typeParameter);\n                registerTypeVariablesOn(typeValue);\n            }\n        }\n    } else {\n        throw new RuntimeException(\"Unsupported type variable: \" + type);\n    }\n}\n    \nprivate void registerTypeVariables(Type... types) {\n    for (Type type : types) {\n        registerTypeVariablesOn(type);\n    }\n}\n    \nprivate Type getTypeVariableBinding(TypeVariable<?> typeVariable) {\n    Type type = typeVariableBindings.get(typeVariable);\n    if (type == null) {\n        throw new RuntimeException(\"Unable to determine type variable binding for \" + typeVariable.getName());\n    } else {\n        return type;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..8e7b551b0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,85 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+    }\n+\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariablesFor((TypeVariable<?>) type);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n+        \n+private void readTypeVariablesFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+    }\n+\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariablesFor((TypeVariable<?>) type);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n+        \n+private void registerTypeVariablesOn(Type type) {\n+    if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        registerTypeVariables(parameterizedType.getActualTypeArguments());\n+        registerTypeVariables(parameterizedType.getOwnerType());\n+        registerTypeVariablesOn(parameterizedType.getRawType());\n+    } else if (type instanceof TypeVariable) {\n+        typeVariableBindings.put((TypeVariable<?>) type, typeVariable);\n+        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n+        for (Type bound : bounds) {\n+            if (bound != type) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    } else if (type instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) type;\n+        registerTypeVariables(wildcardType.getLowerBounds());\n+        registerTypeVariables(wildcardType.getUpperBounds());\n+    } else if (type instanceof Class) {\n+        Class<?> clazz = (Class<?>) type;\n+        if (clazz.isArray()) {\n+            registerTypeVariablesOn(clazz.getComponentType());\n+        } else {\n+            TypeVariable<? extends Class<?>>[] typeParameters = clazz.getTypeParameters();\n+            for (TypeVariable<? extends Class<?>> typeParameter : typeParameters) {\n+                Type typeValue = getTypeVariableBinding(typeParameter);\n+                registerTypeVariablesOn(typeValue);\n+            }\n+        }\n+    } else {\n+        throw new RuntimeException(\"Unsupported type variable: \" + type);\n+    }\n+}\n+    \n+private void registerTypeVariables(Type... types) {\n+    for (Type type : types) {\n+        registerTypeVariablesOn(type);\n+    }\n+}\n+    \n+private Type getTypeVariableBinding(TypeVariable<?> typeVariable) {\n+    Type type = typeVariableBindings.get(typeVariable);\n+    if (type == null) {\n+        throw new RuntimeException(\"Unable to determine type variable binding for \" + typeVariable.getName());\n+    } else {\n+        return type;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: registerTypeVariablesOn(Type) in TypeVariableReturnType cannot override registerTypeVariablesOn(Type) in GenericMetadataSupport",
    "test_result": "ERROR"
}