{
    "patch": "@Override\nNode processForInLoop(ForInLoop loopNode) {\n      // Return the bare minimum to put the AST in a valid state.\n      Node node = newNode(Token.FOR);\n\n      // Transform the loop variable, if it exists.\n      AstNode iterator = loopNode.getIterator();\n      if (iterator != null) {\n        node.addChildToBack(transform(iterator));\n      } else {\n        // For-in statement requires an iterator variable,\n        // but the parser may have failed to create one.\n        errorReporter.error(\n          \"Invalid for-in statement; missing loop variable\",\n          sourceName,\n          loopNode.getLineno(), \"\", 0);\n        // Synthesize a variable to use in the generated code.\n        node.addChildToBack(newStringNode(\"$SyntheticLoopVar\"));\n      }\n\n      // Transform the iterated object, if it exists.\n      AstNode object = loopNode.getIteratedObject();\n      if (object != null) {\n        node.addChildToBack(transform(object));\n      } else {\n        errorReporter.error(\n          \"Invalid for-in statement; missing iterated object\",\n          sourceName,\n          loopNode.getLineno(), \"\", 0);\n        // Synthesize an iterable to use in the generated code.\n        node.addChildToBack(newStringNode(\"[]\"));\n      }\n\n      node.addChildToBack(transformBlock(loopNode.getBody()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..24af6567 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,40 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n+@Override\n+Node processForInLoop(ForInLoop loopNode) {\n+      // Return the bare minimum to put the AST in a valid state.\n+      Node node = newNode(Token.FOR);\n+\n+      // Transform the loop variable, if it exists.\n+      AstNode iterator = loopNode.getIterator();\n+      if (iterator != null) {\n+        node.addChildToBack(transform(iterator));\n+      } else {\n+        // For-in statement requires an iterator variable,\n+        // but the parser may have failed to create one.\n         errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+          \"Invalid for-in statement; missing loop variable\",\n+          sourceName,\n+          loopNode.getLineno(), \"\", 0);\n+        // Synthesize a variable to use in the generated code.\n+        node.addChildToBack(newStringNode(\"$SyntheticLoopVar\"));\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      // Transform the iterated object, if it exists.\n+      AstNode object = loopNode.getIteratedObject();\n+      if (object != null) {\n+        node.addChildToBack(transform(object));\n+      } else {\n+        errorReporter.error(\n+          \"Invalid for-in statement; missing iterated object\",\n+          sourceName,\n+          loopNode.getLineno(), \"\", 0);\n+        // Synthesize an iterable to use in the generated code.\n+        node.addChildToBack(newStringNode(\"[]\"));\n       }\n-      return node;\n-    }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+      node.addChildToBack(transformBlock(loopNode.getBody()));\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}