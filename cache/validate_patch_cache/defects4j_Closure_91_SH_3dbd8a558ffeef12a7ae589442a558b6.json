{
    "patch": "      Node possibleLValue = null;\n      Node current = n.getParent();\n      Node prev = n;\n      while (current != null) {\n        int parentType = current.getType();\n        if (parentType == Token.ASSIGN) {\n          possibleLValue = prev;\n          prev = current;\n          current = current.getParent();\n          continue;\n        } else if (NodeUtil.isCall(current) && current.getFirstChild() == prev) {\n\n          // The function being called could be a constructor.\n          JSDocInfo docInfo = getBestJSDocInfo(n);\n\n          if (docInfo != null && docInfo.isConstructor()) {\n            return true;\n          }\n          if (possibleLValue != null && NodeUtil.isExprAssign(possibleLValue.getParent())) {\n            docInfo = getBestJSDocInfo(possibleLValue.getParent().getLastChild());\n            if (docInfo != null && docInfo.isConstructor()) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1dc746ac 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,34 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node possibleLValue = null;\n+      Node current = n.getParent();\n+      Node prev = n;\n+      while (current != null) {\n+        int parentType = current.getType();\n+        if (parentType == Token.ASSIGN) {\n+          possibleLValue = prev;\n+          prev = current;\n+          current = current.getParent();\n+          continue;\n+        } else if (NodeUtil.isCall(current) && current.getFirstChild() == prev) {\n+\n+          // The function being called could be a constructor.\n+          JSDocInfo docInfo = getBestJSDocInfo(n);\n+\n+          if (docInfo != null && docInfo.isConstructor()) {\n+            return true;\n+          }\n+          if (possibleLValue != null && NodeUtil.isExprAssign(possibleLValue.getParent())) {\n+            docInfo = getBestJSDocInfo(possibleLValue.getParent().getLastChild());\n+            if (docInfo != null && docInfo.isConstructor()) {\n+              return true;\n+            }\n+          }\n+        }\n+        return false;\n+      }\n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}