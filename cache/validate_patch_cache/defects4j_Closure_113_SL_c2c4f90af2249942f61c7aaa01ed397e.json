{
    "patch": "    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n        new UnrecognizedRequire(n, ns, t.getSourceName()));\n      Node next = NodeUtil.getSuccessor(parent);\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n      t.reportCodeChange();\n      process(next, t.getScope(), parent.getParent());\n    } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..586840e7 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,15 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    if (provided == null || !provided.isExplicitlyProvided()) {\n+      unrecognizedRequires.add(\n+        new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      Node next = NodeUtil.getSuccessor(parent);\n+      parent.detachFromParent();\n+      compiler.reportCodeChange();\n+      t.reportCodeChange();\n+      process(next, t.getScope(), parent.getParent());\n+    } else {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}