{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nMockito.mockingDetails(mock).getMockCreationSettings().getInvocationListeners().iterator().forEachRemaining(listener -> {\n    if(listener instanceof MockingProgress) {\n        ((MockingProgress) listener).reset();\n    }\n});\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nCallback[] callbacks = ((Factory) mock).getCallbacks();\nfor (int i = 0; i < callbacks.length; i++) {\n    if (callbacks[i] instanceof MethodInterceptorFilter) {\n         callbacks[i] = newFilter;\n    }\n}   \n((Factory) mock).setCallbacks(callbacks);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..bbacbcdfc 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+Mockito.mockingDetails(mock).getMockCreationSettings().getInvocationListeners().iterator().forEachRemaining(listener -> {\n+    if(listener instanceof MockingProgress) {\n+        ((MockingProgress) listener).reset();\n+    }\n+});\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Callback[] callbacks = ((Factory) mock).getCallbacks();\n+for (int i = 0; i < callbacks.length; i++) {\n+    if (callbacks[i] instanceof MethodInterceptorFilter) {\n+         callbacks[i] = newFilter;\n+    }\n+}   \n+((Factory) mock).setCallbacks(callbacks);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}