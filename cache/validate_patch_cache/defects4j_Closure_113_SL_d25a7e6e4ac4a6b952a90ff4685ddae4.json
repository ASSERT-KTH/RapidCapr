{
    "patch": "      if (provided == null) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));   \n      } else {\n        JSModule providedModule = provided.explicitModule;\n        \n        if (providedModule == null) {\n          // providedModule might be null if the namespace is provided\n          // implicitly in the global scope.\n          return;\n        }\n        \n        JSModule module = t.getModule();\n        \n        if (moduleGraph != null && module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..39ac27a7 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,28 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided == null) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));   \n+      } else {\n+        JSModule providedModule = provided.explicitModule;\n+        \n+        if (providedModule == null) {\n+          // providedModule might be null if the namespace is provided\n+          // implicitly in the global scope.\n+          return;\n+        }\n+        \n+        JSModule module = t.getModule();\n+        \n+        if (moduleGraph != null && module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+        }\n+      }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}