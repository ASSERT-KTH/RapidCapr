{
    "patch": "if (getPopulationSize() > 0 && getSampleSize() >= 0 && getNumberOfSuccesses() >= 0\n        && getSampleSize() <= getPopulationSize()) {\n    return ((double) getSampleSize() * (double) getNumberOfSuccesses()) / (double) getPopulationSize();\n} else {\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..c93f635ab 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,12 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+if (getPopulationSize() > 0 && getSampleSize() >= 0 && getNumberOfSuccesses() >= 0\n+        && getSampleSize() <= getPopulationSize()) {\n+    return ((double) getSampleSize() * (double) getNumberOfSuccesses()) / (double) getPopulationSize();\n+} else {\n+    return Double.NaN;\n+}\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}