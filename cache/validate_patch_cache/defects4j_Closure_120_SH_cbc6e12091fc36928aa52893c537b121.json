{
    "patch": "          // Find the next assignment to this variable...\n          if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n            Reference nextRef = references.get(i);\n            if (!nextRef.isSimpleAssignmentToName()) {\n              // ...it wasn't a straight assignment; bail out\n              return false;\n            }\n            // ...else recursively check the block containing the assignment(s)\n            for (BasicBlock nextBlock = nextRef.getBasicBlock();\n                nextBlock != null; nextBlock = nextBlock.getParent()) {\n              if (block.isFunction) {\n                // Don't allow assignments within functions\n                if (nextRef != ref) {\n                  return false;\n                }\n                break;\n              } else if (nextBlock.isLoop) {\n                // Remember that this variable has changed in the loop\n                changedInLoop = true;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..81f5f613 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Find the next assignment to this variable...\n+          if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+            Reference nextRef = references.get(i);\n+            if (!nextRef.isSimpleAssignmentToName()) {\n+              // ...it wasn't a straight assignment; bail out\n+              return false;\n+            }\n+            // ...else recursively check the block containing the assignment(s)\n+            for (BasicBlock nextBlock = nextRef.getBasicBlock();\n+                nextBlock != null; nextBlock = nextBlock.getParent()) {\n+              if (block.isFunction) {\n+                // Don't allow assignments within functions\n+                if (nextRef != ref) {\n+                  return false;\n+                }\n+                break;\n+              } else if (nextBlock.isLoop) {\n+                // Remember that this variable has changed in the loop\n+                changedInLoop = true;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}