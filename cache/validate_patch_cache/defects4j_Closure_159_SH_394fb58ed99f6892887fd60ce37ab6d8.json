{
    "patch": "if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child != null && child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (functionName != null \n                && !functionName.startsWith(\"$\") \n                && !functionName.startsWith(\"goog.\") \n                && !functionName.contains(\".\")\n                && !functionName.isEmpty()) {\n            changed.add(functionName);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..9e33d890 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if (node.getType() == Token.CALL) {\n+    Node child = node.getFirstChild();\n+    if (child != null && child.getType() == Token.NAME) {\n+        String functionName = child.getString();\n+        if (functionName != null \n+                && !functionName.startsWith(\"$\") \n+                && !functionName.startsWith(\"goog.\") \n+                && !functionName.contains(\".\")\n+                && !functionName.isEmpty()) {\n+            changed.add(functionName);\n+        }\n+    }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}