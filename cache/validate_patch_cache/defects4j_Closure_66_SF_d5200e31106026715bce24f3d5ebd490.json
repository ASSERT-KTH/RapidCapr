{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    ObjectMapper mapper = new ObjectMapper();\n    double totalCount = 0.0;\n    double typedCount = 0.0;\n    try {\n        JsonNode rootNode = mapper.readTree(jsonStr);\n        Iterator<JsonNode> iterator = rootNode.iterator();\n        while (iterator.hasNext()) {\n            JsonNode node = iterator.next();\n            totalCount++;\n            if (node.has(\"type\")) {\n                typedCount++;\n            }\n        }\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return (typedCount / totalCount) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5ee1a970 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    double totalCount = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JsonNode rootNode = mapper.readTree(jsonStr);\n+        Iterator<JsonNode> iterator = rootNode.iterator();\n+        while (iterator.hasNext()) {\n+            JsonNode node = iterator.next();\n+            totalCount++;\n+            if (node.has(\"type\")) {\n+                typedCount++;\n+            }\n+        }\n+    } catch (JsonProcessingException e) {\n+        e.printStackTrace();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return (typedCount / totalCount) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}