{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] re = dec.getRealEigenvalues();\n    final double[] im = dec.getImagEigenvalues();\n    final RealMatrix v = dec.getV();\n    final int n = re.length;\n    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        if (im[i] == 0.0) {\n            sqrt.setEntry(i, i, Math.sqrt(Math.max(0.0, re[i])));\n        } else {\n            double absRe = Math.sqrt(Math.max(0.0, re[i]));\n            double absIm = Math.sqrt(Math.max(0.0, im[i]));\n            if (re[i] < 0.0) {\n                sqrt.setEntry(i, i+1, absIm);\n            } else {\n                sqrt.setEntry(i, i+1, absRe);\n            }\n            sqrt.setEntry(i+1, i, absIm);\n            i++;\n        }\n    }\n\n    final RealMatrix sqrtM = v.multiply(sqrt).multiply(v.inverse());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b0b231625 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] re = dec.getRealEigenvalues();\n+    final double[] im = dec.getImagEigenvalues();\n+    final RealMatrix v = dec.getV();\n+    final int n = re.length;\n+    final RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        if (im[i] == 0.0) {\n+            sqrt.setEntry(i, i, Math.sqrt(Math.max(0.0, re[i])));\n+        } else {\n+            double absRe = Math.sqrt(Math.max(0.0, re[i]));\n+            double absIm = Math.sqrt(Math.max(0.0, im[i]));\n+            if (re[i] < 0.0) {\n+                sqrt.setEntry(i, i+1, absIm);\n+            } else {\n+                sqrt.setEntry(i, i+1, absRe);\n+            }\n+            sqrt.setEntry(i+1, i, absIm);\n+            i++;\n+        }\n     }\n+\n+    final RealMatrix sqrtM = v.multiply(sqrt).multiply(v.inverse());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}