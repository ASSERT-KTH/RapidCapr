{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // The simple case, not an array, just test the element\n        isEquals = lhs.equals(rhs);\n    } else {\n        // First we compare type of array\n        if (lhs.getClass() != rhs.getClass()) {\n            this.setEquals(false);\n            return this;\n        }\n        // Check if the array's are different lengths.\n        // If so, they can't be equal\n        int lhsLength = Array.getLength(lhs);\n        if (lhsLength != Array.getLength(rhs)) {\n            this.setEquals(false);\n            return this;\n        }\n        // If it's an array of primitives\n        if (lhsClass.getComponentType().isPrimitive()) {\n            for (int i = 0; i < lhsLength && isEquals; i++) {\n                // Call the appropriate object overloading method\n                // for each primitive type\n                Object lhsValue = Array.get(lhs, i);\n                Object rhsValue = Array.get(rhs, i);\n                if (lhsValue instanceof Boolean) {\n                    isEquals = new EqualsBuilder().append((boolean) lhsValue, (boolean) rhsValue).isEquals();\n                } else if (lhsValue instanceof Byte) {\n                    isEquals = new EqualsBuilder().append((byte) lhsValue, (byte) rhsValue).isEquals();\n                } else if (lhsValue instanceof Character) {\n                    isEquals = new EqualsBuilder().append((char) lhsValue, (char) rhsValue).isEquals();\n                } else if (lhsValue instanceof Double) {\n                    isEquals = new EqualsBuilder().append((double) lhsValue, (double) rhsValue).isEquals();\n                } else if (lhsValue instanceof Float) {\n                    isEquals = new EqualsBuilder().append((float) lhsValue, (float) rhsValue).isEquals();\n                } else if (lhsValue instanceof Integer) {\n                    isEquals = new EqualsBuilder().append((int) lhsValue, (int) rhsValue).isEquals();\n                } else if (lhsValue instanceof Long) {\n                    isEquals = new EqualsBuilder().append((long) lhsValue, (long) rhsValue).isEquals();\n                } else if (lhsValue instanceof Short) {\n                    isEquals = new EqualsBuilder().append((short) lhsValue, (short) rhsValue).isEquals();\n                } else {\n                    // If any other type, treat it as null\n                    isEquals = new EqualsBuilder().append((Object) lhsValue, (Object) rhsValue).isEquals();\n                }\n            }\n        } else { // If it's not an array of primitives\n            Object[] lhsArray = (Object[]) lhs;\n            Object[] rhsArray = (Object[]) rhs;\n            for (int i = 0; i < lhsLength && isEquals; i++) {\n                Object lhsItem = lhsArray[i];\n                Object rhsItem = rhsArray[i];\n                isEquals = new EqualsBuilder().append(lhsItem, rhsItem).isEquals();\n            }\n        }\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..a7f9ca8a 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,74 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        // The simple case, not an array, just test the element\n+        isEquals = lhs.equals(rhs);\n+    } else {\n+        // First we compare type of array\n+        if (lhs.getClass() != rhs.getClass()) {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+        // Check if the array's are different lengths.\n+        // If so, they can't be equal\n+        int lhsLength = Array.getLength(lhs);\n+        if (lhsLength != Array.getLength(rhs)) {\n             this.setEquals(false);\n+            return this;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        // If it's an array of primitives\n+        if (lhsClass.getComponentType().isPrimitive()) {\n+            for (int i = 0; i < lhsLength && isEquals; i++) {\n+                // Call the appropriate object overloading method\n+                // for each primitive type\n+                Object lhsValue = Array.get(lhs, i);\n+                Object rhsValue = Array.get(rhs, i);\n+                if (lhsValue instanceof Boolean) {\n+                    isEquals = new EqualsBuilder().append((boolean) lhsValue, (boolean) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Byte) {\n+                    isEquals = new EqualsBuilder().append((byte) lhsValue, (byte) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Character) {\n+                    isEquals = new EqualsBuilder().append((char) lhsValue, (char) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Double) {\n+                    isEquals = new EqualsBuilder().append((double) lhsValue, (double) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Float) {\n+                    isEquals = new EqualsBuilder().append((float) lhsValue, (float) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Integer) {\n+                    isEquals = new EqualsBuilder().append((int) lhsValue, (int) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Long) {\n+                    isEquals = new EqualsBuilder().append((long) lhsValue, (long) rhsValue).isEquals();\n+                } else if (lhsValue instanceof Short) {\n+                    isEquals = new EqualsBuilder().append((short) lhsValue, (short) rhsValue).isEquals();\n+                } else {\n+                    // If any other type, treat it as null\n+                    isEquals = new EqualsBuilder().append((Object) lhsValue, (Object) rhsValue).isEquals();\n+                }\n+            }\n+        } else { // If it's not an array of primitives\n+            Object[] lhsArray = (Object[]) lhs;\n+            Object[] rhsArray = (Object[]) rhs;\n+            for (int i = 0; i < lhsLength && isEquals; i++) {\n+                Object lhsItem = lhsArray[i];\n+                Object rhsItem = rhsArray[i];\n+                isEquals = new EqualsBuilder().append(lhsItem, rhsItem).isEquals();\n+            }\n         }\n-        return this;\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}