{
    "patch": "            if (m instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n                Object varargs = invocation.getRawArguments()[indexOfVararg];\n                if (varargs != null && varargs.getClass().isArray()) {\n                    for (int i = 0; i < Array.getLength(varargs); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargs, i));\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(varargs);\n                }\n            } else {\n                throw new UnsupportedOperationException();\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c86b2390f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,18 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n+                Object varargs = invocation.getRawArguments()[indexOfVararg];\n+                if (varargs != null && varargs.getClass().isArray()) {\n+                    for (int i = 0; i < Array.getLength(varargs); i++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(varargs, i));\n+                    }\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(varargs);\n+                }\n+            } else {\n+                throw new UnsupportedOperationException();\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}