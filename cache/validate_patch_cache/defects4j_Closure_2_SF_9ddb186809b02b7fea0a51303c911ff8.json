{
    "patch": "  private void checkInterfaceConflictProperties(NodeTraversal t, Node n, String functionName,\n      HashMap<String, ObjectType> properties, HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    if (interfaceType == null || interfaceType.getImplicitPrototype() == null) {\n      // This can be the case if interfaceType is proxy to a non-existent\n      // object (which is a bad type annotation, but shouldn't crash).\n      return;\n    }\n    Set<String> currentPropertyNames = interfaceType.getImplicitPrototype().getPropertyNames();\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n        if (interfaceTypePropertyType != null &&\n            !interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {\n          compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name,\n              oType.toString(), interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..28d67b35 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,33 +1563,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n-      String functionName, HashMap<String, ObjectType> properties,\n-      HashMap<String, ObjectType> currentProperties,\n+  private void checkInterfaceConflictProperties(NodeTraversal t, Node n, String functionName,\n+      HashMap<String, ObjectType> properties, HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n-    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n+    if (interfaceType == null || interfaceType.getImplicitPrototype() == null) {\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+      return;\n+    }\n+    Set<String> currentPropertyNames = interfaceType.getImplicitPrototype().getPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n-          compiler.report(\n-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+        if (interfaceTypePropertyType != null &&\n+            !interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {\n+          compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name,\n+              oType.toString(), interfaceType.toString()));\n         }\n       }\n       currentProperties.put(name, interfaceType);\n     }\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n-    }\n-  }\n+      checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);\n \n   /**\n    * Visits a {@link Token#FUNCTION} node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}