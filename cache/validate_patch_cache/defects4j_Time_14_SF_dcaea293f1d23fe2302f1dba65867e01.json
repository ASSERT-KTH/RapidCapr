{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        Chronology chrono = partial.getChronology();\n        DateTimeFieldType type = partial.getFieldType(fieldIndex);\n        int year = 0;\n        int month = 0;\n        int day = 0;\n        long millis = 0L;\n        for (int i = 0; i < partial.size(); i++) {\n            int value = values[i];\n            if (i == fieldIndex) {\n                value = type.getField(chrono).add(value, valueToAdd);\n            }\n            millis = partial.getFieldType(i).getField(chrono).set(millis, value);\n            if (i == 0) {\n                year = value;\n            } else if (i == 1) {\n                month = value;\n                if (day > 28) {\n                    int dayOfYear = chrono.dayOfYear().get(millis, year);\n                    if (dayOfYear > 59 && (isLeapYear(year) == false || dayOfYear > 60)) {\n                        day = chrono.getDaysInYearMonth(year, month);\n                    }\n                }\n            } else {\n                day = value;\n            }\n        }\n        if (day > 28) {\n            int lastDay = getDaysInMonthMax(year, month);\n            day = (day > lastDay) ? lastDay : day;\n        }\n        int[] result = { year, month, day };\n        return chrono.get(partial, millis, result);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate boolean isLeapYear(int year) {\n    return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}\n\nprivate int getDaysInMonthMax(int year, int month) {\n    switch (month) {\n    case 2:\n        return isLeapYear(year) ? 29 : 28;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n        return 30;\n    default:\n        return 31;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8c303e3d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,68 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        Chronology chrono = partial.getChronology();\n+        DateTimeFieldType type = partial.getFieldType(fieldIndex);\n+        int year = 0;\n+        int month = 0;\n+        int day = 0;\n+        long millis = 0L;\n+        for (int i = 0; i < partial.size(); i++) {\n+            int value = values[i];\n+            if (i == fieldIndex) {\n+                value = type.getField(chrono).add(value, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            millis = partial.getFieldType(i).getField(chrono).set(millis, value);\n+            if (i == 0) {\n+                year = value;\n+            } else if (i == 1) {\n+                month = value;\n+                if (day > 28) {\n+                    int dayOfYear = chrono.dayOfYear().get(millis, year);\n+                    if (dayOfYear > 59 && (isLeapYear(year) == false || dayOfYear > 60)) {\n+                        day = chrono.getDaysInYearMonth(year, month);\n+                    }\n+                }\n+            } else {\n+                day = value;\n+            }\n+        }\n+        if (day > 28) {\n+            int lastDay = getDaysInMonthMax(year, month);\n+            day = (day > lastDay) ? lastDay : day;\n         }\n+        int[] result = { year, month, day };\n+        return chrono.get(partial, millis, result);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n+\n+private boolean isLeapYear(int year) {\n+    return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n+}\n+\n+private int getDaysInMonthMax(int year, int month) {\n+    switch (month) {\n+    case 2:\n+        return isLeapYear(year) ? 29 : 28;\n+    case 4:\n+    case 6:\n+    case 9:\n+    case 11:\n+        return 30;\n+    default:\n+        return 31;\n+    }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}