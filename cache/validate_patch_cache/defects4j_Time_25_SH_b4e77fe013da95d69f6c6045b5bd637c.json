{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long prev = previousTransition(instantAdjusted);\n                if (prev == instantAdjusted) {  // handle zero dst case\n                    return offsetLocal;\n                }\n                int offsetPrev = getOffset(prev);\n                if (offsetPrev != offsetAdjusted) {\n                    return offsetLocal;\n                }\n            } else if ((offsetLocal - offsetAdjusted) > 0) {\n                long next = nextTransition(instantAdjusted);\n                if (next == instantAdjusted) {  // handle zero dst case\n                    return offsetLocal;\n                }\n                int offsetNext = getOffset(next);\n                if (offsetNext == offsetLocal) {\n                    return offsetNext;\n                }\n                if (offsetNext < offsetLocal) {\n                    return offsetLocal;\n                }\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextAdjusted == instantLocal - offsetAdjusted) {\n                    // we want the instant *after* the next transition\n                    nextAdjusted = nextTransition(nextAdjusted + 1);\n                }\n                if (nextAdjusted > next) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9eae7c65 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,38 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long prev = previousTransition(instantAdjusted);\n+                if (prev == instantAdjusted) {  // handle zero dst case\n+                    return offsetLocal;\n+                }\n+                int offsetPrev = getOffset(prev);\n+                if (offsetPrev != offsetAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) > 0) {\n+                long next = nextTransition(instantAdjusted);\n+                if (next == instantAdjusted) {  // handle zero dst case\n+                    return offsetLocal;\n+                }\n+                int offsetNext = getOffset(next);\n+                if (offsetNext == offsetLocal) {\n+                    return offsetNext;\n+                }\n+                if (offsetNext < offsetLocal) {\n+                    return offsetLocal;\n+                }\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextAdjusted == instantLocal - offsetAdjusted) {\n+                    // we want the instant *after* the next transition\n+                    nextAdjusted = nextTransition(nextAdjusted + 1);\n+                }\n+                if (nextAdjusted > next) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}