{
    "patch": "      ObjectType thisType =\n          ObjectType.cast(\n              functionType.getTypeOfThis().restrictByNotNullOrUndefined());\n      if (thisType != null\n          && !(n.getParent().isGetElem() || n.getParent().isGetProp())) {\n        report(t, n, THIS_BEFORE_SUPER, \"\");\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a906e026 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType =\n+          ObjectType.cast(\n+              functionType.getTypeOfThis().restrictByNotNullOrUndefined());\n+      if (thisType != null\n+          && !(n.getParent().isGetElem() || n.getParent().isGetProp())) {\n+        report(t, n, THIS_BEFORE_SUPER, \"\");\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}