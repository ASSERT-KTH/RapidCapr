{
    "patch": "import java.math.BigDecimal;\n\npublic Line revert() {\n    final Vector3D zero = Vector3D.ZERO;\n    final Vector3D revertedDirection = direction.negate();\n    BigDecimal[] bdReverted = new BigDecimal[3];\n    for (int i = 0; i < 3; i++) {\n        bdReverted[i] = new BigDecimal(revertedDirection.toArray()[i]).setScale(10, BigDecimal.ROUND_HALF_UP);\n    }\n    return new Line(zero, new Vector3D(bdReverted[0].doubleValue(), bdReverted[1].doubleValue(), bdReverted[2].doubleValue()));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..1dd86f91c 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,17 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+import java.math.BigDecimal;\n+\n+public Line revert() {\n+    final Vector3D zero = Vector3D.ZERO;\n+    final Vector3D revertedDirection = direction.negate();\n+    BigDecimal[] bdReverted = new BigDecimal[3];\n+    for (int i = 0; i < 3; i++) {\n+        bdReverted[i] = new BigDecimal(revertedDirection.toArray()[i]).setScale(10, BigDecimal.ROUND_HALF_UP);\n     }\n+    return new Line(zero, new Vector3D(bdReverted[0].doubleValue(), bdReverted[1].doubleValue(), bdReverted[2].doubleValue()));\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}