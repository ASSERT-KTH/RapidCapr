{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (!NodeUtil.isStatementBlock(n)\n        && NodeUtil.isExpressionNode(maybeExpr)\n        && !NodeUtil.isFunctionExpression(maybeExpr)\n        && maybeExpr.getType() != Token.OBJECTLIT\n        && maybeExpr.getType() != Token.FUNCTION\n        && maybeExpr.getType() != Token.REGEXP) {\n      Node maybeParent = n.getParent();\n      // Check if the block is a child of an EXPR_RESULT or either a\n      // FOR, WHILE or DO loop. If it is, then we cannot fold it.\n      while (maybeParent != null\n          && maybeParent.getType() == Token.BLOCK\n          && maybeParent.hasOneChild()) {\n        Node m = maybeParent.getParent();\n        if (m.getType() == Token.EXPR_RESULT) {\n          return false;\n        } else if (m.getType() == Token.FOR\n            || m.getType() == Token.FOR_IN\n            || m.getType() == Token.WHILE\n            || m.getType() == Token.DO) {\n          return false;\n        }\n        maybeParent = m;\n      }\n      if (maybeParent != null\n          && maybeParent.getType() == Token.EXPR_RESULT\n          && maybeParent.getFirstChild() == n) {\n        Node exprNode = maybeParent.getFirstChild();\n        boolean isEventClass = false;\n        // Traverse the possible call to identify if it's maybe using 'apply'\n        if (exprNode.getFirstChild().getType() == Token.CALL) {\n          Node child = exprNode.getFirstChild();\n          if (child.getFirstChild().getType() == Token.GETPROP) {\n            Node targetFunction = child.getFirstChild().getLastChild();\n            String fname = targetFunction.getString();\n            if (fname.equals(\"call\") || fname.equals(\"apply\")) {\n              return false;\n            }\n            Node target = child.getFirstChild().getFirstChild();\n            if (target.getType() == Token.THIS) {\n              return false;\n            } else if (target.isQualifiedName() && target.getQualifiedName().startsWith(\"Event.\")) {\n              isEventClass = true;\n            }\n          }\n        }\n        return !isEventClass;\n      }\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b3518b5d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,61 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (!NodeUtil.isStatementBlock(n)\n+        && NodeUtil.isExpressionNode(maybeExpr)\n+        && !NodeUtil.isFunctionExpression(maybeExpr)\n+        && maybeExpr.getType() != Token.OBJECTLIT\n+        && maybeExpr.getType() != Token.FUNCTION\n+        && maybeExpr.getType() != Token.REGEXP) {\n+      Node maybeParent = n.getParent();\n+      // Check if the block is a child of an EXPR_RESULT or either a\n+      // FOR, WHILE or DO loop. If it is, then we cannot fold it.\n+      while (maybeParent != null\n+          && maybeParent.getType() == Token.BLOCK\n+          && maybeParent.hasOneChild()) {\n+        Node m = maybeParent.getParent();\n+        if (m.getType() == Token.EXPR_RESULT) {\n+          return false;\n+        } else if (m.getType() == Token.FOR\n+            || m.getType() == Token.FOR_IN\n+            || m.getType() == Token.WHILE\n+            || m.getType() == Token.DO) {\n+          return false;\n+        }\n+        maybeParent = m;\n       }\n+      if (maybeParent != null\n+          && maybeParent.getType() == Token.EXPR_RESULT\n+          && maybeParent.getFirstChild() == n) {\n+        Node exprNode = maybeParent.getFirstChild();\n+        boolean isEventClass = false;\n+        // Traverse the possible call to identify if it's maybe using 'apply'\n+        if (exprNode.getFirstChild().getType() == Token.CALL) {\n+          Node child = exprNode.getFirstChild();\n+          if (child.getFirstChild().getType() == Token.GETPROP) {\n+            Node targetFunction = child.getFirstChild().getLastChild();\n+            String fname = targetFunction.getString();\n+            if (fname.equals(\"call\") || fname.equals(\"apply\")) {\n+              return false;\n+            }\n+            Node target = child.getFirstChild().getFirstChild();\n+            if (target.getType() == Token.THIS) {\n+              return false;\n+            } else if (target.isQualifiedName() && target.getQualifiedName().startsWith(\"Event.\")) {\n+              isEventClass = true;\n+            }\n+          }\n+        }\n+        return !isEventClass;\n+      }\n+      return true;\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}