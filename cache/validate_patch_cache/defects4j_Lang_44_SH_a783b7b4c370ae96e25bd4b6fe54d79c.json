{
    "patch": "        if (val.length() > 1 && val.charAt(0) == '+' && val.charAt(1) != '+') {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n            int radix = 2;\n            int index = 2;\n            if (val.charAt(0) == '-') {\n                index++;\n            }\n            if (val.length() == index) {\n                throw new NumberFormatException(\"Invalid number: \" + val);\n            }\n            for (int i = index; i < val.length(); i++) {\n                if (val.charAt(i) == '_') {\n                    continue;\n                }\n                if (val.charAt(i) == '1' || val.charAt(i) == '0') {\n                    continue;\n                }\n                throw new NumberFormatException(\"Invalid number: \" + val);\n            }\n            return createInteger(val, radix);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..bc4a2c45 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,38 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.length() > 1 && val.charAt(0) == '+' && val.charAt(1) != '+') {\n+            val = val.substring(1);\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n+            int radix = 2;\n+            int index = 2;\n+            if (val.charAt(0) == '-') {\n+                index++;\n+            }\n+            if (val.length() == index) {\n+                throw new NumberFormatException(\"Invalid number: \" + val);\n+            }\n+            for (int i = index; i < val.length(); i++) {\n+                if (val.charAt(i) == '_') {\n+                    continue;\n+                }\n+                if (val.charAt(i) == '1' || val.charAt(i) == '0') {\n+                    continue;\n+                }\n+                throw new NumberFormatException(\"Invalid number: \" + val);\n+            }\n+            return createInteger(val, radix);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}