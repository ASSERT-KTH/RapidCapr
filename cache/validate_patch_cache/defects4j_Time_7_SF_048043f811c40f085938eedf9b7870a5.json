{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = (iZone != null) ? iZone : chrono.getZone();\n\n    // Create a parser bucket with the specified zone and separate offset\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            0L, chrono.withZone(zone), iLocale, iPivotYear, null);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Compute the millis from the bucket, preserving UTC offset\n    long millis = bucket.computeMillis(true, text);\n    long instantMillis = millis;\n    if (bucket.getOffsetInteger() != null) {\n        // If an offset was parsed, adjust the millis accordingly\n        instantMillis -= bucket.getOffsetInteger();\n        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n    } else if (bucket.getZone() != null) {\n        // If a zone was parsed and an offset was not, use the parsed zone\n        zone = bucket.getZone();\n        instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, millis);\n    }\n\n    // Set the chronology and zone of the provided instant, preserving any existing fields\n    instant.setMillis(instantMillis);\n    if (!instant.getChronology().equals(chrono)) {\n        chrono = selectChronology(instant.getChronology());\n        instant.setChronology(chrono);\n    }\n    if (!instant.getZone().equals(zone)) {\n        instant.setZone(zone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..f3058939 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,45 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = (iZone != null) ? iZone : chrono.getZone();\n+\n+    // Create a parser bucket with the specified zone and separate offset\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            0L, chrono.withZone(zone), iLocale, iPivotYear, null);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    // Compute the millis from the bucket, preserving UTC offset\n+    long millis = bucket.computeMillis(true, text);\n+    long instantMillis = millis;\n+    if (bucket.getOffsetInteger() != null) {\n+        // If an offset was parsed, adjust the millis accordingly\n+        instantMillis -= bucket.getOffsetInteger();\n+        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+    } else if (bucket.getZone() != null) {\n+        // If a zone was parsed and an offset was not, use the parsed zone\n+        zone = bucket.getZone();\n+        instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, millis);\n+    }\n+\n+    // Set the chronology and zone of the provided instant, preserving any existing fields\n+    instant.setMillis(instantMillis);\n+    if (!instant.getChronology().equals(chrono)) {\n+        chrono = selectChronology(instant.getChronology());\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n+    if (!instant.getZone().equals(zone)) {\n+        instant.setZone(zone);\n+    }\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: incompatible types: <null> cannot be converted to int",
    "test_result": "ERROR"
}