{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix v = dec.getV();\n    RealMatrix d = dec.getD();\n    \n    int n = d.getRowDimension();\n    RealMatrix x = new Array2DRowRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        double sqrt = Math.sqrt(d.getEntry(i, i));\n        x.setEntry(i, i, sqrt);\n    }\n\n    RealMatrix xt = x.transpose();\n\n    for (int i = 0; i < 10; i++) {\n        RealMatrix oldX = x.copy();\n        x = m.multiply(x).multiply(xt).scalarMultiply(0.5).add(x.scalarMultiply(0.5));\n        if (x.epsilonEquals(oldX, 1.0e-6)) {\n            break;\n        }\n    }\n\n    return v.multiply(x).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..063b05ca2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix v = dec.getV();\n+    RealMatrix d = dec.getD();\n+    \n+    int n = d.getRowDimension();\n+    RealMatrix x = new Array2DRowRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        double sqrt = Math.sqrt(d.getEntry(i, i));\n+        x.setEntry(i, i, sqrt);\n     }\n+\n+    RealMatrix xt = x.transpose();\n+\n+    for (int i = 0; i < 10; i++) {\n+        RealMatrix oldX = x.copy();\n+        x = m.multiply(x).multiply(xt).scalarMultiply(0.5).add(x.scalarMultiply(0.5));\n+        if (x.epsilonEquals(oldX, 1.0e-6)) {\n+            break;\n+        }\n+    }\n+\n+    return v.multiply(x).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}