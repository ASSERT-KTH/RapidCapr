{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    Chronology chrono = getChronology();\n    if (year <= 0 && !chrono.getChronologyType().equals(ChronologyType.JULIAN)) {\n        throw new IllegalArgumentException(\"Invalid year for Gregorian calendar\");\n    }\n    if (monthOfYear <= 0 || monthOfYear > 12) {\n        throw new IllegalArgumentException(\"Invalid monthOfYear: \" + monthOfYear);\n    }\n    if (dayOfMonth <= 0 || dayOfMonth > 31) {\n        throw new IllegalArgumentException(\"Invalid dayOfMonth: \" + dayOfMonth);\n    }\n\n    long instant = 0;\n    boolean inCutover = false;\n\n    // Compute instant using Gregorian. If the date is in the cutover gap, catch the exception,\n    // and attempt to compute the instant using Julian.\n    try {\n        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } catch (IllegalArgumentException e) {\n        if (e.getMessage() != null && e.getMessage().startsWith(\"Invalid year for Gregorian calendar\")) {\n            throw e;\n        }\n        inCutover = true;\n    }\n\n    if (inCutover) {\n        try {\n            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Invalid year for Julian calendar\")) {\n                throw e;\n            }\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n\n        long gregorian = 0;\n        try {\n            gregorian = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Invalid year for Gregorian calendar\")) {\n                throw e;\n            }\n        }\n\n        if (gregorian < iCutoverMillis) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..ebc5f39b 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,69 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n+\n+    Chronology chrono = getChronology();\n+    if (year <= 0 && !chrono.getChronologyType().equals(ChronologyType.JULIAN)) {\n+        throw new IllegalArgumentException(\"Invalid year for Gregorian calendar\");\n+    }\n+    if (monthOfYear <= 0 || monthOfYear > 12) {\n+        throw new IllegalArgumentException(\"Invalid monthOfYear: \" + monthOfYear);\n+    }\n+    if (dayOfMonth <= 0 || dayOfMonth > 31) {\n+        throw new IllegalArgumentException(\"Invalid dayOfMonth: \" + dayOfMonth);\n+    }\n+\n+    long instant = 0;\n+    boolean inCutover = false;\n+\n+    // Compute instant using Gregorian. If the date is in the cutover gap, catch the exception,\n+    // and attempt to compute the instant using Julian.\n+    try {\n+        instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } catch (IllegalArgumentException e) {\n+        if (e.getMessage() != null && e.getMessage().startsWith(\"Invalid year for Gregorian calendar\")) {\n+            throw e;\n         }\n+        inCutover = true;\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n+    if (inCutover) {\n+        try {\n+            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException e) {\n+            if (e.getMessage() != null && e.getMessage().startsWith(\"Invalid year for Julian calendar\")) {\n+                throw e;\n             }\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n+        }\n+\n+        long gregorian = 0;\n+        try {\n+            gregorian = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException e) {\n+            if (e.getMessage() != null && e.getMessage().startsWith(\"Invalid year for Gregorian calendar\")) {\n+                throw e;\n+            }\n+        }\n+\n+        if (gregorian < iCutoverMillis) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n         }\n-        return instant;\n     }\n+    return instant;\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}