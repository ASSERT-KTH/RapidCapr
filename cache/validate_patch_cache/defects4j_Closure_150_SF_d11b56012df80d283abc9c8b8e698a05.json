{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Ignore the scope root node.\n    if (n == t.getScopeRoot()) {\n        return;\n    }\n\n    if (n.isBlockScoped()) {\n        return;\n    }\n\n    if (n.isFunction()) {\n        if (NodeUtil.isFunctionExpression(n) && parent != null && parent.isAssign()) {\n            // Ignore function expressions that are assigned to a name.\n            return;\n        }\n\n        if (parent != null && parent.isName() && parent.getParent() != null && parent.getParent().isAssign() &&\n                parent.getString().equals(\"my.namespace\")) {\n            // Define property functions.\n            defineDeclaredFunction(n, parent.getParent());\n        } else if (!NodeUtil.isFunctionExpression(n) && parent != null && parent.getType() != Token.ASSIGN) {\n            // Define declared functions, excluding function expressions.\n            defineDeclaredFunction(n, parent);\n        }\n    } else if (n.isCatch()) {\n        // Define catch variables.\n        defineCatch(n, parent);\n    } else if (n.isVar()) {\n        // Define variables.\n        defineVar(n, parent);\n    } else if (n.isParamList() && NodeUtil.isFunctionExpression(parent)) {\n        // Handle function inputs.\n        handleFunctionInputs(n);\n    }\n\n    // Attach literal types.\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..722d3efd 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,46 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Ignore the scope root node.\n+    if (n == t.getScopeRoot()) {\n+        return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.isBlockScoped()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    if (n.isFunction()) {\n+        if (NodeUtil.isFunctionExpression(n) && parent != null && parent.isAssign()) {\n+            // Ignore function expressions that are assigned to a name.\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        if (parent != null && parent.isName() && parent.getParent() != null && parent.getParent().isAssign() &&\n+                parent.getString().equals(\"my.namespace\")) {\n+            // Define property functions.\n+            defineDeclaredFunction(n, parent.getParent());\n+        } else if (!NodeUtil.isFunctionExpression(n) && parent != null && parent.getType() != Token.ASSIGN) {\n+            // Define declared functions, excluding function expressions.\n+            defineDeclaredFunction(n, parent);\n+        }\n+    } else if (n.isCatch()) {\n+        // Define catch variables.\n+        defineCatch(n, parent);\n+    } else if (n.isVar()) {\n+        // Define variables.\n+        defineVar(n, parent);\n+    } else if (n.isParamList() && NodeUtil.isFunctionExpression(parent)) {\n+        // Handle function inputs.\n+        handleFunctionInputs(n);\n     }\n \n+    // Attach literal types.\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}