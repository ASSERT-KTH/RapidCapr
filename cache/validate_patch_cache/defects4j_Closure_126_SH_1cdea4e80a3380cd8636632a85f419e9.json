{
    "patch": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n      NodeUtil.removeChild(n.getParent(), n);\n      compiler.reportCodeChange();\n      return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n      Node ifBlock = n.getFirstChild().getNext();\n      tryMinimizeExits(ifBlock, exitType, labelName);\n      Node elseBlock = ifBlock.getNext();\n      if (elseBlock != null) {\n        tryMinimizeExits(elseBlock, exitType, labelName);\n      }\n      return;\n    }\n\n    // Just a 'try/catch/finally'.\n    if (n.isTry()) {\n      Node tryBlock = n.getFirstChild();\n      tryMinimizeExits(tryBlock, exitType, labelName);\n      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n        Preconditions.checkState(allCatchNodes.hasOneChild());\n        Node catchNode = allCatchNodes.getFirstChild();\n        Node catchCodeBlock = catchNode.getLastChild();\n        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n      }\n      Node finallyBlock = NodeUtil.getFinallyBlock(n);\n      if (finallyBlock != null) {\n        tryMinimizeExits(finallyBlock, exitType, labelName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..7aadb565 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,40 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+void tryMinimizeExits(Node n, int exitType, String labelName) {\n+\n+    // Just an 'exit'.\n+    if (matchingExitNode(n, exitType, labelName)) {\n+      NodeUtil.removeChild(n.getParent(), n);\n+      compiler.reportCodeChange();\n+      return;\n+    }\n+\n+    // Just an 'if'.\n+    if (n.isIf()) {\n+      Node ifBlock = n.getFirstChild().getNext();\n+      tryMinimizeExits(ifBlock, exitType, labelName);\n+      Node elseBlock = ifBlock.getNext();\n+      if (elseBlock != null) {\n+        tryMinimizeExits(elseBlock, exitType, labelName);\n       }\n+      return;\n+    }\n+\n+    // Just a 'try/catch/finally'.\n+    if (n.isTry()) {\n+      Node tryBlock = n.getFirstChild();\n+      tryMinimizeExits(tryBlock, exitType, labelName);\n+      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n+      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n+        Preconditions.checkState(allCatchNodes.hasOneChild());\n+        Node catchNode = allCatchNodes.getFirstChild();\n+        Node catchCodeBlock = catchNode.getLastChild();\n+        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n+      }\n+      Node finallyBlock = NodeUtil.getFinallyBlock(n);\n+      if (finallyBlock != null) {\n+        tryMinimizeExits(finallyBlock, exitType, labelName);\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}