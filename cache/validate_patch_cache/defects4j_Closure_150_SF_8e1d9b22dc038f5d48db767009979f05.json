{
    "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (NodeUtil.isFunctionDeclaration(n)) {\n    defineDeclaredFunction(n, null);\n    return;\n  }\n\n  if (n.isFunction()) {\n    handleFunctionInputs(n);\n    attachLiteralTypes(n);\n    return;\n  }\n\n  switch (n.getToken()) {\n    case VAR:\n      defineVar(n, parent);\n      break;\n    case CATCH:\n      defineCatch(n, parent);\n      break;\n    default:\n      attachLiteralTypes(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7efe8060 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,31 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  if (NodeUtil.isFunctionDeclaration(n)) {\n+    defineDeclaredFunction(n, null);\n+    return;\n+  }\n+\n+  if (n.isFunction()) {\n+    handleFunctionInputs(n);\n+    attachLiteralTypes(n);\n+    return;\n+  }\n \n+  switch (n.getToken()) {\n+    case VAR:\n+      defineVar(n, parent);\n+      break;\n+    case CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    default:\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}