{
    "patch": "public <T extends EventDetector> void doEvents(final SpacecraftState s0,\n        final Collection<T> detectors) throws OrekitException {\n    EventHandler<T> handler = new EventHandler<T>(detectors);\n    handler.init(s0, s0.getDate().durationFrom(s0.shiftedBy(60.0))); // or any duration greater than zero\n    StepHandler stepHandler = handler;\n    EventHandler.Action action = EventHandler.Action.CONTINUE;\n    while (true) {\n        action = handler.eventOccurred(s0, stepHandler);\n        if (action == EventHandler.Action.STOP) {\n            return;\n        }\n        SpacecraftState rawState = handler.getState();\n        stepHandler.handleStep(rawState, false);\n        if (stepHandler instanceof MainHandler) {\n            // evaluate the state at the end of the step\n            MainHandler mainHandler = (MainHandler) stepHandler;\n            SpacecraftState state = mainHandler.getInterpolatedState();\n            double tEnd = state.getDate().durationFrom(s0.getDate());\n            if (action == EventHandler.Action.RESET_DERIVATIVES) {\n                // reset the derivatives\n                double[] y  = state.getOrbit().getState();\n                double[] dy = state.getOrbit().getPVCoordinates().getVelocity().toArray();\n                double[][] yDot = new double[y.length][];\n                for (int i = 0; i < y.length; ++i) {\n                    yDot[i] = new double[y.length];\n                    yDot[i][i+3] = 1.0;\n                }\n                rawState = new SpacecraftState(new TimeStampedPVCoordinates(state.getDate(), new PVCoordinates(y, dy, yDot)),\n                                               state.getAttitude(), state.getMass(), state.getAdditionalStates());\n                stepHandler = new MainHandler(rawState, handler.getEquations(), handler.isForward(), handler.getPrimaryMapper(),\n                        handler.getSecondaryMappers());\n            } else {\n                // prepare handling the next step\n                double step  = handler.getStepSize();\n                double maxDt = handler.getMaxCheckInterval();\n                handler = (EventHandler<T>) handler.reset(stateShiftTransformer.apply(state),\n                                                          state.getDate(), state.getFrame(), maxDt,\n                                                          step, handler.getMapper(), handler.getPrimaryMapper(),\n                                                          handler.getSecondaryMappers());\n                handler.init(rawState, 0.0);\n                stepHandler = isLastStepHandler;\n            }\n        }\n        s0 = rawState;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..5bafed3fd 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,52 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n+public <T extends EventDetector> void doEvents(final SpacecraftState s0,\n+        final Collection<T> detectors) throws OrekitException {\n+    EventHandler<T> handler = new EventHandler<T>(detectors);\n+    handler.init(s0, s0.getDate().durationFrom(s0.shiftedBy(60.0))); // or any duration greater than zero\n+    StepHandler stepHandler = handler;\n+    EventHandler.Action action = EventHandler.Action.CONTINUE;\n+    while (true) {\n+        action = handler.eventOccurred(s0, stepHandler);\n+        if (action == EventHandler.Action.STOP) {\n+            return;\n+        }\n+        SpacecraftState rawState = handler.getState();\n+        stepHandler.handleStep(rawState, false);\n+        if (stepHandler instanceof MainHandler) {\n+            // evaluate the state at the end of the step\n+            MainHandler mainHandler = (MainHandler) stepHandler;\n+            SpacecraftState state = mainHandler.getInterpolatedState();\n+            double tEnd = state.getDate().durationFrom(s0.getDate());\n+            if (action == EventHandler.Action.RESET_DERIVATIVES) {\n+                // reset the derivatives\n+                double[] y  = state.getOrbit().getState();\n+                double[] dy = state.getOrbit().getPVCoordinates().getVelocity().toArray();\n+                double[][] yDot = new double[y.length][];\n+                for (int i = 0; i < y.length; ++i) {\n+                    yDot[i] = new double[y.length];\n+                    yDot[i][i+3] = 1.0;\n                 }\n+                rawState = new SpacecraftState(new TimeStampedPVCoordinates(state.getDate(), new PVCoordinates(y, dy, yDot)),\n+                                               state.getAttitude(), state.getMass(), state.getAdditionalStates());\n+                stepHandler = new MainHandler(rawState, handler.getEquations(), handler.isForward(), handler.getPrimaryMapper(),\n+                        handler.getSecondaryMappers());\n+            } else {\n+                // prepare handling the next step\n+                double step  = handler.getStepSize();\n+                double maxDt = handler.getMaxCheckInterval();\n+                handler = (EventHandler<T>) handler.reset(stateShiftTransformer.apply(state),\n+                                                          state.getDate(), state.getFrame(), maxDt,\n+                                                          step, handler.getMapper(), handler.getPrimaryMapper(),\n+                                                          handler.getSecondaryMappers());\n+                handler.init(rawState, 0.0);\n+                stepHandler = isLastStepHandler;\n             }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n-\n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        }\n+        s0 = rawState;\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}