{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n    long newMillis = bucket.computeMillis(false, text);\n\n    if (bucket.getOffsetInteger() == null && newPos >= 0 && chrono.year().get(newMillis) != defaultYear && bucket.getParsedMonth() == DateTimeConstants.FEBRUARY && bucket.getParsedDayOfMonth() == 29) {\n        // if February 29th was parsed with a default year different from the actual year, remove the default year from the bucket.\n        bucket.saveField(DateTimeFieldType.year(), null);\n        bucket.setZone(chrono.getZone());\n        newPos = parser.parseInto(bucket, text, position);\n        newMillis = bucket.computeMillis(true, text);\n    }\n    \n    if (newPos >= 0 && newMillis != instant.getMillis()) {\n        instant.setMillis(newMillis);\n        if (bucket.getOffsetInteger() != null) {\n            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n        } else if (bucket.getZone() != null) {\n            instant.setChronology(chrono.withZone(bucket.getZone()));\n        } else {\n            instant.setChronology(chrono);\n        }\n    }\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..4fccdc4a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,45 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+    long newMillis = bucket.computeMillis(false, text);\n+\n+    if (bucket.getOffsetInteger() == null && newPos >= 0 && chrono.year().get(newMillis) != defaultYear && bucket.getParsedMonth() == DateTimeConstants.FEBRUARY && bucket.getParsedDayOfMonth() == 29) {\n+        // if February 29th was parsed with a default year different from the actual year, remove the default year from the bucket.\n+        bucket.saveField(DateTimeFieldType.year(), null);\n+        bucket.setZone(chrono.getZone());\n+        newPos = parser.parseInto(bucket, text, position);\n+        newMillis = bucket.computeMillis(true, text);\n+    }\n+    \n+    if (newPos >= 0 && newMillis != instant.getMillis()) {\n+        instant.setMillis(newMillis);\n+        if (bucket.getOffsetInteger() != null) {\n+            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+            instant.setChronology(chrono.withZone(bucket.getZone()));\n+        } else {\n+            instant.setChronology(chrono);\n         }\n-        return newPos;\n     }\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}