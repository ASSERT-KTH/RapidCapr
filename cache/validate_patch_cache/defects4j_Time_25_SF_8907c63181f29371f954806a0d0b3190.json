{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetInitial = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetInitial;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (offsetInitial == offsetAdjusted) {\n        return offsetInitial;\n    }\n\n    if (offsetInitial < offsetAdjusted) {\n        final long nextLocal = nextTransition(instantLocal);\n        if (nextLocal == instantLocal) {\n            // We are exactly at a transition, use previous offset\n            int offsetPrevious = getOffset(instantLocal - 1);\n            if (offsetPrevious == offsetAdjusted) {\n                return offsetInitial;\n            } else {\n                return offsetAdjusted;\n            }\n        } else if (nextLocal > instantLocal + (offsetAdjusted - offsetInitial)) {\n            // We are in the middle of a gap, use initial offset\n            return offsetInitial;\n        } else {\n            // We are in the middle of an overlap or a gap following an overlap, use previous offset\n            int offsetPrevious = getOffset(nextLocal - 1);\n            if (offsetPrevious == offsetInitial) {\n                long nextAdjusted = nextTransition(instantAdjusted);\n                if (nextAdjusted == nextLocal) {\n                    // Casts shadow of the next transition on the overlap/gap\n                    return offsetInitial;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    } else {\n        // offsetInitial > offsetAdjusted\n        final long nextAdjusted = nextTransition(instantAdjusted);\n        if (nextAdjusted == instantAdjusted) {\n            // We are exactly at a transition, use previous offset\n            int offsetNext = getOffset(instantAdjusted + 1);\n            if (offsetInitial == offsetNext) {\n                return offsetAdjusted;\n            } else {\n                return offsetInitial;\n            }\n        } else if (nextAdjusted > instantAdjusted + (offsetInitial - offsetAdjusted)) {\n            // We are in the middle of an overlap, use initial offset\n            return offsetInitial;\n        } else {\n            // We are in the middle of a gap or an overlap following a gap, use previous offset\n            int offsetNext = getOffset(nextAdjusted);\n            if (offsetInitial == offsetNext) {\n                long nextLocal = nextTransition(instantLocal);\n                if (nextLocal == nextAdjusted) {\n                    // Casts shadow of the next transition on gap/overlap\n                    return offsetAdjusted;\n                } else {\n                    return offsetInitial;\n                }\n            } else {\n                return offsetInitial;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..84b2cc32 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,74 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetInitial = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - offsetInitial;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (offsetInitial == offsetAdjusted) {\n+        return offsetInitial;\n+    }\n+\n+    if (offsetInitial < offsetAdjusted) {\n+        final long nextLocal = nextTransition(instantLocal);\n+        if (nextLocal == instantLocal) {\n+            // We are exactly at a transition, use previous offset\n+            int offsetPrevious = getOffset(instantLocal - 1);\n+            if (offsetPrevious == offsetAdjusted) {\n+                return offsetInitial;\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        } else if (nextLocal > instantLocal + (offsetAdjusted - offsetInitial)) {\n+            // We are in the middle of a gap, use initial offset\n+            return offsetInitial;\n+        } else {\n+            // We are in the middle of an overlap or a gap following an overlap, use previous offset\n+            int offsetPrevious = getOffset(nextLocal - 1);\n+            if (offsetPrevious == offsetInitial) {\n+                long nextAdjusted = nextTransition(instantAdjusted);\n+                if (nextAdjusted == nextLocal) {\n+                    // Casts shadow of the next transition on the overlap/gap\n+                    return offsetInitial;\n+                } else {\n+                    return offsetAdjusted;\n                 }\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    } else {\n+        // offsetInitial > offsetAdjusted\n+        final long nextAdjusted = nextTransition(instantAdjusted);\n+        if (nextAdjusted == instantAdjusted) {\n+            // We are exactly at a transition, use previous offset\n+            int offsetNext = getOffset(instantAdjusted + 1);\n+            if (offsetInitial == offsetNext) {\n+                return offsetAdjusted;\n+            } else {\n+                return offsetInitial;\n+            }\n+        } else if (nextAdjusted > instantAdjusted + (offsetInitial - offsetAdjusted)) {\n+            // We are in the middle of an overlap, use initial offset\n+            return offsetInitial;\n+        } else {\n+            // We are in the middle of a gap or an overlap following a gap, use previous offset\n+            int offsetNext = getOffset(nextAdjusted);\n+            if (offsetInitial == offsetNext) {\n+                long nextLocal = nextTransition(instantLocal);\n+                if (nextLocal == nextAdjusted) {\n+                    // Casts shadow of the next transition on gap/overlap\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetInitial;\n+                }\n+            } else {\n+                return offsetInitial;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}