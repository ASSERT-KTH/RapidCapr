{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    String previousLine = \"\";\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            startCharno++;\n          } else {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n            startCharno = 1;\n          }\n          ignoreStar = true;\n          previousLine = line;\n          line = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n          if (line.isEmpty()) {\n            line = previousLine;\n          }\n          builder.append(line);\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno() + 1;\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          String tokenString = toString(token);\n          if (tokenString != null) {\n              builder.append(tokenString);\n          }\n\n          previousLine = line;\n          line = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n          if (line.isEmpty()) {\n            line = previousLine;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..7cd8b0ed 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,7 +1326,7 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n@@ -1338,6 +1338,8 @@ public final class JsDocInfoParser {\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n+    String previousLine = \"\";\n+\n     // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n@@ -1352,21 +1354,15 @@ public final class JsDocInfoParser {\n \n     boolean ignoreStar = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n+            startCharno++;\n           } else {\n-            // The star is part of the comment.\n             if (builder.length() > 0) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n           }\n \n@@ -1376,9 +1372,18 @@ public final class JsDocInfoParser {\n         case EOL:\n           if (option != WhitespaceOption.SINGLE_LINE) {\n             builder.append(\"\\n\");\n+            startCharno = 1;\n           }\n-\n           ignoreStar = true;\n+          previousLine = line;\n+          line = stream.getRemainingJSDocLine();\n+          if (option != WhitespaceOption.PRESERVE) {\n+            line = line.trim();\n+          }\n+          if (line.isEmpty()) {\n+            line = previousLine;\n+          }\n+          builder.append(line);\n           token = next();\n           continue;\n \n@@ -1386,12 +1391,8 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n               (token == JsDocToken.ANNOTATION &&\n                option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n@@ -1401,7 +1402,7 @@ public final class JsDocInfoParser {\n             }\n \n             int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+            int endCharno = stream.getCharno() + 1;\n \n             if (multilineText.length() > 0) {\n               jsdocBuilder.markText(multilineText, startLineno, startCharno,\n@@ -1414,19 +1415,18 @@ public final class JsDocInfoParser {\n           if (builder.length() > 0) {\n             builder.append(' ');\n           }\n-          builder.append(toString(token));\n+          String tokenString = toString(token);\n+          if (tokenString != null) {\n+              builder.append(tokenString);\n+          }\n \n+          previousLine = line;\n           line = stream.getRemainingJSDocLine();\n-\n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n           }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+          if (line.isEmpty()) {\n+            line = previousLine;\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}