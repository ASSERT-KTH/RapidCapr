{
    "patch": "    if (type.isObject() && constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          PropertyType sourcePropertyType = constraintObj.getOwnPropertyType(prop);\n          if (sourcePropertyType.isInvalidating()) {\n            continue;\n          }\n          JSType propType = getNativeType(UNKNOWN_TYPE);\n          if (sourcePropertyType.isOptional()) {\n            propType = propType.getLeastSupertype(getNativeType(NULL_TYPE));\n          }\n          propType = propType.getLeastSupertype(sourcePropertyType.getType());\n          if (objType.isPropertyTypeDeclared(prop)) {\n            JSType declaredType = objType.getOwnPropertyType(prop);\n            if (declaredType == null) {\n              objType.defineInferredProperty(prop, propType, null);\n            } else {\n              objType.setPropertyType(prop, declaredType.getLeastSupertype(propType));\n            }\n          } else if (!objType.hasProperty(prop)) {\n            objType.defineInferredProperty(prop, propType, null);\n          } else if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n            warnings.add(JSError.make(prop + \" cannot be inferred due to a type mismatch\\n\" +\n                    \"Expected type: \" + objType.getOwnPropertyType(prop) +\n                    \"\\nActual type: \" + propType,\n                    n));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..973e7687 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,38 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (type.isObject() && constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          PropertyType sourcePropertyType = constraintObj.getOwnPropertyType(prop);\n+          if (sourcePropertyType.isInvalidating()) {\n+            continue;\n+          }\n+          JSType propType = getNativeType(UNKNOWN_TYPE);\n+          if (sourcePropertyType.isOptional()) {\n+            propType = propType.getLeastSupertype(getNativeType(NULL_TYPE));\n+          }\n+          propType = propType.getLeastSupertype(sourcePropertyType.getType());\n+          if (objType.isPropertyTypeDeclared(prop)) {\n+            JSType declaredType = objType.getOwnPropertyType(prop);\n+            if (declaredType == null) {\n+              objType.defineInferredProperty(prop, propType, null);\n+            } else {\n+              objType.setPropertyType(prop, declaredType.getLeastSupertype(propType));\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else if (!objType.hasProperty(prop)) {\n+            objType.defineInferredProperty(prop, propType, null);\n+          } else if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+            warnings.add(JSError.make(prop + \" cannot be inferred due to a type mismatch\\n\" +\n+                    \"Expected type: \" + objType.getOwnPropertyType(prop) +\n+                    \"\\nActual type: \" + propType,\n+                    n));\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}