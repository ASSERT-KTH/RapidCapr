{
    "patch": "JSType thisType = functionType.getTypeOfThis();\nif (thisType != null) {\n  Node parent = n.getParent();\n  if (NodeUtil.isGet(parent)) {\n    parent = parent.getParent();\n    if (parent == null) {\n      report(t, n, EXPECTED_THIS_TYPE);\n      return;\n    }\n  }\n  if (!(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n    report(t, n, EXPECTED_THIS_TYPE);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..63337655 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+JSType thisType = functionType.getTypeOfThis();\n+if (thisType != null) {\n+  Node parent = n.getParent();\n+  if (NodeUtil.isGet(parent)) {\n+    parent = parent.getParent();\n+    if (parent == null) {\n+      report(t, n, EXPECTED_THIS_TYPE);\n+      return;\n+    }\n+  }\n+  if (!(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n+    report(t, n, EXPECTED_THIS_TYPE);\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}