{
    "patch": "            for (int i = 0; i < count; i++) {\n                long savedMillis = savedFields[i].set(millis, resetFields);\n                if (millis + savedFields[i].getField().getDurationField().getUnitMillis() <= savedMillis) {\n                    throw new IllegalArgumentException(\"The parsed date exceeds the maximum supported date\");\n                } else if (millis + savedFields[i].getField().getDurationField().getUnitMillis() * (-1) >= savedMillis) {\n                    throw new IllegalArgumentException(\"The parsed date exceeds the minimum supported date\");\n                } else {\n                    millis = savedMillis;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..450eef6a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                long savedMillis = savedFields[i].set(millis, resetFields);\n+                if (millis + savedFields[i].getField().getDurationField().getUnitMillis() <= savedMillis) {\n+                    throw new IllegalArgumentException(\"The parsed date exceeds the maximum supported date\");\n+                } else if (millis + savedFields[i].getField().getDurationField().getUnitMillis() * (-1) >= savedMillis) {\n+                    throw new IllegalArgumentException(\"The parsed date exceeds the minimum supported date\");\n+                } else {\n+                    millis = savedMillis;\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}