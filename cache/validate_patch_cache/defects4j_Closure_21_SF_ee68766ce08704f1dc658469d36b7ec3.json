{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n        if (parent.getType() == Token.FOR) {\n          if (n.getType() == Token.AND) {\n            msg = \"The results of the left operand of an '&&' operator in a for loop termination condition is usually unused. Consider using the right operand instead.\";\n          } else if (n.getType() == Token.OR) {\n            msg = \"The results of the left operand of an '||' operator in a for loop termination condition is usually unused.\";\n          } else {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is usually unused. Consider using '\" + n.getFirstChild().getQualifiedName() + \"' instead in the termination condition.\";\n          }\n        }\n      }\n\n      if (NodeUtil.isStatement(n)) {\n        // Check if node is empty condition in a loop and add additional information\n        if (parent.getType() == Token.IF &&\n            !isResultUsed &&\n            n == parent.getFirstChild()) {\n          Node grandparent = parent.getParent();\n          if (grandparent != null && grandparent.getType() == Token.DO) {\n            msg = \"An empty loop condition is equivalent to 'true'.\";\n          } else if (grandparent != null && grandparent.getType() == Token.FOR) {\n            msg = \"An empty loop condition is equivalent to 'true'.\";\n          }\n        }\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      }\n\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..02dcb946 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -135,10 +135,33 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       } else if (isSimpleOp) {\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n+        if (parent.getType() == Token.FOR) {\n+          if (n.getType() == Token.AND) {\n+            msg = \"The results of the left operand of an '&&' operator in a for loop termination condition is usually unused. Consider using the right operand instead.\";\n+          } else if (n.getType() == Token.OR) {\n+            msg = \"The results of the left operand of an '||' operator in a for loop termination condition is usually unused.\";\n+          } else {\n+            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is usually unused. Consider using '\" + n.getFirstChild().getQualifiedName() + \"' instead in the termination condition.\";\n+          }\n+        }\n+      }\n+\n+      if (NodeUtil.isStatement(n)) {\n+        // Check if node is empty condition in a loop and add additional information\n+        if (parent.getType() == Token.IF &&\n+            !isResultUsed &&\n+            n == parent.getFirstChild()) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.DO) {\n+            msg = \"An empty loop condition is equivalent to 'true'.\";\n+          } else if (grandparent != null && grandparent.getType() == Token.FOR) {\n+            msg = \"An empty loop condition is equivalent to 'true'.\";\n+          }\n+        }\n+        t.getCompiler().report(\n+            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>",
    "test_result": "FAIL"
}