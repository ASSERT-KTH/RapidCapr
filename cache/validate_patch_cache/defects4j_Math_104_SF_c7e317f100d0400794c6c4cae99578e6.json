{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double sum = 1.0 / a;\n    double term = sum;\n\n    while (Math.abs(term) > sum * 1e-15) {\n        term *= x / (a + sum);\n        sum += term;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    double w = 1.0 - a;\n    double p3 = w;\n    double p2 = w + 1.0;\n    double p1 = w * x + 1.0;\n    double p = p1 / p2;\n    double q3 = x;\n    double q2 = x + 1.0;\n    double q1 = x * p2;\n    double q = q1 / q2;\n    double ans = p;\n\n    while (Math.abs(p - q) > ans * 1e-15) {\n        ans = p - q;\n        p3 += 1.0;\n        p2 += 2.0;\n        p1 = p2 * p * w + p3 * p1;\n        q3 += 1.0;\n        q2 += 2.0;\n        q1 = q2 * q * x + q3 * q1;\n        p = p1 / p2;\n        q = q1 / q2;\n    }\n\n    return ans * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double series = 1.0 / 30.0;\n    return tmp + Math.log((2.50662827465 * series) * (1.0 + series * (-0.00166666666666666666667 +\n            series * (0.000277777777777777777778 + (series * (-0.0000666666666666666666667 +\n                    series * (0.0000222222222222222222222 + series * (-0.00000909090909090909090909 +\n                            series * 0.00000378787878787878787879)))))));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..10433045e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,77 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double sum = 1.0 / a;\n+    double term = sum;\n+\n+    while (Math.abs(term) > sum * 1e-15) {\n+        term *= x / (a + sum);\n+        sum += term;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    double w = 1.0 - a;\n+    double p3 = w;\n+    double p2 = w + 1.0;\n+    double p1 = w * x + 1.0;\n+    double p = p1 / p2;\n+    double q3 = x;\n+    double q2 = x + 1.0;\n+    double q1 = x * p2;\n+    double q = q1 / q2;\n+    double ans = p;\n+\n+    while (Math.abs(p - q) > ans * 1e-15) {\n+        ans = p - q;\n+        p3 += 1.0;\n+        p2 += 2.0;\n+        p1 = p2 * p * w + p3 * p1;\n+        q3 += 1.0;\n+        q2 += 2.0;\n+        q1 = q2 * q * x + q3 * q1;\n+        p = p1 / p2;\n+        q = q1 / q2;\n+    }\n+\n+    return ans * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double series = 1.0 / 30.0;\n+    return tmp + Math.log((2.50662827465 * series) * (1.0 + series * (-0.00166666666666666666667 +\n+            series * (0.000277777777777777777778 + (series * (-0.0000666666666666666666667 +\n+                    series * (0.0000222222222222222222222 + series * (-0.00000909090909090909090909 +\n+                            series * 0.00000378787878787878787879)))))));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}