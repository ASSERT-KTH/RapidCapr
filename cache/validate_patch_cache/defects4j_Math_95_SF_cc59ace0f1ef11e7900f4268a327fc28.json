{
    "patch": "    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        if (d <= 2.0) {\n            // if denominator degrees of freedom is less than or equal to 2, use the midpoint as initial domain as there is no variance in this case.\n            ret = 0.0;\n        } else if (Double.isFinite(d)) {\n            // use mean\n            ret = d / (d - 2.0);\n        } else {\n            // use a large value for the initial domain as there is no clear value for a non-finite denominator degrees of freedom\n            ret = Double.MAX_VALUE / 2.0;\n        }\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..fd66ba1d8 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -143,8 +143,16 @@ public class FDistributionImpl\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n+        if (d <= 2.0) {\n+            // if denominator degrees of freedom is less than or equal to 2, use the midpoint as initial domain as there is no variance in this case.\n+            ret = 0.0;\n+        } else if (Double.isFinite(d)) {\n             // use mean\n             ret = d / (d - 2.0);\n+        } else {\n+            // use a large value for the initial domain as there is no clear value for a non-finite denominator degrees of freedom\n+            ret = Double.MAX_VALUE / 2.0;\n+        }\n         return ret;\n     }\n     ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}