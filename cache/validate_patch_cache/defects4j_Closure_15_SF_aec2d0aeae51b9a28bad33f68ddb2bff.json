{
    "patch": "        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // We care about calls to non-pure functions and expressions that potentially modify dependent variables.\n        if (NodeUtil.isCallOrNew(n) && NodeUtil.mayEffectMutableState(n)) {\n          return true;\n        }\n        \n        // Handle the 'delete' operation and dynamic property access\n        if (n.isDelProp() || (n.isGetElem() && !n.getLastChild().isString())) {\n          return true;\n        }\n\n        // Recurse on child nodes\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        \n        return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..d83638c4 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,30 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n         // When the node is null it means, we reached the implicit return\n         // where the function returns (possibly without an return statement)\n         if (n == null) {\n           return false;\n         }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+        // We care about calls to non-pure functions and expressions that potentially modify dependent variables.\n+        if (NodeUtil.isCallOrNew(n) && NodeUtil.mayEffectMutableState(n)) {\n           return true;\n         }\n-\n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+        \n+        // Handle the 'delete' operation and dynamic property access\n+        if (n.isDelProp() || (n.isGetElem() && !n.getLastChild().isString())) {\n           return true;\n         }\n \n-\n+        // Recurse on child nodes\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n             return true;\n           }\n         }\n+        \n         return false;\n-      }\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}