{
    "patch": "    // We only reduce function expressions that have a single, unnamed argument\n    if (n.getFirstChild().getNext() != null || n.getFirstChild().getType() != Token.EMPTY) {\n      return false;\n    }\n\n    // Ensure that the function expression can be reduced to a statement\n    if (!NodeUtil.functionHasContents(n)) {\n      return false;\n    }\n\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..fa5b3e23 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,17 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    // We only reduce function expressions that have a single, unnamed argument\n+    if (n.getFirstChild().getNext() != null || n.getFirstChild().getType() != Token.EMPTY) {\n+      return false;\n+    }\n+\n+    // Ensure that the function expression can be reduced to a statement\n+    if (!NodeUtil.functionHasContents(n)) {\n+      return false;\n+    }\n+\n+    return true;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}