{
    "patch": "    if (providedNames.containsKey(arg.getString())) {\n      ProvidedName provided = providedNames.get(arg.getString());\n      if (!provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName())\n        );\n      }\n    } else {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName())\n      );\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    // Requires should be removed before further processing.\n    // Some clients run closure pass multiple times, first with\n    // the checks for broken requires turned off. In these cases, we\n    // allow broken requires to be preserved by the first run to\n    // let them be caught in the subsequent run.\n>>> [ INFILL ] <<<\n    parent.detach();\n    compiler.reportChangeToEnclosingScope(parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..2b8a987a 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,29 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    if (providedNames.containsKey(arg.getString())) {\n+      ProvidedName provided = providedNames.get(arg.getString());\n+      if (!provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+          new UnrecognizedRequire(n, ns, t.getSourceName())\n+        );\n+      }\n+    } else {\n+      unrecognizedRequires.add(\n+          new UnrecognizedRequire(n, ns, t.getSourceName())\n+      );\n+    }\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n+\n+    // Requires should be removed before further processing.\n+    // Some clients run closure pass multiple times, first with\n+    // the checks for broken requires turned off. In these cases, we\n+    // allow broken requires to be preserved by the first run to\n+    // let them be caught in the subsequent run.\n+>>> [ INFILL ] <<<\n+    parent.detach();\n+    compiler.reportChangeToEnclosingScope(parent);\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}