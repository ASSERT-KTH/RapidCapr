{
    "patch": "          int refCount = 0;\n          for (BasicBlock block2 : block.getReachableBlocks()) {\n            for (Reference ref2 : block2.getReferences()) {\n              if (ref2 == ref && ++refCount > 1) {\n                return false;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..36897692 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          int refCount = 0;\n+          for (BasicBlock block2 : block.getReachableBlocks()) {\n+            for (Reference ref2 : block2.getReferences()) {\n+              if (ref2 == ref && ++refCount > 1) {\n+                return false;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}