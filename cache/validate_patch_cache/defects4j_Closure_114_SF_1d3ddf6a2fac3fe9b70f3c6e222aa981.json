{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isCall() && parent.getFirstChild() == n) {\n      // If the assignment is the first argument to a function call, record the\n      // dependencies against the call expression, since the call is the context\n      // that uses the right-hand side.\n      recordDepScope(parent, ns);\n    } else if (parent.isExprResult()) {\n      // If the assignment appears as an expression statement, record the\n      // dependencies against the statement parent. In other words, if the\n      // assignment is the entire expression, it's the context that uses the\n      // right-hand side.\n      recordDepScope(parent.getParent(), ns);\n    } else {\n      Node grandparent = parent.getParent();\n      if (NodeUtil.isAnyFunctionBlock(grandparent) || grandparent.isModuleBody()) {\n        // If we're in a function or module, the assigned variable is only visible within\n        // the function or module scope, respectively. Record the dependencies against\n        // the function or module node.\n        recordDepScope(grandparent, ns);\n      } else if (NodeUtil.isStatementBlock(grandparent) || grandparent.isScript()) {\n        // If the assignment appears in a statement block or the global script, and not as the\n        // entire expression, it's a statement that defines the variable in the current scope.\n        // Record the dependencies against the statement itself.\n        recordDepScope(parent, ns);\n      } else if (parent.isBlock() || parent.isSwitch()) {\n        // If the assignment is part of a block or switch statement, it's a statement that defines the\n        // variable in the current scope. Record the dependencies against the statement itself.\n        recordDepScope(parent, ns);\n      } else if (parent.isExprResult() && (grandparent.isFor() || grandparent.isForIn())) {\n        // If the assignment appears in the initialization part of a for loop, record the\n        // dependencies against the for loop (which represents a new scope).\n        recordDepScope(grandparent, ns);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..c6552850 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,46 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n-        }\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+  Node nameNode = n.getFirstChild();\n+  Node parent = n.getParent();\n+  NameInformation ns = createNameInformation(t, nameNode);\n+  if (ns != null) {\n+    if (parent.isCall() && parent.getFirstChild() == n) {\n+      // If the assignment is the first argument to a function call, record the\n+      // dependencies against the call expression, since the call is the context\n+      // that uses the right-hand side.\n+      recordDepScope(parent, ns);\n+    } else if (parent.isExprResult()) {\n+      // If the assignment appears as an expression statement, record the\n+      // dependencies against the statement parent. In other words, if the\n+      // assignment is the entire expression, it's the context that uses the\n+      // right-hand side.\n+      recordDepScope(parent.getParent(), ns);\n+    } else {\n+      Node grandparent = parent.getParent();\n+      if (NodeUtil.isAnyFunctionBlock(grandparent) || grandparent.isModuleBody()) {\n+        // If we're in a function or module, the assigned variable is only visible within\n+        // the function or module scope, respectively. Record the dependencies against\n+        // the function or module node.\n+        recordDepScope(grandparent, ns);\n+      } else if (NodeUtil.isStatementBlock(grandparent) || grandparent.isScript()) {\n+        // If the assignment appears in a statement block or the global script, and not as the\n+        // entire expression, it's a statement that defines the variable in the current scope.\n+        // Record the dependencies against the statement itself.\n+        recordDepScope(parent, ns);\n+      } else if (parent.isBlock() || parent.isSwitch()) {\n+        // If the assignment is part of a block or switch statement, it's a statement that defines the\n+        // variable in the current scope. Record the dependencies against the statement itself.\n+        recordDepScope(parent, ns);\n+      } else if (parent.isExprResult() && (grandparent.isFor() || grandparent.isForIn())) {\n+        // If the assignment appears in the initialization part of a for loop, record the\n+        // dependencies against the for loop (which represents a new scope).\n+        recordDepScope(grandparent, ns);\n       }\n     }\n+  }\n+}\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}