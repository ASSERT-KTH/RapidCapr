{
    "patch": "        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        // get previous and next transition\n        long transMillis = earlierOrLater ? instantAfter : instantBefore;\n        DateTimeZoneTransition nextTransition = nextTransition(transMillis);\n        if (nextTransition == null || nextTransition.isGap()) {\n            return convertLocalToUTC(convertUTCToLocal(instant, transMillis), transMillis);\n        }\n        DateTimeZoneTransition prevTransition = previousTransition(nextTransition.getMillis());\n        if (prevTransition == null || prevTransition.isOverlap() == false) {\n            return convertLocalToUTC(convertUTCToLocal(instant, transMillis), transMillis);\n        }\n\n        // if the instant is inside the overlapped period, adjust using the preferred offset\n        long nextOffset = nextTransition.getOffset();\n        long prevOffset = prevTransition.getOffset();\n        int offsetBefore = nextOffset > prevOffset ? 1 : 0;\n        long instantLocal = convertUTCToLocal(instant);\n        if (instantLocal < nextTransition.getMillis() &&\n            (offsetBefore != 0 || instantLocal < (nextTransition.getMillis() - prevTransition.getDuration()))) {\n            return convertLocalToUTC(instantLocal, prevOffset);\n        } else {\n            return convertLocalToUTC(instantLocal, nextOffset);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..a990e1eb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,33 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n-    }\n+\n+        // get previous and next transition\n+        long transMillis = earlierOrLater ? instantAfter : instantBefore;\n+        DateTimeZoneTransition nextTransition = nextTransition(transMillis);\n+        if (nextTransition == null || nextTransition.isGap()) {\n+            return convertLocalToUTC(convertUTCToLocal(instant, transMillis), transMillis);\n+        }\n+        DateTimeZoneTransition prevTransition = previousTransition(nextTransition.getMillis());\n+        if (prevTransition == null || prevTransition.isOverlap() == false) {\n+            return convertLocalToUTC(convertUTCToLocal(instant, transMillis), transMillis);\n+        }\n+\n+        // if the instant is inside the overlapped period, adjust using the preferred offset\n+        long nextOffset = nextTransition.getOffset();\n+        long prevOffset = prevTransition.getOffset();\n+        int offsetBefore = nextOffset > prevOffset ? 1 : 0;\n+        long instantLocal = convertUTCToLocal(instant);\n+        if (instantLocal < nextTransition.getMillis() &&\n+            (offsetBefore != 0 || instantLocal < (nextTransition.getMillis() - prevTransition.getDuration()))) {\n+            return convertLocalToUTC(instantLocal, prevOffset);\n+        } else {\n+            return convertLocalToUTC(instantLocal, nextOffset);\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}