{
    "patch": " if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.FUNCTION ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      // This includes functions that are assigned to a qualified prototype property\n      // via nodes that combine GETPROP, ASSIGN, and CALL.\n      // Examples:\n      //   a.b.prototype.foo = function() {} [e.g., testCases/use_types]\n      //   goog.inherits(a, b); a.prototype.foo = function() {}\n      // [Note: the current implementation only handles the first example above;\n      // we can add support for the second example by checking if parent is a CALL.]\n      if (parent != null) {\n        // Go up the tree looking for anything that stops function traversal,\n        // but remembers any prototype property access along the way\n        boolean isPrototypeProperty = false;\n        while (parent != null) {\n          if (NodeUtil.isGet(parent)) {\n            Node grandparent = parent.getParent();\n            if (grandparent != null && grandparent.getType() == Token.CALL &&\n                grandparent.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n              Node inheritedCtor = grandparent.getSecondChild();\n              isPrototypeProperty |= NodeUtil.isPrototypePropertyOf(parent, inheritedCtor);\n              parent = grandparent.getParent();\n            } else {\n              Node getTarget = parent.getFirstChild();\n              if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n                isPrototypeProperty = true;\n                break;\n              }\n              parent = parent.getParent();\n            }\n          } else if (parent.getType() == Token.ASSIGN) {\n            Node lhs = parent.getFirstChild();\n            isPrototypeProperty |= (lhs.getType() == Token.GETPROP &&\n                                    lhs.getLastChild().getString().equals(\"prototype\"));\n            parent = parent.getParent();\n          } else if (parent.getType() == Token.FUNCTION) {\n            parent = parent.getParent();\n          } else {\n            break;\n          }\n        }\n        if (isPrototypeProperty) {\n          return false;\n        }\n      }\n >>> [ INFILL ] <<<   \n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9f1460fd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,111 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+ if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            pType == Token.FUNCTION ||\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      // This includes functions that are assigned to a qualified prototype property\n+      // via nodes that combine GETPROP, ASSIGN, and CALL.\n+      // Examples:\n+      //   a.b.prototype.foo = function() {} [e.g., testCases/use_types]\n+      //   goog.inherits(a, b); a.prototype.foo = function() {}\n+      // [Note: the current implementation only handles the first example above;\n+      // we can add support for the second example by checking if parent is a CALL.]\n+      if (parent != null) {\n+        // Go up the tree looking for anything that stops function traversal,\n+        // but remembers any prototype property access along the way\n+        boolean isPrototypeProperty = false;\n+        while (parent != null) {\n+          if (NodeUtil.isGet(parent)) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent != null && grandparent.getType() == Token.CALL &&\n+                grandparent.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n+              Node inheritedCtor = grandparent.getSecondChild();\n+              isPrototypeProperty |= NodeUtil.isPrototypePropertyOf(parent, inheritedCtor);\n+              parent = grandparent.getParent();\n+            } else {\n+              Node getTarget = parent.getFirstChild();\n+              if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+                isPrototypeProperty = true;\n+                break;\n+              }\n+              parent = parent.getParent();\n+            }\n+          } else if (parent.getType() == Token.ASSIGN) {\n+            Node lhs = parent.getFirstChild();\n+            isPrototypeProperty |= (lhs.getType() == Token.GETPROP &&\n+                                    lhs.getLastChild().getString().equals(\"prototype\"));\n+            parent = parent.getParent();\n+          } else if (parent.getType() == Token.FUNCTION) {\n+            parent = parent.getParent();\n+          } else {\n+            break;\n+          }\n+        }\n+        if (isPrototypeProperty) {\n+          return false;\n+        }\n+      }\n+ >>> [ INFILL ] <<<   \n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}