{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    return toFormatterRecursive(elementPairs, notPrinter, notParser);\n}\n\nprivate static PeriodFormatter toFormatterRecursive(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (elementPairs.isEmpty()) {\n        if (notPrinter) {\n            return new PeriodFormatter(null, ISOPeriodFormat.standard().getParser());\n        } else if (notParser) {\n            return new PeriodFormatter(ISOPeriodFormat.standard().getPrinter(), null);\n        } else {\n            return new PeriodFormatter(ISOPeriodFormat.standard().getPrinter(), ISOPeriodFormat.standard().getParser());\n        }\n    }\n    if (elementPairs.size() == 1) {\n        throw new IllegalArgumentException(\"Odd number of elements passed in array\");\n    }\n    Separator sep = null;\n    int firstIdx = 0;\n    if (elementPairs.get(0) instanceof Separator) {\n        sep = (Separator) elementPairs.get(0);\n        firstIdx++;\n    }\n    Object[] comp = createComposite(elementPairs.subList(firstIdx, elementPairs.size()));\n    if (sep != null) {\n        PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    } else {\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f8cfbbd6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,38 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    return toFormatterRecursive(elementPairs, notPrinter, notParser);\n+}\n+\n+private static PeriodFormatter toFormatterRecursive(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (elementPairs.isEmpty()) {\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, ISOPeriodFormat.standard().getParser());\n+        } else if (notParser) {\n+            return new PeriodFormatter(ISOPeriodFormat.standard().getPrinter(), null);\n+        } else {\n+            return new PeriodFormatter(ISOPeriodFormat.standard().getPrinter(), ISOPeriodFormat.standard().getParser());\n+        }\n+    }\n+    if (elementPairs.size() == 1) {\n+        throw new IllegalArgumentException(\"Odd number of elements passed in array\");\n+    }\n+    Separator sep = null;\n+    int firstIdx = 0;\n+    if (elementPairs.get(0) instanceof Separator) {\n+        sep = (Separator) elementPairs.get(0);\n+        firstIdx++;\n+    }\n+    Object[] comp = createComposite(elementPairs.subList(firstIdx, elementPairs.size()));\n+    if (sep != null) {\n+        PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    } else {\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -811,6 +831,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}