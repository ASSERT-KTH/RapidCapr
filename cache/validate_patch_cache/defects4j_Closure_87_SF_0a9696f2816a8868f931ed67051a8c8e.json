{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Check if the expression node has a return statement in it\n        if (maybeExpr.getType() == Token.RETURN) {\n          Node expr = maybeExpr.getFirstChild();\n          // If the expression is not null and is not a function declaration or function call,\n          // then it's safe to fold the expression\n          if (expr != null && !NodeUtil.isFunctionDeclaration(expr) && !NodeUtil.isCallOrNew(expr)) {\n            return true;\n          }\n        } else {\n          return NodeUtil.isExpressionNode(maybeExpr);\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1f1e405b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,17 +520,17 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n+        // Check if the expression node has a return statement in it\n+        if (maybeExpr.getType() == Token.RETURN) {\n+          Node expr = maybeExpr.getFirstChild();\n+          // If the expression is not null and is not a function declaration or function call,\n+          // then it's safe to fold the expression\n+          if (expr != null && !NodeUtil.isFunctionDeclaration(expr) && !NodeUtil.isCallOrNew(expr)) {\n+            return true;\n+          }\n+        } else {\n           return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}