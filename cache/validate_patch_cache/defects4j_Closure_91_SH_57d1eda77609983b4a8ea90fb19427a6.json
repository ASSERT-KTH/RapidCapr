{
    "patch": "      Node fnParent = n.getParent();\n      if (NodeUtil.isGet(fnParent)) {\n        Node protoChild = fnParent.getLastChild();\n        if (NodeUtil.isGet(protoChild) && \"prototype\".equals(protoChild.getLastChild().getString())) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e947970f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,11 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnParent = n.getParent();\n+      if (NodeUtil.isGet(fnParent)) {\n+        Node protoChild = fnParent.getLastChild();\n+        if (NodeUtil.isGet(protoChild) && \"prototype\".equals(protoChild.getLastChild().getString())) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}