{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.CALL &&\n          (grandparent.getFirstChild().getType() == Token.GETPROP &&\n           (grandparent.getFirstChild().getLastChild().getString().equals(\"bind\") ||\n            grandparent.getFirstChild().getLastChild().getString().equals(\"apply\") ||\n            grandparent.getFirstChild().getLastChild().getString().equals(\"call\")) ||\n           grandparent.getFirstChild().getType() == Token.NAME &&\n           (grandparent.getFirstChild().getString().equals(\"bind\") ||\n            grandparent.getFirstChild().getString().equals(\"apply\") ||\n            grandparent.getFirstChild().getString().equals(\"call\")))) {\n        return false;\n      }\n      Node fnNameNode = n.getFirstChild();\n      if (fnNameNode.getType() == Token.NAME && assignLhsChild == fnNameNode && fnNameNode.getNext() == null) {\n        // Traverse a function expression even if it is part of an assignment statement\n        // And we are on the left hand side and there is no RHS of ASSIGN just this function.\n        return true;\n      }\n      if (NodeUtil.isPrototypeProperty(n) ||\n          (NodeUtil.isGet(parent) &&\n           (parent.getFirstChild().getLastChild().getString().equals(\"prototype\") ||\n            isNamedPrototypeAssignNode(parent))) ||\n          (grandparent != null && grandparent.getType() == Token.ASSIGN &&\n           NodeUtil.isGet(grandparent.getFirstChild()) &&\n           grandparent.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n           NodeUtil.isPrototypeProperty(n))) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9b3d5b5b 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,34 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.CALL &&\n+          (grandparent.getFirstChild().getType() == Token.GETPROP &&\n+           (grandparent.getFirstChild().getLastChild().getString().equals(\"bind\") ||\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"apply\") ||\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"call\")) ||\n+           grandparent.getFirstChild().getType() == Token.NAME &&\n+           (grandparent.getFirstChild().getString().equals(\"bind\") ||\n+            grandparent.getFirstChild().getString().equals(\"apply\") ||\n+            grandparent.getFirstChild().getString().equals(\"call\")))) {\n+        return false;\n+      }\n+      Node fnNameNode = n.getFirstChild();\n+      if (fnNameNode.getType() == Token.NAME && assignLhsChild == fnNameNode && fnNameNode.getNext() == null) {\n+        // Traverse a function expression even if it is part of an assignment statement\n+        // And we are on the left hand side and there is no RHS of ASSIGN just this function.\n+        return true;\n+      }\n+      if (NodeUtil.isPrototypeProperty(n) ||\n+          (NodeUtil.isGet(parent) &&\n+           (parent.getFirstChild().getLastChild().getString().equals(\"prototype\") ||\n+            isNamedPrototypeAssignNode(parent))) ||\n+          (grandparent != null && grandparent.getType() == Token.ASSIGN &&\n+           NodeUtil.isGet(grandparent.getFirstChild()) &&\n+           grandparent.getFirstChild().getLastChild().getString().equals(\"prototype\") &&\n+           NodeUtil.isPrototypeProperty(n))) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}