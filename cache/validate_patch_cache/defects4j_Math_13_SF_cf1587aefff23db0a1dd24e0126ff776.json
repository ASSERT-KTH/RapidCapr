{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int BLOCK_SIZE = 100; // block size\n    final int n = m.getRowDimension();\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i += BLOCK_SIZE) {\n        int blockSize = Math.min(BLOCK_SIZE, n - i);\n        RealMatrix block = m.getSubMatrix(i, i + blockSize - 1, i, i + blockSize - 1);\n        RealMatrix sqrtBlock = block.copy();\n        EigenDecomposition dec = new EigenDecomposition(block);\n        RealMatrix D = dec.getD();\n        RealMatrix V = dec.getV();\n        for (int j = 0; j < blockSize; j++) {\n            double sqrtD = Math.sqrt(D.getEntry(j, j));\n            for (int k = 0; k < blockSize; k++) {\n                sqrtBlock.setEntry(j, k, V.getEntry(j, k) * sqrtD);\n            }\n        }\n        sqrtM.setSubMatrix(sqrtBlock.getData(), i, i);\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2a05467cb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int BLOCK_SIZE = 100; // block size\n+    final int n = m.getRowDimension();\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i += BLOCK_SIZE) {\n+        int blockSize = Math.min(BLOCK_SIZE, n - i);\n+        RealMatrix block = m.getSubMatrix(i, i + blockSize - 1, i, i + blockSize - 1);\n+        RealMatrix sqrtBlock = block.copy();\n+        EigenDecomposition dec = new EigenDecomposition(block);\n+        RealMatrix D = dec.getD();\n+        RealMatrix V = dec.getV();\n+        for (int j = 0; j < blockSize; j++) {\n+            double sqrtD = Math.sqrt(D.getEntry(j, j));\n+            for (int k = 0; k < blockSize; k++) {\n+                sqrtBlock.setEntry(j, k, V.getEntry(j, k) * sqrtD);\n+            }\n+        }\n+        sqrtM.setSubMatrix(sqrtBlock.getData(), i, i);\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}