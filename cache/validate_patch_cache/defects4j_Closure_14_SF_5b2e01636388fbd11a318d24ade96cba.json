{
    "patch": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n\n    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // Skip over empty blocks\n    while (parent.isBlock() && !NodeUtil.hasInformationalStatement(parent)) {\n      node = parent;\n      parent = parent.getParent();\n    }\n\n    switch (parent.getType()) {\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // If there is a next sibling, return its first statement, otherwise go to the parent follow node\n        Node nextSibling = parent.getNext();\n        if (nextSibling != null) {\n          return getNextStatement(nextSibling, cfa);\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.FOR:\n        // Check what kind of for statement we're in\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        }\n        return parent.getFirstChild().getNext().getNext();\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        }\n        // CATCH block.\n        if (NodeUtil.getCatchBlock(parent) == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        }\n        // If we are coming out of the FINALLY block...\n        if (parent.getLastChild() == node) {\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Find the next sibling, but skip over labels\n    Node sibling = node.getNext();\n    while (sibling != null && (sibling.isLabel() || sibling.isFunction())) {\n      sibling = sibling.getNext();\n    }\n\n    // Check if the current node may complete normally\n    boolean mayCompleteNormally = ValidityAnalyzer.mayCompleteNormally(node);\n\n    // If there are no more siblings and the current node may not complete normally, control is transferred up the AST\n    if (sibling == null && !mayCompleteNormally) {\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n\n    // If there are no more siblings but the current node may complete normally, control is transferred to the parent follow node\n    if (sibling == null && mayCompleteNormally) {\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n\n    // If there is a next sibling, return its first non-empty statement\n    return getNextStatement(sibling, cfa);\n  }\n\n  private static Node getNextStatement(Node node, ControlFlowAnalysis cfa) {\n    Node statement = node;\n    while (statement != null && (statement.isLabel() || NodeUtil.getInvocation(statement) != null)) {\n      if (statement.isLabel()) {\n        statement = NodeUtil.getFunctionBody(statement.getFirstChild());\n      } else {\n        statement = statement.getFirstChild();\n      }\n    }\n    if (statement == null && node.getParent() != null) {\n      // If there are no more statements until the end of the script, return the parent follow node\n      statement = computeFollowNode(node, node.getParent(), cfa);\n    }\n    return statement;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..cf727583 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,59 +689,36 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+\n+    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {\n       return null;\n     }\n \n-    // If we are just before a IF/WHILE/DO/FOR:\n+    // Skip over empty blocks\n+    while (parent.isBlock() && !NodeUtil.hasInformationalStatement(parent)) {\n+      node = parent;\n+      parent = parent.getParent();\n+    }\n+\n     switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n       case Token.IF:\n         return computeFollowNode(fromNode, parent, cfa);\n       case Token.CASE:\n       case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n-          } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n-          }\n-        } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n+        // If there is a next sibling, return its first statement, otherwise go to the parent follow node\n+        Node nextSibling = parent.getNext();\n+        if (nextSibling != null) {\n+          return getNextStatement(nextSibling, cfa);\n         }\n-        break;\n+        return computeFollowNode(fromNode, parent, cfa);\n       case Token.FOR:\n+        // Check what kind of for statement we're in\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n-        } else {\n-          return parent.getFirstChild().getNext().getNext();\n         }\n+        return parent.getFirstChild().getNext().getNext();\n       case Token.WHILE:\n       case Token.DO:\n         return parent;\n@@ -753,15 +730,17 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           } else { // and have no FINALLY.\n             return computeFollowNode(fromNode, parent, cfa);\n           }\n+        }\n         // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n+        if (NodeUtil.getCatchBlock(parent) == node) {\n           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n             return computeFallThrough(node.getNext());\n           } else {\n             return computeFollowNode(fromNode, parent, cfa);\n           }\n+        }\n         // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n+        if (parent.getLastChild() == node) {\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n@@ -771,21 +750,43 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         }\n     }\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n+    // Find the next sibling, but skip over labels\n+    Node sibling = node.getNext();\n+    while (sibling != null && (sibling.isLabel() || sibling.isFunction())) {\n+      sibling = sibling.getNext();\n+    }\n+\n+    // Check if the current node may complete normally\n+    boolean mayCompleteNormally = ValidityAnalyzer.mayCompleteNormally(node);\n \n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n+    // If there are no more siblings and the current node may not complete normally, control is transferred up the AST\n+    if (sibling == null && !mayCompleteNormally) {\n+      return computeFollowNode(fromNode, parent, cfa);\n     }\n \n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n-    } else {\n-      // If there are no more siblings, control is transferred up the AST.\n+    // If there are no more siblings but the current node may complete normally, control is transferred to the parent follow node\n+    if (sibling == null && mayCompleteNormally) {\n       return computeFollowNode(fromNode, parent, cfa);\n     }\n+\n+    // If there is a next sibling, return its first non-empty statement\n+    return getNextStatement(sibling, cfa);\n+  }\n+\n+  private static Node getNextStatement(Node node, ControlFlowAnalysis cfa) {\n+    Node statement = node;\n+    while (statement != null && (statement.isLabel() || NodeUtil.getInvocation(statement) != null)) {\n+      if (statement.isLabel()) {\n+        statement = NodeUtil.getFunctionBody(statement.getFirstChild());\n+      } else {\n+        statement = statement.getFirstChild();\n+      }\n+    }\n+    if (statement == null && node.getParent() != null) {\n+      // If there are no more statements until the end of the script, return the parent follow node\n+      statement = computeFollowNode(node, node.getParent(), cfa);\n+    }\n+    return statement;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}