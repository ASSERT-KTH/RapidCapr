{
    "patch": "Node first = NodeUtil.skipNonCodeFirst(first);\n\nif (first != null) {\n  if (!NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n\n  // Keep track of the context in which eval is called\n  if (NodeUtil.isName(first) && \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..af113ef1 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,18 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+Node first = NodeUtil.skipNonCodeFirst(first);\n+\n+if (first != null) {\n+  if (!NodeUtil.isGet(first)) {\n+    n.putBooleanProp(Node.FREE_CALL, true);\n+  }\n+\n+  // Keep track of the context in which eval is called\n+  if (NodeUtil.isName(first) && \"eval\".equals(first.getString())) {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: variable first is already defined in method annotateCalls(Node)",
    "test_result": "ERROR"
}