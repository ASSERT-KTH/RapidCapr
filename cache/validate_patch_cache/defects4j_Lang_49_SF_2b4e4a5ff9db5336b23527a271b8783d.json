{
    "patch": "public Fraction reduce() {\n    int gcd = gcd(Math.abs(numerator), denominator);\n    if (gcd == 0) {\n        // special case when numerator is 0\n        return Fraction.ZERO;\n    } else if (gcd == 1) {\n        // fraction is already reduced\n        return this;\n    } else {\n        // reduce the fraction\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n}\n\nprivate int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..1ace39dc 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,27 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int gcd = gcd(Math.abs(numerator), denominator);\n+    if (gcd == 0) {\n+        // special case when numerator is 0\n+        return Fraction.ZERO;\n+    } else if (gcd == 1) {\n+        // fraction is already reduced\n+        return this;\n+    } else {\n+        // reduce the fraction\n+        return new Fraction(numerator / gcd, denominator / gcd);\n+    }\n+}\n+\n+private int gcd(int a, int b) {\n+    if (b == 0) {\n+        return a;\n+    } else {\n+        return gcd(b, a % b);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<0/1> was not:<0/1>",
    "test_result": "FAIL"
}