{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.isName()) {\n          // Skip variables that are not named values.\n          continue;\n        }\n        Node parent = n.getParent();\n        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          if (aliasVar == null || aliasVar.getInitialValue() == null) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            continue;\n          }\n          aliases.put(name, aliasVar);\n\n          String qualifiedName =\n              aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else if (!parent.isFunction() || !v.isArguments()) {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        } else {\n          Node grandParent = parent.getParent();\n          if (!grandParent.isCall() || !grandParent.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          } else {\n            Node functionBody = parent.getLastChild();\n            if (functionBody.getChildCount() != 1 || functionBody.getFirstChild().isName()) {\n              report(t, n, GOOG_SCOPE_MALFORMED_SCOPE, n.getString());\n            } else {\n              Node lastChild = functionBody.getLastChild();\n              if (lastChild.isReturn()) {\n                lastChild = lastChild.getFirstChild();\n              }\n              if (lastChild.isExprResult() && lastChild.getFirstChild().isCall() && lastChild.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.module\")) {\n                report(t, n, GOOG_SCOPE_MODULE_EXPORTS_USED, n.getString());\n              }\n            }\n          }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..feb33b3c 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,50 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null || !n.isName()) {\n+          // Skip variables that are not named values.\n+          continue;\n+        }\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n+          if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            continue;\n+          }\n           aliases.put(name, aliasVar);\n \n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n+        } else if (!parent.isFunction() || !v.isArguments()) {\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        } else {\n+          Node grandParent = parent.getParent();\n+          if (!grandParent.isCall() || !grandParent.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          } else {\n+            Node functionBody = parent.getLastChild();\n+            if (functionBody.getChildCount() != 1 || functionBody.getFirstChild().isName()) {\n+              report(t, n, GOOG_SCOPE_MALFORMED_SCOPE, n.getString());\n+            } else {\n+              Node lastChild = functionBody.getLastChild();\n+              if (lastChild.isReturn()) {\n+                lastChild = lastChild.getFirstChild();\n+              }\n+              if (lastChild.isExprResult() && lastChild.getFirstChild().isCall() && lastChild.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.module\")) {\n+                report(t, n, GOOG_SCOPE_MODULE_EXPORTS_USED, n.getString());\n+              }\n+            }\n+          }\n         }\n-        }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}