{
    "patch": "attachLiteralTypes(n);\nswitch (n.getToken()) {\n  case FUNCTION:\n    if (NodeUtil.isFunctionExpression(n)) {\n      defineDeclaredFunction(n, parent);\n      break;\n    }\n    if (parent.getToken() == NAME) {\n      break;\n    }\n    defineDeclaredFunction(n, parent);\n    break;\n  case LP:\n    if (parent.getToken() == CALL) {\n      handleFunctionInputs(parent);\n    }\n    break;\n  case CATCH:\n    defineCatch(n, parent);\n    break;\n  case VAR:\n    defineVar(n, parent);\n    break;\n  case NAME:\n    if (n.getFirstChild() == null) {\n      defineVar(n, parent);\n    }\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e363d720 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+switch (n.getToken()) {\n+  case FUNCTION:\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    }\n+    if (parent.getToken() == NAME) {\n+      break;\n+    }\n+    defineDeclaredFunction(n, parent);\n+    break;\n+  case LP:\n+    if (parent.getToken() == CALL) {\n+      handleFunctionInputs(parent);\n+    }\n+    break;\n+  case CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case VAR:\n+    defineVar(n, parent);\n+    break;\n+  case NAME:\n+    if (n.getFirstChild() == null) {\n+      defineVar(n, parent);\n+    }\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}