{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double vn1 = v1.getNorm();\n    double vn2 = v2.getNorm();\n\n    if (vn1 == 0 || vn2 == 0) {\n        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_CROSS_PRODUCT,\n                                               vn1, vn2);\n    }\n\n    final double normProduct = vn1 * vn2;\n\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    final double dot = v1x * v2x + v1y * v2y + v1z * v2z;\n\n    final double angle;\n    if (dot == -normProduct) {\n        // vectors pointing exactly in opposite directions\n        angle = FastMath.PI;\n    } else if (dot == normProduct) {\n        // vectors pointing exactly in the same direction\n        // (this is not a numerically robust test)\n        angle = 0.0;\n    } else {\n        // safe computation of the complementary angle\n        angle = FastMath.acos(dot / normProduct);\n    }\n\n    final double rx = v1y * v2z - v1z * v2y;\n    final double ry = v1z * v2x - v1x * v2z;\n    final double rz = v1x * v2y - v1y * v2x;\n\n    final double invNorm = 1.0 / FastMath.sqrt(rx * rx + ry * ry + rz * rz);\n\n    Vector3D result = new Vector3D(rx * invNorm, ry * invNorm, rz * invNorm);\n    if (Double.isNaN(result.getX()) || Double.isNaN(result.getY()) || Double.isNaN(result.getZ())) {\n        throw new MathIllegalStateException(LocalizedFormats.NAN_CONTAGION);\n    }\n    return result;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..563c025e3 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,53 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    double vn1 = v1.getNorm();\n+    double vn2 = v2.getNorm();\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    if (vn1 == 0 || vn2 == 0) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_CROSS_PRODUCT,\n+                                               vn1, vn2);\n+    }\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double normProduct = vn1 * vn2;\n+\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+\n+    final double dot = v1x * v2x + v1y * v2y + v1z * v2z;\n+\n+    final double angle;\n+    if (dot == -normProduct) {\n+        // vectors pointing exactly in opposite directions\n+        angle = FastMath.PI;\n+    } else if (dot == normProduct) {\n+        // vectors pointing exactly in the same direction\n+        // (this is not a numerically robust test)\n+        angle = 0.0;\n+    } else {\n+        // safe computation of the complementary angle\n+        angle = FastMath.acos(dot / normProduct);\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rx = v1y * v2z - v1z * v2y;\n+    final double ry = v1z * v2x - v1x * v2z;\n+    final double rz = v1x * v2y - v1y * v2x;\n \n+    final double invNorm = 1.0 / FastMath.sqrt(rx * rx + ry * ry + rz * rz);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    Vector3D result = new Vector3D(rx * invNorm, ry * invNorm, rz * invNorm);\n+    if (Double.isNaN(result.getX()) || Double.isNaN(result.getY()) || Double.isNaN(result.getZ())) {\n+        throw new MathIllegalStateException(LocalizedFormats.NAN_CONTAGION);\n+    }\n+    return result;\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}