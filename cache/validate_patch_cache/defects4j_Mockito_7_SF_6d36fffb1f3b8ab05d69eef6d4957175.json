{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        return;\n    }\n\n    if (actualTypeArg instanceof WildcardType) {\n        ...\n    } else if (actualTypeArg instanceof TypeVariable) {\n        ...\n    } else {\n        registerTypeVariablesOn(actualTypeArg);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3b734d7e6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        return;\n+    }\n+\n+    if (actualTypeArg instanceof WildcardType) {\n+        ...\n+    } else if (actualTypeArg instanceof TypeVariable) {\n+        ...\n+    } else {\n+        registerTypeVariablesOn(actualTypeArg);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}