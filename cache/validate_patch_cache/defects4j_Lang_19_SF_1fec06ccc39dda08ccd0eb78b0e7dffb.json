{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    StringBuilder entity = new StringBuilder();\n    final int seqEnd = input.length();\n    int count = 0;\n\n    while (index < seqEnd && input.charAt(index) == '&') {\n        int semiColonIndex = -1;\n        boolean hex = false;\n        entity.append('&');\n\n        // Look for the end of the entity\n        for (int i = index + 1; i < seqEnd; i++) {\n            char c = input.charAt(i);\n            entity.append(c);\n\n            if (c == ';') {\n                semiColonIndex = i;\n                break;\n            }\n\n            if (hex) {\n                if (!Character.isDigit(c) && !(c >= 'A' && c <= 'F') && !(c >= 'a' && c <= 'f')) {\n                    break;\n                }\n            } else {\n                if (!Character.isDigit(c)) {\n                    if (c == 'x' || c == 'X') {\n                        hex = true;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n\n        // Handle unfinished or invalid entities\n        if (semiColonIndex == -1) {\n            out.write(entity.toString());\n            return entity.length();\n        }\n\n        int entityLength = semiColonIndex - index + 1;\n\n        String entityText = entity.toString();\n        entity.setLength(0);\n\n        int entityValue;\n\n        try {\n            if (hex) {\n                entityValue = Integer.parseInt(entityText.substring(3, entityText.length() - 1), 16);\n            } else {\n                entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            out.write(entityText);\n            count += entityLength;\n            index += entityLength;\n            continue;\n        }\n\n        // Pass through non-characters (null character, control characters, etc.)\n        if (entityValue < 32 || (entityValue >= 0x7f && entityValue <= 0x9f) || entityValue == 0xffff) {\n            out.write(entityText);\n            count += entityLength;\n            index += entityLength;\n            continue;\n        }\n\n        // Pass through high Unicode values unchanged\n        if (entityValue >= 0x10000 && entityValue <= 0x10ffff) {\n            out.write(entityText);\n            count += entityLength;\n            index += entityLength;\n            continue;\n        }\n\n        // Write the character to the output\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        if (chrs.length > 1) {\n            out.write(chrs[1]);\n        }\n\n        count += chrs.length;\n        index += entityLength;\n    }\n\n    if (entity.length() > 0) {\n        out.write(entity.toString());\n        count += entity.length();\n    } else if (index < seqEnd) {\n        out.write(input.charAt(index));\n        count++;\n    }\n\n    return count;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..53745382 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,102 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    StringBuilder entity = new StringBuilder();\n+    final int seqEnd = input.length();\n+    int count = 0;\n+\n+    while (index < seqEnd && input.charAt(index) == '&') {\n+        int semiColonIndex = -1;\n+        boolean hex = false;\n+        entity.append('&');\n+\n+        // Look for the end of the entity\n+        for (int i = index + 1; i < seqEnd; i++) {\n+            char c = input.charAt(i);\n+            entity.append(c);\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+            if (c == ';') {\n+                semiColonIndex = i;\n+                break;\n             }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+            if (hex) {\n+                if (!Character.isDigit(c) && !(c >= 'A' && c <= 'F') && !(c >= 'a' && c <= 'f')) {\n+                    break;\n+                }\n+            } else {\n+                if (!Character.isDigit(c)) {\n+                    if (c == 'x' || c == 'X') {\n+                        hex = true;\n+                    } else {\n+                        break;\n+                    }\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n             }\n+        }\n+\n+        // Handle unfinished or invalid entities\n+        if (semiColonIndex == -1) {\n+            out.write(entity.toString());\n+            return entity.length();\n+        }\n+\n+        int entityLength = semiColonIndex - index + 1;\n+\n+        String entityText = entity.toString();\n+        entity.setLength(0);\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+\n+        try {\n+            if (hex) {\n+                entityValue = Integer.parseInt(entityText.substring(3, entityText.length() - 1), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1), 10);\n             }\n+        } catch (NumberFormatException nfe) {\n+            out.write(entityText);\n+            count += entityLength;\n+            index += entityLength;\n+            continue;\n+        }\n \n+        // Pass through non-characters (null character, control characters, etc.)\n+        if (entityValue < 32 || (entityValue >= 0x7f && entityValue <= 0x9f) || entityValue == 0xffff) {\n+            out.write(entityText);\n+            count += entityLength;\n+            index += entityLength;\n+            continue;\n+        }\n+\n+        // Pass through high Unicode values unchanged\n+        if (entityValue >= 0x10000 && entityValue <= 0x10ffff) {\n+            out.write(entityText);\n+            count += entityLength;\n+            index += entityLength;\n+            continue;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        // Write the character to the output\n+        char[] chrs = Character.toChars(entityValue);\n+        out.write(chrs[0]);\n+        if (chrs.length > 1) {\n+            out.write(chrs[1]);\n         }\n-        return 0;\n+\n+        count += chrs.length;\n+        index += entityLength;\n+    }\n+\n+    if (entity.length() > 0) {\n+        out.write(entity.toString());\n+        count += entity.length();\n+    } else if (index < seqEnd) {\n+        out.write(input.charAt(index));\n+        count++;\n     }\n+\n+    return count;\n+}\n }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: -1",
    "test_result": "FAIL"
}