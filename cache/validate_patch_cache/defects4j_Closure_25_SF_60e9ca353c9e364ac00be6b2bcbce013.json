{
    "patch": "private FlowScope traverseNew(Node n, FlowScope inputScope) {\n  Node constructor = n.getFirstChild();\n  if (constructor.getJSType() == null || constructor.getJSType().isUnknownType()) {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    return traverseChildren(n, inputScope);\n  }\n  constructor.getJSType().restrictByNotNullOrUndefined();\n  JSType instanceType = null;\n  if (constructor.getJSType().isObject()) {\n    instanceType = constructor.getJSType();\n  } else if (constructor.getJSType() instanceof FunctionType) {\n    FunctionType functionType = constructor.getJSType().toMaybeFunctionType();\n    if (functionType != null) {\n      instanceType = functionType.getInstanceType();\n    }\n  }\n  if (instanceType == null) {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n  } else {\n    n.setJSType(instanceType);\n    traverseChildren(n, inputScope);\n  }\n  return inputScope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..69dce397 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,30 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+private FlowScope traverseNew(Node n, FlowScope inputScope) {\n+  Node constructor = n.getFirstChild();\n+  if (constructor.getJSType() == null || constructor.getJSType().isUnknownType()) {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    return traverseChildren(n, inputScope);\n+  }\n+  constructor.getJSType().restrictByNotNullOrUndefined();\n+  JSType instanceType = null;\n+  if (constructor.getJSType().isObject()) {\n+    instanceType = constructor.getJSType();\n+  } else if (constructor.getJSType() instanceof FunctionType) {\n+    FunctionType functionType = constructor.getJSType().toMaybeFunctionType();\n+    if (functionType != null) {\n+      instanceType = functionType.getInstanceType();\n     }\n-    return scope;\n   }\n+  if (instanceType == null) {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n+  } else {\n+    n.setJSType(instanceType);\n+    traverseChildren(n, inputScope);\n+  }\n+  return inputScope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}