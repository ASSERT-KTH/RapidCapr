{
    "patch": "    public Dfp multiply(final int x) {\n        Dfp result = newInstance(getField());\n        getField().setIEEEFlagsBits(0);\n        for(int i = 31; i >= 0; i--){\n            result = result.add(result);\n            if ((x >>> i & 1) != 0) {\n                result = result.add(this);\n            }\n        }\n        if (getField().getIEEEFlagsBits(DfpField.FLAG_INVALID)) {\n            result = newInstance(getField(), Dfp.QNAN);\n            getField().clearIEEEFlagsBits(DfpField.FLAG_INVALID);\n        }\n        return dotrap(DfpField.FLAG_INVALID, \"multiply\", result, result);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..2e19a3a2e 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,19 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        Dfp result = newInstance(getField());\n+        getField().setIEEEFlagsBits(0);\n+        for(int i = 31; i >= 0; i--){\n+            result = result.add(result);\n+            if ((x >>> i & 1) != 0) {\n+                result = result.add(this);\n+            }\n+        }\n+        if (getField().getIEEEFlagsBits(DfpField.FLAG_INVALID)) {\n+            result = newInstance(getField(), Dfp.QNAN);\n+            getField().clearIEEEFlagsBits(DfpField.FLAG_INVALID);\n+        }\n+        return dotrap(DfpField.FLAG_INVALID, \"multiply\", result, result);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: no suitable method found for newInstance(DfpField)",
    "test_result": "ERROR"
}