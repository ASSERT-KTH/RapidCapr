{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (parameters.hasNext()) {\n        // There are more parameters than arguments, so the remaining parameters are optional\n        while (parameters.hasNext()) {\n            parameter = parameters.next();\n            if (!parameter.isOptionalArg()) {\n                reportParameterMismatch(t, call, ordinal + 1, parameter, null);\n            }\n            ordinal++;\n        }\n    } else if (arguments.hasNext()) {\n        // There are more arguments than parameters, so the remaining arguments may be var_args\n        if (functionType.isVarArgs()) {\n            parameter = functionType.getVarArgsParam();\n            while (arguments.hasNext()) {\n                argument = arguments.next();\n                ordinal++;\n                validator.expectArgumentMatchesParameter(\n                    t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n            }\n        } else {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        }\n    } else if (minArgs > numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n\n  private void reportParameterMismatch(NodeTraversal t, Node call, int index, Node expected,\n      Node actual) {\n      validator.expectArgumentMatchesParameter(t, actual, getJSType(actual),\n          getJSType(expected), call, index);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..66dd5ef2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,30 +1405,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (arguments.hasNext() && parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (parameters.hasNext()) {\n+        // There are more parameters than arguments, so the remaining parameters are optional\n+        while (parameters.hasNext()) {\n+            parameter = parameters.next();\n+            if (!parameter.isOptionalArg()) {\n+                reportParameterMismatch(t, call, ordinal + 1, parameter, null);\n+            }\n+            ordinal++;\n+        }\n+    } else if (arguments.hasNext()) {\n+        // There are more arguments than parameters, so the remaining arguments may be var_args\n+        if (functionType.isVarArgs()) {\n+            parameter = functionType.getVarArgsParam();\n+            while (arguments.hasNext()) {\n+                argument = arguments.next();\n+                ordinal++;\n+                validator.expectArgumentMatchesParameter(\n+                    t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+            }\n+        } else {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(minArgs),\n+                maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        }\n+    } else if (minArgs > numArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }\n \n+  private void reportParameterMismatch(NodeTraversal t, Node call, int index, Node expected,\n+      Node actual) {\n+      validator.expectArgumentMatchesParameter(t, actual, getJSType(actual),\n+          getJSType(expected), call, index);\n+  }\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}