{
    "patch": "if (nameNode.isQualifiedName()) {\n    Node targetNode = nameNode.getFirstChild();\n    while (targetNode.getType() == Token.GETPROP) {\n        targetNode = targetNode.getFirstChild();\n    }\n    if (targetNode.getType() == Token.NAME) {\n        String topLevelName = targetNode.getString();\n        if (BUILTIN_TOP_LEVEL_OBJECTS_WITHOUT_SIDEEFFECTS.contains(topLevelName)) {\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..c9040251 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,18 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+if (nameNode.isQualifiedName()) {\n+    Node targetNode = nameNode.getFirstChild();\n+    while (targetNode.getType() == Token.GETPROP) {\n+        targetNode = targetNode.getFirstChild();\n+    }\n+    if (targetNode.getType() == Token.NAME) {\n+        String topLevelName = targetNode.getString();\n+        if (BUILTIN_TOP_LEVEL_OBJECTS_WITHOUT_SIDEEFFECTS.contains(topLevelName)) {\n+            return false;\n+        }\n+    }\n+}\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}