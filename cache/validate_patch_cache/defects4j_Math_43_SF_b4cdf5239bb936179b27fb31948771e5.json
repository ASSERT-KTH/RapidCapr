{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    double newMean = 0;\n    double delta = 0;\n    double newVariance = 0;\n    double oldMean = 0;\n\n    // If mean, variance or geomean have been overridden, need to increment these\n    if (meanImpl instanceof Mean) {\n        meanImpl.increment(value);\n        oldMean = meanImpl.getResult();\n        newMean = oldMean + (value - oldMean) / (n + 1.0);\n        delta = value - oldMean;\n    } else {\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n        meanImpl = ((AbstractStorelessUnivariateStatistic) meanImpl).copy();\n        oldMean = meanImpl.getResult();\n        newMean = oldMean + (value - oldMean) / (n + 1.0);\n        delta = value - oldMean;\n    }\n\n    if (varianceImpl instanceof Variance) {\n        varianceImpl.increment(value);\n        newVariance = varianceImpl.getResult();\n    } else {\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n        varianceImpl = ((AbstractStorelessUnivariateStatistic) varianceImpl).copy();\n        newVariance = varianceImpl.getResult();\n    }\n\n    maxImpl.increment(value);\n    minImpl.increment(value);\n    secondMoment.increment(value);\n    sumLogImpl.increment(value);\n\n    if (n == 0) {\n        newVariance = 0.0;\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..a2dbbed01 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,53 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n-    }\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    double newMean = 0;\n+    double delta = 0;\n+    double newVariance = 0;\n+    double oldMean = 0;\n+\n+    // If mean, variance or geomean have been overridden, need to increment these\n+    if (meanImpl instanceof Mean) {\n+        meanImpl.increment(value);\n+        oldMean = meanImpl.getResult();\n+        newMean = oldMean + (value - oldMean) / (n + 1.0);\n+        delta = value - oldMean;\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+        meanImpl = ((AbstractStorelessUnivariateStatistic) meanImpl).copy();\n+        oldMean = meanImpl.getResult();\n+        newMean = oldMean + (value - oldMean) / (n + 1.0);\n+        delta = value - oldMean;\n+    }\n+\n+    if (varianceImpl instanceof Variance) {\n+        varianceImpl.increment(value);\n+        newVariance = varianceImpl.getResult();\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+        varianceImpl = ((AbstractStorelessUnivariateStatistic) varianceImpl).copy();\n+        newVariance = varianceImpl.getResult();\n+    }\n+\n+    maxImpl.increment(value);\n+    minImpl.increment(value);\n+    secondMoment.increment(value);\n+    sumLogImpl.increment(value);\n+\n+    if (n == 0) {\n+        newVariance = 0.0;\n+    }\n+\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: PiDigits: std expected:<2.86733906028871> but was:<2.8671956754124883>",
    "test_result": "FAIL"
}