{
    "patch": "        if (stepSize >= FastMath.abs(t - stepStart)) {\n            if (t > equations.getTime()) {\n                stepSize = FastMath.nextDown(t - stepStart);\n            } else {\n                stepSize = FastMath.nextUp(t - stepStart);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..9c88c1578 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,13 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+        if (stepSize >= FastMath.abs(t - stepStart)) {\n+            if (t > equations.getTime()) {\n+                stepSize = FastMath.nextDown(t - stepStart);\n+            } else {\n+                stepSize = FastMath.nextUp(t - stepStart);\n+            }\n+        }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}