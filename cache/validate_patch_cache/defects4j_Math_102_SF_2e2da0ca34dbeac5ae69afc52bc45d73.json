{
    "patch": "import org.apache.commons.math3.util.MathUtils;\n\npublic class ChiSquareCalculator {\n\n    public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            if (expected[i] == 0.0 && observed[i] == 0) {\n                continue; // Skip terms with no contribution to the chi-square statistic\n            }\n            if (expected[i] == 0.0) {\n                throw new IllegalArgumentException(\"expected value of count cannot be zero\");\n            }\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        // Check for excessive rounding error from rounding expected values to integers\n        if (sumSq > 1e-10 * MathUtils.sum(expected)) {\n            throw new IllegalArgumentException(\"excessive rounding error in chi square calculation\");\n        }\n        return sumSq;\n    }\n\n    private boolean isPositive(double[] values) {\n        for (double value : values) {\n            if (value <= 0.0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isNonNegative(long[] values) {\n        for (long value : values) {\n            if (value < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..49cb48b72 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,55 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class ChiSquareCalculator {\n+\n+    public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n         if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+            throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n         }\n         if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+            throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n         }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+            if (expected[i] == 0.0 && observed[i] == 0) {\n+                continue; // Skip terms with no contribution to the chi-square statistic\n+            }\n+            if (expected[i] == 0.0) {\n+                throw new IllegalArgumentException(\"expected value of count cannot be zero\");\n+            }\n+            dev = ((double) observed[i] - expected[i]);\n+            sumSq += dev * dev / expected[i];\n+        }\n+        // Check for excessive rounding error from rounding expected values to integers\n+        if (sumSq > 1e-10 * MathUtils.sum(expected)) {\n+            throw new IllegalArgumentException(\"excessive rounding error in chi square calculation\");\n         }\n         return sumSq;\n     }\n \n+    private boolean isPositive(double[] values) {\n+        for (double value : values) {\n+            if (value <= 0.0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean isNonNegative(long[] values) {\n+        for (long value : values) {\n+            if (value < 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}