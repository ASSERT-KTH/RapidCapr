{
    "patch": "try {\n    Node typeExpression = parseTypeExpression(token);\n    if (typeExpression != null) {\n        return typeExpression;\n    }\n} catch (Exception e) {\n    // if parsing of type expression raises an exception, proceed to parsing as a type name\n}\nreturn parseTypeName(token);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..20c2fa2a 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,15 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+try {\n+    Node typeExpression = parseTypeExpression(token);\n+    if (typeExpression != null) {\n+        return typeExpression;\n+    }\n+} catch (Exception e) {\n+    // if parsing of type expression raises an exception, proceed to parsing as a type name\n+}\n+return parseTypeName(token);\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}