{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // handle STRING, GET, SET\n        Token type = child.getToken();\n        if (type != Token.STRING) {\n          if (type == Token.GETTER_DEF || type == Token.SETTER_DEF) {\n            Node childBlock = child.getLastChild();\n            if (childBlock.getToken() == Token.BLOCK) {\n              handleObjectLit(t, childBlock);\n            }\n          } else {\n            throw new IllegalStateException(\n                \"Invalid token in object literal: \" + type);\n          }\n        } else {\n\n          // We should never see a mix of numbers and strings.\n          String name = child.getString();\n          T typeObj = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child, processProperty(t, prop, typeObj, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION,\n                  name,\n                  (typeObj == null ? \"null\" : typeObj.toString()),\n                  n.toString(), \"\"));\n                }\n            }\n          }\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..016e568f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,42 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        // handle STRING, GET, SET\n+        Token type = child.getToken();\n+        if (type != Token.STRING) {\n+          if (type == Token.GETTER_DEF || type == Token.SETTER_DEF) {\n+            Node childBlock = child.getLastChild();\n+            if (childBlock.getToken() == Token.BLOCK) {\n+              handleObjectLit(t, childBlock);\n+            }\n+          } else {\n+            throw new IllegalStateException(\n+                \"Invalid token in object literal: \" + type);\n+          }\n+        } else {\n+\n+          // We should never see a mix of numbers and strings.\n+          String name = child.getString();\n+          T typeObj = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child, processProperty(t, prop, typeObj, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION,\n+                  name,\n+                  (typeObj == null ? \"null\" : typeObj.toString()),\n+                  n.toString(), \"\"));\n+                }\n+            }\n+          }\n+        }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}