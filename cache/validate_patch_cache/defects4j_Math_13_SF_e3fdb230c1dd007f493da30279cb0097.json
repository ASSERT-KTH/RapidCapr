{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double norm = m.getNorm();\n    final RealMatrix normM = m.scalarMultiply(1/norm);\n    final EigenDecomposition dec = new EigenDecomposition(normM);\n    final RealMatrix sqrtLambda = MatrixUtils.createRealDiagonalMatrix(\n        dec.getRealEigenvalues().stream().map(e -> Math.sqrt(e)).toArray(Double[]::new));\n    final RealMatrix sqrtM = dec.getV().multiply(sqrtLambda).multiply(dec.getV().transpose());\n    return sqrtM.scalarMultiply(norm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bb38b382d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double norm = m.getNorm();\n+    final RealMatrix normM = m.scalarMultiply(1/norm);\n+    final EigenDecomposition dec = new EigenDecomposition(normM);\n+    final RealMatrix sqrtLambda = MatrixUtils.createRealDiagonalMatrix(\n+        dec.getRealEigenvalues().stream().map(e -> Math.sqrt(e)).toArray(Double[]::new));\n+    final RealMatrix sqrtM = dec.getV().multiply(sqrtLambda).multiply(dec.getV().transpose());\n+    return sqrtM.scalarMultiply(norm);\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}