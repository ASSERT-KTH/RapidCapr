{
    "patch": "if (fromNode != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, finallyNode, cfa));\n} else {\n    cfa.createSyntheticEdge(parent, finallyNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..2bfc95b7 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,11 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (fromNode != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, finallyNode, cfa));\n+} else {\n+    cfa.createSyntheticEdge(parent, finallyNode);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}