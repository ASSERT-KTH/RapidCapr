{
    "patch": "public RectangularCholeskyDecomposition(final RealMatrix matrix, final double small)\n      throws NonPositiveDefiniteMatrixException {\n    final int p = matrix.getRowDimension();\n    final double[][] a = matrix.getData();\n    final double[][] b = new double[p][p];\n\n    final double[] d = new double[p];\n\n    boolean isPositiveDefinite = true;\n    int q = 0;     \n    for (int i = 0; i < p; i++) {\n        double dTemp = a[i][i];\n        for (int k = 0; k < q; k++) {\n            dTemp -= b[i][k] * b[i][k] * d[k];\n        }\n        if (dTemp > small) {\n            d[q] = dTemp;\n            b[i][q] = FastMath.sqrt(dTemp);\n            double bTemp = 1.0 / b[i][q];\n            for (int j = i + 1; j < p; j++) {\n                double aTemp = a[j][i];\n                for (int k = 0; k < q; k++) {\n                    aTemp -= b[j][k] * b[i][k] * d[k];\n                }\n                b[j][q] = aTemp * bTemp;\n                a[j][i] = aTemp;\n            }\n            q++;\n        } else {\n            isPositiveDefinite = false;\n            break;\n        }\n    }\n\n    if (!isPositiveDefinite) {\n        throw new NonPositiveDefiniteMatrixException(d[q], q, small);\n    }\n\n    // Build the root matrix\n    rank = q;\n    root = MatrixUtils.createRealMatrix(p, q);\n    for (int i = 0; i < p; i++) {\n        for (int j = 0; j < q; j++) {\n            if (i == j) {\n                root.setEntry(i, j, b[i][j]);\n            } else if (i > j) {\n                root.setEntry(i, j, b[j][j] * b[i][j] * d[j]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\nindex 04488e593..33e6d964b 100644\n--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n@@ -59,96 +59,57 @@ public class RectangularCholeskyDecomposition {\n      * @exception NonPositiveDefiniteMatrixException if the matrix is not\n      * positive semidefinite.\n      */\n-    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n-        throws NonPositiveDefiniteMatrixException {\n-\n-        final int order = matrix.getRowDimension();\n-        final double[][] c = matrix.getData();\n-        final double[][] b = new double[order][order];\n-\n-        int[] swap  = new int[order];\n-        int[] index = new int[order];\n-        for (int i = 0; i < order; ++i) {\n-            index[i] = i;\n+public RectangularCholeskyDecomposition(final RealMatrix matrix, final double small)\n+      throws NonPositiveDefiniteMatrixException {\n+    final int p = matrix.getRowDimension();\n+    final double[][] a = matrix.getData();\n+    final double[][] b = new double[p][p];\n+\n+    final double[] d = new double[p];\n+\n+    boolean isPositiveDefinite = true;\n+    int q = 0;     \n+    for (int i = 0; i < p; i++) {\n+        double dTemp = a[i][i];\n+        for (int k = 0; k < q; k++) {\n+            dTemp -= b[i][k] * b[i][k] * d[k];\n         }\n-\n-        int r = 0;\n-        for (boolean loop = true; loop;) {\n-\n-            // find maximal diagonal element\n-            swap[r] = r;\n-            for (int i = r + 1; i < order; ++i) {\n-                int ii  = index[i];\n-                int isi = index[swap[i]];\n-                if (c[ii][ii] > c[isi][isi]) {\n-                    swap[r] = i;\n+        if (dTemp > small) {\n+            d[q] = dTemp;\n+            b[i][q] = FastMath.sqrt(dTemp);\n+            double bTemp = 1.0 / b[i][q];\n+            for (int j = i + 1; j < p; j++) {\n+                double aTemp = a[j][i];\n+                for (int k = 0; k < q; k++) {\n+                    aTemp -= b[j][k] * b[i][k] * d[k];\n                 }\n+                b[j][q] = aTemp * bTemp;\n+                a[j][i] = aTemp;\n             }\n-\n-\n-            // swap elements\n-            if (swap[r] != r) {\n-                int tmp = index[r];\n-                index[r] = index[swap[r]];\n-                index[swap[r]] = tmp;\n-            }\n-\n-            // check diagonal element\n-            int ir = index[r];\n-            if (c[ir][ir] < small) {\n-\n-                if (r == 0) {\n-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n-                }\n-\n-                // check remaining diagonal elements\n-                for (int i = r; i < order; ++i) {\n-                    if (c[index[i]][index[i]] < -small) {\n-                        // there is at least one sufficiently negative diagonal element,\n-                        // the symmetric positive semidefinite matrix is wrong\n-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n-                    }\n-                }\n-\n-                // all remaining diagonal elements are close to zero, we consider we have\n-                // found the rank of the symmetric positive semidefinite matrix\n-                ++r;\n-                loop = false;\n-\n-            } else {\n-\n-                // transform the matrix\n-                final double sqrt = FastMath.sqrt(c[ir][ir]);\n-                b[r][r] = sqrt;\n-                final double inverse  = 1 / sqrt;\n-                for (int i = r + 1; i < order; ++i) {\n-                    final int ii = index[i];\n-                    final double e = inverse * c[ii][ir];\n-                    b[i][r] = e;\n-                    c[ii][ii] -= e * e;\n-                    for (int j = r + 1; j < i; ++j) {\n-                        final int ij = index[j];\n-                        final double f = c[ii][ij] - e * b[j][r];\n-                        c[ii][ij] = f;\n-                        c[ij][ii] = f;\n-                    }\n-                }\n-\n-                // prepare next iteration\n-                loop = ++r < order;\n-            }\n+            q++;\n+        } else {\n+            isPositiveDefinite = false;\n+            break;\n         }\n+    }\n+\n+    if (!isPositiveDefinite) {\n+        throw new NonPositiveDefiniteMatrixException(d[q], q, small);\n+    }\n \n-        // build the root matrix\n-        rank = r;\n-        root = MatrixUtils.createRealMatrix(order, r);\n-        for (int i = 0; i < order; ++i) {\n-            for (int j = 0; j < r; ++j) {\n-                root.setEntry(index[i], j, b[i][j]);\n+    // Build the root matrix\n+    rank = q;\n+    root = MatrixUtils.createRealMatrix(p, q);\n+    for (int i = 0; i < p; i++) {\n+        for (int j = 0; j < q; j++) {\n+            if (i == j) {\n+                root.setEntry(i, j, b[i][j]);\n+            } else if (i > j) {\n+                root.setEntry(i, j, b[j][j] * b[i][j] * d[j]);\n             }\n         }\n-\n     }\n+}\n \n     /** Get the root of the covariance matrix.\n      * The root is the rectangular matrix <code>B</code> such that",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.03072742383784123>",
    "test_result": "FAIL"
}