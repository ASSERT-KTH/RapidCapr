{
    "patch": "        } else if (maybeInit.isVariableDeclaration()) {\n          // This is the form:\n          // var a = ...;\n          // First use A is as a declaration.\n          if (maybeInit.isInitializingDeclaration()) {\n            return maybeInit;\n          }\n          \n          // This is the form:\n          // var a;\n          // ...\n          // a = ...;\n          for (int i = index + 1; i < references.size(); i++) {\n            Reference ref = references.get(i);\n            if (ref.isAssignmentToName(\"name\", maybeInit.getName())) {\n              return ref;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ff349f3a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (maybeInit.isVariableDeclaration()) {\n+          // This is the form:\n+          // var a = ...;\n+          // First use A is as a declaration.\n+          if (maybeInit.isInitializingDeclaration()) {\n+            return maybeInit;\n+          }\n+          \n+          // This is the form:\n+          // var a;\n+          // ...\n+          // a = ...;\n+          for (int i = index + 1; i < references.size(); i++) {\n+            Reference ref = references.get(i);\n+            if (ref.isAssignmentToName(\"name\", maybeInit.getName())) {\n+              return ref;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}