{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                regex.append(\"\\\\s*\");\n                wasWhite = true;\n            }\n            continue;\n        }\n        wasWhite = false;\n        if (\"[].(){}$^|?*+\\\\\".indexOf(c) != -1) {\n            regex.append('\\\\');\n        }\n        if (c == '\\'' && unquote) {\n            regex.append(\"(?:(?:'\\\")|(?:\\\"'))?\");\n            if (i + 1 < value.length()) {\n                c = value.charAt(i + 1);\n                if (c == '\\\"' || c == '\\'') {\n                    ++i;\n                }\n            }\n        } else {\n            regex.append(c);\n        }\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..bd186699 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,35 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                regex.append(\"\\\\s*\");\n+                wasWhite = true;\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            continue;\n+        }\n+        wasWhite = false;\n+        if (\"[].(){}$^|?*+\\\\\".indexOf(c) != -1) {\n+            regex.append('\\\\');\n+        }\n+        if (c == '\\'' && unquote) {\n+            regex.append(\"(?:(?:'\\\")|(?:\\\"'))?\");\n+            if (i + 1 < value.length()) {\n+                c = value.charAt(i + 1);\n+                if (c == '\\\"' || c == '\\'') {\n+                    ++i;\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n             }\n+        } else {\n             regex.append(c);\n         }\n-        return regex;\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}