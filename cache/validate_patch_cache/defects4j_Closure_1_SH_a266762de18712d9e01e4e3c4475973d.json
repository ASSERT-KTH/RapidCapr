{
    "patch": "// Fix removing arguments of anonymous functions which are referenced in Externs\nprivate static class RemoveUnreferencedFunctionArgsExterns extends\n    NodeTraversal.AbstractPreOrderCallback {\n  private final Set<Var> referenced;\n\n  RemoveUnreferencedFunctionArgsExterns(Set<Var> referenced) {\n    this.referenced = referenced;\n  }\n\n  @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript() || n.isModuleBody() || n.isFunction()) {\n      return true;\n    }\n\n    // Visit the rest of externs but do not traverse.\n    return n.isFromExterns();\n  }\n\n  @Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isFunction()) {\n      Node argList = getFunctionArgList(n);\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = t.getScope().getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n        } else {\n          break;\n        }\n      }\n      t.getCompiler().reportChangeToEnclosingScope(argList);\n    }\n  }\n}\n  \n  /**\n   * Remove function arguments that are unreferenced.\n   * Assumes that the AST has already been normalized.\n   * \n   * @param fnScope The scope of the function to process.\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node fn = fnScope.getRootNode();\n\n    Preconditions.checkState(fn.isFunction());\n    if (!fn.getFirstChild().isEmpty() && NodeUtil.isFromExterns(fn)) {\n      Set<Var> referenced = new ReferencedFunctionArgsScanner(fnScope).scan();\n      NodeTraversal.traverse(compiler, fn, new RemoveUnreferencedFunctionArgsExterns(referenced));\n      return;\n    }\n\n    if (NodeUtil.isGetOrSetKey(fn.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node argList = getFunctionArgList(fn);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fn);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c55c7ae5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,64 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Fix removing arguments of anonymous functions which are referenced in Externs\n+private static class RemoveUnreferencedFunctionArgsExterns extends\n+    NodeTraversal.AbstractPreOrderCallback {\n+  private final Set<Var> referenced;\n+\n+  RemoveUnreferencedFunctionArgsExterns(Set<Var> referenced) {\n+    this.referenced = referenced;\n+  }\n+\n+  @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.isScript() || n.isModuleBody() || n.isFunction()) {\n+      return true;\n+    }\n+\n+    // Visit the rest of externs but do not traverse.\n+    return n.isFromExterns();\n+  }\n+\n+  @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isFunction()) {\n+      Node argList = getFunctionArgList(n);\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = t.getScope().getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+        } else {\n+          break;\n+        }\n+      }\n+      t.getCompiler().reportChangeToEnclosingScope(argList);\n+    }\n+  }\n+}\n+  \n+  /**\n+   * Remove function arguments that are unreferenced.\n+   * Assumes that the AST has already been normalized.\n+   * \n+   * @param fnScope The scope of the function to process.\n+   */\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node fn = fnScope.getRootNode();\n+\n+    Preconditions.checkState(fn.isFunction());\n+    if (!fn.getFirstChild().isEmpty() && NodeUtil.isFromExterns(fn)) {\n+      Set<Var> referenced = new ReferencedFunctionArgsScanner(fnScope).scan();\n+      NodeTraversal.traverse(compiler, fn, new RemoveUnreferencedFunctionArgsExterns(referenced));\n+      return;\n+    }\n+\n+    if (NodeUtil.isGetOrSetKey(fn.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node argList = getFunctionArgList(fn);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fn);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}