{
    "patch": "import java.util.List;\n\nimport org.mozilla.javascript.Node;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.AstNode;\nimport org.mozilla.javascript.ast.Block;\nimport org.mozilla.javascript.ast.BreakStatement;\nimport org.mozilla.javascript.ast.CatchClause;\nimport org.mozilla.javascript.ast.ConditionalExpression;\nimport org.mozilla.javascript.ast.ContinueStatement;\nimport org.mozilla.javascript.ast.DoLoop;\nimport org.mozilla.javascript.ast.ElementGet;\nimport org.mozilla.javascript.ast.EmptyExpression;\nimport org.mozilla.javascript.ast.ExpressionStatement;\nimport org.mozilla.javascript.ast.ForInLoop;\nimport org.mozilla.javascript.ast.ForLoop;\nimport org.mozilla.javascript.ast.FunctionCall;\nimport org.mozilla.javascript.ast.FunctionNode;\nimport org.mozilla.javascript.ast.Name;\n\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.LatticeElement;\n\npublic class AutomatedProgramRepairTool {\n\n    private boolean isDirective(Node n) {\n        if (n == null) {\n            return false;\n        }\n\n        int nType = n.getType();\n        return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n                n.getFirstChild().getType() == Token.STRING &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    private boolean hasExceptionHandler(Node cfgNode) {\n        List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n        for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n            if (edge.getValue() == Branch.ON_EX) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n        Node node = newNode(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            Node labelName = transform(statementNode.getBreakLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\n                    \"Catch clauses are not supported\",\n                    sourceName,\n                    clauseNode.getCatchCondition().getLineno(),\n                    \"\",\n                    0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n        return newNode(\n                Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n        return newNode(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n        return newNode(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n        return newNode(Token.EMPTY);\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = newNode(transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n        return newNode(\n                Token.FOR,\n                transform(loopNode.getIterator()),\n                transform(loopNode.getIteratedObject()),\n                transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n        Node node = newNode(\n                Token.FOR,\n                transform(loopNode.getInitializer()),\n                transform(loopNode.getCondition()),\n                transform(loopNode.getIncrement()));\n        node.addChildToBack(transformBlock(loopNode.getBody()));\n        return node;\n    }\n\n    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n        Node node = newNode(transformTokenType(callNode.getType()),\n                transform(callNode.getTarget()));\n        for (AstNode child : callNode.getArguments()) {\n            node.addChildToBack(transform(child));\n        }\n\n        int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n        node.setLineno(callNode.getLineno());\n        node.setCharno(position2charno(leftParamPos));\n        return node;\n    }\n\n    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n        Name name = functionNode.getFunctionName();\n        Node node = new Node(Token.FUNCTION, name != null ? transform(name) : null);\n\n        Node paramBody = new Node(Token.PARAM_LIST);\n        List<AstNode> params = functionNode.getParams();\n        for (AstNode param : params) {\n            paramBody.addChildToBack(transform(param));\n        }\n        paramBody.putProp(Node.FUNCTION_PARAMETERS, paramBody);\n        node.addChildToBack(paramBody);\n\n        Node bodyNode = transform(functionNode.getBody());\n        boolean isExpression = false;\n        if (functionNode.getFunctionName() == null) {\n            isExpression = true;\n        }\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n\n        node.putIntProp(Node.FUNCTION_PROP, Node.BI_IDENT);\n        node.putIntProp(Node.DIRECTIVES_PROP, functionNode.getDirectives());\n        node.putExtra(Node.ORIGINALNAME_PROP, functionNode.getName());\n        node.putBooleanProp(Node.IS_EXPRESSION_FLAG, isExpression);\n        node.putIntProp(Node.FUNCTION_END, functionNode.getSourceEnd());\n        node.putIntProp(Node.HEAD_END, functionNode.getBody().getAbsolutePosition());\n\n        name = functionNode.getFunctionName();\n        if (name == null) {\n            // Mark line number of lparen (left parenthesis).\n            int lpPos = functionNode.getBody().getAbsolutePosition() -\n                    functionNode.getBody().getLp();\n            int lineno = position2line(lpPos);\n            int charno = position2charno(lpPos);\n            node.setLineno(lineno);\n            node.setCharno(charno);\n        } else {\n            int lineno = functionNode.getLineno();\n            int charno = position2charno(functionNode.getPosition());\n            node.setLineno(lineno);\n            node.setCharno(charno);\n        }\n\n        return node;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..7eb05db7 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,215 @@ public class IRFactory {\n       }\n     }\n \n+import java.util.List;\n+\n+import org.mozilla.javascript.Node;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.AstNode;\n+import org.mozilla.javascript.ast.Block;\n+import org.mozilla.javascript.ast.BreakStatement;\n+import org.mozilla.javascript.ast.CatchClause;\n+import org.mozilla.javascript.ast.ConditionalExpression;\n+import org.mozilla.javascript.ast.ContinueStatement;\n+import org.mozilla.javascript.ast.DoLoop;\n+import org.mozilla.javascript.ast.ElementGet;\n+import org.mozilla.javascript.ast.EmptyExpression;\n+import org.mozilla.javascript.ast.ExpressionStatement;\n+import org.mozilla.javascript.ast.ForInLoop;\n+import org.mozilla.javascript.ast.ForLoop;\n+import org.mozilla.javascript.ast.FunctionCall;\n+import org.mozilla.javascript.ast.FunctionNode;\n+import org.mozilla.javascript.ast.Name;\n+\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.LatticeElement;\n+\n+public class AutomatedProgramRepairTool {\n+\n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+        if (n == null) {\n+            return false;\n+        }\n+\n+        int nType = n.getType();\n+        return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+                n.getFirstChild().getType() == Token.STRING &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    }\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    private boolean hasExceptionHandler(Node cfgNode) {\n+        List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+        for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+            if (edge.getValue() == Branch.ON_EX) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     @Override\n     Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+        return processGeneric(blockNode);\n     }\n \n     @Override\n     Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.BREAK);\n+        if (statementNode.getBreakLabel() != null) {\n+            Node labelName = transform(statementNode.getBreakLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = newNode(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            errorReporter.error(\n+                    \"Catch clauses are not supported\",\n+                    sourceName,\n+                    clauseNode.getCatchCondition().getLineno(),\n+                    \"\",\n+                    0);\n+        }\n+        node.addChildToBack(transformBlock(clauseNode.getBody()));\n+        return node;\n     }\n \n     @Override\n     Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+        return newNode(\n+                Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n     }\n \n     @Override\n     Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+        return newNode(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n     }\n \n     @Override\n     Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+        return newNode(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n     @Override\n     Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+        return newNode(Token.EMPTY);\n     }\n \n     @Override\n     Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+        Node node = newNode(transformTokenType(statementNode.getType()));\n+        node.addChildToBack(transform(statementNode.getExpression()));\n+        return node;\n     }\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+        return newNode(\n+                Token.FOR,\n+                transform(loopNode.getIterator()),\n+                transform(loopNode.getIteratedObject()),\n+                transformBlock(loopNode.getBody()));\n     }\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+        Node node = newNode(\n+                Token.FOR,\n+                transform(loopNode.getInitializer()),\n+                transform(loopNode.getCondition()),\n+                transform(loopNode.getIncrement()));\n+        node.addChildToBack(transformBlock(loopNode.getBody()));\n+        return node;\n     }\n \n     @Override\n     Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+        Node node = newNode(transformTokenType(callNode.getType()),\n+                transform(callNode.getTarget()));\n+        for (AstNode child : callNode.getArguments()) {\n+            node.addChildToBack(transform(child));\n+        }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+        int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n+        node.setLineno(callNode.getLineno());\n+        node.setCharno(position2charno(leftParamPos));\n+        return node;\n     }\n \n     @Override\n     Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+        Name name = functionNode.getFunctionName();\n+        Node node = new Node(Token.FUNCTION, name != null ? transform(name) : null);\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+        Node paramBody = new Node(Token.PARAM_LIST);\n+        List<AstNode> params = functionNode.getParams();\n+        for (AstNode param : params) {\n+            paramBody.addChildToBack(transform(param));\n+        }\n+        paramBody.putProp(Node.FUNCTION_PARAMETERS, paramBody);\n+        node.addChildToBack(paramBody);\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+        Node bodyNode = transform(functionNode.getBody());\n+        boolean isExpression = false;\n+        if (functionNode.getFunctionName() == null) {\n+            isExpression = true;\n+        }\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+\n+        node.putIntProp(Node.FUNCTION_PROP, Node.BI_IDENT);\n+        node.putIntProp(Node.DIRECTIVES_PROP, functionNode.getDirectives());\n+        node.putExtra(Node.ORIGINALNAME_PROP, functionNode.getName());\n+        node.putBooleanProp(Node.IS_EXPRESSION_FLAG, isExpression);\n+        node.putIntProp(Node.FUNCTION_END, functionNode.getSourceEnd());\n+        node.putIntProp(Node.HEAD_END, functionNode.getBody().getAbsolutePosition());\n+\n+        name = functionNode.getFunctionName();\n+        if (name == null) {\n+            // Mark line number of lparen (left parenthesis).\n+            int lpPos = functionNode.getBody().getAbsolutePosition() -\n+                    functionNode.getBody().getLp();\n+            int lineno = position2line(lpPos);\n+            int charno = position2charno(lpPos);\n+            node.setLineno(lineno);\n+            node.setCharno(charno);\n+        } else {\n+            int lineno = functionNode.getLineno();\n+            int charno = position2charno(functionNode.getPosition());\n+            node.setLineno(lineno);\n+            node.setCharno(charno);\n+        }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+        return node;\n     }\n+}\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}