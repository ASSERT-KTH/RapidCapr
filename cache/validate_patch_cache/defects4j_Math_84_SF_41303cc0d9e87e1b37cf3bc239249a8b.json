{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // Maximum allowed number of iterations.\n        // Target function evaluations are about 5-6 times this value\n        final int maxIterations = simplex.length * getMaxIterationsCount();\n\n        for (int iteration = 0; iteration < maxIterations; iteration++) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n            } else {\n                // Compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, delta, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint(); // updated\n                } else {\n\n                    // Compute the multiple contracted simplex\n                    final RealPointValuePair[] multipleContractedSimplex = evaluateNewMultipleSimplex(original, rho, comparator);\n                    if (comparator.compare(multipleContractedSimplex[multipleContractedSimplex.length - 1], best) < 0) {\n                        // accept the multiple contracted simplex\n                        simplex = multipleContractedSimplex;\n                    } else {\n                        // Compute the shrinked simplex\n                        final RealPointValuePair[] shrinkedSimplex = contractInside(original, comparator);\n                        simplex = shrinkedSimplex;\n                    }\n                }\n            }\n\n            // check convergence\n            final double y1 = simplex[0].getValue();\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                final double yi = simplex[i].getValue();\n                if (Math.abs(yi - y1) > getRelativeThreshold() * (Math.abs(y1) + getRelativeThreshold()) &&\n                    Math.abs(yi - y1) > getAbsoluteThreshold()) {\n                    converged = false;\n                    break;\n                }\n            }\n\n            if (converged) {\n                return;\n            }\n        }\n        throw new OptimizationException(\n                new MaxCountExceededException(getMaxIterationsCount()));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..44d4c76e8 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -61,7 +61,11 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+        // Maximum allowed number of iterations.\n+        // Target function evaluations are about 5-6 times this value\n+        final int maxIterations = simplex.length * getMaxIterationsCount();\n+\n+        for (int iteration = 0; iteration < maxIterations; iteration++) {\n \n             incrementIterationsCounter();\n \n@@ -80,22 +84,45 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n-                return;\n-\n+            } else {\n+                // Compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, delta, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint(); // updated\n+                } else {\n+\n+                    // Compute the multiple contracted simplex\n+                    final RealPointValuePair[] multipleContractedSimplex = evaluateNewMultipleSimplex(original, rho, comparator);\n+                    if (comparator.compare(multipleContractedSimplex[multipleContractedSimplex.length - 1], best) < 0) {\n+                        // accept the multiple contracted simplex\n+                        simplex = multipleContractedSimplex;\n+                    } else {\n+                        // Compute the shrinked simplex\n+                        final RealPointValuePair[] shrinkedSimplex = contractInside(original, comparator);\n+                        simplex = shrinkedSimplex;\n+                    }\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n+            final double y1 = simplex[0].getValue();\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                final double yi = simplex[i].getValue();\n+                if (Math.abs(yi - y1) > getRelativeThreshold() * (Math.abs(y1) + getRelativeThreshold()) &&\n+                    Math.abs(yi - y1) > getAbsoluteThreshold()) {\n+                    converged = false;\n+                    break;\n+                }\n             }\n \n+            if (converged) {\n+                return;\n+            }\n         }\n-\n+        throw new OptimizationException(\n+                new MaxCountExceededException(getMaxIterationsCount()));\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}