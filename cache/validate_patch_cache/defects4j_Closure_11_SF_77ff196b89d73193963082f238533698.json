{
    "patch": "public class MyClass {\n\n    public static String getProp(String key) throws IOException {\n        Properties props = new Properties();\n        InputStream inputStream = null;\n        String propValue = null;\n        \n        try {\n            inputStream = new FileInputStream(\"config.properties\");\n            props.load(inputStream);\n            propValue = props.getProperty(key);\n        } catch (IOException ex) {\n            System.out.println(ex.getMessage());\n        } finally {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        }\n        \n        return propValue;\n    }  \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..4717a51a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class MyClass {\n+\n+    public static String getProp(String key) throws IOException {\n+        Properties props = new Properties();\n+        InputStream inputStream = null;\n+        String propValue = null;\n+        \n+        try {\n+            inputStream = new FileInputStream(\"config.properties\");\n+            props.load(inputStream);\n+            propValue = props.getProperty(key);\n+        } catch (IOException ex) {\n+            System.out.println(ex.getMessage());\n+        } finally {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        }\n+        \n+        return propValue;\n+    }  \n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}