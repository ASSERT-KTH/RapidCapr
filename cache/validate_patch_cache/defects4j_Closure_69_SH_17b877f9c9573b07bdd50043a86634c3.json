{
    "patch": "      if (functionJSDocInfo != null && functionJSDocInfo.hasThisType()) {\n        Node parent = n.getParent();\n        if (parent == null ||\n            (parent.isNot(NAME) && parent.isNot(STRING_KEY) && parent.isNot(GETPROP) &&\n                parent.isNot(GETELEM) && parent.isNot(CALL))) {\n          report(t, n, FUNCTION_THIS_TYPE_INVALID_THIS);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..0b89be9b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionJSDocInfo != null && functionJSDocInfo.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (parent == null ||\n+            (parent.isNot(NAME) && parent.isNot(STRING_KEY) && parent.isNot(GETPROP) &&\n+                parent.isNot(GETELEM) && parent.isNot(CALL))) {\n+          report(t, n, FUNCTION_THIS_TYPE_INVALID_THIS);\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}