{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double integrationLimit = 1000;\n    final int integrationPoints = 10000;\n    final double tolerance = 1E-10;\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid input argument value for regularizedGamma function\");\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (x >= a + integrationLimit) {\n        return 1.0;\n    }\n\n    final double logGammaA = Gamma.logGamma(a);\n    if (x < a + 1) {\n        // Use the series representation\n        double denom = a;\n        double series = 1 / a;\n        double elem = series;\n        while (elem > series * tolerance) {\n            denom += 1;\n            elem *= x / denom;\n            series += elem;\n        }\n        return Math.exp(-x + a * Math.log(x) - logGammaA) * series;\n    }\n\n    // Use the continued fraction representation\n    double b = x + 1 - a;\n    double c = 1 / tolerance;\n    double d = 1 / b;\n    double h = d;\n    double an;\n    int i;\n    for (i = 1; i <= integrationPoints; i++) {\n        an = -i * (i - a);\n        b += 2;\n        d = an * d + b;\n        if (Math.abs(d) < Double.MIN_VALUE) {\n            d = Double.MIN_VALUE;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < Double.MIN_VALUE) {\n            c = Double.MIN_VALUE;\n        }\n        d = 1 / d;\n        final double delta = d * c;\n        h *= delta;\n        if (Math.abs(delta - 1) < tolerance) {\n            break;\n        }\n    }\n    if (i > integrationPoints) {\n        throw new RuntimeException(\"regularizedGamma failed to converge for a=\" + a + \", x=\" + x);\n    }\n    return Math.exp(-x + a * Math.log(x) - logGammaA) * h;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..15abbc15d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,64 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double integrationLimit = 1000;\n+    final int integrationPoints = 10000;\n+    final double tolerance = 1E-10;\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input argument value for regularizedGamma function\");\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (x >= a + integrationLimit) {\n+        return 1.0;\n+    }\n+\n+    final double logGammaA = Gamma.logGamma(a);\n+    if (x < a + 1) {\n+        // Use the series representation\n+        double denom = a;\n+        double series = 1 / a;\n+        double elem = series;\n+        while (elem > series * tolerance) {\n+            denom += 1;\n+            elem *= x / denom;\n+            series += elem;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - logGammaA) * series;\n+    }\n+\n+    // Use the continued fraction representation\n+    double b = x + 1 - a;\n+    double c = 1 / tolerance;\n+    double d = 1 / b;\n+    double h = d;\n+    double an;\n+    int i;\n+    for (i = 1; i <= integrationPoints; i++) {\n+        an = -i * (i - a);\n+        b += 2;\n+        d = an * d + b;\n+        if (Math.abs(d) < Double.MIN_VALUE) {\n+            d = Double.MIN_VALUE;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < Double.MIN_VALUE) {\n+            c = Double.MIN_VALUE;\n+        }\n+        d = 1 / d;\n+        final double delta = d * c;\n+        h *= delta;\n+        if (Math.abs(delta - 1) < tolerance) {\n+            break;\n+        }\n+    }\n+    if (i > integrationPoints) {\n+        throw new RuntimeException(\"regularizedGamma failed to converge for a=\" + a + \", x=\" + x);\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGammaA) * h;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}