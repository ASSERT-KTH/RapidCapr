{
    "patch": "          // Only consider an assignment within a function block as an initializing\n          // assignment if it is the first assignment or declaration of the\n          // variable's lifetime, or if the variable is not declared within this function,\n          // in which case the first assignment in this function is treated as an initializing\n          // assignment.\n          Reference initRef = getInitializingReference();\n          if (initRef == null || initRef.getParent() == ref.getParent()) {\n            return true;\n          }\n        } else if (block.isLoop && block != ref.getBasicBlock()) {\n          // Assignment is in a loop, cannot be assigned only once.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..28f1f5c7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Only consider an assignment within a function block as an initializing\n+          // assignment if it is the first assignment or declaration of the\n+          // variable's lifetime, or if the variable is not declared within this function,\n+          // in which case the first assignment in this function is treated as an initializing\n+          // assignment.\n+          Reference initRef = getInitializingReference();\n+          if (initRef == null || initRef.getParent() == ref.getParent()) {\n+            return true;\n+          }\n+        } else if (block.isLoop && block != ref.getBasicBlock()) {\n+          // Assignment is in a loop, cannot be assigned only once.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}