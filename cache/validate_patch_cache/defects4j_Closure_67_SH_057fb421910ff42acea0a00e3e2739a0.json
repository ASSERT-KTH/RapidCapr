{
    "patch": "          ) {\n        // We want to exclude the assignment itself from the usage list\n        Node lhs = n.getFirstChild();\n        boolean isChainedProperty = NodeUtil.isGet(lhs) && NodeUtil.isGet(lhs.getFirstChild());\n        if (isChainedProperty) {\n          Node obj = lhs.getFirstChild().getFirstChild();\n          Node prop = obj.getNext();\n\n          if (NodeUtil.isName(obj, \"prototype\") && NodeUtil.isStringValue(prop)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..71ae7784 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -317,6 +317,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n           && n.getType() == Token.GETPROP\n           ) {\n         // We want to exclude the assignment itself from the usage list\n+        Node lhs = n.getFirstChild();\n+        boolean isChainedProperty = NodeUtil.isGet(lhs) && NodeUtil.isGet(lhs.getFirstChild());\n+        if (isChainedProperty) {\n+          Node obj = lhs.getFirstChild().getFirstChild();\n+          Node prop = obj.getNext();\n+\n+          if (NodeUtil.isName(obj, \"prototype\") && NodeUtil.isStringValue(prop)) {\n+            return true;\n+          }\n+        }\n+      }\n+\n+      return false;\n+    }\n+        // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}