{
    "patch": "import org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.fitting.Gaussian;\nimport org.apache.commons.math3.fitting.LeastSquaresBuilder;\nimport org.apache.commons.math3.fitting.ParameterGuesser;\nimport org.apache.commons.math3.fitting.WeightedObservedPoints;\nimport org.apache.commons.math3.linear.DiagonalMatrix;\n\nimport java.util.Arrays;\n\nclass Example {\n    private final WeightedObservedPoints observations = new WeightedObservedPoints();\n\n    public void addObservation(double x, double y) {\n        observations.add(x, y);\n    }\n\n    public WeightedObservedPoints getObservations() {\n        return observations;\n    }\n\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        final double[] lowerBounds = new double[guess.length];\n        Arrays.fill(lowerBounds, Double.NEGATIVE_INFINITY);\n        try {\n            return fit(new Gaussian.Parametric(), guess, new LeastSquaresBuilder()\n                    .maxEvaluations(Integer.MAX_VALUE)\n                    .maxIterations(Integer.MAX_VALUE)\n                    .start(guess)\n                    .lowerBound(lowerBounds)\n                    .build());\n        }catch (NotStrictlyPositiveException ex){\n            throw new IllegalArgumentException(ex);\n        }\n    }\n\n    private double[] fit(final Gaussian.Parametric f, final double[] start,\n                         final LeastSquaresBuilder builder) {\n        final double[] target = new double[observations.getPointCount()];\n        final double[] weights = new double[target.length];\n        for (int i = 0; i < target.length; i++) {\n            target[i] = observations.getY(i);\n            weights[i] = observations.getWeight(i);\n        }\n        return builder.target(target)\n                      .weight(new DiagonalMatrix(weights))\n                      .model(f.withStart(start))\n                      .build()\n                      .optimize().getPoint().toArray();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..f58588087 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,57 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math3.fitting.Gaussian;\n+import org.apache.commons.math3.fitting.LeastSquaresBuilder;\n+import org.apache.commons.math3.fitting.ParameterGuesser;\n+import org.apache.commons.math3.fitting.WeightedObservedPoints;\n+import org.apache.commons.math3.linear.DiagonalMatrix;\n+\n+import java.util.Arrays;\n+\n+class Example {\n+    private final WeightedObservedPoints observations = new WeightedObservedPoints();\n+\n+    public void addObservation(double x, double y) {\n+        observations.add(x, y);\n+    }\n+\n+    public WeightedObservedPoints getObservations() {\n+        return observations;\n+    }\n+\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final double[] lowerBounds = new double[guess.length];\n+        Arrays.fill(lowerBounds, Double.NEGATIVE_INFINITY);\n+        try {\n+            return fit(new Gaussian.Parametric(), guess, new LeastSquaresBuilder()\n+                    .maxEvaluations(Integer.MAX_VALUE)\n+                    .maxIterations(Integer.MAX_VALUE)\n+                    .start(guess)\n+                    .lowerBound(lowerBounds)\n+                    .build());\n+        }catch (NotStrictlyPositiveException ex){\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    private double[] fit(final Gaussian.Parametric f, final double[] start,\n+                         final LeastSquaresBuilder builder) {\n+        final double[] target = new double[observations.getPointCount()];\n+        final double[] weights = new double[target.length];\n+        for (int i = 0; i < target.length; i++) {\n+            target[i] = observations.getY(i);\n+            weights[i] = observations.getWeight(i);\n+        }\n+        return builder.target(target)\n+                      .weight(new DiagonalMatrix(weights))\n+                      .model(f.withStart(start))\n+                      .build()\n+                      .optimize().getPoint().toArray();\n     }\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}