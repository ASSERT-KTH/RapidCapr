{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Check for implicit prototype cycles\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    // Attempt to resolve via registry\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    // If not resolved, attempt to resolve via properties\n    if (!resolved) {\n        resolveViaProperties(t, enclosing);\n        // Make another attempt to resolve via registry\n        resolved = resolveViaRegistry(t, enclosing);\n    }\n\n    // Call super.resolveInternal(), finish property continuations,\n    // and check if the type was resolved\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    resolved |= isResolved();\n\n    // If resolved, return the type, otherwise return this\n    return resolved ? registry.isLastGeneration() ? getReferencedType() : this : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..0a34c0a9 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,31 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    // Check for implicit prototype cycles\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(t);\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+    // Attempt to resolve via registry\n+    boolean resolved = resolveViaRegistry(t, enclosing);\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // If not resolved, attempt to resolve via properties\n+    if (!resolved) {\n+        resolveViaProperties(t, enclosing);\n+        // Make another attempt to resolve via registry\n+        resolved = resolveViaRegistry(t, enclosing);\n     }\n \n+    // Call super.resolveInternal(), finish property continuations,\n+    // and check if the type was resolved\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    finishPropertyContinuations();\n+    resolved |= isResolved();\n+\n+    // If resolved, return the type, otherwise return this\n+    return resolved ? registry.isLastGeneration() ? getReferencedType() : this : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}