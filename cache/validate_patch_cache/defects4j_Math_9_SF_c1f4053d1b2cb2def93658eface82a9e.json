{
    "patch": "public Line revert() {\n    Vector2D negativeDirection = direction.negate();\n    if (Double.isNaN(negativeDirection.getX()) || Double.isInfinite(negativeDirection.getX())) {\n        throw new RuntimeException(\"Cannot perform line revert operation\");\n    }\n\n    Line revertedLine = new Line(zero, negativeDirection);\n    if (Double.isNaN(revertedLine.getDirection().getX()) || Double.isInfinite(revertedLine.getDirection().getX())) {\n        throw new RuntimeException(\"Cannot perform line revert operation\");\n    }\n\n    return revertedLine;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..53ad688d0 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,11 +83,20 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+    Vector2D negativeDirection = direction.negate();\n+    if (Double.isNaN(negativeDirection.getX()) || Double.isInfinite(negativeDirection.getX())) {\n+        throw new RuntimeException(\"Cannot perform line revert operation\");\n     }\n \n+    Line revertedLine = new Line(zero, negativeDirection);\n+    if (Double.isNaN(revertedLine.getDirection().getX()) || Double.isInfinite(revertedLine.getDirection().getX())) {\n+        throw new RuntimeException(\"Cannot perform line revert operation\");\n+    }\n+\n+    return revertedLine;\n+}\n+\n     /** Get the normalized direction vector.\n      * @return normalized direction vector\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}