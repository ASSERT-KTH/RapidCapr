{
    "patch": "import org.joda.time.DateTimeField;\nimport org.joda.time.DateTimeFieldType;\nimport org.joda.time.MonthDay;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.FieldUtils;\nimport org.joda.time.field.UnsupportedDateTimeField;\n\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // Extract year, month, and dayOfMonth\n    int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n    int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n    int year = values[DateTimeFieldType.year().getFieldIndex()];\n\n    // Pass to superclass if date is not leap day\n    if (monthOfYear != 2 || dayOfMonth != 29) {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n\n    // Check if year is a leap year\n    boolean isLeap = ISOChronology.getInstanceUTC().isLeapYear(year);\n    if (!isLeap) {\n        // Adjust leap day to February 28 in non-leap years\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n        return super.add(partial, fieldIndex, newValues, valueToAdd);\n    }\n\n    // Calculate new date if year is a leap year\n    int newDayOfMonth = dayOfMonth + valueToAdd;\n    if (newDayOfMonth <= 0) {\n        do {\n            monthOfYear--;\n            if (monthOfYear < 1) {\n                year--;\n                monthOfYear = 12;\n            }\n            newDayOfMonth += ISOChronology.getInstanceUTC().daysInMonth(monthOfYear, year);\n        } while (newDayOfMonth <= 0);\n    }\n    else {\n        int dom = ISOChronology.getInstanceUTC().daysInMonth(monthOfYear, year);\n        while (newDayOfMonth > dom) {\n            newDayOfMonth -= dom;\n            monthOfYear++;\n            if (monthOfYear > 12) {\n                year++;\n                monthOfYear = 1;\n            }\n            dom = ISOChronology.getInstanceUTC().daysInMonth(monthOfYear, year);\n        }\n    }\n\n    int[] newValues = new int[values.length];\n    System.arraycopy(values, 0, newValues, 0, values.length);\n    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = newDayOfMonth;\n    newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = monthOfYear;\n    newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ecb7a49a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,74 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.MonthDay;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.FieldUtils;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // Extract year, month, and dayOfMonth\n+    int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+    int monthOfYear = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+    int year = values[DateTimeFieldType.year().getFieldIndex()];\n+\n+    // Pass to superclass if date is not leap day\n+    if (monthOfYear != 2 || dayOfMonth != 29) {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+\n+    // Check if year is a leap year\n+    boolean isLeap = ISOChronology.getInstanceUTC().isLeapYear(year);\n+    if (!isLeap) {\n+        // Adjust leap day to February 28 in non-leap years\n+        int[] newValues = new int[values.length];\n+        System.arraycopy(values, 0, newValues, 0, values.length);\n+        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n+        return super.add(partial, fieldIndex, newValues, valueToAdd);\n+    }\n+\n+    // Calculate new date if year is a leap year\n+    int newDayOfMonth = dayOfMonth + valueToAdd;\n+    if (newDayOfMonth <= 0) {\n+        do {\n+            monthOfYear--;\n+            if (monthOfYear < 1) {\n+                year--;\n+                monthOfYear = 12;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newDayOfMonth += ISOChronology.getInstanceUTC().daysInMonth(monthOfYear, year);\n+        } while (newDayOfMonth <= 0);\n+    }\n+    else {\n+        int dom = ISOChronology.getInstanceUTC().daysInMonth(monthOfYear, year);\n+        while (newDayOfMonth > dom) {\n+            newDayOfMonth -= dom;\n+            monthOfYear++;\n+            if (monthOfYear > 12) {\n+                year++;\n+                monthOfYear = 1;\n+            }\n+            dom = ISOChronology.getInstanceUTC().daysInMonth(monthOfYear, year);\n         }\n     }\n \n+    int[] newValues = new int[values.length];\n+    System.arraycopy(values, 0, newValues, 0, values.length);\n+    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = newDayOfMonth;\n+    newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = monthOfYear;\n+    newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n+\n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}