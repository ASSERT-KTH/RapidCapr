{
    "patch": "public static Iterable<String> getRepeatedWords(String s, int n) {\n    if (s == null || n <= 0) {\n        return Collections.emptyList();\n    }\n    String[] words = s.split(\"\\\\s+\");\n    Set<String> set = new HashSet<>();\n    Set<String> wordsSeen = new HashSet<>();\n\n    for (String word : words) {\n        if (!wordsSeen.add(word)) {\n            set.add(word);\n        }\n    }\n\n    List<String> result = new ArrayList<>();\n    for (String word : set) {\n        for (int i = 0; i < n; i++) {\n            result.add(word);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..261b7cb45 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,29 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> getRepeatedWords(String s, int n) {\n+    if (s == null || n <= 0) {\n+        return Collections.emptyList();\n+    }\n+    String[] words = s.split(\"\\\\s+\");\n+    Set<String> set = new HashSet<>();\n+    Set<String> wordsSeen = new HashSet<>();\n+\n+    for (String word : words) {\n+        if (!wordsSeen.add(word)) {\n+            set.add(word);\n+        }\n+    }\n+\n+    List<String> result = new ArrayList<>();\n+    for (String word : set) {\n+        for (int i = 0; i < n; i++) {\n+            result.add(word);\n+        }\n+    }\n+\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}