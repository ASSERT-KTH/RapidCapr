{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    double term = a * Math.log(x) - x - logGamma(a);\n    double sum = 1.0;\n    double i = 1.0;\n    double delta = Double.MAX_VALUE;\n    while (i < 1e7 && Math.abs(delta) > (1e-15 * Math.abs(sum))) {\n        delta = term;\n        delta *= i / (x + i);\n        sum += delta;\n        i += 1.0;\n    }\n    if (i >= 1e7) {\n      throw new ArithmeticException(\"Max iterations reached for regularizedGammaP(a, x)\");\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0\n            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\nprivate static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    double c = regularizedGammaP(a, x);\n    double d = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    return d * (1.0 - c) / a;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..924e0f2e3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    double term = a * Math.log(x) - x - logGamma(a);\n+    double sum = 1.0;\n+    double i = 1.0;\n+    double delta = Double.MAX_VALUE;\n+    while (i < 1e7 && Math.abs(delta) > (1e-15 * Math.abs(sum))) {\n+        delta = term;\n+        delta *= i / (x + i);\n+        sum += delta;\n+        i += 1.0;\n+    }\n+    if (i >= 1e7) {\n+      throw new ArithmeticException(\"Max iterations reached for regularizedGammaP(a, x)\");\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0\n+            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+private static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    double c = regularizedGammaP(a, x);\n+    double d = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    return d * (1.0 - c) / a;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}