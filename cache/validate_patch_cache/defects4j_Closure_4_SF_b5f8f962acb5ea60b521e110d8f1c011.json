{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  if (isResolved()) {\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  boolean resolvedRegistry = false;\n  boolean resolvedProperties = false;\n\n  try {\n    resolvedRegistry = resolveViaRegistry(t, enclosing);\n  } catch (Exception e) {\n    // Catch all exceptions and log the stack trace.\n    e.printStackTrace();\n  }\n\n  JSType resolvedType = null;\n\n  if (resolvedRegistry) {\n    try {\n      resolvedType = super.resolveInternal(t, enclosing);\n      resolvedProperties = true;\n    \n      if (resolvedType == null || !resolvedType.isResolved()) {\n        resolvedRegistry = false;\n        resolvedProperties = false;\n      }\n      else {\n        resolvedType = registry.isLastGeneration() ? getReferencedType() : resolvedType;\n      }\n    } catch (Exception e) {\n      // Catch all exceptions and log the stack trace.\n      e.printStackTrace();\n      resolvedRegistry = false;\n      resolvedProperties = false;\n    }\n  }\n\n  if (!resolvedProperties) {\n    try {\n      resolveViaProperties(t, enclosing);\n      resolvedType = super.resolveInternal(t, enclosing);\n      if (resolvedType == null || !resolvedType.isResolved()) {\n        resolvedRegistry = false;\n      }\n      else {\n        resolvedType = registry.isLastGeneration() ? getReferencedType() : resolvedType;\n      }\n    } catch (Exception e) {\n      // Catch all exceptions and log the stack trace.\n      e.printStackTrace();\n      resolvedRegistry = false;\n      resolvedProperties = false;\n      resolvedType = this; // fallback to unresolved type\n    }\n  }\n\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  if (resolvedRegistry && resolvedType != null) {\n    finishPropertyContinuations();\n  }\n\n  return resolvedType == null ? this : resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..5ad793af 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,73 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  if (isResolved()) {\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  boolean resolvedRegistry = false;\n+  boolean resolvedProperties = false;\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+  try {\n+    resolvedRegistry = resolveViaRegistry(t, enclosing);\n+  } catch (Exception e) {\n+    // Catch all exceptions and log the stack trace.\n+    e.printStackTrace();\n+  }\n+\n+  JSType resolvedType = null;\n+\n+  if (resolvedRegistry) {\n+    try {\n+      resolvedType = super.resolveInternal(t, enclosing);\n+      resolvedProperties = true;\n+    \n+      if (resolvedType == null || !resolvedType.isResolved()) {\n+        resolvedRegistry = false;\n+        resolvedProperties = false;\n+      }\n+      else {\n+        resolvedType = registry.isLastGeneration() ? getReferencedType() : resolvedType;\n+      }\n+    } catch (Exception e) {\n+      // Catch all exceptions and log the stack trace.\n+      e.printStackTrace();\n+      resolvedRegistry = false;\n+      resolvedProperties = false;\n     }\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+  if (!resolvedProperties) {\n+    try {\n+      resolveViaProperties(t, enclosing);\n+      resolvedType = super.resolveInternal(t, enclosing);\n+      if (resolvedType == null || !resolvedType.isResolved()) {\n+        resolvedRegistry = false;\n+      }\n+      else {\n+        resolvedType = registry.isLastGeneration() ? getReferencedType() : resolvedType;\n+      }\n+    } catch (Exception e) {\n+      // Catch all exceptions and log the stack trace.\n+      e.printStackTrace();\n+      resolvedRegistry = false;\n+      resolvedProperties = false;\n+      resolvedType = this; // fallback to unresolved type\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n+\n+  if (resolvedRegistry && resolvedType != null) {\n+    finishPropertyContinuations();\n+  }\n+\n+  return resolvedType == null ? this : resolvedType;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}