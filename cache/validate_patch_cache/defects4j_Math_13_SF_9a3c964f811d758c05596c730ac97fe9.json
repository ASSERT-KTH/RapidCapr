{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getRowDimension();\n    final double[][] sqrt = new double[n][n];\n    for (int i = 0; i < n; i++) {\n        final double s = FastMath.sqrt(d.getEntry(i, i));\n        for (int j = 0; j < n; j++) {\n            sqrt[i][j] = v.getEntry(i, j) * s;\n        }\n    }\n    return MatrixUtils.createRealMatrix(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a00beb632 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getRowDimension();\n+    final double[][] sqrt = new double[n][n];\n+    for (int i = 0; i < n; i++) {\n+        final double s = FastMath.sqrt(d.getEntry(i, i));\n+        for (int j = 0; j < n; j++) {\n+            sqrt[i][j] = v.getEntry(i, j) * s;\n+        }\n     }\n+    return MatrixUtils.createRealMatrix(sqrt);\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}