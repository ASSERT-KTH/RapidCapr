{
    "patch": "if (functionType.getTypeOfThis() != null && \n          !NodeUtil.isGet(functionType.getTypeOfThis().getNodeType())) {\n        JSType returnType = getNativeType(VOID_TYPE);\n        if (functionType.getReturnType() != null) {\n          returnType = functionType.getReturnType();\n        }\n        report(t, n, UNSAFE_THIS, childType.toString());\n        ensureTyped(t, n, returnType);\n        return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..f11cefec 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null && \n+          !NodeUtil.isGet(functionType.getTypeOfThis().getNodeType())) {\n+        JSType returnType = getNativeType(VOID_TYPE);\n+        if (functionType.getReturnType() != null) {\n+          returnType = functionType.getReturnType();\n+        }\n+        report(t, n, UNSAFE_THIS, childType.toString());\n+        ensureTyped(t, n, returnType);\n+        return;\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}