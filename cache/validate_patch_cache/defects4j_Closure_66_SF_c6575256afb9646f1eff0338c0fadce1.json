{
    "patch": "  public static double getTypedPercent(List<JobStatus> jobStatuses) {\n     if (jobStatuses.size() == 0) \n        return 0.0;\n\n     int classifiedCount = 0;\n     for (JobStatus jobStatus : jobStatuses) {\n        if(jobStatus.getStatus() == Status.CLASSIFIED)\n            classifiedCount++;\n     }\n     return (double)classifiedCount / jobStatuses.size() * 100.0;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..830f7fa8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+  public static double getTypedPercent(List<JobStatus> jobStatuses) {\n+     if (jobStatuses.size() == 0) \n+        return 0.0;\n+\n+     int classifiedCount = 0;\n+     for (JobStatus jobStatus : jobStatuses) {\n+        if(jobStatus.getStatus() == Status.CLASSIFIED)\n+            classifiedCount++;\n+     }\n+     return (double)classifiedCount / jobStatuses.size() * 100.0;\n+  }\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}