{
    "patch": "private boolean isPrototypeProperty(Node getprop) {\n    Node firstChild = getprop.getFirstChild();\n    if (firstChild == null) {\n        return false;\n    }\n    Node grandParent = getprop.getParent().getParent();\n    if (grandParent == null || grandParent.getParent() == null) {\n      return false;\n    }\n    return Token.OBJECTLIT == grandParent.getParent().getType() &&\n        \"prototype\".equals(firstChild.getString()) &&\n        tokenIsClassOrInterface(grandParent.getParent().getParent().getType());\n  }\n\n  static boolean tokenIsClassOrInterface(int token) {\n    return token == Token.CLASS || token == Token.INTERFACE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..ae54fec5 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,23 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+private boolean isPrototypeProperty(Node getprop) {\n+    Node firstChild = getprop.getFirstChild();\n+    if (firstChild == null) {\n+        return false;\n+    }\n+    Node grandParent = getprop.getParent().getParent();\n+    if (grandParent == null || grandParent.getParent() == null) {\n+      return false;\n+    }\n+    return Token.OBJECTLIT == grandParent.getParent().getType() &&\n+        \"prototype\".equals(firstChild.getString()) &&\n+        tokenIsClassOrInterface(grandParent.getParent().getParent().getType());\n+  }\n+\n+  static boolean tokenIsClassOrInterface(int token) {\n+    return token == Token.CLASS || token == Token.INTERFACE;\n+  }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}