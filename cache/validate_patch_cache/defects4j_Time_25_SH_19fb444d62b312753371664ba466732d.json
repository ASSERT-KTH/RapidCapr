{
    "patch": "                \n                int totalAdjustment = offsetAdjusted - offsetLocal;\n                \n                // make sure that we don't skip any transitions\n                while (nextAdjusted <= instantAdjusted) {\n                    totalAdjustment += (offsetAdjusted - getOffset(nextAdjusted));\n                    nextAdjusted = nextTransition(nextAdjusted);\n                }\n                \n                // make sure that we don't repeat any transitions\n                while (nextLocal <= instantAdjusted) {\n                    totalAdjustment -= (offsetLocal - getOffset(nextLocal));\n                    nextLocal = nextTransition(nextLocal);\n                }\n                \n                if (totalAdjustment <= 0) {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bb7fd67c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                \n+                int totalAdjustment = offsetAdjusted - offsetLocal;\n+                \n+                // make sure that we don't skip any transitions\n+                while (nextAdjusted <= instantAdjusted) {\n+                    totalAdjustment += (offsetAdjusted - getOffset(nextAdjusted));\n+                    nextAdjusted = nextTransition(nextAdjusted);\n+                }\n+                \n+                // make sure that we don't repeat any transitions\n+                while (nextLocal <= instantAdjusted) {\n+                    totalAdjustment -= (offsetLocal - getOffset(nextLocal));\n+                    nextLocal = nextTransition(nextLocal);\n+                }\n+                \n+                if (totalAdjustment <= 0) {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}