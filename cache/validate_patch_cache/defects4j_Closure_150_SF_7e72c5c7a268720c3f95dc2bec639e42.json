{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n      \n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (n.getType() != Token.STRING) {\n        return;\n      }\n\n      if (parent.getType() == Token.CALL\n          && parent.getFirstChild() == n\n          && parent.getChildCount() == 2\n          && parent.getLastChild().isString()) {\n        handleCall(name = n.getString(), (Node) parent.getLastChild());\n      } else if (NodeUtil.isExpressionAssign(parent)) {\n        // Handles arbitrary assignments like 'name = value'.\n        Node rvalue = parent.getLastChild();\n        if (rvalue == n) {\n          handleAssignment(n.getString(), parent);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e04251b2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1442,16 +1442,11 @@ final class TypedScopeCreator implements ScopeCreator {\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n+      \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n@@ -1463,6 +1458,23 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+\n+      if (n.getType() != Token.STRING) {\n+        return;\n+      }\n+\n+      if (parent.getType() == Token.CALL\n+          && parent.getFirstChild() == n\n+          && parent.getChildCount() == 2\n+          && parent.getLastChild().isString()) {\n+        handleCall(name = n.getString(), (Node) parent.getLastChild());\n+      } else if (NodeUtil.isExpressionAssign(parent)) {\n+        // Handles arbitrary assignments like 'name = value'.\n+        Node rvalue = parent.getLastChild();\n+        if (rvalue == n) {\n+          handleAssignment(n.getString(), parent);\n+        }\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}