{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    double exponent = 0.0;\n    for (int i = 0; i < dim; i++) {\n        double diff = vals[i] - means[i];\n        double term = 0.0;\n        for (int j = 0; j < dim; j++) {\n            term += invCovarianceMatrix[i][j] * diff * (vals[j] - means[j]);\n        }\n        exponent += term;\n    }\n\n    return Math.pow(2 * Math.PI, -dim / 2.0) *\n           Math.pow(covarianceMatrixDeterminant, -0.5) *\n           Math.exp(-0.5 * exponent);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..f3cc70291 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,27 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    double exponent = 0.0;\n+    for (int i = 0; i < dim; i++) {\n+        double diff = vals[i] - means[i];\n+        double term = 0.0;\n+        for (int j = 0; j < dim; j++) {\n+            term += invCovarianceMatrix[i][j] * diff * (vals[j] - means[j]);\n+        }\n+        exponent += term;\n     }\n \n+    return Math.pow(2 * Math.PI, -dim / 2.0) *\n+           Math.pow(covarianceMatrixDeterminant, -0.5) *\n+           Math.exp(-0.5 * exponent);\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}