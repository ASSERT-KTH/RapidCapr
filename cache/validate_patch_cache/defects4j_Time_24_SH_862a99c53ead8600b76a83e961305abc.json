{
    "patch": "                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalArgumentException e) {\n                    if (text != null) {\n                        e = new IllegalFieldValueException(\n                            \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(),\n                            e,\n                            savedFields[i].iField.getType().getName(),\n                            savedFields[i].getValue(),\n                            savedFields[i].getLowerBound(),\n                            savedFields[i].getUpperBound());\n                    }\n                    throw e;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d57bc641 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalArgumentException e) {\n+                    if (text != null) {\n+                        e = new IllegalFieldValueException(\n+                            \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(),\n+                            e,\n+                            savedFields[i].iField.getType().getName(),\n+                            savedFields[i].getValue(),\n+                            savedFields[i].getLowerBound(),\n+                            savedFields[i].getUpperBound());\n+                    }\n+                    throw e;\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}