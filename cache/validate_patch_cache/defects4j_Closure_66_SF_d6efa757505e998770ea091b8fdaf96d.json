{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Map<String, Integer> jsonMap = gson.fromJson(json, new TypeToken<Map<String, Integer>>() {}.getType());\n    double totalCount = 0;\n    double typedCount = 0;\n\n    for (Map.Entry<String, Integer> entry : jsonMap.entrySet()) {\n        String key = entry.getKey();\n        Integer value = entry.getValue();\n        totalCount += value;\n        if (key.equals(\"typed\")) {\n            typedCount = value;\n        }\n    }\n\n    return typedCount / totalCount * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c43d2b30 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Map<String, Integer> jsonMap = gson.fromJson(json, new TypeToken<Map<String, Integer>>() {}.getType());\n+    double totalCount = 0;\n+    double typedCount = 0;\n+\n+    for (Map.Entry<String, Integer> entry : jsonMap.entrySet()) {\n+        String key = entry.getKey();\n+        Integer value = entry.getValue();\n+        totalCount += value;\n+        if (key.equals(\"typed\")) {\n+            typedCount = value;\n+        }\n+    }\n+\n+    return typedCount / totalCount * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}