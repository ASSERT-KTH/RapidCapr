{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  if (n.isQualifiedName()) {\n    String variableName = n.getQualifiedName();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    // Only allow declarations of NAMEs and qualified names,\n    // and under appropriate parents.\n    boolean shouldDeclareOnGlobalThis = false;\n    switch (parent.getType()) {\n      case Token.FUNCTION:\n      case Token.LP:\n      case Token.CATCH:\n        break;\n      case Token.VAR:\n        shouldDeclareOnGlobalThis = scope.isGlobal();\n        break;\n      case Token.EXPR_RESULT:\n        if (parent.getFirstChild() == n) {\n          // This is a `use-before-declare` case. Declare only on global object.\n          shouldDeclareOnGlobalThis = scope.isGlobal();\n          break;\n        }\n        // fallthrough\n      case Token.ASSIGN:\n        if (!NodeUtil.isLhsOfAssignOrVaDec(parent, n)) {\n          throw new IllegalStateException(\"Invalid n/parent pair.\");\n        }\n        break;\n      default:\n        throw new IllegalStateException(\"Invalid parent type: \" + parent);\n    }\n\n    // Find scope to declare in. If n is a property, then declare it in the closest object on the chain.\n    Scope scopeToDeclareIn = scope;\n    if (n.isName()) {\n      final String rootName = nameUtil.getRootName(n);\n      if (rootName != null) {\n        Var rootVar = scope.getVar(rootName);\n        if (rootVar != null) {\n          JSType rootType = rootVar.getType();\n          if (rootType.isObjectType()) {\n            ObjectType objType = rootType.toObjectType();\n            if (objType.hasProperty(rootName)) {\n              scopeToDeclareIn = objType.getPropertyScope();\n            }\n          }\n        }\n      }\n    }\n\n    boolean alreadyDeclared = scopeToDeclareIn.isDeclared(variableName, false);\n    String sourceName = this.sourceName;\n    if (alreadyDeclared) {\n      Var oldVar = scopeToDeclareIn.getVar(variableName);\n      validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n      if (!inferred) {\n        setDeferredType(n, type);\n      }\n\n      CompilerInput input = compiler.getInput(sourceName);\n      scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n      if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThisType = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n        boolean isExtern = input.isExtern();\n        if (inferred) {\n          globalThisType.defineInferredProperty(\n              variableName,\n              type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n              isExtern);\n        } else {\n          globalThisType.defineDeclaredProperty(variableName, type, isExtern);\n        }\n      }\n\n      // If we're in the global scope, also declare var.prototype, unless the type is non-constructable.\n      if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n        FunctionType fnType = (FunctionType) type;\n        if (fnType.isConstructor()) {\n          FunctionType superClassCtor = fnType.getSuperClassConstructor();\n          scopeToDeclareIn.declare(\n              variableName + \".prototype\",\n              n,\n              fnType.getPrototype(),\n              compiler.getInput(sourceName),\n              superClassCtor == null ||\n                  superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n        }\n      }\n    }\n\n  } else if (n.getType() == Token.GETPROP && parent.getType() == Token.EXPR_RESULT) {\n    // `use-before-declare` case: declare on global object.\n    Node propNode = n.getLastChild();\n    String propName = propNode.getString();\n    JSType objType = typeRegistry.getNativeType(JSTypeNative.GLOBAL_THIS);\n    if (objType.isObjectType()) {\n      ((ObjectType) objType).defineDeclaredProperty(propName, type, false);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..fe5b2ec6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,81 +869,109 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  if (n.isQualifiedName()) {\n+    String variableName = n.getQualifiedName();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    // Only allow declarations of NAMEs and qualified names,\n+    // and under appropriate parents.\n+    boolean shouldDeclareOnGlobalThis = false;\n+    switch (parent.getType()) {\n+      case Token.FUNCTION:\n+      case Token.LP:\n+      case Token.CATCH:\n+        break;\n+      case Token.VAR:\n+        shouldDeclareOnGlobalThis = scope.isGlobal();\n+        break;\n+      case Token.EXPR_RESULT:\n+        if (parent.getFirstChild() == n) {\n+          // This is a `use-before-declare` case. Declare only on global object.\n+          shouldDeclareOnGlobalThis = scope.isGlobal();\n+          break;\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+        // fallthrough\n+      case Token.ASSIGN:\n+        if (!NodeUtil.isLhsOfAssignOrVaDec(parent, n)) {\n+          throw new IllegalStateException(\"Invalid n/parent pair.\");\n         }\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Invalid parent type: \" + parent);\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+    // Find scope to declare in. If n is a property, then declare it in the closest object on the chain.\n+    Scope scopeToDeclareIn = scope;\n+    if (n.isName()) {\n+      final String rootName = nameUtil.getRootName(n);\n+      if (rootName != null) {\n+        Var rootVar = scope.getVar(rootName);\n+        if (rootVar != null) {\n+          JSType rootType = rootVar.getType();\n+          if (rootType.isObjectType()) {\n+            ObjectType objType = rootType.toObjectType();\n+            if (objType.hasProperty(rootName)) {\n+              scopeToDeclareIn = objType.getPropertyScope();\n+            }\n           }\n         }\n       }\n     }\n \n+    boolean alreadyDeclared = scopeToDeclareIn.isDeclared(variableName, false);\n+    String sourceName = this.sourceName;\n+    if (alreadyDeclared) {\n+      Var oldVar = scopeToDeclareIn.getVar(variableName);\n+      validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+    } else {\n+      if (!inferred) {\n+        setDeferredType(n, type);\n+      }\n+\n+      CompilerInput input = compiler.getInput(sourceName);\n+      scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+      if (shouldDeclareOnGlobalThis) {\n+        ObjectType globalThisType = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+        boolean isExtern = input.isExtern();\n+        if (inferred) {\n+          globalThisType.defineInferredProperty(\n+              variableName,\n+              type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+              isExtern);\n+        } else {\n+          globalThisType.defineDeclaredProperty(variableName, type, isExtern);\n+        }\n+      }\n+\n+      // If we're in the global scope, also declare var.prototype, unless the type is non-constructable.\n+      if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        FunctionType fnType = (FunctionType) type;\n+        if (fnType.isConstructor()) {\n+          FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+          scopeToDeclareIn.declare(\n+              variableName + \".prototype\",\n+              n,\n+              fnType.getPrototype(),\n+              compiler.getInput(sourceName),\n+              superClassCtor == null ||\n+                  superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n+        }\n+      }\n+    }\n+\n+  } else if (n.getType() == Token.GETPROP && parent.getType() == Token.EXPR_RESULT) {\n+    // `use-before-declare` case: declare on global object.\n+    Node propNode = n.getLastChild();\n+    String propName = propNode.getString();\n+    JSType objType = typeRegistry.getNativeType(JSTypeNative.GLOBAL_THIS);\n+    if (objType.isObjectType()) {\n+      ((ObjectType) objType).defineDeclaredProperty(propName, type, false);\n+    }\n+  }\n+}\n+\n     /**\n      * Check if the given node is a property of a name in the global scope.\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}