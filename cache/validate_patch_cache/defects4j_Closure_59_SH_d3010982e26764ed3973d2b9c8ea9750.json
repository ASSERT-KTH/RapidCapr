{
    "patch": "if (!options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n  if (options.checkGlobalThisLevel != null) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.ERROR);\n  }\n} else if (options.checkGlobalThisLevel != null &&\n           options.checkGlobalThisLevel.isOn()) {\n  throw new RuntimeException(\"Cannot check global this if checking is disabled\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..211348ac 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,20 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (!options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n+  if (options.checkGlobalThisLevel != null) {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        options.checkGlobalThisLevel);\n+  } else {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        CheckLevel.ERROR);\n+  }\n+} else if (options.checkGlobalThisLevel != null &&\n+           options.checkGlobalThisLevel.isOn()) {\n+  throw new RuntimeException(\"Cannot check global this if checking is disabled\");\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}