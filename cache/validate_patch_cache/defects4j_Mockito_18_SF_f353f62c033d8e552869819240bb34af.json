{
    "patch": "public static String replaceChar(String str, char oldChar, char newChar) {\n    if(str == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0; i<str.length(); i++) {\n        char c = str.charAt(i);\n        if(c == oldChar) {\n            c = newChar;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..da655ddf8 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static String replaceChar(String str, char oldChar, char newChar) {\n+    if(str == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder();\n+    for(int i=0; i<str.length(); i++) {\n+        char c = str.charAt(i);\n+        if(c == oldChar) {\n+            c = newChar;\n+        }\n+        sb.append(c);\n+    }\n+    return sb.toString();\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}