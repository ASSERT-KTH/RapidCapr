{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the standard offset at instantLocal (first estimate)\n        int offsetBefore = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalculate the offset\n        long instantBefore = instantLocal - offsetBefore;\n        int offsetAfter = getOffset(instantBefore);\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n\n        int[] offsetInfo = new int[2];\n        if (getOffsetInfo(instantBefore, offsetInfo) == false) {\n            // if unable to get next offsetInfo start looking from current time else\n            // look from transition point\n            long next = nextTransition(instantBefore);\n            instantBefore = (next == instantLocal ? instantBefore + DateTimeConstants.MILLIS_PER_SECOND : next);\n            getOffsetInfo(instantBefore, offsetInfo);\n        }\n\n        if (offsetBefore > offsetAfter) {\n            // gap\n            long transition = offsetInfo[0] + offsetBefore;\n            if (instantLocal >= transition) {\n                offsetBefore = offsetAfter;\n            }\n        } else {\n            // overlap\n            long transition = offsetInfo[0] + offsetAfter;\n            if (instantLocal < transition) {\n                offsetBefore = offsetAfter;\n            }\n        }\n\n        return offsetBefore;\n    }\n\n    private boolean getOffsetInfo(long instant, int[] info) {\n        // this implementation handles 'simple' cases\n        int offsetBefore = getOffset(instant - 1);\n        int offsetAfter = getOffset(instant);\n        if (offsetBefore > offsetAfter) {\n            long next = nextTransition(instant - (long) DateTimeConstants.MILLIS_PER_DAY);\n            if (next > instant) {\n                offsetBefore = getOffset(next - 1);\n                if (offsetBefore > offsetAfter) {\n                    info[0] = (int) next;\n                    info[1] = offsetAfter;\n                    return true;\n                }\n            }\n        } else if (offsetAfter > offsetBefore) {\n            long next = nextTransition(instant);\n            if (next < instant) {\n                offsetAfter = getOffset(next - 1);\n                if (offsetAfter > offsetBefore) {\n                    info[0] = (int) next;\n                    info[1] = offsetAfter;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4f2e6892 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,67 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        // get the standard offset at instantLocal (first estimate)\n+        int offsetBefore = getOffset(instantLocal);\n+        // adjust instantLocal using the estimate and recalculate the offset\n+        long instantBefore = instantLocal - offsetBefore;\n+        int offsetAfter = getOffset(instantBefore);\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+\n+        int[] offsetInfo = new int[2];\n+        if (getOffsetInfo(instantBefore, offsetInfo) == false) {\n+            // if unable to get next offsetInfo start looking from current time else\n+            // look from transition point\n+            long next = nextTransition(instantBefore);\n+            instantBefore = (next == instantLocal ? instantBefore + DateTimeConstants.MILLIS_PER_SECOND : next);\n+            getOffsetInfo(instantBefore, offsetInfo);\n+        }\n+\n+        if (offsetBefore > offsetAfter) {\n+            // gap\n+            long transition = offsetInfo[0] + offsetBefore;\n+            if (instantLocal >= transition) {\n+                offsetBefore = offsetAfter;\n+            }\n+        } else {\n+            // overlap\n+            long transition = offsetInfo[0] + offsetAfter;\n+            if (instantLocal < transition) {\n+                offsetBefore = offsetAfter;\n+            }\n+        }\n+\n+        return offsetBefore;\n+    }\n+\n+    private boolean getOffsetInfo(long instant, int[] info) {\n+        // this implementation handles 'simple' cases\n+        int offsetBefore = getOffset(instant - 1);\n+        int offsetAfter = getOffset(instant);\n+        if (offsetBefore > offsetAfter) {\n+            long next = nextTransition(instant - (long) DateTimeConstants.MILLIS_PER_DAY);\n+            if (next > instant) {\n+                offsetBefore = getOffset(next - 1);\n+                if (offsetBefore > offsetAfter) {\n+                    info[0] = (int) next;\n+                    info[1] = offsetAfter;\n+                    return true;\n+                }\n+            }\n+        } else if (offsetAfter > offsetBefore) {\n+            long next = nextTransition(instant);\n+            if (next < instant) {\n+                offsetAfter = getOffset(next - 1);\n+                if (offsetAfter > offsetBefore) {\n+                    info[0] = (int) next;\n+                    info[1] = offsetAfter;\n+                    return true;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+        return false;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}