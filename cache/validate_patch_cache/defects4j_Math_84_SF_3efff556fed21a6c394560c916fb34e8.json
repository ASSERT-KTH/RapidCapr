{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            // increment the iteration counter\n            incrementIterationsCounter();\n\n            // save the original simplex\n            final RealPointValuePair[] original = simplex.clone();\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1, comparator);\n            if (comparator.compare(reflected, original[0]) < 0) {\n                // Compute expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex[original.length] = expanded;\n                } else {\n                    simplex[original.length] = reflected;\n                }\n            } else if (comparator.compare(reflected, original[original.length - 1]) >= 0) {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n                    // Shrink the simplex\n                    for (int i = 1; i < simplex.length; i++) {\n                        simplex[i] = new RealPointValuePair(\n                                PointUtils.vectorAdd(simplex[0].getPointRef(), PointUtils.scalarMultiply(sigma,\n                                        PointUtils.vectorSubtract(simplex[i].getPointRef(), simplex[0].getPointRef()))),\n                                Double.NaN, false);\n                    }\n                    sortSimplex(comparator);\n                } else {\n                    simplex[original.length - 1] = contracted;\n                    sortSimplex(comparator);\n                }\n            } else {\n                simplex[original.length] = reflected;\n            }\n\n            // Check if the termination condition has been met\n            if (isConverged()) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e7d6d553f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -62,40 +62,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n+            // increment the iteration counter\n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+            // save the original simplex\n+            final RealPointValuePair[] original = simplex.clone();\n \n             // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            final RealPointValuePair reflected = evaluateNewSimplex(original, 1, comparator);\n+            if (comparator.compare(reflected, original[0]) < 0) {\n+                // Compute expanded simplex\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex[original.length] = expanded;\n+                } else {\n+                    simplex[original.length] = reflected;\n                 }\n-\n-                return;\n-\n+            } else if (comparator.compare(reflected, original[original.length - 1]) >= 0) {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n+                    // Shrink the simplex\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        simplex[i] = new RealPointValuePair(\n+                                PointUtils.vectorAdd(simplex[0].getPointRef(), PointUtils.scalarMultiply(sigma,\n+                                        PointUtils.vectorSubtract(simplex[i].getPointRef(), simplex[0].getPointRef()))),\n+                                Double.NaN, false);\n+                    }\n+                    sortSimplex(comparator);\n+                } else {\n+                    simplex[original.length - 1] = contracted;\n+                    sortSimplex(comparator);\n+                }\n+            } else {\n+                simplex[original.length] = reflected;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            // Check if the termination condition has been met\n+            if (isConverged()) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}