{
    "patch": "public ReturnValue execute(TestCase testCase) {\n    String jsonString = (String) testCase.getInput().get(0);\n    Gson gson = new Gson();\n    List<Map<String, String>> jsonList = gson.fromJson(jsonString, List.class);\n    List<String> values = new ArrayList<>();\n    for (Map<String, String> map : jsonList) {\n        String val = map.get(\"value\");\n        if (val != null) {\n            values.add(val);\n        }\n    }\n    return new ReturnValue() {\n        @Override\n        public Object returnValueFor(Class clazz) {\n            if (clazz == Iterable.class) {\n                return Collections.unmodifiableList(values);\n            }\n            return null;\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}