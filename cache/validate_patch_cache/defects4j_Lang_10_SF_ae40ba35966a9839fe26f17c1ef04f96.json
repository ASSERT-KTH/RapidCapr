{
    "patch": "private static final String SPECIAL_CHARACTERS = \"[\\\\^$.|?*+(){}]\";\n    \nprivate static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (regex == null) {\n        regex = new StringBuilder();\n    } else {\n        regex.setLength(0);\n    }\n    \n    if (unquote && value.length() > 1 && value.charAt(0) == '\\'' && value.charAt(value.length() - 1) == '\\'') {\n        value = value.substring(1, value.length() - 1);\n    }\n    \n    int pos = 0;\n    while (pos < value.length()) {\n        int start = pos;\n        boolean escaped = false;\n        while (pos < value.length()) {\n            char c = value.charAt(pos);\n            if (c == '\\\\') {\n                escaped = !escaped;\n            } else if (!escaped && Character.toString(c).matches(SPECIAL_CHARACTERS)) {\n                break;\n            } else {\n                escaped = false;\n            }\n            pos++;\n        }\n        regex.append(value, start, pos);\n        if (pos < value.length()) {\n            regex.append('\\\\').append(value.charAt(pos));\n            pos++;\n        }\n    }\n    \n    regex.insert(0, \"\\\\s*\").append(\"\\\\s*\");\n    \n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..40144f4f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,45 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n+private static final String SPECIAL_CHARACTERS = \"[\\\\^$.|?*+(){}]\";\n+    \n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (regex == null) {\n+        regex = new StringBuilder();\n+    } else {\n+        regex.setLength(0);\n+    }\n+    \n+    if (unquote && value.length() > 1 && value.charAt(0) == '\\'' && value.charAt(value.length() - 1) == '\\'') {\n+        value = value.substring(1, value.length() - 1);\n+    }\n+    \n+    int pos = 0;\n+    while (pos < value.length()) {\n+        int start = pos;\n+        boolean escaped = false;\n+        while (pos < value.length()) {\n+            char c = value.charAt(pos);\n+            if (c == '\\\\') {\n+                escaped = !escaped;\n+            } else if (!escaped && Character.toString(c).matches(SPECIAL_CHARACTERS)) {\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+            } else {\n+                escaped = false;\n             }\n-            regex.append(c);\n+            pos++;\n+        }\n+        regex.append(value, start, pos);\n+        if (pos < value.length()) {\n+            regex.append('\\\\').append(value.charAt(pos));\n+            pos++;\n         }\n-        return regex;\n     }\n+    \n+    regex.insert(0, \"\\\\s*\").append(\"\\\\s*\");\n+    \n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}