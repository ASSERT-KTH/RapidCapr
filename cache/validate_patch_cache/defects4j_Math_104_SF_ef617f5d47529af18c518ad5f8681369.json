{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double small = 1e-50;\n    if (a < small || x <= 0.0) {\n        return 0.0;\n    }\n\n    if (x > a + 1) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n\n    final double n = 20;\n    final double eps = 10 * Math.ulp(1d);\n    double sum = 1 / a;\n    double term = sum;\n    for (int i = 1; i < n; i++) {\n        double delta = x + i - a;\n        term *= delta / i;\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * eps) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n        }\n    }\n\n    throw new IllegalStateException(\"a too large, n too small, or eps too large\");\n}\n\npublic static double regularizedGammaQ(final double a, final double x) {\n    final double small = 1e-50;\n    if (a < small || x <= 0.0) {\n        return 1.0;\n    }\n\n    if (x > a + 1) {\n        return 1 - regularizedGammaP(a, x);\n    }\n\n    final double n = 20;\n    final double eps = 10 * Math.ulp(1d);\n    double sum = 1 - a / x;\n    double term = sum;\n    for (int i = 1; i < n; i++) {\n        double delta = a - i;\n        term *= delta / (x + delta);\n        sum -= term;\n        if (Math.abs(term) < Math.abs(sum) * eps) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n        }\n    }\n    throw new IllegalStateException(\"a too large, n too small, or eps too large\");\n}\n\npublic static double logGamma(final double x) {\n    double tmp = x + 5.24218750000000000;\n    tmp = (x + 0.5) * Math.log(tmp) - tmp;\n    double ser = 0.999999999999997092;\n    for (int j = 0; j < 14; j++) {\n        ser += COF[j] / ++x;\n    }\n    return tmp + Math.log(2.5066282746310005 * ser / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e8256d9ab 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,66 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double small = 1e-50;\n+    if (a < small || x <= 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x > a + 1) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+\n+    final double n = 20;\n+    final double eps = 10 * Math.ulp(1d);\n+    double sum = 1 / a;\n+    double term = sum;\n+    for (int i = 1; i < n; i++) {\n+        double delta = x + i - a;\n+        term *= delta / i;\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * eps) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+        }\n+    }\n+\n+    throw new IllegalStateException(\"a too large, n too small, or eps too large\");\n+}\n+\n+public static double regularizedGammaQ(final double a, final double x) {\n+    final double small = 1e-50;\n+    if (a < small || x <= 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x > a + 1) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+\n+    final double n = 20;\n+    final double eps = 10 * Math.ulp(1d);\n+    double sum = 1 - a / x;\n+    double term = sum;\n+    for (int i = 1; i < n; i++) {\n+        double delta = a - i;\n+        term *= delta / (x + delta);\n+        sum -= term;\n+        if (Math.abs(term) < Math.abs(sum) * eps) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+        }\n+    }\n+    throw new IllegalStateException(\"a too large, n too small, or eps too large\");\n+}\n+\n+public static double logGamma(final double x) {\n+    double tmp = x + 5.24218750000000000;\n+    tmp = (x + 0.5) * Math.log(tmp) - tmp;\n+    double ser = 0.999999999999997092;\n+    for (int j = 0; j < 14; j++) {\n+        ser += COF[j] / ++x;\n+    }\n+    return tmp + Math.log(2.5066282746310005 * ser / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}