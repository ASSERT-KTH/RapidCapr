{
    "patch": "      // Check for unreferenced arguments in the invocation\n      Node functionBlock = function.getLastChild();\n      for (Node caller = functionBlock.getFirstChild(); caller != null; caller = caller.getNext()) {\n        if (caller.isCall() && caller.getLastChild().hasChildren()) {\n          Node arg = caller.getLastChild().getFirstChild();\n          while (arg != null && arg.isName()) {\n            Var var = fnScope.getVar(arg.getString());\n            if (!referenced.contains(var)) {\n              // Remove the argument because it's unused\n              Node nextArg = arg.getNext();\n              caller.getLastChild().removeChild(arg);\n              compiler.reportCodeChange();\n              arg = nextArg;\n            } else {\n              arg = arg.getNext();\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6b0aea7e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Check for unreferenced arguments in the invocation\n+      Node functionBlock = function.getLastChild();\n+      for (Node caller = functionBlock.getFirstChild(); caller != null; caller = caller.getNext()) {\n+        if (caller.isCall() && caller.getLastChild().hasChildren()) {\n+          Node arg = caller.getLastChild().getFirstChild();\n+          while (arg != null && arg.isName()) {\n+            Var var = fnScope.getVar(arg.getString());\n+            if (!referenced.contains(var)) {\n+              // Remove the argument because it's unused\n+              Node nextArg = arg.getNext();\n+              caller.getLastChild().removeChild(arg);\n+              compiler.reportCodeChange();\n+              arg = nextArg;\n+            } else {\n+              arg = arg.getNext();\n+            }\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}