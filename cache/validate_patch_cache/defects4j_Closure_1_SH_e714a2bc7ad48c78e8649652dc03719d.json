{
    "patch": "    // Track the last referenced argument\n    int lastReferencedIndex = -1;\n\n    // Determine the total number of arguments\n    int totalArgs = argList.getChildCount();\n\n    // Iterating over function arguments in reverse manner\n    for (int i = totalArgs - 1; i >= 0; i--) {\n      Node arg = argList.getChildAtIndex(i);\n      Var var = fnScope.getVar(arg.getString());\n\n      if (referenced.contains(var)) {\n        lastReferencedIndex = i;\n      } else {\n        if (modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function)) {\n          callSiteOptimizer.removeUnusedFunctionArg(\n              arg, var, function, fnScope, i);\n        } else {\n          if (i < lastReferencedIndex) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5b338296 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Track the last referenced argument\n+    int lastReferencedIndex = -1;\n+\n+    // Determine the total number of arguments\n+    int totalArgs = argList.getChildCount();\n+\n+    // Iterating over function arguments in reverse manner\n+    for (int i = totalArgs - 1; i >= 0; i--) {\n+      Node arg = argList.getChildAtIndex(i);\n+      Var var = fnScope.getVar(arg.getString());\n+\n+      if (referenced.contains(var)) {\n+        lastReferencedIndex = i;\n+      } else {\n+        if (modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function)) {\n+          callSiteOptimizer.removeUnusedFunctionArg(\n+              arg, var, function, fnScope, i);\n+        } else {\n+          if (i < lastReferencedIndex) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}