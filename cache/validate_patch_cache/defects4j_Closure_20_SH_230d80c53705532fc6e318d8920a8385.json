{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null) {\n        if (value.isNumber()) {\n          value.setString(Double.toString(value.getDouble()));\n        } else if (value.isString() && !value.hasChildren()) {\n          value.setString(value.getString());\n        } else {\n          return n;\n        }\n        n.removeChild(value);\n        n.getParent().replaceChild(n, value);\n        reportCodeChange();\n        return value;\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..0a7bc526 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,28 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n+  private Node tryFoldSimpleFunctionCall(Node n) {\n+    Preconditions.checkState(n.isCall());\n+    Node callTarget = n.getFirstChild();\n+    if (callTarget != null && callTarget.isName() &&\n+        callTarget.getString().equals(\"String\")) {\n+      Node value = callTarget.getNext();\n       if (value != null) {\n+        if (value.isNumber()) {\n+          value.setString(Double.toString(value.getDouble()));\n+        } else if (value.isString() && !value.hasChildren()) {\n+          value.setString(value.getString());\n+        } else {\n+          return n;\n+        }\n+        n.removeChild(value);\n+        n.getParent().replaceChild(n, value);\n+        reportCodeChange();\n+        return value;\n+      }\n+    }\n+    return n;\n+  }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}