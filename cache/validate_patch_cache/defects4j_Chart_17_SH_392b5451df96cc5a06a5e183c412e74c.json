{
    "patch": "        Object clone = super.clone();\n        ((XYPlot) clone).datasetToDomainAxisMap = new TreeMap();\n        ((XYPlot) clone).datasetToRangeAxisMap = new TreeMap();\n        ((XYPlot) clone).renderers = (HashMap) ObjectUtilities.deepClone(this.renderers);\n        for (int i = 0; i < this.renderers.size(); ++i) {\n            Object r = ((Map.Entry) this.renderers.get(i)).getValue();\n            if (r instanceof PublicCloneable) {\n                PublicCloneable pc = (PublicCloneable) r;\n                ((Map.Entry) ((XYPlot) clone).renderers.get(i)).setValue(pc.clone());\n            }\n        }\n\n        ((XYPlot) clone).regions = new ArrayList(this.regions.size());\n        for (int i = 0; i < this.regions.size(); ++i) {\n            XYItemRenderer r = (XYItemRenderer) ObjectUtilities.clone(this.regions.get(i));\n            ((XYPlot) clone).regions.add(r);\n        }\n        if (this.fixedDomainAxisSpace != null) {\n            ((XYPlot) clone).fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone(this.fixedDomainAxisSpace);\n        }\n        if (this.fixedRangeAxisSpace != null) {\n            ((XYPlot) clone).fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone(this.fixedRangeAxisSpace);\n        }\n        ((XYPlot) clone).annotations = (List) ObjectUtilities.deepClone(this.annotations);\n        Iterator i$ = ((XYPlot) clone).annotations.iterator();\n\n        while (i$.hasNext()) {\n            XYAnnotation annotation = (XYAnnotation) i$.next();\n            annotation.addChangeListener((PlotChangeListener) clone);\n        }\n        ((XYPlot) clone).backgroundAnnotations = (List) ObjectUtilities.deepClone(this.backgroundAnnotations);\n        i$ = ((XYPlot) clone).backgroundAnnotations.iterator();\n\n        while (i$.hasNext()) {\n            XYAnnotation annotation = (XYAnnotation) i$.next();\n            annotation.addChangeListener((PlotChangeListener) clone);\n        }\n        ((XYPlot) clone).foregroundDomainMarkers = new HashMap(this.foregroundDomainMarkers.size());\n        ((XYPlot) clone).backgroundDomainMarkers = new HashMap(this.backgroundDomainMarkers.size());\n        ((XYPlot) clone).foregroundRangeMarkers = new HashMap(this.foregroundRangeMarkers.size());\n        ((XYPlot) clone).backgroundRangeMarkers = new HashMap(this.backgroundRangeMarkers.size());\n        i$ = this.foregroundDomainMarkers.keySet().iterator();\n\n        Comparable key;\n        Marker marker;\n        while (i$.hasNext()) {\n            key = (Comparable) i$.next();\n            marker = (Marker) ObjectUtilities.clone((Marker) this.foregroundDomainMarkers.get(key));\n            ((XYPlot) clone).foregroundDomainMarkers.put(key, marker);\n        }\n        i$ = this.backgroundDomainMarkers.keySet().iterator();\n\n        while (i$.hasNext()) {\n            key = (Comparable) i$.next();\n            marker = (Marker) ObjectUtilities.clone((Marker) this.backgroundDomainMarkers.get(key));\n            ((XYPlot) clone).backgroundDomainMarkers.put(key, marker);\n        }\n        i$ = this.foregroundRangeMarkers.keySet().iterator();\n\n        while (i$.hasNext()) {\n            key = (Comparable) i$.next();\n            marker = (Marker) ObjectUtilities.clone((Marker) this.foregroundRangeMarkers.get(key));\n            ((XYPlot) clone).foregroundRangeMarkers.put(key, marker);\n        }\n        i$ = this.backgroundRangeMarkers.keySet().iterator();\n\n        while (i$.hasNext()) {\n            key = (Comparable) i$.next();\n            marker = (Marker) ObjectUtilities.clone((Marker) this.backgroundRangeMarkers.get(key));\n            ((XYPlot) clone).backgroundRangeMarkers.put(key, marker);\n        }\n        return clone;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex ffd1dff..e23469c 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -854,7 +854,78 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *         subclasses may differ.\n      */\n     public Object clone() throws CloneNotSupportedException {\n-        Object clone = createCopy(0, getItemCount() - 1);\n+        Object clone = super.clone();\n+        ((XYPlot) clone).datasetToDomainAxisMap = new TreeMap();\n+        ((XYPlot) clone).datasetToRangeAxisMap = new TreeMap();\n+        ((XYPlot) clone).renderers = (HashMap) ObjectUtilities.deepClone(this.renderers);\n+        for (int i = 0; i < this.renderers.size(); ++i) {\n+            Object r = ((Map.Entry) this.renderers.get(i)).getValue();\n+            if (r instanceof PublicCloneable) {\n+                PublicCloneable pc = (PublicCloneable) r;\n+                ((Map.Entry) ((XYPlot) clone).renderers.get(i)).setValue(pc.clone());\n+            }\n+        }\n+\n+        ((XYPlot) clone).regions = new ArrayList(this.regions.size());\n+        for (int i = 0; i < this.regions.size(); ++i) {\n+            XYItemRenderer r = (XYItemRenderer) ObjectUtilities.clone(this.regions.get(i));\n+            ((XYPlot) clone).regions.add(r);\n+        }\n+        if (this.fixedDomainAxisSpace != null) {\n+            ((XYPlot) clone).fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone(this.fixedDomainAxisSpace);\n+        }\n+        if (this.fixedRangeAxisSpace != null) {\n+            ((XYPlot) clone).fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone(this.fixedRangeAxisSpace);\n+        }\n+        ((XYPlot) clone).annotations = (List) ObjectUtilities.deepClone(this.annotations);\n+        Iterator i$ = ((XYPlot) clone).annotations.iterator();\n+\n+        while (i$.hasNext()) {\n+            XYAnnotation annotation = (XYAnnotation) i$.next();\n+            annotation.addChangeListener((PlotChangeListener) clone);\n+        }\n+        ((XYPlot) clone).backgroundAnnotations = (List) ObjectUtilities.deepClone(this.backgroundAnnotations);\n+        i$ = ((XYPlot) clone).backgroundAnnotations.iterator();\n+\n+        while (i$.hasNext()) {\n+            XYAnnotation annotation = (XYAnnotation) i$.next();\n+            annotation.addChangeListener((PlotChangeListener) clone);\n+        }\n+        ((XYPlot) clone).foregroundDomainMarkers = new HashMap(this.foregroundDomainMarkers.size());\n+        ((XYPlot) clone).backgroundDomainMarkers = new HashMap(this.backgroundDomainMarkers.size());\n+        ((XYPlot) clone).foregroundRangeMarkers = new HashMap(this.foregroundRangeMarkers.size());\n+        ((XYPlot) clone).backgroundRangeMarkers = new HashMap(this.backgroundRangeMarkers.size());\n+        i$ = this.foregroundDomainMarkers.keySet().iterator();\n+\n+        Comparable key;\n+        Marker marker;\n+        while (i$.hasNext()) {\n+            key = (Comparable) i$.next();\n+            marker = (Marker) ObjectUtilities.clone((Marker) this.foregroundDomainMarkers.get(key));\n+            ((XYPlot) clone).foregroundDomainMarkers.put(key, marker);\n+        }\n+        i$ = this.backgroundDomainMarkers.keySet().iterator();\n+\n+        while (i$.hasNext()) {\n+            key = (Comparable) i$.next();\n+            marker = (Marker) ObjectUtilities.clone((Marker) this.backgroundDomainMarkers.get(key));\n+            ((XYPlot) clone).backgroundDomainMarkers.put(key, marker);\n+        }\n+        i$ = this.foregroundRangeMarkers.keySet().iterator();\n+\n+        while (i$.hasNext()) {\n+            key = (Comparable) i$.next();\n+            marker = (Marker) ObjectUtilities.clone((Marker) this.foregroundRangeMarkers.get(key));\n+            ((XYPlot) clone).foregroundRangeMarkers.put(key, marker);\n+        }\n+        i$ = this.backgroundRangeMarkers.keySet().iterator();\n+\n+        while (i$.hasNext()) {\n+            key = (Comparable) i$.next();\n+            marker = (Marker) ObjectUtilities.clone((Marker) this.backgroundRangeMarkers.get(key));\n+            ((XYPlot) clone).backgroundRangeMarkers.put(key, marker);\n+        }\n+        return clone;\n         return clone;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}