{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node child = n.getFirstChild();\n    if (child != null && child.getNext() == null) { // has exactly one child\n      Node parent = n.getParent();\n      if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.EXPR_RESULT || parentType == Token.VAR || parentType == Token.ASSIGN) {\n          // check if the child node can be inlined\n          switch (child.getType()) {\n            case Token.STRING:\n            case Token.NUMBER:\n            case Token.NULL:\n            case Token.TRUE:\n            case Token.FALSE:\n            case Token.NAME:\n            case Token.REGEXP:\n              return true;\n            case Token.HOOK:\n            case Token.CALL:\n              return canInlineCall(child);\n            default:\n              break;\n          }\n        } else if (parentType == Token.RETURN && child.getType() == Token.NAME) {\n          // allow folding 'return x;' as 'x;' except for function names\n          return true;\n        } else if (parentType == Token.IF && child.getType() == Token.NAME) {\n          // allow folding 'if (x) y;' as 'x && y;'\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean canInlineCall(Node callNode) {\n  if (callNode.getType() == Token.HOOK) {\n    // inlined calls inside a conditional expression are only allowed if it\n    // appears as the first operand of the condition\n    return canInlineCall(callNode.getFirstChild());\n  }\n  return callNode.getType() == Token.CALL \n      && callNode.getFirstChild().getType() == Token.NAME;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..ac767129 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node child = n.getFirstChild();\n+    if (child != null && child.getNext() == null) { // has exactly one child\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.EXPR_RESULT || parentType == Token.VAR || parentType == Token.ASSIGN) {\n+          // check if the child node can be inlined\n+          switch (child.getType()) {\n+            case Token.STRING:\n+            case Token.NUMBER:\n+            case Token.NULL:\n+            case Token.TRUE:\n+            case Token.FALSE:\n+            case Token.NAME:\n+            case Token.REGEXP:\n+              return true;\n+            case Token.HOOK:\n+            case Token.CALL:\n+              return canInlineCall(child);\n+            default:\n+              break;\n+          }\n+        } else if (parentType == Token.RETURN && child.getType() == Token.NAME) {\n+          // allow folding 'return x;' as 'x;' except for function names\n+          return true;\n+        } else if (parentType == Token.IF && child.getType() == Token.NAME) {\n+          // allow folding 'if (x) y;' as 'x && y;'\n+          return true;\n+        }\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean canInlineCall(Node callNode) {\n+  if (callNode.getType() == Token.HOOK) {\n+    // inlined calls inside a conditional expression are only allowed if it\n+    // appears as the first operand of the condition\n+    return canInlineCall(callNode.getFirstChild());\n   }\n+  return callNode.getType() == Token.CALL \n+      && callNode.getFirstChild().getType() == Token.NAME;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}