{
    "patch": "      Node param = argList.getFirstChild();\n      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n        param = argList.getFirstChild();\n      }\n      Node child = param;\n      while (child != null && child.getNext() != null) {\n        Node sire = child.getNext();\n        while (sire != null && !referenced.contains(fnScope.getVar(sire.getString()))) {\n          argList.removeChild(sire);\n          compiler.reportCodeChange();\n          sire = child.getNext();\n        }\n        child = child.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6677d268 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node param = argList.getFirstChild();\n+      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+        param = argList.getFirstChild();\n+      }\n+      Node child = param;\n+      while (child != null && child.getNext() != null) {\n+        Node sire = child.getNext();\n+        while (sire != null && !referenced.contains(fnScope.getVar(sire.getString()))) {\n+          argList.removeChild(sire);\n+          compiler.reportCodeChange();\n+          sire = child.getNext();\n+        }\n+        child = child.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}