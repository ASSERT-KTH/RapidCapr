{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            if (propType.isFunctionType()) {\n              typeToInfer =\n                  registry.createFunctionType(\n                      registry.getNativeType(VOID_TYPE),\n                      ((FunctionType) propType).getParameterTypes());\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..10b78830 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1129,10 +1129,15 @@ class TypeInference\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n+            if (propType.isFunctionType()) {\n+              typeToInfer =\n+                  registry.createFunctionType(\n+                      registry.getNativeType(VOID_TYPE),\n+                      ((FunctionType) propType).getParameterTypes());\n+            }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}