{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    if (nextAdjusted == instantLocal && nextLocal == instantAdjusted) {\n        // in gap\n        if (offsetLocal > offsetAdjusted) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    } else if (nextAdjusted == instantLocal) {\n        // overlap\n        int prevOffset = getOffset(previousTransition(instantLocal));\n        if (prevOffset <= offsetAdjusted && offsetAdjusted < offsetLocal) {\n            return offsetAdjusted;\n        } else {\n            return offsetLocal;\n        }\n    } else if (nextLocal == instantAdjusted) {\n        // overlap\n        int nextOffset = getOffset(nextLocal);\n        if (offsetAdjusted <= nextOffset && nextOffset < offsetLocal) {\n            return nextOffset;\n        } else {\n            return offsetAdjusted;\n        }\n    } else {\n        // in gap or normal case\n        if (getOffset(nextLocal) < getOffset(nextAdjusted)) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e99015a0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    if (nextAdjusted == instantLocal && nextLocal == instantAdjusted) {\n+        // in gap\n+        if (offsetLocal > offsetAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else if (nextAdjusted == instantLocal) {\n+        // overlap\n+        int prevOffset = getOffset(previousTransition(instantLocal));\n+        if (prevOffset <= offsetAdjusted && offsetAdjusted < offsetLocal) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetLocal;\n+        }\n+    } else if (nextLocal == instantAdjusted) {\n+        // overlap\n+        int nextOffset = getOffset(nextLocal);\n+        if (offsetAdjusted <= nextOffset && nextOffset < offsetLocal) {\n+            return nextOffset;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        // in gap or normal case\n+        if (getOffset(nextLocal) < getOffset(nextAdjusted)) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}