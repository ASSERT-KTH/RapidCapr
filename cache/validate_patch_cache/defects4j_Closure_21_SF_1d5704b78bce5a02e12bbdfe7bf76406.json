{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma() || n.isFunction()) {\n    return;\n  }\n  \n  if (n.isString() && parent != null && !parent.isAdd()) {\n    String msg = \"Is there a missing '+' on the previous line?\";\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  boolean isMayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n\n  if (parent == null) {\n    return;\n  } else if (parent.getType() == Token.COMMA) {\n\n    if (isResultUsed) {\n      return;\n    }\n\n    if (parent.getLastChild() == n) {\n      Node grandparent = parent.getParent();\n\n      while (grandparent != null && grandparent.isComma()) {\n        grandparent = grandparent.getParent();\n      }\n\n      if (grandparent == null || (!grandparent.isExprResult() && !grandparent.isBlock())) {\n        return;\n      }\n    } else {\n      return;\n    }\n  } else if (parent.isExprResult() || parent.isBlock()) {\n    if (isMayHaveSideEffects) {\n      return;\n    }\n  } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {\n    if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()) {\n      if (isMayHaveSideEffects) {\n        return;\n      }\n    }\n  } else {\n    return;\n  }\n  \n  if (isSimpleOp) {\n    String msg = \"The result of the '\" + NodeUtil.opToStr(n.getType()) +\n        \"' operator is not being used.\";\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    return;\n  }\n\n  String msg = \"This code lacks side-effects. Is there a bug?\";\n  t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..39b5809b 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,72 +81,66 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma() || n.isFunction()) {\n+    return;\n+  }\n+  \n+  if (n.isString() && parent != null && !parent.isAdd()) {\n+    String msg = \"Is there a missing '+' on the previous line?\";\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  boolean isMayHaveSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+  if (parent == null) {\n+    return;\n+  } else if (parent.getType() == Token.COMMA) {\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    if (isResultUsed) {\n       return;\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n+    if (parent.getLastChild() == n) {\n+      Node grandparent = parent.getParent();\n+\n+      while (grandparent != null && grandparent.isComma()) {\n+        grandparent = grandparent.getParent();\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+\n+      if (grandparent == null || (!grandparent.isExprResult() && !grandparent.isBlock())) {\n         return;\n       }\n+    } else {\n+      return;\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+  } else if (parent.isExprResult() || parent.isBlock()) {\n+    if (isMayHaveSideEffects) {\n+      return;\n+    }\n+  } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {\n+    if (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()) {\n+      if (isMayHaveSideEffects) {\n+        return;\n       }\n     }\n+  } else {\n+    return;\n+  }\n+  \n+  if (isSimpleOp) {\n+    String msg = \"The result of the '\" + NodeUtil.opToStr(n.getType()) +\n+        \"' operator is not being used.\";\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+    return;\n   }\n \n+  String msg = \"This code lacks side-effects. Is there a bug?\";\n+  t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+}\n+\n   /**\n    * Protect side-effect free nodes by making them parameters\n    * to a extern function call.  This call will be removed",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>",
    "test_result": "FAIL"
}