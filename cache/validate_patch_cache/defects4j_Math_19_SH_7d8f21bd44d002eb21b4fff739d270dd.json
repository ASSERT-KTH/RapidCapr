{
    "patch": "        if (boundaries != null) {\n            final double[] max = new double[init.length];\n            for (int i = 0; i < init.length; i++) {\n                max[i] = FastMath.max(FastMath.abs(boundaries[0][i]), FastMath.abs(boundaries[1][i]));\n            }\n            final double norm = Utils.safeNorm(max);\n            if (norm > 1) {\n                throw new NumberIsTooLargeException(norm, 1, true);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..6161ba502 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,16 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+        if (boundaries != null) {\n+            final double[] max = new double[init.length];\n+            for (int i = 0; i < init.length; i++) {\n+                max[i] = FastMath.max(FastMath.abs(boundaries[0][i]), FastMath.abs(boundaries[1][i]));\n+            }\n+            final double norm = Utils.safeNorm(max);\n+            if (norm > 1) {\n+                throw new NumberIsTooLargeException(norm, 1, true);\n+            }\n+        }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}