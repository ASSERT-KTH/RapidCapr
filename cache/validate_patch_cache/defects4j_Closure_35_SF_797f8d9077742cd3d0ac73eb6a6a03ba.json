{
    "patch": "  private void inferTypesForRecordConstraint(\n      Node n, FlowScope flowScope, List<JSError> warnings, JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              warnings.add(JSError.make(\n                  n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    } else if (n.isGetProp() && !n.isOptionalChain()) {\n      Node objNode = n.getFirstChild();\n      if (objNode.isThis()) {\n        return scope;\n      }\n      JSType objType = getJSType(objNode).restrictByNotNullOrUndefined();\n      if (objType.isStruct()) {\n        // No properties can be added if the object type is a struct\n        return scope;\n      }\n      String propName = n.getLastChild().getString();\n      JSType propType = getJSType(n);\n      if (propType.isBottom() && !scope.isPropertyDeclared(propName)) {\n        inferTypesForRecordConstraint(\n            n, scope, ImmutableList.of(), objType, getPropertyTypeOfTopScope(propName));\n      } else {\n        JSType narrowed =\n            getJSType(n).restrictByNotNullOrUndefined().removeType( getNativeType(VOID_TYPE));\n        if (!narrowed.isBottom()) {\n          scope = narrowsTypeInControlFlowScope(scope, n, narrowed);\n        }\n      }\n      if (objType.hasProperty(propName)) {\n        // narrowScope here, because getting a property of an object removes null and undefined\n        // from its type.\n        scope = narrowScope(scope, objNode, objType);\n        return objType.isUnknown() ? scope : narrowScope(scope, n, objType.getPropertyType(propName));\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..c523ef5e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,13 +1111,13 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+  private void inferTypesForRecordConstraint(\n+      Node n, FlowScope flowScope, List<JSError> warnings, JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n@@ -1128,6 +1128,8 @@ class TypeInference\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              warnings.add(JSError.make(\n+                  n, INVALID_INFERRED_TYPE, prop, typeToInfer.toString()));\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1147,6 +1149,36 @@ class TypeInference\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+    } else if (n.isGetProp() && !n.isOptionalChain()) {\n+      Node objNode = n.getFirstChild();\n+      if (objNode.isThis()) {\n+        return scope;\n+      }\n+      JSType objType = getJSType(objNode).restrictByNotNullOrUndefined();\n+      if (objType.isStruct()) {\n+        // No properties can be added if the object type is a struct\n+        return scope;\n+      }\n+      String propName = n.getLastChild().getString();\n+      JSType propType = getJSType(n);\n+      if (propType.isBottom() && !scope.isPropertyDeclared(propName)) {\n+        inferTypesForRecordConstraint(\n+            n, scope, ImmutableList.of(), objType, getPropertyTypeOfTopScope(propName));\n+      } else {\n+        JSType narrowed =\n+            getJSType(n).restrictByNotNullOrUndefined().removeType( getNativeType(VOID_TYPE));\n+        if (!narrowed.isBottom()) {\n+          scope = narrowsTypeInControlFlowScope(scope, n, narrowed);\n+        }\n+      }\n+      if (objType.hasProperty(propName)) {\n+        // narrowScope here, because getting a property of an object removes null and undefined\n+        // from its type.\n+        scope = narrowScope(scope, objNode, objType);\n+        return objType.isUnknown() ? scope : narrowScope(scope, n, objType.getPropertyType(propName));\n+      }\n+    }\n+    return scope;\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}