{
    "patch": "        TypeVariable<? extends Class<?>> typeVar = (TypeVariable<? extends Class<?>>) typeVariable;\n        if (typeVar.getGenericDeclaration() instanceof Class) {\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVar);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else if (typeVar.getBounds().length > 0) {\n                for (Type type : typeVar.getBounds()) {\n                    registerTypeVariablesOn(type);\n                }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d476a98a0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,20 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        TypeVariable<? extends Class<?>> typeVar = (TypeVariable<? extends Class<?>>) typeVariable;\n+        if (typeVar.getGenericDeclaration() instanceof Class) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVar);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else if (typeVar.getBounds().length > 0) {\n+                for (Type type : typeVar.getBounds()) {\n+                    registerTypeVariablesOn(type);\n+                }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}