{
    "patch": "if (node != null && node.isCall()) {\n    Node child = node.getFirstChild();\n    if (child != null && child.isName() && child.isUnscopedQualifiedName()) {\n        changed.add(child.getString());\n    }\n    for (Node grandChild : child) {\n        findCalledFunctions(grandChild, changed);\n    }\n} else {\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..7f4e714e 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+if (node != null && node.isCall()) {\n+    Node child = node.getFirstChild();\n+    if (child != null && child.isName() && child.isUnscopedQualifiedName()) {\n         changed.add(child.getString());\n+    }\n+    for (Node grandChild : child) {\n+        findCalledFunctions(grandChild, changed);\n+    }\n+} else {\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n+    }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}