{
    "patch": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n\n    if (real == 0.0 && imaginary == 0.0) {\n        return isInfinite ? NaN : (real == 0.0 ? \n                createComplex(0.0, FastMath.copySign(1.0, imaginary) * Double.POSITIVE_INFINITY) : \n                createComplex(FastMath.copySign(1.0, real) * Double.POSITIVE_INFINITY, 0.0));\n    }\n\n    if (isInfinite) {\n        return ZERO;\n    }\n\n    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n        double q = real / imaginary;\n        double scale = 1. / (real * q + imaginary);\n        return createComplex(scale * q, -scale);\n    } else {\n        double q = imaginary / real;\n        double scale = 1. / (imaginary * q + real);\n        return createComplex(scale, -scale * q);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..b43236a9e 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -296,29 +296,31 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     }\n \n     /** {@inheritDoc} */\n-    public Complex reciprocal() {\n-        if (isNaN) {\n-            return NaN;\n-        }\n+public Complex reciprocal() {\n+    if (isNaN) {\n+        return NaN;\n+    }\n \n-        if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n-        }\n+    if (real == 0.0 && imaginary == 0.0) {\n+        return isInfinite ? NaN : (real == 0.0 ? \n+                createComplex(0.0, FastMath.copySign(1.0, imaginary) * Double.POSITIVE_INFINITY) : \n+                createComplex(FastMath.copySign(1.0, real) * Double.POSITIVE_INFINITY, 0.0));\n+    }\n \n-        if (isInfinite) {\n-            return ZERO;\n-        }\n+    if (isInfinite) {\n+        return ZERO;\n+    }\n \n-        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n-            double q = real / imaginary;\n-            double scale = 1. / (real * q + imaginary);\n-            return createComplex(scale * q, -scale);\n-        } else {\n-            double q = imaginary / real;\n-            double scale = 1. / (imaginary * q + real);\n-            return createComplex(scale, -scale * q);\n-        }\n+    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n+        double q = real / imaginary;\n+        double scale = 1. / (real * q + imaginary);\n+        return createComplex(scale * q, -scale);\n+    } else {\n+        double q = imaginary / real;\n+        double scale = 1. / (imaginary * q + real);\n+        return createComplex(scale, -scale * q);\n     }\n+}\n \n     /**\n      * Test for the equality of two Complex objects.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<(0.0, Infinity)> but was:<(Infinity, Infinity)>",
    "test_result": "FAIL"
}