{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n    int rows = m.getRowDimension();\n    int cols = m.getColumnDimension();\n\n    // create a diagonal matrix with the square root of eigenvalues\n    RealMatrix sqrtEigenValuesMat = MatrixUtils.createRealIdentityMatrix(rows);\n    for (int i = 0; i < rows; i++) {\n        double eigenValue = eigenValues.getEntry(i, i);\n        if (eigenValue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n        }\n        sqrtEigenValuesMat.setEntry(i, i, Math.sqrt(eigenValue));\n    }\n\n    // compute the matrix square root using the diagonal matrix of eigenvalues and eigenvectors\n    RealMatrix squareRoot = eigenVectors.multiply(sqrtEigenValuesMat).multiply(eigenVectors.transpose());\n\n    // fix negative eigenvalues that may cause some entries of the square root matrix to be complex numbers\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (!Precision.equals(squareRoot.getEntry(i, j), 2 * squareRoot.getEntry(i, j))) { // test if the entry is a complex number\n                squareRoot.setEntry(i, j, 0.0);\n            }\n        }\n    }\n\n    // ensure matrix is positive semi-definite\n    RealMatrix positiveSemiDefinite = squareRoot.multiply(squareRoot);\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            double a = m.getEntry(i, j);\n            double b = positiveSemiDefinite.getEntry(i, j);\n            positiveSemiDefinite.setEntry(i, j, (a + b) / 2.0);\n        }\n    }\n\n    // return the positive semi-definite square root matrix\n    return squareRoot(positiveSemiDefinite);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..db993d285 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,46 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+    int rows = m.getRowDimension();\n+    int cols = m.getColumnDimension();\n+\n+    // create a diagonal matrix with the square root of eigenvalues\n+    RealMatrix sqrtEigenValuesMat = MatrixUtils.createRealIdentityMatrix(rows);\n+    for (int i = 0; i < rows; i++) {\n+        double eigenValue = eigenValues.getEntry(i, i);\n+        if (eigenValue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n+        }\n+        sqrtEigenValuesMat.setEntry(i, i, Math.sqrt(eigenValue));\n+    }\n+\n+    // compute the matrix square root using the diagonal matrix of eigenvalues and eigenvectors\n+    RealMatrix squareRoot = eigenVectors.multiply(sqrtEigenValuesMat).multiply(eigenVectors.transpose());\n+\n+    // fix negative eigenvalues that may cause some entries of the square root matrix to be complex numbers\n+    for (int i = 0; i < rows; i++) {\n+        for (int j = 0; j < cols; j++) {\n+            if (!Precision.equals(squareRoot.getEntry(i, j), 2 * squareRoot.getEntry(i, j))) { // test if the entry is a complex number\n+                squareRoot.setEntry(i, j, 0.0);\n+            }\n+        }\n     }\n+\n+    // ensure matrix is positive semi-definite\n+    RealMatrix positiveSemiDefinite = squareRoot.multiply(squareRoot);\n+    for (int i = 0; i < rows; ++i) {\n+        for (int j = 0; j < cols; ++j) {\n+            double a = m.getEntry(i, j);\n+            double b = positiveSemiDefinite.getEntry(i, j);\n+            positiveSemiDefinite.setEntry(i, j, (a + b) / 2.0);\n+        }\n+    }\n+\n+    // return the positive semi-definite square root matrix\n+    return squareRoot(positiveSemiDefinite);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}