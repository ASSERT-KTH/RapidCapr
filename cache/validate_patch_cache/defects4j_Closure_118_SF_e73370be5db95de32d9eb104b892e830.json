{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n       child != null;\n       child = child.getNext()) {\n    // Maybe STRING_KEY, STRING, NUMBER, GETPROP, GETELEM, SET\n    if (child.isNumber() || !NodeUtil.isGetOrSetKey(child)) {\n      String name = null;\n      if (child.isStringKey() || child.isString()) {\n        name = child.getString();\n      } else if (child.isGetProp()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        if (firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \".\" + secondChild.getString();\n        }\n      } else if (child.isGetElem()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        if (firstChild != null && secondChild != null &&\n            firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n        }\n      }\n      if (name == null) {\n        continue;\n      }\n      // check that name is a valid property name\n      if (!isValidPropertyName(name)) {\n        continue;\n      }\n      // We should never see a mix of numbers and strings.\n      T type = typeSystem.getType(getScope(), n, name);\n\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child,\n                                  processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}\n\nprivate static boolean isValidPropertyName(String name) {\n  char[] chars = name.toCharArray();\n  int length = chars.length;\n  boolean hasString = false;\n  boolean hasNumber = false;\n  for (int i = 0; i < length; i++) {\n    char ch = chars[i];\n    if (ch >= '0' && ch <= '9') {\n      if (hasString) {\n        return false;\n      }\n      hasNumber = true;\n    } else {\n      if (hasNumber) {\n        return false;\n      }\n      hasString = true;\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..6aefdc5b 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,76 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild();\n+       child != null;\n+       child = child.getNext()) {\n+    // Maybe STRING_KEY, STRING, NUMBER, GETPROP, GETELEM, SET\n+    if (child.isNumber() || !NodeUtil.isGetOrSetKey(child)) {\n+      String name = null;\n+      if (child.isStringKey() || child.isString()) {\n+        name = child.getString();\n+      } else if (child.isGetProp()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        if (firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \".\" + secondChild.getString();\n+        }\n+      } else if (child.isGetElem()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        if (firstChild != null && secondChild != null &&\n+            firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n+        }\n+      }\n+      if (name == null) {\n+        continue;\n+      }\n+      // check that name is a valid property name\n+      if (!isValidPropertyName(name)) {\n+        continue;\n+      }\n+      // We should never see a mix of numbers and strings.\n+      T type = typeSystem.getType(getScope(), n, name);\n+\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child,\n+                                  processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, propertiesToErrorFor.get(name),\n+              Warnings.INVALIDATION, name,\n+              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n         }\n       }\n     }\n+  }\n+}\n+\n+private static boolean isValidPropertyName(String name) {\n+  char[] chars = name.toCharArray();\n+  int length = chars.length;\n+  boolean hasString = false;\n+  boolean hasNumber = false;\n+  for (int i = 0; i < length; i++) {\n+    char ch = chars[i];\n+    if (ch >= '0' && ch <= '9') {\n+      if (hasString) {\n+        return false;\n+      }\n+      hasNumber = true;\n+    } else {\n+      if (hasNumber) {\n+        return false;\n+      }\n+      hasString = true;\n+    }\n+  }\n+  return true;\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: Illegal static declaration in inner class DisambiguateProperties.FindRenameableProperties",
    "test_result": "ERROR"
}