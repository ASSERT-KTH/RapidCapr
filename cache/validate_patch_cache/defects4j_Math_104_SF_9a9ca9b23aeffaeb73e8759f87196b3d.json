{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    double s = 1 / a;\n    double t = s;\n    double v = 1.0;\n    double z = x + 1 - a;\n    double r = z * t;\n    while (Math.abs(t / v) > DEFAULT_EPSILON) {\n        s += t;\n        a += 1.0;\n        v = v * z;\n        t = v / a;\n        r += t;\n    }\n    return Math.exp(-x + Math.log(r));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..94a836baa 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    double s = 1 / a;\n+    double t = s;\n+    double v = 1.0;\n+    double z = x + 1 - a;\n+    double r = z * t;\n+    while (Math.abs(t / v) > DEFAULT_EPSILON) {\n+        s += t;\n+        a += 1.0;\n+        v = v * z;\n+        t = v / a;\n+        r += t;\n+    }\n+    return Math.exp(-x + Math.log(r));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}