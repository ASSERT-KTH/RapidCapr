{
    "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j)){\n            if (n % j == 0) {\n                largest = j;\n                n /= j;\n                j--; // Add this line to keep current j after n is modified\n            }\n        }\n    }\n    return n > 1 ? n : largest;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java b/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\nindex 794cf2e..ccc6c45 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\n@@ -20,8 +20,19 @@ public class LARGEST_PRIME_FACTOR {\n     public static int largest_prime_factor(int n) {\n         int largest = 1;\n         for (int j = 2; j < n; j += 1) {\n-            if (is_prime(j)){\n-                largest = n % j;\n+public static int largest_prime_factor(int n) {\n+    int largest = 1;\n+    for (int j = 2; j < n; j += 1) {\n+        if (is_prime(j)){\n+            if (n % j == 0) {\n+                largest = j;\n+                n /= j;\n+                j--; // Add this line to keep current j after n is modified\n+            }\n+        }\n+    }\n+    return n > 1 ? n : largest;\n+}\n             }\n         }\n         return largest;",
    "result_reason": " /tmp/humaneval-LARGEST_PRIME_FACTOR/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java:[23,1] illegal start of expression",
    "test_result": "ERROR"
}