{
    "patch": "      if (NodeUtil.isGet(parent) && isPrototypeAssignment(parent.getParent())) {\n        return false;\n      }\n\n...\n\n  private static boolean isPrototypeAssignment(Node n) {\n    if (n == null) {\n      return false;\n    }\n    if (NodeUtil.isExprAssign(n)) {\n      return isPrototypeGet(n.getFirstChild());\n    }\n    if (NodeUtil.isObjectLitKey(n) && NodeUtil.isGet(n.getParent())) {\n      return isPrototypeGet(n.getParent().getFirstChild());\n    }\n    return false;\n  }\n\n  private static boolean isPrototypeGet(Node n) {\n    return n != null\n        && n.getType() == Token.GETPROP\n        && \"prototype\".equals(n.getLastChild().getString());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c2dd68cd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,30 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && isPrototypeAssignment(parent.getParent())) {\n+        return false;\n+      }\n+\n+...\n+\n+  private static boolean isPrototypeAssignment(Node n) {\n+    if (n == null) {\n+      return false;\n+    }\n+    if (NodeUtil.isExprAssign(n)) {\n+      return isPrototypeGet(n.getFirstChild());\n+    }\n+    if (NodeUtil.isObjectLitKey(n) && NodeUtil.isGet(n.getParent())) {\n+      return isPrototypeGet(n.getParent().getFirstChild());\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isPrototypeGet(Node n) {\n+    return n != null\n+        && n.getType() == Token.GETPROP\n+        && \"prototype\".equals(n.getLastChild().getString());\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}