{
    "patch": "public static Iterable<Integer> filterOddValues(Iterable<Integer> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (values != null) {\n        for (Integer value : values) {\n            if (value != null && value % 2 == 1) {\n                result.add(value);\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..4afc34c31 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Integer> filterOddValues(Iterable<Integer> values) {\n+    List<Integer> result = new ArrayList<Integer>();\n+    if (values != null) {\n+        for (Integer value : values) {\n+            if (value != null && value % 2 == 1) {\n+                result.add(value);\n+            }\n+        }\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}