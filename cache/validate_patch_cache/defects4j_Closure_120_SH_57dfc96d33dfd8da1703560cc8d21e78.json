{
    "patch": "      int count = 0;\n      for (int i = 0; i < references.size(); i++) {\n        Reference r = references.get(i);\n        if (r.isAssignmentToName() && r.getTargetName().equals(ref.getTargetName())) {\n          count++;\n        }\n        if (count > 1) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bbaf0e30 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int count = 0;\n+      for (int i = 0; i < references.size(); i++) {\n+        Reference r = references.get(i);\n+        if (r.isAssignmentToName() && r.getTargetName().equals(ref.getTargetName())) {\n+          count++;\n+        }\n+        if (count > 1) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}