{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        DateTimeField field = partial.getField(fieldIndex);\n        int minVal = field.getMinimumValue();\n        int maxVal = field.getMaximumValue();\n        int curVal = values[fieldIndex];\n        int newVal = curVal + valueToAdd;\n        if (newVal >= minVal && newVal <= maxVal) {\n            values[fieldIndex] = newVal;\n            for (int i = fieldIndex + 1, isize = partial.size(); i < isize; i++) {\n                field = partial.getField(i);\n                if (values[i] < field.getMinimumValue()) {\n                    values[i] = field.getMinimumValue();\n                } else if (values[i] > field.getMaximumValue()) {\n                    values[i] = field.getMaximumValue();\n                }\n            }\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            LocalDate result = LocalDate.fromMillisOfDay(instant, iChronology);\n            int[] resultValues = new int[partial.size()];\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                resultValues[i] = result.get(partial.getFieldType(i));\n            }\n            return resultValues;\n        }\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f849e95e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,17 +206,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        DateTimeField field = partial.getField(fieldIndex);\n+        int minVal = field.getMinimumValue();\n+        int maxVal = field.getMaximumValue();\n+        int curVal = values[fieldIndex];\n+        int newVal = curVal + valueToAdd;\n+        if (newVal >= minVal && newVal <= maxVal) {\n+            values[fieldIndex] = newVal;\n+            for (int i = fieldIndex + 1, isize = partial.size(); i < isize; i++) {\n+                field = partial.getField(i);\n+                if (values[i] < field.getMinimumValue()) {\n+                    values[i] = field.getMinimumValue();\n+                } else if (values[i] > field.getMaximumValue()) {\n+                    values[i] = field.getMaximumValue();\n+                }\n+            }\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            LocalDate result = LocalDate.fromMillisOfDay(instant, iChronology);\n+            int[] resultValues = new int[partial.size()];\n+            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                resultValues[i] = result.get(partial.getFieldType(i));\n+            }\n+            return resultValues;\n         }\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}