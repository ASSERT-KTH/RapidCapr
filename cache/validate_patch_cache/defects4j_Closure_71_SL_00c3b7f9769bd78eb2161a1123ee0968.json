{
    "patch": "compiler.report(\n    t.makeError(getprop,\n        BAD_PRIVATE_PROPERTY_ACCESS,\n        propertyName,\n        validator.getReadableJSTypeName(\n            getprop.getFirstChild(), true)));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..51675f1f 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,12 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+compiler.report(\n+    t.makeError(getprop,\n+        BAD_PRIVATE_PROPERTY_ACCESS,\n+        propertyName,\n+        validator.getReadableJSTypeName(\n+            getprop.getFirstChild(), true)));\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}