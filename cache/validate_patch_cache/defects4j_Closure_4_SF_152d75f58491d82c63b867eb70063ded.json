{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = false;\n  boolean registryResolved = false;\n  boolean propertiesResolved = false;\n  boolean cycleDetected = false;\n  \n  // Try to resolve the type using the registry\n  registryResolved = resolveViaRegistry(t, enclosing);\n  if (registryResolved) {\n    resolved = isResolved();\n    cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected && !resolved) {\n      handleTypeCycle(t);\n      return null;\n    }\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n  \n  // Try to resolve the type using properties\n  propertiesResolved = resolveViaProperties(t, enclosing);\n  if (propertiesResolved) {\n    resolved = isResolved();\n    cycleDetected = detectImplicitPrototypeCycle();\n    if (cycleDetected && !resolved) {\n      handleTypeCycle(t);\n      return null;\n    }\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n  \n  // If either registry or properties resolved the type, we're done\n  if (resolved) {\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // If neither resolved the type, handle a potential cycle and return null\n  cycleDetected = detectImplicitPrototypeCycle();\n  if (cycleDetected) {\n    handleTypeCycle(t);\n  }\n  \n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..9e0492c1 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,57 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = false;\n+  boolean registryResolved = false;\n+  boolean propertiesResolved = false;\n+  boolean cycleDetected = false;\n+  \n+  // Try to resolve the type using the registry\n+  registryResolved = resolveViaRegistry(t, enclosing);\n+  if (registryResolved) {\n+    resolved = isResolved();\n+    cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected && !resolved) {\n       handleTypeCycle(t);\n+      return null;\n     }\n-\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+  }\n+  \n+  // Try to resolve the type using properties\n+  propertiesResolved = resolveViaProperties(t, enclosing);\n+  if (propertiesResolved) {\n+    resolved = isResolved();\n+    cycleDetected = detectImplicitPrototypeCycle();\n+    if (cycleDetected && !resolved) {\n       handleTypeCycle(t);\n+      return null;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+    if (resolved) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n+  \n+  // If either registry or properties resolved the type, we're done\n+  if (resolved) {\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+\n+  // If neither resolved the type, handle a potential cycle and return null\n+  cycleDetected = detectImplicitPrototypeCycle();\n+  if (cycleDetected) {\n+    handleTypeCycle(t);\n+  }\n+  \n+  return null;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}