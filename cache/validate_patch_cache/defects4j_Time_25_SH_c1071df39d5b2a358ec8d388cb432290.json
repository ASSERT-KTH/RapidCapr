{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    // Simple case: the instant is not in a DST gap\n    return offsetAdjusted;\n} else if (offsetLocal < offsetAdjusted) {\n    // We are near a DST spring-forward transition\n    // If next transition is in less than one day, we are on a DST gap\n    long nextTransition = nextTransition(instantAdjusted);\n    if (nextTransition > (instantLocal - offsetLocal) + DateTimeConstants.MILLIS_PER_DAY) {\n        return offsetLocal;\n    }\n} else { // offsetLocal > offsetAdjusted\n    // We are near a DST fall-back transition\n    // If previous transition is in less than one day, we are on a DST gap\n    long prevTransition = previousTransition(instantAdjusted);\n    if (prevTransition > (instantLocal - offsetLocal) + DateTimeConstants.MILLIS_PER_DAY) {\n        return offsetLocal;\n    }\n}\n\n// The instant is in a DST gap\nfinal int minOffsetAdjusted = getOffset(instantLocal - 1L);\nfinal int maxOffsetAdjusted = offsetAdjusted;\nif (minOffsetAdjusted != maxOffsetAdjusted) {\n    long prevTransition = previousTransition(instantAdjusted);\n    if (prevTransition == instantAdjusted - 1L) {\n        // a duplicate local time\n        prevTransition = previousTransition(prevTransition);\n    }\n    if (prevTransition < instantLocal - 1L &&\n            getOffset(prevTransition) == maxOffsetAdjusted) {\n        // gap bridged\n        return maxOffsetAdjusted;\n    } else {\n        return minOffsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..debc688b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    // Simple case: the instant is not in a DST gap\n+    return offsetAdjusted;\n+} else if (offsetLocal < offsetAdjusted) {\n+    // We are near a DST spring-forward transition\n+    // If next transition is in less than one day, we are on a DST gap\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (nextTransition > (instantLocal - offsetLocal) + DateTimeConstants.MILLIS_PER_DAY) {\n+        return offsetLocal;\n+    }\n+} else { // offsetLocal > offsetAdjusted\n+    // We are near a DST fall-back transition\n+    // If previous transition is in less than one day, we are on a DST gap\n+    long prevTransition = previousTransition(instantAdjusted);\n+    if (prevTransition > (instantLocal - offsetLocal) + DateTimeConstants.MILLIS_PER_DAY) {\n+        return offsetLocal;\n+    }\n+}\n+\n+// The instant is in a DST gap\n+final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n+final int maxOffsetAdjusted = offsetAdjusted;\n+if (minOffsetAdjusted != maxOffsetAdjusted) {\n+    long prevTransition = previousTransition(instantAdjusted);\n+    if (prevTransition == instantAdjusted - 1L) {\n+        // a duplicate local time\n+        prevTransition = previousTransition(prevTransition);\n+    }\n+    if (prevTransition < instantLocal - 1L &&\n+            getOffset(prevTransition) == maxOffsetAdjusted) {\n+        // gap bridged\n+        return maxOffsetAdjusted;\n+    } else {\n+        return minOffsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}