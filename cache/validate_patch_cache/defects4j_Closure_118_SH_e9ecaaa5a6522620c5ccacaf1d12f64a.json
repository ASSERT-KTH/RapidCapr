{
    "patch": "private void appendPropertyString(Node n, StringBuilder sb) {\n  Node left = n.getFirstChild();\n  if (left != null) {\n    if (left.isGetProp()) {\n      appendPropertyString(left, sb);\n    } else if (left.isString()) {\n      sb.append(left.getString());\n    }\n  }\n  Node right = n.getLastChild();\n  if (right != null && right.isString()) {\n    sb.append('.');\n    sb.append(right.getString());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..20714e0e 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,21 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void appendPropertyString(Node n, StringBuilder sb) {\n+  Node left = n.getFirstChild();\n+  if (left != null) {\n+    if (left.isGetProp()) {\n+      appendPropertyString(left, sb);\n+    } else if (left.isString()) {\n+      sb.append(left.getString());\n+    }\n+  }\n+  Node right = n.getLastChild();\n+  if (right != null && right.isString()) {\n+    sb.append('.');\n+    sb.append(right.getString());\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}