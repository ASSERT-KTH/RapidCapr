{
    "patch": "      Node enclosingFn = NodeUtil.getEnclosingFunction(n);\n      if (n.getParent() != enclosingFn) {\n        // the function is not in the body of its declaring function\n        // therefore it must be traversed.\n        return true;\n      }\n      JSDocInfo fnDoc = NodeUtil.getBestJSDocInfo(enclosingFn);\n      // if there is no doc on the enclosing function, we assume it allows `@this`.\n      boolean declaresThis =\n          fnDoc != null ? fnDoc.getThisType() != null : true;\n      if (declaresThis) {\n        boolean callableOrInferredAsCallable = NodeUtil.isCallable(enclosingFn);\n        if (callableOrInferredAsCallable) {\n          return true;\n        }\n      }\n\n      // the function is not getting lent to a prototype.\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f595f3b0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node enclosingFn = NodeUtil.getEnclosingFunction(n);\n+      if (n.getParent() != enclosingFn) {\n+        // the function is not in the body of its declaring function\n+        // therefore it must be traversed.\n+        return true;\n+      }\n+      JSDocInfo fnDoc = NodeUtil.getBestJSDocInfo(enclosingFn);\n+      // if there is no doc on the enclosing function, we assume it allows `@this`.\n+      boolean declaresThis =\n+          fnDoc != null ? fnDoc.getThisType() != null : true;\n+      if (declaresThis) {\n+        boolean callableOrInferredAsCallable = NodeUtil.isCallable(enclosingFn);\n+        if (callableOrInferredAsCallable) {\n+          return true;\n+        }\n+      }\n+\n+      // the function is not getting lent to a prototype.\n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}