{
    "patch": "    // Collect all the parameters before removing them to correctly update their default values\n    List<Node> parameters = new ArrayList<>();\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      parameters.add(arg);\n    }\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      List<Node> removedArgs = new ArrayList<>();\n      List<Node> defaultValues = new ArrayList<>();\n      for (ListIterator<Node> itr = parameters.listIterator(parameters.size()); itr.hasPrevious();) {\n        Node arg = itr.previous();\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          removedArgs.add(arg);\n          argList.removeChild(arg);\n\n          Node defaultValue = arg.getSecondChild();\n          if (defaultValue != null) {\n            defaultValues.add(defaultValue);\n            arg.removeChild(defaultValue);\n          }\n\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // Remove the default values if they are unused\n      for (int i = 0; i < removedArgs.size(); i++) {\n        Node defaultValue = defaultValues.get(i);\n        if (NodeUtil.getReferencesToName(defaultValue, defaultValue.getString(), function.getNext()) == null) {\n          defaultValue.detach();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..64dd64d2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Collect all the parameters before removing them to correctly update their default values\n+    List<Node> parameters = new ArrayList<>();\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      parameters.add(arg);\n+    }\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      List<Node> removedArgs = new ArrayList<>();\n+      List<Node> defaultValues = new ArrayList<>();\n+      for (ListIterator<Node> itr = parameters.listIterator(parameters.size()); itr.hasPrevious();) {\n+        Node arg = itr.previous();\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          removedArgs.add(arg);\n+          argList.removeChild(arg);\n+\n+          Node defaultValue = arg.getSecondChild();\n+          if (defaultValue != null) {\n+            defaultValues.add(defaultValue);\n+            arg.removeChild(defaultValue);\n+          }\n+\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // Remove the default values if they are unused\n+      for (int i = 0; i < removedArgs.size(); i++) {\n+        Node defaultValue = defaultValues.get(i);\n+        if (NodeUtil.getReferencesToName(defaultValue, defaultValue.getString(), function.getNext()) == null) {\n+          defaultValue.detach();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}