{
    "patch": "      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n        name.setLineno(functionNode.getLineno());\n        // The function keyword immediately precedes the name, so assume\n        // they both start on the same character position.  (Otherwise, we'd\n        // need a getFunctionDeclarationPos() method.)\n        name.setCharno(position2charno(functionNode.getBody().getAbsolutePosition()));\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // Add line number and charno for left paren.\n      lp.setLineno(functionNode.getBody().getLineno());\n      lp.setCharno(position2charno(functionNode.getBody().getAbsolutePosition() + 1));\n\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..b04d1c80 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,36 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Name name = functionNode.getFunctionName();\n+      Boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+        name.setLineno(functionNode.getLineno());\n+        // The function keyword immediately precedes the name, so assume\n+        // they both start on the same character position.  (Otherwise, we'd\n+        // need a getFunctionDeclarationPos() method.)\n+        name.setCharno(position2charno(functionNode.getBody().getAbsolutePosition()));\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      // Add line number and charno for left paren.\n+      lp.setLineno(functionNode.getBody().getLineno());\n+      lp.setCharno(position2charno(functionNode.getBody().getAbsolutePosition() + 1));\n+\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+      return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}