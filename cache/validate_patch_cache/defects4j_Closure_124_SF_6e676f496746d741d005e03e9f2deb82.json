{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n    if (node.isName()) {\n        return true;\n    }\n\n    if (!node.isGetProp() && !node.isCall()) {\n        return true;\n    }\n\n    Node object = node.getFirstChild();\n    Preconditions.checkState(object != null, node);\n\n    if (object.isGetProp() || object.isCall()) {\n        return isSafeReplacement(object, replacement);\n    }\n\n    if (object.isString()) {\n        String computedPropName = object.getString();\n        if (isNameAssignedTo(computedPropName, replacement)) {\n            return false;\n        }\n    }\n\n    if (node.isGetProp()) {\n        return isSafeReplacement(node.getFirstChild(), replacement);\n    }\n\n    Node callee = node.getFirstChild();\n    Preconditions.checkState(callee.isName() || callee.isGetProp() || callee.isString(), node);\n\n    if (callee.isGetProp() || callee.isString()) {\n        return isSafeReplacement(callee, replacement);\n    }\n\n    return !isNameAssignedTo(callee.getString(), replacement);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..aab12aea 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,42 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n+private boolean isSafeReplacement(Node node, Node replacement) {\n     if (node.isName()) {\n-      return true;\n+        return true;\n     }\n-    Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+    if (!node.isGetProp() && !node.isCall()) {\n+        return true;\n     }\n \n-    return true;\n-  }\n+    Node object = node.getFirstChild();\n+    Preconditions.checkState(object != null, node);\n+\n+    if (object.isGetProp() || object.isCall()) {\n+        return isSafeReplacement(object, replacement);\n+    }\n+\n+    if (object.isString()) {\n+        String computedPropName = object.getString();\n+        if (isNameAssignedTo(computedPropName, replacement)) {\n+            return false;\n+        }\n+    }\n+\n+    if (node.isGetProp()) {\n+        return isSafeReplacement(node.getFirstChild(), replacement);\n+    }\n+\n+    Node callee = node.getFirstChild();\n+    Preconditions.checkState(callee.isName() || callee.isGetProp() || callee.isString(), node);\n+\n+    if (callee.isGetProp() || callee.isString()) {\n+        return isSafeReplacement(callee, replacement);\n+    }\n+\n+    return !isNameAssignedTo(callee.getString(), replacement);\n+}\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +262,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}