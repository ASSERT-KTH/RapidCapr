{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node grandparent = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (grandparent.isCall()) {\n        Node callTarget = grandparent.getFirstChild();\n        if (callTarget.isGetProp()\n            && name.getString().equals(\"call\")) {\n          callTarget = callTarget.getFirstChild();\n        }\n        if (callTarget.isFunction()) {\n          Node body = callTarget.getLastChild();\n          Node possibleThisValue = name.getNext();\n          boolean thisUsed = new NodeUtil().has(\n              body, possibleThisValue);\n          // A call target may be using the object as a 'this' value\n          if (thisUsed) {\n            continue;\n          }\n        }\n        if (grandparent.getFirstChild() == parent) {\n          // We have a property referring to this property,\n          // so we can't inline\n          continue;\n        }\n      }\n\n      // bail out if we see a reference to a property that isn't defined\n      // on the object literal\n      continue;\n    }\n\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node value = ref.getAssignedValue();\n    if (value == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    if (!value.isObjectLit()) {\n      // We're looking for object literal assignments only.\n      continue;\n    }\n\n    // Make sure that the value is not self-referential\n    for (Node key = value.getFirstChild(); key != null;\n         key = key.getNext()) {\n      if (key.isGetterDef() || key.isSetterDef()) {\n        // getters/setters are not handled by this pass\n        return false;\n      }\n\n      Node childValue = key.getFirstChild();\n      boolean selfReferential = false;\n      for (Reference reference : refs) {\n        if (NodeUtil.isReferenceTo(childValue, reference.getNode())) {\n          Node parentOfReference = reference.getParent();\n          if (!NodeUtil.isParent(childValue, parentOfReference)) {\n            selfReferential = true;\n            break;\n          }\n        }\n      }\n      if (selfReferential) {\n        return false;\n      }\n    }\n\n    ret = true;\n  }\n  return ret;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..a74e3035 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,89 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n+private boolean isInlinableObject(List<Reference> refs) {\n+  boolean ret = false;\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node grandparent = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      if (grandparent.isCall()) {\n+        Node callTarget = grandparent.getFirstChild();\n+        if (callTarget.isGetProp()\n+            && name.getString().equals(\"call\")) {\n+          callTarget = callTarget.getFirstChild();\n+        }\n+        if (callTarget.isFunction()) {\n+          Node body = callTarget.getLastChild();\n+          Node possibleThisValue = name.getNext();\n+          boolean thisUsed = new NodeUtil().has(\n+              body, possibleThisValue);\n+          // A call target may be using the object as a 'this' value\n+          if (thisUsed) {\n+            continue;\n           }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n+        }\n+        if (grandparent.getFirstChild() == parent) {\n+          // We have a property referring to this property,\n+          // so we can't inline\n           continue;\n         }\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      // bail out if we see a reference to a property that isn't defined\n+      // on the object literal\n+      continue;\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+    if (!isVarOrAssignExprLhs(name)) {\n+      return false;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    Node value = ref.getAssignedValue();\n+    if (value == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    if (!value.isObjectLit()) {\n+      // We're looking for object literal assignments only.\n+      continue;\n+    }\n \n+    // Make sure that the value is not self-referential\n+    for (Node key = value.getFirstChild(); key != null;\n+         key = key.getNext()) {\n+      if (key.isGetterDef() || key.isSetterDef()) {\n+        // getters/setters are not handled by this pass\n+        return false;\n+      }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+      Node childValue = key.getFirstChild();\n+      boolean selfReferential = false;\n+      for (Reference reference : refs) {\n+        if (NodeUtil.isReferenceTo(childValue, reference.getNode())) {\n+          Node parentOfReference = reference.getParent();\n+          if (!NodeUtil.isParent(childValue, parentOfReference)) {\n+            selfReferential = true;\n+            break;\n           }\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n       }\n-      return ret;\n+      if (selfReferential) {\n+        return false;\n+      }\n     }\n \n+    ret = true;\n+  }\n+  return ret;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: NodeUtil() has private access in NodeUtil",
    "test_result": "ERROR"
}