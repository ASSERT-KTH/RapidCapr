{
    "patch": "        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            System.gc();\n            final long maxMemory = Runtime.getRuntime().maxMemory();\n            final long newMemory = (long) (maxMemory * 1.5);\n            final boolean success = newMemory < Integer.MAX_VALUE;\n            if (success) {\n                System.gc();\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException ex) {\n                    Thread.currentThread().interrupt();\n                }\n                return squareRoot(m, newMemory);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    \n    private RealMatrix squareRoot(RealMatrix m, long newMemory) {\n        try {\n            final EigenDecomposition dec = new EigenDecomposition(m, newMemory);\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            System.gc();\n            return squareRoot(m, newMemory);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cbd813dbb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        } catch (OutOfMemoryError e) {\n+            System.gc();\n+            final long maxMemory = Runtime.getRuntime().maxMemory();\n+            final long newMemory = (long) (maxMemory * 1.5);\n+            final boolean success = newMemory < Integer.MAX_VALUE;\n+            if (success) {\n+                System.gc();\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException ex) {\n+                    Thread.currentThread().interrupt();\n+                }\n+                return squareRoot(m, newMemory);\n+            }\n+            else {\n+                throw e;\n+            }\n+        }\n     }\n+    \n+    private RealMatrix squareRoot(RealMatrix m, long newMemory) {\n+        try {\n+            final EigenDecomposition dec = new EigenDecomposition(m, newMemory);\n+            return dec.getSquareRoot();\n+        } catch (OutOfMemoryError e) {\n+            System.gc();\n+            return squareRoot(m, newMemory);\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}