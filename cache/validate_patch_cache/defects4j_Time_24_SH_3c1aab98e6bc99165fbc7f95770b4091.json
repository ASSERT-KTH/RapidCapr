{
    "patch": "try {\n    // Set all the fields from left to right\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // If the first field is a year or weekyear, round down to nearest valid value before setting remaining fields\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.year() ||\n            first.getType() == DateTimeFieldType.weekyear() ||\n            first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n        millis = first.roundFloor(millis);\n        for (int i = 1; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } else {\n        throw e;\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bc2cbc58 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    // Set all the fields from left to right\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // If the first field is a year or weekyear, round down to nearest valid value before setting remaining fields\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.year() ||\n+            first.getType() == DateTimeFieldType.weekyear() ||\n+            first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+        millis = first.roundFloor(millis);\n+        for (int i = 1; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } else {\n+        throw e;\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}