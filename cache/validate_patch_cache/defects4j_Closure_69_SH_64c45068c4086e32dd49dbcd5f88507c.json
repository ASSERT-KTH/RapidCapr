{
    "patch": "if (functionType.getTypeOfThis() != null && !NodeUtil.isGetOrSetKey(n.getParent())) {\n    boolean thisTypeExpected = true;\n    if (functionType.getTypeOfThis() instanceof AllType) {\n        // If the function accepts any type, it can be called without a specified \"this\" type.\n        // See https://github.com/google/closure-compiler/issues/3666\n        thisTypeExpected = false;\n    } else if (NodeUtil.isObjectLitKey(n) ||\n            (child.isName() && n.getParent().isAssign())) {\n        // Object literal methods can be called without specifying a \"this\" type, so we shouldn't expect it.\n        // In addition, if the function is simply being assigned to a variable, we should not expect a \"this\" type.\n        thisTypeExpected = false;\n    }\n    if (thisTypeExpected) {\n        report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8fb59188 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null && !NodeUtil.isGetOrSetKey(n.getParent())) {\n+    boolean thisTypeExpected = true;\n+    if (functionType.getTypeOfThis() instanceof AllType) {\n+        // If the function accepts any type, it can be called without a specified \"this\" type.\n+        // See https://github.com/google/closure-compiler/issues/3666\n+        thisTypeExpected = false;\n+    } else if (NodeUtil.isObjectLitKey(n) ||\n+            (child.isName() && n.getParent().isAssign())) {\n+        // Object literal methods can be called without specifying a \"this\" type, so we shouldn't expect it.\n+        // In addition, if the function is simply being assigned to a variable, we should not expect a \"this\" type.\n+        thisTypeExpected = false;\n+    }\n+    if (thisTypeExpected) {\n+        report(t, n, EXPECTED_THIS_TYPE, functionType.getTypeOfThis().toString());\n+    }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}