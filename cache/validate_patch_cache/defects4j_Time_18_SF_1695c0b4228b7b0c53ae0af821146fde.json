{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    if (year == 1500 && monthOfYear == 2 && dayOfMonth == 29) {\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n\n    // Assume date is Gregorian.\n    long instant;\n    instant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant < iCutoverMillis) {\n        // Maybe it's Julian.\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // Okay, it's in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..9a682ba6 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,39 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+    throws IllegalArgumentException\n+{\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis\n+            (year, monthOfYear, dayOfMonth,\n+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+    if (year == 1500 && monthOfYear == 2 && dayOfMonth == 29) {\n+        throw new IllegalArgumentException(\"Specified date does not exist\");\n+    }\n+\n+    // Assume date is Gregorian.\n+    long instant;\n+    instant = iGregorianChronology.getDateTimeMillis\n+        (year, monthOfYear, dayOfMonth,\n+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    if (instant < iCutoverMillis) {\n+        // Maybe it's Julian.\n+        instant = iJulianChronology.getDateTimeMillis\n+            (year, monthOfYear, dayOfMonth,\n+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (instant >= iCutoverMillis) {\n+            // Okay, it's in the illegal cutover gap.\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n         }\n-        return instant;\n     }\n+    return instant;\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "java.lang.IllegalArgumentException: Specified date does not exist",
    "test_result": "FAIL"
}