{
    "patch": "      // Attach literal types to the node.\n      // This is needed for type inference to work properly (e.g. for switch statements).\n      attachLiteralTypes(n);\n\n      // Check the type of the node and call the appropriate function to define the variable.\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..35a8fa5a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,7 +1448,11 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+      // Attach literal types to the node.\n+      // This is needed for type inference to work properly (e.g. for switch statements).\n       attachLiteralTypes(n);\n+\n+      // Check the type of the node and call the appropriate function to define the variable.\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1462,6 +1466,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}