{
    "patch": "    if (token instanceof JsDocName) {\n      return parseTypeName(token);\n    }\n    if (token instanceof JsDocTypeGeneric) {\n      Node result = parseTypeName(token);\n      return result;\n    }\n    if (token instanceof JsDocToken)? {\n      throw new JsDocSyntaxException(\"Bad type name: \" + token);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..1e0e12fd 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,16 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token instanceof JsDocName) {\n+      return parseTypeName(token);\n+    }\n+    if (token instanceof JsDocTypeGeneric) {\n+      Node result = parseTypeName(token);\n+      return result;\n+    }\n+    if (token instanceof JsDocToken)? {\n+      throw new JsDocSyntaxException(\"Bad type name: \" + token);\n+    }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}