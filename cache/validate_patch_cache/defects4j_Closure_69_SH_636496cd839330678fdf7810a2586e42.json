{
    "patch": "      if (functionType.getTypeOfThis() != null\n          && functionType.getTypeOfThis() != JSType.UNKNOWN) {\n        Node parent = n.getParent();\n        if (parent.getType() != Token.GETPROP &&\n            parent.getType() != Token.GETELEM &&\n            parent.getType() != Token.CALL &&\n            parent.getType() != Token.NEW) {\n          report(t, n, FUNCTION_MASKS_THIS);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2508ed57 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null\n+          && functionType.getTypeOfThis() != JSType.UNKNOWN) {\n+        Node parent = n.getParent();\n+        if (parent.getType() != Token.GETPROP &&\n+            parent.getType() != Token.GETELEM &&\n+            parent.getType() != Token.CALL &&\n+            parent.getType() != Token.NEW) {\n+          report(t, n, FUNCTION_MASKS_THIS);\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}