{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n>>> [ INFILL ] <<<\n      if (name.globalSets == 1 && name.localSets == 0 && name.getAliasingGets() == 0 &&\n          name.props != null && name.props.size() == 1) {\n        // {@code name} meets condition (b).\n        Name alias = Iterables.getOnlyElement(name.props);\n        if (alias != null && alias.type == Name.Type.ALIAS &&\n            alias.globalSets == 1 && alias.localSets == 0 &&\n            alias.getAliasingGets() == 0 && alias.getRefs().size() == 2) {\n          // {@code alias} meets condition (c).\n          Ref refToRemove = name.getRefs().iterator().next();\n          Ref refToReplace = alias.getRefs().iterator().next();\n          refToReplace.name = name;\n          refToRemove.name = null;\n          alias.removeRef(refToReplace);\n          name.removeRef(refToRemove);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..541b02c1 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,32 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+  private void inlineAliases(GlobalNamespace namespace) {\n+    // Invariant: All the names in the worklist meet condition (a).\n+    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    while (!workList.isEmpty()) {\n+      Name name = workList.pop();\n+\n+      // Don't attempt to inline a getter or setter property as a variable.\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+        continue;\n+      }\n+\n+>>> [ INFILL ] <<<\n+      if (name.globalSets == 1 && name.localSets == 0 && name.getAliasingGets() == 0 &&\n+          name.props != null && name.props.size() == 1) {\n+        // {@code name} meets condition (b).\n+        Name alias = Iterables.getOnlyElement(name.props);\n+        if (alias != null && alias.type == Name.Type.ALIAS &&\n+            alias.globalSets == 1 && alias.localSets == 0 &&\n+            alias.getAliasingGets() == 0 && alias.getRefs().size() == 2) {\n+          // {@code alias} meets condition (c).\n+          Ref refToRemove = name.getRefs().iterator().next();\n+          Ref refToReplace = alias.getRefs().iterator().next();\n+          refToReplace.name = name;\n+          refToRemove.name = null;\n+          alias.removeRef(refToReplace);\n+          name.removeRef(refToRemove);\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}