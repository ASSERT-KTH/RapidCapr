{
    "patch": "public static String decodeISO8859_1_ESCAPE(String str) {\n    StringBuilder builder = new StringBuilder();\n    int i = 0;\n    char c;\n\n    while (i < str.length()) {\n        c = str.charAt(i);\n        if (c == '\\\\' && i + 6 < str.length() && str.charAt(i + 1) == 'u'\n            && isHexDigit(str.charAt(i + 2)) && isHexDigit(str.charAt(i + 3))\n            && isHexDigit(str.charAt(i + 4)) && isHexDigit(str.charAt(i + 5))) {\n            int unicodeValue = Integer.parseInt(str.substring(i + 2, i + 6), 16);\n            builder.append((char) unicodeValue);\n            i += 6;\n        } else if (c == '\\\\' && i + 3 < str.length() && str.charAt(i + 1) == 'x'\n            && isHexDigit(str.charAt(i + 2)) && isHexDigit(str.charAt(i + 3))) {\n            int hexValue = Integer.parseInt(str.substring(i + 2, i + 4), 16);\n            builder.append((char) hexValue);\n            i += 4;\n        } else if (c == '\\\\') {\n            if (i + 1 < str.length()) {\n                builder.append(str.charAt(i + 1));\n                i += 2;\n            } else {\n                builder.append(c);\n                i++;\n            }\n        } else {\n            builder.append(c);\n            i++;\n        }\n    }\n\n    return builder.toString();\n}\n\npublic static boolean isHexDigit(char c) {\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..7c27bc21 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,44 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decodeISO8859_1_ESCAPE(String str) {\n+    StringBuilder builder = new StringBuilder();\n+    int i = 0;\n+    char c;\n+\n+    while (i < str.length()) {\n+        c = str.charAt(i);\n+        if (c == '\\\\' && i + 6 < str.length() && str.charAt(i + 1) == 'u'\n+            && isHexDigit(str.charAt(i + 2)) && isHexDigit(str.charAt(i + 3))\n+            && isHexDigit(str.charAt(i + 4)) && isHexDigit(str.charAt(i + 5))) {\n+            int unicodeValue = Integer.parseInt(str.substring(i + 2, i + 6), 16);\n+            builder.append((char) unicodeValue);\n+            i += 6;\n+        } else if (c == '\\\\' && i + 3 < str.length() && str.charAt(i + 1) == 'x'\n+            && isHexDigit(str.charAt(i + 2)) && isHexDigit(str.charAt(i + 3))) {\n+            int hexValue = Integer.parseInt(str.substring(i + 2, i + 4), 16);\n+            builder.append((char) hexValue);\n+            i += 4;\n+        } else if (c == '\\\\') {\n+            if (i + 1 < str.length()) {\n+                builder.append(str.charAt(i + 1));\n+                i += 2;\n+            } else {\n+                builder.append(c);\n+                i++;\n+            }\n+        } else {\n+            builder.append(c);\n+            i++;\n+        }\n+    }\n+\n+    return builder.toString();\n+}\n+\n+public static boolean isHexDigit(char c) {\n+    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}