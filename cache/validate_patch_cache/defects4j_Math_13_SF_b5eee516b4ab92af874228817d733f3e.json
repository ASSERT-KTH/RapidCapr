{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-12);\n    if (!dec.getEigenvalues().stream().allMatch(v -> v >= 0)) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n    }\n    RealMatrix sqrtM;\n    try {\n        sqrtM = dec.getSquareRoot();\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix square root could not be computed\");\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..49bf1c97e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-12);\n+    if (!dec.getEigenvalues().stream().allMatch(v -> v >= 0)) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\");\n     }\n+    RealMatrix sqrtM;\n+    try {\n+        sqrtM = dec.getSquareRoot();\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix square root could not be computed\");\n+    }\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}