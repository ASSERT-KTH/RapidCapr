{
    "patch": "    private static String unprotectRegExp(String aRegExp) {\n        Context rhsContext = Context.OTHER;\n        boolean inForInit = false;\n        boolean reScan = true;\n        boolean wasUnary = false;\n        StringBuilder b = new StringBuilder(aRegExp.length() + 2);\n        char[] input = aRegExp.toCharArray();\n        int end = input.length;\n        int opnd = REOP_NOP;\n        b.append('/');\n        for (int i = 0; i != end; i++) {\n            char ch = input[i];\n            boolean inContext = inForInit || (reScan && rhsContext == Context.REGEXP);\n            if (reScan) {\n                opnd = REOP_CLASS;\n                reScan = false;\n            }\n            b.append(ch);\n        }\n        b.append('/');\n        return b.toString();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}