{
    "patch": "public static Properties getConfig() { \n    Properties properties = new Properties(); \n    InputStream inputStream = null; \n\n    try { \n        inputStream = Myclass.class.getClassLoader().getResourceAsStream(\"config.properties\"); \n\n        if (inputStream == null) { \n            System.err.println(\"Could not find 'config.properties' file in the classpath\"); \n        } else { \n            properties.load(inputStream); \n        } \n    } catch (IOException e) { \n        System.err.println(\"Error while loading 'config.properties' file\"); \n    } finally { \n        if (inputStream != null) { \n            try { \n                inputStream.close(); \n            } catch (IOException e) { \n                System.err.println(\"Error while closing stream for 'config.properties' file\"); \n            } \n        } \n    } \n\n    return properties; \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..074dd2c9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static Properties getConfig() { \n+    Properties properties = new Properties(); \n+    InputStream inputStream = null; \n+\n+    try { \n+        inputStream = Myclass.class.getClassLoader().getResourceAsStream(\"config.properties\"); \n+\n+        if (inputStream == null) { \n+            System.err.println(\"Could not find 'config.properties' file in the classpath\"); \n+        } else { \n+            properties.load(inputStream); \n+        } \n+    } catch (IOException e) { \n+        System.err.println(\"Error while loading 'config.properties' file\"); \n+    } finally { \n+        if (inputStream != null) { \n+            try { \n+                inputStream.close(); \n+            } catch (IOException e) { \n+                System.err.println(\"Error while closing stream for 'config.properties' file\"); \n+            } \n+        } \n+    } \n+\n+    return properties; \n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}