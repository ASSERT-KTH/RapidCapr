{
    "patch": "public static String fixCode(String code) {\n    String fixedCode = code;\n    Pattern pattern = Pattern.compile(\"(for\\\\s*\\\\(.*;.*;.*\\\\))(.*?\\\\{)\");\n    Matcher matcher = pattern.matcher(fixedCode);\n    while (matcher.find()) {\n        String forLoop = matcher.group(1);\n        String statement = matcher.group(2);\n        statement = statement.replaceAll(\"\\\\b(\\\\d+)\\\\b\", \"[$1 in d]\");\n        statement = statement.replaceAll(\"\\\\b(\\\\w+)\\\\s+in\\\\s+([^\\\\s]+)\", \"$2.indexOf($1) >= 0\");\n        String newForLoop = forLoop.substring(0, forLoop.length() - 1) + \" \" + statement + \"}\";\n        fixedCode = fixedCode.replace(matcher.group(0), newForLoop);\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..76caff82 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,20 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String fixedCode = code;\n+    Pattern pattern = Pattern.compile(\"(for\\\\s*\\\\(.*;.*;.*\\\\))(.*?\\\\{)\");\n+    Matcher matcher = pattern.matcher(fixedCode);\n+    while (matcher.find()) {\n+        String forLoop = matcher.group(1);\n+        String statement = matcher.group(2);\n+        statement = statement.replaceAll(\"\\\\b(\\\\d+)\\\\b\", \"[$1 in d]\");\n+        statement = statement.replaceAll(\"\\\\b(\\\\w+)\\\\s+in\\\\s+([^\\\\s]+)\", \"$2.indexOf($1) >= 0\");\n+        String newForLoop = forLoop.substring(0, forLoop.length() - 1) + \" \" + statement + \"}\";\n+        fixedCode = fixedCode.replace(matcher.group(0), newForLoop);\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}