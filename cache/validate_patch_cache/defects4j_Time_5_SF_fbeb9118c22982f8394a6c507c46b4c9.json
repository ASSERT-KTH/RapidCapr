{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    ISOChronology chrono = ISOChronology.getInstanceUTC();\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, chrono);\n\n    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n    boolean weeksSupported = type.isSupported(DurationFieldType.weeks());\n    boolean daysSupported = type.isSupported(DurationFieldType.days());\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n\n    if (yearsSupported || monthsSupported) {\n        // Calculate total months in the period\n        int totalMonths = years * 12 + months;\n\n        if (weeksSupported || daysSupported) {\n            // Add remaining days to the period\n            int remainingDays = days;\n            if (weeksSupported) {\n                remainingDays += weeks * 7;\n            }\n\n            // Add remaining months to the period\n            int remainingMonths = remainingDays / 30;\n            remainingDays %= 30;\n            totalMonths += remainingMonths;\n\n            // Adjust for overflow\n            if (totalMonths < 0 && remainingDays > 0) {\n                totalMonths += 1;\n                remainingDays -= 30;\n            } else if (totalMonths > 0 && remainingDays < 0) {\n                totalMonths -= 1;\n                remainingDays += 30;\n            }\n\n            // Add or subtract the remaining months to/from the period\n            months = totalMonths % 12;\n            years = totalMonths / 12;\n        }\n\n        // Add the total years and months to the period\n        if (yearsSupported && years != getYears()) {\n            result = result.withYears(years);\n        }\n        if (monthsSupported && months != getMonths()) {\n            result = result.withMonths(months);\n        }\n    }\n\n    // Add weeks and days to the period\n    if (weeksSupported && weeks != getWeeks()) {\n        result = result.withWeeks(weeks);\n    }\n    if (daysSupported && days != getDays()) {\n        result = result.withDays(days);\n    }\n\n    return result.normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2f791826 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,75 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    ISOChronology chrono = ISOChronology.getInstanceUTC();\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, type, chrono);\n+\n+    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n+    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n+    boolean weeksSupported = type.isSupported(DurationFieldType.weeks());\n+    boolean daysSupported = type.isSupported(DurationFieldType.days());\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    if (yearsSupported || monthsSupported) {\n+        // Calculate total months in the period\n+        int totalMonths = years * 12 + months;\n+\n+        if (weeksSupported || daysSupported) {\n+            // Add remaining days to the period\n+            int remainingDays = days;\n+            if (weeksSupported) {\n+                remainingDays += weeks * 7;\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+\n+            // Add remaining months to the period\n+            int remainingMonths = remainingDays / 30;\n+            remainingDays %= 30;\n+            totalMonths += remainingMonths;\n+\n+            // Adjust for overflow\n+            if (totalMonths < 0 && remainingDays > 0) {\n+                totalMonths += 1;\n+                remainingDays -= 30;\n+            } else if (totalMonths > 0 && remainingDays < 0) {\n+                totalMonths -= 1;\n+                remainingDays += 30;\n             }\n+\n+            // Add or subtract the remaining months to/from the period\n+            months = totalMonths % 12;\n+            years = totalMonths / 12;\n         }\n-        return result;\n+\n+        // Add the total years and months to the period\n+        if (yearsSupported && years != getYears()) {\n+            result = result.withYears(years);\n+        }\n+        if (monthsSupported && months != getMonths()) {\n+            result = result.withMonths(months);\n+        }\n+    }\n+\n+    // Add weeks and days to the period\n+    if (weeksSupported && weeks != getWeeks()) {\n+        result = result.withWeeks(weeks);\n+    }\n+    if (daysSupported && days != getDays()) {\n+        result = result.withDays(days);\n     }\n \n+    return result.normalizedStandard(type);\n+}\n+\n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}