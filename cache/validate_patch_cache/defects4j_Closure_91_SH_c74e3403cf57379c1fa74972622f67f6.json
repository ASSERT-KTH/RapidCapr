{
    "patch": "  private static boolean isStrictFunction(Node functionNode) {\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(functionNode);\n    if (info != null && info.isStrict()) {\n      return true;\n    }\n\n    if (functionNode.getLastChild().getType() != Token.BLOCK) {\n      return false;\n    }\n\n    Node blockNode = functionNode.getLastChild();\n    if (blockNode.getFirstChild() == null) {\n      return false;\n    }\n\n    Node stmtNode = blockNode.getFirstChild();\n    if (stmtNode.getType() != Token.EXPR_RESULT) {\n      return false;\n    }\n\n    Node callNode = stmtNode.getFirstChild();\n    if (callNode.getType() != Token.CALL) {\n      return false;\n    }\n\n>>> [ INFILL ] <<<\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..6538e042 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,34 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  private static boolean isStrictFunction(Node functionNode) {\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(functionNode);\n+    if (info != null && info.isStrict()) {\n+      return true;\n+    }\n+\n+    if (functionNode.getLastChild().getType() != Token.BLOCK) {\n+      return false;\n+    }\n+\n+    Node blockNode = functionNode.getLastChild();\n+    if (blockNode.getFirstChild() == null) {\n+      return false;\n+    }\n+\n+    Node stmtNode = blockNode.getFirstChild();\n+    if (stmtNode.getType() != Token.EXPR_RESULT) {\n+      return false;\n+    }\n+\n+    Node callNode = stmtNode.getFirstChild();\n+    if (callNode.getType() != Token.CALL) {\n+      return false;\n+    }\n+\n+>>> [ INFILL ] <<<\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}