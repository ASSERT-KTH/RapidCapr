{
    "patch": "    attachLiteralTypes(n);\n    if (n.getType() == Token.FUNCTION) {\n      defineDeclaredFunction(n, parent);\n    }\n\n    if (n.getType() == Token.NAME) {\n      Var var = scope.getVar(n.getString());\n      maybeAddFunctionToNamespace(var);\n    } else if (n.getType() == Token.CALL && n.getFirstChild() != null) {\n      Node callee = n.getFirstChild();\n      if (callee.getType() == Token.NAME) {\n        Var var = scope.getVar(callee.getString());\n        maybeAddFunctionToNamespace(var);\n      } else if (callee.getType() == Token.GETPROP) {\n        Node getTarget = callee.getFirstChild();\n        if (getTarget.getType() == Token.NAME) {\n          Var var = scope.getVar(getTarget.getString());\n          maybeAddFunctionToNamespace(var);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6c28f249 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,28 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    attachLiteralTypes(n);\n+    if (n.getType() == Token.FUNCTION) {\n+      defineDeclaredFunction(n, parent);\n+    }\n+\n+    if (n.getType() == Token.NAME) {\n+      Var var = scope.getVar(n.getString());\n+      maybeAddFunctionToNamespace(var);\n+    } else if (n.getType() == Token.CALL && n.getFirstChild() != null) {\n+      Node callee = n.getFirstChild();\n+      if (callee.getType() == Token.NAME) {\n+        Var var = scope.getVar(callee.getString());\n+        maybeAddFunctionToNamespace(var);\n+      } else if (callee.getType() == Token.GETPROP) {\n+        Node getTarget = callee.getFirstChild();\n+        if (getTarget.getType() == Token.NAME) {\n+          Var var = scope.getVar(getTarget.getString());\n+          maybeAddFunctionToNamespace(var);\n+        }\n       }\n     }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}