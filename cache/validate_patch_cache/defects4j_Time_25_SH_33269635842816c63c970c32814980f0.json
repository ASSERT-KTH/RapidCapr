{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > offsetAdjusted) {\n        // gap in spring: clocks in local time move forward\n        final long prevLocal = previousTransition(instantAdjusted);\n        final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            return offsetLocal;\n        }\n        // check for edge cases\n        final long nextLocal = nextTransition(instantAdjusted);\n        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if ((prevLocal + offsetLocal) == (prevAdjusted + offsetAdjusted)\n                && (nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted))\n            return offsetLocal;\n        if ((prevLocal + offsetLocal) == (prevAdjusted + offsetAdjusted)\n                && (nextLocal + offsetLocal) < (nextAdjusted + offsetAdjusted))\n            return offsetLocal;\n    } else {\n        // overlap in autumn: clocks in local time move backward\n        final long nextLocal = nextTransition(instantAdjusted);\n        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            int beforeDiff = offsetLocal - getOffset(nextLocal - 1);\n            int afterDiff = getOffset(nextAdjusted - 1) - offsetAdjusted;\n            if (beforeDiff == afterDiff)\n                return offsetLocal;\n            else if (beforeDiff < afterDiff)\n                return offsetAdjusted;\n            else {\n                // check for edge cases\n                final long prevLocal = previousTransition(instantAdjusted);\n                final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if ((prevLocal + offsetLocal) == (prevAdjusted + offsetAdjusted))\n                    return offsetLocal;\n                final long afterNextLocal = nextTransition(nextLocal);\n                final long afterNextAdjusted = nextTransition(nextAdjusted);\n                if ((afterNextLocal + offsetLocal) == (afterNextAdjusted + offsetAdjusted))\n                    return offsetLocal;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e27c2231 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,48 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > offsetAdjusted) {\n+        // gap in spring: clocks in local time move forward\n+        final long prevLocal = previousTransition(instantAdjusted);\n+        final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            return offsetLocal;\n+        }\n+        // check for edge cases\n+        final long nextLocal = nextTransition(instantAdjusted);\n+        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if ((prevLocal + offsetLocal) == (prevAdjusted + offsetAdjusted)\n+                && (nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted))\n+            return offsetLocal;\n+        if ((prevLocal + offsetLocal) == (prevAdjusted + offsetAdjusted)\n+                && (nextLocal + offsetLocal) < (nextAdjusted + offsetAdjusted))\n+            return offsetLocal;\n+    } else {\n+        // overlap in autumn: clocks in local time move backward\n+        final long nextLocal = nextTransition(instantAdjusted);\n+        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            int beforeDiff = offsetLocal - getOffset(nextLocal - 1);\n+            int afterDiff = getOffset(nextAdjusted - 1) - offsetAdjusted;\n+            if (beforeDiff == afterDiff)\n+                return offsetLocal;\n+            else if (beforeDiff < afterDiff)\n+                return offsetAdjusted;\n+            else {\n+                // check for edge cases\n+                final long prevLocal = previousTransition(instantAdjusted);\n+                final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if ((prevLocal + offsetLocal) == (prevAdjusted + offsetAdjusted))\n+                    return offsetLocal;\n+                final long afterNextLocal = nextTransition(nextLocal);\n+                final long afterNextAdjusted = nextTransition(nextAdjusted);\n+                if ((afterNextLocal + offsetLocal) == (afterNextAdjusted + offsetAdjusted))\n+                    return offsetLocal;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}