{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock instanceof MockAccess)\n        ((MockAccess) mock).getMockSettings().getInvocationListeners().forEach(org.mockito.internal.invocation.InvocationListener::localInvocation);\n\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n        callbacks[0] = newFilter;\n        factory.setCallbacks(callbacks);\n    } else if (mock instanceof DelegatingInvoker) {\n        ((DelegatingInvoker) mock).setHandler(newMockHandler);\n    } else {\n        MockImpl<T> oldMock = (MockImpl<T>) mock;\n        oldMock.setMockHandler(newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..085ac8fbf 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock instanceof MockAccess)\n+        ((MockAccess) mock).getMockSettings().getInvocationListeners().forEach(org.mockito.internal.invocation.InvocationListener::localInvocation);\n+\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+        callbacks[0] = newFilter;\n+        factory.setCallbacks(callbacks);\n+    } else if (mock instanceof DelegatingInvoker) {\n+        ((DelegatingInvoker) mock).setHandler(newMockHandler);\n+    } else {\n+        MockImpl<T> oldMock = (MockImpl<T>) mock;\n+        oldMock.setMockHandler(newMockHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: method references are not supported in -source 1.5",
    "test_result": "ERROR"
}