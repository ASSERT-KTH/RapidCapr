{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Comparable) {\n        Comparable<?> c = (Comparable<?>) v;\n        // find the index of the object in the list of sorted unique values\n        int index = Collections.binarySearch(this.getSortedUniqueValues(), c);\n        if (index >= 0) {\n            // object found, calculate percentile\n            return (index + 1) / (double) this.getUniqueValuesCount();\n        } else {\n            // object not found, calculate percentile based on insertion point\n            int insertIndex = -(index + 1);\n            double prevPct = insertIndex / (double) this.getUniqueValuesCount();\n            double nextPct = (insertIndex + 1) / (double) this.getUniqueValuesCount();\n            return 0.5 * (prevPct + nextPct);\n        }\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..87000e425 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,25 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Comparable) {\n+        Comparable<?> c = (Comparable<?>) v;\n+        // find the index of the object in the list of sorted unique values\n+        int index = Collections.binarySearch(this.getSortedUniqueValues(), c);\n+        if (index >= 0) {\n+            // object found, calculate percentile\n+            return (index + 1) / (double) this.getUniqueValuesCount();\n+        } else {\n+            // object not found, calculate percentile based on insertion point\n+            int insertIndex = -(index + 1);\n+            double prevPct = insertIndex / (double) this.getUniqueValuesCount();\n+            double nextPct = (insertIndex + 1) / (double) this.getUniqueValuesCount();\n+            return 0.5 * (prevPct + nextPct);\n+        }\n+    } else {\n+        return 0.0;\n     }\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}