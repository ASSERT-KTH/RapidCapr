{
    "patch": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == denominator) {\n            return Fraction.getFraction(numerator / denominator, 1);\n        } else if (gcd != 1 && denominator != 0) {\n            return Fraction.getFraction(numerator / gcd, denominator / gcd);\n        } else if (denominator == 0) {\n            throw new ArithmeticException(\"Cannot have zero as denominator\");\n        }\n        return this;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..eda74867 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,15 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (gcd == denominator) {\n+            return Fraction.getFraction(numerator / denominator, 1);\n+        } else if (gcd != 1 && denominator != 0) {\n+            return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        } else if (denominator == 0) {\n+            throw new ArithmeticException(\"Cannot have zero as denominator\");\n+        }\n+        return this;\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: variable gcd is already defined in method reduce()",
    "test_result": "ERROR"
}