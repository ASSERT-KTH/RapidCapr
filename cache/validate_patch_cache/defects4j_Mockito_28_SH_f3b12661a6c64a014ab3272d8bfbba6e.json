{
    "patch": "Object mockCandidate = mockCandidateFilter\n    .filterCandidate(mocks, field, fieldInstance).thenInject();\nif (mockCandidate != null) {\n    boolean assignable = field.getType().isAssignableFrom(mockCandidate.getClass());\n    if (assignable) {\n        try {\n            Object oldValue = field.get(fieldInstance);\n            if (oldValue != null) {\n                fieldValueAssigner.clearIfDependencyCycleDetected(fieldValueSorter, mocks, fieldInstance, oldValue);\n            }\n            field.setAccessible(true);\n            field.set(fieldInstance, mockCandidate);\n            for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                innerField.setAccessible(true);\n                if (innerField.get(mockCandidate) == oldValue) {\n                    innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n                }\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    } else {\n        String error = String.format(\"Cannot assign instance of %s to field '%s' of type %s\", mockCandidate.getClass(), field.getName(), field.getType());\n        throw new IllegalArgumentException(error);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..8e689f096 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,35 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter\n+    .filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (mockCandidate != null) {\n+    boolean assignable = field.getType().isAssignableFrom(mockCandidate.getClass());\n+    if (assignable) {\n+        try {\n+            Object oldValue = field.get(fieldInstance);\n+            if (oldValue != null) {\n+                fieldValueAssigner.clearIfDependencyCycleDetected(fieldValueSorter, mocks, fieldInstance, oldValue);\n+            }\n+            field.setAccessible(true);\n+            field.set(fieldInstance, mockCandidate);\n+            for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                innerField.setAccessible(true);\n+                if (innerField.get(mockCandidate) == oldValue) {\n+                    innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+                }\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    } else {\n+        String error = String.format(\"Cannot assign instance of %s to field '%s' of type %s\", mockCandidate.getClass(), field.getName(), field.getType());\n+        throw new IllegalArgumentException(error);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}