{
    "patch": "              // NOTE: assignments to 'this' may change the value of 'this' and\n              // should be treated as an external effect, as well as assignment to the LHS of a plus operator.\n              Node possibleMutationNode = lhs;\n              boolean mayMutateThis = false;\n              while (possibleMutationNode.isGetProp()) {\n                if (possibleMutationNode.getLastChild().getString().equals(\"prototype\") &&\n                    possibleMutationNode.getFirstChild().matchesQualifiedName(\"Object\")) {\n                  mayMutateThis = true;\n                  break;\n                }\n\n                if (possibleMutationNode.getFirstChild().isThis()) {\n                  mayMutateThis = true;\n                  break;\n                }\n\n                possibleMutationNode = possibleMutationNode.getFirstChild();\n              }\n\n              // Treat assignments to 'this' and the LHS of '+' operator as possible external effects.\n              (!mayEffectMutableState(lhs) || mayMutateThis || lhs.getParent().isAdd())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..7bf64594 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,27 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this' may change the value of 'this' and\n+              // should be treated as an external effect, as well as assignment to the LHS of a plus operator.\n+              Node possibleMutationNode = lhs;\n+              boolean mayMutateThis = false;\n+              while (possibleMutationNode.isGetProp()) {\n+                if (possibleMutationNode.getLastChild().getString().equals(\"prototype\") &&\n+                    possibleMutationNode.getFirstChild().matchesQualifiedName(\"Object\")) {\n+                  mayMutateThis = true;\n+                  break;\n+                }\n+\n+                if (possibleMutationNode.getFirstChild().isThis()) {\n+                  mayMutateThis = true;\n+                  break;\n+                }\n+\n+                possibleMutationNode = possibleMutationNode.getFirstChild();\n+              }\n+\n+              // Treat assignments to 'this' and the LHS of '+' operator as possible external effects.\n+              (!mayEffectMutableState(lhs) || mayMutateThis || lhs.getParent().isAdd())) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}