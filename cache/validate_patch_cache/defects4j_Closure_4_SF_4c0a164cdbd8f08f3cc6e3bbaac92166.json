{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = false;\n  JSType resolvedType = null;\n\n  // Attempt to resolve using properties.\n  resolveViaProperties(t, enclosing);\n  if (isResolved()) {\n    finishedResolving();\n    resolved = true;\n    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // If properties resolution failed and the type isn't already resolved, try to resolve using the registry.\n  if (!resolved) {\n    resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      finishedResolving();\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n\n  // If neither property resolution nor registry resolution work, fall back to normal resolution.\n  if (!resolved) {\n    super.resolveInternal(t, enclosing);\n    finishedResolving();\n    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  return resolvedType;\n}\n\nprivate void finishedResolving() {\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(registry.getErrorReporter());\n  }\n  super.resolveInternal(registry.getErrorReporter(), getEnclosingScope());\n  finishPropertyContinuations();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..015a098f 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,44 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = false;\n+  JSType resolvedType = null;\n+\n+  // Attempt to resolve using properties.\n+  resolveViaProperties(t, enclosing);\n+  if (isResolved()) {\n+    finishedResolving();\n+    resolved = true;\n+    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n \n+  // If properties resolution failed and the type isn't already resolved, try to resolve using the registry.\n+  if (!resolved) {\n+    resolved = resolveViaRegistry(t, enclosing);\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      finishedResolving();\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n     }\n+  }\n \n+  // If neither property resolution nor registry resolution work, fall back to normal resolution.\n+  if (!resolved) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishedResolving();\n+    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+\n+  return resolvedType;\n+}\n+\n+private void finishedResolving() {\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(registry.getErrorReporter());\n   }\n+  super.resolveInternal(registry.getErrorReporter(), getEnclosingScope());\n+  finishPropertyContinuations();\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}