{
    "patch": "    if (argList == null) {\n      // any parameter must declared in function expression.\n      return;\n    }\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        if (!lastArg.isParamList()) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n        lastArg = lastArg.getPrevious();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9c60d84b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (argList == null) {\n+      // any parameter must declared in function expression.\n+      return;\n+    }\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        if (!lastArg.isParamList()) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+        lastArg = lastArg.getPrevious();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}