{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n        \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int year = 0;\n        int month = 0;\n        int day = 0;\n        boolean monthChanged = false;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int oldValue = values[i];\n                int newValue = oldValue + valueToAdd;\n                // calculate new year and month\n                year = iChronology.year().get(instant);\n                month = iChronology.monthOfYear().get(instant);\n                month += newValue;\n                // handle overflow and underflow of month\n                while (month > 12) {\n                    month -= 12;\n                    year++;\n                    monthChanged = true;\n                }\n                while (month < 1) {\n                    month += 12;\n                    year--;\n                    monthChanged = true;\n                }\n                // calculate maximum day of month for new month\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), month)));\n                // handle overflow and underflow of day in new month\n                int oldDay = iChronology.dayOfMonth().get(instant);\n                while (newValue > 0 && oldValue <= (maxDayOfMonth - oldDay)) {\n                    newValue -= (maxDayOfMonth - oldDay + 1);\n                    if (month == 12) {\n                        year++;\n                        month = 1;\n                    } else {\n                        month++;\n                    }\n                    maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), month)));\n                    oldDay = 1;\n                    monthChanged = true;\n                }\n                while (newValue < 0 && oldValue > oldDay) {\n                    newValue += (maxDayOfMonth - oldDay + 1);\n                    if (month == 1) {\n                        year--;\n                        month = 12;\n                    } else {\n                        month--;\n                    }\n                    maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), month)));\n                    oldDay = maxDayOfMonth;\n                    monthChanged = true;\n                }\n                // set instant to new year, month, day\n                instant = iChronology.monthOfYear().set(instant, month);\n                instant = iChronology.year().set(instant, year);\n                if (newValue > 0 || (newValue == 0 && monthChanged)) {\n                    instant = iChronology.dayOfMonth().set(instant, 1);\n                }\n                day = iChronology.dayOfMonth().get(instant);\n                monthChanged = false;\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n\n        int[] newValues = new int[partial.size()];\n        newValues[0] = year;\n        newValues[1] = month;\n        newValues[2] = day;\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..4bb66c7a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,87 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+        \n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int year = 0;\n+        int month = 0;\n+        int day = 0;\n+        boolean monthChanged = false;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int oldValue = values[i];\n+                int newValue = oldValue + valueToAdd;\n+                // calculate new year and month\n+                year = iChronology.year().get(instant);\n+                month = iChronology.monthOfYear().get(instant);\n+                month += newValue;\n+                // handle overflow and underflow of month\n+                while (month > 12) {\n+                    month -= 12;\n+                    year++;\n+                    monthChanged = true;\n+                }\n+                while (month < 1) {\n+                    month += 12;\n+                    year--;\n+                    monthChanged = true;\n+                }\n+                // calculate maximum day of month for new month\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), month)));\n+                // handle overflow and underflow of day in new month\n+                int oldDay = iChronology.dayOfMonth().get(instant);\n+                while (newValue > 0 && oldValue <= (maxDayOfMonth - oldDay)) {\n+                    newValue -= (maxDayOfMonth - oldDay + 1);\n+                    if (month == 12) {\n+                        year++;\n+                        month = 1;\n+                    } else {\n+                        month++;\n+                    }\n+                    maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), month)));\n+                    oldDay = 1;\n+                    monthChanged = true;\n+                }\n+                while (newValue < 0 && oldValue > oldDay) {\n+                    newValue += (maxDayOfMonth - oldDay + 1);\n+                    if (month == 1) {\n+                        year--;\n+                        month = 12;\n+                    } else {\n+                        month--;\n+                    }\n+                    maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), month)));\n+                    oldDay = maxDayOfMonth;\n+                    monthChanged = true;\n+                }\n+                // set instant to new year, month, day\n+                instant = iChronology.monthOfYear().set(instant, month);\n+                instant = iChronology.year().set(instant, year);\n+                if (newValue > 0 || (newValue == 0 && monthChanged)) {\n+                    instant = iChronology.dayOfMonth().set(instant, 1);\n+                }\n+                day = iChronology.dayOfMonth().get(instant);\n+                monthChanged = false;\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        int[] newValues = new int[partial.size()];\n+        newValues[0] = year;\n+        newValues[1] = month;\n+        newValues[2] = day;\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}