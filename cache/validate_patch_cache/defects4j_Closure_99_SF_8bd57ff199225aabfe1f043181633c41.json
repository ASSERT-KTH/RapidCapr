{
    "patch": "public class CheckGlobalThis extends AbstractCompilerPass {\n\n  public static final DiagnosticType GLOBAL_THIS =\n      DiagnosticType.warning(\n          \"JSC_CHECK_GLOBAL_THIS\",\n          \"Don''t use ''this'' outside of a method or nested function in a property value context.\");\n\n  private final Node root;\n\n  private int errorCount;\n\n  public CheckGlobalThis(Node root) {\n    this.root = root;\n  }\n\n  public void process(Node externs, Node root) {\n    checkThisReferences(root, null);\n  }\n\n  private void checkThisReferences(Node n, @Nullable Node parent) {\n    if (parent != null && isPropertyDeclaration(parent)) {\n      if (n.isThis()) {\n        errorCount++;\n        report(n, parent);\n      }\n    } else if (n.isFunction()) {\n      return; // Don't traverse functions.\n    } else if (n.isThis()) {\n      errorCount++;\n      report(n, parent);\n    }\n\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      checkThisReferences(child, n);\n    }\n  }\n\n  private static boolean isPropertyDeclaration(Node n) {\n    return n.isAssign() && n.getFirstChild().isGetProp();\n  }\n\n  private void report(Node n, Node parent) {\n    if (errorCount == 1) {\n      t.report(n, GLOBAL_THIS);\n    }\n  }\n\n  public int getErrorCount() {\n    return errorCount;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..d05c2075 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,60 +81,58 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public class CheckGlobalThis extends AbstractCompilerPass {\n+\n+  public static final DiagnosticType GLOBAL_THIS =\n+      DiagnosticType.warning(\n+          \"JSC_CHECK_GLOBAL_THIS\",\n+          \"Don''t use ''this'' outside of a method or nested function in a property value context.\");\n+\n+  private final Node root;\n+\n+  private int errorCount;\n+\n+  public CheckGlobalThis(Node root) {\n+    this.root = root;\n+  }\n+\n+  public void process(Node externs, Node root) {\n+    checkThisReferences(root, null);\n+  }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n+  private void checkThisReferences(Node n, @Nullable Node parent) {\n+    if (parent != null && isPropertyDeclaration(parent)) {\n+      if (n.isThis()) {\n+        errorCount++;\n+        report(n, parent);\n       }\n+    } else if (n.isFunction()) {\n+      return; // Don't traverse functions.\n+    } else if (n.isThis()) {\n+      errorCount++;\n+      report(n, parent);\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      checkThisReferences(child, n);\n     }\n+  }\n \n-    return true;\n+  private static boolean isPropertyDeclaration(Node n) {\n+    return n.isAssign() && n.getFirstChild().isGetProp();\n   }\n \n+  private void report(Node n, Node parent) {\n+    if (errorCount == 1) {\n+      t.report(n, GLOBAL_THIS);\n+    }\n+  }\n+\n+  public int getErrorCount() {\n+    return errorCount;\n+  }\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: class CheckGlobalThis is already defined in package com.google.javascript.jscomp",
    "test_result": "ERROR"
}