{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    int size = elementPairs.size();\n    if (size > 0) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            List<Object> subList = elementPairs.subList(1, size);\n            while (!subList.isEmpty() && subList.get(0) instanceof Separator) {\n                sep = sep.finish(((Separator) subList.get(0)).getPrinter(), ((Separator) subList.get(0)).getParser());\n                subList = subList.subList(1, subList.size());\n            }\n            PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n            printer = notPrinter ? null : sep.finish(f.getPrinter(), f.getParser());\n            parser = notParser ? null : sep.finish(f.getPrinter(), f.getParser());\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            printer = notPrinter ? null : (PeriodPrinter) comp[0];\n            parser = notParser ? null : (PeriodParser) comp[1];\n        }\n    }\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..4815197a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,33 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    int size = elementPairs.size();\n+    if (size > 0) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            List<Object> subList = elementPairs.subList(1, size);\n+            while (!subList.isEmpty() && subList.get(0) instanceof Separator) {\n+                sep = sep.finish(((Separator) subList.get(0)).getPrinter(), ((Separator) subList.get(0)).getParser());\n+                subList = subList.subList(1, subList.size());\n+            }\n+            PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n+            printer = notPrinter ? null : sep.finish(f.getPrinter(), f.getParser());\n+            parser = notParser ? null : sep.finish(f.getPrinter(), f.getParser());\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(elementPairs);\n+            printer = notPrinter ? null : (PeriodPrinter) comp[0];\n+            parser = notParser ? null : (PeriodParser) comp[1];\n         }\n     }\n+    return new PeriodFormatter(printer, parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}