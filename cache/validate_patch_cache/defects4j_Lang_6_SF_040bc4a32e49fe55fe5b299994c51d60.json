{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char c = input.charAt(pos);\n            if (c == '\\\\') {\n                // Handle escaped characters.\n                if (pos == len - 1) {\n                    throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + input.subSequence(pos, len));\n                }\n                char escaped = input.charAt(pos + 1);\n                char translated = translateEscapedChar(escaped);\n                if (translated == 0) {\n                    throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + escaped);\n                }\n                out.write(translated);\n                pos += 2;\n            } else {\n                // Normal character, write it out.\n                out.write(c);\n                pos++;\n            }\n            continue;\n        }\n        \n        // Translated character.\n        pos += consumed;\n    }\n}\n\nprivate char translateEscapedChar(char escaped) {\n    switch (escaped) {\n        case 'n':\n            return '\\n';\n        case 'r':\n            return '\\r';\n        case 't':\n            return '\\t';\n        case 'b':\n            return '\\b';\n        case 'f':\n            return '\\f';\n        case '\\'':\n            return '\\'';\n        case '\\\"':\n            return '\\\"';\n        case '\\\\':\n            return '\\\\';\n        default:\n            return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..c9e15061 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,67 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char c = input.charAt(pos);\n+            if (c == '\\\\') {\n+                // Handle escaped characters.\n+                if (pos == len - 1) {\n+                    throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + input.subSequence(pos, len));\n+                }\n+                char escaped = input.charAt(pos + 1);\n+                char translated = translateEscapedChar(escaped);\n+                if (translated == 0) {\n+                    throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + escaped);\n+                }\n+                out.write(translated);\n+                pos += 2;\n+            } else {\n+                // Normal character, write it out.\n                 out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                pos++;\n             }\n+            continue;\n         }\n+        \n+        // Translated character.\n+        pos += consumed;\n     }\n+}\n+\n+private char translateEscapedChar(char escaped) {\n+    switch (escaped) {\n+        case 'n':\n+            return '\\n';\n+        case 'r':\n+            return '\\r';\n+        case 't':\n+            return '\\t';\n+        case 'b':\n+            return '\\b';\n+        case 'f':\n+            return '\\f';\n+        case '\\'':\n+            return '\\'';\n+        case '\\\"':\n+            return '\\\"';\n+        case '\\\\':\n+            return '\\\\';\n+        default:\n+            return 0;\n+    }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: Supplementary character must be represented using a single escape expected:<&#144308;[]> but was:<&#144308;[&#57268;]>",
    "test_result": "FAIL"
}