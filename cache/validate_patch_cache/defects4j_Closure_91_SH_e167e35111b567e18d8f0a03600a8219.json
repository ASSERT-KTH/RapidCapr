{
    "patch": "      if (n.isArrowFunction()) {\n        // Arrow functions cannot have an associated \"this\".\n        return false;\n      }\n      Node fnNode = n;\n      if (fnNode.getParent().getType() == Token.CALL) {\n        Node jscompNode = fnNode.getSecondChild();\n        if (jscompNode.isQualifiedName() &&\n            jscompNode.getQualifiedName().equals(\"goog.bind\") &&\n            jscompNode.getNext().isString() &&\n            jscompNode.getNext().getString().endsWith(\".prototype.\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..125bad22 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.isArrowFunction()) {\n+        // Arrow functions cannot have an associated \"this\".\n+        return false;\n+      }\n+      Node fnNode = n;\n+      if (fnNode.getParent().getType() == Token.CALL) {\n+        Node jscompNode = fnNode.getSecondChild();\n+        if (jscompNode.isQualifiedName() &&\n+            jscompNode.getQualifiedName().equals(\"goog.bind\") &&\n+            jscompNode.getNext().isString() &&\n+            jscompNode.getNext().getString().endsWith(\".prototype.\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}