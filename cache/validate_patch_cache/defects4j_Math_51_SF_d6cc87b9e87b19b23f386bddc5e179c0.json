{
    "patch": "    protected final double doSolve() {\n        double min = getMin();\n        double max = getMax();\n        double yMin = computeObjectiveValue(min);\n        double yMax = computeObjectiveValue(max);\n\n        // Check if endpoints contain a zero\n        if (FastMath.signum(yMin) == 0) {\n            return min;\n        }\n        if (FastMath.signum(yMax) == 0) {\n            return max;\n        }\n\n        // Check if an endpoint is really a minimum or maximum\n        if (yMin * yMax > 0.0) {\n            throw new MathIllegalStateException(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS,\n                                                 min, max, yMin, yMax);\n        }\n\n        // Perform binary search\n        for (int i = 0; i < getMaximalIterationCount(); i++) {\n            double xMid = 0.5 * (min + max);\n            double yMid = computeObjectiveValue(xMid);\n\n            if (FastMath.signum(yMid) == 0.0) {\n                return xMid;\n            }\n\n            if (yMin * yMid < 0.0) {\n                max = xMid;\n                yMax = yMid;\n            } else {\n                min = xMid;\n                yMin = yMid;\n            }\n\n            if (FastMath.abs(max - min) <= getAbsoluteAccuracy()) {\n                return 0.5 * (min + max);\n            }\n        }\n\n        throw new MaxIterationsExceededException(getMaximalIterationCount(),\n                                                  LocalizedFormats.CONVERGENCE_FAILED);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..450f4e229 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -126,124 +126,49 @@ public abstract class BaseSecantSolver\n \n     /** {@inheritDoc} */\n     protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+        double min = getMin();\n+        double max = getMax();\n+        double yMin = computeObjectiveValue(min);\n+        double yMax = computeObjectiveValue(max);\n+\n+        // Check if endpoints contain a zero\n+        if (FastMath.signum(yMin) == 0) {\n+            return min;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        if (FastMath.signum(yMax) == 0) {\n+            return max;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n-\n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+        // Check if an endpoint is really a minimum or maximum\n+        if (yMin * yMax > 0.0) {\n+            throw new MathIllegalStateException(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS,\n+                                                 min, max, yMin, yMax);\n+        }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+        // Perform binary search\n+        for (int i = 0; i < getMaximalIterationCount(); i++) {\n+            double xMid = 0.5 * (min + max);\n+            double yMid = computeObjectiveValue(xMid);\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            if (FastMath.signum(yMid) == 0.0) {\n+                return xMid;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            if (yMin * yMid < 0.0) {\n+                max = xMid;\n+                yMax = yMid;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                min = xMid;\n+                yMin = yMid;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (FastMath.abs(max - min) <= getAbsoluteAccuracy()) {\n+                return 0.5 * (min + max);\n             }\n         }\n+\n+        throw new MaxIterationsExceededException(getMaximalIterationCount(),\n+                                                  LocalizedFormats.CONVERGENCE_FAILED);\n     }\n \n     /** <em>Secant</em>-based root-finding methods. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}