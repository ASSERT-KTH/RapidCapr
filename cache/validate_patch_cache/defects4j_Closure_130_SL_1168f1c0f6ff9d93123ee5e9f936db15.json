{
    "patch": " if (name.globalSets == 1 && name.localSets == 0) {\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.props != null &&\n          name.aliasingGets == 0) {\n        workList.addAll(name.props);\n      } else if (name.type == Name.Type.VAR ||\n                 (name.type == Name.Type.LET && name.getParentScope().isBlockScope())) {\n        if (name.aliasingGets > 0) {\n          // {@code name} meets condition (b).\n          // Find all of its local aliases and try to inline them.\n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n              // {@code name} meets condition (c).\n              // Try to inline it.\n              if (inlineAliasIfPossible(ref, namespace)) {\n                name.removeRef(ref);\n              }\n            }\n          }\n        }\n      } else if (name.type == Name.Type.CONST) {\n        // A constant variable cannot be inlined.\n      } else {\n        if (name.parent == null) {\n          // This is a synthetic NAME node generated during parsing.\n          // It should not be possible to reference a synthetic node.\n          throw new IllegalStateException(\"Synthetic NAME node has no parent: \" + name);\n        } else {\n          throw new IllegalStateException(\"Unexpected name type: \" + name.type);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..99e1f019 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,38 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+ if (name.globalSets == 1 && name.localSets == 0) {\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.props != null &&\n+          name.aliasingGets == 0) {\n+        workList.addAll(name.props);\n+      } else if (name.type == Name.Type.VAR ||\n+                 (name.type == Name.Type.LET && name.getParentScope().isBlockScope())) {\n+        if (name.aliasingGets > 0) {\n+          // {@code name} meets condition (b).\n+          // Find all of its local aliases and try to inline them.\n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+              // {@code name} meets condition (c).\n+              // Try to inline it.\n+              if (inlineAliasIfPossible(ref, namespace)) {\n+                name.removeRef(ref);\n+              }\n+            }\n+          }\n+        }\n+      } else if (name.type == Name.Type.CONST) {\n+        // A constant variable cannot be inlined.\n+      } else {\n+        if (name.parent == null) {\n+          // This is a synthetic NAME node generated during parsing.\n+          // It should not be possible to reference a synthetic node.\n+          throw new IllegalStateException(\"Synthetic NAME node has no parent: \" + name);\n+        } else {\n+          throw new IllegalStateException(\"Unexpected name type: \" + name.type);\n+        }\n+      }\n+    }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}