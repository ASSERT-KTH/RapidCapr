{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.LP:\n        if (parent.isFunction() && NodeUtil.isStatement(parent.getParent())) {\n          // A function declaration wrapped in a statement. Example:\n          // FunctionDeclaration wrapping a script\n          handleFunctionInputs(parent.getParent());\n        } else if (parent == scope.getRootNode()) {\n          // Function expression or arrow expression\n          // We handle the common case of arrow expressions only having one var declared\n          // as inputs for the function.\n          // Any extra input variables from destructuring expressions will be typechecked\n          // but not visible outside the arrow expression.\n          handleFunctionInputs(parent);\n        }\n        break;\n      case Token.VAR:\n        if (parent.getType() == Token.FOR || parent.getType() == Token.FOR_IN) {\n          checkVarDeclaration(n);\n        } else {\n          defineVar(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.NAME:\n        if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      default:\n        break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6d027b4b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,49 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.LP:\n+        if (parent.isFunction() && NodeUtil.isStatement(parent.getParent())) {\n+          // A function declaration wrapped in a statement. Example:\n+          // FunctionDeclaration wrapping a script\n+          handleFunctionInputs(parent.getParent());\n+        } else if (parent == scope.getRootNode()) {\n+          // Function expression or arrow expression\n+          // We handle the common case of arrow expressions only having one var declared\n+          // as inputs for the function.\n+          // Any extra input variables from destructuring expressions will be typechecked\n+          // but not visible outside the arrow expression.\n+          handleFunctionInputs(parent);\n+        }\n+        break;\n+      case Token.VAR:\n+        if (parent.getType() == Token.FOR || parent.getType() == Token.FOR_IN) {\n+          checkVarDeclaration(n);\n+        } else {\n           defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}