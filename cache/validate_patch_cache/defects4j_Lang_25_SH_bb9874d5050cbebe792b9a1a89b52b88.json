{
    "patch": "String encodedString = \"\";\ntry {\n    encodedString = new String(testString.getBytes(\"UTF8\"),\n            \"ISO8859_1\");\n} catch (UnsupportedEncodingException e) {\n    e.printStackTrace();\n}\n\nboolean success = true;\nfor (int i = 0; i < testString.length(); i++) {\n    if (testString.charAt(i) == '\\'') {\n        String expected = \"\\\\'\";\n        String actual = encodedString.substring(i, i + 2);\n        if (!expected.equals(actual)) {\n            System.out.println(\"Unexpected encoding: expected='\" + expected + \"' actual='\" + actual + \"'\");\n            success = false;\n        }\n        i++; // skip second single quote\n    } else if (testString.charAt(i) == '&') {\n        String expected = \"&amp;\";\n        String actual = encodedString.substring(i, i + 5);\n        if (!expected.equals(actual)) {\n            System.out.println(\"Unexpected encoding: expected='\" + expected + \"' actual='\" + actual + \"'\");\n            success = false;\n        }\n        i += 4; // skip rest of escaped entity\n    } else if (testString.charAt(i) == '\\\"') {\n        String expected = \"\\\\\\\"\";\n        String actual = encodedString.substring(i, i + 2);\n        if (!expected.equals(actual)) {\n            System.out.println(\"Unexpected encoding: expected='\" + expected + \"' actual='\" + actual + \"'\");\n            success = false;\n        }\n        i++; // skip second double quote\n    } else if (testString.charAt(i) >= 0x7f) {\n        String expected = \"&#\" + (int) testString.charAt(i) + \";\";\n        String actual = encodedString.substring(i, i + 7);\n        if (!expected.equals(actual)) {\n            System.out.println(\"Unexpected encoding: expected='\" + expected + \"' actual='\" + actual + \"'\");\n            success = false;\n        }\n    } else {\n        char expected = testString.charAt(i);\n        char actual = encodedString.charAt(i);\n        if (expected != actual) {\n            System.out.println(\"Unexpected encoding: expected='\" + expected + \"' (0x\" + Integer.toHexString(expected)\n                    + \") actual='\" + actual + \"' (0x\" + Integer.toHexString(actual) + \")\");\n            success = false;\n        }\n    }\n}\n\nassertTrue(\"One or more errors detected\", success);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}