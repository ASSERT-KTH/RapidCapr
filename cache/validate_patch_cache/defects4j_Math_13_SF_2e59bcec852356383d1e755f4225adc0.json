{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n    int dim = m.getRowDimension();\n\n    // Form the matrix R using the eigenvalues of M\n    RealMatrix r = MatrixUtils.createRealIdentityMatrix(dim);\n    for (int i = 0; i < dim; i++) {\n        double eigenvalue = eigenValues.getEntry(i, i);\n        if (eigenvalue < 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n        } else if (eigenvalue > 0.0) {\n            double sqrtEigenvalue = Math.sqrt(eigenvalue);\n            r.setEntry(i, i, sqrtEigenvalue);\n        }\n    }\n\n    // Compute the matrix S = V.R.V^T\n    RealMatrix s = eigenVectors.multiply(r).multiply(eigenVectors.transpose());\n\n    return s;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fcf3f0e44 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+    int dim = m.getRowDimension();\n+\n+    // Form the matrix R using the eigenvalues of M\n+    RealMatrix r = MatrixUtils.createRealIdentityMatrix(dim);\n+    for (int i = 0; i < dim; i++) {\n+        double eigenvalue = eigenValues.getEntry(i, i);\n+        if (eigenvalue < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n+        } else if (eigenvalue > 0.0) {\n+            double sqrtEigenvalue = Math.sqrt(eigenvalue);\n+            r.setEntry(i, i, sqrtEigenvalue);\n+        }\n     }\n+\n+    // Compute the matrix S = V.R.V^T\n+    RealMatrix s = eigenVectors.multiply(r).multiply(eigenVectors.transpose());\n+\n+    return s;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}