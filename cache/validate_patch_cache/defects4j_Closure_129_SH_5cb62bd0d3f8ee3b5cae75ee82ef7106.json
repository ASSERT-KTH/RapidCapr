{
    "patch": "// Traverse through any cast nodes and update first node accordingly\nwhile (first != null && first.isCast()) {\n  first = first.getFirstChild();\n}\n\n// Check if the first node is a getprop or getelem operator\nif (NodeUtil.isGet(first)) {\n  // Check if the first node retrieves a known type, like a constructor\n  if (NodeUtil.isConstructorCall(first.getNext())) {\n    // Set property on node to indicate a constructor call\n    n.putBooleanProp(Node.NEW_TARGET, true);\n  }\n} else {\n  // Mark calls without an explicit 'this' as free calls\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (first.isName() && \"eval\".equals(first.getString())) {\n  first.putBooleanProp(Node.DIRECT_EVAL, true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..3a702099 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,28 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Traverse through any cast nodes and update first node accordingly\n+while (first != null && first.isCast()) {\n+  first = first.getFirstChild();\n+}\n+\n+// Check if the first node is a getprop or getelem operator\n+if (NodeUtil.isGet(first)) {\n+  // Check if the first node retrieves a known type, like a constructor\n+  if (NodeUtil.isConstructorCall(first.getNext())) {\n+    // Set property on node to indicate a constructor call\n+    n.putBooleanProp(Node.NEW_TARGET, true);\n+  }\n+} else {\n+  // Mark calls without an explicit 'this' as free calls\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (first.isName() && \"eval\".equals(first.getString())) {\n+  first.putBooleanProp(Node.DIRECT_EVAL, true);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}