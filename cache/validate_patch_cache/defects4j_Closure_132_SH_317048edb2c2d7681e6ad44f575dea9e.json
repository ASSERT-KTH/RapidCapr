{
    "patch": "              // NOTE: assignments to 'this', 'arguments' or `function` object may change the value of `this` and therefore\n              // should be treated as external effects, as well as assignments to the LHS of a plus operator.\n              (!mayEffectMutableState(lhs) || lhs.isThis() || lhs.matchesQualifiedName(\"arguments\") ||\n                (lhs.getParent().isAdd() && lhs == lhs.getParent().getFirstChild()) ||\n                ((lhs.isName() || lhs.isStringKey() || lhs.isGetterDef() || lhs.isSetterDef()) &&\n                    (lhs.matchesName(\"function\") || lhs.getQualifiedName().startsWith(\"arguments.\")))));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..5dc0045f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,12 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this', 'arguments' or `function` object may change the value of `this` and therefore\n+              // should be treated as external effects, as well as assignments to the LHS of a plus operator.\n+              (!mayEffectMutableState(lhs) || lhs.isThis() || lhs.matchesQualifiedName(\"arguments\") ||\n+                (lhs.getParent().isAdd() && lhs == lhs.getParent().getFirstChild()) ||\n+                ((lhs.isName() || lhs.isStringKey() || lhs.isGetterDef() || lhs.isSetterDef()) &&\n+                    (lhs.matchesName(\"function\") || lhs.getQualifiedName().startsWith(\"arguments.\")))));\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}