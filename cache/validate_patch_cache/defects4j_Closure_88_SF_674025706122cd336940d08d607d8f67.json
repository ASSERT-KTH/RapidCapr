{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n  if (NodeUtil.isName(n)) {\n    if (variable.equals(n.getString())) {\n      if (NodeUtil.isLvalue(n)) {\n        // This is a write to the variable. The first write to a variable is effectively\n        // a read, so we treat it as a read.\n        state = VariableLiveness.READ;\n      } else if (n.getParent().isAssign() || n.getParent().isObjectLit()) {\n        // This is a read of the variable, unless the parent node of the current node is an assign\n        // or an object literal (e.g. {x: 42}).\n        return VariableLiveness.READ;\n      } else {\n        state = VariableLiveness.KILL;\n      }\n    }\n    return state;\n  }\n\n  for (Node child = n.getFirstChild();\n       child != null; child = child.getNext()) {\n    if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n      continue;\n    }\n    VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n\n    if (childState == VariableLiveness.READ) {\n      return VariableLiveness.READ;\n    }\n\n    if (childState == VariableLiveness.KILL) {\n      state = VariableLiveness.KILL;\n    }\n  }\n\n  return state;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..edd50afc 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,41 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n+  VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n+  if (NodeUtil.isName(n)) {\n+    if (variable.equals(n.getString())) {\n+      if (NodeUtil.isLvalue(n)) {\n+        // This is a write to the variable. The first write to a variable is effectively\n+        // a read, so we treat it as a read.\n+        state = VariableLiveness.READ;\n+      } else if (n.getParent().isAssign() || n.getParent().isObjectLit()) {\n+        // This is a read of the variable, unless the parent node of the current node is an assign\n+        // or an object literal (e.g. {x: 42}).\n         return VariableLiveness.READ;\n+      } else {\n+        state = VariableLiveness.KILL;\n       }\n     }\n+    return state;\n+  }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n-      }\n+  for (Node child = n.getFirstChild();\n+       child != null; child = child.getNext()) {\n+    if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+      continue;\n+    }\n+    VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+\n+    if (childState == VariableLiveness.READ) {\n+      return VariableLiveness.READ;\n+    }\n+\n+    if (childState == VariableLiveness.KILL) {\n+      state = VariableLiveness.KILL;\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n   }\n+\n+  return state;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}