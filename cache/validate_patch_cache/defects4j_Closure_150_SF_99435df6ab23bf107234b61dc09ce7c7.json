{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(n);\n        return;\n    }\n\n    int type = n.getType();\n    if (type == Token.FUNCTION ||\n       ((type == Token.ASSIGN && parent.getType() == Token.EXPR_RESULT) && \n        n.getFirstChild().getType() == Token.FUNCTION)) {\n        if (NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n            return;\n        }\n\n        Node name = NodeUtil.getNameNode(n);\n        if (name == null) {\n            return;\n        }\n\n        if (type == Token.FUNCTION || (type == Token.ASSIGN && \n            parent.getType() == Token.EXPR_RESULT)) {\n            defineDeclaredFunction(n, parent);\n        }\n        return;\n    } else if (type == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n    } else if (type == Token.VAR || type == Token.CONST || type == Token.LET) {\n        defineVar(n, parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..21923eae 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,47 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+        return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n+        handleFunctionInputs(n);\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    int type = n.getType();\n+    if (type == Token.FUNCTION ||\n+       ((type == Token.ASSIGN && parent.getType() == Token.EXPR_RESULT) && \n+        n.getFirstChild().getType() == Token.FUNCTION)) {\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        Node name = NodeUtil.getNameNode(n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        if (type == Token.FUNCTION || (type == Token.ASSIGN && \n+            parent.getType() == Token.EXPR_RESULT)) {\n+            defineDeclaredFunction(n, parent);\n+        }\n+        return;\n+    } else if (type == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+    } else if (type == Token.VAR || type == Token.CONST || type == Token.LET) {\n+        defineVar(n, parent);\n+        return;\n     }\n \n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}