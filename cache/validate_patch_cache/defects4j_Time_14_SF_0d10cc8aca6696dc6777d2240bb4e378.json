{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean changed = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int curValue = values[i];\n                curValue = iChronology.monthOfYear().add(curValue, valueToAdd);\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, curValue);\n                changed = true;\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (changed) {\n            int[] result = iChronology.get(partial, instant);\n            int dayOfMonth = result[2];\n            int monthOfYear = result[1];\n            int year = result[0];\n            int daysInMonth = iChronology.getDaysInMonth(year, monthOfYear);\n            if (dayOfMonth > daysInMonth) {\n                result[2] = daysInMonth;\n            }\n            return result;\n        } else {\n            return values;\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a0c9ba87 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean changed = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int curValue = values[i];\n+                curValue = iChronology.monthOfYear().add(curValue, valueToAdd);\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, curValue);\n+                changed = true;\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        }\n+        if (changed) {\n+            int[] result = iChronology.get(partial, instant);\n+            int dayOfMonth = result[2];\n+            int monthOfYear = result[1];\n+            int year = result[0];\n+            int daysInMonth = iChronology.getDaysInMonth(year, monthOfYear);\n+            if (dayOfMonth > daysInMonth) {\n+                result[2] = daysInMonth;\n+            }\n+            return result;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            return values;\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}