{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Don't fold function or object literal\n        if (NodeUtil.isExpressionNode(maybeExpr) &&\n                !NodeUtil.isFunctionExpression(maybeExpr) &&\n                maybeExpr.getType() != Token.OBJECTLIT) {\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n                Node stmt = parent.getFirstChild();\n                // Don't fold if the statement is not a function call\n                if (stmt.getType() == Token.CALL) {\n                    Node target = stmt.getFirstChild();\n                    // Don't fold if the target expression is \"apply\" or \"call\"\n                    if (target.getType() == Token.GETPROP) {\n                        Node method = target.getLastChild();\n                        if (method.getType() == Token.STRING) {\n                            String methodName = method.getString();\n                            if (methodName.equals(\"apply\") || methodName.equals(\"call\")) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n                Node grandparent = parent.getParent();\n                // Don't fold if the parent is inside a loop or the body of an if/else statement\n                return grandparent == null || grandparent.getType() != Token.FOR &&\n                        grandparent.getType() != Token.WHILE &&\n                        grandparent.getType() != Token.DO &&\n                        grandparent.getType() != Token.IF;\n            }\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..71d54a34 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,42 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        // Don't fold function or object literal\n+        if (NodeUtil.isExpressionNode(maybeExpr) &&\n+                !NodeUtil.isFunctionExpression(maybeExpr) &&\n+                maybeExpr.getType() != Token.OBJECTLIT) {\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+                Node stmt = parent.getFirstChild();\n+                // Don't fold if the statement is not a function call\n+                if (stmt.getType() == Token.CALL) {\n+                    Node target = stmt.getFirstChild();\n+                    // Don't fold if the target expression is \"apply\" or \"call\"\n+                    if (target.getType() == Token.GETPROP) {\n+                        Node method = target.getLastChild();\n+                        if (method.getType() == Token.STRING) {\n+                            String methodName = method.getString();\n+                            if (methodName.equals(\"apply\") || methodName.equals(\"call\")) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                }\n+                Node grandparent = parent.getParent();\n+                // Don't fold if the parent is inside a loop or the body of an if/else statement\n+                return grandparent == null || grandparent.getType() != Token.FOR &&\n+                        grandparent.getType() != Token.WHILE &&\n+                        grandparent.getType() != Token.DO &&\n+                        grandparent.getType() != Token.IF;\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}