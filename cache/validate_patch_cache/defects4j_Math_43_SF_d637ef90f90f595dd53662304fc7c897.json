{
    "patch": "public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden, use them to compute their respective values\n        if (meanImpl instanceof UnivariateStatistic && !Double.isNaN(value)) {\n            double previousMean = meanImpl.getResult();\n            meanImpl.increment(value);\n            double newMean = meanImpl.getResult();\n            varianceImpl.increment(value);\n            geoMeanImpl.increment(value);\n            if (Double.isNaN(previousMean)) {\n                n = 1;\n            } else {\n                // only update n if the previous mean was not NaN\n                n++;\n            }\n            // update variance using previous and new mean\n            ((StorelessUnivariateStatistic) varianceImpl).increment(value, previousMean, newMean);\n        } else {\n            varianceImpl.increment(value);\n            geoMeanImpl.increment(value);\n            n++;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..f52fa0263 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,32 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n+public void addValue(double value) {\n         sumImpl.increment(value);\n         sumsqImpl.increment(value);\n         minImpl.increment(value);\n         maxImpl.increment(value);\n         sumLogImpl.increment(value);\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+        // If mean, variance or geomean have been overridden, use them to compute their respective values\n+        if (meanImpl instanceof UnivariateStatistic && !Double.isNaN(value)) {\n+            double previousMean = meanImpl.getResult();\n             meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n+            double newMean = meanImpl.getResult();\n             varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n             geoMeanImpl.increment(value);\n-        }\n-        n++;\n-    }\n+            if (Double.isNaN(previousMean)) {\n+                n = 1;\n+            } else {\n+                // only update n if the previous mean was not NaN\n+                n++;\n+            }\n+            // update variance using previous and new mean\n+            ((StorelessUnivariateStatistic) varianceImpl).increment(value, previousMean, newMean);\n+        } else {\n+            varianceImpl.increment(value);\n+            geoMeanImpl.increment(value);\n+            n++;\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}