{
    "patch": "    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n      String functionName = node.getFirstChild().getString();\n\n      // If this is a user-defined function call, mark it as changed\n      if (getUnscopedName(node.getFirstChild()).equals(getFunctionName(functionName))) {\n        changed.add(functionName);\n      }\n\n      // Find functions in arguments\n      for (Node argument = node.getSecondChild(); argument != null; argument = argument.getNext()) {\n        if (argument.getType() == Token.CALL) {\n          findCalledFunctions(argument, changed);\n        }\n      }\n\n      // Mark calls to known built-in functions as unchanged\n      if (isKnownBuiltInFunction(functionName)) {\n        return;\n      }\n\n      // Follow calls to known functions marked as unchanged\n      if (changed.contains(functionName)) {\n        Node functionNode = getFunctionNode(functionName);\n        if (functionNode != null) {\n          findCalledFunctions(getBodyNode(functionNode), changed);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..69cab695 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,34 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n+      String functionName = node.getFirstChild().getString();\n+\n+      // If this is a user-defined function call, mark it as changed\n+      if (getUnscopedName(node.getFirstChild()).equals(getFunctionName(functionName))) {\n+        changed.add(functionName);\n+      }\n+\n+      // Find functions in arguments\n+      for (Node argument = node.getSecondChild(); argument != null; argument = argument.getNext()) {\n+        if (argument.getType() == Token.CALL) {\n+          findCalledFunctions(argument, changed);\n+        }\n+      }\n+\n+      // Mark calls to known built-in functions as unchanged\n+      if (isKnownBuiltInFunction(functionName)) {\n+        return;\n+      }\n+\n+      // Follow calls to known functions marked as unchanged\n+      if (changed.contains(functionName)) {\n+        Node functionNode = getFunctionNode(functionName);\n+        if (functionNode != null) {\n+          findCalledFunctions(getBodyNode(functionNode), changed);\n+        }\n+      }\n+    }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}