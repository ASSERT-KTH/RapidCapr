{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    if (joinString == null) {\n      return;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n\n    // Check whether joining strings of zero-length elements\n    // with a zero-length string.\n    boolean allZeroLength = true;\n\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        String s = NodeUtil.getStringValue(elem);\n        if (s.length() == 0) {\n          // treat zero length string separately\n          allZeroLength = true;\n        } else {\n          allZeroLength = false;\n        }\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(s);\n      } else {\n        if (sb.length() > 0) {\n          foldedSize += sb.length() + joinString.length();\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        allZeroLength = false;\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      foldedSize += sb.length();\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    if (allZeroLength) {\n      parent.replaceChild(n, Node.newString(\"\"));\n      return;\n    }\n\n    foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (originalSize == -1) {\n      return;\n    }\n\n    if (foldedSize >= originalSize) {\n      return;\n    }\n\n    Node joined = new Node(Token.STRING);\n    joined.setString(\"\");\n    for (Node node : arrayFoldedChildren) {\n      if (node.getType() != Token.STRING) {\n        Node replacement = new Node(Token.ADD, Node.newString(\"\"),\n                                    node.cloneTree());\n        node = replacement;\n      }\n      joined.setString(\n          joined.getString() + node.getString() + joinString);\n    }\n    // strip trailing joinString\n    joined.setString(\n        joined.getString().substring(0, joined.getString().length() -\n                                           joinString.length()));\n    parent.replaceChild(n, joined);\n    t.getCompiler().reportCodeChange();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..62c8243f 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,7 +1458,7 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n@@ -1473,24 +1473,39 @@ class FoldConstants extends AbstractPostOrderCallback\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n+    if (joinString == null) {\n+      return;\n+    }\n+\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n+\n+    // Check whether joining strings of zero-length elements\n+    // with a zero-length string.\n+    boolean allZeroLength = true;\n+\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem)) {\n+        String s = NodeUtil.getStringValue(elem);\n+        if (s.length() == 0) {\n+          // treat zero length string separately\n+          allZeroLength = true;\n+        } else {\n+          allZeroLength = false;\n+        }\n         if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        sb.append(s);\n       } else {\n         if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n+          foldedSize += sb.length() + joinString.length();\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n           sb = new StringBuilder();\n         }\n+        allZeroLength = false;\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n@@ -1498,53 +1513,42 @@ class FoldConstants extends AbstractPostOrderCallback\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n+      foldedSize += sb.length();\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+    if (allZeroLength) {\n+      parent.replaceChild(n, Node.newString(\"\"));\n+      return;\n+    }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+    foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+    int originalSize = InlineCostEstimator.getCost(n);\n+    if (originalSize == -1) {\n+      return;\n     }\n+\n+    if (foldedSize >= originalSize) {\n+      return;\n+    }\n+\n+    Node joined = new Node(Token.STRING);\n+    joined.setString(\"\");\n+    for (Node node : arrayFoldedChildren) {\n+      if (node.getType() != Token.STRING) {\n+        Node replacement = new Node(Token.ADD, Node.newString(\"\"),\n+                                    node.cloneTree());\n+        node = replacement;\n+      }\n+      joined.setString(\n+          joined.getString() + node.getString() + joinString);\n+    }\n+    // strip trailing joinString\n+    joined.setString(\n+        joined.getString().substring(0, joined.getString().length() -\n+                                           joinString.length()));\n+    parent.replaceChild(n, joined);\n     t.getCompiler().reportCodeChange();\n   }\n ",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}