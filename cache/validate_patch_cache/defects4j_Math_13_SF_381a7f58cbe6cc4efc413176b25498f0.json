{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double epsilon = 1e-6;\n    final EigenDecomposition dec = new EigenDecomposition(m, epsilon);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    final double[] imagEigenvalues = dec.getImagEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    final int n = realEigenvalues.length;\n    final double[] eigenvalues = new double[n];\n\n    for (int i = 0; i < n; i++) {\n        if (imagEigenvalues[i] > epsilon ||\n                Math.abs(imagEigenvalues[i]) < epsilon && realEigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        if (realEigenvalues[i] < 0) {\n            eigenvalues[i] = 0;\n        } else {\n            eigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n        }\n    }\n\n    final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n    final RealMatrix sqrtM = eigenvectors.multiply(eigenvalueMatrix).multiply(eigenvectors.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fbdab6a49 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double epsilon = 1e-6;\n+    final EigenDecomposition dec = new EigenDecomposition(m, epsilon);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    final double[] imagEigenvalues = dec.getImagEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final int n = realEigenvalues.length;\n+    final double[] eigenvalues = new double[n];\n+\n+    for (int i = 0; i < n; i++) {\n+        if (imagEigenvalues[i] > epsilon ||\n+                Math.abs(imagEigenvalues[i]) < epsilon && realEigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        if (realEigenvalues[i] < 0) {\n+            eigenvalues[i] = 0;\n+        } else {\n+            eigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n+        }\n     }\n+\n+    final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n+    final RealMatrix sqrtM = eigenvectors.multiply(eigenvalueMatrix).multiply(eigenvectors.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}