{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double lg = Gamma.logGamma(a);\n    double gln = Math.exp(lg);\n\n    if (x < a + 1.0) {\n        double ap = a;\n        double sum = 1.0 / a;\n        double del = sum;\n        while (Math.abs(del) > Math.abs(sum) * 1.0e-15 && ap > 0.0) {\n            ap += 1.0;\n            del *= (x / ap);\n            sum += del;\n        }\n        return Math.exp(Math.log(sum) - lg);\n    } else {\n        double b = x + 1.0 - a;\n        double c = 1.0 / 1.0e-30;\n        double d = 1.0 / b;\n        double h = d;\n        double an = 1.0 / c;\n        double sum = h;\n        for (int i = 1; i <= 100; i++) {\n            double l = i;\n            double p = (l - a) * h + b * an;\n            if (Double.isInfinite(p)) {\n                return 1.0;\n            }\n            d = p + d;\n            if (Double.isInfinite(d)) {\n                return 1.0;\n            }\n            if (Math.abs(p) < Double.MIN_VALUE) {\n                return 1.0;\n            }\n            an = 1.0 / (p + an);\n            if (Math.abs(an) < Double.MIN_VALUE) {\n                return 1.0;\n            }\n            h = an * d;\n            if (h < 0) {\n                return 1.0;\n            }\n            sum += h;\n            if (Math.abs(h / sum) < 1.0e-15) {\n                return 1.0 - Math.exp(Math.log(sum) - lg);\n            }\n        }\n        return 1.0 - Math.exp(Math.log(sum) - lg);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..17a20eeec 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,63 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double lg = Gamma.logGamma(a);\n+    double gln = Math.exp(lg);\n+\n+    if (x < a + 1.0) {\n+        double ap = a;\n+        double sum = 1.0 / a;\n+        double del = sum;\n+        while (Math.abs(del) > Math.abs(sum) * 1.0e-15 && ap > 0.0) {\n+            ap += 1.0;\n+            del *= (x / ap);\n+            sum += del;\n+        }\n+        return Math.exp(Math.log(sum) - lg);\n+    } else {\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / 1.0e-30;\n+        double d = 1.0 / b;\n+        double h = d;\n+        double an = 1.0 / c;\n+        double sum = h;\n+        for (int i = 1; i <= 100; i++) {\n+            double l = i;\n+            double p = (l - a) * h + b * an;\n+            if (Double.isInfinite(p)) {\n+                return 1.0;\n+            }\n+            d = p + d;\n+            if (Double.isInfinite(d)) {\n+                return 1.0;\n+            }\n+            if (Math.abs(p) < Double.MIN_VALUE) {\n+                return 1.0;\n+            }\n+            an = 1.0 / (p + an);\n+            if (Math.abs(an) < Double.MIN_VALUE) {\n+                return 1.0;\n+            }\n+            h = an * d;\n+            if (h < 0) {\n+                return 1.0;\n+            }\n+            sum += h;\n+            if (Math.abs(h / sum) < 1.0e-15) {\n+                return 1.0 - Math.exp(Math.log(sum) - lg);\n+            }\n+        }\n+        return 1.0 - Math.exp(Math.log(sum) - lg);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}