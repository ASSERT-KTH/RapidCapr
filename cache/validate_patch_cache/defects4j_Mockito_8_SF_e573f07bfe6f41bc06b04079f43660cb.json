{
    "patch": "private boolean toStringEquals(Matcher m, Object arg) {\n    return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n}\n\nprivate void processTypeParameters(ParameterizedType classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n\n        // only process the type parameter if it hasn't already been processed\n        if (!contextualActualTypeParameters.containsKey(typeParameter)) {\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n\n            // recursively process type parameters for actual type argument\n            if (actualTypeArgument instanceof ParameterizedType) {\n                processTypeParameters((ParameterizedType) actualTypeArgument, contextualActualTypeParameters);\n            }\n        }\n    }\n}\n\nprivate Type boundsOf(WildcardType wildCard) {\n    Type[] types = wildCard.getUpperBounds();\n    return types.length == 0 ? Object.class : types[0];\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..30a65f348 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,42 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private boolean toStringEquals(Matcher m, Object arg) {\n+    return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n+}\n+\n+private void processTypeParameters(ParameterizedType classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+    if (!(classType instanceof ParameterizedType)) {\n+        return;\n+    }\n+    ParameterizedType parameterizedType = (ParameterizedType) classType;\n+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        TypeVariable<?> typeParameter = typeParameters[i];\n+\n+        // only process the type parameter if it hasn't already been processed\n+        if (!contextualActualTypeParameters.containsKey(typeParameter)) {\n+            Type actualTypeArgument = actualTypeArguments[i];\n+\n+            if (actualTypeArgument instanceof WildcardType) {\n+                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n+\n+            // recursively process type parameters for actual type argument\n+            if (actualTypeArgument instanceof ParameterizedType) {\n+                processTypeParameters((ParameterizedType) actualTypeArgument, contextualActualTypeParameters);\n+            }\n+        }\n+    }\n+}\n+\n+private Type boundsOf(WildcardType wildCard) {\n+    Type[] types = wildCard.getUpperBounds();\n+    return types.length == 0 ? Object.class : types[0];\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}