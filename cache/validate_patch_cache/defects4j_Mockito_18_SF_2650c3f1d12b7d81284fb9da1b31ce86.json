{
    "patch": "public class MyClass {\n    private Map<String, Integer> map;\n    \n    public MyClass() {\n        map = new HashMap<>();\n    }\n    \n    public void put(String key, int value) {\n        map.put(key, value);\n    }\n    \n    public Object returnValueFor(Class clazz) {\n        if(clazz.equals(Map.class)) {\n            return map;\n        } else if(clazz.equals(Iterable.class)) {\n            return map.values();\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..7c10959d9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    private Map<String, Integer> map;\n+    \n+    public MyClass() {\n+        map = new HashMap<>();\n+    }\n+    \n+    public void put(String key, int value) {\n+        map.put(key, value);\n+    }\n+    \n+    public Object returnValueFor(Class clazz) {\n+        if(clazz.equals(Map.class)) {\n+            return map;\n+        } else if(clazz.equals(Iterable.class)) {\n+            return map.values();\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}