{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // bracketing failed, use bisection method\n        double mid = (min + max) / 2.0;\n        double yMid = f.value(mid);\n       \n        int i = 0;\n        while (i < maxIterations) {\n            if (yMid == 0.0) {\n                // mid is a root\n                ret = mid;\n                setResult(ret, i);\n                return ret;\n            } else if (sign * yMid < 0.0) {\n                // root is bracketed by min and mid\n                ret = solve(min, yMin, mid, yMid, min, yMin);\n                setResult(ret, i);\n                return ret;\n            } else {\n                // root is bracketed by mid and max\n                ret = solve(mid, yMid, max, yMax, mid, yMid);\n                setResult(ret, i);\n                return ret;\n            }\n            \n            i++;\n        }\n        \n        throw new MaxIterationsExceededException(maxIterations);\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}\n\nprivate double solve(double x0, double y0, double x1, double y1, double x2, double y2) {\n    double qn = y1 / (y0 - y1);\n    double qn1 = y2 / (y0 - y2);\n    double qn2 = y2 / (y1 - y2);\n\n    double c = qn1 * (x0 - x1) * (x0 - x2);\n    double b = qn2 * (x0 - x1) * (x1 - x2);\n    double a = (qn - 1.0) * (x1 - x2) * (x0 - x2);\n\n    return x0 - ((b + c) / a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..bcaf77a8f 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,67 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+public double solve(double min, double max) throws MaxIterationsExceededException, \n+    FunctionEvaluationException {\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n \n-        return ret;\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+    if (sign >= 0) {\n+        // bracketing failed, use bisection method\n+        double mid = (min + max) / 2.0;\n+        double yMid = f.value(mid);\n+       \n+        int i = 0;\n+        while (i < maxIterations) {\n+            if (yMid == 0.0) {\n+                // mid is a root\n+                ret = mid;\n+                setResult(ret, i);\n+                return ret;\n+            } else if (sign * yMid < 0.0) {\n+                // root is bracketed by min and mid\n+                ret = solve(min, yMin, mid, yMid, min, yMin);\n+                setResult(ret, i);\n+                return ret;\n+            } else {\n+                // root is bracketed by mid and max\n+                ret = solve(mid, yMid, max, yMax, mid, yMid);\n+                setResult(ret, i);\n+                return ret;\n+            }\n+            \n+            i++;\n+        }\n+        \n+        throw new MaxIterationsExceededException(maxIterations);\n+    } else {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n     }\n+\n+    return ret;\n+}\n+\n+private double solve(double x0, double y0, double x1, double y1, double x2, double y2) {\n+    double qn = y1 / (y0 - y1);\n+    double qn1 = y2 / (y0 - y2);\n+    double qn2 = y2 / (y1 - y2);\n+\n+    double c = qn1 * (x0 - x1) * (x0 - x2);\n+    double b = qn2 * (x0 - x1) * (x1 - x2);\n+    double a = (qn - 1.0) * (x1 - x2) * (x0 - x2);\n+\n+    return x0 - ((b + c) / a);\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: method solve(double,double,double,double,double,double) is already defined in class BrentSolver",
    "test_result": "ERROR"
}