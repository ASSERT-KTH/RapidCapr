{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition eig = new EigenDecomposition(m);\n    RealMatrix eigenvalues = eig.getD();\n    RealMatrix eigenvectors = eig.getV();\n    int size = m.getRowDimension();\n    RealMatrix transformedEigenvalues = MatrixUtils.createRealIdentityMatrix(size);\n    \n    for (int i = 0; i < size; i++) {\n        double eigenvalue = eigenvalues.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n        } else if (eigenvalue > 0) {\n            transformedEigenvalues.setEntry(i, i, Math.sqrt(eigenvalue));\n        }\n    }\n    \n    return eigenvectors.multiply(transformedEigenvalues).multiply(eigenvectors.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..31ca35776 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    RealMatrix eigenvalues = eig.getD();\n+    RealMatrix eigenvectors = eig.getV();\n+    int size = m.getRowDimension();\n+    RealMatrix transformedEigenvalues = MatrixUtils.createRealIdentityMatrix(size);\n+    \n+    for (int i = 0; i < size; i++) {\n+        double eigenvalue = eigenvalues.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+        } else if (eigenvalue > 0) {\n+            transformedEigenvalues.setEntry(i, i, Math.sqrt(eigenvalue));\n+        }\n     }\n+    \n+    return eigenvectors.multiply(transformedEigenvalues).multiply(eigenvectors.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}