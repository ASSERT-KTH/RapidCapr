{
    "patch": "  List<Var> args = fnScope.getArguments();\n  if (!args.isEmpty()) {\n    Var firstArg = args.get(0);\n    Node argNameNode = firstArg.getNameNode();\n    if (argNameNode.isName()) {\n      // keep the first argument\n      List<Var> referencedArgs = new ArrayList<>();\n      referencedArgs.add(firstArg);\n\n      // check which arguments are referenced\n      NodeUtil.visitPreOrder(function.getLastChild(), new Callback() {\n        @Override\n        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n          switch (n.getToken()) {\n            case NAME:\n              Var var = fnScope.getVar(n.getString());\n              if (var != null && var.isArguments()) {\n                return false; // skip references to 'arguments'\n              } else {\n                return true;\n              }\n            case FUNCTION:\n              // skip function body\n              return n == function || !NodeUtil.isFunctionExpression(n);\n            case CLASS:\n              // skip class body\n              return n == function || !NodeUtil.isClassExpression(n);\n            default:\n              // traverse other nodes\n              return true;\n          }\n        }\n\n        @Override\n        public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n          if (n.isName() && !n.getString().isEmpty()) {\n            Var var = fnScope.getVar(n.getString());\n            if (var != null && var.isArguments()) {\n              // don't count references to 'arguments'\n            } else {\n              referencedArgs.add(var);\n            }\n          }\n        }\n      });\n\n      if (referencedArgs.size() == 1) {\n        // only the first \"arguments\" object is referenced\n        return;\n      }\n\n      // remove the unreferenced arguments\n      Node argListNode = function.getFirstChild().getNext();\n      for (int i = args.size() - 1; i >= 1; --i) {\n        Var argVar = args.get(i);\n        if (!referencedArgs.contains(argVar)) {\n          Node argName = argVar.getNameNode();\n          argListNode.removeChild(argName);\n          compiler.reportChangeToChangeScope(argName);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..629d2534 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,69 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  List<Var> args = fnScope.getArguments();\n+  if (!args.isEmpty()) {\n+    Var firstArg = args.get(0);\n+    Node argNameNode = firstArg.getNameNode();\n+    if (argNameNode.isName()) {\n+      // keep the first argument\n+      List<Var> referencedArgs = new ArrayList<>();\n+      referencedArgs.add(firstArg);\n+\n+      // check which arguments are referenced\n+      NodeUtil.visitPreOrder(function.getLastChild(), new Callback() {\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+          switch (n.getToken()) {\n+            case NAME:\n+              Var var = fnScope.getVar(n.getString());\n+              if (var != null && var.isArguments()) {\n+                return false; // skip references to 'arguments'\n+              } else {\n+                return true;\n+              }\n+            case FUNCTION:\n+              // skip function body\n+              return n == function || !NodeUtil.isFunctionExpression(n);\n+            case CLASS:\n+              // skip class body\n+              return n == function || !NodeUtil.isClassExpression(n);\n+            default:\n+              // traverse other nodes\n+              return true;\n+          }\n+        }\n+\n+        @Override\n+        public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+          if (n.isName() && !n.getString().isEmpty()) {\n+            Var var = fnScope.getVar(n.getString());\n+            if (var != null && var.isArguments()) {\n+              // don't count references to 'arguments'\n+            } else {\n+              referencedArgs.add(var);\n+            }\n+          }\n+        }\n+      });\n+\n+      if (referencedArgs.size() == 1) {\n+        // only the first \"arguments\" object is referenced\n+        return;\n+      }\n+\n+      // remove the unreferenced arguments\n+      Node argListNode = function.getFirstChild().getNext();\n+      for (int i = args.size() - 1; i >= 1; --i) {\n+        Var argVar = args.get(i);\n+        if (!referencedArgs.contains(argVar)) {\n+          Node argName = argVar.getNameNode();\n+          argListNode.removeChild(argName);\n+          compiler.reportChangeToChangeScope(argName);\n+        }\n+      }\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}