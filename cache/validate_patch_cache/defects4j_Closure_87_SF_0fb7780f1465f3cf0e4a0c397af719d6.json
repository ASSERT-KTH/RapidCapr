{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node firstChild = n.getFirstChild();\n    if (firstChild != null && NodeUtil.isExpressionResult(firstChild)) {\n      Node parent = n.getParent();\n      if (parent != null) {\n        int parentType = parent.getType();\n        // don't fold top if block is directly in a script or block\n        if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n          return false;\n        }\n        if (parentType == Token.EXPR_RESULT\n          && n == parent.getFirstChild()\n          && !NodeUtil.isExpressionNode(parent)) {\n          // do not fold into a statement expression unless it's\n          // directly a child of a SCRIPT or BLOCK node.\n          return false;\n        }\n        // The following cases are all safe to fold the child expression into its parent.\n        return parentType == Token.VAR || parentType == Token.ASSIGN\n          || parentType == Token.RETURN || parentType == Token.CONST\n          || parentType == Token.EXPR_RESULT\n          || parentType == Token.IF || parentType == Token.WHILE\n          || parentType == Token.DO;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..15530be7 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node firstChild = n.getFirstChild();\n+    if (firstChild != null && NodeUtil.isExpressionResult(firstChild)) {\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        // don't fold top if block is directly in a script or block\n+        if (parentType == Token.SCRIPT || parentType == Token.BLOCK) {\n+          return false;\n+        }\n+        if (parentType == Token.EXPR_RESULT\n+          && n == parent.getFirstChild()\n+          && !NodeUtil.isExpressionNode(parent)) {\n+          // do not fold into a statement expression unless it's\n+          // directly a child of a SCRIPT or BLOCK node.\n+          return false;\n+        }\n+        // The following cases are all safe to fold the child expression into its parent.\n+        return parentType == Token.VAR || parentType == Token.ASSIGN\n+          || parentType == Token.RETURN || parentType == Token.CONST\n+          || parentType == Token.EXPR_RESULT\n+          || parentType == Token.IF || parentType == Token.WHILE\n+          || parentType == Token.DO;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}