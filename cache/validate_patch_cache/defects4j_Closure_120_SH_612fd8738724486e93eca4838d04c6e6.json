{
    "patch": "        Node startNode = ref.getNode();\n        Node cfgNode = startNode;\n        while (cfgNode.getCfg().getInEdges(cfgNode).size() == 1\n            && cfgNode.getCfg().getOutEdges(cfgNode).size() == 1) {\n          cfgNode = cfgNode.getCfg().getOutEdges(cfgNode).get(0).getDestination();\n\n          if (cfgNode.getBlock().callsFunction()) {\n            return false;\n          }\n        }\n        return dominatesBlock(startNode, cfgNode.getBlock().getFirstNode());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d35af350 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        Node startNode = ref.getNode();\n+        Node cfgNode = startNode;\n+        while (cfgNode.getCfg().getInEdges(cfgNode).size() == 1\n+            && cfgNode.getCfg().getOutEdges(cfgNode).size() == 1) {\n+          cfgNode = cfgNode.getCfg().getOutEdges(cfgNode).get(0).getDestination();\n+\n+          if (cfgNode.getBlock().callsFunction()) {\n+            return false;\n+          }\n+        }\n+        return dominatesBlock(startNode, cfgNode.getBlock().getFirstNode());\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}