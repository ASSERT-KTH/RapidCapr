{
    "patch": "attachLiteralTypes(n);\nif (parent != null) {\n  switch(parent.getType()) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      break;\n    case Token.TRY:\n      if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n      }\n      break;\n    case Token.LP:\n      if (NodeUtil.isFunctionExpression(parent)) {\n        defineDeclaredFunction(parent, parent.getParent());\n      } else if (parent == scope.getRootNode()) {\n        handleFunctionInputs(n);\n      }\n      break;\n    default:\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7ec8f0b6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,15 +1440,11 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n+attachLiteralTypes(n);\n+if (parent != null) {\n+  switch(parent.getType()) {\n+    case Token.SCRIPT:\n+    case Token.BLOCK:\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1463,7 +1459,23 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n-    }\n+      break;\n+    case Token.TRY:\n+      if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+      }\n+      break;\n+    case Token.LP:\n+      if (NodeUtil.isFunctionExpression(parent)) {\n+        defineDeclaredFunction(parent, parent.getParent());\n+      } else if (parent == scope.getRootNode()) {\n+        handleFunctionInputs(n);\n+      }\n+      break;\n+    default:\n+      break;\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}