{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(NULL_TYPE);\n  }\n  \n  // If there are arguments, check that they match the expected types\n  if (constructor.getNext() != null) {\n    Node arg = constructor.getNext().getFirstChild();\n    if (type != null) {\n      FunctionType ft = type.toMaybeFunctionType();\n      Node param = ft == null ? null : ft.getParameters();\n      for (; arg != null && param != null; arg = arg.getNext(), param = param.getNext()) {\n        JSType expectedType = param.getJSType();\n        if (arg.getJSType() == null || !expectedType.isSubtype(arg.getJSType())) {\n          compiler.report(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n        }\n        scope = traverse(arg, scope);\n      }\n    }\n    // Check for excess arguments\n    if (arg != null) {\n      compiler.report(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n      for (; arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n  }\n\n  n.setJSType(type);\n  \n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..2db49641 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,54 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+      }\n+    }\n+  }\n+  if (type == null) {\n+    type = getNativeType(NULL_TYPE);\n+  }\n+  \n+  // If there are arguments, check that they match the expected types\n+  if (constructor.getNext() != null) {\n+    Node arg = constructor.getNext().getFirstChild();\n+    if (type != null) {\n+      FunctionType ft = type.toMaybeFunctionType();\n+      Node param = ft == null ? null : ft.getParameters();\n+      for (; arg != null && param != null; arg = arg.getNext(), param = param.getNext()) {\n+        JSType expectedType = param.getJSType();\n+        if (arg.getJSType() == null || !expectedType.isSubtype(arg.getJSType())) {\n+          compiler.report(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n         }\n+        scope = traverse(arg, scope);\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    // Check for excess arguments\n+    if (arg != null) {\n+      compiler.report(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n+      for (; arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+      }\n     }\n-    return scope;\n   }\n \n+  n.setJSType(type);\n+  \n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}