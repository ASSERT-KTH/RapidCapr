{
    "patch": "public <T> ReturnValue<T> handleEmptyIterable(Class<T> clazz) {\n    if (Iterable.class.isAssignableFrom(clazz)) {\n        Iterable emptyIterable = Collections.emptyList();\n        return new ReturnValue<T>((T) emptyIterable);\n    } else {\n        return null; // or throw an appropriate exception\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..de5621db6 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,14 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public <T> ReturnValue<T> handleEmptyIterable(Class<T> clazz) {\n+    if (Iterable.class.isAssignableFrom(clazz)) {\n+        Iterable emptyIterable = Collections.emptyList();\n+        return new ReturnValue<T>((T) emptyIterable);\n+    } else {\n+        return null; // or throw an appropriate exception\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}