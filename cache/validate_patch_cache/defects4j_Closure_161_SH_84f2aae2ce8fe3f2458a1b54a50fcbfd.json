{
    "patch": "// Check that the access is not used as an assignment target\nif (NodeUtil.isLValue(n)) {\n  return n;\n}\n\nNode parent = n.getParent();\nif (parent.getType() == Token.ASSIGN) {\n  Node assignLeft = parent.getFirstChild();\n  if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)\n      && assignLeft.getLastChild() == n) {\n    Node grandParent = parent.getParent();\n    if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n      retur",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..d8658300 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+}\n+\n+Node parent = n.getParent();\n+if (parent.getType() == Token.ASSIGN) {\n+  Node assignLeft = parent.getFirstChild();\n+  if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)\n+      && assignLeft.getLastChild() == n) {\n+    Node grandParent = parent.getParent();\n+    if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+      retur\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}