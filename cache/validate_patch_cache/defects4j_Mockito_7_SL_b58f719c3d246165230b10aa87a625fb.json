{
    "patch": "private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    if (typeVariable == null) {\n        return null;\n    }\n    Type[] typeBounds = typeVariable.getBounds();\n    if (typeBounds.length == 0) {\n        return null;\n    }\n    Type typeBound = typeBounds[0];\n    if (typeBound instanceof Class) {\n        return typeBound;\n    }\n    if (!(typeBound instanceof TypeVariable)) {\n        return null;\n    }\n    return getActualTypeArgumentFor((TypeVariable<?>) typeBound);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..df3da833a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    if (typeVariable == null) {\n+        return null;\n+    }\n+    Type[] typeBounds = typeVariable.getBounds();\n+    if (typeBounds.length == 0) {\n+        return null;\n+    }\n+    Type typeBound = typeBounds[0];\n+    if (typeBound instanceof Class) {\n+        return typeBound;\n+    }\n+    if (!(typeBound instanceof TypeVariable)) {\n+        return null;\n+    }\n+    return getActualTypeArgumentFor((TypeVariable<?>) typeBound);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}