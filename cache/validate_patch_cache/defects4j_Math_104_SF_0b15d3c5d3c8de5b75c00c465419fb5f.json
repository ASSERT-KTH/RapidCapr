{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    \n    if (x == 0.0) {\n        return 1.0;\n    }\n    \n    double gln = LogGamma.logGamma(a);\n    double apar = a;\n    double del = 1.0 / a;\n    double sum = del;\n    for (int i = 1; i <= 100000; ++i) {\n        apar += 1.0;\n        del *= x / apar;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * 1e-15) {\n            return sum * Math.exp(-x + a * Math.log(x) - gln);\n        }\n    }\n    throw new RuntimeException(\"Incomplete gamma function failed to converge\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..41b6e5e17 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    \n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    \n+    double gln = LogGamma.logGamma(a);\n+    double apar = a;\n+    double del = 1.0 / a;\n+    double sum = del;\n+    for (int i = 1; i <= 100000; ++i) {\n+        apar += 1.0;\n+        del *= x / apar;\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * 1e-15) {\n+            return sum * Math.exp(-x + a * Math.log(x) - gln);\n+        }\n+    }\n+    throw new RuntimeException(\"Incomplete gamma function failed to converge\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}