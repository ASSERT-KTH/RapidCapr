{
    "patch": "        \n        // Check if the parent of the block has a Function node and the block is its only child.\n        if (n.getParent().getType() == Token.FUNCTION && n.getParent().hasOneChild()) {\n          return false;\n        }\n        // Check if the parent of the block has a RETURN statement and the block is its only child.\n        if (n.getParent().getType() == Token.RETURN && n.getParent().hasOneChild()) {\n          return false;\n        }\n        // Check if the parent of the block has a FOR statement and the block is its only child.\n        if (n.getParent().getType() == Token.FOR && n.getParent().hasOneChild()) {\n          return false;\n        }\n\n        return !NodeUtil.mayHaveSideEffects(maybeExpr) || NodeUtil.isExpressionNode(maybeExpr);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..230af66d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,21 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+        \n+        // Check if the parent of the block has a Function node and the block is its only child.\n+        if (n.getParent().getType() == Token.FUNCTION && n.getParent().hasOneChild()) {\n+          return false;\n+        }\n+        // Check if the parent of the block has a RETURN statement and the block is its only child.\n+        if (n.getParent().getType() == Token.RETURN && n.getParent().hasOneChild()) {\n+          return false;\n+        }\n+        // Check if the parent of the block has a FOR statement and the block is its only child.\n+        if (n.getParent().getType() == Token.FOR && n.getParent().hasOneChild()) {\n+          return false;\n+        }\n \n-    return false;\n-  }\n+        return !NodeUtil.mayHaveSideEffects(maybeExpr) || NodeUtil.isExpressionNode(maybeExpr);\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}