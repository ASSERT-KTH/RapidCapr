{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }\n  \n  static boolean allResultsMatch(Node n, Predicate<Node> pred) {\n    // Check if the current node matches the predicate\n    if (!pred.apply(n)) {\n      return false;\n    }\n\n    // Check if all the child nodes match the predicate\n    for (Node c : n) {\n      if (!allResultsMatch(c, pred)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..8fc50380 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1419,6 +1419,22 @@ public final class NodeUtil {\n       return mayBeStringHelper(n);\n     }\n   }\n+  \n+  static boolean allResultsMatch(Node n, Predicate<Node> pred) {\n+    // Check if the current node matches the predicate\n+    if (!pred.apply(n)) {\n+      return false;\n+    }\n+\n+    // Check if all the child nodes match the predicate\n+    for (Node c : n) {\n+      if (!allResultsMatch(c, pred)) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+  }\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: method allResultsMatch(Node,Predicate<Node>) is already defined in class NodeUtil",
    "test_result": "ERROR"
}