{
    "patch": "} else if (parent.isCall() && parent.getFirstChild() == n && !parent.getParent().isExprResult()) {\n  // Exclude the rhs of the call expression from being associated with the lhs.\n  recordDepScope(parent.getNext(), ns);\n} else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..7c4a0910 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,10 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+} else if (parent.isCall() && parent.getFirstChild() == n && !parent.getParent().isExprResult()) {\n+  // Exclude the rhs of the call expression from being associated with the lhs.\n+  recordDepScope(parent.getNext(), ns);\n+} else {\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}