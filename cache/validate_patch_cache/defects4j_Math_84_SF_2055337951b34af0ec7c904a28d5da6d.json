{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) { // FIXED: compare expanded with reflected instead of reflected with expanded\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n                // try to perform a contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n\n                } else {\n                    // perform a shrink\n                    performShrink(comparator);\n                }\n            }\n            // check convergence\n            final double[] y1 = simplex[0].getPoint();\n            boolean stop = true;\n\n            for (int i = 1; i < simplex.length; i++) {\n                final double[] y2 = simplex[i].getPoint();\n                boolean tmp = true;\n                for (int j = 0; j < y1.length; j++) {\n                    tmp &= (Math.abs(y1[j] - y2[j]) < getRelativeThreshold() * (Math.abs(y2[j]) + Math.abs(y1[j])) + getAbsoluteThreshold());\n                }\n                stop &= tmp;\n\n            }\n            if (stop) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e5708cc71 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,11 +58,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n             incrementIterationsCounter();\n \n             // save the original vertex\n@@ -76,27 +75,40 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) { // FIXED: compare expanded with reflected instead of reflected with expanded\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n+                // try to perform a contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex;\n \n+                } else {\n+                    // perform a shrink\n+                    performShrink(comparator);\n+                }\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n-            }\n-\n-        }\n+            final double[] y1 = simplex[0].getPoint();\n+            boolean stop = true;\n+\n+            for (int i = 1; i < simplex.length; i++) {\n+                final double[] y2 = simplex[i].getPoint();\n+                boolean tmp = true;\n+                for (int j = 0; j < y1.length; j++) {\n+                    tmp &= (Math.abs(y1[j] - y2[j]) < getRelativeThreshold() * (Math.abs(y2[j]) + Math.abs(y1[j])) + getAbsoluteThreshold());\n+                }\n+                stop &= tmp;\n \n-    }\n+            }\n+            if (stop) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}