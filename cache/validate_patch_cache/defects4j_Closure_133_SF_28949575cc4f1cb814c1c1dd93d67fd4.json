{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n\n    if (result == null) {\n        return null;\n    }\n\n    while (result.contains(\"@type\") && !result.contains(\"*/\")) {\n        String nextLine = stream.getRemainingJSDocLine();\n        if (nextLine == null) {\n            return result;\n        }\n        result += nextLine.trim();\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..0ccfeefa 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,23 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+\n+    if (result == null) {\n+        return null;\n+    }\n+\n+    while (result.contains(\"@type\") && !result.contains(\"*/\")) {\n+        String nextLine = stream.getRemainingJSDocLine();\n+        if (nextLine == null) {\n+            return result;\n+        }\n+        result += nextLine.trim();\n+    }\n+\n     return result;\n-  }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.IllegalStateException: Recorded bad position information",
    "test_result": "FAIL"
}