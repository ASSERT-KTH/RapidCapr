{
    "patch": "    public static int largest_divisor(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be positive\");\n        }\n        int largest = 1; // set the largest divisor to 1 initially\n        for (int i = 2; i <= Math.sqrt(n); i ++) { // check divisors only up to the square root of n\n            if (n % i == 0) {\n                // if i is a divisor of n, update the largest divisor to i\n                largest = i;\n                // if i is not equal to the other divisor, update the largest divisor to the other divisor\n                if (i != n / i) {\n                    largest = Math.max(largest, n / i);\n                }\n            }\n        }\n        return largest;\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..12b4c2e 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -2,10 +2,20 @@ package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n     public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n-                return i;\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"Input must be positive\");\n         }\n-        return 1;\n+        int largest = 1; // set the largest divisor to 1 initially\n+        for (int i = 2; i <= Math.sqrt(n); i ++) { // check divisors only up to the square root of n\n+            if (n % i == 0) {\n+                // if i is a divisor of n, update the largest divisor to i\n+                largest = i;\n+                // if i is not equal to the other divisor, update the largest divisor to the other divisor\n+                if (i != n / i) {\n+                    largest = Math.max(largest, n / i);\n+                }\n+            }\n+        }\n+        return largest;\n     }\n }",
    "result_reason": "   TEST_LARGEST_DIVISOR.test_4:31 expected:<10> but was:<50>",
    "test_result": "FAIL"
}