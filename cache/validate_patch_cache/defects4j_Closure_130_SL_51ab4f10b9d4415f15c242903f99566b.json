{
    "patch": "if (name.isSimpleName() && name.props != null &&\n        name.globalSets == 1 && name.localSets == 0) {\n    if (name.aliasingGets > 0) {\n        // `name` meets condition (b). Find all of its local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                // `name` meets condition (c). Try to inline it.\n                if (inlineAliasIfPossible(ref, namespace)) {\n                    name.removeRef(ref);\n                }\n            }\n        }\n    }\n    // Check if all the predicates still hold after the local alias inlining.\n    if (name.props != null && name.aliasingGets == 0) {\n        for (Name prop : name.props) {\n            if (!prop.isSimpleName() || prop.globalSets > 1 ||\n                    prop.localSets > 0 || prop.aliasingGets > 0) {\n                // A predicate fails, add all children to the workList.\n                name.aliasingGets = -1;  // Blacklist this name from the loop.\n                if (prop.props != null) {\n                    workList.addAll(prop.props);\n                }\n                break;\n            }\n            workList.push(prop);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..8b8269f0 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,37 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.isSimpleName() && name.props != null &&\n+        name.globalSets == 1 && name.localSets == 0) {\n+    if (name.aliasingGets > 0) {\n+        // `name` meets condition (b). Find all of its local aliases\n+        // and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+                // `name` meets condition (c). Try to inline it.\n+                if (inlineAliasIfPossible(ref, namespace)) {\n+                    name.removeRef(ref);\n+                }\n+            }\n+        }\n+    }\n+    // Check if all the predicates still hold after the local alias inlining.\n+    if (name.props != null && name.aliasingGets == 0) {\n+        for (Name prop : name.props) {\n+            if (!prop.isSimpleName() || prop.globalSets > 1 ||\n+                    prop.localSets > 0 || prop.aliasingGets > 0) {\n+                // A predicate fails, add all children to the workList.\n+                name.aliasingGets = -1;  // Blacklist this name from the loop.\n+                if (prop.props != null) {\n+                    workList.addAll(prop.props);\n+                }\n+                break;\n+            }\n+            workList.push(prop);\n+        }\n+    }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}