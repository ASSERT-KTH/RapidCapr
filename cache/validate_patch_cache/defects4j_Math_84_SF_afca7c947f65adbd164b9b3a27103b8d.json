{
    "patch": "        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n\n        while (numIterations < maxIterations) {\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // Contract\n                    final RealPointValuePair[] contractedSimplex = contract(original, comparator, rho);\n                    if (comparator.compare(contractedSimplex[0], best) < 0) {\n                        simplex = contractedSimplex;\n                    } else {\n                        simplex = reflectedSimplex;\n                    }\n                } else {\n                    // Accept reflection\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            } else {\n                // Find contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = contract(original, comparator, rho);\n                } else {\n                    decreaseAllSteps(steps, comparator, sigma);\n                }\n            }\n        }\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);        ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b2814f151 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,12 +58,11 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n+        while (numIterations < maxIterations) {\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -76,27 +75,32 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // Contract\n+                    final RealPointValuePair[] contractedSimplex = contract(original, comparator, rho);\n+                    if (comparator.compare(contractedSimplex[0], best) < 0) {\n+                        simplex = contractedSimplex;\n+                    } else {\n+                        simplex = reflectedSimplex;\n+                    }\n+                } else {\n+                    // Accept reflection\n                     simplex = reflectedSimplex;\n                 }\n \n                 return;\n \n+            } else {\n+                // Find contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = contract(original, comparator, rho);\n+                } else {\n+                    decreaseAllSteps(steps, comparator, sigma);\n+                }\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n         }\n-\n-    }\n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);        \n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}