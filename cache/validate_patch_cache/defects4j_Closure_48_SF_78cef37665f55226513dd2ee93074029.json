{
    "patch": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n    Node n, Node parent, Node rhsValue) {\n  Var scopeVar = scope.getVar(n.getQualifiedName());\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  JSType valueType = getDeclaredType(t.getSourceName(), info, ownerNode, rhsValue);\n  boolean inferred = false;\n\n  if (n.isGetProp()) {\n    if (valueType == null) {\n      typeWarnings.add(PROP_WITHOUT_DECLARATION, t.getSourceName(),\n          n.lineno(), qName);\n      stubDeclarations.add(new StubDeclaration(n, ownerNode != null && ownerNode.isName(),\n          parent.isExprResult() && !inExterns));\n      return;\n    }\n\n    ObjectType ownerType = null;\n    Var qVar = scope.getVar(ownerNode.getString());\n    if (qVar != null) {\n      ownerType = ObjectType.cast(qVar.getType());\n    }\n\n    if (ownerType != null) {\n      boolean isAlreadyDefined = ownerType.hasOwnProperty(propName);\n      if (!isAlreadyDefined || ownerType.isPropertyTypeInferred(propName)) {\n        ownerType.defineDeclaredProperty(propName, valueType, t.getSourceName(),\n            n.getLineno() + 1, !inExterns);\n        if (scopeVar != null) {\n          // We have seen a var/const declaration for this property already,\n          // so upgrade this property from inferred to declared, and record\n          // any momentum on this node to define this property in the future.\n          if (ownerType.isPropertyTypeInferred(propName)) {\n            ownerType.undeclareProperty(propName);\n          }\n        }\n      }\n    }\n\n    if (!isBuiltinExtern(qName)) {\n      defineSlot(n, parent, valueType, inferred);\n    }\n\n  } else if (n.isStringKey() && parent.isObjectLit()) {\n    if (valueType == null) {\n      typeWarnings.add(PROP_WITHOUT_DECLARATION, t.getSourceName(),\n          n.getLineno(), qName);\n      if (!inExterns) {\n        stubDeclarations.add(new StubDeclaration(n, true, true));\n      }\n      return;\n    }\n\n    Node objLitNode = parent.getFirstChild();\n    JSDocInfo jsDocInfo = objLitNode.getJSDocInfo();\n    boolean isQuoted = n.isQuotedString();\n\n    // Determine if this property should be inferred or declared.\n    // Doesn't really belong here, but we need to examine jsDocInfo and couldn't\n    // come up with a better place.\n    boolean isConstant = jsDocInfo != null ? jsDocInfo.isConstant() : false;\n    boolean reportedTypeWarning = false;\n    if (isConstant && valueType == null) {\n      typeWarnings.add(PROP_WITHOUT_DECLARATION, t.getSourceName(),\n          n.getLineno(), qName);\n      reportedTypeWarning = true;\n    } else if (n.isQuotedString() &&\n        missingPropertyWarningsGuard.shouldSuppress(\n            t.getSourceName(), n.getLineno(), qName)) {\n      // Property accesses via a quoted string are always inferred because we\n      // don't know if the property is a symbol or a string.\n      inferred = true;\n    } else if (jsDocInfo != null && jsDocInfo.hasType()) {\n      inferred = false;\n    } else if (!inExterns) {\n      inferred = true;\n    }\n\n    if (valueType != null && (inferred ||\n        n.getString().equals(\"prototype\") ||\n        missingPropertyWarningsGuard.shouldSuppress(\n            t.getSourceName(), n.getLineno(), qName))) {\n      defineSlot(n, parent, valueType, true);\n    } else if (valueType != null) {\n      ObjectType objectType = ObjectType.cast(objLitNode.getJSType());\n      if (!objectType.hasProperty(propName)\n          || objectType.isPropertyTypeInferred(propName)) {\n        objectType.defineDeclaredProperty(propName, valueType, t.getSourceName(),\n            n.getLineno() + 1, !inExterns);\n      }\n    }\n\n    if (reportedTypeWarning) {\n      stubDeclarations.add(new StubDeclaration(n, true, true));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 3fb48137..a1c49a62 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1413,152 +1413,105 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param rhsValue The node that {@code n} is being initialized to,\n      *     or {@code null} if this is a stub declaration.\n      */\n-    void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n-        Node n, Node parent, Node rhsValue) {\n-      Node ownerNode = n.getFirstChild();\n-      String ownerName = ownerNode.getQualifiedName();\n-      String qName = n.getQualifiedName();\n-      String propName = n.getLastChild().getString();\n-      Preconditions.checkArgument(qName != null && ownerName != null);\n-\n-      // Precedence of type information on GETPROPs:\n-      // 1) @type annnotation / @enum annotation\n-      // 2) ASSIGN to FUNCTION literal\n-      // 3) @param/@return annotation (with no function literal)\n-      // 4) ASSIGN to something marked @const\n-      // 5) ASSIGN to anything else\n-      //\n-      // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff\n-      // the function has jsdoc or has not been declared before.\n-      //\n-      // FUNCTION literals are special because TypedScopeCreator is very smart\n-      // about getting as much type information as possible for them.\n-\n-      // Determining type for #1 + #2 + #3 + #4\n-      JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n-      if (valueType == null && rhsValue != null) {\n-        // Determining type for #5\n-        valueType = rhsValue.getJSType();\n-      }\n-      // Function prototypes are special.\n-      // It's a common JS idiom to do:\n-      // F.prototype = { ... };\n-      // So if F does not have an explicitly declared super type,\n-      // allow F.prototype to be redefined arbitrarily.\n-      if (\"prototype\".equals(propName)) {\n-        Var qVar = scope.getVar(qName);\n-        if (qVar != null) {\n-          // If the programmer has declared that F inherits from Super,\n-          // and they assign F.prototype to an object literal,\n-          // then they are responsible for making sure that the object literal's\n-          // implicit prototype is set up appropriately. We just obey\n-          // the @extends tag.\n-          ObjectType qVarType = ObjectType.cast(qVar.getType());\n-          if (qVarType != null &&\n-              rhsValue != null &&\n-              rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n-                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n-          } else if (!qVar.isTypeInferred()) {\n-            // If the programmer has declared that F inherits from Super,\n-            // and they assign F.prototype to some arbitrary expression,\n-            // there's not much we can do. We just ignore the expression,\n-            // and hope they've annotated their code in a way to tell us\n-            // what props are going to be on that prototype.\n-            return;\n-          }\n-          if (qVar.getScope() == scope) {\n-            scope.undeclare(qVar);\n+void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n+    Node n, Node parent, Node rhsValue) {\n+  Var scopeVar = scope.getVar(n.getQualifiedName());\n+  String qName = n.getQualifiedName();\n+  String propName = n.getLastChild().getString();\n+  Node ownerNode = n.getFirstChild();\n+  String ownerName = ownerNode.getQualifiedName();\n+  JSType valueType = getDeclaredType(t.getSourceName(), info, ownerNode, rhsValue);\n+  boolean inferred = false;\n+\n+  if (n.isGetProp()) {\n+    if (valueType == null) {\n+      typeWarnings.add(PROP_WITHOUT_DECLARATION, t.getSourceName(),\n+          n.lineno(), qName);\n+      stubDeclarations.add(new StubDeclaration(n, ownerNode != null && ownerNode.isName(),\n+          parent.isExprResult() && !inExterns));\n+      return;\n+    }\n+\n+    ObjectType ownerType = null;\n+    Var qVar = scope.getVar(ownerNode.getString());\n+    if (qVar != null) {\n+      ownerType = ObjectType.cast(qVar.getType());\n+    }\n+\n+    if (ownerType != null) {\n+      boolean isAlreadyDefined = ownerType.hasOwnProperty(propName);\n+      if (!isAlreadyDefined || ownerType.isPropertyTypeInferred(propName)) {\n+        ownerType.defineDeclaredProperty(propName, valueType, t.getSourceName(),\n+            n.getLineno() + 1, !inExterns);\n+        if (scopeVar != null) {\n+          // We have seen a var/const declaration for this property already,\n+          // so upgrade this property from inferred to declared, and record\n+          // any momentum on this node to define this property in the future.\n+          if (ownerType.isPropertyTypeInferred(propName)) {\n+            ownerType.undeclareProperty(propName);\n           }\n         }\n       }\n+    }\n \n-      if (valueType == null) {\n-        if (parent.isExprResult()) {\n-          stubDeclarations.add(new StubDeclaration(\n-              n,\n-              t.getInput() != null && t.getInput().isExtern(),\n-              ownerName));\n-        }\n+    if (!isBuiltinExtern(qName)) {\n+      defineSlot(n, parent, valueType, inferred);\n+    }\n \n-        return;\n+  } else if (n.isStringKey() && parent.isObjectLit()) {\n+    if (valueType == null) {\n+      typeWarnings.add(PROP_WITHOUT_DECLARATION, t.getSourceName(),\n+          n.getLineno(), qName);\n+      if (!inExterns) {\n+        stubDeclarations.add(new StubDeclaration(n, true, true));\n       }\n+      return;\n+    }\n \n-      // NOTE(nicksantos): Determining whether a property is declared or not\n-      // is really really obnoxious.\n-      //\n-      // The problem is that there are two (equally valid) coding styles:\n-      //\n-      // (function() {\n-      //   /* The authoritative definition of goog.bar. */\n-      //   goog.bar = function() {};\n-      // })();\n-      //\n-      // function f() {\n-      //   goog.bar();\n-      //   /* Reset goog.bar to a no-op. */\n-      //   goog.bar = function() {};\n-      // }\n-      //\n-      // In a dynamic language with first-class functions, it's very difficult\n-      // to know which one the user intended without looking at lots of\n-      // contextual information (the second example demonstrates a small case\n-      // of this, but there are some really pathological cases as well).\n-      //\n-      // The current algorithm checks if either the declaration has\n-      // jsdoc type information, or @const with a known type,\n-      // or a function literal with a name we haven't seen before.\n-      boolean inferred = true;\n-      if (info != null) {\n-        // Determining declaration for #1 + #3 + #4\n-        inferred = !(info.hasType()\n-            || info.hasEnumParameterType()\n-            || (info.isConstant() && valueType != null\n-                && !valueType.isUnknownType())\n-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n-      }\n+    Node objLitNode = parent.getFirstChild();\n+    JSDocInfo jsDocInfo = objLitNode.getJSDocInfo();\n+    boolean isQuoted = n.isQuotedString();\n+\n+    // Determine if this property should be inferred or declared.\n+    // Doesn't really belong here, but we need to examine jsDocInfo and couldn't\n+    // come up with a better place.\n+    boolean isConstant = jsDocInfo != null ? jsDocInfo.isConstant() : false;\n+    boolean reportedTypeWarning = false;\n+    if (isConstant && valueType == null) {\n+      typeWarnings.add(PROP_WITHOUT_DECLARATION, t.getSourceName(),\n+          n.getLineno(), qName);\n+      reportedTypeWarning = true;\n+    } else if (n.isQuotedString() &&\n+        missingPropertyWarningsGuard.shouldSuppress(\n+            t.getSourceName(), n.getLineno(), qName)) {\n+      // Property accesses via a quoted string are always inferred because we\n+      // don't know if the property is a symbol or a string.\n+      inferred = true;\n+    } else if (jsDocInfo != null && jsDocInfo.hasType()) {\n+      inferred = false;\n+    } else if (!inExterns) {\n+      inferred = true;\n+    }\n \n-      if (inferred) {\n-        // Determining declaration for #2\n-        inferred = !(rhsValue != null &&\n-            rhsValue.isFunction() &&\n-            (info != null || !scope.isDeclared(qName, false)));\n+    if (valueType != null && (inferred ||\n+        n.getString().equals(\"prototype\") ||\n+        missingPropertyWarningsGuard.shouldSuppress(\n+            t.getSourceName(), n.getLineno(), qName))) {\n+      defineSlot(n, parent, valueType, true);\n+    } else if (valueType != null) {\n+      ObjectType objectType = ObjectType.cast(objLitNode.getJSType());\n+      if (!objectType.hasProperty(propName)\n+          || objectType.isPropertyTypeInferred(propName)) {\n+        objectType.defineDeclaredProperty(propName, valueType, t.getSourceName(),\n+            n.getLineno() + 1, !inExterns);\n       }\n+    }\n \n-      if (!inferred) {\n-        ObjectType ownerType = getObjectSlot(ownerName);\n-        if (ownerType != null) {\n-          // Only declare this as an official property if it has not been\n-          // declared yet.\n-          boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n-          if ((!ownerType.hasOwnProperty(propName) ||\n-               ownerType.isPropertyTypeInferred(propName)) &&\n-              ((isExtern && !ownerType.isNativeObjectType()) ||\n-               !ownerType.isInstanceType())) {\n-            // If the property is undeclared or inferred, declare it now.\n-            ownerType.defineDeclaredProperty(propName, valueType, n);\n-          }\n-        }\n-\n-        // If the property is already declared, the error will be\n-        // caught when we try to declare it in the current scope.\n-        defineSlot(n, parent, valueType, inferred);\n-      } else if (rhsValue != null && rhsValue.isTrue()) {\n-        // We declare these for delegate proxy method properties.\n-        FunctionType ownerType =\n-            JSType.toMaybeFunctionType(getObjectSlot(ownerName));\n-        if (ownerType != null) {\n-          JSType ownerTypeOfThis = ownerType.getTypeOfThis();\n-          String delegateName = codingConvention.getDelegateSuperclassName();\n-          JSType delegateType = delegateName == null ?\n-              null : typeRegistry.getType(delegateName);\n-          if (delegateType != null &&\n-              ownerTypeOfThis.isSubtype(delegateType)) {\n-            defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);\n-          }\n-        }\n-      }\n+    if (reportedTypeWarning) {\n+      stubDeclarations.add(new StubDeclaration(n, true, true));\n     }\n+  }\n+}\n \n     /**\n      * Find the ObjectType associated with the given slot.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}