{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strSize = str.length();\n    int searchCharsSize = searchChars.length;\n    int foundCount = 0;\n    boolean[] found = new boolean[searchCharsSize];\n    for (int i = 0; i < strSize; i++) {\n        int strOffset = Character.codePointAt(str, i);\n        if (strOffset < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            for (int j = 0; j < searchCharsSize; j++) {\n                if (searchChars[j] == str.charAt(i)) {\n                    found[j] = true;\n                    foundCount++;\n                    break;\n                }\n            }\n        } else {\n            for (int j = 0; j < searchCharsSize; j += 2) {\n                if (j + 1 == searchCharsSize) {\n                    break;\n                }\n                if (searchChars[j] == str.charAt(i) && searchChars[j + 1] == str.charAt(i + 1)) {\n                    found[j] = true;\n                    found[j + 1] = true;\n                    foundCount += 2;\n                    break;\n                }\n            }\n            i++;\n        }\n        if (foundCount == searchCharsSize) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..85198273 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strSize = str.length();\n+    int searchCharsSize = searchChars.length;\n+    int foundCount = 0;\n+    boolean[] found = new boolean[searchCharsSize];\n+    for (int i = 0; i < strSize; i++) {\n+        int strOffset = Character.codePointAt(str, i);\n+        if (strOffset < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+            for (int j = 0; j < searchCharsSize; j++) {\n+                if (searchChars[j] == str.charAt(i)) {\n+                    found[j] = true;\n+                    foundCount++;\n+                    break;\n+                }\n+            }\n+        } else {\n+            for (int j = 0; j < searchCharsSize; j += 2) {\n+                if (j + 1 == searchCharsSize) {\n+                    break;\n+                }\n+                if (searchChars[j] == str.charAt(i) && searchChars[j + 1] == str.charAt(i + 1)) {\n+                    found[j] = true;\n+                    found[j + 1] = true;\n+                    foundCount += 2;\n+                    break;\n+                }\n+            }\n+            i++;\n+        }\n+        if (foundCount == searchCharsSize) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}