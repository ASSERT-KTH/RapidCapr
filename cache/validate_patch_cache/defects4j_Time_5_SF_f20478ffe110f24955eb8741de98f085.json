{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    if (getWeeks() != 0) {\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        type = type.withYearsRemoved().withMonthsRemoved().withWeeksRemoved();\n        Period endResult = new Period(millis, type, ISOChronology.getInstanceUTC());\n        endResult = endResult.withWeeks(0);\n        return endResult.normalizedStandard(type);\n    }\n    \n   Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    \n    if (years != 0 || months != 0) {\n        if (type.isSupported(DurationFieldType.months()) && type.isSupported(DurationFieldType.years())) {\n            years += months / 12;\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n            result = result.normalizedStandard();\n        } else if (type.isSupported(DurationFieldType.years())) {\n            years += (months + 12 * (getWeeks() / ISOChronology.getInstanceUTC().daysPerMonth().getAverageValue())) / 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            result = result.normalizedStandard(PeriodType.yearMonthDayTime());\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    } else {\n        result = result.normalizedStandard();\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..9b5cfb06 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,19 +1613,28 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    if (getWeeks() != 0) {\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n+        type = type.withYearsRemoved().withMonthsRemoved().withWeeksRemoved();\n+        Period endResult = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        endResult = endResult.withWeeks(0);\n+        return endResult.normalizedStandard(type);\n+    }\n+    \n+   Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    int years = getYears();\n+    int months = getMonths();\n+    \n+    if (years != 0 || months != 0) {\n+        if (type.isSupported(DurationFieldType.months()) && type.isSupported(DurationFieldType.years())) {\n+            years += months / 12;\n             months = months % 12;\n             if (years != 0) {\n                 result = result.withYears(years);\n@@ -1633,8 +1642,20 @@ public final class Period\n             if (months != 0) {\n                 result = result.withMonths(months);\n             }\n+            result = result.normalizedStandard();\n+        } else if (type.isSupported(DurationFieldType.years())) {\n+            years += (months + 12 * (getWeeks() / ISOChronology.getInstanceUTC().daysPerMonth().getAverageValue())) / 12;\n+            if (years != 0) {\n+                result = result.withYears(years);\n+            }\n+            result = result.normalizedStandard(PeriodType.yearMonthDayTime());\n+        } else {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n         }\n-        return result;\n+    } else {\n+        result = result.normalizedStandard();\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}