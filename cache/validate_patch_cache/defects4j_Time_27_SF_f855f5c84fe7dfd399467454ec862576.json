{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    // if there are no element pairs, return a formatter with null printer/parser\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    Object first = elementPairs.get(0);\n    // if the first element is a separator, create a new separator using the formatter obtained from the sublist of remaining element pairs\n    if (first instanceof Separator) {\n        Separator sep = (Separator) first;\n        if (size <= 1) {\n            throw new IllegalArgumentException(\"Missing element after separator\");\n        }\n        List<Object> subList = elementPairs.subList(1, size);\n        PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n    // if there is only one non-Separator element, create a formatter using createComposite method\n    if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            throw new IllegalArgumentException(\"Missing element before separator\");\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n    // if there are more than 1 element pairs and the first element is not a Separator, create a formatter using createComposite method\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8cbb995f 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,16 +791,32 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    // if there are no element pairs, return a formatter with null printer/parser\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    Object first = elementPairs.get(0);\n+    // if the first element is a separator, create a new separator using the formatter obtained from the sublist of remaining element pairs\n+    if (first instanceof Separator) {\n+        Separator sep = (Separator) first;\n+        if (size <= 1) {\n+            throw new IllegalArgumentException(\"Missing element after separator\");\n+        }\n+        List<Object> subList = elementPairs.subList(1, size);\n+        PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+    // if there is only one non-Separator element, create a formatter using createComposite method\n+    if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            throw new IllegalArgumentException(\"Missing element before separator\");\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n@@ -811,6 +827,16 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+    // if there are more than 1 element pairs and the first element is not a Separator, create a formatter using createComposite method\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}