{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    // Do not remove any params if it's a setter in an object literal\n    if (NodeUtil.isObjectLitKey(function.getParent())) {\n      ObjectLitKey objectLitKey = (ObjectLitKey) function.getParent();\n      if (objectLitKey.isGetterOrSetter()) {\n        if (objectLitKey.isSetter()) {\n          return;\n        }\n      }\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Map<String, Var> paramMap = Maps.newHashMap();\n      for (Var v : referenced) {\n        String name = v.getName();\n        paramMap.put(name, v);\n      }\n\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (!lastArg.isName()) {\n          // A destructuring parameter\n          Preconditions.checkState(lastArg.isDefaultValue() || lastArg.isRest(), lastArg);\n          break;\n        }\n\n        String name = lastArg.getString();\n        Var var = paramMap.get(name);\n\n        // Keep the last parameter if any of the following hold:\n        // 1. It's referenced.\n        // 2. It's not referenced and may have side effects.\n        // 3. It's the only remaining parameter.\n        if (var == null || !var.inExterns && !var.isReferenced() && !mayHaveSideEffects(lastArg) &&\n            argList.getChildCount() > 1) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3c278641 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    // Do not remove any params if it's a setter in an object literal\n+    if (NodeUtil.isObjectLitKey(function.getParent())) {\n+      ObjectLitKey objectLitKey = (ObjectLitKey) function.getParent();\n+      if (objectLitKey.isGetterOrSetter()) {\n+        if (objectLitKey.isSetter()) {\n+          return;\n+        }\n+      }\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Map<String, Var> paramMap = Maps.newHashMap();\n+      for (Var v : referenced) {\n+        String name = v.getName();\n+        paramMap.put(name, v);\n+      }\n+\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (!lastArg.isName()) {\n+          // A destructuring parameter\n+          Preconditions.checkState(lastArg.isDefaultValue() || lastArg.isRest(), lastArg);\n+          break;\n+        }\n+\n+        String name = lastArg.getString();\n+        Var var = paramMap.get(name);\n+\n+        // Keep the last parameter if any of the following hold:\n+        // 1. It's referenced.\n+        // 2. It's not referenced and may have side effects.\n+        // 3. It's the only remaining parameter.\n+        if (var == null || !var.inExterns && !var.isReferenced() && !mayHaveSideEffects(lastArg) &&\n+            argList.getChildCount() > 1) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}