{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    \n    if (mock instanceof Factory) {\n        Callback[] callbacks = ((Factory) mock).getCallbacks();\n        if (callbacks != null) { \n            boolean filterFound = false;\n            for(int i=0; i<callbacks.length; i++) {\n                if(callbacks[i] instanceof MethodInterceptorFilter) {\n                    callbacks[i] = newFilter;\n                    filterFound = true;\n                    break;\n                }\n            }\n            if (!filterFound) {\n                callbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n                callbacks[callbacks.length - 1] = newFilter;\n                ((Factory) mock).setCallbacks(callbacks);\n            } else {\n                ((Factory) mock).setCallbacks(callbacks);\n            }\n        } else {\n            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..52a672f75 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    \n+    if (mock instanceof Factory) {\n+        Callback[] callbacks = ((Factory) mock).getCallbacks();\n+        if (callbacks != null) { \n+            boolean filterFound = false;\n+            for(int i=0; i<callbacks.length; i++) {\n+                if(callbacks[i] instanceof MethodInterceptorFilter) {\n+                    callbacks[i] = newFilter;\n+                    filterFound = true;\n+                    break;\n+                }\n+            }\n+            if (!filterFound) {\n+                callbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n+                callbacks[callbacks.length - 1] = newFilter;\n+                ((Factory) mock).setCallbacks(callbacks);\n+            } else {\n+                ((Factory) mock).setCallbacks(callbacks);\n+            }\n+        } else {\n+            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}