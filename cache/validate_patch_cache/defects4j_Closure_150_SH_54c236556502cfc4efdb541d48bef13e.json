{
    "patch": "attachLiteralTypes(n);\nboolean isNodeFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);\nboolean isNodeDeclaration = NodeUtil.isDeclaration(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        // ignore named function expressions\n        if (NodeUtil.isFunctionExpression(n) && !isNodeDeclaration) {\n            boolean isAncestorFunction = NodeUtil.isFunctionDeclaration(parent) || NodeUtil.isFunctionExpression(parent);\n            boolean isTopLevelFunction = parent.getParent() == scope.getRootNode();\n\n            if (isAncestorFunction || isTopLevelFunction) {\n                // parent is function declaration or top level declaration\n                defineDeclaredFunction(n, parent);\n                break;\n            } else if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR) {\n                // handle function assigned to a variable, e.g., const foo = function () {}\n                Node varNode = NodeUtil.getEnclosingNodeOfType(parent, Token.VAR);\n                if (varNode != null) {\n                    defineDeclaredFunction(n, varNode);\n                    break;\n                }\n            }\n        }\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    default:\n        if (isNodeDeclaration && !isNodeFunctionDeclaration) {\n            defineVar(n, parent);\n        }\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..debf7dcc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,42 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+boolean isNodeFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);\n+boolean isNodeDeclaration = NodeUtil.isDeclaration(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        // ignore named function expressions\n+        if (NodeUtil.isFunctionExpression(n) && !isNodeDeclaration) {\n+            boolean isAncestorFunction = NodeUtil.isFunctionDeclaration(parent) || NodeUtil.isFunctionExpression(parent);\n+            boolean isTopLevelFunction = parent.getParent() == scope.getRootNode();\n+\n+            if (isAncestorFunction || isTopLevelFunction) {\n+                // parent is function declaration or top level declaration\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            } else if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR) {\n+                // handle function assigned to a variable, e.g., const foo = function () {}\n+                Node varNode = NodeUtil.getEnclosingNodeOfType(parent, Token.VAR);\n+                if (varNode != null) {\n+                    defineDeclaredFunction(n, varNode);\n+                    break;\n+                }\n+            }\n+        }\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    default:\n+        if (isNodeDeclaration && !isNodeFunctionDeclaration) {\n+            defineVar(n, parent);\n+        }\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}