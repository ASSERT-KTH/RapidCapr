{
    "patch": "public class MyValues {\n\n    private HashMap<String, Object> map = new HashMap<String, Object>();\n    \n    public void add(String name, Object value) {\n        map.put(name, value);\n    }\n    \n    public Object get(String name) {\n        return map.get(name);\n    }\n    \n    public <T> T returnValueFor(Class<T> clazz) {\n        Object value = get(clazz.getName());\n        assertNotNull(value);\n        assertTrue(clazz.isInstance(value));\n        return clazz.cast(value);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e9fa2c5d2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,25 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyValues {\n+\n+    private HashMap<String, Object> map = new HashMap<String, Object>();\n+    \n+    public void add(String name, Object value) {\n+        map.put(name, value);\n+    }\n+    \n+    public Object get(String name) {\n+        return map.get(name);\n+    }\n+    \n+    public <T> T returnValueFor(Class<T> clazz) {\n+        Object value = get(clazz.getName());\n+        assertNotNull(value);\n+        assertTrue(clazz.isInstance(value));\n+        return clazz.cast(value);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}