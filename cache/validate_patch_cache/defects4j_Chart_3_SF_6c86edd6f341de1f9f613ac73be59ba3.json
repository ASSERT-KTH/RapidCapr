{
    "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n\n    TimeSeries copy = (TimeSeries) super.clone();\n\n    copy.data = new java.util.ArrayList<>();\n\n    int size = this.data.size();\n    int endIndex = Math.min(size - 1, end);\n\n    if (start > endIndex) {\n        return copy;\n    }\n\n    Range xRange = new Range(getDomain().get(start).doubleValue(), getDomain().get(endIndex).doubleValue());\n\n    for (int index = start; index <= endIndex; index++) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n\n        Number y = clone.getValue();\n\n        if (y != null) {\n            Number fixedY = NumberUtils.createNumber(y.toString());\n            if (fixedY != null) {\n                clone.setValue(fixedY);\n            }\n        }\n\n        copy.data.add(clone);\n\n        RegularTimePeriod period = clone.getPeriod();\n        if (period != null) {\n            period = RegularTimePeriod.createInstance(period.getClass(), period.getStart(), getTimeZone());\n            copy.addOrUpdate(period, fixedY);\n        }\n    }\n\n    copy.delete(0, copy.getItemCount() - 1);\n    copy.setDomainRange(xRange, false, false);\n\n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..bc49d4b 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,54 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+\n+    TimeSeries copy = (TimeSeries) super.clone();\n+\n+    copy.data = new java.util.ArrayList<>();\n+\n+    int size = this.data.size();\n+    int endIndex = Math.min(size - 1, end);\n+\n+    if (start > endIndex) {\n+        return copy;\n+    }\n+\n+    Range xRange = new Range(getDomain().get(start).doubleValue(), getDomain().get(endIndex).doubleValue());\n+\n+    for (int index = start; index <= endIndex; index++) {\n+        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+\n+        Number y = clone.getValue();\n+\n+        if (y != null) {\n+            Number fixedY = NumberUtils.createNumber(y.toString());\n+            if (fixedY != null) {\n+                clone.setValue(fixedY);\n+            }\n+        }\n+\n+        copy.data.add(clone);\n+\n+        RegularTimePeriod period = clone.getPeriod();\n+        if (period != null) {\n+            period = RegularTimePeriod.createInstance(period.getClass(), period.getStart(), getTimeZone());\n+            copy.addOrUpdate(period, fixedY);\n+        }\n+    }\n+\n+    copy.delete(0, copy.getItemCount() - 1);\n+    copy.setDomainRange(xRange, false, false);\n+\n+    return copy;\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}