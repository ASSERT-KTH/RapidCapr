{
    "patch": "public void addValue(double value) {\n    // Increment all tracking implementations with the latest value\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance, or geoMean have been overridden\n    if (!meanImpl.getClass().equals(Mean.class)) {\n        // If the overridden implementation exists, use it for non-NaN values\n        if (!Double.isNaN(value)) {\n            meanImpl.increment(value);\n        }\n    } else {\n        // Otherwise, create a temporary Mean and increment it with non-NaN values\n        Mean tempMean = new Mean();\n        if (!Double.isNaN(value)) {\n            tempMean.increment(value);\n        }\n        meanImpl.increment(tempMean.getResult());\n    }\n\n    if (!varianceImpl.getClass().equals(Variance.class)) {\n        // If the overridden implementation exists, use it for non-NaN values\n        if (!Double.isNaN(value)) {\n            varianceImpl.increment(value);\n        }\n    } else {\n        // Otherwise, create a temporary Variance and increment it with non-NaN values\n        Variance tempVariance = new Variance();\n        if (!Double.isNaN(value)) {\n            tempVariance.increment(value);\n        }\n        varianceImpl.increment(tempVariance.getResult());\n    }\n\n    if (!geoMeanImpl.getClass().equals(GeometricMean.class)) {\n        // If the overridden implementation exists, use it for positive values\n        if (value > 0) {\n            geoMeanImpl.increment(value);\n        }\n    } else {\n        // Otherwise, create a temporary GeometricMean and increment it for positive values\n        GeometricMean tempGeoMean = new GeometricMean();\n        if (value > 0) {\n            tempGeoMean.increment(value);\n        }\n        geoMeanImpl.increment(tempGeoMean.getResult());\n    }\n\n    // Update n regardless\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..a6f02b1e9 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,62 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    // Increment all tracking implementations with the latest value\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance, or geoMean have been overridden\n+    if (!meanImpl.getClass().equals(Mean.class)) {\n+        // If the overridden implementation exists, use it for non-NaN values\n+        if (!Double.isNaN(value)) {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+    } else {\n+        // Otherwise, create a temporary Mean and increment it with non-NaN values\n+        Mean tempMean = new Mean();\n+        if (!Double.isNaN(value)) {\n+            tempMean.increment(value);\n+        }\n+        meanImpl.increment(tempMean.getResult());\n+    }\n+\n+    if (!varianceImpl.getClass().equals(Variance.class)) {\n+        // If the overridden implementation exists, use it for non-NaN values\n+        if (!Double.isNaN(value)) {\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    } else {\n+        // Otherwise, create a temporary Variance and increment it with non-NaN values\n+        Variance tempVariance = new Variance();\n+        if (!Double.isNaN(value)) {\n+            tempVariance.increment(value);\n+        }\n+        varianceImpl.increment(tempVariance.getResult());\n+    }\n+\n+    if (!geoMeanImpl.getClass().equals(GeometricMean.class)) {\n+        // If the overridden implementation exists, use it for positive values\n+        if (value > 0) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n+    } else {\n+        // Otherwise, create a temporary GeometricMean and increment it for positive values\n+        GeometricMean tempGeoMean = new GeometricMean();\n+        if (value > 0) {\n+            tempGeoMean.increment(value);\n+        }\n+        geoMeanImpl.increment(tempGeoMean.getResult());\n     }\n \n+    // Update n regardless\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}