{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            //if the last argument is an array, let's treat it as vararg even if the method does not have '...'\n            //TODO SF - I'm not sure if it is correct for all scenarios\n            if(isArray(invocation.getRawArguments()[indexOfVararg])) {\n                indexOfVararg = indexOfVararg - 1;\n            }\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                    if(isVariableArgument(invocation, position)) {\n                        Object array = createArray(invocation, indexOfVararg);\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                        //since we've captured all varargs already, it does not make sense to process other matchers.\n                        return;\n                    } else {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            }\n\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..faf48d1ea 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,26 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            //if the last argument is an array, let's treat it as vararg even if the method does not have '...'\n+            //TODO SF - I'm not sure if it is correct for all scenarios\n+            if(isArray(invocation.getRawArguments()[indexOfVararg])) {\n+                indexOfVararg = indexOfVararg - 1;\n+            }\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n+                    if(isVariableArgument(invocation, position)) {\n+                        Object array = createArray(invocation, indexOfVararg);\n+                        for (int i = 0; i < Array.getLength(array); i++) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n+                        }\n+                        //since we've captured all varargs already, it does not make sense to process other matchers.\n+                        return;\n+                    } else {\n+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {\n@@ -130,23 +149,6 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n                 }\n             }\n         }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n     }\n \n     private boolean isVarargMatcher(Matcher matcher) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}