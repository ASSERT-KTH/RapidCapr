{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n\n    if (result == null) {\n        throw new IllegalStateException(\"JSDoc line is null\");\n    }\n\n    result = result.trim();\n\n    if (result.isEmpty()) {\n        return \"\";\n    }\n\n    StringBuilder sb = new StringBuilder();\n    boolean lastWasWhitespace = false;\n    boolean lastWasAsterisk = false;\n\n    for (int i = 0; i < result.length(); i++) {\n        char c = result.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!lastWasWhitespace && !lastWasAsterisk) {\n                sb.append(' ');\n                lastWasWhitespace = true;\n            }\n        } else {\n            sb.append(c);\n            lastWasWhitespace = false;\n\n            if (c == '*') {\n                lastWasAsterisk = true;\n            } else {\n                lastWasAsterisk = false;\n            }\n        }\n    }\n\n    String processed = sb.toString().trim();\n\n    // remove trailing asterisk\n    if (processed.endsWith(\"*\")) {\n        processed = processed.substring(0, processed.length() - 1).trim();\n    }\n\n    // remove trailing period\n    if (processed.endsWith(\".\")) {\n        processed = processed.substring(0, processed.length() - 1).trim();\n    }\n\n    return processed.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..3fb257ab 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,57 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+\n+    if (result == null) {\n+        throw new IllegalStateException(\"JSDoc line is null\");\n+    }\n+\n+    result = result.trim();\n+\n+    if (result.isEmpty()) {\n+        return \"\";\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+    boolean lastWasWhitespace = false;\n+    boolean lastWasAsterisk = false;\n+\n+    for (int i = 0; i < result.length(); i++) {\n+        char c = result.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!lastWasWhitespace && !lastWasAsterisk) {\n+                sb.append(' ');\n+                lastWasWhitespace = true;\n+            }\n+        } else {\n+            sb.append(c);\n+            lastWasWhitespace = false;\n+\n+            if (c == '*') {\n+                lastWasAsterisk = true;\n+            } else {\n+                lastWasAsterisk = false;\n+            }\n+        }\n+    }\n+\n+    String processed = sb.toString().trim();\n+\n+    // remove trailing asterisk\n+    if (processed.endsWith(\"*\")) {\n+        processed = processed.substring(0, processed.length() - 1).trim();\n+    }\n+\n+    // remove trailing period\n+    if (processed.endsWith(\".\")) {\n+        processed = processed.substring(0, processed.length() - 1).trim();\n+    }\n+\n+    return processed.trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ function.]> but was:<Another[function]>",
    "test_result": "FAIL"
}