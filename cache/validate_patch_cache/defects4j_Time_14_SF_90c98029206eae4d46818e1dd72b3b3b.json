{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        DateTimeField largestField = partial.getField(fieldIndex);\n        if (largestField.getDurationField().getUnitMillis() >= DateTimeConstants.MILLIS_PER_MONTH) {\n            // Month or larger\n            DurationField durationField = largestField.getDurationField();\n            long months = durationField.getDifferenceAsLong(largestField.add(instant, valueToAdd), instant);\n            int[] newValues = iChronology.add(partial, fieldIndex, values, months);\n            int minDays = iChronology.dayOfMonth().getMinimumValue(instant);\n            int maxDays = iChronology.dayOfMonth().getMaximumValue(instant);\n            int currentDay = iChronology.dayOfMonth().get(instant);\n            if (currentDay < minDays) {\n                newValues = iChronology.add(newValues, DateTimeFieldType.dayOfMonth(), minDays - currentDay);\n            } else if (currentDay > maxDays) {\n                newValues = iChronology.add(newValues, DateTimeFieldType.dayOfMonth(), maxDays - currentDay);\n            }\n            return newValues;\n        } else {\n            // Hour or smaller\n            long instantToAdd = largestField.getDurationField().getUnitMillis() * valueToAdd;\n            instant = FieldUtils.safeAdd(instant, instantToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..20860e5a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        DateTimeField largestField = partial.getField(fieldIndex);\n+        if (largestField.getDurationField().getUnitMillis() >= DateTimeConstants.MILLIS_PER_MONTH) {\n+            // Month or larger\n+            DurationField durationField = largestField.getDurationField();\n+            long months = durationField.getDifferenceAsLong(largestField.add(instant, valueToAdd), instant);\n+            int[] newValues = iChronology.add(partial, fieldIndex, values, months);\n+            int minDays = iChronology.dayOfMonth().getMinimumValue(instant);\n+            int maxDays = iChronology.dayOfMonth().getMaximumValue(instant);\n+            int currentDay = iChronology.dayOfMonth().get(instant);\n+            if (currentDay < minDays) {\n+                newValues = iChronology.add(newValues, DateTimeFieldType.dayOfMonth(), minDays - currentDay);\n+            } else if (currentDay > maxDays) {\n+                newValues = iChronology.add(newValues, DateTimeFieldType.dayOfMonth(), maxDays - currentDay);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            return newValues;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Hour or smaller\n+            long instantToAdd = largestField.getDurationField().getUnitMillis() * valueToAdd;\n+            instant = FieldUtils.safeAdd(instant, instantToAdd);\n+            return iChronology.get(partial, instant);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}