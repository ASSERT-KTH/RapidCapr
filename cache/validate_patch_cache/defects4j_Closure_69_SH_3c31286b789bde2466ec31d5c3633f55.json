{
    "patch": "ObjectType thisType = null;\nif (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n  thisType = (ObjectType) functionType.getTypeOfThis();\n}\nif (thisType != null) {\n  if (child.isGetProp()) {\n    Node getPropFirstChild = child.getFirstChild();\n    JSType getPropFirstChildType = getJSType(getPropFirstChild);\n    if (!getPropFirstChildType.isSubtypeOf(thisType)) {\n      // Only warn if the actual type being provided for 'this' is a\n      // proper supertype of the declared type, since a subtype would be\n      // acceptable here.\n      if (JSType.compare(getPropFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n        t.report(n, THIS_TYPE_MISMATCH,\n            \"'%s' used in method call is not a subtype of the method's 'this' type\",\n            getPropFirstChildType.toString());\n      }\n    }\n  } else if (child.isGetElem()) {\n    Node getElemFirstChild = child.getFirstChild();\n    JSType getElemFirstChildType = getJSType(getElemFirstChild);\n    if (!getElemFirstChildType.isSubtypeOf(thisType)) {\n      // Only warn if the actual type being provided for 'this' is a\n      // proper supertype of the declared type, since a subtype would be\n      // acceptable here.\n      if (JSType.compare(getElemFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n        t.report(n, THIS_TYPE_MISMATCH,\n            \"'%s' used in method call is not a subtype of the method's 'this' type\",\n            getElemFirstChildType.toString());\n      }\n    }\n  } else {\n    t.report(child, MUST_BE_GET_OR_SET, \"'%s' before calling a function with @this\", \"'this'\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..0be1cf30 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,41 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = null;\n+if (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n+  thisType = (ObjectType) functionType.getTypeOfThis();\n+}\n+if (thisType != null) {\n+  if (child.isGetProp()) {\n+    Node getPropFirstChild = child.getFirstChild();\n+    JSType getPropFirstChildType = getJSType(getPropFirstChild);\n+    if (!getPropFirstChildType.isSubtypeOf(thisType)) {\n+      // Only warn if the actual type being provided for 'this' is a\n+      // proper supertype of the declared type, since a subtype would be\n+      // acceptable here.\n+      if (JSType.compare(getPropFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+        t.report(n, THIS_TYPE_MISMATCH,\n+            \"'%s' used in method call is not a subtype of the method's 'this' type\",\n+            getPropFirstChildType.toString());\n+      }\n+    }\n+  } else if (child.isGetElem()) {\n+    Node getElemFirstChild = child.getFirstChild();\n+    JSType getElemFirstChildType = getJSType(getElemFirstChild);\n+    if (!getElemFirstChildType.isSubtypeOf(thisType)) {\n+      // Only warn if the actual type being provided for 'this' is a\n+      // proper supertype of the declared type, since a subtype would be\n+      // acceptable here.\n+      if (JSType.compare(getElemFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+        t.report(n, THIS_TYPE_MISMATCH,\n+            \"'%s' used in method call is not a subtype of the method's 'this' type\",\n+            getElemFirstChildType.toString());\n+      }\n+    }\n+  } else {\n+    t.report(child, MUST_BE_GET_OR_SET, \"'%s' before calling a function with @this\", \"'this'\");\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}