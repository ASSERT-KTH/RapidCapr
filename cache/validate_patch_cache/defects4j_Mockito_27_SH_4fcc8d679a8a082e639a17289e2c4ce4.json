{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandler<T> newMockHandler = new MockHandler<T>(getMockHandler(mock));\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n        ((Mockito) mock).setCallbacks(new Callback[] {newFilter});\n        mock = Mockito.mock(((Mockito) mock).getMockCreationSettings().getTypeToMock(), newMockHandler);\n        Field[] fields = mock.getClass().getDeclaredFields();\n        for (Field field : fields) {\n            if (Modifier.isStatic(field.getModifiers())) {\n                continue;\n            }\n            try {\n                field.setAccessible(true);\n                field.set(mock, field.get(((Mockito) mock).getSpiedInstance()));\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..20a607812 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    public <T> void resetMock(T mock) {\n+        MockHandler<T> newMockHandler = new MockHandler<T>(getMockHandler(mock));\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+        ((Mockito) mock).setCallbacks(new Callback[] {newFilter});\n+        mock = Mockito.mock(((Mockito) mock).getMockCreationSettings().getTypeToMock(), newMockHandler);\n+        Field[] fields = mock.getClass().getDeclaredFields();\n+        for (Field field : fields) {\n+            if (Modifier.isStatic(field.getModifiers())) {\n+                continue;\n+            }\n+            try {\n+                field.setAccessible(true);\n+                field.set(mock, field.get(((Mockito) mock).getSpiedInstance()));\n+            } catch (IllegalAccessException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}