{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    boolean isPositiveDefinite = true;\n    for (double eigenvalue : realEigenvalues) {\n        if (eigenvalue <= 0.0) {\n            isPositiveDefinite = false;\n            break;\n        }\n    }\n    if (isPositiveDefinite) {\n        RealMatrix v = dec.getV();\n        RealMatrix d = dec.getD();\n        for(int i = 0; i < m.getColumnDimension(); i++){\n            if(d.getEntry(i, i) <= 0.0){\n                d.setEntry(i, i, 0.0);\n            }\n            else{\n                d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n            }\n        }\n\n        return v.multiply(d).multiply(v.transpose());\n\n    } else {\n        throw new IllegalArgumentException(\"Matrix must be positive definite\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fdc18d927 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    boolean isPositiveDefinite = true;\n+    for (double eigenvalue : realEigenvalues) {\n+        if (eigenvalue <= 0.0) {\n+            isPositiveDefinite = false;\n+            break;\n+        }\n+    }\n+    if (isPositiveDefinite) {\n+        RealMatrix v = dec.getV();\n+        RealMatrix d = dec.getD();\n+        for(int i = 0; i < m.getColumnDimension(); i++){\n+            if(d.getEntry(i, i) <= 0.0){\n+                d.setEntry(i, i, 0.0);\n+            }\n+            else{\n+                d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+            }\n+        }\n+\n+        return v.multiply(d).multiply(v.transpose());\n+\n+    } else {\n+        throw new IllegalArgumentException(\"Matrix must be positive definite\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}