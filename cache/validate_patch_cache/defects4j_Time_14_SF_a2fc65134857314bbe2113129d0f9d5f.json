{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int instantFieldIndex = -1;\n        long instant = 0L;\n        boolean monthChanged = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int oldValue = values[i];\n                int newValue = oldValue + valueToAdd;\n\n                // Calculate the new value for the month field\n                int monthOfYear = iChronology.monthOfYear().get(instant);\n                int newMonthOfYear = monthOfYear + newValue;\n\n                // Handle cases where the year must be adjusted\n                int year = iChronology.year().get(instant);\n                while (newMonthOfYear < 1) {\n                    year--;\n                    newMonthOfYear += 12;\n                    monthChanged = true;\n                }\n                while (newMonthOfYear > 12) {\n                    year++;\n                    newMonthOfYear -= 12;\n                    monthChanged = true;\n                }\n\n                // If the month changed, calculate a new maximum day of the month and update the dayOfMonth field\n                if (monthOfYear != newMonthOfYear) {\n                    int lastDay = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), newMonthOfYear), 1));\n                    instant = iChronology.dayOfMonth().set(instant, Math.min(lastDay, iChronology.dayOfMonth().get(instant)));\n                    monthChanged = true;\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                }\n\n                instantFieldIndex = i;\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n\n        // If month rolled over and dayOfMonth is not set, set it to minimum value\n        if (monthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n            instant = iChronology.dayOfMonth().set(instant, 1);\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8e032d84 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,65 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int instantFieldIndex = -1;\n+        long instant = 0L;\n+        boolean monthChanged = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int oldValue = values[i];\n+                int newValue = oldValue + valueToAdd;\n+\n+                // Calculate the new value for the month field\n+                int monthOfYear = iChronology.monthOfYear().get(instant);\n+                int newMonthOfYear = monthOfYear + newValue;\n+\n+                // Handle cases where the year must be adjusted\n+                int year = iChronology.year().get(instant);\n+                while (newMonthOfYear < 1) {\n+                    year--;\n+                    newMonthOfYear += 12;\n+                    monthChanged = true;\n+                }\n+                while (newMonthOfYear > 12) {\n+                    year++;\n+                    newMonthOfYear -= 12;\n+                    monthChanged = true;\n+                }\n+\n+                // If the month changed, calculate a new maximum day of the month and update the dayOfMonth field\n+                if (monthOfYear != newMonthOfYear) {\n+                    int lastDay = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), newMonthOfYear), 1));\n+                    instant = iChronology.dayOfMonth().set(instant, Math.min(lastDay, iChronology.dayOfMonth().get(instant)));\n+                    monthChanged = true;\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                }\n+\n+                instantFieldIndex = i;\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        // If month rolled over and dayOfMonth is not set, set it to minimum value\n+        if (monthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n+            instant = iChronology.dayOfMonth().set(instant, 1);\n+        }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<--08-05> but was:<--01-05>",
    "test_result": "FAIL"
}