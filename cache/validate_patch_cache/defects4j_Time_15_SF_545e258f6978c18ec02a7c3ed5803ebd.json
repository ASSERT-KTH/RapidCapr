{
    "patch": "    /**\n     * Safely multiplies val1 with val2.\n     *\n     * @param val1 first long number\n     * @param val2 second integer number\n     * @return the result of val1 * val2\n     * @throws ArithmeticException if the multiplication would overflow a long\n     */\n    public static long safeMultiply(long val1, int val2) {\n        if (val2 == 0) {\n            return 0L;\n        }\n        if (val2 == 1) {\n            return val1;\n        }\n        if (val2 == -1) {\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        }\n        long result;\n        if (val2 > 0) {\n            if (val1 > Long.MAX_VALUE / val2) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            } else {\n                result = val1 * val2;\n            }\n        } else {\n            if (val1 < Long.MIN_VALUE / val2) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            } else {\n                result = val1 * val2;\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..cca98fa9 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -132,20 +132,42 @@ public class FieldUtils {\n      * @throws ArithmeticException if the value is too big or too small\n      * @since 1.2\n      */\n+    /**\n+     * Safely multiplies val1 with val2.\n+     *\n+     * @param val1 first long number\n+     * @param val2 second integer number\n+     * @return the result of val1 * val2\n+     * @throws ArithmeticException if the multiplication would overflow a long\n+     */\n     public static long safeMultiply(long val1, int val2) {\n-        switch (val2) {\n-            case -1:\n-                return -val1;\n-            case 0:\n-                return 0L;\n-            case 1:\n-                return val1;\n+        if (val2 == 0) {\n+            return 0L;\n         }\n-        long total = val1 * val2;\n-        if (total / val2 != val1) {\n-          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        if (val2 == 1) {\n+            return val1;\n         }\n-        return total;\n+        if (val2 == -1) {\n+            if (val1 == Long.MIN_VALUE) {\n+                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+            }\n+            return -val1;\n+        }\n+        long result;\n+        if (val2 > 0) {\n+            if (val1 > Long.MAX_VALUE / val2) {\n+                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+            } else {\n+                result = val1 * val2;\n+            }\n+        } else {\n+            if (val1 < Long.MIN_VALUE / val2) {\n+                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+            } else {\n+                result = val1 * val2;\n+            }\n+        }\n+        return result;\n     }\n \n     /**",
    "result_reason": "java.lang.ArithmeticException: Multiplication overflows a long: 86400000 LICENSE.txt NOTICE.txt README.txt RELEASE-NOTES.txt ToDo.txt all_tests build build.xml checkstyle.xml defects4j.build.properties failing_tests pom.xml src -987",
    "test_result": "FAIL"
}