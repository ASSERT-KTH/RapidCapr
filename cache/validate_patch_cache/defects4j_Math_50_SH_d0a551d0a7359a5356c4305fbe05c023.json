{
    "patch": "if (FastMath.abs(fx) < FastMath.abs(f1)) {\n    x0 = x1;\n    x1 = x;\n    f0 = f1;\n    f1 = fx;\n} else {\n    switch (method) {\n        case REGULA_FALSI:\n            f0 *= 0.5;\n            break;\n        case PEGASUS:\n            f0 *= 0.5 * f1 / (f1 + fx);\n            break;\n        default:\n            // Should never happen.\n            throw new MathInternalError();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..1281f8366 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,24 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (FastMath.abs(fx) < FastMath.abs(f1)) {\n+    x0 = x1;\n+    x1 = x;\n+    f0 = f1;\n+    f1 = fx;\n+} else {\n+    switch (method) {\n+        case REGULA_FALSI:\n+            f0 *= 0.5;\n+            break;\n+        case PEGASUS:\n+            f0 *= 0.5 * f1 / (f1 + fx);\n+            break;\n+        default:\n+            // Should never happen.\n+            throw new MathInternalError();\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.TooManyEvaluationsException> but was<java.lang.AssertionError>",
    "test_result": "FAIL"
}