{
    "patch": "            Object[] args = invocation.getArguments();\n            for (int i = indexOfVararg; i < args.length; i++) {\n                for (int j = 0; j < matchers.size(); j++) {\n                    Matcher m = matchers.get(j);\n                    if (m instanceof CapturesArguments && ((CapturesArguments) m).wantsArgumentAtIndex(i)) {\n                        ((CapturesArguments) m).captureFrom(args[i]);\n                    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..6f78feb4c 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] args = invocation.getArguments();\n+            for (int i = indexOfVararg; i < args.length; i++) {\n+                for (int j = 0; j < matchers.size(); j++) {\n+                    Matcher m = matchers.get(j);\n+                    if (m instanceof CapturesArguments && ((CapturesArguments) m).wantsArgumentAtIndex(i)) {\n+                        ((CapturesArguments) m).captureFrom(args[i]);\n+                    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}