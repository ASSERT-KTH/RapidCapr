{
    "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    if (f == null) {\n        throw new NullPointerException(\"The function f cannot be null.\");\n    }\n    if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n        throw new IllegalArgumentException(\"The initial value is invalid.\");\n    }\n    if (min > max) {\n        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n    }\n\n    double result = Double.NaN;\n    if (initial >= min && initial <= max) {\n        result = solve(f, initial, min, max);\n    } else if (initial < min) {\n        result = solve(f, min, min, max);\n    } else if (initial > max) {\n        result = solve(f, max, min, max);\n    }\n    return result;\n}\n\nprivate double solve(UnivariateRealFunction f, double x0, double a, double b)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    double x = x0;\n    double fx = f.value(x);\n    double fa = f.value(a);\n    double fb = f.value(b);\n    double tol = getAbsoluteAccuracy();\n    int i = 0;\n    while (i++ < getMaxIterations()) {\n        double m = UnivariateRealSolverUtils.midpoint(a, b);\n        double fm = f.value(m);\n        double d = fb - fa;\n        double s = Math.sqrt(d * d - 4.0 * fm * (fa - fx));\n        double eps = (d + Math.signum(d) * s) / (2.0 * fm);\n        double xNew = x - eps;\n        if (xNew == x) {\n            break;\n        }\n        double fxNew = f.value(xNew);\n        if (tol >= FastMath.abs(xNew - x) ||\n            tol >= FastMath.abs(fxNew - fx)) {\n            return xNew;\n        }\n        if (fxNew < fx) {\n            if (xNew < x) {\n                b  = x;\n                fb = fx;\n            } else {\n                a  = x;\n                fa = fx;\n            }\n            x  = xNew;\n            fx = fxNew;\n        } else {\n            if (xNew < x) {\n                a  = xNew;\n                fa = fxNew;\n            } else {\n                b  = xNew;\n                fb = fxNew;\n            }\n        }\n    }\n    throw new MaxIterationsExceededException(getMaxIterations());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..3a7cfd950 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,10 +67,74 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+    throws MaxIterationsExceededException, FunctionEvaluationException {\n+    if (f == null) {\n+        throw new NullPointerException(\"The function f cannot be null.\");\n+    }\n+    if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n+        throw new IllegalArgumentException(\"The initial value is invalid.\");\n+    }\n+    if (min > max) {\n+        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n+    }\n+\n+    double result = Double.NaN;\n+    if (initial >= min && initial <= max) {\n+        result = solve(f, initial, min, max);\n+    } else if (initial < min) {\n+        result = solve(f, min, min, max);\n+    } else if (initial > max) {\n+        result = solve(f, max, min, max);\n+    }\n+    return result;\n+}\n+\n+private double solve(UnivariateRealFunction f, double x0, double a, double b)\n+    throws MaxIterationsExceededException, FunctionEvaluationException {\n+    double x = x0;\n+    double fx = f.value(x);\n+    double fa = f.value(a);\n+    double fb = f.value(b);\n+    double tol = getAbsoluteAccuracy();\n+    int i = 0;\n+    while (i++ < getMaxIterations()) {\n+        double m = UnivariateRealSolverUtils.midpoint(a, b);\n+        double fm = f.value(m);\n+        double d = fb - fa;\n+        double s = Math.sqrt(d * d - 4.0 * fm * (fa - fx));\n+        double eps = (d + Math.signum(d) * s) / (2.0 * fm);\n+        double xNew = x - eps;\n+        if (xNew == x) {\n+            break;\n+        }\n+        double fxNew = f.value(xNew);\n+        if (tol >= FastMath.abs(xNew - x) ||\n+            tol >= FastMath.abs(fxNew - fx)) {\n+            return xNew;\n+        }\n+        if (fxNew < fx) {\n+            if (xNew < x) {\n+                b  = x;\n+                fb = fx;\n+            } else {\n+                a  = x;\n+                fa = fx;\n+            }\n+            x  = xNew;\n+            fx = fxNew;\n+        } else {\n+            if (xNew < x) {\n+                a  = xNew;\n+                fa = fxNew;\n+            } else {\n+                b  = xNew;\n+                fb = fxNew;\n+            }\n+        }\n     }\n+    throw new MaxIterationsExceededException(getMaxIterations());\n+}\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)",
    "result_reason": "error: method solve(UnivariateRealFunction,double,double,double) is already defined in class BisectionSolver",
    "test_result": "ERROR"
}