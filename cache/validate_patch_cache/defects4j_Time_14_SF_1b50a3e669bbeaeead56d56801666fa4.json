{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        try {\n            int[] result = partial.plusMonths(valueToAdd).getValues();\n            return result;\n        } catch (IllegalFieldValueException e) {\n            // if adding months caused an illegal value exception due to leap year, adjust day value accordingly\n            if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.DAY_OF_MONTH) {\n                int day = values[fieldIndex];\n                int month = values[fieldIndex - 1];\n                int year = partial.getChronology().year().get(partial);\n                int maxDayOfMonth = partial.getChronology().monthOfYear().setCopy(year, month).dayOfMonth().getMaximumValue();\n                day = Math.min(day, maxDayOfMonth); // clamp to maximum valid day value\n                int[] result = Arrays.copyOf(values, values.length);\n                result[fieldIndex - 1] += valueToAdd; // add months\n                result[fieldIndex] = day; // set day back to clamped value\n                return result;\n            } else {\n                throw e;\n            }\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..7fb2d742 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,37 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        try {\n+            int[] result = partial.plusMonths(valueToAdd).getValues();\n+            return result;\n+        } catch (IllegalFieldValueException e) {\n+            // if adding months caused an illegal value exception due to leap year, adjust day value accordingly\n+            if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.DAY_OF_MONTH) {\n+                int day = values[fieldIndex];\n+                int month = values[fieldIndex - 1];\n+                int year = partial.getChronology().year().get(partial);\n+                int maxDayOfMonth = partial.getChronology().monthOfYear().setCopy(year, month).dayOfMonth().getMaximumValue();\n+                day = Math.min(day, maxDayOfMonth); // clamp to maximum valid day value\n+                int[] result = Arrays.copyOf(values, values.length);\n+                result[fieldIndex - 1] += valueToAdd; // add months\n+                result[fieldIndex] = day; // set day back to clamped value\n+                return result;\n+            } else {\n+                throw e;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}