{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int csLength = sequence.length();\n    final int searchLength = searchChars.length;\n    final int searchMax = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        final char ch = sequence.charAt(i);\n        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n            final int cp = codePointAt(sequence, i, csLength);\n            if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                continue;\n            }\n            i += Character.charCount(cp) - 1;\n            if (contains(searchChars, cp)) {\n                return true;\n            }\n        } else {\n            if (contains(searchChars, ch)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(final char[] array, final int valueToFind) {\n    for (final char item : array) {\n        if (item == valueToFind) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static int codePointAt(final CharSequence seq, final int index, final int limit) {\n    final char c1 = seq.charAt(index++);\n    if (index < limit) {\n        final char c2 = seq.charAt(index);\n        if (Character.isLowSurrogate(c2)) {\n            return Character.toCodePoint(c1, c2);\n        }\n    }\n    return c1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..6b34f2d3 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,52 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int csLength = sequence.length();\n+    final int searchLength = searchChars.length;\n+    final int searchMax = searchLength - 1;\n+    for (int i = 0; i < csLength; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+            final int cp = codePointAt(sequence, i, csLength);\n+            if (cp < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+                continue;\n+            }\n+            i += Character.charCount(cp) - 1;\n+            if (contains(searchChars, cp)) {\n+                return true;\n+            }\n+        } else {\n+            if (contains(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(final char[] array, final int valueToFind) {\n+    for (final char item : array) {\n+        if (item == valueToFind) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int codePointAt(final CharSequence seq, final int index, final int limit) {\n+    final char c1 = seq.charAt(index++);\n+    if (index < limit) {\n+        final char c2 = seq.charAt(index);\n+        if (Character.isLowSurrogate(c2)) {\n+            return Character.toCodePoint(c1, c2);\n+        }\n+    }\n+    return c1;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}