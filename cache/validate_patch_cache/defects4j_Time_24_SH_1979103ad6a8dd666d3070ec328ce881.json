{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n                \n                if(i == count - 1) {\n                    int year = new LocalDate(millis, iChrono).getYear();\n                    if(year != iDefaultYear) {\n                        throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": year parsed '\" + year + \"' does not match year requested '\"+iDefaultYear+\"'\");\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n>>> [ INFILL ] <<<\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..303716fa 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                \n+                if(i == count - 1) {\n+                    int year = new LocalDate(millis, iChrono).getYear();\n+                    if(year != iDefaultYear) {\n+                        throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": year parsed '\" + year + \"' does not match year requested '\"+iDefaultYear+\"'\");\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+>>> [ INFILL ] <<<\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}