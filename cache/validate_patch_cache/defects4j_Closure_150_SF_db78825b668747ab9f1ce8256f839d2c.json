{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    attachLiteralTypes(n);\n\n    if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n    } else if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n    } else if (n.getType() == Token.FUNCTION ||\n            (n.getType() == Token.LP && parent != null && parent.getType() == Token.FUNCTION && parent.getParent() == scope.getRootNode())) {\n        if (n.getType() != Token.FUNCTION || (parent != null && parent.getType() != Token.NAME)) {\n            defineDeclaredFunction(n, parent);\n        }\n        if (n.getType() == Token.FUNCTION) {\n            visitChildren(new NodeTraversal(compiler, this, t.getTypedScope()));\n        }\n        if (n.getType() == Token.LP && parent != null) {\n            Node grandParent = parent.getParent();\n            if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT && grandParent.getParent() != null && grandParent.getParent().getType() == Token.BLOCK) {\n                Node greatGrandparent = grandParent.getParent().getParent();\n                if (greatGrandparent != null && greatGrandparent.getType() == Token.FUNCTION) {\n                    handleFunctionInputs(greatGrandparent);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e01fb63e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,37 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    attachLiteralTypes(n);\n+\n+    if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+    } else if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+    } else if (n.getType() == Token.FUNCTION ||\n+            (n.getType() == Token.LP && parent != null && parent.getType() == Token.FUNCTION && parent.getParent() == scope.getRootNode())) {\n+        if (n.getType() != Token.FUNCTION || (parent != null && parent.getType() != Token.NAME)) {\n+            defineDeclaredFunction(n, parent);\n+        }\n+        if (n.getType() == Token.FUNCTION) {\n+            visitChildren(new NodeTraversal(compiler, this, t.getTypedScope()));\n+        }\n+        if (n.getType() == Token.LP && parent != null) {\n+            Node grandParent = parent.getParent();\n+            if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT && grandParent.getParent() != null && grandParent.getParent().getType() == Token.BLOCK) {\n+                Node greatGrandparent = grandParent.getParent().getParent();\n+                if (greatGrandparent != null && greatGrandparent.getType() == Token.FUNCTION) {\n+                    handleFunctionInputs(greatGrandparent);\n+                }\n+            }\n+        }\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}