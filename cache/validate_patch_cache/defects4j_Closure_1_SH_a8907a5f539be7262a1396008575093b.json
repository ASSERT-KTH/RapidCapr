{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    // Get the list of formal parameter names for this function\n    List<String> formalParameterNames = NodeUtil.getFunctionParameters(function);\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n\n          // Update formalParameterNames accordingly\n          formalParameterNames.remove(formalParameterNames.size() - 1);\n\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // remove any remaining unreferenced formal parameters from the \"middle\" of the function\n      for (Node node = argList.getFirstChild(); node != null && node.getNext() != null; node = node.getNext()) {\n        if (!referenced.contains(fnScope.getVar(node.getString()))) {\n          argList.removeChild(node);\n\n          // Update formalParameterNames accordingly\n          formalParameterNames.remove(node.getString());\n\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Update the function's parameter list to match formalParameterNames\n    List<Node> newArgs = AstFactory.createArgumentsNodes(compiler, formalParameterNames);\n    argList.detachChildren();\n    for (Node newArg : newArgs) {\n      argList.addChildToBack(newArg);\n    }\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1cec0c3a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,59 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    // Get the list of formal parameter names for this function\n+    List<String> formalParameterNames = NodeUtil.getFunctionParameters(function);\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+\n+          // Update formalParameterNames accordingly\n+          formalParameterNames.remove(formalParameterNames.size() - 1);\n+\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // remove any remaining unreferenced formal parameters from the \"middle\" of the function\n+      for (Node node = argList.getFirstChild(); node != null && node.getNext() != null; node = node.getNext()) {\n+        if (!referenced.contains(fnScope.getVar(node.getString()))) {\n+          argList.removeChild(node);\n+\n+          // Update formalParameterNames accordingly\n+          formalParameterNames.remove(node.getString());\n+\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // Update the function's parameter list to match formalParameterNames\n+    List<Node> newArgs = AstFactory.createArgumentsNodes(compiler, formalParameterNames);\n+    argList.detachChildren();\n+    for (Node newArg : newArgs) {\n+      argList.addChildToBack(newArg);\n+    }\n+    compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}