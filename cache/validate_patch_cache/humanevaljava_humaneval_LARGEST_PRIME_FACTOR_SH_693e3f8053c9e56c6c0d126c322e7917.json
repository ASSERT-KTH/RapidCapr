{
    "patch": "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n            if (is_prime(j) && n % j == 0) {\n                largest = j;\n                n /= j;   // Divide n by the prime factor to get the remaining part of n\n                j = 1;    // Reset the loop counter to check smaller prime factors\n            }\n        }\n        if (n > largest) {\n            largest = n;\n        }\n        return largest;\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java b/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\nindex 794cf2e..66b47e6 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\n@@ -20,8 +20,20 @@ public class LARGEST_PRIME_FACTOR {\n     public static int largest_prime_factor(int n) {\n         int largest = 1;\n         for (int j = 2; j < n; j += 1) {\n-            if (is_prime(j)){\n-                largest = n % j;\n+    public static int largest_prime_factor(int n) {\n+        int largest = 1;\n+        for (int j = 2; j < n; j += 1) {\n+            if (is_prime(j) && n % j == 0) {\n+                largest = j;\n+                n /= j;   // Divide n by the prime factor to get the remaining part of n\n+                j = 1;    // Reset the loop counter to check smaller prime factors\n+            }\n+        }\n+        if (n > largest) {\n+            largest = n;\n+        }\n+        return largest;\n+    }\n             }\n         }\n         return largest;",
    "result_reason": " /tmp/humaneval-LARGEST_PRIME_FACTOR/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java:[23,5] illegal start of expression",
    "test_result": "ERROR"
}