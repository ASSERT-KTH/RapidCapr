{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (!n.hasChildren()) {\n    return false;\n  }\n\n  if (n.getType() != Token.BLOCK || n.getChildCount() != 1) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n\n  if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n    return false;\n  }\n\n  if (NodeUtil.isCall(child)) {\n    return false;\n  }\n\n  if (child.getType() == Token.IF) {\n    Node condition = child.getFirstChild();\n    if (!NodeUtil.isBooleanOperator(condition)) {\n      return false;\n    }\n  }\n\n  if (!NodeUtil.isBooleanOperator(child) && NodeUtil.mayHaveSideEffects(child)) {\n    return false;\n  }\n\n  Node parent = n.getParent();\n  if (parent != null && parent.getType() == Token.EXPR_RESULT && NodeUtil.mayHaveSideEffects(child)) {\n    return false;\n  }\n\n  return !NodeUtil.mayHaveSideEffects(child);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..c3a0383f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,44 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (!n.hasChildren()) {\n+    return false;\n+  }\n+\n+  if (n.getType() != Token.BLOCK || n.getChildCount() != 1) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+\n+  if (NodeUtil.isFunctionExpression(child) || NodeUtil.isFunctionDeclaration(child)) {\n+    return false;\n+  }\n+\n+  if (NodeUtil.isCall(child)) {\n+    return false;\n+  }\n+\n+  if (child.getType() == Token.IF) {\n+    Node condition = child.getFirstChild();\n+    if (!NodeUtil.isBooleanOperator(condition)) {\n+      return false;\n     }\n+  }\n \n+  if (!NodeUtil.isBooleanOperator(child) && NodeUtil.mayHaveSideEffects(child)) {\n     return false;\n   }\n \n+  Node parent = n.getParent();\n+  if (parent != null && parent.getType() == Token.EXPR_RESULT && NodeUtil.mayHaveSideEffects(child)) {\n+    return false;\n+  }\n+\n+  return !NodeUtil.mayHaveSideEffects(child);\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}