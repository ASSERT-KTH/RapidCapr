{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n\n    int index = indexOf(fieldType);\n    int[] newValues;\n\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        newValues = new int[newTypes.length];\n\n        boolean placed = false;\n\n        // find correct insertion point to keep largest-smallest order\n        int i;\n        for (i = 0; i < iTypes.length; i++) {\n            DateTimeFieldType loopType = iTypes[i];\n            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n            DurationField fieldTypeUnitField = fieldType.getDurationType().getField(iChronology);\n            int compare = fieldTypeUnitField.compareTo(loopUnitField);\n            if (compare > 0) {\n                newTypes[i] = fieldType;\n                newValues[i] = value;\n                placed = true;\n                break;\n            }\n            if (compare == 0) {\n                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                if (rangeField.compareTo(loopRangeField) >= 0) {\n                    newTypes[i] = fieldType;\n                    newValues[i] = value;\n                    placed = true;\n                    break;\n                }\n            }\n            newTypes[i] = loopType;\n            newValues[i] = iValues[i];\n        }\n\n        // fieldType is smallest so far\n        if (!placed) {\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n        }\n\n        // copy old remaining fields\n        for (int j = i + 1; j < newTypes.length; j++) {\n            newTypes[j] = iTypes[j - 1];\n            newValues[j] = iValues[j - 1];\n        }\n\n        // use public constructor to ensure full validation\n        // this isn't overly efficient, but is safe\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n\n    if (getValue(index) == value) {\n        return this;\n    }\n\n    newValues = iValues.clone();\n    newValues[index] = value;\n    return new Partial(this, newValues);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..df0e4781 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,56 +423,75 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+\n+    int index = indexOf(fieldType);\n+    int[] newValues;\n+\n+    if (index == -1) {\n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n+        newValues = new int[newTypes.length];\n+\n+        boolean placed = false;\n+\n+        // find correct insertion point to keep largest-smallest order\n+        int i;\n+        for (i = 0; i < iTypes.length; i++) {\n+            DateTimeFieldType loopType = iTypes[i];\n+            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n+            DurationField fieldTypeUnitField = fieldType.getDurationType().getField(iChronology);\n+            int compare = fieldTypeUnitField.compareTo(loopUnitField);\n+            if (compare > 0) {\n+                newTypes[i] = fieldType;\n+                newValues[i] = value;\n+                placed = true;\n+                break;\n+            }\n+            if (compare == 0) {\n+                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n+                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+                if (rangeField.compareTo(loopRangeField) >= 0) {\n+                    newTypes[i] = fieldType;\n+                    newValues[i] = value;\n+                    placed = true;\n+                    break;\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n+            newTypes[i] = loopType;\n+            newValues[i] = iValues[i];\n+        }\n+\n+        // fieldType is smallest so far\n+        if (!placed) {\n             newTypes[i] = fieldType;\n             newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n         }\n-        if (value == getValue(index)) {\n-            return this;\n+\n+        // copy old remaining fields\n+        for (int j = i + 1; j < newTypes.length; j++) {\n+            newTypes[j] = iTypes[j - 1];\n+            newValues[j] = iValues[j - 1];\n         }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+\n+        // use public constructor to ensure full validation\n+        // this isn't overly efficient, but is safe\n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+        return newPartial;\n     }\n \n+    if (getValue(index) == value) {\n+        return this;\n+    }\n+\n+    newValues = iValues.clone();\n+    newValues[index] = value;\n+    return new Partial(this, newValues);\n+}\n+\n     /**\n      * Gets a copy of this date with the specified field removed.\n      * <p>",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}