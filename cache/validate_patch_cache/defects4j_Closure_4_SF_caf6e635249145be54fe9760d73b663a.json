{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  if (isResolved()) {\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n  boolean resolved = false;\n  try {\n    resolved = resolveViaRegistry(t, enclosing);\n  } catch (StackOverflowError e) {\n    throw e;\n  } catch (Throwable e) {\n    // Catch all exceptions and log the stack trace.\n    e.printStackTrace();\n  }\n  JSType resolvedType = null;\n  if (resolved) {\n    try {\n      resolvedType = super.resolveInternal(t, enclosing);\n    } catch (StackOverflowError e) {\n      throw e;\n    } catch (Throwable e) {\n      // Catch all exceptions and log the stack trace.\n      e.printStackTrace();\n    }\n    if (resolvedType != null && resolvedType.isResolved()) {\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n  if (resolvedType == null || !resolvedType.isResolved()) {\n    try {\n      resolveViaProperties(t, enclosing);\n      resolvedType = super.resolveInternal(t, enclosing);\n    } catch (StackOverflowError e) {\n      throw e;\n    } catch (Throwable e) {\n      // Catch all exceptions and log the stack trace.\n      e.printStackTrace();\n    }\n    if (resolvedType == null) {\n      resolvedType = this;\n    } else {\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n  return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..dce21099 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,57 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  if (isResolved()) {\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+  boolean resolved = false;\n+  try {\n+    resolved = resolveViaRegistry(t, enclosing);\n+  } catch (StackOverflowError e) {\n+    throw e;\n+  } catch (Throwable e) {\n+    // Catch all exceptions and log the stack trace.\n+    e.printStackTrace();\n+  }\n+  JSType resolvedType = null;\n+  if (resolved) {\n+    try {\n+      resolvedType = super.resolveInternal(t, enclosing);\n+    } catch (StackOverflowError e) {\n+      throw e;\n+    } catch (Throwable e) {\n+      // Catch all exceptions and log the stack trace.\n+      e.printStackTrace();\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (resolvedType != null && resolvedType.isResolved()) {\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+  }\n+  if (resolvedType == null || !resolvedType.isResolved()) {\n+    try {\n+      resolveViaProperties(t, enclosing);\n+      resolvedType = super.resolveInternal(t, enclosing);\n+    } catch (StackOverflowError e) {\n+      throw e;\n+    } catch (Throwable e) {\n+      // Catch all exceptions and log the stack trace.\n+      e.printStackTrace();\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    if (resolvedType == null) {\n+      resolvedType = this;\n+    } else {\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n+  }\n+  return resolvedType;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}