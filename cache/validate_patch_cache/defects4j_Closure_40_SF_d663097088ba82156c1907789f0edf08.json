{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isFunctionDeclaration(n)) {\n        visitFunctionDeclaration(n);\n    } else if (n.isScript()) {\n        visitScript(n);\n    } else if (n.isBlock()) {\n        visitBlock(n);\n    } else if (n.isName()) {\n        visitName(n);\n    } else if (n.isExprResult()) {\n        visitExprResult(n);\n    } else if (n.isExprResult()) {\n        visitExprResult(n);\n    } else if (n.isCall()) {\n        visitCall(n);\n    } else {\n        visitOther(n);\n    }\n}\n\nprivate void visitFunctionDeclaration(Node n) {\n    // Record the function name in map\n    JsName fnName = getName(n.getFirstChild().getString(), true);\n    if (fnName == null) {\n        return; // The code doesn't know what the name is. Nothing to record.\n    }\n\n    recordSet(fnName, n);\n}\n\nprivate void visitScript(Node n) {\n    requiresIndexableArray = false;\n\n    if (t.getInput().getPath().endsWith(\"program.js\")) {\n        // TODO: This is a temporary hack until $jscomp and $goog can co-exist.\n        // b/28725264\n        recordSet(getGlobalName(\"$goog\"), null);\n    }\n\n    // Record all global variables.\n    Node child = n.getFirstChild();\n    while (child != null) {\n        if (NodeUtil.isVarDeclaration(child)) {\n            recordVarDeclaration(child);\n        }\n        child = child.getNext();\n    }\n}\n\nprivate void visitBlock(Node n) {\n    // Record all local variable declarations within function.\n    Node child = n.getFirstChild();\n    while (child != null) {\n        if (NodeUtil.isVarDeclaration(child)) {\n            recordVarDeclaration(child);\n        }\n        child = child.getNext();\n    }\n}\n\nprivate void visitName(Node n) {\n    NameInformation ns = createNameInformation(t, n, null);\n    if (ns == null) {\n        return;\n    }\n\n    if (ns.name == null) {\n        return;\n    }\n\n    // Add the name information to the appropriate set.\n    JsName jsName = getName(ns.name, false);\n    if (jsName == null) {\n        return;\n    } else {\n        if (ns.canTest) {\n            addTest(jsName);\n        }\n    }\n}\n\nprivate void visitExprResult(Node n) {\n    Node child = n.getFirstChild();\n    if (child == null) {\n        return;\n    }\n\n    // Handle variable assignments.\n    if (child.isAssign()) {\n        Node varNode = child.getFirstChild();\n        if (varNode == null) {\n            return;\n        }\n\n        NameInformation ns = createNameInformation(t, varNode, null);\n        if (ns == null) {\n            return;\n        }\n\n        if (ns.name == null) {\n            return;\n        }\n\n        JsName jsName = getName(ns.name, false);\n        if (jsName == null) {\n            return;\n        }\n\n        if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n        } else {\n            if (ns.onlyAffectsClassDef) {\n                refNodes.add(new ClassDefiningFunctionNode(\n                        jsName, n, n, n.getParent()));\n            } else {\n                recordSet(jsName, n);\n            }\n        }\n    }\n}\n\nprivate void visitCall(Node n) {\n    Node firstChild = n.getFirstChild();\n    if (firstChild == null) {\n        return;\n    }\n\n    NameInformation ns = createNameInformation(t, firstChild, null);\n    if (ns == null) {\n        return;\n    }\n\n    if (ns.onlyAffectsClassDef) {\n        JsName jsName = getName(ns.name, false);\n        if (jsName == null) {\n            return;\n        }\n\n        refNodes.add(new ClassDefiningFunctionNode(jsName, firstChild, firstChild, firstChild.getParent()));\n    }\n}\n\nprivate void visitOther(Node n) {\n    // nothing to do for the other node types\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..e371eff3 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,151 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+        visitFunctionDeclaration(n);\n+    } else if (n.isScript()) {\n+        visitScript(n);\n+    } else if (n.isBlock()) {\n+        visitBlock(n);\n+    } else if (n.isName()) {\n+        visitName(n);\n+    } else if (n.isExprResult()) {\n+        visitExprResult(n);\n+    } else if (n.isExprResult()) {\n+        visitExprResult(n);\n+    } else if (n.isCall()) {\n+        visitCall(n);\n+    } else {\n+        visitOther(n);\n+    }\n+}\n \n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+private void visitFunctionDeclaration(Node n) {\n+    // Record the function name in map\n+    JsName fnName = getName(n.getFirstChild().getString(), true);\n+    if (fnName == null) {\n+        return; // The code doesn't know what the name is. Nothing to record.\n+    }\n+\n+    recordSet(fnName, n);\n+}\n+\n+private void visitScript(Node n) {\n+    requiresIndexableArray = false;\n+\n+    if (t.getInput().getPath().endsWith(\"program.js\")) {\n+        // TODO: This is a temporary hack until $jscomp and $goog can co-exist.\n+        // b/28725264\n+        recordSet(getGlobalName(\"$goog\"), null);\n+    }\n+\n+    // Record all global variables.\n+    Node child = n.getFirstChild();\n+    while (child != null) {\n+        if (NodeUtil.isVarDeclaration(child)) {\n+            recordVarDeclaration(child);\n         }\n-      }\n+        child = child.getNext();\n+    }\n+}\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+private void visitBlock(Node n) {\n+    // Record all local variable declarations within function.\n+    Node child = n.getFirstChild();\n+    while (child != null) {\n+        if (NodeUtil.isVarDeclaration(child)) {\n+            recordVarDeclaration(child);\n+        }\n+        child = child.getNext();\n+    }\n+}\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n+private void visitName(Node n) {\n+    NameInformation ns = createNameInformation(t, n, null);\n+    if (ns == null) {\n+        return;\n+    }\n+\n+    if (ns.name == null) {\n+        return;\n+    }\n+\n+    // Add the name information to the appropriate set.\n+    JsName jsName = getName(ns.name, false);\n+    if (jsName == null) {\n+        return;\n+    } else {\n+        if (ns.canTest) {\n+            addTest(jsName);\n+        }\n+    }\n+}\n+\n+private void visitExprResult(Node n) {\n+    Node child = n.getFirstChild();\n+    if (child == null) {\n+        return;\n+    }\n+\n+    // Handle variable assignments.\n+    if (child.isAssign()) {\n+        Node varNode = child.getFirstChild();\n+        if (varNode == null) {\n+            return;\n+        }\n+\n+        NameInformation ns = createNameInformation(t, varNode, null);\n+        if (ns == null) {\n+            return;\n+        }\n+\n+        if (ns.name == null) {\n+            return;\n+        }\n+\n+        JsName jsName = getName(ns.name, false);\n+        if (jsName == null) {\n+            return;\n+        }\n+\n+        if (ns.isPrototype) {\n             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+        } else {\n+            if (ns.onlyAffectsClassDef) {\n+                refNodes.add(new ClassDefiningFunctionNode(\n+                        jsName, n, n, n.getParent()));\n+            } else {\n+                recordSet(jsName, n);\n+            }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+    }\n+}\n+\n+private void visitCall(Node n) {\n+    Node firstChild = n.getFirstChild();\n+    if (firstChild == null) {\n+        return;\n+    }\n+\n+    NameInformation ns = createNameInformation(t, firstChild, null);\n+    if (ns == null) {\n+        return;\n+    }\n+\n+    if (ns.onlyAffectsClassDef) {\n+        JsName jsName = getName(ns.name, false);\n+        if (jsName == null) {\n+            return;\n         }\n-      }\n+\n+        refNodes.add(new ClassDefiningFunctionNode(jsName, firstChild, firstChild, firstChild.getParent()));\n     }\n+}\n+\n+private void visitOther(Node n) {\n+    // nothing to do for the other node types\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: method recordSet in class NameAnalyzer.FindDeclarationsAndSetters cannot be applied to given types;",
    "test_result": "ERROR"
}