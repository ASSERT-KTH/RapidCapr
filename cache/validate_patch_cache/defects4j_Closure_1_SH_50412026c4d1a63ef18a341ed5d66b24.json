{
    "patch": "// Remove unreferenced function args if safe to do so. If there is a possibility\n// that the removed arguments are captured and used inside the function body,\n// they must be left in place. To be extra careful, in simple mode it is assumed\n// that unused parameters may be captured. In advanced mode, we can remove them.\n// Note that removing unreferenced function args breaks Function.prototype.length.\n// In advanced mode, this may be considered equivalent to reflecting on the function's lexical source.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  boolean canRemoveArgs = !options.getOutputFeatureSet().contains(FeatureSet.Feature.MODULES)\n      && !options.getRenamingPolicy().shouldBeautify();\n\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers && canRemoveArgs) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..dd271a92 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unreferenced function args if safe to do so. If there is a possibility\n+// that the removed arguments are captured and used inside the function body,\n+// they must be left in place. To be extra careful, in simple mode it is assumed\n+// that unused parameters may be captured. In advanced mode, we can remove them.\n+// Note that removing unreferenced function args breaks Function.prototype.length.\n+// In advanced mode, this may be considered equivalent to reflecting on the function's lexical source.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  boolean canRemoveArgs = !options.getOutputFeatureSet().contains(FeatureSet.Feature.MODULES)\n+      && !options.getRenamingPolicy().shouldBeautify();\n+\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers && canRemoveArgs) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}