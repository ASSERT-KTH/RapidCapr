{
    "patch": "                                  FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter;\n    Node argument;\n    while (parameters.hasNext()) {\n      // If there are no arguments left in the list, then the while loop implies that this must be wrong\n      // since there are still parameters left in the list.\n      if (!arguments.hasNext()) {\n        String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n        report(t, call, TypeValidator.WRONG_ARGUMENT_COUNT, functionName, \"none\",\n            String.valueOf(functionType.getMinArguments()));\n        return;\n      }\n      ordinal++;\n      parameter = parameters.next();\n      argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call,\n                                                ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs || numArgs > maxArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs),\n          String.valueOf(minArgs)\n              + (maxArgs != Integer.MAX_VALUE\n              ? \" and at most \" + maxArgs + \" argument(s)\"\n              : \"\"));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..6b10b725 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,41 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+                                  FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    Node parameter;\n+    Node argument;\n+    while (parameters.hasNext()) {\n+      // If there are no arguments left in the list, then the while loop implies that this must be wrong\n+      // since there are still parameters left in the list.\n+      if (!arguments.hasNext()) {\n+        String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+        report(t, call, TypeValidator.WRONG_ARGUMENT_COUNT, functionName, \"none\",\n+            String.valueOf(functionType.getMinArguments()));\n+        return;\n+      }\n       ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      parameter = parameters.next();\n+      argument = arguments.next();\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call,\n+                                                ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (numArgs < minArgs || numArgs > maxArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs),\n+          String.valueOf(minArgs)\n+              + (maxArgs != Integer.MAX_VALUE\n+              ? \" and at most \" + maxArgs + \" argument(s)\"\n+              : \"\"));\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}