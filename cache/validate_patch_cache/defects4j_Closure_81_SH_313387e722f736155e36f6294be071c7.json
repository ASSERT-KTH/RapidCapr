{
    "patch": "      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        name.setLineno(functionNode.getLineno());\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        newName.setCharno(position2charno(functionNode.getBody().getSourceStart()));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      int lpLine;\n      if (isUnnamedFunction) {\n        lpLine = functionNode.getBody().getLineno();\n        lp.setCharno(position2charno(functionNode.getBody().getSourceStart()));\n      } else {\n        lpLine = functionNode.getParams().getLineno();\n        lp.setCharno(position2charno(functionNode.getParams().getSourceStart()));\n      }\n      lp.setLineno(lpLine);\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..ada43e84 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,39 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        name.setLineno(functionNode.getLineno());\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        newName.setCharno(position2charno(functionNode.getBody().getSourceStart()));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      int lpLine;\n+      if (isUnnamedFunction) {\n+        lpLine = functionNode.getBody().getLineno();\n+        lp.setCharno(position2charno(functionNode.getBody().getSourceStart()));\n+      } else {\n+        lpLine = functionNode.getParams().getLineno();\n+        lp.setCharno(position2charno(functionNode.getParams().getSourceStart()));\n+      }\n+      lp.setLineno(lpLine);\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+     return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}