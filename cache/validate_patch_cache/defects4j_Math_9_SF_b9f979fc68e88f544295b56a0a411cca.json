{
    "patch": "@Test\npublic void testRevert() {\n    // setup\n    Vector3D direction = new Vector3D(0.028581782127907646, 0.9569013503639945, 0.2880135736677026);\n    Line line = new Line(Vector3D.ZERO, direction);\n    \n    // exercise\n    Line result = line.revert();\n    \n    // verify\n    double[] expectedDirection = {-0.028581782127907646, -0.9569013503639945, -0.2880135736677026};\n    Assert.assertArrayEquals(expectedDirection, result.getDirection().toArray(), 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..ec75f91ad 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,19 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+@Test\n+public void testRevert() {\n+    // setup\n+    Vector3D direction = new Vector3D(0.028581782127907646, 0.9569013503639945, 0.2880135736677026);\n+    Line line = new Line(Vector3D.ZERO, direction);\n+    \n+    // exercise\n+    Line result = line.revert();\n+    \n+    // verify\n+    double[] expectedDirection = {-0.028581782127907646, -0.9569013503639945, -0.2880135736677026};\n+    Assert.assertArrayEquals(expectedDirection, result.getDirection().toArray(), 0);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}