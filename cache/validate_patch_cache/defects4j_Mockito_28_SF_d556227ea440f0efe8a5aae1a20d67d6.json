{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> sortedFields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n    Collections.reverse(sortedFields);\n\n    for (Field field : sortedFields) {\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (candidate != null && (field.getType().isInstance(candidate) || field.getType().isAssignableFrom(candidate.getClass()))) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, candidate);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2ee5ffca0 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,23 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    List<Field> sortedFields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n+    Collections.reverse(sortedFields);\n+\n+    for (Field field : sortedFields) {\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (candidate != null && (field.getType().isInstance(candidate) || field.getType().isAssignableFrom(candidate.getClass()))) {\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalAccessException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}