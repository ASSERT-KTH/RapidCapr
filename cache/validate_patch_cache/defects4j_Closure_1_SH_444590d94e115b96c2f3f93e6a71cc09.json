{
    "patch": "    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        Node toRemove = lastArg;\n        lastArg = lastArg.getPrevious();\n        argList.removeChild(toRemove);\n        compiler.reportCodeChange();\n      }\n      while (lastArg != null && lastArg.getPrevious() != null) {\n        Node currArg = lastArg.getPrevious();\n        if (!referenced.contains(fnScope.getVar(currArg.getString()))) {\n          Node toRemove = currArg;\n          lastArg.setPrevious(toRemove.getPrevious());\n          argList.removeChild(toRemove);\n          compiler.reportCodeChange();\n        } else {\n          lastArg = currArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ac8c3de2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        Node toRemove = lastArg;\n+        lastArg = lastArg.getPrevious();\n+        argList.removeChild(toRemove);\n+        compiler.reportCodeChange();\n+      }\n+      while (lastArg != null && lastArg.getPrevious() != null) {\n+        Node currArg = lastArg.getPrevious();\n+        if (!referenced.contains(fnScope.getVar(currArg.getString()))) {\n+          Node toRemove = currArg;\n+          lastArg.setPrevious(toRemove.getPrevious());\n+          argList.removeChild(toRemove);\n+          compiler.reportCodeChange();\n+        } else {\n+          lastArg = currArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}