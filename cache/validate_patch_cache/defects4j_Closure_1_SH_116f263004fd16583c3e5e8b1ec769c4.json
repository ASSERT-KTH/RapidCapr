{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Remove the unreferenced args from the function declaration.\n      Node currentArg = argList.getFirstChild();\n      while (currentArg != null) {\n          Node nextArg = currentArg.getNext();\n          Var var = fnScope.getVar(currentArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(currentArg);\n          }\n          currentArg = nextArg;\n      }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d34ee35b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Remove the unreferenced args from the function declaration.\n+      Node currentArg = argList.getFirstChild();\n+      while (currentArg != null) {\n+          Node nextArg = currentArg.getNext();\n+          Var var = fnScope.getVar(currentArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(currentArg);\n+          }\n+          currentArg = nextArg;\n+      }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}