{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isFebruaryLeapDay = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear() && values[i] == 2) {\n                int maxDaysInLeapFebruary = iChronology.dayOfMonth().getMaximumValue(instant);\n                if (maxDaysInLeapFebruary == 29 && iChronology.dayOfMonth().get(instant) == 29) {\n                    isFebruaryLeapDay = true;\n                }\n            }\n        }\n        while (valueToAdd != 0) {\n            instant = iChronology.monthOfYear().add(instant, valueToAdd > 0 ? 1 : -1);\n            if (isFebruaryLeapDay) {\n                // If February contains a leap day, limit date invariant to February 29th\n                instant = iChronology.dayOfMonth().set(instant, 29);\n            }\n            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n            if (dayOfMonth > iChronology.dayOfMonth().getMaximumValue(instant)) {\n                // If new date is invalid, set to last day of month\n                instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n            }\n            valueToAdd += valueToAdd > 0 ? -1 : 1;\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e54273d0 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,40 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isFebruaryLeapDay = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear() && values[i] == 2) {\n+                int maxDaysInLeapFebruary = iChronology.dayOfMonth().getMaximumValue(instant);\n+                if (maxDaysInLeapFebruary == 29 && iChronology.dayOfMonth().get(instant) == 29) {\n+                    isFebruaryLeapDay = true;\n+                }\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        while (valueToAdd != 0) {\n+            instant = iChronology.monthOfYear().add(instant, valueToAdd > 0 ? 1 : -1);\n+            if (isFebruaryLeapDay) {\n+                // If February contains a leap day, limit date invariant to February 29th\n+                instant = iChronology.dayOfMonth().set(instant, 29);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n+            if (dayOfMonth > iChronology.dayOfMonth().getMaximumValue(instant)) {\n+                // If new date is invalid, set to last day of month\n+                instant = iChronology.dayOfMonth().set(instant, iChronology.dayOfMonth().getMaximumValue(instant));\n+            }\n+            valueToAdd += valueToAdd > 0 ? -1 : 1;\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}