{
    "patch": "            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            int offsetDiff = offsetLocal - offsetAdjusted;\n            boolean dstGapFilling = false;\n            if (offsetDiff < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    dstGapFilling = true;\n                    instantLocal = nextLocal + offsetLocal;\n                }\n            }\n            final int newOffset = getOffset(instantLocal);\n            if (offsetDiff < 0 && newOffset > offsetAdjusted && !dstGapFilling) {\n                // Reverse the change and retry.\n                return getOffsetFromLocal(instantLocal + offsetAdjusted - offsetLocal);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..fa172bef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            int offsetDiff = offsetLocal - offsetAdjusted;\n+            boolean dstGapFilling = false;\n+            if (offsetDiff < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    dstGapFilling = true;\n+                    instantLocal = nextLocal + offsetLocal;\n+                }\n+            }\n+            final int newOffset = getOffset(instantLocal);\n+            if (offsetDiff < 0 && newOffset > offsetAdjusted && !dstGapFilling) {\n+                // Reverse the change and retry.\n+                return getOffsetFromLocal(instantLocal + offsetAdjusted - offsetLocal);\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}