{
    "patch": "      Node args = argList.getFirstChild();\n      int i = 0;\n      while (args != null) {\n        if (args.isParamList()) {\n          while (args.getFirstChild() != null) {\n            args = args.getFirstChild();\n            ++i;\n          }\n        }\n\n        Var var = fnScope.getVar(args.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(args);\n          compiler.reportCodeChange();\n        } else {\n          ++i;\n        }\n\n        args = args.getNext();\n      }\n\n      // Adjust the function's declared parameter count.\n      if (i != function.getParameterCount()) {\n        function.setParamCount(i);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d8dd9760 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node args = argList.getFirstChild();\n+      int i = 0;\n+      while (args != null) {\n+        if (args.isParamList()) {\n+          while (args.getFirstChild() != null) {\n+            args = args.getFirstChild();\n+            ++i;\n+          }\n+        }\n+\n+        Var var = fnScope.getVar(args.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(args);\n+          compiler.reportCodeChange();\n+        } else {\n+          ++i;\n+        }\n+\n+        args = args.getNext();\n+      }\n+\n+      // Adjust the function's declared parameter count.\n+      if (i != function.getParameterCount()) {\n+        function.setParamCount(i);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}