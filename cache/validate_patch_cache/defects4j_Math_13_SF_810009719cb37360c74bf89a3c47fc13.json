{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final SchurTransformer transformer = new SchurTransformer(m);\n        final RealMatrix t = transformer.getT();\n        final RealMatrix z = transformer.getZ();\n        \n        final int n = m.getRowDimension();\n        final double[][] sqrtTData = new double[n][n];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                sqrtTData[i][j] = FastMath.sqrt(FastMath.abs(t.getEntry(i, j)));\n            }\n        }\n        \n        final RealMatrix sqrtT = MatrixUtils.createRealMatrix(sqrtTData);\n        final RealMatrix sqrtM = z.multiply(sqrtT).multiply(z.transpose());\n        \n        return sqrtM;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..073d4131f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final SchurTransformer transformer = new SchurTransformer(m);\n+        final RealMatrix t = transformer.getT();\n+        final RealMatrix z = transformer.getZ();\n+        \n+        final int n = m.getRowDimension();\n+        final double[][] sqrtTData = new double[n][n];\n+        \n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                sqrtTData[i][j] = FastMath.sqrt(FastMath.abs(t.getEntry(i, j)));\n+            }\n+        }\n+        \n+        final RealMatrix sqrtT = MatrixUtils.createRealMatrix(sqrtTData);\n+        final RealMatrix sqrtM = z.multiply(sqrtT).multiply(z.transpose());\n+        \n+        return sqrtM;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}