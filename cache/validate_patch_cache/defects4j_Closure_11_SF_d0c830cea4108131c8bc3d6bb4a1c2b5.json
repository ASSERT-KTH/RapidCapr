{
    "patch": "public static Properties loadProps(String fileName) throws IOException {\n    Properties props = new Properties();\n    InputStream is = new FileInputStream(fileName);\n    props.load(is);\n    is.close();\n    if (props.containsKey(\"db.driver\") && props.containsKey(\"db.url\")) {\n        return props;\n    } else {\n        throw new IllegalArgumentException(\"Invalid properties file \" + fileName);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..4884d934 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static Properties loadProps(String fileName) throws IOException {\n+    Properties props = new Properties();\n+    InputStream is = new FileInputStream(fileName);\n+    props.load(is);\n+    is.close();\n+    if (props.containsKey(\"db.driver\") && props.containsKey(\"db.url\")) {\n+        return props;\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid properties file \" + fileName);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}