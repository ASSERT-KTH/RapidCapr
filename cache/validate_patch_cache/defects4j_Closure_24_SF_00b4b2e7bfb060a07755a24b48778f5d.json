{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  // Iterate through all the variable bindings in the current scope.\n  for (Var v : scope.getVarIterable()) {\n    // Get the node that contains this binding.\n    Node n = v.getNode();\n    // Skip if this node is not a simple name.\n    if (!n.isName()) {\n      continue;\n    }\n    // Get the parent node of the node containing this binding.\n    Node parent = n.getParent();\n    // If this binding is not declared with var keyword, skip.\n    if (parent == null || !parent.isVar()) {\n      continue;\n    }\n    // Get the parent node of var, which should be the enclosing function or script node.\n    Node ancestor = parent.getGrandparent();\n    if (ancestor == null) {\n      continue;\n    }\n    // Check that the parent node is a script or function.\n    if (!ancestor.isScript() && !ancestor.isFunction()) {\n      continue;\n    }\n    // If the node corresponding to this binding has no children, then it\n    // is not an alias and cannot be used outside of this function. Report an error.\n    if (!n.hasChildren()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      continue;\n    }\n    // If this binding is an alias, add it to the map of aliases.\n    Node firstChild = n.getFirstChild();\n    if (firstChild.isQualifiedName()) {\n      String name = n.getString();\n      Var v1 = scope.getVar(name);\n      if (v1 != null) {\n         Expression expr = AstAnalyzer.getSimpleRValue(v1.getNode());\n        if (expr != null && expr.isGetProp()) {\n          String qualifiedName = expr.getQualifiedName();\n          if (qualifiedName != null) {\n            aliases.put(name, v1);\n            transformation.addAlias(name, qualifiedName);\n          }\n        }\n      }\n    }  \n  } \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..22930347 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,55 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  // Iterate through all the variable bindings in the current scope.\n+  for (Var v : scope.getVarIterable()) {\n+    // Get the node that contains this binding.\n+    Node n = v.getNode();\n+    // Skip if this node is not a simple name.\n+    if (!n.isName()) {\n+      continue;\n+    }\n+    // Get the parent node of the node containing this binding.\n+    Node parent = n.getParent();\n+    // If this binding is not declared with var keyword, skip.\n+    if (parent == null || !parent.isVar()) {\n+      continue;\n+    }\n+    // Get the parent node of var, which should be the enclosing function or script node.\n+    Node ancestor = parent.getGrandparent();\n+    if (ancestor == null) {\n+      continue;\n+    }\n+    // Check that the parent node is a script or function.\n+    if (!ancestor.isScript() && !ancestor.isFunction()) {\n+      continue;\n+    }\n+    // If the node corresponding to this binding has no children, then it\n+    // is not an alias and cannot be used outside of this function. Report an error.\n+    if (!n.hasChildren()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      continue;\n+    }\n+    // If this binding is an alias, add it to the map of aliases.\n+    Node firstChild = n.getFirstChild();\n+    if (firstChild.isQualifiedName()) {\n+      String name = n.getString();\n+      Var v1 = scope.getVar(name);\n+      if (v1 != null) {\n+         Expression expr = AstAnalyzer.getSimpleRValue(v1.getNode());\n+        if (expr != null && expr.isGetProp()) {\n+          String qualifiedName = expr.getQualifiedName();\n+          if (qualifiedName != null) {\n+            aliases.put(name, v1);\n+            transformation.addAlias(name, qualifiedName);\n+          }\n         }\n       }\n-    }\n+    }  \n+  } \n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}