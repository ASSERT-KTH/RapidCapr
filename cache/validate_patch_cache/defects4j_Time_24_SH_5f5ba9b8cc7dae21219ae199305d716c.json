{
    "patch": "        long minMillis = iChrono.year().set(0L, iDefaultYear);\n        long maxMillis = minMillis + iChrono.year().getField(getOrCreateDurationField(iSavedFields, iSavedFieldsCount, DurationFieldType.years().getField(iChrono))).getMaximumValue() - 1L;\n        FieldUtils.verifyValueBounds(DateTimeFieldType.millis(), millis, minMillis, maxMillis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..90976723 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,9 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long minMillis = iChrono.year().set(0L, iDefaultYear);\n+        long maxMillis = minMillis + iChrono.year().getField(getOrCreateDurationField(iSavedFields, iSavedFieldsCount, DurationFieldType.years().getField(iChrono))).getMaximumValue() - 1L;\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.millis(), millis, minMillis, maxMillis);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}