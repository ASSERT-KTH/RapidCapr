{
    "patch": "\nprotected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState) {\n\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        g2.setFont(font);\n        Paint paint = getLabelPaint();\n        g2.setPaint(paint);\n        TextAnchor anchor = this.getLabelTextAnchor();\n        RectangleInsets insets = this.getLabelInsets();\n        float angle = getLabelAngle();\n        double angleRadians = Math.toRadians(angle);\n        double baselineOffset = 0.0;\n        double labelWidth = 0.0;\n        double labelHeight = 0.0;\n        if (isVerticalLabel()) {\n            labelWidth = this.getLabel().length();\n            labelHeight = font.getLineMetrics(this.getLabel(), g2.getFontRenderContext())\n                    .getHeight();\n\n        } else {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n            labelWidth = bounds.getWidth();\n            labelHeight = bounds.getHeight();\n            baselineOffset = calculateBaselineOffset(fm, anchor);\n        }\n        Insets labelInsets = insets.createInsetRectangle((float)labelHeight, \n                (float) labelWidth);\n        double[] transformed = {0.0, 0.0};\n        int[] coords = {labelInsets.left, labelInsets.top};\n        if (edge == RectangleEdge.TOP) {\n            anchor = anchor.adjustTopwards(0.0);\n            transformed = calculateAnchorPoint(labelWidth/2.0,\n                    baselineOffset, dataArea, edge);\n            coords[0] = (int) transformed[0];\n            coords[1] = (int) transformed[1];\n        } else if (edge == RectangleEdge.BOTTOM) {\n            anchor = anchor.adjustBaselines(-labelInsets.bottom);\n            transformed = calculateAnchorPoint(labelWidth / 2.0,\n                    -baselineOffset + labelHeight, dataArea, edge);\n            coords[0] = (int) transformed[0];\n            coords[1] = (int) transformed[1];\n        } else if (edge == RectangleEdge.LEFT) {\n            anchor = anchor.adjustLeft(labelInsets.left);\n            transformed = calculateAnchorPoint(baselineOffset, labelHeight / 2.0, \n                    dataArea, edge);\n            coords[0] = (int) transformed[0];\n            coords[1] = (int) transformed[1];\n        } else if (edge == RectangleEdge.RIGHT) {\n            anchor = anchor.adjustRight(-labelInsets.right);\n            transformed = calculateAnchorPoint(-baselineOffset + labelWidth, \n                    labelHeight / 2.0, dataArea, edge);\n            coords[0] = (int) transformed[0];\n            coords[1] = (int) transformed[1];\n        }\n        Point2D anchorPoint = new Point2D.Double(coords[0], coords[1]);\n        Point2D rotatedAnchorPoint = calculateLabelAnchorPoint(anchorPoint, angleRadians, transformed);\n        g2.rotate(angleRadians, rotatedAnchorPoint.getX(), rotatedAnchorPoint.getY());\n        if (isVerticalLabel()) {\n            int length = label.length();\n            float ystart = (float) anchorPoint.getY();\n            if (edge == RectangleEdge.TOP) {\n                ystart = (float) (ystart + labelWidth / 2.0);\n            } else if (edge == RectangleEdge.BOTTOM) {\n                ystart = (float) (ystart - labelWidth / 2.0);\n            }\n            for (int i = 0; i < length; i++) {\n                AttributedString character = new AttributedString(label.substring(i, i + 1));\n                character.addAttribute(TextAttribute.FONT, font);\n                character.addAttribute(TextAttribute.FOREGROUND, paint);\n                TextLayout tl = new TextLayout(character.getIterator(), \n                        g2.getFontRenderContext());\n                float ascent = tl.getAscent();\n                Float descent = tl.getDescent();\n                Shape shape = tl.getOutline(null);\n                Rectangle2D charVisualBounds = shape.getBounds2D();\n                Point2D pos;\n                if (edge == RectangleEdge.TOP) {\n                    pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(), \n                            anchorPoint.getX() + charVisualBounds.getCenterY());\n                } else if (edge == RectangleEdge.BOTTOM) {\n                    pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(), \n                            anchorPoint.getY() - charVisualBounds.getCenterY());\n                } else if (edge == RectangleEdge.LEFT) {\n                    pos = new Point2D.Double(anchorPoint.getX() - charVisualBounds.getCenterY(), \n                            ystart - charVisualBounds.getCenterX());\n                } else {\n                    pos = new Point2D.Double(anchorPoint.getX() + charVisualBounds.getCenterY(), \n                            ystart - charVisualBounds.getCenterX());\n                }\n                g2.fill(shape);\n            }\n        } else {\n            TextUtilities.drawAlignedString(label, g2, (float) anchorPoint.getX(), \n                    (float) anchorPoint.getY(), anchor);\n        }\n        // g2.rotate(-angleRadians, rotatedAnchorPoint.getX(), rotatedAnchorPoint.getY());\n\n        if (this.isTickMarksVisible()) {\n            double ol = this.getTickMarkOutsideLength();\n            double il = this.getTickMarkInsideLength();\n            float strokeWidth = this.getTickMarkStroke().floatValue();\n            Line2D.Double mark = null;\n            g2.setStroke(this.getTickMarkStroke());\n            g2.setPaint(this.getTickMarkPaint());\n            if (edge == RectangleEdge.TOP) {\n                mark = new Line2D.Double(transformed[0], transformed[1],\n                        transformed[0] + il, transformed[1]);\n                g2.draw(mark);\n                mark.setLine(transformed[0], transformed[1], transformed[0] - ol,\n                        transformed[1]);\n            } else if (edge == RectangleEdge.BOTTOM) {\n                mark = new Line2D.Double(transformed[0], transformed[1],\n                        transformed[0] + il, transformed[1]);\n                g2.draw(mark);\n                mark.setLine(transformed[0], transformed[1], transformed[0] \n                        - ol, transformed[1]);\n            } else if (edge == RectangleEdge.LEFT) {\n                mark = new Line2D.Double(transformed[0], transformed[1],\n                        transformed[0], transformed[1] + il);\n                g2.draw(mark);\n                mark.setLine(transformed[0], transformed[1], transformed[0], \n                        transformed[1] - ol);\n            } else if (edge == RectangleEdge.RIGHT) {\n                mark = new Line2D.Double(transformed[0], transformed[1],\n                        transformed[0], transformed[1] + il);\n                g2.draw(mark);\n                mark.setLine(transformed[0], transformed[1], transformed[0], \n                        transformed[1] - ol);\n            }\n            g2.draw(mark);\n        }\n        if (plotState != null) {\n            EntityCollection entities = plotState.getOwner().getEntityCollection();\n            if (entities != null) {\n                String tip = null;\n                if (getToolTipText() != null) {\n                    tip = getToolTipText();\n                }\n                String url = null;\n                if (getURL() != null) {\n                    url = getURL().toString();\n                }\n                entities.add(new TickLabelEntity(mark.getBounds2D(), this, tip, \n                        url));\n            }\n        }\n        // update the axis state for the label just drawn...\n        double h = 0.0;\n        double w = 0.0;\n        if (isVerticalTickLabels()) {\n            if (isTickLabelsVisible()) {\n                h = labelHeight;\n            }\n        } else {\n            if (isTickLabelsVisible()) {\n                w = labelWidth;\n            }\n        }\n        if (edge == RectangleEdge.TOP) {\n            state.moveCursor(h + insets.getBottom(), RectangleEdge.TOP);\n        } else if (edge == RectangleEdge.BOTTOM) {\n            state.moveCursor(h + insets.getTop(), RectangleEdge.BOTTOM);\n        } else if (edge == RectangleEdge.LEFT) {\n            state.moveCursor(w + insets.getRight(), RectangleEdge.LEFT);\n        } else if (edge == RectangleEdge.RIGHT) {\n            state.moveCursor(w + insets.getLeft(), RectangleEdge.RIGHT);\n        }\n        return state;\n\n    }",
    "patch_diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..dcb912c 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1089,115 +1089,187 @@ public abstract class Axis implements Cloneable, Serializable {\n      *\n      * @return Information about the axis.\n      */\n-    protected AxisState drawLabel(String label, Graphics2D g2, \n-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n-            AxisState state, PlotRenderingInfo plotState) {\n-\n-        // it is unlikely that 'state' will be null, but check anyway...\n-        if (state == null) {\n-            throw new IllegalArgumentException(\"Null 'state' argument.\");\n-        }\n-        \n-        if ((label == null) || (label.equals(\"\"))) {\n-            return state;\n-        }\n-\n-        Font font = getLabelFont();\n-        RectangleInsets insets = getLabelInsets();\n-        g2.setFont(font);\n-        g2.setPaint(getLabelPaint());\n-        FontMetrics fm = g2.getFontMetrics();\n-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n-        Shape hotspot = null;\n-        \n-        if (edge == RectangleEdge.TOP) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() - insets.getBottom() \n-                    - h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.BOTTOM) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() + insets.getTop() \n-                    + h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.LEFT) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() - insets.getRight() \n-                    - w / 2.0);\n-            float labely = (float) dataArea.getCenterY();\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-        }\n-        else if (edge == RectangleEdge.RIGHT) {\n-\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() + Math.PI / 2.0, \n-                    labelBounds.getCenterX(), labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() \n-                            + insets.getLeft() + w / 2.0);\n-            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n-                    / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-\n-        }\n-        if (plotState != null && hotspot != null) {\n-            ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n-                if (entities != null) {\n-                    entities.add(new AxisLabelEntity(this, hotspot, \n-                            this.labelToolTip, this.labelURL));\n-                }\n-        }\n-        return state;\n-\n-    }\n+\n+protected AxisState drawLabel(String label, Graphics2D g2, \n+            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n+            AxisState state, PlotRenderingInfo plotState) {\n+\n+        if (state == null) {\n+            throw new IllegalArgumentException(\"Null 'state' argument.\");\n+        }\n+        \n+        if ((label == null) || (label.equals(\"\"))) {\n+            return state;\n+        }\n+\n+        Font font = getLabelFont();\n+        g2.setFont(font);\n+        Paint paint = getLabelPaint();\n+        g2.setPaint(paint);\n+        TextAnchor anchor = this.getLabelTextAnchor();\n+        RectangleInsets insets = this.getLabelInsets();\n+        float angle = getLabelAngle();\n+        double angleRadians = Math.toRadians(angle);\n+        double baselineOffset = 0.0;\n+        double labelWidth = 0.0;\n+        double labelHeight = 0.0;\n+        if (isVerticalLabel()) {\n+            labelWidth = this.getLabel().length();\n+            labelHeight = font.getLineMetrics(this.getLabel(), g2.getFontRenderContext())\n+                    .getHeight();\n+\n+        } else {\n+            FontMetrics fm = g2.getFontMetrics(font);\n+            Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n+            labelWidth = bounds.getWidth();\n+            labelHeight = bounds.getHeight();\n+            baselineOffset = calculateBaselineOffset(fm, anchor);\n+        }\n+        Insets labelInsets = insets.createInsetRectangle((float)labelHeight, \n+                (float) labelWidth);\n+        double[] transformed = {0.0, 0.0};\n+        int[] coords = {labelInsets.left, labelInsets.top};\n+        if (edge == RectangleEdge.TOP) {\n+            anchor = anchor.adjustTopwards(0.0);\n+            transformed = calculateAnchorPoint(labelWidth/2.0,\n+                    baselineOffset, dataArea, edge);\n+            coords[0] = (int) transformed[0];\n+            coords[1] = (int) transformed[1];\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            anchor = anchor.adjustBaselines(-labelInsets.bottom);\n+            transformed = calculateAnchorPoint(labelWidth / 2.0,\n+                    -baselineOffset + labelHeight, dataArea, edge);\n+            coords[0] = (int) transformed[0];\n+            coords[1] = (int) transformed[1];\n+        } else if (edge == RectangleEdge.LEFT) {\n+            anchor = anchor.adjustLeft(labelInsets.left);\n+            transformed = calculateAnchorPoint(baselineOffset, labelHeight / 2.0, \n+                    dataArea, edge);\n+            coords[0] = (int) transformed[0];\n+            coords[1] = (int) transformed[1];\n+        } else if (edge == RectangleEdge.RIGHT) {\n+            anchor = anchor.adjustRight(-labelInsets.right);\n+            transformed = calculateAnchorPoint(-baselineOffset + labelWidth, \n+                    labelHeight / 2.0, dataArea, edge);\n+            coords[0] = (int) transformed[0];\n+            coords[1] = (int) transformed[1];\n+        }\n+        Point2D anchorPoint = new Point2D.Double(coords[0], coords[1]);\n+        Point2D rotatedAnchorPoint = calculateLabelAnchorPoint(anchorPoint, angleRadians, transformed);\n+        g2.rotate(angleRadians, rotatedAnchorPoint.getX(), rotatedAnchorPoint.getY());\n+        if (isVerticalLabel()) {\n+            int length = label.length();\n+            float ystart = (float) anchorPoint.getY();\n+            if (edge == RectangleEdge.TOP) {\n+                ystart = (float) (ystart + labelWidth / 2.0);\n+            } else if (edge == RectangleEdge.BOTTOM) {\n+                ystart = (float) (ystart - labelWidth / 2.0);\n+            }\n+            for (int i = 0; i < length; i++) {\n+                AttributedString character = new AttributedString(label.substring(i, i + 1));\n+                character.addAttribute(TextAttribute.FONT, font);\n+                character.addAttribute(TextAttribute.FOREGROUND, paint);\n+                TextLayout tl = new TextLayout(character.getIterator(), \n+                        g2.getFontRenderContext());\n+                float ascent = tl.getAscent();\n+                Float descent = tl.getDescent();\n+                Shape shape = tl.getOutline(null);\n+                Rectangle2D charVisualBounds = shape.getBounds2D();\n+                Point2D pos;\n+                if (edge == RectangleEdge.TOP) {\n+                    pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(), \n+                            anchorPoint.getX() + charVisualBounds.getCenterY());\n+                } else if (edge == RectangleEdge.BOTTOM) {\n+                    pos = new Point2D.Double(ystart - charVisualBounds.getCenterX(), \n+                            anchorPoint.getY() - charVisualBounds.getCenterY());\n+                } else if (edge == RectangleEdge.LEFT) {\n+                    pos = new Point2D.Double(anchorPoint.getX() - charVisualBounds.getCenterY(), \n+                            ystart - charVisualBounds.getCenterX());\n+                } else {\n+                    pos = new Point2D.Double(anchorPoint.getX() + charVisualBounds.getCenterY(), \n+                            ystart - charVisualBounds.getCenterX());\n+                }\n+                g2.fill(shape);\n+            }\n+        } else {\n+            TextUtilities.drawAlignedString(label, g2, (float) anchorPoint.getX(), \n+                    (float) anchorPoint.getY(), anchor);\n+        }\n+        // g2.rotate(-angleRadians, rotatedAnchorPoint.getX(), rotatedAnchorPoint.getY());\n+\n+        if (this.isTickMarksVisible()) {\n+            double ol = this.getTickMarkOutsideLength();\n+            double il = this.getTickMarkInsideLength();\n+            float strokeWidth = this.getTickMarkStroke().floatValue();\n+            Line2D.Double mark = null;\n+            g2.setStroke(this.getTickMarkStroke());\n+            g2.setPaint(this.getTickMarkPaint());\n+            if (edge == RectangleEdge.TOP) {\n+                mark = new Line2D.Double(transformed[0], transformed[1],\n+                        transformed[0] + il, transformed[1]);\n+                g2.draw(mark);\n+                mark.setLine(transformed[0], transformed[1], transformed[0] - ol,\n+                        transformed[1]);\n+            } else if (edge == RectangleEdge.BOTTOM) {\n+                mark = new Line2D.Double(transformed[0], transformed[1],\n+                        transformed[0] + il, transformed[1]);\n+                g2.draw(mark);\n+                mark.setLine(transformed[0], transformed[1], transformed[0] \n+                        - ol, transformed[1]);\n+            } else if (edge == RectangleEdge.LEFT) {\n+                mark = new Line2D.Double(transformed[0], transformed[1],\n+                        transformed[0], transformed[1] + il);\n+                g2.draw(mark);\n+                mark.setLine(transformed[0], transformed[1], transformed[0], \n+                        transformed[1] - ol);\n+            } else if (edge == RectangleEdge.RIGHT) {\n+                mark = new Line2D.Double(transformed[0], transformed[1],\n+                        transformed[0], transformed[1] + il);\n+                g2.draw(mark);\n+                mark.setLine(transformed[0], transformed[1], transformed[0], \n+                        transformed[1] - ol);\n+            }\n+            g2.draw(mark);\n+        }\n+        if (plotState != null) {\n+            EntityCollection entities = plotState.getOwner().getEntityCollection();\n+            if (entities != null) {\n+                String tip = null;\n+                if (getToolTipText() != null) {\n+                    tip = getToolTipText();\n+                }\n+                String url = null;\n+                if (getURL() != null) {\n+                    url = getURL().toString();\n+                }\n+                entities.add(new TickLabelEntity(mark.getBounds2D(), this, tip, \n+                        url));\n+            }\n+        }\n+        // update the axis state for the label just drawn...\n+        double h = 0.0;\n+        double w = 0.0;\n+        if (isVerticalTickLabels()) {\n+            if (isTickLabelsVisible()) {\n+                h = labelHeight;\n+            }\n+        } else {\n+            if (isTickLabelsVisible()) {\n+                w = labelWidth;\n+            }\n+        }\n+        if (edge == RectangleEdge.TOP) {\n+            state.moveCursor(h + insets.getBottom(), RectangleEdge.TOP);\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            state.moveCursor(h + insets.getTop(), RectangleEdge.BOTTOM);\n+        } else if (edge == RectangleEdge.LEFT) {\n+            state.moveCursor(w + insets.getRight(), RectangleEdge.LEFT);\n+        } else if (edge == RectangleEdge.RIGHT) {\n+            state.moveCursor(w + insets.getLeft(), RectangleEdge.RIGHT);\n+        }\n+        return state;\n+\n+    }\n \n     /**\n      * Draws an axis line at the current cursor position and edge.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}