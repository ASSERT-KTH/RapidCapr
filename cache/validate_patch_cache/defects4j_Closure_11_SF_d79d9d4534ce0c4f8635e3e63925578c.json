{
    "patch": "public void getprop4() {\n    String[] propertyNames = {\"foo.bar\", \"bar.foo\"};\n    String[] warnings = new String[0];\n    Properties props = getProperties(propertyNames, warnings);\n    assertNotNull(props);\n    assertTrue(\"Foo.bar was not set\", props.containsKey(\"foo.bar\"));\n    assertTrue(\"Bar.foo was not set\", props.containsKey(\"bar.foo\"));\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2a4a560e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void getprop4() {\n+    String[] propertyNames = {\"foo.bar\", \"bar.foo\"};\n+    String[] warnings = new String[0];\n+    Properties props = getProperties(propertyNames, warnings);\n+    assertNotNull(props);\n+    assertTrue(\"Foo.bar was not set\", props.containsKey(\"foo.bar\"));\n+    assertTrue(\"Bar.foo was not set\", props.containsKey(\"bar.foo\"));\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}