{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        switch (child.getToken()) {\n          case STRING:\n          case GET:\n          case SET:\n            Property prop = getProperty(name);\n\n            if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n              if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(\n                    JSError.make(\n                        t.getSourceName(),\n                        child,\n                        propertiesToErrorFor.get(name),\n                        Warnings.INVALIDATION,\n                        name,\n                        type == null ? \"null\" : type.toString(),\n                        n.toString(),\n                        \"\"));\n              }\n            }\n            break;\n\n          default:\n            throw new IllegalStateException(\n                \"Unexpected node type in object literal: \" + child.toString());\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..53e669a2 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,39 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        switch (child.getToken()) {\n+          case STRING:\n+          case GET:\n+          case SET:\n+            Property prop = getProperty(name);\n+\n+            if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+              if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(\n+                    JSError.make(\n+                        t.getSourceName(),\n+                        child,\n+                        propertiesToErrorFor.get(name),\n+                        Warnings.INVALIDATION,\n+                        name,\n+                        type == null ? \"null\" : type.toString(),\n+                        n.toString(),\n+                        \"\"));\n+              }\n+            }\n+            break;\n+\n+          default:\n+            throw new IllegalStateException(\n+                \"Unexpected node type in object literal: \" + child.toString());\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}