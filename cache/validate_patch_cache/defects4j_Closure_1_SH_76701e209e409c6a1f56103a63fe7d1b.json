{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Track the first seen default parameter.\n    // If a parameter is seen without a default value after a parameter with a default value\n    // it isn't removable.\n    Node firstDefaultParameter = null;\n\n    // Strip unreferenced args off the end of the function declaration.\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (arg.hasChildren()) {\n        firstDefaultParameter = arg;\n      }\n      if (!referenced.contains(var)) {\n        // Don't remove: ES6 rest parameter: `function f(a, ...rest){}`\n        if (arg.isName() && arg.getNext() == null && arg.getString().equals(\"...rest\")) {\n          continue;\n        }\n        // Don't remove: default initialization\n        if (arg.hasChildren()) {\n          continue;\n        }\n        // Don't remove: deeper defaults\n        if (arg == firstDefaultParameter) {\n          break;\n        }\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4a446063 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Track the first seen default parameter.\n+    // If a parameter is seen without a default value after a parameter with a default value\n+    // it isn't removable.\n+    Node firstDefaultParameter = null;\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (arg.hasChildren()) {\n+        firstDefaultParameter = arg;\n+      }\n+      if (!referenced.contains(var)) {\n+        // Don't remove: ES6 rest parameter: `function f(a, ...rest){}`\n+        if (arg.isName() && arg.getNext() == null && arg.getString().equals(\"...rest\")) {\n+          continue;\n+        }\n+        // Don't remove: default initialization\n+        if (arg.hasChildren()) {\n+          continue;\n+        }\n+        // Don't remove: deeper defaults\n+        if (arg == firstDefaultParameter) {\n+          break;\n+        }\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}