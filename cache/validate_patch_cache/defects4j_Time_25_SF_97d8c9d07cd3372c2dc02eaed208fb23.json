{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    int initialOffset = getOffset(instantLocal);\n\n    // check if instantLocal is within a transition\n    long previousTransition = previousTransition(instantLocal);\n    int prevOffset = getOffset(previousTransition);\n    if (prevOffset != initialOffset) {\n        // instantLocal is in a DST gap or overlap, adjust it to the nearest end\n        long nextTransition = nextTransition(instantLocal);\n        int nextOffset = getOffset(nextTransition);\n        if (prevOffset > nextOffset) {\n            // gap, move forward to the end of the gap\n            long gapEnd = previousTransition + prevOffset;\n            if (instantLocal < gapEnd) {\n                instantLocal = gapEnd;\n            }\n        } else {\n            // overlap, move back to the end of the overlap\n            long overlapEnd = nextTransition + nextOffset;\n            if (instantLocal >= overlapEnd) {\n                instantLocal = overlapEnd - 1;\n            }\n        }\n    }\n\n    // iteratively adjust the offset estimate until it is stable\n    int offsetAdjusted = initialOffset;\n    while (true) {\n        long prevAdjustment = offsetAdjusted * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAdjusted = instantLocal - prevAdjustment;\n        int nextOffset = getOffset(instantAdjusted);\n\n        if (nextOffset == offsetAdjusted) {\n            // offset estimate has stabilized, return it\n            break;\n        }\n\n        // adjust the estimate and try again\n        offsetAdjusted = nextOffset;\n    }\n\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..23a837af 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // check if instantLocal is within a transition\n+    long previousTransition = previousTransition(instantLocal);\n+    int prevOffset = getOffset(previousTransition);\n+    if (prevOffset != initialOffset) {\n+        // instantLocal is in a DST gap or overlap, adjust it to the nearest end\n+        long nextTransition = nextTransition(instantLocal);\n+        int nextOffset = getOffset(nextTransition);\n+        if (prevOffset > nextOffset) {\n+            // gap, move forward to the end of the gap\n+            long gapEnd = previousTransition + prevOffset;\n+            if (instantLocal < gapEnd) {\n+                instantLocal = gapEnd;\n+            }\n+        } else {\n+            // overlap, move back to the end of the overlap\n+            long overlapEnd = nextTransition + nextOffset;\n+            if (instantLocal >= overlapEnd) {\n+                instantLocal = overlapEnd - 1;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    // iteratively adjust the offset estimate until it is stable\n+    int offsetAdjusted = initialOffset;\n+    while (true) {\n+        long prevAdjustment = offsetAdjusted * DateTimeConstants.MILLIS_PER_HOUR;\n+        long instantAdjusted = instantLocal - prevAdjustment;\n+        int nextOffset = getOffset(instantAdjusted);\n+\n+        if (nextOffset == offsetAdjusted) {\n+            // offset estimate has stabilized, return it\n+            break;\n+        }\n+\n+        // adjust the estimate and try again\n+        offsetAdjusted = nextOffset;\n+    }\n+\n+    return offsetAdjusted;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}