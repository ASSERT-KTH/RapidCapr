{
    "patch": "public class EventStateComparator implements Comparator<EventState> {\n    private final int orderingSign;\n\n    public EventStateComparator(final int orderingSign) {\n        this.orderingSign = orderingSign;\n    }\n\n    /**\n     * Compares the event times of two {@link EventState}s.\n     *\n     * @param es0 first event state to compare\n     * @param es1 second event state to compare\n     * @return -1 if es0 has an earlier event time than es1 multiplied by the orderingSign;\n     *         0 if the event times are equal;\n     *         1 if es0 has a later event time than es1 multiplied by the orderingSign\n     */\n    @Override\n    public int compare(final EventState es0, final EventState es1) {\n        final double timeDifference = es0.getEventTime() - es1.getEventTime();\n        if (timeDifference < 0) {\n            return -orderingSign;\n        } else if (timeDifference > 0) {\n            return orderingSign;\n        } else {\n            return 0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..6d5fdb33e 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,34 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+public class EventStateComparator implements Comparator<EventState> {\n+    private final int orderingSign;\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+    public EventStateComparator(final int orderingSign) {\n+        this.orderingSign = orderingSign;\n+    }\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+    /**\n+     * Compares the event times of two {@link EventState}s.\n+     *\n+     * @param es0 first event state to compare\n+     * @param es1 second event state to compare\n+     * @return -1 if es0 has an earlier event time than es1 multiplied by the orderingSign;\n+     *         0 if the event times are equal;\n+     *         1 if es0 has a later event time than es1 multiplied by the orderingSign\n+     */\n+    @Override\n+    public int compare(final EventState es0, final EventState es1) {\n+        final double timeDifference = es0.getEventTime() - es1.getEventTime();\n+        if (timeDifference < 0) {\n+            return -orderingSign;\n+        } else if (timeDifference > 0) {\n+            return orderingSign;\n+        } else {\n+            return 0;\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}