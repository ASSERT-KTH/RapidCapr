{
    "patch": "    List<Node> argsToRemove = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        argsToRemove.add(arg);\n      } else if (!argsToRemove.isEmpty()) {\n        // We found a referenced argument after some we want to remove so we bail since these\n        // unreferenced arguments are not all in a contiguous group at the end of the list.\n        // This is a rare case that will mostly occur when externs are used.\n        return;\n      }\n    }\n\n    for (Node argToRemove : argsToRemove) {\n      argList.removeChild(argToRemove);\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..02a4119c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> argsToRemove = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        argsToRemove.add(arg);\n+      } else if (!argsToRemove.isEmpty()) {\n+        // We found a referenced argument after some we want to remove so we bail since these\n+        // unreferenced arguments are not all in a contiguous group at the end of the list.\n+        // This is a rare case that will mostly occur when externs are used.\n+        return;\n+      }\n+    }\n+\n+    for (Node argToRemove : argsToRemove) {\n+      argList.removeChild(argToRemove);\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}