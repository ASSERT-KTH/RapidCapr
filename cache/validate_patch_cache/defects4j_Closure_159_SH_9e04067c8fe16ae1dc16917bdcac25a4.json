{
    "patch": "if(node.getType() == Token.CALL && node.getFirstChild() != null) {\n  Node child = node.getFirstChild();\n  if(child.getType() == Token.NAME) {\n    String functionName = child.getString();\n    if(functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n      changed.add(functionName);\n    }\n  } else if (child.getType() == Token.GETPROP && child.getFirstChild() != null &&\n             child.getFirstChild().getType() == Token.NAME) {\n    // getfoo().bar()\n    String functionName = child.getFirstChild().getString();\n    if(functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n      changed.add(functionName);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..69eb2776 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,22 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if(node.getType() == Token.CALL && node.getFirstChild() != null) {\n+  Node child = node.getFirstChild();\n+  if(child.getType() == Token.NAME) {\n+    String functionName = child.getString();\n+    if(functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n+      changed.add(functionName);\n+    }\n+  } else if (child.getType() == Token.GETPROP && child.getFirstChild() != null &&\n+             child.getFirstChild().getType() == Token.NAME) {\n+    // getfoo().bar()\n+    String functionName = child.getFirstChild().getString();\n+    if(functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n+      changed.add(functionName);\n+    }\n+  }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}