{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Remove any leading and trailing whitespaces from the string\n    str = str.trim();\n\n    // Handle hexadecimal numbers\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    // Check for consecutive dashes\n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n\n    // Initialize variables for mantissa, decimal and exponent\n    String mantissa;\n    String decimal = null;\n    String exponent = null;\n\n    // Find the position of decimal point and exponent if present\n    int decimalPos = str.indexOf('.');\n    int exponentPos = str.indexOf('e');\n\n    if (exponentPos == -1) {\n        exponentPos = str.indexOf('E');\n    }\n\n    // If decimal point is present\n    if (decimalPos != -1) {\n        // If exponent is present\n        if (exponentPos != -1) {\n            // Check if decimal point comes after exponent\n            if (decimalPos > exponentPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            } else {\n                decimal = str.substring(decimalPos + 1, exponentPos);\n            }\n        } else {\n            decimal = str.substring(decimalPos + 1);\n        }\n        mantissa = str.substring(0, decimalPos);\n    } else {\n        // If exponent is present\n        if (exponentPos != -1) {\n            mantissa = str.substring(0, exponentPos);\n        } else {\n            mantissa = str;\n        }\n    }\n\n    // If exponent is present\n    if (exponentPos != -1) {\n        exponent = str.substring(exponentPos + 1);\n    }\n\n    // If the last character is not a digit or a decimal point\n    char lastChar = str.charAt(str.length() - 1);\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // Requesting a specific type..\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (decimal == null && exponent == null && (numeric.charAt(0) == '-'\n                        && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                } else {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            case 'f':\n            case 'F':\n                try {\n                    float floatValue = Float.parseFloat(numeric);\n                    if (!(Float.isInfinite(floatValue) || (floatValue == 0.0F && !allZeros))) {\n                        return floatValue;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            case 'd':\n            case 'D':\n                try {\n                    double doubleValue = Double.parseDouble(numeric);\n                    if (!(Double.isInfinite(doubleValue) || (doubleValue == 0.0D && !allZeros))) {\n                        return doubleValue;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        // User doesn't have a preference on the return type, so let's start\n        // small and go from there...\n        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n        if (decimal == null && exponent == null) {\n            // Must be an int, long, or BigInteger\n            try {\n                return createInteger(mantissa);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createLong(mantissa);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            return createBigInteger(mantissa);\n        } else {\n            // Must be a float, double, or BigDecimal\n            try {\n                float floatValue = Float.parseFloat(str);\n                if (!(Float.isInfinite(floatValue) || (floatValue == 0.0F && !allZeros))) {\n                    return floatValue;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                double doubleValue = Double.parseDouble(str);\n                if (!(Double.isInfinite(doubleValue) || (doubleValue == 0.0D && !allZeros))) {\n                    return doubleValue;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createBigDecimal(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n        }\n    }\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..88a8c93c 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,161 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n \n-        if (decPos > -1) {\n+    // Remove any leading and trailing whitespaces from the string\n+    str = str.trim();\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n+    // Handle hexadecimal numbers\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+\n+    // Check for consecutive dashes\n+    if (str.startsWith(\"--\")) {\n+        return null;\n+    }\n+\n+    // Initialize variables for mantissa, decimal and exponent\n+    String mantissa;\n+    String decimal = null;\n+    String exponent = null;\n+\n+    // Find the position of decimal point and exponent if present\n+    int decimalPos = str.indexOf('.');\n+    int exponentPos = str.indexOf('e');\n+\n+    if (exponentPos == -1) {\n+        exponentPos = str.indexOf('E');\n+    }\n+\n+    // If decimal point is present\n+    if (decimalPos != -1) {\n+        // If exponent is present\n+        if (exponentPos != -1) {\n+            // Check if decimal point comes after exponent\n+            if (decimalPos > exponentPos) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             } else {\n-                dec = str.substring(decPos + 1);\n+                decimal = str.substring(decimalPos + 1, exponentPos);\n             }\n-            mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+            decimal = str.substring(decimalPos + 1);\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+        mantissa = str.substring(0, decimalPos);\n+    } else {\n+        // If exponent is present\n+        if (exponentPos != -1) {\n+            mantissa = str.substring(0, exponentPos);\n+        } else {\n+            mantissa = str;\n+        }\n+    }\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+    // If exponent is present\n+    if (exponentPos != -1) {\n+        exponent = str.substring(exponentPos + 1);\n+    }\n \n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n+    // If the last character is not a digit or a decimal point\n+    char lastChar = str.charAt(str.length() - 1);\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        // Requesting a specific type..\n+        String numeric = str.substring(0, str.length() - 1);\n+        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n+        switch (lastChar) {\n+            case 'l':\n+            case 'L':\n+                if (decimal == null && exponent == null && (numeric.charAt(0) == '-'\n+                        && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n+                        return createLong(numeric);\n                     } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n+                        return createBigInteger(numeric);\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n+                } else {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n                 }\n+            case 'f':\n+            case 'F':\n                 try {\n-                    return createLong(str);\n+                    float floatValue = Float.parseFloat(numeric);\n+                    if (!(Float.isInfinite(floatValue) || (floatValue == 0.0F && !allZeros))) {\n+                        return floatValue;\n+                    }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                //$FALL-THROUGH$\n+            case 'd':\n+            case 'D':\n                 try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                    double doubleValue = Double.parseDouble(numeric);\n+                    if (!(Double.isInfinite(doubleValue) || (doubleValue == 0.0D && !allZeros))) {\n+                        return doubleValue;\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n                 try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n+                    return createBigDecimal(numeric);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-\n+                //$FALL-THROUGH$\n+            default:\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+    } else {\n+        // User doesn't have a preference on the return type, so let's start\n+        // small and go from there...\n+        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n+        if (decimal == null && exponent == null) {\n+            // Must be an int, long, or BigInteger\n+            try {\n+                return createInteger(mantissa);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            try {\n+                return createLong(mantissa);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            return createBigInteger(mantissa);\n+        } else {\n+            // Must be a float, double, or BigDecimal\n+            try {\n+                float floatValue = Float.parseFloat(str);\n+                if (!(Float.isInfinite(floatValue) || (floatValue == 0.0F && !allZeros))) {\n+                    return floatValue;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            try {\n+                double doubleValue = Double.parseDouble(str);\n+                if (!(Double.isInfinite(doubleValue) || (doubleValue == 0.0D && !allZeros))) {\n+                    return doubleValue;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            try {\n                 return createBigDecimal(str);\n-\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n             }\n         }\n     }\n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "junit.framework.AssertionFailedError: isNumber(String)/createNumber(String) 23 Neg failed",
    "test_result": "FAIL"
}