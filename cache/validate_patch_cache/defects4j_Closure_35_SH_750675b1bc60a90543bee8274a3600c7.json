{
    "patch": "// Infilled hunk\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasOwnProperty(prop)) {\n            objType.defineDeclaredProperty(\n                prop, propType.isUnknownType() ? getNativeType(UNKNOWN_TYPE) : propType, null);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..12449a38 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,18 +1118,15 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+// Infilled hunk\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!objType.hasOwnProperty(prop)) {\n+            objType.defineDeclaredProperty(\n+                prop, propType.isUnknownType() ? getNativeType(UNKNOWN_TYPE) : propType, null);\n           }\n         }\n       }",
    "result_reason": "junit.framework.AssertionFailedError: expected a warning",
    "test_result": "FAIL"
}