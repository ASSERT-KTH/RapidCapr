{
    "patch": "public <T> void resetMock(T mock) {\n    try {\n        PowerMockito.verifyPrivate(mock, \"getCallbacks\").invoke();\n        Field field = CGLIB$CALLBACKS_FIELD.get(mock);\n        Callback[] callbacks = (Callback[]) field.get(mock);\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                MockHandler<T> oldMockHandler = ((MethodInterceptorFilter) callbacks[i]).getMockHandler();\n                Callback newFilter = new MethodInterceptorFilter(new MockHandler<T>(oldMockHandler),\n                        (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(\n                                org.mockito.Mockito.RETURNS_DEFAULTS));\n                callbacks[i] = newFilter;\n                field.set(mock, callbacks);\n            }\n        }\n    } catch (Exception e) {\n        throw new AssertionError(\n                \"Failed to reset mock \" + mock.toString() + \": \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..aac30e614 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    try {\n+        PowerMockito.verifyPrivate(mock, \"getCallbacks\").invoke();\n+        Field field = CGLIB$CALLBACKS_FIELD.get(mock);\n+        Callback[] callbacks = (Callback[]) field.get(mock);\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                MockHandler<T> oldMockHandler = ((MethodInterceptorFilter) callbacks[i]).getMockHandler();\n+                Callback newFilter = new MethodInterceptorFilter(new MockHandler<T>(oldMockHandler),\n+                        (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(\n+                                org.mockito.Mockito.RETURNS_DEFAULTS));\n+                callbacks[i] = newFilter;\n+                field.set(mock, callbacks);\n+            }\n+        }\n+    } catch (Exception e) {\n+        throw new AssertionError(\n+                \"Failed to reset mock \" + mock.toString() + \": \" + e.getMessage());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}