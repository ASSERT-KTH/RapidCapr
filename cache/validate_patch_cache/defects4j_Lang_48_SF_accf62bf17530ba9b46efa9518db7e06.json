{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        isEquals = lhs.equals(rhs); // Non array\n    } else if (lhs.getClass() != rhs.getClass()) {\n        this.setEquals(false); // Different array types\n        return this;\n    } else if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else if (lhs.getClass().getComponentType().isPrimitive()) {\n        // Handle one dimensional array of primitives\n        if (lhs instanceof long[]) {\n            this.append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            this.append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            this.append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            this.append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            this.append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            this.append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            this.append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            this.append((boolean[]) lhs, (boolean[]) rhs);\n        }\n    } else {\n        this.append((Object[]) lhs, (Object[]) rhs); // One dimensional array of non-primitives\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..3a3d2bba 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,63 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        isEquals = lhs.equals(rhs); // Non array\n+    } else if (lhs.getClass() != rhs.getClass()) {\n+        this.setEquals(false); // Different array types\n+        return this;\n+    } else if (lhs instanceof long[]) {\n+        append((long[]) lhs, (long[]) rhs);\n+    } else if (lhs instanceof int[]) {\n+        append((int[]) lhs, (int[]) rhs);\n+    } else if (lhs instanceof short[]) {\n+        append((short[]) lhs, (short[]) rhs);\n+    } else if (lhs instanceof char[]) {\n+        append((char[]) lhs, (char[]) rhs);\n+    } else if (lhs instanceof byte[]) {\n+        append((byte[]) lhs, (byte[]) rhs);\n+    } else if (lhs instanceof double[]) {\n+        append((double[]) lhs, (double[]) rhs);\n+    } else if (lhs instanceof float[]) {\n+        append((float[]) lhs, (float[]) rhs);\n+    } else if (lhs instanceof boolean[]) {\n+        append((boolean[]) lhs, (boolean[]) rhs);\n+    } else if (lhs.getClass().getComponentType().isPrimitive()) {\n+        // Handle one dimensional array of primitives\n+        if (lhs instanceof long[]) {\n+            this.append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n+            this.append((int[]) lhs, (int[]) rhs);\n         } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n+            this.append((short[]) lhs, (short[]) rhs);\n         } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n+            this.append((char[]) lhs, (char[]) rhs);\n         } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n+            this.append((byte[]) lhs, (byte[]) rhs);\n         } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n+            this.append((double[]) lhs, (double[]) rhs);\n         } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n+            this.append((float[]) lhs, (float[]) rhs);\n         } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            this.append((boolean[]) lhs, (boolean[]) rhs);\n         }\n-        return this;\n+    } else {\n+        this.append((Object[]) lhs, (Object[]) rhs); // One dimensional array of non-primitives\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}