{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long millisAtOffsetLocal = instantLocal + offsetLocal;\n    final int offsetAdjusted = getOffset(millisAtOffsetLocal);\n    if (offsetLocal == offsetAdjusted) {\n        return offsetLocal;\n    }\n\n    // We must be near a DST boundary.\n    // If the difference in offsets is greater than an hour then\n    // we have a gap or overlap and the local time is ambiguous.\n    if (offsetAdjusted - offsetLocal > DateTimeConstants.MILLIS_PER_HOUR ||\n            isCutover(instantLocal + offsetLocal, offsetLocal, offsetAdjusted)) {\n        throw new IllegalInstantException(\n            \"Illegal instant due to \" + (offsetLocal > offsetAdjusted ? \"transition \" : \"gap \") +\n            \"time zone offset change: \" + new Instant(instantLocal));\n    }\n\n    return offsetAdjusted;\n}\n\nprivate boolean isCutover(long instant, int offsetBefore, int offsetAfter) {\n    if (offsetAfter > offsetBefore) { // Gap\n        final long nextTransition = nextTransition(instant);\n        return nextTransition > instant && nextTransition + offsetAfter < instant + offsetBefore;\n    } else { // Overlap\n        final long previousTransition = previousTransition(instant);\n        return instant >= previousTransition + offsetBefore &&\n                previousTransition + offsetBefore < nextTransition(instant + offsetAfter);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..905a21c9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+    final long millisAtOffsetLocal = instantLocal + offsetLocal;\n+    final int offsetAdjusted = getOffset(millisAtOffsetLocal);\n+    if (offsetLocal == offsetAdjusted) {\n+        return offsetLocal;\n     }\n \n+    // We must be near a DST boundary.\n+    // If the difference in offsets is greater than an hour then\n+    // we have a gap or overlap and the local time is ambiguous.\n+    if (offsetAdjusted - offsetLocal > DateTimeConstants.MILLIS_PER_HOUR ||\n+            isCutover(instantLocal + offsetLocal, offsetLocal, offsetAdjusted)) {\n+        throw new IllegalInstantException(\n+            \"Illegal instant due to \" + (offsetLocal > offsetAdjusted ? \"transition \" : \"gap \") +\n+            \"time zone offset change: \" + new Instant(instantLocal));\n+    }\n+\n+    return offsetAdjusted;\n+}\n+\n+private boolean isCutover(long instant, int offsetBefore, int offsetAfter) {\n+    if (offsetAfter > offsetBefore) { // Gap\n+        final long nextTransition = nextTransition(instant);\n+        return nextTransition > instant && nextTransition + offsetAfter < instant + offsetBefore;\n+    } else { // Overlap\n+        final long previousTransition = previousTransition(instant);\n+        return instant >= previousTransition + offsetBefore &&\n+                previousTransition + offsetBefore < nextTransition(instant + offsetAfter);\n+    }\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}