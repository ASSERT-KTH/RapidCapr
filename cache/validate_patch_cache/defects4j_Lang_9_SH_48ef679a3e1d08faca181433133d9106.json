{
    "patch": "boolean currentFieldAdded = false;\nboolean nextFieldAdded = false;\n\nif (currentStrategy != null) {\n    currentFieldAdded = currentStrategy.addRegex(this, regex);\n    if (currentFieldAdded) {\n        collector.add(currentStrategy);\n    }\n    while (nextStrategy != null) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if (!patternMatcher.lookingAt()) {\n            break;\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n        nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if (nextStrategy != null) {\n            nextFieldAdded = nextStrategy.addRegex(this, regex);\n            if (nextFieldAdded) {\n                collector.add(nextStrategy);\n            }\n        }\n    }\n} else {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\nif (collector.isEmpty() || !currentFieldAdded) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n} else {\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..9b4cd95a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,41 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean currentFieldAdded = false;\n+boolean nextFieldAdded = false;\n+\n+if (currentStrategy != null) {\n+    currentFieldAdded = currentStrategy.addRegex(this, regex);\n+    if (currentFieldAdded) {\n+        collector.add(currentStrategy);\n+    }\n+    while (nextStrategy != null) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if (!patternMatcher.lookingAt()) {\n+            break;\n+        }\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n+        nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if (nextStrategy != null) {\n+            nextFieldAdded = nextStrategy.addRegex(this, regex);\n+            if (nextFieldAdded) {\n+                collector.add(nextStrategy);\n+            }\n+        }\n+    }\n+} else {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+if (collector.isEmpty() || !currentFieldAdded) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+} else {\n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}