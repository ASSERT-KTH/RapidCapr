{
    "patch": "        // getOutEdges on null will throw an NPE, so check for null first.\n        if (block.getSuccessors() != null) {\n          for (Node successor : block.getSuccessors()) {\n            if (successor.getParent().isLoop) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..aff552d8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // getOutEdges on null will throw an NPE, so check for null first.\n+        if (block.getSuccessors() != null) {\n+          for (Node successor : block.getSuccessors()) {\n+            if (successor.getParent().isLoop) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}