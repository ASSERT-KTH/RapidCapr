{
    "patch": "public static double getTypedPercent(String js) {\n    int total = 0;\n    int typed = 0;\n    boolean inString = false;\n    for (int i = 0; i < js.length(); i++) {\n        char c = js.charAt(i);\n        if (c == '\\'' || c == '\\\"') {\n            inString = !inString;\n        } else if (!inString) {\n            if (c == '{' || c == '[') {\n                total++;\n            } else if (c == ':' && i > 0 && js.charAt(i - 1) != ':') {\n                typed++;\n                total++;\n            } else if (c == ',' && i > 0 && js.charAt(i - 1) != ':' && js.charAt(i - 1) != ',') {\n                total++;\n            } else if (c == '}' || c == ']') {\n                total++;\n            }\n        }\n    }\n    if (total == 0) {\n        return 100.0;\n    } else {\n        return ((double) typed / total) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7d173f8c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int total = 0;\n+    int typed = 0;\n+    boolean inString = false;\n+    for (int i = 0; i < js.length(); i++) {\n+        char c = js.charAt(i);\n+        if (c == '\\'' || c == '\\\"') {\n+            inString = !inString;\n+        } else if (!inString) {\n+            if (c == '{' || c == '[') {\n+                total++;\n+            } else if (c == ':' && i > 0 && js.charAt(i - 1) != ':') {\n+                typed++;\n+                total++;\n+            } else if (c == ',' && i > 0 && js.charAt(i - 1) != ':' && js.charAt(i - 1) != ',') {\n+                total++;\n+            } else if (c == '}' || c == ']') {\n+                total++;\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 100.0;\n+    } else {\n+        return ((double) typed / total) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}