{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double eps = 10e-15;\n    double gln = gammln(a);\n    double b = x + 1.0 - a;\n    double c = 1.0 / eps;\n    double d = 1.0 / b;\n    double h = d;\n    double an, del;\n    for (int i = 1; i <= 1000; i++) {\n        an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < eps) {\n            d = eps;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < eps) {\n            c = eps;\n        }\n        d = 1.0 / d;\n        del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < eps) {\n            break;\n        }\n    }\n    return Math.exp(-x + a * Math.log(x) - gln) * h;\n}\n\npublic static void assertEquals(double expected, double actual, double delta) {\n    if (Math.abs(expected - actual) > delta) {\n        throw new AssertionError(\"Expected \" + expected + \" but was \" + actual);\n    }\n}\n\npublic static double gammln(double xx) {\n    double x, y, tmp, ser;\n    final double[] cof = { 57.1562356658629235, -59.5979603554754912, 14.1360979747417471, -0.491913816097620199, .339946499848118887e-4, .465236289270485756e-4, -.983744753048795646e-4, .158088703224912494e-3, -.210264441724104883e-3, .217439618115212643e-3, -.164318106536763890e-3, .844182239838527433e-4, -.261908384015814087e-4, .368991826595316234e-5 };\n    y = x = xx;\n    tmp = x + 5.24218750000000000;\n    tmp = (x + 0.5) * Math.log(tmp) - tmp;\n    ser = 0.999999999999997092;\n    for (int j = 0; j < 14; j++) {\n        ser += cof[j] / ++y;\n    }\n    return tmp + Math.log(2.5066282746310005 * ser / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..cdb4e9a22 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,53 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 10e-15;\n+    double gln = gammln(a);\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / eps;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an, del;\n+    for (int i = 1; i <= 1000; i++) {\n+        an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < eps) {\n+            d = eps;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < eps) {\n+            c = eps;\n+        }\n+        d = 1.0 / d;\n+        del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < eps) {\n+            break;\n+        }\n+    }\n+    return Math.exp(-x + a * Math.log(x) - gln) * h;\n+}\n+\n+public static void assertEquals(double expected, double actual, double delta) {\n+    if (Math.abs(expected - actual) > delta) {\n+        throw new AssertionError(\"Expected \" + expected + \" but was \" + actual);\n+    }\n+}\n+\n+public static double gammln(double xx) {\n+    double x, y, tmp, ser;\n+    final double[] cof = { 57.1562356658629235, -59.5979603554754912, 14.1360979747417471, -0.491913816097620199, .339946499848118887e-4, .465236289270485756e-4, -.983744753048795646e-4, .158088703224912494e-3, -.210264441724104883e-3, .217439618115212643e-3, -.164318106536763890e-3, .844182239838527433e-4, -.261908384015814087e-4, .368991826595316234e-5 };\n+    y = x = xx;\n+    tmp = x + 5.24218750000000000;\n+    tmp = (x + 0.5) * Math.log(tmp) - tmp;\n+    ser = 0.999999999999997092;\n+    for (int j = 0; j < 14; j++) {\n+        ser += cof[j] / ++y;\n+    }\n+    return tmp + Math.log(2.5066282746310005 * ser / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}