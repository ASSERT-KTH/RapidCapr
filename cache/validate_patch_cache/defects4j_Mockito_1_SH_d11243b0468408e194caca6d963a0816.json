{
    "patch": "            Object[] varargsArr = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + 1);\n            if (varargsArr.length != 0) {\n                Object vararg = varargsArr[0];\n                if (vararg.getClass().isArray()) {\n                    for (int i = 0; i < Array.getLength(vararg); i++) {\n                        for (int j = 0; j < matchers.size() - 1; j++) {\n                            Matcher m = matchers.get(j);\n                            if (m instanceof CapturesArguments) {\n                                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(j, Object.class));\n                            }\n                        }\n                    }\n                    Matcher m = matchers.get(matchers.size() - 1);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(varargsArr[0]);\n                    } else {\n                        throw new UnsupportedOperationException();\n                    }\n                } else {\n                    for (int j = 0; j < matchers.size() - 1; j++) {\n                        Matcher m = matchers.get(j);\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(j, Object.class));\n                        }\n                    }\n                    Matcher m = matchers.get(matchers.size() - 1);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(varargsArr[0]);\n                    } else {\n                        throw new UnsupportedOperationException();\n                    }\n                }\n            } else {\n                throw new UnsupportedOperationException();\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..2e6379079 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,41 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] varargsArr = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + 1);\n+            if (varargsArr.length != 0) {\n+                Object vararg = varargsArr[0];\n+                if (vararg.getClass().isArray()) {\n+                    for (int i = 0; i < Array.getLength(vararg); i++) {\n+                        for (int j = 0; j < matchers.size() - 1; j++) {\n+                            Matcher m = matchers.get(j);\n+                            if (m instanceof CapturesArguments) {\n+                                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(j, Object.class));\n+                            }\n+                        }\n+                    }\n+                    Matcher m = matchers.get(matchers.size() - 1);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(varargsArr[0]);\n+                    } else {\n+                        throw new UnsupportedOperationException();\n+                    }\n+                } else {\n+                    for (int j = 0; j < matchers.size() - 1; j++) {\n+                        Matcher m = matchers.get(j);\n+                        if (m instanceof CapturesArguments) {\n+                            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(j, Object.class));\n+                        }\n+                    }\n+                    Matcher m = matchers.get(matchers.size() - 1);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(varargsArr[0]);\n+                    } else {\n+                        throw new UnsupportedOperationException();\n+                    }\n+                }\n+            } else {\n+                throw new UnsupportedOperationException();\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}