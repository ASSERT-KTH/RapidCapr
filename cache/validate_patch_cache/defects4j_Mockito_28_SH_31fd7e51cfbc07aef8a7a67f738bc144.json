{
    "patch": "public static void injectMockCandidateIntoField(Object mockCandidate, Field field, Object fieldInstance) throws IllegalAccessException {\n    field.setAccessible(true);\n    Object oldValue = field.get(fieldInstance);\n    field.set(fieldInstance, mockCandidate);\n    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n        innerField.setAccessible(true);\n        if (innerField.get(mockCandidate) == oldValue) {\n            Object innerMockCandidate = DependencyInjectionUtils.mockCandidateFilter.filterCandidate(DependencyInjectionUtils.mocks, innerField, mockCandidate).thenInject();\n            if (innerMockCandidate != null) {\n                injectMockCandidateIntoField(innerMockCandidate, innerField, mockCandidate);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..a407cb1fc 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,23 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+public static void injectMockCandidateIntoField(Object mockCandidate, Field field, Object fieldInstance) throws IllegalAccessException {\n+    field.setAccessible(true);\n+    Object oldValue = field.get(fieldInstance);\n+    field.set(fieldInstance, mockCandidate);\n+    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+        innerField.setAccessible(true);\n+        if (innerField.get(mockCandidate) == oldValue) {\n+            Object innerMockCandidate = DependencyInjectionUtils.mockCandidateFilter.filterCandidate(DependencyInjectionUtils.mocks, innerField, mockCandidate).thenInject();\n+            if (innerMockCandidate != null) {\n+                injectMockCandidateIntoField(innerMockCandidate, innerField, mockCandidate);\n+            }\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}