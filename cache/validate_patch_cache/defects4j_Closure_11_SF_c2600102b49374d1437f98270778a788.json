{
    "patch": "public static String getprop(String key) throws IOException {\n    Process process = Runtime.getRuntime().exec(new String[] {\"getprop\", key});\n    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    StringBuilder output = new StringBuilder();\n    String line;\n    while ((line = reader.readLine()) != null) {\n        output.append(line);\n    }\n    process.waitFor();\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..843c5fe8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String key) throws IOException {\n+    Process process = Runtime.getRuntime().exec(new String[] {\"getprop\", key});\n+    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+    StringBuilder output = new StringBuilder();\n+    String line;\n+    while ((line = reader.readLine()) != null) {\n+        output.append(line);\n+    }\n+    process.waitFor();\n+    return output.toString();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}