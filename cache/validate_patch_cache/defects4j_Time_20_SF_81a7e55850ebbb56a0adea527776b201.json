{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        int index = str.indexOf(id);\n        if (index == 0) {\n            // Check if the next character is a whitespace or a forward slash\n            int len = id.length();\n            char nextChar = str.length() > len ? str.charAt(len) : ' ';\n            if (nextChar == ' ' || nextChar == '/') {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + len;\n            }\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..3684b6c4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,23 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        int index = str.indexOf(id);\n+        if (index == 0) {\n+            // Check if the next character is a whitespace or a forward slash\n+            int len = id.length();\n+            char nextChar = str.length() > len ? str.charAt(len) : ' ';\n+            if (nextChar == ' ' || nextChar == '/') {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + len;\n             }\n-            return ~position;\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}