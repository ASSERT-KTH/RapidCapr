{
    "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    if (numbers == null || numbers.isEmpty()) {\n        return new Integer[]{0, 1};\n    }\n    int sum = numbers.stream().mapToInt(n -> n!=null ? n : 0).sum();\n    int product = numbers.stream()\n                          .filter(n -> n != null && n != 0)\n                          .reduce(1, (a, b) -> a * b);\n    return new Integer[]{sum, product};\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/SUM_PRODUCT.java b/src/main/java/humaneval/buggy/SUM_PRODUCT.java\nindex 3cb1afd..ee27d0b 100644\n--- a/src/main/java/humaneval/buggy/SUM_PRODUCT.java\n+++ b/src/main/java/humaneval/buggy/SUM_PRODUCT.java\n@@ -3,12 +3,14 @@ package humaneval.buggy;\n import java.util.List;\n \n public class SUM_PRODUCT {\n-    public static Integer[] sum_product(List<Integer> numbers) {\n-        Integer[] result = new Integer[2];\n-        for (Integer n : numbers){\n-            result[0] += n;\n-            result[1] *= n;\n-        }\n-        return result;\n+public static Integer[] sum_product(List<Integer> numbers) {\n+    if (numbers == null || numbers.isEmpty()) {\n+        return new Integer[]{0, 1};\n     }\n+    int sum = numbers.stream().mapToInt(n -> n!=null ? n : 0).sum();\n+    int product = numbers.stream()\n+                          .filter(n -> n != null && n != 0)\n+                          .reduce(1, (a, b) -> a * b);\n+    return new Integer[]{sum, product};\n+}\n }",
    "result_reason": "   TEST_SUM_PRODUCT.test_2:34 arrays first differed at element [1]; expected:<100> but was:<0>",
    "test_result": "FAIL"
}