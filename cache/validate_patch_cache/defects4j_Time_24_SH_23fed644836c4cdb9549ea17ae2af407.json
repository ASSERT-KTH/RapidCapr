{
    "patch": "        } catch (IllegalArgumentException e) {\n            boolean isDateTimeException = (e instanceof DateTimeException);\n            if (isDateTimeException || (e.getCause() != null && e.getCause() instanceof DateTimeException)) {\n                if (text != null) {\n                    String message = \"Cannot parse \\\"\" + text + '\"';\n                    if (isDateTimeException) {\n                        throw new IllegalArgumentException(message, e);\n                    } else {\n                        e.getCause().addSuppressed(new IllegalArgumentException(message));\n                        throw e.getCause();\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a5572333 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalArgumentException e) {\n+            boolean isDateTimeException = (e instanceof DateTimeException);\n+            if (isDateTimeException || (e.getCause() != null && e.getCause() instanceof DateTimeException)) {\n+                if (text != null) {\n+                    String message = \"Cannot parse \\\"\" + text + '\"';\n+                    if (isDateTimeException) {\n+                        throw new IllegalArgumentException(message, e);\n+                    } else {\n+                        e.getCause().addSuppressed(new IllegalArgumentException(message));\n+                        throw e.getCause();\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}