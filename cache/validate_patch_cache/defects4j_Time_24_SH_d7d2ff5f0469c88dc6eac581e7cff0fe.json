{
    "patch": "        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    String message = \"Cannot parse \\\"\" + text + '\"';\n                    if (e.getMessage() != null && !e.getMessage().isEmpty()) {\n                        message += \": \" + e.getMessage();\n                    }\n                    throw new IllegalArgumentException(message);\n                } else {\n                    throw e;\n                }\n            }\n        }\n        if (millis != iMillis && count > 0) {\n            iSavedFieldsShared = true;\n            iSavedFieldsCount = count;\n            iSavedFields = savedFields;\n            return computeMillis(resetFields, text);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d1ec8775 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    String message = \"Cannot parse \\\"\" + text + '\"';\n+                    if (e.getMessage() != null && !e.getMessage().isEmpty()) {\n+                        message += \": \" + e.getMessage();\n+                    }\n+                    throw new IllegalArgumentException(message);\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+        if (millis != iMillis && count > 0) {\n+            iSavedFieldsShared = true;\n+            iSavedFieldsCount = count;\n+            iSavedFields = savedFields;\n+            return computeMillis(resetFields, text);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}