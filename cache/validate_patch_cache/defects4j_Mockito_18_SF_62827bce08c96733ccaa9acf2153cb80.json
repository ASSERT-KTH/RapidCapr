{
    "patch": "public static <T> ReturnValue<T> minimize(Executor<T> executor, ReturnValue<T> value, Predicate<ReturnValue<T>> property) {\n    ReturnValue<T> result = value;\n    for (int i = 0; i < value.numValues(); i++) {\n        ReturnValue<T> newValue = value.changeValue(i);\n        if (property.test(newValue)) {\n            return minimize(executor, newValue, property);\n        }\n        ReturnValue<T> executionResult = executor.execute(newValue);\n        if (executionResult.isBetterThan(result, property)) {\n            result = executionResult;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..efd38977f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> minimize(Executor<T> executor, ReturnValue<T> value, Predicate<ReturnValue<T>> property) {\n+    ReturnValue<T> result = value;\n+    for (int i = 0; i < value.numValues(); i++) {\n+        ReturnValue<T> newValue = value.changeValue(i);\n+        if (property.test(newValue)) {\n+            return minimize(executor, newValue, property);\n+        }\n+        ReturnValue<T> executionResult = executor.execute(newValue);\n+        if (executionResult.isBetterThan(result, property)) {\n+            result = executionResult;\n+        }\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}