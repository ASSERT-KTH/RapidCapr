{
    "patch": "            } catch (IllegalFieldValueException e) {\n               if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() && \n                   !e.getMessage().startsWith(\"Value \")) {\n                    // The weekyear field is invalid\n                    int firstDow = iChrono.weekyear().roundFloor(iMillis);\n                    Chronology chrono = selectChronology(firstDow);\n                    long millis = chrono.weekyear().set(firstDow, savedFields[i].iValue);\n                    millis = savedFields[i].set(millis, resetFields);\n                    if (resetFields) {\n                        for (int j = 0; j <= i; j++) {\n                            millis = savedFields[j].set(millis, resetFields);\n                        }\n                    }\n                    int year = chrono.weekyear().get(millis);\n                    throw new IllegalFieldValueException(DateTimeFieldType.weekyear(), \n                        Integer.valueOf(year), null, null);\n                }\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"';\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..aec7264d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+               if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() && \n+                   !e.getMessage().startsWith(\"Value \")) {\n+                    // The weekyear field is invalid\n+                    int firstDow = iChrono.weekyear().roundFloor(iMillis);\n+                    Chronology chrono = selectChronology(firstDow);\n+                    long millis = chrono.weekyear().set(firstDow, savedFields[i].iValue);\n+                    millis = savedFields[i].set(millis, resetFields);\n+                    if (resetFields) {\n+                        for (int j = 0; j <= i; j++) {\n+                            millis = savedFields[j].set(millis, resetFields);\n+                        }\n+                    }\n+                    int year = chrono.weekyear().get(millis);\n+                    throw new IllegalFieldValueException(DateTimeFieldType.weekyear(), \n+                        Integer.valueOf(year), null, null);\n+                }\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"';\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}