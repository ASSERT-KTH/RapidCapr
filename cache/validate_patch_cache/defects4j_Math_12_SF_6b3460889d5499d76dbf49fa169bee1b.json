{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    int gLength = M * (M + 1) / 2;\n    double[][] dp = new double[D+1][gLength];\n    dp[0][0] = 1.0d;\n\n    for (int i = 1; i <= D; i++) {\n        for (int j = 0; j < gLength; j++) {\n            int[] pair = getPloidyPair(j, M);\n            double prob = 0.0d;\n            for (int k = 0; k < gLength; k++) {\n                int[] newPair = getPloidyPair(k, M);\n                prob += dp[i-1][k] * getProb(pair, newPair, genotypeProbabilities);\n            }\n            dp[i][j] = prob;\n        }\n    }\n\n    double[] distribution = new double[N+1];\n    for (int i = 0; i < gLength; i++) {\n        int count = countBits(getPloidyPair(i, M));\n        distribution[count] += dp[D][i];\n    }\n\n    for (int i = 0; i <= N; i++) {\n        distribution[i] /= Math.pow(M, D);\n    }\n    \n    return distribution;\n}\n\nprivate int countBits(int[] pair) {\n    int count = 0;\n    for (int p : pair) {\n        while (p > 0) {\n            if (p % 2 == 1) {\n                count++;\n            }\n            p /= 2;\n        }\n    }\n    return count;\n}\n\nprivate int[] getPloidyPair(int idx, int M) {\n    int p = (int) (Math.sqrt(0.25 + 2.0 * idx) - 0.5);\n    int q = idx - p * (p + 1) / 2;\n    return new int[]{M - p, M - q - (M - p)};\n}\n\nprivate double getProb(int[] p1, int[] p2, double[] geno) {\n    double prob = 1.0d;\n    for (int i = 0; i < p1.length; i++) {\n        for (int j = 0; j < p2.length; j++) {\n            int index = getGenotypeIndex(p1[i], p2[j]);\n            prob *= geno[index];\n        }\n    }\n    return prob;\n}\n\nprivate int getGenotypeIndex(int i, int j) {\n    if (i > j) {\n        return getGenotypeIndex(j, i);\n    }\n\n    int index = 0;\n    for(int k = 1; k < i; k++){\n        index += (2 * M - k - 1) * k / 2;\n    }\n    return index + j - i;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}