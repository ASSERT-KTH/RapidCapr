{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        for (int i = 0; i < size; i++) {\n            Object curr = elementPairs.get(i);\n            if (curr instanceof Separator) {\n                if (i == 0) {\n                    throw new IllegalArgumentException(\"Separators cannot start a PeriodFormatter\");\n                }\n                if (i == size - 1) {\n                    throw new IllegalArgumentException(\"Separator at end of elementPairs\");\n                }\n                Object prev = elementPairs.get(i-1);\n                Object next = elementPairs.get(i+1);\n                if (prev instanceof Separator || next instanceof Separator) {\n                    throw new IllegalArgumentException(\"The separators must be separated by a value: \" + elementPairs);\n                }\n                PeriodFormatter f = toFormatter(elementPairs.subList(i+1, size), notPrinter, notParser);\n                Separator sep = ((Separator) curr).finish(f.getPrinter(), f.getParser());\n                PeriodFormatter result = null;\n                if (i == 1) {\n                    Object[] comp = createComposite(elementPairs.subList(0, i));\n                    result = new PeriodFormatter((PeriodPrinter) comp[0], sep);\n                } else {\n                    Object[] comp = createComposite(elementPairs.subList(0, i-1));\n                    result = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1], sep);\n                }\n                return result;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f7e4dd35 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,37 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+        for (int i = 0; i < size; i++) {\n+            Object curr = elementPairs.get(i);\n+            if (curr instanceof Separator) {\n+                if (i == 0) {\n+                    throw new IllegalArgumentException(\"Separators cannot start a PeriodFormatter\");\n+                }\n+                if (i == size - 1) {\n+                    throw new IllegalArgumentException(\"Separator at end of elementPairs\");\n+                }\n+                Object prev = elementPairs.get(i-1);\n+                Object next = elementPairs.get(i+1);\n+                if (prev instanceof Separator || next instanceof Separator) {\n+                    throw new IllegalArgumentException(\"The separators must be separated by a value: \" + elementPairs);\n+                }\n+                PeriodFormatter f = toFormatter(elementPairs.subList(i+1, size), notPrinter, notParser);\n+                Separator sep = ((Separator) curr).finish(f.getPrinter(), f.getParser());\n+                PeriodFormatter result = null;\n+                if (i == 1) {\n+                    Object[] comp = createComposite(elementPairs.subList(0, i));\n+                    result = new PeriodFormatter((PeriodPrinter) comp[0], sep);\n+                } else {\n+                    Object[] comp = createComposite(elementPairs.subList(0, i-1));\n+                    result = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1], sep);\n+                }\n+                return result;\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}