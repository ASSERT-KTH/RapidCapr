{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    Node parent = function.getParent();\n    if (parent.isSetterDef()) {\n      // The parameters for object literal setters can not be removed.\n      return;\n    } else if (parent.isClassMethod()) {\n      // The parameter for class constructors can not be removed.\n      if (function.isConstructor()) {\n        return;\n      }\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      while (argList.hasChildren()) {\n        Node lastArg = argList.getLastChild();\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e69665c7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    Node parent = function.getParent();\n+    if (parent.isSetterDef()) {\n+      // The parameters for object literal setters can not be removed.\n+      return;\n+    } else if (parent.isClassMethod()) {\n+      // The parameter for class constructors can not be removed.\n+      if (function.isConstructor()) {\n+        return;\n+      }\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      while (argList.hasChildren()) {\n+        Node lastArg = argList.getLastChild();\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+ }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}