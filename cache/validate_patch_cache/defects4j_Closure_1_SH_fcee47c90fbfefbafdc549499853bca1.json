{
    "patch": "        \n    Set<String> seenArgs = new HashSet<>();\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      if (arg.isName()) {\n        seenArgs.add(arg.getString());\n      } else if (arg.isDefaultValue()) {\n        seenArgs.add(arg.getFirstChild().getString());\n      }\n    }\n    \n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          seenArgs.remove(argName);\n          lastArg = lastArg.getPrevious();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      // If any parameters are left, then they are being used by callers.\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        seenArgs.remove(arg.getString());\n      }\n    }\n\n    // Generate an error if there is a parameter mismatch.\n    if (seenArgs.size() != 0) {\n      compiler.report(JSError.make(\n          function,\n          OPTIMIZE_PARAMETERS,\n          \"Parameter(s) [\" + Joiner.on(',').join(seenArgs) + \"] \" +\n          \"never referenced in function.\"\n      ));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5fe82e56 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        \n+    Set<String> seenArgs = new HashSet<>();\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      if (arg.isName()) {\n+        seenArgs.add(arg.getString());\n+      } else if (arg.isDefaultValue()) {\n+        seenArgs.add(arg.getFirstChild().getString());\n+      }\n+    }\n+    \n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          seenArgs.remove(argName);\n+          lastArg = lastArg.getPrevious();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      // If any parameters are left, then they are being used by callers.\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        seenArgs.remove(arg.getString());\n+      }\n+    }\n+\n+    // Generate an error if there is a parameter mismatch.\n+    if (seenArgs.size() != 0) {\n+      compiler.report(JSError.make(\n+          function,\n+          OPTIMIZE_PARAMETERS,\n+          \"Parameter(s) [\" + Joiner.on(',').join(seenArgs) + \"] \" +\n+          \"never referenced in function.\"\n+      ));\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}