{
    "patch": "              !(NodeUtil.isExpressionNode(lhs) &&\n                NodeUtil.recursivelyContainsType(lhs, Token.CALL))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..3ee0f431 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,8 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              !(NodeUtil.isExpressionNode(lhs) &&\n+                NodeUtil.recursivelyContainsType(lhs, Token.CALL))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}