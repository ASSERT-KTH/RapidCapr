{
    "patch": "if (hasFiniteBounds) {\n    boolean anyInfiniteBound = false;\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            anyInfiniteBound = true;\n            break;\n        }\n    }\n    if (anyInfiniteBound) {\n        // If all bounds are infinite, the normalize method will not work.\n        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n    }\n    else {\n        // Convert API to internal handling of boundaries.\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n\n        // Check for normalization overflow\n        double boundaryRange = boundaries[1][0] - boundaries[0][0];\n        if (Double.isInfinite(boundaryRange) && inputSigma != null) {\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > 0) {\n                    throw new NumberIsTooLargeException(boundaryRange, inputSigma[i], false);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..dbbd3a067 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,35 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasFiniteBounds) {\n+    boolean anyInfiniteBound = false;\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            anyInfiniteBound = true;\n+            break;\n+        }\n+    }\n+    if (anyInfiniteBound) {\n+        // If all bounds are infinite, the normalize method will not work.\n+        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n+    }\n+    else {\n+        // Convert API to internal handling of boundaries.\n+        boundaries = new double[2][];\n+        boundaries[0] = lB;\n+        boundaries[1] = uB;\n+\n+        // Check for normalization overflow\n+        double boundaryRange = boundaries[1][0] - boundaries[0][0];\n+        if (Double.isInfinite(boundaryRange) && inputSigma != null) {\n+            for (int i = 0; i < init.length; i++) {\n+                if (inputSigma[i] > 0) {\n+                    throw new NumberIsTooLargeException(boundaryRange, inputSigma[i], false);\n+                }\n+            }\n+        }\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math3.exception.NumberIsTooLargeException> but was<org.apache.commons.math3.exception.MathIllegalStateException>",
    "test_result": "FAIL"
}