{
    "patch": "    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        final Class<?> type2 = array2.getClass().getComponentType();\n        if (!type1.equals(type2)) {\n            return null; // or throw an exception\n        }\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..ca5e6599 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2957,10 +2957,13 @@ public class ArrayUtils {\n             return clone(array1);\n         }\n         final Class<?> type1 = array1.getClass().getComponentType();\n+        final Class<?> type2 = array2.getClass().getComponentType();\n+        if (!type1.equals(type2)) {\n+            return null; // or throw an exception\n+        }\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n         return joinedArray;\n     }\n ",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}