{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          } else if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n            break;\n          }\n          defineFunctionExpression(n);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1573258f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1453,8 +1453,11 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n+          } else if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+            break;\n           }\n-          defineDeclaredFunction(n, parent);\n+          defineFunctionExpression(n);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}