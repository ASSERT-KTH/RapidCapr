{
    "patch": "    Name name = functionNode.getFunctionName();\n    Node node = newNode(Token.FUNCTION);\n    Node newName;\n    if (name == null) {\n      newName = new Node(Token.NAME);\n      newName.setString(\"\");\n    } else {\n      newName = transform(name);\n    }\n    node.addChildToBack(newName);\n    \n    Node lp = newNode(Token.LP);\n    lp.setLineno(functionNode.getBody().getLineno());\n    lp.setCharno(position2charno(functionNode.getLp()));     \n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    // This is necessary to terminate the inner scope correctly. The call to\n    // processScope automatically adds a BLOCK node as the last child of a scope\n    // even if the parse tree didn't include one explicitly.\n    closeScope(node);\n    return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a69a7d7a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,33 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    Name name = functionNode.getFunctionName();\n+    Node node = newNode(Token.FUNCTION);\n+    Node newName;\n+    if (name == null) {\n+      newName = new Node(Token.NAME);\n+      newName.setString(\"\");\n+    } else {\n+      newName = transform(name);\n+    }\n+    node.addChildToBack(newName);\n+    \n+    Node lp = newNode(Token.LP);\n+    lp.setLineno(functionNode.getBody().getLineno());\n+    lp.setCharno(position2charno(functionNode.getLp()));     \n+    for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    // This is necessary to terminate the inner scope correctly. The call to\n+    // processScope automatically adds a BLOCK node as the last child of a scope\n+    // even if the parse tree didn't include one explicitly.\n+    closeScope(node);\n+    return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}