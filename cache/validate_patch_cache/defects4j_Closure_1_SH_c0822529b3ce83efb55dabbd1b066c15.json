{
    "patch": "// Remove unused parameters.\nif (!modifyCallers) {\n  Node lastArg = argList.getLastChild();\n  for (Node arg : argList.children()) {\n    Var var = fnScope.getVar(arg.getString());\n    if (!referenced.contains(var)) {\n      // Check if last parameter load is removed\n      if (lastArg == arg) {\n        arg.detachFromParent();\n        break;\n      } else {\n        arg.replaceWith(IR.empty().srcref(arg));\n        compiler.reportCodeChange();\n      }        \n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1d13f0f2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unused parameters.\n+if (!modifyCallers) {\n+  Node lastArg = argList.getLastChild();\n+  for (Node arg : argList.children()) {\n+    Var var = fnScope.getVar(arg.getString());\n+    if (!referenced.contains(var)) {\n+      // Check if last parameter load is removed\n+      if (lastArg == arg) {\n+        arg.detachFromParent();\n+        break;\n+      } else {\n+        arg.replaceWith(IR.empty().srcref(arg));\n+        compiler.reportCodeChange();\n+      }        \n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}