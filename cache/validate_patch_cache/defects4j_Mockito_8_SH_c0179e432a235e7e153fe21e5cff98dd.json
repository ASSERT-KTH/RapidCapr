{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable) {\n    TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n    Type resolvedTv = contextualActualTypeParameters.get(tv);\n\n    if (resolvedTv == null && tv.getBounds().length > 0) {\n        resolvedTv = tv.getBounds()[0];\n    }\n\n    if (resolvedTv instanceof TypeVariable) {\n        resolvedTv = resolveTypeVariable(tv, contextualActualTypeParameters);\n    }\n\n    contextualActualTypeParameters.put(typeParameter, resolvedTv);\n} else {\n    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..f8ade97c5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,22 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable) {\n+    TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n+    Type resolvedTv = contextualActualTypeParameters.get(tv);\n+\n+    if (resolvedTv == null && tv.getBounds().length > 0) {\n+        resolvedTv = tv.getBounds()[0];\n+    }\n+\n+    if (resolvedTv instanceof TypeVariable) {\n+        resolvedTv = resolveTypeVariable(tv, contextualActualTypeParameters);\n+    }\n+\n+    contextualActualTypeParameters.put(typeParameter, resolvedTv);\n+} else {\n+    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}