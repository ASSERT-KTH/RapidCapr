{
    "patch": "private static final int BLOCK_SIZE = 10;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n\n    // Apply block matrix method to calculate square root of large matrices\n    if (n > BLOCK_SIZE) {\n        for (int i = 0; i < n; i += BLOCK_SIZE) {\n            final int endRow = Math.min(i + BLOCK_SIZE, n);\n            final RealMatrix block = m.getSubMatrix(i, endRow - 1, i, endRow - 1);\n            final RealMatrix sqrtBlock = calculateBlockSqrt(block);\n            sqrtM.setSubMatrix(sqrtBlock.getData(), i, i);\n        }\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n        final RealMatrix v = dec.getV();\n        final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            sqrtD.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n        }\n        sqrtM.setSubMatrix(v.multiply(sqrtD).multiply(v.transpose()).getData(), 0, 0);\n    }\n\n    return sqrtM;\n}\n\nprivate RealMatrix calculateBlockSqrt(RealMatrix block) {\n    final int n = block.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(block);\n    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    final RealMatrix v = dec.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        final double sqrtVal = FastMath.sqrt(FastMath.abs(d.getEntry(i, i)));\n        sqrtD.setEntry(i, i, sqrtVal);\n    }\n    return v.multiply(sqrtD).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..452e666be 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,44 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static final int BLOCK_SIZE = 10;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+\n+    // Apply block matrix method to calculate square root of large matrices\n+    if (n > BLOCK_SIZE) {\n+        for (int i = 0; i < n; i += BLOCK_SIZE) {\n+            final int endRow = Math.min(i + BLOCK_SIZE, n);\n+            final RealMatrix block = m.getSubMatrix(i, endRow - 1, i, endRow - 1);\n+            final RealMatrix sqrtBlock = calculateBlockSqrt(block);\n+            sqrtM.setSubMatrix(sqrtBlock.getData(), i, i);\n+        }\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            sqrtD.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n+        }\n+        sqrtM.setSubMatrix(v.multiply(sqrtD).multiply(v.transpose()).getData(), 0, 0);\n     }\n+\n+    return sqrtM;\n+}\n+\n+private RealMatrix calculateBlockSqrt(RealMatrix block) {\n+    final int n = block.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(block);\n+    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        final double sqrtVal = FastMath.sqrt(FastMath.abs(d.getEntry(i, i)));\n+        sqrtD.setEntry(i, i, sqrtVal);\n+    }\n+    return v.multiply(sqrtD).multiply(v.transpose());\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}