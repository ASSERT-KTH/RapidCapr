{
    "patch": "if (n.isFunction()) {\n  // skip function declaration\n  if (n.getParent().isBlock() && n.getParent().isFunction()) {\n    return apply(n.getParent());\n  }\n  // add all parameters to the dependencies\n  for (Node param : NodeUtil.getFunctionParameters(n)) {\n    addParameterDependencies(param);\n  }\n}\n\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n    return true;\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..cde8388e 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,23 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isFunction()) {\n+  // skip function declaration\n+  if (n.getParent().isBlock() && n.getParent().isFunction()) {\n+    return apply(n.getParent());\n+  }\n+  // add all parameters to the dependencies\n+  for (Node param : NodeUtil.getFunctionParameters(n)) {\n+    addParameterDependencies(param);\n+  }\n+}\n+\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    return true;\n+  }\n+}\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: for-each not applicable to expression type",
    "test_result": "ERROR"
}