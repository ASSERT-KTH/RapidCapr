{
    "patch": "public String fixCode(String input) {\n    int indexIn = input.indexOf(\"in\");\n    if (indexIn == -1) {\n        return input;\n    }\n    int startIndex = input.lastIndexOf(';', indexIn);\n    if (startIndex == -1) {\n        return input;\n    }\n    int endIndex = input.indexOf(';', indexIn);\n    if (endIndex == -1) {\n        return input;\n    }\n    String prefix = input.substring(0, startIndex + 1);\n    String suffix = input.substring(endIndex);\n    String loop = input.substring(startIndex + 1, endIndex).trim();\n    String newLoop = loop.replace(\"in\", \"in d.keys()\");\n    return prefix + newLoop + suffix;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..4be0824f 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,25 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String input) {\n+    int indexIn = input.indexOf(\"in\");\n+    if (indexIn == -1) {\n+        return input;\n+    }\n+    int startIndex = input.lastIndexOf(';', indexIn);\n+    if (startIndex == -1) {\n+        return input;\n+    }\n+    int endIndex = input.indexOf(';', indexIn);\n+    if (endIndex == -1) {\n+        return input;\n+    }\n+    String prefix = input.substring(0, startIndex + 1);\n+    String suffix = input.substring(endIndex);\n+    String loop = input.substring(startIndex + 1, endIndex).trim();\n+    String newLoop = loop.replace(\"in\", \"in d.keys()\");\n+    return prefix + newLoop + suffix;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}