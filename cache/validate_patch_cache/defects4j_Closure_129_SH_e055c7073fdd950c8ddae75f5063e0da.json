{
    "patch": "      Node name = null;\n      if (NodeUtil.isGet(first)) {\n        name = first.getLastChild();\n      } else if (NodeUtil.isName(first)) {\n        name = first;\n      }\n      if (name != null) {\n        String methodName = name.getString();\n        if (methodName.startsWith(\"$$\")) {\n          methodName = methodName.substring(2);\n        }\n        if (methodName.startsWith(\"$super$\")) {\n          if (parent == null) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        } else if (methodName.equals(\"$self\")) {\n          if (parent != null && parent.isFunction()) {\n            n.putProp(Node.ORIGINALNAME_PROP, parent.getString());\n          } else {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        }\n      } else if (!NodeUtil.isGet(first)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..bb66e6a3 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,29 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node name = null;\n+      if (NodeUtil.isGet(first)) {\n+        name = first.getLastChild();\n+      } else if (NodeUtil.isName(first)) {\n+        name = first;\n+      }\n+      if (name != null) {\n+        String methodName = name.getString();\n+        if (methodName.startsWith(\"$$\")) {\n+          methodName = methodName.substring(2);\n+        }\n+        if (methodName.startsWith(\"$super$\")) {\n+          if (parent == null) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        } else if (methodName.equals(\"$self\")) {\n+          if (parent != null && parent.isFunction()) {\n+            n.putProp(Node.ORIGINALNAME_PROP, parent.getString());\n+          } else {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        }\n+      } else if (!NodeUtil.isGet(first)) {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}