{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if we just return offsetAdjusted then the time is pushed\n                    // back before the transition, whereas it should be\n                    // on or after the transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        // check if instantLocal is within DST interval\n                        long nextAdjustedDelta = nextAdjusted - instantLocal + offsetAdjusted;\n                        if (nextAdjustedDelta < 0) {\n                            nextAdjustedDelta = -nextAdjustedDelta;\n                        }\n                        if (nextAdjustedDelta < (nextLocal - instantAdjusted)){\n                            return offsetAdjusted;\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b992f131 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if we just return offsetAdjusted then the time is pushed\n+                    // back before the transition, whereas it should be\n+                    // on or after the transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        // check if instantLocal is within DST interval\n+                        long nextAdjustedDelta = nextAdjusted - instantLocal + offsetAdjusted;\n+                        if (nextAdjustedDelta < 0) {\n+                            nextAdjustedDelta = -nextAdjustedDelta;\n+                        }\n+                        if (nextAdjustedDelta < (nextLocal - instantAdjusted)){\n+                            return offsetAdjusted;\n+                        }\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}