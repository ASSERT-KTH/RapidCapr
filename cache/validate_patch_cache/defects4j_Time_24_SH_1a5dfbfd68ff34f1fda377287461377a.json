{
    "patch": "            if (savedFields[i].iValue == Long.MIN_VALUE) {\n                // restore fields\n                for (int j = 0; j < iSavedFieldsCount; j++) {\n                    iSavedFields[j].restore();\n                }\n                throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n                        Long.valueOf(Long.MIN_VALUE), null, null);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e7456e5b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iValue == Long.MIN_VALUE) {\n+                // restore fields\n+                for (int j = 0; j < iSavedFieldsCount; j++) {\n+                    iSavedFields[j].restore();\n+                }\n+                throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n+                        Long.valueOf(Long.MIN_VALUE), null, null);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}