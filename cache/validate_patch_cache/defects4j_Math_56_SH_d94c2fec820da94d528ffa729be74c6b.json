{
    "patch": "int countBefore = 0;\nfor (int i = 0; i < last; i++) {\n    int idx = 0;\n    final int offset = uniCounterOffset[i];\n    while (countBefore + idx * offset <= index) {\n        countBefore += idx * offset;\n        ++idx;\n    }\n    --idx;\n    countBefore += offset * idx;\n    indices[i] = idx;\n}\n\nint remainingIndex = index - countBefore;\nint offset = uniCounterOffset[last - 1];\nindices[last - 1] = remainingIndex / offset;\nremainingIndex -= indices[last - 1] * offset;\nfor (int i = last - 2; i >= 0; i--) {\n    offset = uniCounterOffset[i];\n    indices[i] = remainingIndex / offset;\n    remainingIndex -= indices[i] * offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..5df2f367a 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,28 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int countBefore = 0;\n+for (int i = 0; i < last; i++) {\n+    int idx = 0;\n+    final int offset = uniCounterOffset[i];\n+    while (countBefore + idx * offset <= index) {\n+        countBefore += idx * offset;\n+        ++idx;\n+    }\n+    --idx;\n+    countBefore += offset * idx;\n+    indices[i] = idx;\n+}\n+\n+int remainingIndex = index - countBefore;\n+int offset = uniCounterOffset[last - 1];\n+indices[last - 1] = remainingIndex / offset;\n+remainingIndex -= indices[last - 1] * offset;\n+for (int i = last - 2; i >= 0; i--) {\n+    offset = uniCounterOffset[i];\n+    indices[i] = remainingIndex / offset;\n+    remainingIndex -= indices[i] * offset;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][2] expected:<1> but was:<0>",
    "test_result": "FAIL"
}