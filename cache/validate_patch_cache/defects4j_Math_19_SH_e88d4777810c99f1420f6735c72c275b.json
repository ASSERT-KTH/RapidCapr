{
    "patch": "                double[] normalized = new double[init.length];\n                for (int i = 0; i < init.length; i++) {\n                    double lower = lB[i];\n                    double upper = uB[i];\n                    if (Double.isInfinite(lower)) {\n                        if (Double.isInfinite(upper)) {\n                            // both inf, take NaN as midpoint\n                            normalized[i] = Double.NaN;\n                        } else {\n                            normalized[i] = upper - FastMath.sqrt(inputSigma[i]);\n                        }\n                    } else {\n                        if (Double.isInfinite(upper)) {\n                            normalized[i] = lower + FastMath.sqrt(inputSigma[i]);\n                        } else {\n                            normalized[i] = 0.5 * (lower + upper) + 0.5 * (upper - lower) * erf(inputSigma[i] / (FastMath.sqrt(2) * (upper - lower)));\n                        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..ef85c03dc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,23 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                double[] normalized = new double[init.length];\n+                for (int i = 0; i < init.length; i++) {\n+                    double lower = lB[i];\n+                    double upper = uB[i];\n+                    if (Double.isInfinite(lower)) {\n+                        if (Double.isInfinite(upper)) {\n+                            // both inf, take NaN as midpoint\n+                            normalized[i] = Double.NaN;\n+                        } else {\n+                            normalized[i] = upper - FastMath.sqrt(inputSigma[i]);\n+                        }\n+                    } else {\n+                        if (Double.isInfinite(upper)) {\n+                            normalized[i] = lower + FastMath.sqrt(inputSigma[i]);\n+                        } else {\n+                            normalized[i] = 0.5 * (lower + upper) + 0.5 * (upper - lower) * erf(inputSigma[i] / (FastMath.sqrt(2) * (upper - lower)));\n+                        }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}