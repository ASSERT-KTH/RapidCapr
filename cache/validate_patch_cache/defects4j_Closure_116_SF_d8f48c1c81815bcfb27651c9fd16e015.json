{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node fnNameNode = NodeUtil.getFunctionNameNode(fnNode);\n\n  boolean isConstructorCall = callNode.getFirstChild().matchesQualifiedName(\"new\");\n  Node functionBody = NodeUtil.getFunctionBody(fnNode);\n  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n\n  List<Node> argsNodes = isConstructorCall ? callNode.getSecondChild().children() : callNode.children().subList(1, callNode.getChildCount());\n\n  // The function can only be inlined if the number of arguments is less than or equal to the number of\n  // parameters and the function body has no returns. So if there are more arguments than parameters, the\n  // function can't be inlined.\n  if (isConstructorCall && fnNode.isClass()) {\n    fnNode = NodeUtil.getEs6ClassConstructorMemberFunctionDef(fnNode);\n    if (fnNode == null) {\n      return CanInlineResult.NO;\n    }\n    functionBody = NodeUtil.getFunctionBody(fnNode);\n    paramList = NodeUtil.getFunctionParameters(fnNode);\n  }\n\n  int numArgs = argsNodes.size();\n  int numParams = paramList.getChildCount();\n  if (numArgs > numParams) {\n    return CanInlineResult.NO;\n  }\n\n  int i = 0;\n  for (Node paramNode = paramList.getFirstChild(); paramNode != null;\n      paramNode = paramNode.getNext()) {\n    // Skip over any parameters that have already been assigned an argument node.\n    if (i < numArgs && areNodesEquivalent(argsNodes.get(i), paramNode)) {\n      i++;\n      continue;\n    }\n\n    // Handle default parameter values.\n    if (paramNode.hasChildren() && paramNode.getFirstChild().isDefaultValue()) {\n      Node defaultValue = paramNode.getFirstChild().getLastChild();\n      if (defaultValue != null) {\n        continue;\n      }\n    }\n\n    if (!paramNode.isName()) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.mayHaveSideEffects(argsNodes.get(i), compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.mayEffectMutableState(argsNodes.get(i), compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    i++;\n  }\n\n  if (!NodeUtil.isFunctionStatement(fnNode) && NodeUtil.containsReturns(functionBody)) {\n    return CanInlineResult.NO;\n  }\n\n  if (fnNameNode != null && NodeUtil.isNameReferencedBefore(fnNameNode, callNode, functionBody)) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}\n\nprivate boolean areNodesEquivalent(Node node1, Node node2) {\n  if (node1 == null && node2 == null) {\n    return true;\n  }\n\n  if (node1 == null || node2 == null) {\n    return false;\n  }\n\n  // Compare nodes by their types before comparing their values.\n  if (node1.getType() != node2.getType()) {\n    return false;\n  }\n\n  return node1.isEquivalentTo(node2);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..fed8085d 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,97 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node fnNameNode = NodeUtil.getFunctionNameNode(fnNode);\n+\n+  boolean isConstructorCall = callNode.getFirstChild().matchesQualifiedName(\"new\");\n+  Node functionBody = NodeUtil.getFunctionBody(fnNode);\n+  Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+\n+  List<Node> argsNodes = isConstructorCall ? callNode.getSecondChild().children() : callNode.children().subList(1, callNode.getChildCount());\n+\n+  // The function can only be inlined if the number of arguments is less than or equal to the number of\n+  // parameters and the function body has no returns. So if there are more arguments than parameters, the\n+  // function can't be inlined.\n+  if (isConstructorCall && fnNode.isClass()) {\n+    fnNode = NodeUtil.getEs6ClassConstructorMemberFunctionDef(fnNode);\n+    if (fnNode == null) {\n       return CanInlineResult.NO;\n     }\n+    functionBody = NodeUtil.getFunctionBody(fnNode);\n+    paramList = NodeUtil.getFunctionParameters(fnNode);\n+  }\n \n-    Node block = fnNode.getLastChild();\n-\n+  int numArgs = argsNodes.size();\n+  int numParams = paramList.getChildCount();\n+  if (numArgs > numParams) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  int i = 0;\n+  for (Node paramNode = paramList.getFirstChild(); paramNode != null;\n+      paramNode = paramNode.getNext()) {\n+    // Skip over any parameters that have already been assigned an argument node.\n+    if (i < numArgs && areNodesEquivalent(argsNodes.get(i), paramNode)) {\n+      i++;\n+      continue;\n+    }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    // Handle default parameter values.\n+    if (paramNode.hasChildren() && paramNode.getFirstChild().isDefaultValue()) {\n+      Node defaultValue = paramNode.getFirstChild().getLastChild();\n+      if (defaultValue != null) {\n+        continue;\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    if (!paramNode.isName()) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    if (NodeUtil.mayHaveSideEffects(argsNodes.get(i), compiler)) {\n+      return CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (NodeUtil.mayEffectMutableState(argsNodes.get(i), compiler)) {\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n+    i++;\n+  }\n+\n+  if (!NodeUtil.isFunctionStatement(fnNode) && NodeUtil.containsReturns(functionBody)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  if (fnNameNode != null && NodeUtil.isNameReferencedBefore(fnNameNode, callNode, functionBody)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  return CanInlineResult.YES;\n+}\n+\n+private boolean areNodesEquivalent(Node node1, Node node2) {\n+  if (node1 == null && node2 == null) {\n+    return true;\n+  }\n+\n+  if (node1 == null || node2 == null) {\n+    return false;\n+  }\n+\n+  // Compare nodes by their types before comparing their values.\n+  if (node1.getType() != node2.getType()) {\n+    return false;\n   }\n \n+  return node1.isEquivalentTo(node2);\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}