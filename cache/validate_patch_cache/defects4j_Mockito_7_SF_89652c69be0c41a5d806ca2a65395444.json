{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n    }\n\n    // Handle wildcard types\n    if (actualTypeArg instanceof WildcardType) {\n        WildcardType wildcard = (WildcardType) actualTypeArg;\n        Type[] lowerBounds = wildcard.getLowerBounds();\n        Type[] upperBounds = wildcard.getUpperBounds();\n        if (lowerBounds.length > 0) {\n            actualTypeArg = lowerBounds[0];\n        } else if (upperBounds.length > 0) {\n            actualTypeArg = upperBounds[0];\n        } else {\n            throw new RuntimeException(\"Wildcard type argument is invalid for \" + typeVariable.getTypeName());\n        }\n    }\n\n    // Handle type variables\n    while (actualTypeArg instanceof TypeVariable<?>) {\n        TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArg;\n        Type[] bounds = typeVar.getBounds();\n        if (bounds.length > 0) {\n            actualTypeArg = bounds[0];\n        } else {\n            throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVar.getName());\n        }\n    }\n\n    registerTypeVariablesOn(actualTypeArg);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b5b1ccca1 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,44 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+    }\n+\n+    // Handle wildcard types\n+    if (actualTypeArg instanceof WildcardType) {\n+        WildcardType wildcard = (WildcardType) actualTypeArg;\n+        Type[] lowerBounds = wildcard.getLowerBounds();\n+        Type[] upperBounds = wildcard.getUpperBounds();\n+        if (lowerBounds.length > 0) {\n+            actualTypeArg = lowerBounds[0];\n+        } else if (upperBounds.length > 0) {\n+            actualTypeArg = upperBounds[0];\n+        } else {\n+            throw new RuntimeException(\"Wildcard type argument is invalid for \" + typeVariable.getTypeName());\n+        }\n+    }\n+\n+    // Handle type variables\n+    while (actualTypeArg instanceof TypeVariable<?>) {\n+        TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArg;\n+        Type[] bounds = typeVar.getBounds();\n+        if (bounds.length > 0) {\n+            actualTypeArg = bounds[0];\n+        } else {\n+            throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVar.getName());\n+        }\n+    }\n+\n+    registerTypeVariablesOn(actualTypeArg);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.RuntimeException: Unable to determine actual type argument for MC3",
    "test_result": "FAIL"
}