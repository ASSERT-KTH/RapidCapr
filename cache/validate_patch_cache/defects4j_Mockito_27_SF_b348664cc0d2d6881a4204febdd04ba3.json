{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        if (mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n            callbacks[0] = newFilter;\n            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n            factory.setCallbacks(callbacks);\n        } else if (mock instanceof MockitoSpy) {\n            try {\n                MockitoSpy<T> spy = (MockitoSpy<T>) mock;\n                Field f = spy.getClass().getDeclaredField(\"initializedSpy\");\n                f.setAccessible(true);\n                Object initializedSpy = f.get(spy);\n\n                MockHandlerInterface<T> spyMockHandler = getMockHandler((T) initializedSpy);\n                MockHandler<T> newMockHandlerForSpy = new MockHandler<T>(spyMockHandler);\n                MethodInterceptorFilter newFilterForSpy = new MethodInterceptorFilter(newMockHandlerForSpy, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n                f = spy.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n                f.setAccessible(true);\n                f.set(spy, newFilterForSpy);\n            } catch (NoSuchFieldException | SecurityException | IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..07cf9d91b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,38 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if (mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+            callbacks[0] = newFilter;\n+            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+            factory.setCallbacks(callbacks);\n+        } else if (mock instanceof MockitoSpy) {\n+            try {\n+                MockitoSpy<T> spy = (MockitoSpy<T>) mock;\n+                Field f = spy.getClass().getDeclaredField(\"initializedSpy\");\n+                f.setAccessible(true);\n+                Object initializedSpy = f.get(spy);\n+\n+                MockHandlerInterface<T> spyMockHandler = getMockHandler((T) initializedSpy);\n+                MockHandler<T> newMockHandlerForSpy = new MockHandler<T>(spyMockHandler);\n+                MethodInterceptorFilter newFilterForSpy = new MethodInterceptorFilter(newMockHandlerForSpy, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+                f = spy.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+                f.setAccessible(true);\n+                f.set(spy, newFilterForSpy);\n+            } catch (NoSuchFieldException | SecurityException | IllegalAccessException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}