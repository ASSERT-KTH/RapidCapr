{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is the largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long currentInstant = 0L;\n        boolean isEndOfMonth = false;\n        for (int i = 0; i < partial.size(); i++) {\n            if (i != fieldIndex) {\n                currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, values[i]);\n            } else {\n                int currentValue = values[i];\n                int newValue = iChronology.getField(i).add(currentValue, valueToAdd);\n                if (newValue != currentValue) {\n                    try {\n                        // try to set the field to the new value\n                        currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, newValue);\n                    } catch (IllegalFieldValueException exception) {  \n                        // adjust other fields to keep the total millisecond consistent\n                        int maxDayOfMonth = iChronology.getDaysInMonthMax(); // maximum days in month\n                        if (values[2] > maxDayOfMonth) {\n                            values[2] = maxDayOfMonth;\n                            isEndOfMonth = true; // remember to make further adjustment later\n                        }\n                        // set the field to the last valid value\n                        currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, currentValue);\n                        currentInstant = add(currentInstant, valueToAdd);\n                    }\n                }\n            }\n        }\n\n        // adjust the result date and month if necessary\n        int[] result = iChronology.get(partial, currentInstant);\n        if (isEndOfMonth && result[2] < values[2]) {\n            int lastDayOfMonth = iChronology.getDaysInMonthMax();\n            result[1] += ((values[2] - result[2]) / lastDayOfMonth) + 1;\n            result[2] = ((values[2] - result[2]) % lastDayOfMonth) + lastDayOfMonth;\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6e5c546e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is the largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long currentInstant = 0L;\n+        boolean isEndOfMonth = false;\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (i != fieldIndex) {\n+                currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, values[i]);\n+            } else {\n+                int currentValue = values[i];\n+                int newValue = iChronology.getField(i).add(currentValue, valueToAdd);\n+                if (newValue != currentValue) {\n+                    try {\n+                        // try to set the field to the new value\n+                        currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, newValue);\n+                    } catch (IllegalFieldValueException exception) {  \n+                        // adjust other fields to keep the total millisecond consistent\n+                        int maxDayOfMonth = iChronology.getDaysInMonthMax(); // maximum days in month\n+                        if (values[2] > maxDayOfMonth) {\n+                            values[2] = maxDayOfMonth;\n+                            isEndOfMonth = true; // remember to make further adjustment later\n+                        }\n+                        // set the field to the last valid value\n+                        currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, currentValue);\n+                        currentInstant = add(currentInstant, valueToAdd);\n+                    }\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        // adjust the result date and month if necessary\n+        int[] result = iChronology.get(partial, currentInstant);\n+        if (isEndOfMonth && result[2] < values[2]) {\n+            int lastDayOfMonth = iChronology.getDaysInMonthMax();\n+            result[1] += ((values[2] - result[2]) / lastDayOfMonth) + 1;\n+            result[2] = ((values[2] - result[2]) % lastDayOfMonth) + lastDayOfMonth;\n+        }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}