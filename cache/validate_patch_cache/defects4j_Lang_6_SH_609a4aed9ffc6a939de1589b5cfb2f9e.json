{
    "patch": "            if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                consumed = translate(input.subSequence(pos, pos + 2), out);\n                pos += 2;\n            } else {\n                consumed = translate(input.subSequence(pos, pos + 1), out);\n                pos++;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..7f618800 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,13 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+            if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                consumed = translate(input.subSequence(pos, pos + 2), out);\n+                pos += 2;\n+            } else {\n+                consumed = translate(input.subSequence(pos, pos + 1), out);\n+                pos++;\n+            }\n             }\n         }\n     }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}