{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = 0, newImaginary = 0;\n    try {\n        newReal = this.real + rhs.getReal();\n        newImaginary = this.imaginary + rhs.getImaginary();\n        // Test if the operation resulted in a NaN.\n        if(Double.isNaN(newReal) || Double.isNaN(newImaginary)){\n            return new Complex(Double.NaN, Double.NaN);\n        }\n        // Test if the operation resulted in positive or negative infinity.\n        if(Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {\n            if(Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n                return new Complex(Math.copySign(Double.POSITIVE_INFINITY, newReal), Math.copySign(Double.POSITIVE_INFINITY, newImaginary));\n            } else {\n                double newSign = Math.signum(newReal + newImaginary);\n                return new Complex(newSign * Double.POSITIVE_INFINITY, newSign * Double.POSITIVE_INFINITY);\n            }\n        }\n    } catch (NullPointerException npe) {\n        return new Complex(Double.NaN, Double.NaN);\n    }\n    return new Complex(newReal, newImaginary);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..98778a0dc 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,30 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal = 0, newImaginary = 0;\n+    try {\n+        newReal = this.real + rhs.getReal();\n+        newImaginary = this.imaginary + rhs.getImaginary();\n+        // Test if the operation resulted in a NaN.\n+        if(Double.isNaN(newReal) || Double.isNaN(newImaginary)){\n+            return new Complex(Double.NaN, Double.NaN);\n+        }\n+        // Test if the operation resulted in positive or negative infinity.\n+        if(Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {\n+            if(Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n+                return new Complex(Math.copySign(Double.POSITIVE_INFINITY, newReal), Math.copySign(Double.POSITIVE_INFINITY, newImaginary));\n+            } else {\n+                double newSign = Math.signum(newReal + newImaginary);\n+                return new Complex(newSign * Double.POSITIVE_INFINITY, newSign * Double.POSITIVE_INFINITY);\n+            }\n+        }\n+    } catch (NullPointerException npe) {\n+        return new Complex(Double.NaN, Double.NaN);\n     }\n+    return new Complex(newReal, newImaginary);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<Infinity> but was:<1.0>",
    "test_result": "FAIL"
}