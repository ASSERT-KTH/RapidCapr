{
    "patch": "private static RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix v = new Array2DRowRealMatrix(n, n);\n    final RealMatrix w = new Array2DRowRealMatrix(n, n);\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] d = dec.getRealEigenvalues();\n    for (int i = 0; i < n; i++) {\n        final double sqrt = (d[i] >= 0.0) ? FastMath.sqrt(d[i]) : 0.0;\n        v.setColumn(i, dec.getEigenvector(i).mapMultiply(sqrt).toArray());\n    }\n    final RealMatrix vInv = new LUDecomposition(v).getSolver().getInverse();\n    return v.multiply(w).multiply(vInv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bb6026f9e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix v = new Array2DRowRealMatrix(n, n);\n+    final RealMatrix w = new Array2DRowRealMatrix(n, n);\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] d = dec.getRealEigenvalues();\n+    for (int i = 0; i < n; i++) {\n+        final double sqrt = (d[i] >= 0.0) ? FastMath.sqrt(d[i]) : 0.0;\n+        v.setColumn(i, dec.getEigenvector(i).mapMultiply(sqrt).toArray());\n     }\n+    final RealMatrix vInv = new LUDecomposition(v).getSolver().getInverse();\n+    return v.multiply(w).multiply(vInv);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}