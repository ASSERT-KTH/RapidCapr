{
    "patch": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      boolean isDeclaration = false;\n\n      if (n.getType() == Token.NAME) {\n        isDeclaration =\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LET ||\n            parent.getType() == Token.CONST ||\n            parent.getType() == Token.CLASS ||\n            parent.getType() == Token.PARAM_LIST || // Can appear in function/method signature\n            parent.getType() == Token.FUNCTION_INPUT;\n        Preconditions.checkArgument(\n            isDeclaration || parent.getType() == Token.LP || parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis =\n            scope.isGlobal()\n                && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP && parent.getType() == Token.EXPR_RESULT);\n        isDeclaration = true;\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // don't try to declare in the global scope if there's\n      // already a symbol there with this name.\n\n      // declared in closest scope?\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n        // is merged declaration?\n      } else if (isDeclaration &&\n          nodeDeclarations.contains(n) &&\n          !n.isFromExterns() &&\n          !scope.isBlockScope()) {\n        // Create a new symbol in the local scope without setting the corresponding node\n        // (should re-process the variable declaration later)\n        Var var = scopeToDeclareIn.declare(variableName, null, null, null, false);\n        compiler.insertSynthesizedNodeAt(\n            n, new Node(Token.EMPTY, Node.newString(Constant.VAR_DECL_MARKER)));\n        var.setJSDocInfo(NodeUtil.getBestJSDocInfo(n));\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(\n                variableName,\n                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(\n                variableName + \".prototype\",\n                n,\n                fnType.getPrototype(),\n                compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null\n                    || superClassCtor\n                        .getInstanceType()\n                        .equals(getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..065a4551 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -872,22 +872,28 @@ final class TypedScopeCreator implements ScopeCreator {\n     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n+      boolean isDeclaration = false;\n+\n       if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n+        isDeclaration =\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+            parent.getType() == Token.LET ||\n+            parent.getType() == Token.CONST ||\n+            parent.getType() == Token.CLASS ||\n+            parent.getType() == Token.PARAM_LIST || // Can appear in function/method signature\n+            parent.getType() == Token.FUNCTION_INPUT;\n+        Preconditions.checkArgument(\n+            isDeclaration || parent.getType() == Token.LP || parent.getType() == Token.CATCH);\n+        shouldDeclareOnGlobalThis =\n+            scope.isGlobal()\n+                && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n       } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+            n.getType() == Token.GETPROP && parent.getType() == Token.EXPR_RESULT);\n+        isDeclaration = true;\n       }\n       String variableName = n.getQualifiedName();\n       Preconditions.checkArgument(!variableName.isEmpty());\n@@ -897,14 +903,25 @@ final class TypedScopeCreator implements ScopeCreator {\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      // don't try to declare in the global scope if there's\n+      // already a symbol there with this name.\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar = scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(\n             sourceName, n, parent, oldVar, variableName, type);\n+        // is merged declaration?\n+      } else if (isDeclaration &&\n+          nodeDeclarations.contains(n) &&\n+          !n.isFromExterns() &&\n+          !scope.isBlockScope()) {\n+        // Create a new symbol in the local scope without setting the corresponding node\n+        // (should re-process the variable declaration later)\n+        Var var = scopeToDeclareIn.declare(variableName, null, null, null, false);\n+        compiler.insertSynthesizedNodeAt(\n+            n, new Node(Token.EMPTY, Node.newString(Constant.VAR_DECL_MARKER)));\n+        var.setJSDocInfo(NodeUtil.getBestJSDocInfo(n));\n       } else {\n         if (!inferred) {\n           setDeferredType(n, type);\n@@ -917,10 +934,9 @@ final class TypedScopeCreator implements ScopeCreator {\n               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n           boolean isExtern = input.isExtern();\n           if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n+            globalThis.defineInferredProperty(\n+                variableName,\n+                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n                 isExtern);\n           } else {\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n@@ -933,12 +949,16 @@ final class TypedScopeCreator implements ScopeCreator {\n           FunctionType fnType = (FunctionType) type;\n           if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n+            scopeToDeclareIn.declare(\n+                variableName + \".prototype\",\n+                n,\n+                fnType.getPrototype(),\n+                compiler.getInput(sourceName),\n                 /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+                superClassCtor == null\n+                    || superClassCtor\n+                        .getInstanceType()\n+                        .equals(getNativeType(OBJECT_TYPE)));\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}