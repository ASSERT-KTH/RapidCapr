{
    "patch": "    // Create a new node list of parameters\n    Node newParams = new Node(Token.PARAM_LIST);\n\n    while (argList.hasChildren()) {\n      Node current = argList.removeFirst();\n      String argName = current.getString();\n\n      // Add the parameter to newParams if referenced\n      Var currentVar = fnScope.getVar(argName);\n      if (referenced.contains(currentVar)) {\n        newParams.addChildToBack(current.detach());\n      }\n    }\n\n    // Replace the old PARAM_LIST with the new one\n    function.replaceChild(argList, newParams);\n    compiler.reportCodeChange();\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b4ee3c3b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Create a new node list of parameters\n+    Node newParams = new Node(Token.PARAM_LIST);\n+\n+    while (argList.hasChildren()) {\n+      Node current = argList.removeFirst();\n+      String argName = current.getString();\n+\n+      // Add the parameter to newParams if referenced\n+      Var currentVar = fnScope.getVar(argName);\n+      if (referenced.contains(currentVar)) {\n+        newParams.addChildToBack(current.detach());\n+      }\n+    }\n+\n+    // Replace the old PARAM_LIST with the new one\n+    function.replaceChild(argList, newParams);\n+    compiler.reportCodeChange();\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}