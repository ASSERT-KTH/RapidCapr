{
    "patch": "public String getProperty(String propertyName) {\n    String propValue = \"\";\n    try {\n        Properties props = new Properties();\n        InputStream stream = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n        if (stream != null) {\n            props.load(stream);\n            propValue = props.getProperty(propertyName);\n        } else {\n            System.err.println(\"Could not load properties file.\");\n        }\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n    return propValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..af344b65 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String propertyName) {\n+    String propValue = \"\";\n+    try {\n+        Properties props = new Properties();\n+        InputStream stream = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n+        if (stream != null) {\n+            props.load(stream);\n+            propValue = props.getProperty(propertyName);\n+        } else {\n+            System.err.println(\"Could not load properties file.\");\n+        }\n+    } catch (IOException ex) {\n+        ex.printStackTrace();\n+    }\n+    return propValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}