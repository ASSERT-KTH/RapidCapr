{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField field = savedFields[i];\n        try {\n            millis = field.set(millis, resetFields);    \n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;        \n        } catch (RuntimeException e) {\n            if (text != null) {\n                String errorMessage = \"Error occurred while parsing \\\"\" + text + '\"';\n                throw new RuntimeException(errorMessage, e);\n            } else {\n                throw e;\n            }\n        }\n        if (resetFields && millis < iMillis) {\n            for (int j = i + 1; j < count; j++) {\n                SavedField next = savedFields[j];\n                DurationField nextField = next.iField.getDurationField();\n                long value;\n                while (millis < iMillis) {\n                    value = next.addWrapField(next.get(millis), 1);\n                    millis = next.set(millis, value);\n                }\n                for (int k = i + 1; k < j; k++) {\n                    SavedField middle = savedFields[k];\n                    DurationField middleField = middle.iField.getDurationField();\n                    value = middle.addWrapField(middle.get(millis), middleField.getMaximumValue());\n                    millis = middle.set(millis, value);\n                }\n            }\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..676588a3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField field = savedFields[i];\n+        try {\n+            millis = field.set(millis, resetFields);    \n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;        \n+        } catch (RuntimeException e) {\n+            if (text != null) {\n+                String errorMessage = \"Error occurred while parsing \\\"\" + text + '\"';\n+                throw new RuntimeException(errorMessage, e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        if (resetFields && millis < iMillis) {\n+            for (int j = i + 1; j < count; j++) {\n+                SavedField next = savedFields[j];\n+                DurationField nextField = next.iField.getDurationField();\n+                long value;\n+                while (millis < iMillis) {\n+                    value = next.addWrapField(next.get(millis), 1);\n+                    millis = next.set(millis, value);\n+                }\n+                for (int k = i + 1; k < j; k++) {\n+                    SavedField middle = savedFields[k];\n+                    DurationField middleField = middle.iField.getDurationField();\n+                    value = middle.addWrapField(middle.get(millis), middleField.getMaximumValue());\n+                    millis = middle.set(millis, value);\n+                }\n+            }\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}