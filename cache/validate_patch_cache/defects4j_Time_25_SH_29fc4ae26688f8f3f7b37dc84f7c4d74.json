{
    "patch": "                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if the new adjustment is greater than the current offset,\n                    // we need to remove the extra hour added in the previous adjustment\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(nextLocal - 1);\n                    int offsetPrevAdjusted = getOffset(prevAdjusted);\n                    if (offsetPrevAdjusted < offsetLocal) {\n                        return offsetPrevAdjusted;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cb858af0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if the new adjustment is greater than the current offset,\n+                    // we need to remove the extra hour added in the previous adjustment\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(nextLocal - 1);\n+                    int offsetPrevAdjusted = getOffset(prevAdjusted);\n+                    if (offsetPrevAdjusted < offsetLocal) {\n+                        return offsetPrevAdjusted;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}