{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = Arrays.copyOf(values, values.length);\n        // month field is being added to\n        if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n            // add month value to monthOfYear field\n            newValues[fieldIndex] = partial.getField(fieldIndex).addWrapField(newValues[fieldIndex], valueToAdd);\n            int year = partial.get(DateTimeFieldType.year());\n            int day = partial.get(DateTimeFieldType.dayOfMonth()).get(newValues);\n            if (newValues[fieldIndex] == 2 && day == 29 && !iChronology.isLeapYear(year)) {\n                // if the new month value is February and the day value is 29 and year is not a leap year,\n                // set the day to 28\n                day = 28;\n                newValues[fieldIndex-1] = day;\n            }\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    } else {\n        long instant = partial.toDateTimeAtStartOfDay(startTime).getMillis();\n        for (int i = 0, size = partial.size(); i < size; i++) {\n            if (i != fieldIndex) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..345d8340 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        // month field is being added to\n+        if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n+            // add month value to monthOfYear field\n+            newValues[fieldIndex] = partial.getField(fieldIndex).addWrapField(newValues[fieldIndex], valueToAdd);\n+            int year = partial.get(DateTimeFieldType.year());\n+            int day = partial.get(DateTimeFieldType.dayOfMonth()).get(newValues);\n+            if (newValues[fieldIndex] == 2 && day == 29 && !iChronology.isLeapYear(year)) {\n+                // if the new month value is February and the day value is 29 and year is not a leap year,\n+                // set the day to 28\n+                day = 28;\n+                newValues[fieldIndex-1] = day;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            return newValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        long instant = partial.toDateTimeAtStartOfDay(startTime).getMillis();\n+        for (int i = 0, size = partial.size(); i < size; i++) {\n+            if (i != fieldIndex) {\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            }\n+        }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}