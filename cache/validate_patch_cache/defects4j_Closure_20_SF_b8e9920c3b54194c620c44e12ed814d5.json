{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n        Node value = callTarget.getNext();\n        if (value != null) {\n             if (NodeUtil.isImmutableValue(value)) {\n                    // if there exists another parameter\n                    if (value.getNext() != null && value.getNext().isString()) {\n                            // String(a, \"b\") => 'ab'\n                            StringBuilder sb = new StringBuilder();\n                            sb.append(value.getString());\n                            Node strNode = value.getNext();\n                            while (strNode != null) {\n                                if (NodeUtil.isImmutableValue(strNode) && strNode.isString()) {\n                                    sb.append(strNode.getString());\n                                    strNode = strNode.getNext();\n                                } else {\n                                    break;\n                                }\n                            }\n                            if (strNode == null) {\n                                Node optimizedNode = IR.string(sb.toString());\n                                n.getParent().replaceChild(n, optimizedNode);\n                                reportCodeChange();\n                                return optimizedNode;\n                            }\n                    } else if (value.isString() && value.getString().isEmpty()) {\n                            // String() => \"\"\n                            Node optimizedNode = IR.string(\"\");\n                            n.getParent().replaceChild(n, optimizedNode);\n                            reportCodeChange();\n                            return optimizedNode;\n                    } else if (value.getNext() == null || (value.getNext().isNumber() && callTarget.getNext().getNext() == null)) {\n                        // String(a) => '' + a; String(n) => n.toString();\n                        Node optimizedNode;\n                        if (value.getNext() == null) {\n                            Node emptyString = IR.string(\"\");\n                            optimizedNode = IR.add(emptyString, value);\n                        } else {\n                            optimizedNode = IR.call(IR.getprop(value, IR.string(\"toString\")), value.getNext());\n                        }\n                        n.getParent().replaceChild(n, optimizedNode);\n                        reportCodeChange();\n                        return optimizedNode;\n                    }\n             }\n        }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..d6cce9e8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -208,23 +208,51 @@ class PeepholeSubstituteAlternateSyntax\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n-      }\n+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+        Node value = callTarget.getNext();\n+        if (value != null) {\n+             if (NodeUtil.isImmutableValue(value)) {\n+                    // if there exists another parameter\n+                    if (value.getNext() != null && value.getNext().isString()) {\n+                            // String(a, \"b\") => 'ab'\n+                            StringBuilder sb = new StringBuilder();\n+                            sb.append(value.getString());\n+                            Node strNode = value.getNext();\n+                            while (strNode != null) {\n+                                if (NodeUtil.isImmutableValue(strNode) && strNode.isString()) {\n+                                    sb.append(strNode.getString());\n+                                    strNode = strNode.getNext();\n+                                } else {\n+                                    break;\n+                                }\n+                            }\n+                            if (strNode == null) {\n+                                Node optimizedNode = IR.string(sb.toString());\n+                                n.getParent().replaceChild(n, optimizedNode);\n+                                reportCodeChange();\n+                                return optimizedNode;\n+                            }\n+                    } else if (value.isString() && value.getString().isEmpty()) {\n+                            // String() => \"\"\n+                            Node optimizedNode = IR.string(\"\");\n+                            n.getParent().replaceChild(n, optimizedNode);\n+                            reportCodeChange();\n+                            return optimizedNode;\n+                    } else if (value.getNext() == null || (value.getNext().isNumber() && callTarget.getNext().getNext() == null)) {\n+                        // String(a) => '' + a; String(n) => n.toString();\n+                        Node optimizedNode;\n+                        if (value.getNext() == null) {\n+                            Node emptyString = IR.string(\"\");\n+                            optimizedNode = IR.add(emptyString, value);\n+                        } else {\n+                            optimizedNode = IR.call(IR.getprop(value, IR.string(\"toString\")), value.getNext());\n+                        }\n+                        n.getParent().replaceChild(n, optimizedNode);\n+                        reportCodeChange();\n+                        return optimizedNode;\n+                    }\n+             }\n+        }\n     }\n     return n;\n   }",
    "result_reason": "java.lang.IllegalArgumentException: second new child has existing parent",
    "test_result": "FAIL"
}