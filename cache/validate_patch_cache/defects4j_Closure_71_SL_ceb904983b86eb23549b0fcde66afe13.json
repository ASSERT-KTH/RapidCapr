{
    "patch": "      boolean isOverride = parent.getType() == Token.ASSIGN &&\n          getprop == parent.getFirstFirstChild() &&\n          t.getScope().getVar(getprop.getFirstChild().getQualifiedName()) == null &&\n          t.getScope().isDeclared(getprop.getFirstChild().getQualifiedName(), true) &&\n          t.getScope().getVar(getprop.getFirstChild().getQualifiedName()) == null &&\n          t.inGlobalScope();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..17603484 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,12 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = parent.getType() == Token.ASSIGN &&\n+          getprop == parent.getFirstFirstChild() &&\n+          t.getScope().getVar(getprop.getFirstChild().getQualifiedName()) == null &&\n+          t.getScope().isDeclared(getprop.getFirstChild().getQualifiedName(), true) &&\n+          t.getScope().getVar(getprop.getFirstChild().getQualifiedName()) == null &&\n+          t.inGlobalScope();\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}