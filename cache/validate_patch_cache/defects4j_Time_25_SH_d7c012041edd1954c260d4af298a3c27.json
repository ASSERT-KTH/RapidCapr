{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // get the next (or previous) transition time in the adjusted timezone\n    long nextTransAdjusted = (offsetLocal < offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    if (nextTransAdjusted == instantLocal - offsetLocal) {\n        // we're in a gap, return the offset just before the transition\n        return getOffset(nextTransAdjusted - 1);\n    } else if (nextTransAdjusted == instantLocal - offsetAdjusted) {\n        // we're in an overlap, return the bigger of the two offsets\n        return Math.max(offsetLocal, offsetAdjusted);\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..85f438b5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // get the next (or previous) transition time in the adjusted timezone\n+    long nextTransAdjusted = (offsetLocal < offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    if (nextTransAdjusted == instantLocal - offsetLocal) {\n+        // we're in a gap, return the offset just before the transition\n+        return getOffset(nextTransAdjusted - 1);\n+    } else if (nextTransAdjusted == instantLocal - offsetAdjusted) {\n+        // we're in an overlap, return the bigger of the two offsets\n+        return Math.max(offsetLocal, offsetAdjusted);\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}