{
    "patch": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\n\n...\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    RealMatrix s = svd.getS();\n    RealMatrix v = svd.getV();\n\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        double sqrtSigma = Math.sqrt(s.getEntry(i, i));\n        for (int j = 0; j < v.getColumnDimension(); j++) {\n            v.setEntry(i, j, v.getEntry(i, j) * sqrtSigma);\n        }\n    }\n\n    return v.multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f09fded9a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularValueDecomposition;\n+\n+...\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    RealMatrix s = svd.getS();\n+    RealMatrix v = svd.getV();\n+\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        double sqrtSigma = Math.sqrt(s.getEntry(i, i));\n+        for (int j = 0; j < v.getColumnDimension(); j++) {\n+            v.setEntry(i, j, v.getEntry(i, j) * sqrtSigma);\n+        }\n     }\n+\n+    return v.multiply(v.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}