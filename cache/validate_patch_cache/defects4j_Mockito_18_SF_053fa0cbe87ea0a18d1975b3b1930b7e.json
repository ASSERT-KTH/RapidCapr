{
    "patch": "public static Iterable<Character> getChars(int start, int end) {\n    if (start >= end) {\n        return Collections.emptyList();\n    }\n    return () -> new Iterator<Character>() {\n        private int current = start;\n          \n        @Override\n        public boolean hasNext() {\n            return current < end;\n        }\n          \n        @Override\n        public Character next() {\n            return (char)current++;\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a6d35aba6 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Character> getChars(int start, int end) {\n+    if (start >= end) {\n+        return Collections.emptyList();\n+    }\n+    return () -> new Iterator<Character>() {\n+        private int current = start;\n+          \n+        @Override\n+        public boolean hasNext() {\n+            return current < end;\n+        }\n+          \n+        @Override\n+        public Character next() {\n+            return (char)current++;\n+        }\n+    };\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}