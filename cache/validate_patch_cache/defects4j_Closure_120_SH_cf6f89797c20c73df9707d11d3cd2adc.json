{
    "patch": "  Reference initializingReference = getInitializingReference();\n\n  if(initIndex == -1 && initializingReference != null) {\n    // check if the first reference is a function call\n    if(initializingReference.getNextReference() != null\n        && initializingReference.getNextReference().isFunctionCall()) {\n      return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7c409d2e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  Reference initializingReference = getInitializingReference();\n+\n+  if(initIndex == -1 && initializingReference != null) {\n+    // check if the first reference is a function call\n+    if(initializingReference.getNextReference() != null\n+        && initializingReference.getNextReference().isFunctionCall()) {\n+      return false;\n+    }\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}