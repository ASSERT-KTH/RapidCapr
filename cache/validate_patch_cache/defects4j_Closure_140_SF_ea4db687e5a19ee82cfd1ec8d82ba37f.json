{
    "patch": "@Override\nNode getNodeForCodeInsertion(JSModule module) {\n    if (module == null) {\n        if (inputs.length == 0) {\n            throw new IllegalStateException(\"No inputs\");\n        }\n\n        return inputs[0].getAstRoot(this);\n    }\n\n    Node astRoot = null;\n    boolean foundAstRoot = false;\n    List<JSModule> modules = getModuleGraph().getTransitiveDepsDeepestFirst(module);\n\n    for (JSModule m : modules) {\n        for (CompilerInput input : m.getInputs()) {\n            Node root = input.getAstRoot(this);\n            if (root != null && !NodeUtil.isPositionIndependentCode(root)) {\n                if (astRoot != null && (!astRoot.getSourceFileName().equals(root.getSourceFileName()) ||\n                        astRoot.getLineno() != root.getLineno())) {\n                    reportCodeChange();\n                    return root;\n                }\n                astRoot = root;\n                foundAstRoot = true;\n            }\n        }\n    }\n    if (!foundAstRoot) {\n        throw new IllegalStateException(\"Root module has no inputs\");\n    }\n    return astRoot;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..6a1d3a10 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,39 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n-\n-    checkFirstModule(modules);\n+@Override\n+Node getNodeForCodeInsertion(JSModule module) {\n+    if (module == null) {\n+        if (inputs.length == 0) {\n+            throw new IllegalStateException(\"No inputs\");\n+        }\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n+        return inputs[0].getAstRoot(this);\n     }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n \n-    initInputsByNameMap();\n-  }\n+    Node astRoot = null;\n+    boolean foundAstRoot = false;\n+    List<JSModule> modules = getModuleGraph().getTransitiveDepsDeepestFirst(module);\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n+    for (JSModule m : modules) {\n+        for (CompilerInput input : m.getInputs()) {\n+            Node root = input.getAstRoot(this);\n+            if (root != null && !NodeUtil.isPositionIndependentCode(root)) {\n+                if (astRoot != null && (!astRoot.getSourceFileName().equals(root.getSourceFileName()) ||\n+                        astRoot.getLineno() != root.getLineno())) {\n+                    reportCodeChange();\n+                    return root;\n+                }\n+                astRoot = root;\n+                foundAstRoot = true;\n+            }\n+        }\n     }\n-  }\n-\n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+    if (!foundAstRoot) {\n+        throw new IllegalStateException(\"Root module has no inputs\");\n+    }\n+    return astRoot;\n+}\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}