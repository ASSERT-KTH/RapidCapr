{
    "patch": "        int pointPos = val.indexOf('.');\n        // detect multiple dots, like \"1.2.3\" but allow scientific notation\n        if (val.replace(\",\", \"\").matches(\"^[+-]?[0-9]+(\\\\.[0-9]*)?([eE][+-]?[0-9]+)?$\") && (pointPos == -1 || val.indexOf('.', pointPos + 1) == -1)) {\n            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n                try {\n                    return Float.valueOf(val);\n                } catch (NumberFormatException nfe) {\n                    // NOPMD\n                }\n            }\n            if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n                try {\n                    return Double.valueOf(val);\n                } catch (NumberFormatException nfe) {\n                    // NOPMD\n                }\n            }\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe) {\n                // NOPMD\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException nfe) {\n                // NOPMD\n            }\n            return createBigDecimal(val);\n\n        } else {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..e6e6d26a 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,38 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        int pointPos = val.indexOf('.');\n+        // detect multiple dots, like \"1.2.3\" but allow scientific notation\n+        if (val.replace(\",\", \"\").matches(\"^[+-]?[0-9]+(\\\\.[0-9]*)?([eE][+-]?[0-9]+)?$\") && (pointPos == -1 || val.indexOf('.', pointPos + 1) == -1)) {\n+            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n+                try {\n+                    return Float.valueOf(val);\n+                } catch (NumberFormatException nfe) {\n+                    // NOPMD\n+                }\n+            }\n+            if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n+                try {\n+                    return Double.valueOf(val);\n+                } catch (NumberFormatException nfe) {\n+                    // NOPMD\n+                }\n+            }\n+            try {\n+                return createInteger(val);\n+            } catch (NumberFormatException nfe) {\n+                // NOPMD\n+            }\n+            try {\n+                return createLong(val);\n+            } catch (NumberFormatException nfe) {\n+                // NOPMD\n+            }\n+            return createBigDecimal(val);\n+\n+        } else {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}