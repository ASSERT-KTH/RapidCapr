{
    "patch": "  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    String usedArgsCount = function.getStringProp(Node.FUNCTION_USES_ARGUMENTS_ARRAY);\n    int position = 0;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      if (usedArgsCount != null && \"1\".equals(usedArgsCount) && \"arguments\".equals(argName)) {\n        // Don't strip the sole reference to an arguments object.\n        return;\n      }\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        fnScope.undeclare(var);  // Remove name from the enclosing scope.\n      } else {\n        if (var != null) {\n          // Move any parameters with default values to the function body\n          // where they could still be referenced by default value expressions.\n          Node defaultValue = NodeUtil.getRValueOfLValue(lastArg);\n          if (defaultValue != null && !defaultValue.isFunction()) {\n            Node redeclaration = IR.var(IR.name(argName), defaultValue.cloneNode());\n            lastArg.setOnlyChild(IR.name(argName));\n            function.getSecondChild().addChildToFront(redeclaration);\n            compiler.reportCodeChange();\n          }\n          if (position == 0) {\n            Node defSite = IR.exprResult(\n                IR.assign(IR.name(lastArg.getString()), IR.name(\"undefined\")));\n            function.getLastChild().addChildToFront(defSite);\n            compiler.reportCodeChange();\n          }\n          ++position;\n        }\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..73cbe128 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    String usedArgsCount = function.getStringProp(Node.FUNCTION_USES_ARGUMENTS_ARRAY);\n+    int position = 0;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (usedArgsCount != null && \"1\".equals(usedArgsCount) && \"arguments\".equals(argName)) {\n+        // Don't strip the sole reference to an arguments object.\n+        return;\n+      }\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        fnScope.undeclare(var);  // Remove name from the enclosing scope.\n+      } else {\n+        if (var != null) {\n+          // Move any parameters with default values to the function body\n+          // where they could still be referenced by default value expressions.\n+          Node defaultValue = NodeUtil.getRValueOfLValue(lastArg);\n+          if (defaultValue != null && !defaultValue.isFunction()) {\n+            Node redeclaration = IR.var(IR.name(argName), defaultValue.cloneNode());\n+            lastArg.setOnlyChild(IR.name(argName));\n+            function.getSecondChild().addChildToFront(redeclaration);\n+            compiler.reportCodeChange();\n+          }\n+          if (position == 0) {\n+            Node defSite = IR.exprResult(\n+                IR.assign(IR.name(lastArg.getString()), IR.name(\"undefined\")));\n+            function.getLastChild().addChildToFront(defSite);\n+            compiler.reportCodeChange();\n+          }\n+          ++position;\n+        }\n+        break;\n+      }\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}