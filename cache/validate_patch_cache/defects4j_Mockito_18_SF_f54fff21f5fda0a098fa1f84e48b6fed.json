{
    "patch": "public static List<String> getDataFromFile(String filePath) {\n    List<String> lines = new ArrayList<>();\n    try {\n        BufferedReader reader = new BufferedReader(new FileReader(filePath));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n        reader.close();\n    } catch (IOException e) {\n        System.err.println(\"Caught IOException: \" + e.getMessage());\n    }\n    return lines;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..184a70bde 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<String> getDataFromFile(String filePath) {\n+    List<String> lines = new ArrayList<>();\n+    try {\n+        BufferedReader reader = new BufferedReader(new FileReader(filePath));\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            lines.add(line);\n+        }\n+        reader.close();\n+    } catch (IOException e) {\n+        System.err.println(\"Caught IOException: \" + e.getMessage());\n+    }\n+    return lines;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}