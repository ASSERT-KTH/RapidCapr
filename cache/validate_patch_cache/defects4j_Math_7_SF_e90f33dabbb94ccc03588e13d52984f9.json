{
    "patch": "public int compare(EventState es0, EventState es1) {\n    return Double.compare(es0.getEventTime(), es1.getEventTime());\n}\n\npublic void doEvents(final double tMin, final RealFieldElement<?>[] y) {\n    final List<EventState> eventsStates = new ArrayList<EventState>();\n    final Set<EventState> occurringEvents = new HashSet<EventState>();\n\n    // initialize events states\n    for (final EventDetector detector : eventDetectors) {\n        detector.init(t0, y, tEnd);\n        eventsStates.add(new EventState(detector));\n    }\n\n    // set up the event order comparator\n    eventsStates.sort(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // the event occurs during the current step\n            occurringEvents.add(state);\n        }\n    }\n\n    while (!occurringEvents.isEmpty()) {\n\n        // handle the chronologically first event\n        final Iterator<EventState> iterator = occurringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // get state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final RealFieldElement<?>[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            return;\n        }\n\n        // test the events states to update their occurrence status\n        occurringEvents.clear();\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                // the event occurs during the current step\n                occurringEvents.add(state);\n            }\n        }\n\n        // sort the occurring events so that the one that will occur first appears in first position\n        eventsStates.sort(new Comparator<EventState>() {\n            public int compare(EventState es0, EventState es1) {\n                return Double.compare(es0.getEventTime(), es1.getEventTime());\n            }\n        });\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..4c585048d 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,80 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public int compare(EventState es0, EventState es1) {\n+    return Double.compare(es0.getEventTime(), es1.getEventTime());\n+}\n \n-            });\n+public void doEvents(final double tMin, final RealFieldElement<?>[] y) {\n+    final List<EventState> eventsStates = new ArrayList<EventState>();\n+    final Set<EventState> occurringEvents = new HashSet<EventState>();\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+    // initialize events states\n+    for (final EventDetector detector : eventDetectors) {\n+        detector.init(t0, y, tEnd);\n+        eventsStates.add(new EventState(detector));\n+    }\n+\n+    // set up the event order comparator\n+    eventsStates.sort(new Comparator<EventState>() {\n+        public int compare(EventState es0, EventState es1) {\n+            return Double.compare(es0.getEventTime(), es1.getEventTime());\n+        }\n+    });\n \n-            while (!occuringEvents.isEmpty()) {\n+    for (final EventState state : eventsStates) {\n+        if (state.evaluateStep(interpolator)) {\n+            // the event occurs during the current step\n+            occurringEvents.add(state);\n+        }\n+    }\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+    while (!occurringEvents.isEmpty()) {\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+        // handle the chronologically first event\n+        final Iterator<EventState> iterator = occurringEvents.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        // restrict the interpolator to the first part of the step, up to the event\n+        final double eventT = currentEvent.getEventTime();\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(eventT);\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        // get state at event time\n+        interpolator.setInterpolatedTime(eventT);\n+        final RealFieldElement<?>[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        // advance all event states to current time\n+        currentEvent.stepAccepted(eventT, eventY);\n+        isLastStep = currentEvent.stop();\n+\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n+\n+        if (isLastStep) {\n+            return;\n+        }\n+\n+        // test the events states to update their occurrence status\n+        occurringEvents.clear();\n+        for (final EventState state : eventsStates) {\n+            if (state.evaluateStep(interpolator)) {\n+                // the event occurs during the current step\n+                occurringEvents.add(state);\n+            }\n+        }\n+\n+        // sort the occurring events so that the one that will occur first appears in first position\n+        eventsStates.sort(new Comparator<EventState>() {\n+            public int compare(EventState es0, EventState es1) {\n+                return Double.compare(es0.getEventTime(), es1.getEventTime());\n+            }\n+        });\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}