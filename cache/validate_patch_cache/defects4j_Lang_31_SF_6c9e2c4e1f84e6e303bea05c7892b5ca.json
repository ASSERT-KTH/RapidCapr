{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int strLen = sequence.length();\n        final int searchLen = searchChars.length;\n        final int strLast = strLen - 1;\n        final int searchLast = searchLen - 1;\n        for (int i = 0; i < strLen; i++) {\n            final char ch = sequence.charAt(i);\n            if (ch <= Character.MAX_VALUE) {\n                for (int j = 0; j < searchLen; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            } else {\n                final char[] chArr = Character.toChars(Character.codePointAt(sequence, i));\n                final int chLen = chArr.length;\n                if (chLen > 2 && i < strLast) {\n                    final char[] chArr2 = Character.toChars(Character.codePointAt(sequence, i + 1));\n                    final char[] chArrSupp = ArrayUtils.addAll(chArr, chArr2);\n                    if (Arrays.equals(searchChars, searchLast - j + 1, chArrSupp, 0, chArrSupp.length)) {\n                        return true;\n                    }\n                } else {\n                    for (int j = 0; j < searchLen; j++) {\n                        final char searchChar = searchChars[j];\n                        if (ch == searchChar) {\n                            return true;\n                        }\n                    }\n                }\n                i += chLen - 1;\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..981a8562 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int strLen = sequence.length();\n+        final int searchLen = searchChars.length;\n+        final int strLast = strLen - 1;\n+        final int searchLast = searchLen - 1;\n+        for (int i = 0; i < strLen; i++) {\n+            final char ch = sequence.charAt(i);\n+            if (ch <= Character.MAX_VALUE) {\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            } else {\n+                final char[] chArr = Character.toChars(Character.codePointAt(sequence, i));\n+                final int chLen = chArr.length;\n+                if (chLen > 2 && i < strLast) {\n+                    final char[] chArr2 = Character.toChars(Character.codePointAt(sequence, i + 1));\n+                    final char[] chArrSupp = ArrayUtils.addAll(chArr, chArr2);\n+                    if (Arrays.equals(searchChars, searchLast - j + 1, chArrSupp, 0, chArrSupp.length)) {\n+                        return true;\n+                    }\n+                } else {\n+                    for (int j = 0; j < searchLen; j++) {\n+                        final char searchChar = searchChars[j];\n+                        if (ch == searchChar) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                i += chLen - 1;\n+            }\n+        }\n+        return false;\n+    }\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}