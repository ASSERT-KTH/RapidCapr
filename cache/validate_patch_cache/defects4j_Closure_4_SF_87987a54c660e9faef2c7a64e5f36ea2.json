{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = false;\n  JSType resolvedType = null;\n\n  // Try to resolve the type via registry\n  resolved = resolveViaRegistry(t, enclosing);\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n  } \n\n  // Try to resolve the type via properties if it was not resolved via registry\n  if (!resolved) {\n    resolveViaProperties(t, enclosing);\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }\n\n  // Handle implicit prototype cycle and return resolvedType\n  if (detectImplicitPrototypeCycle() && resolvedType == null) {\n    handleTypeCycle(t);\n    return resolveInternal(t, enclosing);\n  }\n  return (resolvedType != null) ? resolvedType : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..7c0b1965 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = false;\n+  JSType resolvedType = null;\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  // Try to resolve the type via registry\n+  resolved = resolveViaRegistry(t, enclosing);\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+  } \n \n+  // Try to resolve the type via properties if it was not resolved via registry\n+  if (!resolved) {\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  // Handle implicit prototype cycle and return resolvedType\n+  if (detectImplicitPrototypeCycle() && resolvedType == null) {\n+    handleTypeCycle(t);\n+    return resolveInternal(t, enclosing);\n+  }\n+  return (resolvedType != null) ? resolvedType : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}