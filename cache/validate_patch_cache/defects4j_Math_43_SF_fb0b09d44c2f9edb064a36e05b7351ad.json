{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // Update mean only if not overridden\n    if (!(meanImpl instanceof Mean)) {\n        meanImpl.increment(value);\n    }\n\n    // Update variance only if not overridden and n > 1, otherwise use 0\n    if (!(varianceImpl instanceof Variance)) {\n        if (n > 1) {\n            ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n        } else {\n            ((StorelessUnivariateStatistic) varianceImpl).increment(0.0);\n        }\n    }\n\n    // Update geomean only if not overridden and value > 0\n    if (!(geoMeanImpl instanceof GeometricMean) && value > 0) {\n        geoMeanImpl.increment(value);\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..a609037b3 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,36 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // Update mean only if not overridden\n+    if (!(meanImpl instanceof Mean)) {\n+        meanImpl.increment(value);\n+    }\n+\n+    // Update variance only if not overridden and n > 1, otherwise use 0\n+    if (!(varianceImpl instanceof Variance)) {\n+        if (n > 1) {\n+            ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n+        } else {\n+            ((StorelessUnivariateStatistic) varianceImpl).increment(0.0);\n         }\n-        n++;\n     }\n \n+    // Update geomean only if not overridden and value > 0\n+    if (!(geoMeanImpl instanceof GeometricMean) && value > 0) {\n+        geoMeanImpl.increment(value);\n+    }\n+\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>",
    "test_result": "FAIL"
}