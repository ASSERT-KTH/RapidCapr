{
    "patch": " Node assignmentName = thenOp.removeFirstChild();\n        Node thenExpr = thenOp.removeFirstChild();\n        Node elseExpr = elseOp.getLastChild();\n        elseOp.removeChild(elseExpr);\n        if (mayHaveSideEffects(assignmentName)) {\n          // if LHS has side effects, don't proceed [since the optimization\n          // evaluates LHS before cond]\n          // NOTE - there are some circumstances where we can\n          // proceed even if there are side effects...\n          return n;\n        }\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n        Node assign = NodeUtil.newVarNode(assignmentName.getString(), hookNode)\n                          .srcref(thenOp);\n        Node expr = NodeUtil.newExpr(assign);\n        parent.replaceChild(n, expr);\n        reportCodeChange();\n        return expr;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..5e02374a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,24 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+ Node assignmentName = thenOp.removeFirstChild();\n+        Node thenExpr = thenOp.removeFirstChild();\n+        Node elseExpr = elseOp.getLastChild();\n+        elseOp.removeChild(elseExpr);\n+        if (mayHaveSideEffects(assignmentName)) {\n+          // if LHS has side effects, don't proceed [since the optimization\n+          // evaluates LHS before cond]\n+          // NOTE - there are some circumstances where we can\n+          // proceed even if there are side effects...\n+          return n;\n+        }\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+        Node assign = NodeUtil.newVarNode(assignmentName.getString(), hookNode)\n+                          .srcref(thenOp);\n+        Node expr = NodeUtil.newExpr(assign);\n+        parent.replaceChild(n, expr);\n+        reportCodeChange();\n+        return expr;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}