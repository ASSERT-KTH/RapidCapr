{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n        Preconditions.checkNotNull(providedModule);\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Removes the require node from parent.\n      // If the require node was not removed, the traversal may visit it\n      // again and report already reported 'missing require' error.\n      if (parent != null) {\n        parent.removeChild(n);\n      } else {\n        t.getCompiler().getNodeComments().replaceWithComment(n, \"\", false);\n      }\n      compiler.reportCodeChange();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..a7197fe1 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,7 +292,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n@@ -303,10 +303,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n             new UnrecognizedRequire(n, ns, t.getSourceName()));\n       } else {\n         JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n         Preconditions.checkNotNull(providedModule);\n-\n         JSModule module = t.getModule();\n         if (moduleGraph != null &&\n             module != providedModule &&\n@@ -321,15 +318,15 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       maybeAddToSymbolTable(left);\n       maybeAddStringNodeToSymbolTable(arg);\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n+      // Removes the require node from parent.\n+      // If the require node was not removed, the traversal may visit it\n+      // again and report already reported 'missing require' error.\n+      if (parent != null) {\n+        parent.removeChild(n);\n+      } else {\n+        t.getCompiler().getNodeComments().replaceWithComment(n, \"\", false);\n       }\n+      compiler.reportCodeChange();\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}