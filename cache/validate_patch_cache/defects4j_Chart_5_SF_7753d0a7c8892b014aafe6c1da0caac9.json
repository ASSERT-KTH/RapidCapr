{
    "patch": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // if the series is sorted, use Collections.binarySearch to find the insert index\n            int insertIndex = -1;\n            if (this.autoSort) {\n                insertIndex = -(Collections.binarySearch(this.data, new XYDataItem(x, y)) + 1);\n            }\n            else {\n                // if the series is not sorted, find the insert index by iterating over the data list\n                for (int i = 0; i < this.data.size(); i++) {\n                    Number currentX = this.data.get(i).getX();\n                    if (x.doubleValue() < currentX.doubleValue()) {\n                        insertIndex = i;\n                        break;\n                    }\n                }\n                if (insertIndex == -1) {\n                    insertIndex = this.data.size();\n                }\n            }\n            this.data.add(insertIndex, new XYDataItem(x, y));\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..b2dfce7 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,52 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+    public XYDataItem addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+\n+        // if we get to here, we know that duplicate X values are not permitted\n+        XYDataItem overwritten = null;\n+        int index = indexOf(x);\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            try {\n+                overwritten = (XYDataItem) existing.clone();\n+            }\n+            catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+            existing.setY(y);\n+        }\n+        else {\n+            // if the series is sorted, use Collections.binarySearch to find the insert index\n+            int insertIndex = -1;\n+            if (this.autoSort) {\n+                insertIndex = -(Collections.binarySearch(this.data, new XYDataItem(x, y)) + 1);\n+            }\n+            else {\n+                // if the series is not sorted, find the insert index by iterating over the data list\n+                for (int i = 0; i < this.data.size(); i++) {\n+                    Number currentX = this.data.get(i).getX();\n+                    if (x.doubleValue() < currentX.doubleValue()) {\n+                        insertIndex = i;\n+                        break;\n+                    }\n+                }\n+                if (insertIndex == -1) {\n+                    insertIndex = this.data.size();\n+                }\n+            }\n+            this.data.add(insertIndex, new XYDataItem(x, y));\n+            // check if this addition will exceed the maximum item count...\n+            if (getItemCount() > this.maximumItemCount) {\n+                this.data.remove(0);\n+            }\n+        }\n+        fireSeriesChanged();\n+        return overwritten;\n+    }\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}