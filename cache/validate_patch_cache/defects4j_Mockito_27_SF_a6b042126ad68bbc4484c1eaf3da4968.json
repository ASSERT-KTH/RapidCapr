{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n        callbacks[0] = newFilter;\n        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n        factory.setCallbacks(callbacks);\n    } else if (mock instanceof MockAccess) {\n        MockAccess mockAccess = (MockAccess) mock;\n\n        InvocationContainerImpl<T> oldInvocationContainer = mockAccess.getInvocationContainer();\n        InvocationContainerImpl<T> newInvocationContainer = new InvocationContainerImpl<T>(oldInvocationContainer.mockMaker(), oldInvocationContainer.mockSettings());\n        MockHandler<T> newDelegate = new MockHandler<T>(newInvocationContainer.defaultAnswer());\n        InvocationInterceptorChain<T> newInterceptorChain = new InvocationInterceptorChain<T>(\n                newDelegate, oldInvocationContainer.interceptorChain);\n        newInvocationContainer.interceptorChain = newInterceptorChain;\n\n        MockHandler<T> oldHandler = mockAccess.getMockHandler();\n        MockInterceptor<T> newInterceptor = new MockInterceptor<T>(oldHandler);\n        newInterceptor.setHandler(newInvocationContainer.getMockHandler());\n        newInterceptorChain.setInterceptor(newInterceptor);\n        mockAccess.setMockitoInterceptor(newInterceptor);\n    } else {\n        throw new IllegalArgumentException(\"Unsupported object type: \" + mock.getClass().getName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7eeeceae6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,37 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+        callbacks[0] = newFilter;\n+        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+        factory.setCallbacks(callbacks);\n+    } else if (mock instanceof MockAccess) {\n+        MockAccess mockAccess = (MockAccess) mock;\n+\n+        InvocationContainerImpl<T> oldInvocationContainer = mockAccess.getInvocationContainer();\n+        InvocationContainerImpl<T> newInvocationContainer = new InvocationContainerImpl<T>(oldInvocationContainer.mockMaker(), oldInvocationContainer.mockSettings());\n+        MockHandler<T> newDelegate = new MockHandler<T>(newInvocationContainer.defaultAnswer());\n+        InvocationInterceptorChain<T> newInterceptorChain = new InvocationInterceptorChain<T>(\n+                newDelegate, oldInvocationContainer.interceptorChain);\n+        newInvocationContainer.interceptorChain = newInterceptorChain;\n+\n+        MockHandler<T> oldHandler = mockAccess.getMockHandler();\n+        MockInterceptor<T> newInterceptor = new MockInterceptor<T>(oldHandler);\n+        newInterceptor.setHandler(newInvocationContainer.getMockHandler());\n+        newInterceptorChain.setInterceptor(newInterceptor);\n+        mockAccess.setMockitoInterceptor(newInterceptor);\n+    } else {\n+        throw new IllegalArgumentException(\"Unsupported object type: \" + mock.getClass().getName());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}