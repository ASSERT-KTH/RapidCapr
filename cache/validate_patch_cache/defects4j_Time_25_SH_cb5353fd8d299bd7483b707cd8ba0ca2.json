{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted || offsetAdjusted == offsetLocal - 1) {\n                    return offsetLocal;\n                }\n            } else if ((offsetLocal - offsetAdjusted) > 0) {\n                long nextLocal = previousTransition(instantAdjusted);\n                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (nextLocal == instantAdjusted && nextAdjusted != instantLocal - offsetAdjusted) {\n                    // We went one step too far.\n                    nextLocal = previousTransition(nextLocal - 1);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..712ed8b2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted || offsetAdjusted == offsetLocal - 1) {\n+                    return offsetLocal;\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) > 0) {\n+                long nextLocal = previousTransition(instantAdjusted);\n+                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal == instantAdjusted && nextAdjusted != instantLocal - offsetAdjusted) {\n+                    // We went one step too far.\n+                    nextLocal = previousTransition(nextLocal - 1);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}