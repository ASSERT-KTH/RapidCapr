{
    "patch": "protected BasePeriod(long duration) {\n    // Calculate how many milliseconds would be left after removing each time unit\n    long weeksDuration = duration % WEEKS_TO_MILLIS;\n    long daysDuration = weeksDuration % DAYS_TO_MILLIS;\n    long hoursDuration = daysDuration % HOURS_TO_MILLIS;\n    long minutesDuration = hoursDuration % MINUTES_TO_MILLIS;\n    long secondsDuration = minutesDuration % SECONDS_TO_MILLIS;\n\n    // Calculate how many whole units fit into the total duration\n    this.weeks = (int) (duration / WEEKS_TO_MILLIS);\n    this.days = (int) (weeksDuration / DAYS_TO_MILLIS);\n    this.hours = (int) (daysDuration / HOURS_TO_MILLIS);\n    this.minutes = (int) (hoursDuration / MINUTES_TO_MILLIS);\n    this.seconds = (int) (minutesDuration / SECONDS_TO_MILLIS);\n    this.millis = (int) (secondsDuration % 1000);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..85036ac1 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,22 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    // Calculate how many milliseconds would be left after removing each time unit\n+    long weeksDuration = duration % WEEKS_TO_MILLIS;\n+    long daysDuration = weeksDuration % DAYS_TO_MILLIS;\n+    long hoursDuration = daysDuration % HOURS_TO_MILLIS;\n+    long minutesDuration = hoursDuration % MINUTES_TO_MILLIS;\n+    long secondsDuration = minutesDuration % SECONDS_TO_MILLIS;\n+\n+    // Calculate how many whole units fit into the total duration\n+    this.weeks = (int) (duration / WEEKS_TO_MILLIS);\n+    this.days = (int) (weeksDuration / DAYS_TO_MILLIS);\n+    this.hours = (int) (daysDuration / HOURS_TO_MILLIS);\n+    this.minutes = (int) (hoursDuration / MINUTES_TO_MILLIS);\n+    this.seconds = (int) (minutesDuration / SECONDS_TO_MILLIS);\n+    this.millis = (int) (secondsDuration % 1000);\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}