{
    "patch": "public static double getTypedPercent(String json) {\n    double typedCount = 0.0;\n    double totalCount = 0.0;\n    for (int i = 0; i < json.length(); i++) {\n        if (json.charAt(i) == '\\'') {\n            i++;\n            while (i < json.length() && json.charAt(i) != '\\'') {\n                if (json.charAt(i) == '\\\\') {\n                    i++;\n                }\n                i++;\n            }\n        } else {\n            if (json.charAt(i) == ':') {\n                totalCount++;\n            } else if (json.charAt(i) == 't' || json.charAt(i) == 'f' || json.charAt(i) == 'n') {\n                typedCount++;\n                i += 3;\n            }\n        }\n    }\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..aafeb97d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double typedCount = 0.0;\n+    double totalCount = 0.0;\n+    for (int i = 0; i < json.length(); i++) {\n+        if (json.charAt(i) == '\\'') {\n+            i++;\n+            while (i < json.length() && json.charAt(i) != '\\'') {\n+                if (json.charAt(i) == '\\\\') {\n+                    i++;\n+                }\n+                i++;\n+            }\n+        } else {\n+            if (json.charAt(i) == ':') {\n+                totalCount++;\n+            } else if (json.charAt(i) == 't' || json.charAt(i) == 'f' || json.charAt(i) == 'n') {\n+                typedCount++;\n+                i += 3;\n+            }\n+        }\n+    }\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}