{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        //get remaining line\n        StringBuilder sb = new StringBuilder();\n        char c = stream.peek();\n        while (c != '\\n') {\n            sb.append(c);\n            stream.consume();\n            c = stream.peek();\n        }\n        result = sb.toString().trim();\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..2f3d3804 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,21 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        //get remaining line\n+        StringBuilder sb = new StringBuilder();\n+        char c = stream.peek();\n+        while (c != '\\n') {\n+            sb.append(c);\n+            stream.consume();\n+            c = stream.peek();\n+        }\n+        result = sb.toString().trim();\n+    }\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}