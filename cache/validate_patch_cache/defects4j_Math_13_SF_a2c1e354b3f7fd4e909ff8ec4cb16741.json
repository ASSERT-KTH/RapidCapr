{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    final RealMatrix l = dec.getL();\n    final RealMatrix u = dec.getU();\n    final RealMatrix p = dec.getP();\n    final RealMatrix lSqrt = new Array2DRowRealMatrix(l.getRowDimension(), l.getColumnDimension());\n    final RealMatrix uSqrt = new Array2DRowRealMatrix(u.getRowDimension(), u.getColumnDimension());\n  \n    // Compute the square root of the L and U matrices\n    for (int i = 0; i < l.getRowDimension(); i++) {\n        for (int j = 0; j < l.getColumnDimension(); j++) {\n            if (i == j) {\n                lSqrt.setEntry(i, j, Math.sqrt(l.getEntry(i, j)));\n                uSqrt.setEntry(i, j, Math.sqrt(u.getEntry(i, j)));\n            } else if (i > j) {\n                lSqrt.setEntry(i, j, l.getEntry(i, j) / lSqrt.getEntry(j, j));\n                uSqrt.setEntry(i, j, 0);\n            } else {\n                lSqrt.setEntry(i, j, 0);\n                uSqrt.setEntry(i, j, u.getEntry(i, j) / uSqrt.getEntry(i, i));\n            }\n        }\n    }\n\n    // Compute the square root of the matrix by multiplying P * L^(1/2) * U^(1/2)\n    return p.multiply(lSqrt).multiply(uSqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5968acd04 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    final RealMatrix l = dec.getL();\n+    final RealMatrix u = dec.getU();\n+    final RealMatrix p = dec.getP();\n+    final RealMatrix lSqrt = new Array2DRowRealMatrix(l.getRowDimension(), l.getColumnDimension());\n+    final RealMatrix uSqrt = new Array2DRowRealMatrix(u.getRowDimension(), u.getColumnDimension());\n+  \n+    // Compute the square root of the L and U matrices\n+    for (int i = 0; i < l.getRowDimension(); i++) {\n+        for (int j = 0; j < l.getColumnDimension(); j++) {\n+            if (i == j) {\n+                lSqrt.setEntry(i, j, Math.sqrt(l.getEntry(i, j)));\n+                uSqrt.setEntry(i, j, Math.sqrt(u.getEntry(i, j)));\n+            } else if (i > j) {\n+                lSqrt.setEntry(i, j, l.getEntry(i, j) / lSqrt.getEntry(j, j));\n+                uSqrt.setEntry(i, j, 0);\n+            } else {\n+                lSqrt.setEntry(i, j, 0);\n+                uSqrt.setEntry(i, j, u.getEntry(i, j) / uSqrt.getEntry(i, i));\n+            }\n+        }\n     }\n+\n+    // Compute the square root of the matrix by multiplying P * L^(1/2) * U^(1/2)\n+    return p.multiply(lSqrt).multiply(uSqrt);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}