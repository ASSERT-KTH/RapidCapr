{
    "patch": "        if (p1 == null || p2 == null || p1.length != p2.length) {\n            return Double.NaN;\n        }\n        double sum = 0.0d;\n        for (int i = 0; i < p1.length; i++) {\n            final int dp = p1[i] - p2[i];\n            sum += dp * dp;\n        }\n        return Math.sqrt(sum);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc9f..ed7a139aa 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1620,14 +1620,15 @@ public final class MathUtils {\n      * @param p2 the second point\n      * @return the L<sub>2</sub> distance between the two points\n      */\n-    public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n-      for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n-          sum += dp * dp;\n-      }\n-      return Math.sqrt(sum);\n-    }\n+        if (p1 == null || p2 == null || p1.length != p2.length) {\n+            return Double.NaN;\n+        }\n+        double sum = 0.0d;\n+        for (int i = 0; i < p1.length; i++) {\n+            final int dp = p1[i] - p2[i];\n+            sum += dp * dp;\n+        }\n+        return Math.sqrt(sum);\n \n     /**\n      * Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}