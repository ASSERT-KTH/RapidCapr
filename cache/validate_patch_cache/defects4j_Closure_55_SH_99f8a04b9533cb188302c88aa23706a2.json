{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n    return false;\n}\nNode parent = n.getParent();\nif (parent == null) {\n    return false;\n}\nint parentType = parent.getType();\nif (parentType == Token.CALL || parentType == Token.NEW) {\n    return false;\n} else if (NodeUtil.isStatementBlock(parent)) {\n    Node functionParent = parent.getParent();\n    if (functionParent == null || functionParent.getType() != Token.FUNCTION) {\n        return false;\n    }\n} else if (parentType != Token.EXPR_RESULT && parentType != Token.ASSIGN &&\n           parentType != Token.VAR && parentType != Token.RETURN) {\n    return false;\n} else if (parent.getFirstChild() != n) { // avoid cases where the function is not the first child of the parent node\n    return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..effeb927 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,28 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+    return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null) {\n+    return false;\n+}\n+int parentType = parent.getType();\n+if (parentType == Token.CALL || parentType == Token.NEW) {\n+    return false;\n+} else if (NodeUtil.isStatementBlock(parent)) {\n+    Node functionParent = parent.getParent();\n+    if (functionParent == null || functionParent.getType() != Token.FUNCTION) {\n+        return false;\n+    }\n+} else if (parentType != Token.EXPR_RESULT && parentType != Token.ASSIGN &&\n+           parentType != Token.VAR && parentType != Token.RETURN) {\n+    return false;\n+} else if (parent.getFirstChild() != n) { // avoid cases where the function is not the first child of the parent node\n+    return false;\n+}\n+return true;\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}