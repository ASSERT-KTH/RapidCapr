{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n    Node left = assign.getFirstChild();\n    if (left != null && left.isGetProp() && left.getLastChild().getString().equals(\"prototype\")) {\n        // If assigning to a prototype property, check if it's a prototype method\n        Node right = assign.getLastChild();\n        if (right != null && right.isFunction()) {\n            Node functionBody = right.getLastChild();\n            if (functionBody != null) {\n                List<Node> statements = functionBody.children();\n                if (!statements.isEmpty() && statements.get(0).isString() &&\n                        statements.get(0).getString().equals(\"use strict\")) {\n                    // Ignore \"use strict\" statement\n                    statements = statements.subList(1, statements.size());\n                }\n                return !statements.isEmpty() && statements.get(0).isFunction();\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..b445c737 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -311,27 +311,26 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getParent().getType() == Token.NAME);\n     }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+    Node left = assign.getFirstChild();\n+    if (left != null && left.isGetProp() && left.getLastChild().getString().equals(\"prototype\")) {\n+        // If assigning to a prototype property, check if it's a prototype method\n+        Node right = assign.getLastChild();\n+        if (right != null && right.isFunction()) {\n+            Node functionBody = right.getLastChild();\n+            if (functionBody != null) {\n+                List<Node> statements = functionBody.children();\n+                if (!statements.isEmpty() && statements.get(0).isString() &&\n+                        statements.get(0).getString().equals(\"use strict\")) {\n+                    // Ignore \"use strict\" statement\n+                    statements = statements.subList(1, statements.size());\n+                }\n+                return !statements.isEmpty() && statements.get(0).isFunction();\n+            }\n         }\n-      }\n-\n-      return false;\n     }\n+    return false;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}