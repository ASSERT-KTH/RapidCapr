{
    "patch": "if (functionType instanceof NominalType) {\n  NominalType nominalType = (NominalType) functionType;\n\n  // If this is an interface type or an unannotated nominal type, then don't check `this`.\n  if (nominalType.isClass()) {\n    Node parent = n.getParent();\n    if (!NodeUtil.isGet(parent) && !NodeUtil.isOptChainGet(parent)) {\n      report(t, n, UNSAFE_THIS, childType.toString());\n    } else if (parent.getFirstChild() != n) {\n      report(t, n, UNSAFE_THIS, childType.toString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8d282768 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType instanceof NominalType) {\n+  NominalType nominalType = (NominalType) functionType;\n+\n+  // If this is an interface type or an unannotated nominal type, then don't check `this`.\n+  if (nominalType.isClass()) {\n+    Node parent = n.getParent();\n+    if (!NodeUtil.isGet(parent) && !NodeUtil.isOptChainGet(parent)) {\n+      report(t, n, UNSAFE_THIS, childType.toString());\n+    } else if (parent.getFirstChild() != n) {\n+      report(t, n, UNSAFE_THIS, childType.toString());\n+    }\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}