{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.isFunction()) {\n            if (n.isFunctionExpression()) {\n              handleFunctionInputs(parent);\n              return;\n            } else if (parent.getParent() != scope.getRootNode()) {\n              defineDeclaredFunction(n, parent);\n            }\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      \n      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n        Node grandparent = parent.getParent();\n        if (grandparent.isCall()) {\n          Node functionNode = grandparent.getFirstChild();\n          if (functionNode.isFunction()) {\n            handleFunctionInputs(functionNode);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..438f29f5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,14 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.isFunction()) {\n+            if (n.isFunctionExpression()) {\n+              handleFunctionInputs(parent);\n+              return;\n+            } else if (parent.getParent() != scope.getRootNode()) {\n+              defineDeclaredFunction(n, parent);\n+            }\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1463,6 +1467,16 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      \n+      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent.isCall()) {\n+          Node functionNode = grandparent.getFirstChild();\n+          if (functionNode.isFunction()) {\n+            handleFunctionInputs(functionNode);\n+          }\n+        }\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}