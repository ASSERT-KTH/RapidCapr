{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n\n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        if (earlierOrLater) {\n            long next = nextTransition(instantAfter);\n            long previous = previousTransition(instantBefore);\n            if (next == previous) {\n                return instant;  // not an overlap\n            }\n            return convertLocalToUTC(instantAfter, true, next);\n        } else {\n            long next = nextTransition(instant);  // reports on earlier offset\n            long previous = previousTransition(instant);  // reports on earlier offset\n            if (instant - previous <= 3 * DateTimeConstants.MILLIS_PER_HOUR) {\n                // current instant is closer to previous\n                return convertLocalToUTC(instantBefore, false, previous);\n            }\n            return convertLocalToUTC(instant, true, next);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..ec54ebd9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1162,21 +1162,30 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public long adjustOffset(long instant, boolean earlierOrLater) {\n         // a bit messy, but will work in all non-pathological cases\n-        \n+\n         // evaluate 3 hours before and after to work out if anything is happening\n         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+\n+        if (earlierOrLater) {\n+            long next = nextTransition(instantAfter);\n+            long previous = previousTransition(instantBefore);\n+            if (next == previous) {\n+                return instant;  // not an overlap\n+            }\n+            return convertLocalToUTC(instantAfter, true, next);\n+        } else {\n+            long next = nextTransition(instant);  // reports on earlier offset\n+            long previous = previousTransition(instant);  // reports on earlier offset\n+            if (instant - previous <= 3 * DateTimeConstants.MILLIS_PER_HOUR) {\n+                // current instant is closer to previous\n+                return convertLocalToUTC(instantBefore, false, previous);\n+            }\n+            return convertLocalToUTC(instant, true, next);\n+        }\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T01:15:00.000+02:00>",
    "test_result": "FAIL"
}