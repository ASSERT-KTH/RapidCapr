{
    "patch": "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {\n\n    if (node.getType() == Token.FUNCTION) {\n\n        if (hasThisAnnotationOrConstructor(node) || isFunctionDeclarationWithParentNotObjectLit(node, parent)) {\n            return false;\n        }\n\n        if (isFunctionExpressionWithParentNotVariableObjectOrCall(node, parent)) {\n            return false;\n        }\n\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (node == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (isObjectLiteralOrVariableOrCallOrAssignmentToPrototype(lhs, rhs) || isRightSideFunctionAssignedToObjectProperty(lhs, rhs)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean hasThisAnnotationOrConstructor(Node node) {\n    JSDocInfo jsDoc = node.getJSDocInfo();\n    return jsDoc != null && (jsDoc.isConstructor() || jsDoc.getParameterNames().contains(\"this\"));\n}\n\nprivate boolean isFunctionDeclarationWithParentNotObjectLit(Node node, Node parent) {\n    return NodeUtil.isFunctionDeclaration(node) && parent.getType() != Token.OBJECTLIT &&\n            !isPartOfVarOrObjectLiteralPropertyAssignment(parent);\n}\n\nprivate boolean isFunctionExpressionWithParentNotVariableObjectOrCall(Node node, Node parent) {\n    return NodeUtil.isFunctionExpression(node) &&\n            !(isPartOfVarOrObjectLiteralPropertyAssignment(parent) ||\n                    NodeUtil.isFunctionExpression(parent) ||\n                    parent.getType() == Token.CALL);\n}\n\nprivate boolean isPartOfVarOrObjectLiteralPropertyAssignment(Node node) {\n    Node parent = node.getParent();\n    return parent.getType() == Token.VAR || (parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.OBJECTLIT);\n}\n\nprivate boolean isObjectLiteralOrVariableOrCallOrAssignmentToPrototype(Node lhs, Node rhs) {\n    if ((lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) ||\n            (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\"))) {\n        return true;\n    }\n\n    if (rhs != null && (rhs.getType() == Token.OBJECTLIT || isPartOfVariableOrCall(rhs))) {\n        return true;\n    }\n\n    return false;\n}\n\nprivate boolean isRightSideFunctionAssignedToObjectProperty(Node lhs, Node rhs) {\n    return rhs != null && rhs.getType() == Token.FUNCTION &&\n            lhs.getType() == Token.GETPROP && lhs.getFirstChild().isQualifiedName();\n}\n\nprivate boolean isPartOfVariableOrCall(Node node) {\n    Node parent = node.getParent();\n    return parent.getType() == Token.VAR || NodeUtil.isFunctionExpression(parent) || parent.getType() == Token.CALL;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..506200e0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,85 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {\n+\n+    if (node.getType() == Token.FUNCTION) {\n+\n+        if (hasThisAnnotationOrConstructor(node) || isFunctionDeclarationWithParentNotObjectLit(node, parent)) {\n+            return false;\n+        }\n+\n+        if (isFunctionExpressionWithParentNotVariableObjectOrCall(node, parent)) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (node == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            if (isObjectLiteralOrVariableOrCallOrAssignmentToPrototype(lhs, rhs) || isRightSideFunctionAssignedToObjectProperty(lhs, rhs)) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean hasThisAnnotationOrConstructor(Node node) {\n+    JSDocInfo jsDoc = node.getJSDocInfo();\n+    return jsDoc != null && (jsDoc.isConstructor() || jsDoc.getParameterNames().contains(\"this\"));\n+}\n+\n+private boolean isFunctionDeclarationWithParentNotObjectLit(Node node, Node parent) {\n+    return NodeUtil.isFunctionDeclaration(node) && parent.getType() != Token.OBJECTLIT &&\n+            !isPartOfVarOrObjectLiteralPropertyAssignment(parent);\n+}\n+\n+private boolean isFunctionExpressionWithParentNotVariableObjectOrCall(Node node, Node parent) {\n+    return NodeUtil.isFunctionExpression(node) &&\n+            !(isPartOfVarOrObjectLiteralPropertyAssignment(parent) ||\n+                    NodeUtil.isFunctionExpression(parent) ||\n+                    parent.getType() == Token.CALL);\n+}\n+\n+private boolean isPartOfVarOrObjectLiteralPropertyAssignment(Node node) {\n+    Node parent = node.getParent();\n+    return parent.getType() == Token.VAR || (parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.OBJECTLIT);\n+}\n+\n+private boolean isObjectLiteralOrVariableOrCallOrAssignmentToPrototype(Node lhs, Node rhs) {\n+    if ((lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) ||\n+            (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\"))) {\n+        return true;\n+    }\n+\n+    if (rhs != null && (rhs.getType() == Token.OBJECTLIT || isPartOfVariableOrCall(rhs))) {\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+private boolean isRightSideFunctionAssignedToObjectProperty(Node lhs, Node rhs) {\n+    return rhs != null && rhs.getType() == Token.FUNCTION &&\n+            lhs.getType() == Token.GETPROP && lhs.getFirstChild().isQualifiedName();\n+}\n+\n+private boolean isPartOfVariableOrCall(Node node) {\n+    Node parent = node.getParent();\n+    return parent.getType() == Token.VAR || NodeUtil.isFunctionExpression(parent) || parent.getType() == Token.CALL;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}