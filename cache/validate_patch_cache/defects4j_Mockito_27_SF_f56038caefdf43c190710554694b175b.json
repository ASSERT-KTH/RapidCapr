{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        return;\n    }\n\n    Callback[] callbacks = ((Factory) mock).getCallbacks();\n    if (callbacks != null && callbacks.length > 0) {\n        Callback firstCallback = callbacks[0];\n        if (firstCallback instanceof MethodInterceptorFilter) {\n            ((MethodInterceptorFilter) firstCallback).setMockHandler(new MockHandler<T>());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6412733d7 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        return;\n+    }\n+\n+    Callback[] callbacks = ((Factory) mock).getCallbacks();\n+    if (callbacks != null && callbacks.length > 0) {\n+        Callback firstCallback = callbacks[0];\n+        if (firstCallback instanceof MethodInterceptorFilter) {\n+            ((MethodInterceptorFilter) firstCallback).setMockHandler(new MockHandler<T>());\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: no suitable constructor found for MockHandler(no arguments)",
    "test_result": "ERROR"
}