{
    "patch": "    ControlFlowAnalysis unusedCfa = new ControlFlowAnalysis(compiler, false, true);\n    unusedCfa.process(null, fnScope.getRootNode());\n    // Record which symbols are used.\n    Sets.newHashSet(referenced);\n    for (Var v : unusedCfa.getUnreferenced()) {\n      String name = v.getName();\n      Node closestDecl = NodeUtil.getClosestNodeToEnclosingScope(v.getNode());\n      boolean isParamList = NodeUtil.isFunctionParameters(closestDecl);\n      if (!isParamList || !NodeUtil.isFunctionExpression(fnScope.getRootNode())) {\n        Node varName = NodeUtil.newName(compiler, name, closestDecl);\n        NodeUtil.getEnclosingBlock(closestDecl).replaceChild(closestDecl, varName);\n        compiler.reportCodeChange();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4471eead 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ControlFlowAnalysis unusedCfa = new ControlFlowAnalysis(compiler, false, true);\n+    unusedCfa.process(null, fnScope.getRootNode());\n+    // Record which symbols are used.\n+    Sets.newHashSet(referenced);\n+    for (Var v : unusedCfa.getUnreferenced()) {\n+      String name = v.getName();\n+      Node closestDecl = NodeUtil.getClosestNodeToEnclosingScope(v.getNode());\n+      boolean isParamList = NodeUtil.isFunctionParameters(closestDecl);\n+      if (!isParamList || !NodeUtil.isFunctionExpression(fnScope.getRootNode())) {\n+        Node varName = NodeUtil.newName(compiler, name, closestDecl);\n+        NodeUtil.getEnclosingBlock(closestDecl).replaceChild(closestDecl, varName);\n+        compiler.reportCodeChange();\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}