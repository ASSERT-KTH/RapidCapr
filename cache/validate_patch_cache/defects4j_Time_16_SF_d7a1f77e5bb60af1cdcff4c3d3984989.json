{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono;\n    long instantMillis;\n    if (instant.isSupported(DateTimeFieldType.year()) &&\n            instant.isSupported(DateTimeFieldType.monthOfYear()) &&\n            instant.isSupported(DateTimeFieldType.dayOfMonth()) &&\n            instant.isSupported(DateTimeFieldType.hourOfDay()) &&\n            instant.isSupported(DateTimeFieldType.minuteOfHour()) &&\n            instant.isSupported(DateTimeFieldType.secondOfMinute()) &&\n            instant.isSupported(DateTimeFieldType.millisOfSecond())) {\n        chrono = instant.getChronology();\n        instantMillis = instant.getMillis();\n    } else {\n        chrono = selectChronology(null);\n        instantMillis = 0L;\n    }\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis,\n        chrono,\n        iLocale,\n        iPivotYear,\n        iDefaultYear\n    );\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(true, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..d8fb0445 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,48 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono;\n+    long instantMillis;\n+    if (instant.isSupported(DateTimeFieldType.year()) &&\n+            instant.isSupported(DateTimeFieldType.monthOfYear()) &&\n+            instant.isSupported(DateTimeFieldType.dayOfMonth()) &&\n+            instant.isSupported(DateTimeFieldType.hourOfDay()) &&\n+            instant.isSupported(DateTimeFieldType.minuteOfHour()) &&\n+            instant.isSupported(DateTimeFieldType.secondOfMinute()) &&\n+            instant.isSupported(DateTimeFieldType.millisOfSecond())) {\n+        chrono = instant.getChronology();\n+        instantMillis = instant.getMillis();\n+    } else {\n+        chrono = selectChronology(null);\n+        instantMillis = 0L;\n+    }\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis,\n+        chrono,\n+        iLocale,\n+        iPivotYear,\n+        iDefaultYear\n+    );\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(true, text));\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T00:00:00.000+09:00>",
    "test_result": "FAIL"
}