{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n\n            } else {\n\n                // perform a reduction step\n                final RealPointValuePair[] reduced = contractInside(original, comparator);\n                simplex = reduced;\n            }\n        }\n\n        // check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) {\n            return;\n        }\n    }\n}\n\n/**\n * Contract the simplex around the best point by shrinking all the other points\n * towards the best point.\n *\n * @param original\n *            Simplex to shrink.\n * @param comparator\n *            Used to sort the simplex vertices.\n * @return the contracted simplex\n */\nprivate RealPointValuePair[] contractInside(final RealPointValuePair[] original,\n        final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n\n    contractedSimplex[0] = best; // Best point is kept as is\n    for (int i = 1; i < original.length; i++) {\n        final double[] contractedPoint = new double[getNumParameters()];\n        final RealPointValuePair prev = original[i];\n        for (int j = 0; j < getNumParameters(); j++) {\n            contractedPoint[j] = best.getPoint()[j] + sigma * (prev.getPoint()[j] - best.getPoint()[j]);\n        }\n        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN, false);\n    }\n\n    Arrays.sort(contractedSimplex, comparator); // sort the contracted simplex\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d37d3a5ce 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,83 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n \n-            // check convergence\n-                return;\n+            } else {\n+\n+                // perform a reduction step\n+                final RealPointValuePair[] reduced = contractInside(original, comparator);\n+                simplex = reduced;\n             }\n+        }\n \n+        // check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) {\n+            return;\n         }\n+    }\n+}\n \n+/**\n+ * Contract the simplex around the best point by shrinking all the other points\n+ * towards the best point.\n+ *\n+ * @param original\n+ *            Simplex to shrink.\n+ * @param comparator\n+ *            Used to sort the simplex vertices.\n+ * @return the contracted simplex\n+ */\n+private RealPointValuePair[] contractInside(final RealPointValuePair[] original,\n+        final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+\n+    contractedSimplex[0] = best; // Best point is kept as is\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] contractedPoint = new double[getNumParameters()];\n+        final RealPointValuePair prev = original[i];\n+        for (int j = 0; j < getNumParameters(); j++) {\n+            contractedPoint[j] = best.getPoint()[j] + sigma * (prev.getPoint()[j] - best.getPoint()[j]);\n+        }\n+        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN, false);\n     }\n \n+    Arrays.sort(contractedSimplex, comparator); // sort the contracted simplex\n+    return contractedSimplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}