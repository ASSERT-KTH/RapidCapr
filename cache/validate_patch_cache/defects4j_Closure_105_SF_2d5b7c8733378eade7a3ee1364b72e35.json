{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  Node arrayNode = left.getFirstChild();\n  if (arrayNode == null ||\n      arrayNode.getNext() == null ||\n      arrayNode.getType() != Token.ARRAYLIT ||\n      !arrayNode.getNext().getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = new ArrayList<>();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n\n  Node elem = arrayNode.getFirstChild();\n  boolean prevWasString = false;\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (elem.isString()) {\n        // Include the length of string elements in the folded size.\n        int elemLength = elem.getString().length();\n        foldedSize += elemLength;\n        if (prevWasString) {\n          foldedSize += joinString.length();\n        }\n        sb.append(elem.getString());\n        prevWasString = true;\n      } else {\n        // Replace non-string immutable values with an empty string.\n        foldedSize += 2;\n        if (prevWasString) {\n          foldedSize += joinString.length();\n        }\n        prevWasString = true;\n      }\n    } else {\n      if (sb.length() > 0) {\n        // Append adjacent string elements.\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      arrayFoldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n      prevWasString = false;\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  int sizeOfJoinResult = 0;\n  if (!arrayFoldedChildren.isEmpty()) {\n    // Account for the size of the join result string and the array separator string(s).\n    sizeOfJoinResult = (arrayFoldedChildren.size() - 1) * joinString.length();\n    for (Node node : arrayFoldedChildren) {\n      if (node.isString()) {\n        sizeOfJoinResult += node.getString().length();\n      } else {\n        break;\n      }\n    }\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  if (sizeOfJoinResult <= originalSize) {\n    Node arrayNodeJoined = new Node(Token.CALL, arrayNode.cloneTree());\n    arrayNodeJoined.putBooleanProp(Node.FREE_CALL, true);\n    arrayNodeJoined.putBooleanProp(Node.NO_SIDE_EFFECTS, true);\n    arrayNodeJoined.addChildToBack(right.cloneTree());\n    parent.replaceChild(n, arrayNodeJoined);\n    t.getCompiler().reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..ebcbaf9f 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,81 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n-\n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  Node arrayNode = left.getFirstChild();\n+  if (arrayNode == null ||\n+      arrayNode.getNext() == null ||\n+      arrayNode.getType() != Token.ARRAYLIT ||\n+      !arrayNode.getNext().getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = new ArrayList<>();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+\n+  Node elem = arrayNode.getFirstChild();\n+  boolean prevWasString = false;\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (elem.isString()) {\n+        // Include the length of string elements in the folded size.\n+        int elemLength = elem.getString().length();\n+        foldedSize += elemLength;\n+        if (prevWasString) {\n+          foldedSize += joinString.length();\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        sb.append(elem.getString());\n+        prevWasString = true;\n       } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        // Replace non-string immutable values with an empty string.\n+        foldedSize += 2;\n+        if (prevWasString) {\n+          foldedSize += joinString.length();\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        prevWasString = true;\n       }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+    } else {\n+      if (sb.length() > 0) {\n+        // Append adjacent string elements.\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+      }\n+      arrayFoldedChildren.add(elem);\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      prevWasString = false;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+    elem = elem.getNext();\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n+  int sizeOfJoinResult = 0;\n+  if (!arrayFoldedChildren.isEmpty()) {\n+    // Account for the size of the join result string and the array separator string(s).\n+    sizeOfJoinResult = (arrayFoldedChildren.size() - 1) * joinString.length();\n+    for (Node node : arrayFoldedChildren) {\n+      if (node.isString()) {\n+        sizeOfJoinResult += node.getString().length();\n+      } else {\n         break;\n+      }\n     }\n+  }\n+\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  if (sizeOfJoinResult <= originalSize) {\n+    Node arrayNodeJoined = new Node(Token.CALL, arrayNode.cloneTree());\n+    arrayNodeJoined.putBooleanProp(Node.FREE_CALL, true);\n+    arrayNodeJoined.putBooleanProp(Node.NO_SIDE_EFFECTS, true);\n+    arrayNodeJoined.addChildToBack(right.cloneTree());\n+    parent.replaceChild(n, arrayNodeJoined);\n     t.getCompiler().reportCodeChange();\n   }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}