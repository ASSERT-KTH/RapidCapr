{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if(m.getRowDimension() != m.getColumnDimension()) {\n        throw new IllegalArgumentException(\"Matrix must be square\");\n    }\n    \n    int dim = m.getRowDimension();\n    double[][] sqrt = new double[dim][dim];\n    \n    // Cholesky Decomposition\n    for(int i=0; i<dim; i++) {\n        for(int j=0; j<=i; j++) {\n            double sum = 0.0;\n            for(int k=0; k<j; k++) {\n                sum += sqrt[i][k] * sqrt[j][k];\n            }\n            if(i == j) {\n                // diagonal elements\n                sqrt[i][j] = Math.sqrt(m.getEntry(i, i) - sum);\n            } else {\n                // lower triangular elements\n                sqrt[i][j] = (m.getEntry(i, j) - sum) / sqrt[j][j];\n            }\n        }\n    }\n    \n    return new Array2DRowRealMatrix(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4de4a2dd5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if(m.getRowDimension() != m.getColumnDimension()) {\n+        throw new IllegalArgumentException(\"Matrix must be square\");\n     }\n+    \n+    int dim = m.getRowDimension();\n+    double[][] sqrt = new double[dim][dim];\n+    \n+    // Cholesky Decomposition\n+    for(int i=0; i<dim; i++) {\n+        for(int j=0; j<=i; j++) {\n+            double sum = 0.0;\n+            for(int k=0; k<j; k++) {\n+                sum += sqrt[i][k] * sqrt[j][k];\n+            }\n+            if(i == j) {\n+                // diagonal elements\n+                sqrt[i][j] = Math.sqrt(m.getEntry(i, i) - sum);\n+            } else {\n+                // lower triangular elements\n+                sqrt[i][j] = (m.getEntry(i, j) - sum) / sqrt[j][j];\n+            }\n+        }\n+    }\n+    \n+    return new Array2DRowRealMatrix(sqrt);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}