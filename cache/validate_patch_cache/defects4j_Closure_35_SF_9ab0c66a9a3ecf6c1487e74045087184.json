{
    "patch": "  private void inferTemplateTypeName(\n      NodeTraversal t, ObjectType templateType, ObjectType instanceType) {\n    // Match type parameters between the two types.\n    ImmutableMap<String, JSType> typeMap = ObjectType.matchGenerics(templateType, instanceType);\n    for (String templateTypeParamName : typeMap.keySet()) {\n      JSType concreteType = typeMap.get(templateTypeParamName);\n\n      for (String property : templateType.getOwnPropertyNames()) {\n        JSType propType = templateType.getPropertyType(property);\n        if (propType.isTemplateType()) {\n          if (propType.getTemplateTypeName().equals(templateTypeParamName)) {\n            // If the type's own parameter is satisfied by this concrete type, it never needs to be\n            // replaced anywhere in the type.\n            continue;\n          }\n          JSType inferredType = concreteType.substituteGenerics(templateTypeParamName, propType);\n          if (inferredType != null) {\n            instanceType.defineInferredProperty(property, inferredType, null);\n          }\n        } else if (propType.inverseSubtype(concreteType)) {\n          // For a non-template type, replace its type variable anywhere in the type with the\n          // concrete type.\n          ObjectType newType = ObjectType.castWithTypes(templateType).\n              substituteGenerics(templateTypeParamName, concreteType);\n          instanceType.defineInferredProperty(property, newType, null);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9161c83c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,32 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+  private void inferTemplateTypeName(\n+      NodeTraversal t, ObjectType templateType, ObjectType instanceType) {\n+    // Match type parameters between the two types.\n+    ImmutableMap<String, JSType> typeMap = ObjectType.matchGenerics(templateType, instanceType);\n+    for (String templateTypeParamName : typeMap.keySet()) {\n+      JSType concreteType = typeMap.get(templateTypeParamName);\n+\n+      for (String property : templateType.getOwnPropertyNames()) {\n+        JSType propType = templateType.getPropertyType(property);\n+        if (propType.isTemplateType()) {\n+          if (propType.getTemplateTypeName().equals(templateTypeParamName)) {\n+            // If the type's own parameter is satisfied by this concrete type, it never needs to be\n+            // replaced anywhere in the type.\n+            continue;\n           }\n+          JSType inferredType = concreteType.substituteGenerics(templateTypeParamName, propType);\n+          if (inferredType != null) {\n+            instanceType.defineInferredProperty(property, inferredType, null);\n+          }\n+        } else if (propType.inverseSubtype(concreteType)) {\n+          // For a non-template type, replace its type variable anywhere in the type with the\n+          // concrete type.\n+          ObjectType newType = ObjectType.castWithTypes(templateType).\n+              substituteGenerics(templateTypeParamName, concreteType);\n+          instanceType.defineInferredProperty(property, newType, null);\n         }\n-      }\n-    }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}