{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(NULL_TYPE);\n  }\n  n.setJSType(type);\n  if (constructor.getNext() != null) {\n    Node arg = constructor.getNext().getFirstChild();\n    if (arg != null && arg.isObjectLit()) {\n      JSType thisType = type.getTypeOfThis();\n      if (thisType == null) {\n        thisType = getNativeType(OBJECT_TYPE);\n      }\n      ObjectType objectType = thisType.toMaybeObjectType();\n      if (objectType != null) {\n        for (Node prop = arg.getFirstChild(); prop != null; prop = prop.getNext()) {\n          if (prop.getJSType() == null) {\n            prop.setJSType(getNativeType(UNKNOWN_TYPE));\n          }\n          if (prop.isStringKey()) {\n            String propName = prop.getString();\n            Node value = prop.getFirstChild();\n            if (value != null) {\n              JSType propType = value.getJSType();\n              if (propType != null) {\n                objectType.defineDeclaredProperty(propName, propType, prop);\n              } else {\n                objectType.defineDeclaredProperty(propName, getNativeType(UNKNOWN_TYPE), prop);\n              }\n              Scope.Var var = scope.getSlot(propName);\n              if (var != null) {\n                var.setType(var.getType().withProperty(propName, propType, false));\n              }\n              scope = traverse(value, scope);\n            }\n          }\n        }\n      }\n    } else {\n      for (; arg != null; arg = arg.getNext()) {\n        if (arg.getJSType() == null) {\n          arg.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n        scope = traverse(arg, scope);\n      }\n    }\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..8bc630ad 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,69 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+      }\n+    }\n+  }\n+  if (type == null) {\n+    type = getNativeType(NULL_TYPE);\n+  }\n+  n.setJSType(type);\n+  if (constructor.getNext() != null) {\n+    Node arg = constructor.getNext().getFirstChild();\n+    if (arg != null && arg.isObjectLit()) {\n+      JSType thisType = type.getTypeOfThis();\n+      if (thisType == null) {\n+        thisType = getNativeType(OBJECT_TYPE);\n+      }\n+      ObjectType objectType = thisType.toMaybeObjectType();\n+      if (objectType != null) {\n+        for (Node prop = arg.getFirstChild(); prop != null; prop = prop.getNext()) {\n+          if (prop.getJSType() == null) {\n+            prop.setJSType(getNativeType(UNKNOWN_TYPE));\n+          }\n+          if (prop.isStringKey()) {\n+            String propName = prop.getString();\n+            Node value = prop.getFirstChild();\n+            if (value != null) {\n+              JSType propType = value.getJSType();\n+              if (propType != null) {\n+                objectType.defineDeclaredProperty(propName, propType, prop);\n+              } else {\n+                objectType.defineDeclaredProperty(propName, getNativeType(UNKNOWN_TYPE), prop);\n+              }\n+              Scope.Var var = scope.getSlot(propName);\n+              if (var != null) {\n+                var.setType(var.getType().withProperty(propName, propType, false));\n+              }\n+              scope = traverse(value, scope);\n+            }\n+          }\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+      }\n+    } else {\n+      for (; arg != null; arg = arg.getNext()) {\n+        if (arg.getJSType() == null) {\n+          arg.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n+        scope = traverse(arg, scope);\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}