{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n        if (newValues[1] == 2 && newValues[2] > maxDay) {\n            // Reset the day of the month if the original was February 29 in a non-leap year\n            if (!iChronology.year().isLeap(newValues[0]) && newValues[2] == 29) {\n                newValues[2] = 28;\n                if (newValues[1] > 1) {\n                    newValues[1]--;\n                } else {\n                    newValues[1] = 12;\n                    newValues[0]--;\n                }\n            } else {\n                newValues[2] = maxDay;\n            }\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1676ee3a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,37 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+        instant = add(instant, valueToAdd);\n+        int[] newValues = iChronology.get(partial, instant);\n+        if (newValues[1] == 2 && newValues[2] > maxDay) {\n+            // Reset the day of the month if the original was February 29 in a non-leap year\n+            if (!iChronology.year().isLeap(newValues[0]) && newValues[2] == 29) {\n+                newValues[2] = 28;\n+                if (newValues[1] > 1) {\n+                    newValues[1]--;\n+                } else {\n+                    newValues[1] = 12;\n+                    newValues[0]--;\n+                }\n+            } else {\n+                newValues[2] = maxDay;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}