{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 0;\n    }\n\n    if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n\n    double sum = 1/a;\n    double term = sum;\n    while (Math.abs(term/sum) > PRECISION) {\n        ++a;\n        term *= x / a;\n        sum += term;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 1;\n    }\n\n    if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x);\n    }\n\n    ContinuedFraction cf = new ContinuedFraction() {\n        @Override\n        protected double getB(int n, double x) {\n            if (n % 2 == 0) {\n                return n * (b + n);\n            }\n            return x;\n        }\n\n        @Override\n        protected double getA(int n, double x) {\n            return n * (a - n);\n        }\n    };\n\n    return 1 / cf.evaluate(x);\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + GAMMA_CONSTANT) - (x + GAMMA_CONSTANT);\n    double sum = LOG_2_PI + tmp;\n\n    double ak = x;\n    double term = 1.0 / ak;\n    do {\n        ++ak;\n        term *= x / ak;\n        sum += term;\n    } while (Math.abs(term / sum) > PRECISION);\n\n    return sum;\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c10d9d49a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,76 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    }\n+\n+    if (x >= a + 1) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+\n+    double sum = 1/a;\n+    double term = sum;\n+    while (Math.abs(term/sum) > PRECISION) {\n+        ++a;\n+        term *= x / a;\n+        sum += term;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 1;\n+    }\n+\n+    if (x < a + 1) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+\n+    ContinuedFraction cf = new ContinuedFraction() {\n+        @Override\n+        protected double getB(int n, double x) {\n+            if (n % 2 == 0) {\n+                return n * (b + n);\n+            }\n+            return x;\n+        }\n+\n+        @Override\n+        protected double getA(int n, double x) {\n+            return n * (a - n);\n+        }\n+    };\n+\n+    return 1 / cf.evaluate(x);\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + GAMMA_CONSTANT) - (x + GAMMA_CONSTANT);\n+    double sum = LOG_2_PI + tmp;\n+\n+    double ak = x;\n+    double term = 1.0 / ak;\n+    do {\n+        ++ak;\n+        term *= x / ak;\n+        sum += term;\n+    } while (Math.abs(term / sum) > PRECISION);\n+\n+    return sum;\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}