{
    "patch": "public static <K, V> Map<K, List<V>> groupBy(Iterable<V> values, Function<V, K> keyExtractor) {\n    if (values == null) {\n        return null;\n    }\n    Map<K, List<V>> result = new HashMap<>();\n    for (V value : values) {\n        K key = keyExtractor.apply(value);\n        result.computeIfAbsent(key, k -> new ArrayList<>()).add(value);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..6369ef6a9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <K, V> Map<K, List<V>> groupBy(Iterable<V> values, Function<V, K> keyExtractor) {\n+    if (values == null) {\n+        return null;\n+    }\n+    Map<K, List<V>> result = new HashMap<>();\n+    for (V value : values) {\n+        K key = keyExtractor.apply(value);\n+        result.computeIfAbsent(key, k -> new ArrayList<>()).add(value);\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}