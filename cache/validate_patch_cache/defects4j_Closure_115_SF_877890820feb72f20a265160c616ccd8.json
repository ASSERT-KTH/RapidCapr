{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn() || stmt.isThrow()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  Node fnNameExpr = NodeUtil.getFunctionNameExpression(fnNode);\n  if (fnNameExpr == null) {\n    // Anonymous function. Don't inline.\n    return CanInlineResult.NO;\n  }\n\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Check if the call is a constructor call. We don't want to inline constructors.\n  if (callNode.isNew()) {\n    return CanInlineResult.NO;\n  }\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  List<Node> params = NodeUtil.getFunctionParameters(fnNode).children();\n\n  while (cArg != null || !params.isEmpty()) {\n    if (!params.isEmpty() && params.get(0).getString().equals(\"arguments\")) {\n      // Don't inline if the argument is the \"arguments\" array.\n      return CanInlineResult.NO;\n    }\n\n    if (params.isEmpty()) {\n      // The function expects fewer parameters.\n      return CanInlineResult.NO;\n    }\n\n    Node param = params.remove(0);\n\n    if (cArg == null) {\n      // The function expects more parameters.\n      // Check if it has a default value, because missing trailing arguments may be filled in with defaults.\n      if (NodeUtil.isNameDeclarationWithoutAssignment(param.getParent())) {\n        if (param.hasChildren()) {\n          // A param with a default value. It's fine that we are missing an argument for this param.\n          continue;\n        } else {\n          // A required param. We can't inline if we are missing an argument.\n          return CanInlineResult.NO;\n        }\n      } else {\n        // This param should have been removed as part of destructuring, so it is an error if we get here.\n        Preconditions.checkState(param.isDestructuringPattern());\n        return CanInlineResult.NO;\n      }\n    } else {\n      // For each named parameter, check if the corresponding argument has side effects.\n      if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n        return CanInlineResult.NO;\n      }\n      // Check for arguments that are evaluated more than once.\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n    }\n  }\n\n  // If there are trailing arguments to the call, don't inline if calling the function has side effects.\n  if (cArg != null && hasSideEffects) {\n    return CanInlineResult.NO;\n  }\n\n  // Finally, we need to check if the function referenced in the call is the same one that we are inlining.\n  Node callee = callNode.getFirstChild();\n  if (callee.isName() && callee.getString().equals(fnNameExpr.getString())) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..98e68d66 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,108 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+  boolean hasSideEffects = false;\n+  if (block.hasChildren()) {\n+    Node stmt = block.getFirstChild();\n+    if (stmt.isReturn() || stmt.isThrow()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n     }\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node fnNameExpr = NodeUtil.getFunctionNameExpression(fnNode);\n+  if (fnNameExpr == null) {\n+    // Anonymous function. Don't inline.\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node cArg = callNode.getFirstChild().getNext();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+  // Check if the call is a constructor call. We don't want to inline constructors.\n+  if (callNode.isNew()) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  // Functions called via 'call' and 'apply' have a this-object as\n+  // the first parameter, but this is not part of the called function's\n+  // parameter list.\n+  if (!callNode.getFirstChild().isName()) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n       }\n+      cArg = cArg.getNext();\n+    } else {\n+      // \".apply\" call should be filtered before this.\n+      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  List<Node> params = NodeUtil.getFunctionParameters(fnNode).children();\n+\n+  while (cArg != null || !params.isEmpty()) {\n+    if (!params.isEmpty() && params.get(0).getString().equals(\"arguments\")) {\n+      // Don't inline if the argument is the \"arguments\" array.\n+      return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    if (params.isEmpty()) {\n+      // The function expects fewer parameters.\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    Node param = params.remove(0);\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+    if (cArg == null) {\n+      // The function expects more parameters.\n+      // Check if it has a default value, because missing trailing arguments may be filled in with defaults.\n+      if (NodeUtil.isNameDeclarationWithoutAssignment(param.getParent())) {\n+        if (param.hasChildren()) {\n+          // A param with a default value. It's fine that we are missing an argument for this param.\n+          continue;\n+        } else {\n+          // A required param. We can't inline if we are missing an argument.\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+      } else {\n+        // This param should have been removed as part of destructuring, so it is an error if we get here.\n+        Preconditions.checkState(param.isDestructuringPattern());\n+        return CanInlineResult.NO;\n+      }\n+    } else {\n+      // For each named parameter, check if the corresponding argument has side effects.\n+      if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+        return CanInlineResult.NO;\n       }\n+      // Check for arguments that are evaluated more than once.\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      cArg = cArg.getNext();\n     }\n+  }\n+\n+  // If there are trailing arguments to the call, don't inline if calling the function has side effects.\n+  if (cArg != null && hasSideEffects) {\n+    return CanInlineResult.NO;\n+  }\n \n-    return CanInlineResult.YES;\n+  // Finally, we need to check if the function referenced in the call is the same one that we are inlining.\n+  Node callee = callNode.getFirstChild();\n+  if (callee.isName() && callee.getString().equals(fnNameExpr.getString())) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}