{
    "patch": "Matcher patternMatcher = formatPattern.matcher(pattern);\nif (!patternMatcher.lookingAt()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\ncurrentFormatField = patternMatcher.group();\nStrategy currentStrategy = getStrategy(currentFormatField);\nList<Strategy> collector = new ArrayList<>();\nwhile (patternMatcher.find()) {\n    String nextFormatField = patternMatcher.group();\n    nextStrategy = getStrategy(nextFormatField);\n    if (currentStrategy != null && currentStrategy != nextStrategy) {\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        } else {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        currentStrategy = nextStrategy;\n        currentFormatField = nextFormatField;\n    } else if (currentStrategy == null) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    } else {\n        currentFormatField += nextFormatField;\n    }\n}\nif (currentStrategy != null) {\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    } else {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..0905a822 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,41 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+Matcher patternMatcher = formatPattern.matcher(pattern);\n+if (!patternMatcher.lookingAt()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+currentFormatField = patternMatcher.group();\n+Strategy currentStrategy = getStrategy(currentFormatField);\n+List<Strategy> collector = new ArrayList<>();\n+while (patternMatcher.find()) {\n+    String nextFormatField = patternMatcher.group();\n+    nextStrategy = getStrategy(nextFormatField);\n+    if (currentStrategy != null && currentStrategy != nextStrategy) {\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        currentStrategy = nextStrategy;\n+        currentFormatField = nextFormatField;\n+    } else if (currentStrategy == null) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    } else {\n+        currentFormatField += nextFormatField;\n+    }\n+}\n+if (currentStrategy != null) {\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}