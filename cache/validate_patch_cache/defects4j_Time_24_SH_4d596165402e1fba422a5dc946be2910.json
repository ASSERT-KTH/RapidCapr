{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField save = savedFields[i];\n    long next = save.set(millis, resetFields);\n    if (next != millis) {\n        // if the duration added by this field overflows the millis value,\n        // set the millis to the max value it can hold to avoid rollover.\n        if (next < millis && save.getFieldType() == DateTimeFieldType.year()) {\n            millis = Long.MAX_VALUE;\n        } else {\n            // transitively propagate the carry to the higher fields\n            for (int j = i + 1; j < count; j++) {\n                long carry = savedFields[j - 1].setNext(millis, savedFields[j]);\n                millis += carry;\n            }\n            millis = next;\n        }    \n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f1fcd194 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField save = savedFields[i];\n+    long next = save.set(millis, resetFields);\n+    if (next != millis) {\n+        // if the duration added by this field overflows the millis value,\n+        // set the millis to the max value it can hold to avoid rollover.\n+        if (next < millis && save.getFieldType() == DateTimeFieldType.year()) {\n+            millis = Long.MAX_VALUE;\n+        } else {\n+            // transitively propagate the carry to the higher fields\n+            for (int j = i + 1; j < count; j++) {\n+                long carry = savedFields[j - 1].setNext(millis, savedFields[j]);\n+                millis += carry;\n+            }\n+            millis = next;\n+        }    \n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}