{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        Node expression = maybeExpr;\n\n        // Handle cases of negation of expression\n        if (expression.getType() == Token.NOT) {\n          if (expression.getFirstChild().getType() == Token.NAME){\n            String name = expression.getFirstChild().getString();\n            return !name.startsWith(\"event\") || !n.getParent().getParent().getLastChild().getString().equals(\"handler\");\n          }\n          else{\n            return false;\n          }\n        }\n\n        // Handle cases of name expressions\n        if (expression.getType() == Token.NAME) {\n          String name = expression.getString();\n          return !name.startsWith(\"on\") && !name.equals(\"$jscomp\");\n        }\n\n        // Handle cases of property access expressions\n        if (expression.getType() == Token.GETPROP) {\n          if (expression.getFirstChild().getType() == Token.NAME) {\n            String name = expression.getFirstChild().getString();\n            if (name.startsWith(\"$jscomp\") || name.equals(\"goog\")) {\n              return false;\n            }\n          }\n          String propName = expression.getLastChild().getString();\n          if (propName.equals(\"returnValue\")) {\n            return !n.getParent().getParent().getLastChild().getString().equals(\"handler\");\n          } else {\n            return true;\n          }\n        }\n\n        // Handle cases of conditional expressions (ternary operator)\n        if (expression.getType() == Token.HOOK) {\n          Node trueExpr = expression.getChildAtIndex(1);\n          Node falseExpr = expression.getChildAtIndex(2);\n          boolean trueIsExpr = isFoldableExpressBlock(new Node(Token.BLOCK, trueExpr));\n          boolean falseIsExpr = isFoldableExpressBlock(new Node(Token.BLOCK, falseExpr));\n          return trueIsExpr && falseIsExpr;\n        }\n\n        // Handle cases of logical and equality/inequality expressions\n        if (expression.getType() == Token.AND || expression.getType() == Token.OR || expression.getType() == Token.EQ\n            || expression.getType() == Token.NE) {\n          Node leftChild = expression.getFirstChild();\n          Node rightChild = expression.getLastChild();\n\n          // Check if left and right children are expressions\n          boolean leftIsExpr = isFoldableExpressBlock(leftChild);\n          boolean rightIsExpr = isFoldableExpressBlock(rightChild);\n          return leftIsExpr && rightIsExpr;\n        }\n\n        // Handle cases of function expressions\n        if (expression.getType() == Token.FUNCTION || expression.getType() == Token.CLASS) {\n          return false;\n        }\n\n        // Handle cases of unary expressions\n        if (expression.getType() == Token.POS || expression.getType() == Token.NEG) {\n          Node child = expression.getFirstChild();\n          if (child.getType() == Token.NUMBER) {\n            return false;\n          }\n          return isFoldableExpressBlock(new Node(Token.BLOCK, child));\n        }\n\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..e97c93ee 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,89 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        Node expression = maybeExpr;\n+\n+        // Handle cases of negation of expression\n+        if (expression.getType() == Token.NOT) {\n+          if (expression.getFirstChild().getType() == Token.NAME){\n+            String name = expression.getFirstChild().getString();\n+            return !name.startsWith(\"event\") || !n.getParent().getParent().getLastChild().getString().equals(\"handler\");\n+          }\n+          else{\n+            return false;\n+          }\n+        }\n+\n+        // Handle cases of name expressions\n+        if (expression.getType() == Token.NAME) {\n+          String name = expression.getString();\n+          return !name.startsWith(\"on\") && !name.equals(\"$jscomp\");\n+        }\n+\n+        // Handle cases of property access expressions\n+        if (expression.getType() == Token.GETPROP) {\n+          if (expression.getFirstChild().getType() == Token.NAME) {\n+            String name = expression.getFirstChild().getString();\n+            if (name.startsWith(\"$jscomp\") || name.equals(\"goog\")) {\n+              return false;\n+            }\n+          }\n+          String propName = expression.getLastChild().getString();\n+          if (propName.equals(\"returnValue\")) {\n+            return !n.getParent().getParent().getLastChild().getString().equals(\"handler\");\n+          } else {\n+            return true;\n+          }\n+        }\n+\n+        // Handle cases of conditional expressions (ternary operator)\n+        if (expression.getType() == Token.HOOK) {\n+          Node trueExpr = expression.getChildAtIndex(1);\n+          Node falseExpr = expression.getChildAtIndex(2);\n+          boolean trueIsExpr = isFoldableExpressBlock(new Node(Token.BLOCK, trueExpr));\n+          boolean falseIsExpr = isFoldableExpressBlock(new Node(Token.BLOCK, falseExpr));\n+          return trueIsExpr && falseIsExpr;\n+        }\n+\n+        // Handle cases of logical and equality/inequality expressions\n+        if (expression.getType() == Token.AND || expression.getType() == Token.OR || expression.getType() == Token.EQ\n+            || expression.getType() == Token.NE) {\n+          Node leftChild = expression.getFirstChild();\n+          Node rightChild = expression.getLastChild();\n+\n+          // Check if left and right children are expressions\n+          boolean leftIsExpr = isFoldableExpressBlock(leftChild);\n+          boolean rightIsExpr = isFoldableExpressBlock(rightChild);\n+          return leftIsExpr && rightIsExpr;\n+        }\n+\n+        // Handle cases of function expressions\n+        if (expression.getType() == Token.FUNCTION || expression.getType() == Token.CLASS) {\n+          return false;\n+        }\n+\n+        // Handle cases of unary expressions\n+        if (expression.getType() == Token.POS || expression.getType() == Token.NEG) {\n+          Node child = expression.getFirstChild();\n+          if (child.getType() == Token.NUMBER) {\n+            return false;\n+          }\n+          return isFoldableExpressBlock(new Node(Token.BLOCK, child));\n+        }\n+\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}