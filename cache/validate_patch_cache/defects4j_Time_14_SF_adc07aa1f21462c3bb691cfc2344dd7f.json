{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            try {\n                long instant = 0L;\n                boolean changed = false;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    if (i == fieldIndex) {\n                        int curValue = values[i];\n                        int newValue = iChronology.add(partial.getFieldType(i).getField(iChronology).getDurationField().getRangeDurationField(), curValue, valueToAdd);\n                        if (newValue != curValue) {\n                            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                            changed = true;\n                        }\n                    } else {\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                    }\n                }\n                if (changed) {\n                    return iChronology.get(partial, instant);\n                } else {\n                    return values;\n                }\n            } catch (RuntimeException ex) {\n                if (partial.getField(fieldIndex).getFieldType() == DateTimeFieldType.monthOfYear()) {\n                    int year = 0, month = 0;\n                    for (int i = 0; i < partial.size(); i++) {\n                        if (i == fieldIndex) {\n                            month = values[i];\n                        } else if (iChronology.year().equals(partial.getFieldType(i))) {\n                            year = values[i];\n                        }\n                    }\n                    int monthDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n                    int day = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n                    if (day > monthDays) {\n                        day = monthDays;\n                    }\n                    int[] newValues = Arrays.copyOf(values, values.length);\n                    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n                    return super.add(partial, fieldIndex, newValues, valueToAdd);\n                }\n                throw ex;\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..060dd764 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            try {\n+                long instant = 0L;\n+                boolean changed = false;\n+                for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                    if (i == fieldIndex) {\n+                        int curValue = values[i];\n+                        int newValue = iChronology.add(partial.getFieldType(i).getField(iChronology).getDurationField().getRangeDurationField(), curValue, valueToAdd);\n+                        if (newValue != curValue) {\n+                            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                            changed = true;\n+                        }\n+                    } else {\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                    }\n+                }\n+                if (changed) {\n+                    return iChronology.get(partial, instant);\n+                } else {\n+                    return values;\n+                }\n+            } catch (RuntimeException ex) {\n+                if (partial.getField(fieldIndex).getFieldType() == DateTimeFieldType.monthOfYear()) {\n+                    int year = 0, month = 0;\n+                    for (int i = 0; i < partial.size(); i++) {\n+                        if (i == fieldIndex) {\n+                            month = values[i];\n+                        } else if (iChronology.year().equals(partial.getFieldType(i))) {\n+                            year = values[i];\n+                        }\n+                    }\n+                    int monthDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                    int day = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+                    if (day > monthDays) {\n+                        day = monthDays;\n+                    }\n+                    int[] newValues = Arrays.copyOf(values, values.length);\n+                    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n+                    return super.add(partial, fieldIndex, newValues, valueToAdd);\n+                }\n+                throw ex;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}