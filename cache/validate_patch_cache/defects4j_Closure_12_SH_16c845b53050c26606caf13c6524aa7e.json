{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    try {\n        NodeList statements = cfgNode.getChildNodes();\n        for (int i = 0; i < statements.getLength(); i++) {\n            Node statement = statements.item(i);\n            if (statement.getNodeType() == Node.TRY_CATCH_STATEMENT) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..2c880e52 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,21 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    try {\n+        NodeList statements = cfgNode.getChildNodes();\n+        for (int i = 0; i < statements.getLength(); i++) {\n+            Node statement = statements.item(i);\n+            if (statement.getNodeType() == Node.TRY_CATCH_STATEMENT) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+        return false;\n+    }\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}