{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n        final RealMatrix u = dec.getU();\n        final RealMatrix s = dec.getS();\n        final RealMatrix v = dec.getV();\n        \n        final int nRows = m.getRowDimension();\n        final int nCols = m.getColumnDimension();\n        final double[][] sqrt = new double[nRows][nCols];\n        \n        for (int i = 0; i < nRows; i++) {\n            for (int j = 0; j < nCols; j++) {\n                double sqrtS = (s.getEntry(i, j) < 0) ? 0.0 : FastMath.sqrt(s.getEntry(i, j));\n                for (int k = 0; k < nCols; k++) {\n                    sqrt[i][j] += u.getEntry(i, k) * sqrtS * v.getEntry(j, k);\n                }\n            }\n        }\n        \n        return MatrixUtils.createRealMatrix(sqrt);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d154b0339 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+        final RealMatrix u = dec.getU();\n+        final RealMatrix s = dec.getS();\n+        final RealMatrix v = dec.getV();\n+        \n+        final int nRows = m.getRowDimension();\n+        final int nCols = m.getColumnDimension();\n+        final double[][] sqrt = new double[nRows][nCols];\n+        \n+        for (int i = 0; i < nRows; i++) {\n+            for (int j = 0; j < nCols; j++) {\n+                double sqrtS = (s.getEntry(i, j) < 0) ? 0.0 : FastMath.sqrt(s.getEntry(i, j));\n+                for (int k = 0; k < nCols; k++) {\n+                    sqrt[i][j] += u.getEntry(i, k) * sqrtS * v.getEntry(j, k);\n+                }\n+            }\n+        }\n+        \n+        return MatrixUtils.createRealMatrix(sqrt);\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}