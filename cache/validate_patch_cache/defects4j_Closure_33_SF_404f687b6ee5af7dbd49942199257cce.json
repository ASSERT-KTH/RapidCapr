{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // Check whether constraintObj is a FunctionType or an ObjectLiteralType\n  if (!(constraintObj.isFunctionType() || constraintObj.isRecordType())) {\n    return;\n  }\n  \n  // Handle the case where the constraint object is an ObjectLiteralType\n  if (constraintObj.isObjectLiteral()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop) && !propType.isUnknownType()) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n  \n  // Handle the case where the constraint object is a FunctionType\n  if (constraintObj.isFunctionType()) {\n    FunctionType funcType = constraintObj.toMaybeFunctionType();\n    for (Node child : funcType.getParameters()) {\n      String paramName = child.getString();\n      JSType paramType = child.getJSType();\n      if (!isPropertyTypeDeclared(paramName) && !paramType.isUnknownType()) {\n        defineInferredProperty(paramName, paramType, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..00ed2b4f 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,37 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+public void matchConstraint(ObjectType constraintObj) {\n+  // Check whether constraintObj is a FunctionType or an ObjectLiteralType\n+  if (!(constraintObj.isFunctionType() || constraintObj.isRecordType())) {\n+    return;\n+  }\n+  \n+  // Handle the case where the constraint object is an ObjectLiteralType\n+  if (constraintObj.isObjectLiteral()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop) && !propType.isUnknownType()) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n+  \n+  // Handle the case where the constraint object is a FunctionType\n+  if (constraintObj.isFunctionType()) {\n+    FunctionType funcType = constraintObj.toMaybeFunctionType();\n+    for (Node child : funcType.getParameters()) {\n+      String paramName = child.getString();\n+      JSType paramType = child.getJSType();\n+      if (!isPropertyTypeDeclared(paramName) && !paramType.isUnknownType()) {\n+        defineInferredProperty(paramName, paramType, null);\n+      }\n+    }\n+  }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}