{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n        throws NonSquareMatrixException, NotPositiveDefiniteMatrixException, NotSymmetricMatrixException {\n    final double eps = 1e-10; // A small number to account for floating point errors\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());\n    }\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData().clone();\n    cachedL = null;\n    cachedLT = null;\n\n    // Check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n\n        // Check diagonal element\n        if (lI[i] <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        lI[i] = Math.sqrt(lI[i]);\n\n        // Check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lJ[i] / lI[i];\n            final double lJI = lI[j] / lI[i];\n            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = lIJ;\n        }\n\n        // Adjust the remaining elements\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            for (int k = j; k < order; ++k) {\n                lJ[k] -= lI[j] * lI[k];\n            }\n        }\n    }\n\n    // Check the last element\n    if (lTData[order - 1][order - 1] <= absolutePositivityThreshold) {\n        throw new NotPositiveDefiniteMatrixException();\n    }\n\n    // Make the output triangular matrix\n    for (int i = 0; i < order; ++i) {\n        for (int j = i + 1; j < order; ++j) {\n            lTData[i][j] = 0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..05779b429 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,66 +90,63 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n-        throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n-\n-        if (!matrix.isSquare()) {\n-            throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n+                                 final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n+        throws NonSquareMatrixException, NotPositiveDefiniteMatrixException, NotSymmetricMatrixException {\n+    final double eps = 1e-10; // A small number to account for floating point errors\n+    if (!matrix.isSquare()) {\n+        throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());\n+    }\n+    final int order = matrix.getRowDimension();\n+    lTData = matrix.getData().clone();\n+    cachedL = null;\n+    cachedLT = null;\n+\n+    // Check the matrix before transformation\n+    for (int i = 0; i < order; ++i) {\n+        final double[] lI = lTData[i];\n+\n+        // Check diagonal element\n+        if (lI[i] <= absolutePositivityThreshold) {\n+            throw new NotPositiveDefiniteMatrixException();\n         }\n-\n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n-\n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] lI = lTData[i];\n-\n-            if (lTData[i][i] < absolutePositivityThreshold) {\n-                throw new NotPositiveDefiniteMatrixException();\n+        lI[i] = Math.sqrt(lI[i]);\n+\n+        // Check off-diagonal elements (and reset them to 0)\n+        for (int j = i + 1; j < order; ++j) {\n+            final double[] lJ = lTData[j];\n+            final double lIJ = lJ[i] / lI[i];\n+            final double lJI = lI[j] / lI[i];\n+            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n+            if (Math.abs(lIJ - lJI) > maxDelta) {\n+                throw new NotSymmetricMatrixException();\n             }\n-            // check off-diagonal elements (and reset them to 0)\n-            for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n-                    throw new NotSymmetricMatrixException();\n-                }\n-                lJ[i] = 0;\n-           }\n+            lJ[i] = lIJ;\n         }\n \n-        // transform the matrix\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] ltI = lTData[i];\n-\n-            // check diagonal element\n-\n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n-\n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n-                }\n+        // Adjust the remaining elements\n+        for (int j = i + 1; j < order; ++j) {\n+            final double[] lJ = lTData[j];\n+            for (int k = j; k < order; ++k) {\n+                lJ[k] -= lI[j] * lI[k];\n             }\n-\n         }\n+    }\n \n+    // Check the last element\n+    if (lTData[order - 1][order - 1] <= absolutePositivityThreshold) {\n+        throw new NotPositiveDefiniteMatrixException();\n     }\n \n+    // Make the output triangular matrix\n+    for (int i = 0; i < order; ++i) {\n+        for (int j = i + 1; j < order; ++j) {\n+            lTData[i][j] = 0;\n+        }\n+    }\n+}\n+\n     /** {@inheritDoc} */\n     public RealMatrix getL() {\n         if (cachedL == null) {",
    "result_reason": "org.apache.commons.math.linear.NotSymmetricMatrixException: not symmetric matrix",
    "test_result": "FAIL"
}