{
    "patch": "    if (constraintObj.isNominalConstructor()) {\n      NominalType selfNominalType = nominaltypesByNominal.get(constraintObj);\n      if (selfNominalType != null) {\n        EnvTypePair pair = new EnvTypePair(getDeclarScope(selfNominalType),\n            selfNominalType.getInstanceAsJSType());\n        inferQualifiedSlot(callNode, n, s, qName, useClosureTypes, pair);\n        return;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..24006ca8 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,15 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (constraintObj.isNominalConstructor()) {\n+      NominalType selfNominalType = nominaltypesByNominal.get(constraintObj);\n+      if (selfNominalType != null) {\n+        EnvTypePair pair = new EnvTypePair(getDeclarScope(selfNominalType),\n+            selfNominalType.getInstanceAsJSType());\n+        inferQualifiedSlot(callNode, n, s, qName, useClosureTypes, pair);\n+        return;\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}