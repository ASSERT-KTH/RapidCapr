{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoopHeader()) {\n          boolean foundAssignment = false;\n          List<BasicBlock> loopBody = block.getLoopBody();\n          for (int i = 0; i < loopBody.size(); i++) {\n            BasicBlock loopMember = loopBody.get(i);\n            List<AstNode> statements = loopMember.getStatements();\n            for (int j = 0; j < statements.size(); j++) {\n              AstNode statement = statements.get(j);\n              if (statement.getType() == Token.ASSIGN) {\n                foundAssignment = true;\n              }\n            }\n          }\n          return !foundAssignment;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a355ecee 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoopHeader()) {\n+          boolean foundAssignment = false;\n+          List<BasicBlock> loopBody = block.getLoopBody();\n+          for (int i = 0; i < loopBody.size(); i++) {\n+            BasicBlock loopMember = loopBody.get(i);\n+            List<AstNode> statements = loopMember.getStatements();\n+            for (int j = 0; j < statements.size(); j++) {\n+              AstNode statement = statements.get(j);\n+              if (statement.getType() == Token.ASSIGN) {\n+                foundAssignment = true;\n+              }\n+            }\n+          }\n+          return !foundAssignment;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}