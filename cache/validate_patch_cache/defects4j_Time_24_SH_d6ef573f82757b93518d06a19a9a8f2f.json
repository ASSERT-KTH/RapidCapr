{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis != millis) {\n            DateTimeField currentField = savedFields[i].iField;\n            boolean isYearField = (currentField.getType() == DateTimeFieldType.year());\n            boolean isWeekyearField = (currentField.getType() == DateTimeFieldType.weekyear());\n            if (isYearField || isWeekyearField) {\n                int parsedYear = currentField.get(newMillis);\n                int defaultYear = iDefaultYear;\n                if (isWeekyearField) {\n                    defaultYear = iChrono.weekyear().roundCeiling(iDefaultYear);\n                }\n                if (parsedYear != defaultYear) {\n                    // Re-parse the date with the default year and return the computed millis\n                    saveField(DateTimeFieldType.year(), defaultYear);\n                    return computeMillis(resetFields, text);\n                }\n            } else {\n                throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n            }\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a925eb20 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis != millis) {\n+            DateTimeField currentField = savedFields[i].iField;\n+            boolean isYearField = (currentField.getType() == DateTimeFieldType.year());\n+            boolean isWeekyearField = (currentField.getType() == DateTimeFieldType.weekyear());\n+            if (isYearField || isWeekyearField) {\n+                int parsedYear = currentField.get(newMillis);\n+                int defaultYear = iDefaultYear;\n+                if (isWeekyearField) {\n+                    defaultYear = iChrono.weekyear().roundCeiling(iDefaultYear);\n+                }\n+                if (parsedYear != defaultYear) {\n+                    // Re-parse the date with the default year and return the computed millis\n+                    saveField(DateTimeFieldType.year(), defaultYear);\n+                    return computeMillis(resetFields, text);\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n+            }\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}