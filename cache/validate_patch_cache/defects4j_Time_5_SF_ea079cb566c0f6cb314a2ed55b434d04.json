{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // normalize the period by carrying over excess values\n    if (millis >= DateTimeConstants.MILLIS_PER_SECOND) {\n        seconds += millis / DateTimeConstants.MILLIS_PER_SECOND;\n        millis = millis % DateTimeConstants.MILLIS_PER_SECOND;\n    }\n    if (seconds >= DateTimeConstants.SECONDS_PER_MINUTE) {\n        minutes += seconds / DateTimeConstants.SECONDS_PER_MINUTE;\n        seconds = seconds % DateTimeConstants.SECONDS_PER_MINUTE;\n    }\n    if (minutes >= DateTimeConstants.MINUTES_PER_HOUR) {\n        hours += minutes / DateTimeConstants.MINUTES_PER_HOUR;\n        minutes = minutes % DateTimeConstants.MINUTES_PER_HOUR;\n    }\n    if (hours >= DateTimeConstants.HOURS_PER_DAY) {\n        days += hours / DateTimeConstants.HOURS_PER_DAY;\n        hours = hours % DateTimeConstants.HOURS_PER_DAY;\n    }\n\n    int totalMonths = years * 12 + months;\n    int totalDays = weeks * 7 + days;\n\n    // get total millis for the period, including weeks\n    long totalMillis = (((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n            + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n            + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n            + (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n            + (((long) millis));\n\n    // subtract weeks from days so we can extract the weeks and days separately\n    totalDays -= weeks * 7;\n\n    // extract remaining days after removing weeks, and normalize them\n    Period remainingDaysPeriod = new Period().withDays(totalDays).normalizedStandard(type);\n    int remainingDays = remainingDaysPeriod.getDays();\n\n    // add remaining days and normalized millis to total millis\n    totalMillis += (((long) remainingDays) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n            + remainingDaysPeriod.toStandardDuration().getMillis();\n\n    // extract weeks and remaining millis\n    int normalizedWeeks = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    long normalizedMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_WEEK);\n    \n    int normalizedSeconds = 0;\n    int normalizedMinutes = 0;\n    int normalizedHours = 0;\n    int remainingMonths = 0;\n    int normalizedYears = 0;\n\n    // extract the years\n    if (totalMonths >= 12) {\n        normalizedYears = totalMonths / 12;\n        remainingMonths = totalMonths % 12;\n    } else {\n        remainingMonths = totalMonths;\n    }\n\n    // extract the months\n    if (remainingMonths >= DateTimeConstants.MONTHS_PER_YEAR) {\n        normalizedYears += remainingMonths / DateTimeConstants.MONTHS_PER_YEAR;\n        remainingMonths = remainingMonths % DateTimeConstants.MONTHS_PER_YEAR;\n    }\n\n    // normalize the remaining period\n    normalizedSeconds = (int) (normalizedMillis / DateTimeConstants.MILLIS_PER_SECOND);\n    normalizedMillis %= DateTimeConstants.MILLIS_PER_SECOND;\n    \n    normalizedMinutes = normalizedSeconds / DateTimeConstants.SECONDS_PER_MINUTE;\n    normalizedSeconds %= DateTimeConstants.SECONDS_PER_MINUTE;\n\n    normalizedHours = normalizedMinutes / DateTimeConstants.MINUTES_PER_HOUR;\n    normalizedMinutes %= DateTimeConstants.MINUTES_PER_HOUR;\n\n    // construct a normalized period object using only plusX() calls\n    Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC())\n            .plusYears(normalizedYears)\n            .plusMonths(remainingMonths)\n            .plusWeeks(normalizedWeeks)\n            .plusDays(remainingDays)\n            .plusHours(normalizedHours)\n            .plusMinutes(normalizedMinutes)\n            .plusSeconds(normalizedSeconds)\n            .normalizedStandard(type); // normalize the result\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..dc3de3e9 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,103 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // normalize the period by carrying over excess values\n+    if (millis >= DateTimeConstants.MILLIS_PER_SECOND) {\n+        seconds += millis / DateTimeConstants.MILLIS_PER_SECOND;\n+        millis = millis % DateTimeConstants.MILLIS_PER_SECOND;\n+    }\n+    if (seconds >= DateTimeConstants.SECONDS_PER_MINUTE) {\n+        minutes += seconds / DateTimeConstants.SECONDS_PER_MINUTE;\n+        seconds = seconds % DateTimeConstants.SECONDS_PER_MINUTE;\n+    }\n+    if (minutes >= DateTimeConstants.MINUTES_PER_HOUR) {\n+        hours += minutes / DateTimeConstants.MINUTES_PER_HOUR;\n+        minutes = minutes % DateTimeConstants.MINUTES_PER_HOUR;\n+    }\n+    if (hours >= DateTimeConstants.HOURS_PER_DAY) {\n+        days += hours / DateTimeConstants.HOURS_PER_DAY;\n+        hours = hours % DateTimeConstants.HOURS_PER_DAY;\n+    }\n+\n+    int totalMonths = years * 12 + months;\n+    int totalDays = weeks * 7 + days;\n+\n+    // get total millis for the period, including weeks\n+    long totalMillis = (((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+            + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+            + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+            + (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+            + (((long) millis));\n+\n+    // subtract weeks from days so we can extract the weeks and days separately\n+    totalDays -= weeks * 7;\n+\n+    // extract remaining days after removing weeks, and normalize them\n+    Period remainingDaysPeriod = new Period().withDays(totalDays).normalizedStandard(type);\n+    int remainingDays = remainingDaysPeriod.getDays();\n+\n+    // add remaining days and normalized millis to total millis\n+    totalMillis += (((long) remainingDays) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+            + remainingDaysPeriod.toStandardDuration().getMillis();\n+\n+    // extract weeks and remaining millis\n+    int normalizedWeeks = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    long normalizedMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+    \n+    int normalizedSeconds = 0;\n+    int normalizedMinutes = 0;\n+    int normalizedHours = 0;\n+    int remainingMonths = 0;\n+    int normalizedYears = 0;\n+\n+    // extract the years\n+    if (totalMonths >= 12) {\n+        normalizedYears = totalMonths / 12;\n+        remainingMonths = totalMonths % 12;\n+    } else {\n+        remainingMonths = totalMonths;\n+    }\n+\n+    // extract the months\n+    if (remainingMonths >= DateTimeConstants.MONTHS_PER_YEAR) {\n+        normalizedYears += remainingMonths / DateTimeConstants.MONTHS_PER_YEAR;\n+        remainingMonths = remainingMonths % DateTimeConstants.MONTHS_PER_YEAR;\n+    }\n+\n+    // normalize the remaining period\n+    normalizedSeconds = (int) (normalizedMillis / DateTimeConstants.MILLIS_PER_SECOND);\n+    normalizedMillis %= DateTimeConstants.MILLIS_PER_SECOND;\n+    \n+    normalizedMinutes = normalizedSeconds / DateTimeConstants.SECONDS_PER_MINUTE;\n+    normalizedSeconds %= DateTimeConstants.SECONDS_PER_MINUTE;\n+\n+    normalizedHours = normalizedMinutes / DateTimeConstants.MINUTES_PER_HOUR;\n+    normalizedMinutes %= DateTimeConstants.MINUTES_PER_HOUR;\n+\n+    // construct a normalized period object using only plusX() calls\n+    Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC())\n+            .plusYears(normalizedYears)\n+            .plusMonths(remainingMonths)\n+            .plusWeeks(normalizedWeeks)\n+            .plusDays(remainingDays)\n+            .plusHours(normalizedHours)\n+            .plusMinutes(normalizedMinutes)\n+            .plusSeconds(normalizedSeconds)\n+            .normalizedStandard(type); // normalize the result\n+    \n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}