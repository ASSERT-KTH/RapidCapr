{
    "patch": "boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n        return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    BasicBlock block = ref.getBasicBlock();\n    if (block.isLoop) {\n        return false;\n    }\n\n    // Check whether any other assignments reference this variable and are not in loops\n    for (Reference reference : variable.getAllReferences()) {\n        if (reference.isSimpleAssignmentToName() && !reference.equals(ref)) {\n            BasicBlock otherBlock = reference.getBasicBlock();\n            if (otherBlock.isLoop || !block.isFunction && otherBlock.getParent() != block.getParent()) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bc47eb3a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+        return false;\n+    }\n+\n+    // Make sure this assignment is not in a loop.\n+    BasicBlock block = ref.getBasicBlock();\n+    if (block.isLoop) {\n+        return false;\n+    }\n+\n+    // Check whether any other assignments reference this variable and are not in loops\n+    for (Reference reference : variable.getAllReferences()) {\n+        if (reference.isSimpleAssignmentToName() && !reference.equals(ref)) {\n+            BasicBlock otherBlock = reference.getBasicBlock();\n+            if (otherBlock.isLoop || !block.isFunction && otherBlock.getParent() != block.getParent()) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}