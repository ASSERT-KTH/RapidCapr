{
    "patch": "    if (!node.isGetProp()) {\n      return false;\n    }\n\n    String propName = node.getLastChild().getString();\n    if (propName.equals(\"prototype\")) {\n      // Prototype is always safe to replace.\n      return true;\n    }\n\n    Node objNode = node.getFirstChild();\n    if (objNode.isName() && isNameAssignedTo(objNode.getString(), replacement)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..2bf579de 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,18 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n+    if (!node.isGetProp()) {\n+      return false;\n     }\n-    Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+    String propName = node.getLastChild().getString();\n+    if (propName.equals(\"prototype\")) {\n+      // Prototype is always safe to replace.\n+      return true;\n     }\n \n-    return true;\n-  }\n+    Node objNode = node.getFirstChild();\n+    if (objNode.isName() && isNameAssignedTo(objNode.getString(), replacement)) {\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +238,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}