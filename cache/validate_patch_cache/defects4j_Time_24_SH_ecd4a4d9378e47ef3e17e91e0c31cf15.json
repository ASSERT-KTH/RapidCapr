{
    "patch": "            if (resetFields) {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].isSaved == false) {\n                        savedFields[i].restore();\n                    }\n                }\n                if (iSavedFieldsShared) {\n                    iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n                    iSavedFieldsShared = false;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..eaac0800 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (resetFields) {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].isSaved == false) {\n+                        savedFields[i].restore();\n+                    }\n+                }\n+                if (iSavedFieldsShared) {\n+                    iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+                    iSavedFieldsShared = false;\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}