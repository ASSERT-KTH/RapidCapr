{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    // We call `toMaybeFunctionType` to check for function types,\n    // including `FunctionType`, `NoObjectType`, `TemplatizedType`.\n    FunctionType ct = constructorType == null ? null : constructorType.toMaybeFunctionType();\n    JSType type = null;\n    if (ct != null && ct.isConstructor()) {\n      type = ct.getInstanceType();\n    }\n    if (type == null) {\n      // If we couldn't compute a non-null type, assign the unknown type.\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      type = type.restrictByNotNullOrUndefined();\n      // Ensure that the type is not UNKNOWN_TYPE, which would cause problems downstream.\n      if (type.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..7dd1d6fe 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,27 +1032,25 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n+    // We call `toMaybeFunctionType` to check for function types,\n+    // including `FunctionType`, `NoObjectType`, `TemplatizedType`.\n+    FunctionType ct = constructorType == null ? null : constructorType.toMaybeFunctionType();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+    if (ct != null && ct.isConstructor()) {\n+      type = ct.getInstanceType();\n+    }\n+    if (type == null) {\n+      // If we couldn't compute a non-null type, assign the unknown type.\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      type = type.restrictByNotNullOrUndefined();\n+      // Ensure that the type is not UNKNOWN_TYPE, which would cause problems downstream.\n+      if (type.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n       }\n     }\n     n.setJSType(type);",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3> but was:<2>",
    "test_result": "FAIL"
}