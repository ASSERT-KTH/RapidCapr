{
    "patch": "public static int largest_divisor(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be positive\");\n    }\n    int largest = 1;\n    for (int i = 2; i <= Math.sqrt(n); i ++) {\n        if (n % i == 0) {\n            int coFactor = n/i;\n            if (coFactor == i) {\n                return i;\n            }\n            largest = Math.max(largest, coFactor);\n            largest = Math.max(largest, i);\n        }\n    }\n    return largest;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..4953bb7 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -1,11 +1,21 @@\n package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n-    public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n+public static int largest_divisor(int n) {\n+    if (n <= 0) {\n+        throw new IllegalArgumentException(\"Input must be positive\");\n+    }\n+    int largest = 1;\n+    for (int i = 2; i <= Math.sqrt(n); i ++) {\n+        if (n % i == 0) {\n+            int coFactor = n/i;\n+            if (coFactor == i) {\n                 return i;\n+            }\n+            largest = Math.max(largest, coFactor);\n+            largest = Math.max(largest, i);\n         }\n-        return 1;\n     }\n+    return largest;\n+}\n }",
    "result_reason": "   TEST_LARGEST_DIVISOR.test_4:31 expected:<10> but was:<50>",
    "test_result": "FAIL"
}