{
    "patch": "      if (functionType.isThisTypeExplicit()) {\n        Node parent = n.getParent();\n        if (parent == null ||\n            (parent.getToken() != Token.GETPROP && parent.getToken() != Token.GETELEM)) {\n          report(t, n, FUNCTION_THIS_PARAMETER_NO_TYPE, functionType.toString());\n        } else {\n          Node thisArg = parent.getFirstChild().getNext();\n          if (thisArg == null || !getJSType(thisArg).isSubtypeOf(functionType.getTypeOfThis())) {\n            report(t, n, FUNCTION_THIS_PARAMETER_MISMATCH, functionType.toString());\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..f18dc893 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.isThisTypeExplicit()) {\n+        Node parent = n.getParent();\n+        if (parent == null ||\n+            (parent.getToken() != Token.GETPROP && parent.getToken() != Token.GETELEM)) {\n+          report(t, n, FUNCTION_THIS_PARAMETER_NO_TYPE, functionType.toString());\n+        } else {\n+          Node thisArg = parent.getFirstChild().getNext();\n+          if (thisArg == null || !getJSType(thisArg).isSubtypeOf(functionType.getTypeOfThis())) {\n+            report(t, n, FUNCTION_THIS_PARAMETER_MISMATCH, functionType.toString());\n+          }\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}