{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        RealMatrix d = dec.getD();\n        int n = d.getColumnDimension();\n        for (int i = 0; i < n; i++) {\n            if (d.getEntry(i, i) < 0.0) {\n                throw new IllegalArgumentException(\"Matrix cannot be square rooted, negative eigenvalue found\");\n            } else if (d.getEntry(i, i) == 0.0) {\n                d.setEntry(i, i, 0.0);\n            } else {\n                d.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n            }\n        }\n\n        RealMatrix v = dec.getV();\n        return new BlockRealMatrix(v.multiply(d).multiply(v.transpose()).getData());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e1bc4b9c0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        RealMatrix d = dec.getD();\n+        int n = d.getColumnDimension();\n+        for (int i = 0; i < n; i++) {\n+            if (d.getEntry(i, i) < 0.0) {\n+                throw new IllegalArgumentException(\"Matrix cannot be square rooted, negative eigenvalue found\");\n+            } else if (d.getEntry(i, i) == 0.0) {\n+                d.setEntry(i, i, 0.0);\n+            } else {\n+                d.setEntry(i, i, FastMath.sqrt(d.getEntry(i, i)));\n+            }\n+        }\n+\n+        RealMatrix v = dec.getV();\n+        return new BlockRealMatrix(v.multiply(d).multiply(v.transpose()).getData());\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}