{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n        JSType topObjectType = getNativeObjectType();\n        ObjectType narrowedObjType = objType.isEquivalentTo(topObjectType)\n            ? ObjectType.cast(type)\n            : objType;\n        JSType narrowedType = narrowedObjType.restrictByNotNullOrUndefined();\n        if (type != narrowedType) {\n          narrowedType = narrowedType.getGreatestSubtype(type);\n          scope = narrowScope(scope, n, narrowedType);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..e0df9505 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1132,7 +1132,15 @@ class TypeInference\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n+        JSType topObjectType = getNativeObjectType();\n+        ObjectType narrowedObjType = objType.isEquivalentTo(topObjectType)\n+            ? ObjectType.cast(type)\n+            : objType;\n+        JSType narrowedType = narrowedObjType.restrictByNotNullOrUndefined();\n+        if (type != narrowedType) {\n+          narrowedType = narrowedType.getGreatestSubtype(type);\n+          scope = narrowScope(scope, n, narrowedType);\n+        }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}