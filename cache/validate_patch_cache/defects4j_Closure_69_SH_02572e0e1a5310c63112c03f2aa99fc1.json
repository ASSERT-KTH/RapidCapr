{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\nNodeUtil.getArgumentsForCallOrNew(n, args);\nvalidateArgumentList(t, args, functionType.getParameterTypes(), n);\n\nJSType returnType = functionType.getReturnType();\nJSType specializedReturnType = returnType.restrictByNotNullOrUndefined();\ntry {\n  // Attempt to specialize the return type based on the argument types.\n  Iterable<Node> possibleReturnNodes = PrevalentTypes.specializeReturnType(functionType, args);\n  JSType returnUnion = getJSType(possibleReturnNodes).getLeastSupertype(t.getScope());\n  if (!returnUnion.isUnknownType()) {\n    specializedReturnType = returnUnion.restrictByNotNullOrUndefined();\n  }\n} catch (ArrayIndexOutOfBoundsException ignored) {\n  // We protect for some types of invalid returns, but not all of them.\n  // We don't want to crash the plugin in the case where we run into a new\n  // type of unsupported code pattern.\n}\n\nensureTyped(t, n, specializedReturnType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..288b1bd1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n+  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+NodeUtil.getArgumentsForCallOrNew(n, args);\n+validateArgumentList(t, args, functionType.getParameterTypes(), n);\n+\n+JSType returnType = functionType.getReturnType();\n+JSType specializedReturnType = returnType.restrictByNotNullOrUndefined();\n+try {\n+  // Attempt to specialize the return type based on the argument types.\n+  Iterable<Node> possibleReturnNodes = PrevalentTypes.specializeReturnType(functionType, args);\n+  JSType returnUnion = getJSType(possibleReturnNodes).getLeastSupertype(t.getScope());\n+  if (!returnUnion.isUnknownType()) {\n+    specializedReturnType = returnUnion.restrictByNotNullOrUndefined();\n+  }\n+} catch (ArrayIndexOutOfBoundsException ignored) {\n+  // We protect for some types of invalid returns, but not all of them.\n+  // We don't want to crash the plugin in the case where we run into a new\n+  // type of unsupported code pattern.\n+}\n+\n+ensureTyped(t, n, specializedReturnType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}