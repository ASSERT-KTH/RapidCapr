{
    "patch": "        } catch (IllegalFieldValueException e) {\n            DurationField fieldType = e.getIllegalFieldValueExceptionFieldType();\n            IllegalArgumentException cause = e;\n            while (cause.getCause() instanceof IllegalArgumentException) {\n                cause = (IllegalArgumentException) cause.getCause();\n            }\n            if (cause.getCause() instanceof ArithmeticException) {\n                throw (ArithmeticException) cause.getCause();\n            }\n            if (fieldType.getName().equals(\"year\")) {\n                invalidYear(e);\n            } else {\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..777b19e3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            DurationField fieldType = e.getIllegalFieldValueExceptionFieldType();\n+            IllegalArgumentException cause = e;\n+            while (cause.getCause() instanceof IllegalArgumentException) {\n+                cause = (IllegalArgumentException) cause.getCause();\n+            }\n+            if (cause.getCause() instanceof ArithmeticException) {\n+                throw (ArithmeticException) cause.getCause();\n+            }\n+            if (fieldType.getName().equals(\"year\")) {\n+                invalidYear(e);\n+            } else {\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}