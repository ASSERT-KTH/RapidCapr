{
    "patch": "public static void main(String[] args) {\n    String[] filenames = {\"file1.txt\", \"file2.txt\", \"file3.txt\"};\n    String prop = \"test.property\";\n    String value = \"expected_value\";\n    String[] warnings = new String[filenames.length];\n    for (int i = 0; i < filenames.length; i++) {\n        String filename = filenames[i];\n        try (InputStream input = new FileInputStream(filename)) {\n            Properties properties = new Properties();\n            properties.load(input);\n            String propValue = properties.getProperty(prop);\n            if (propValue == null || !propValue.equals(value)) {\n                warnings[i] = \"unexpected value for \" + prop + \" in \" + filename;\n            }\n        } catch (IOException ex) {\n            warnings[i] = \"could not read \" + filename + \": \" + ex.getMessage();\n        }\n    }\n    for (String warning : warnings) {\n        if (warning != null) {\n            System.out.println(\"Warning: \" + warning);\n        }\n    }\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..90fb61a1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static void main(String[] args) {\n+    String[] filenames = {\"file1.txt\", \"file2.txt\", \"file3.txt\"};\n+    String prop = \"test.property\";\n+    String value = \"expected_value\";\n+    String[] warnings = new String[filenames.length];\n+    for (int i = 0; i < filenames.length; i++) {\n+        String filename = filenames[i];\n+        try (InputStream input = new FileInputStream(filename)) {\n+            Properties properties = new Properties();\n+            properties.load(input);\n+            String propValue = properties.getProperty(prop);\n+            if (propValue == null || !propValue.equals(value)) {\n+                warnings[i] = \"unexpected value for \" + prop + \" in \" + filename;\n+            }\n+        } catch (IOException ex) {\n+            warnings[i] = \"could not read \" + filename + \": \" + ex.getMessage();\n+        }\n+    }\n+    for (String warning : warnings) {\n+        if (warning != null) {\n+            System.out.println(\"Warning: \" + warning);\n+        }\n+    }\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: try-with-resources is not supported in -source 1.6",
    "test_result": "ERROR"
}