{
    "patch": "        final EigenDecomposition dec = new EigenDecomposition(m.multiply(m));\n        final RealVector eigenValues = dec.getRealEigenvalues();\n        for (int i = 0; i < eigenValues.getDimension(); i++) {\n            eigenValues.setEntry(i, FastMath.sqrt(eigenValues.getEntry(i)));\n        }\n        final RealMatrix eigenVectors = dec.getV();\n        return eigenVectors.multiply(MatrixUtils.createDiagonalMatrix(eigenValues)).multiply(eigenVectors.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f04bb79dc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,11 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final EigenDecomposition dec = new EigenDecomposition(m.multiply(m));\n+        final RealVector eigenValues = dec.getRealEigenvalues();\n+        for (int i = 0; i < eigenValues.getDimension(); i++) {\n+            eigenValues.setEntry(i, FastMath.sqrt(eigenValues.getEntry(i)));\n+        }\n+        final RealMatrix eigenVectors = dec.getV();\n+        return eigenVectors.multiply(MatrixUtils.createDiagonalMatrix(eigenValues)).multiply(eigenVectors.transpose());\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}