{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values.clone();\n    }\n\n    int[] newValues = values.clone();\n\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType type = partial.getFieldType(i);\n        int value = values[i];\n        if (type == DateTimeFieldType.monthOfYear()) {\n            int totalMonths = iChronology.year().get(instant) * 12 + value - 1;\n            totalMonths += valueToAdd;\n            int year = totalMonths / 12;\n            int month = totalMonths % 12 + 1;\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, month);\n            newValues[i] = month;\n        } else {\n            instant = type.getField(iChronology).set(instant, value);\n        }\n    }\n\n    boolean monthBased = DateTimeUtils.isContiguous(partial);\n    boolean dayBased = !monthBased;\n\n    if (dayBased) {\n        int year = iChronology.year().get(instant);\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        if (newValues[0] == month && newValues[1] == day) {\n            // nothing to adjust\n        } else {\n            int newMonth = newValues[0];\n            int newDay = newValues[1];\n            int maxDayOfMonth = iChronology.getDayOfMonthMaximum(year, newMonth);\n            if (newDay > maxDayOfMonth) {\n                newDay = maxDayOfMonth;\n            }\n            instant = iChronology.monthOfYear().set(instant, newMonth);\n            instant = iChronology.dayOfMonth().set(instant, newDay);\n            newValues[0] = newMonth;\n            newValues[1] = newDay;\n        }\n    } else if (monthBased) {\n        int year = iChronology.year().get(instant);\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        int newYear = year + (newValues[0] - month) / 12;\n        int newMonth = (newValues[0] - month) % 12 + 1;\n        int maxDayOfMonth = iChronology.getDayOfMonthMaximum(newYear, newMonth);\n        int newDay = (day < maxDayOfMonth ? day : maxDayOfMonth);\n        instant = iChronology.yearMonthDay().set(instant, newYear, newMonth, newDay);\n        newValues[0] = newMonth;\n        newValues[1] = newDay;\n    } else {\n        throw new IllegalStateException(\"Partial must be either month-based or day-based.\");\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ba292428 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,69 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values.clone();\n+    }\n+\n+    int[] newValues = values.clone();\n+\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType type = partial.getFieldType(i);\n+        int value = values[i];\n+        if (type == DateTimeFieldType.monthOfYear()) {\n+            int totalMonths = iChronology.year().get(instant) * 12 + value - 1;\n+            totalMonths += valueToAdd;\n+            int year = totalMonths / 12;\n+            int month = totalMonths % 12 + 1;\n+            instant = iChronology.year().set(instant, year);\n+            instant = iChronology.monthOfYear().set(instant, month);\n+            newValues[i] = month;\n+        } else {\n+            instant = type.getField(iChronology).set(instant, value);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+    }\n+\n+    boolean monthBased = DateTimeUtils.isContiguous(partial);\n+    boolean dayBased = !monthBased;\n+\n+    if (dayBased) {\n+        int year = iChronology.year().get(instant);\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        if (newValues[0] == month && newValues[1] == day) {\n+            // nothing to adjust\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int newMonth = newValues[0];\n+            int newDay = newValues[1];\n+            int maxDayOfMonth = iChronology.getDayOfMonthMaximum(year, newMonth);\n+            if (newDay > maxDayOfMonth) {\n+                newDay = maxDayOfMonth;\n+            }\n+            instant = iChronology.monthOfYear().set(instant, newMonth);\n+            instant = iChronology.dayOfMonth().set(instant, newDay);\n+            newValues[0] = newMonth;\n+            newValues[1] = newDay;\n         }\n+    } else if (monthBased) {\n+        int year = iChronology.year().get(instant);\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        int newYear = year + (newValues[0] - month) / 12;\n+        int newMonth = (newValues[0] - month) % 12 + 1;\n+        int maxDayOfMonth = iChronology.getDayOfMonthMaximum(newYear, newMonth);\n+        int newDay = (day < maxDayOfMonth ? day : maxDayOfMonth);\n+        instant = iChronology.yearMonthDay().set(instant, newYear, newMonth, newDay);\n+        newValues[0] = newMonth;\n+        newValues[1] = newDay;\n+    } else {\n+        throw new IllegalStateException(\"Partial must be either month-based or day-based.\");\n     }\n \n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}