{
    "patch": "            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && count == 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                millis = computeMillis(resetFields, text);\n                for (int i = 0; i < savedFields.length; i++) {\n                    if (savedFields[i].isSaved()) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                }\n            } else {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..11f555c0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && count == 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                millis = computeMillis(resetFields, text);\n+                for (int i = 0; i < savedFields.length; i++) {\n+                    if (savedFields[i].isSaved()) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                }\n+            } else {\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}