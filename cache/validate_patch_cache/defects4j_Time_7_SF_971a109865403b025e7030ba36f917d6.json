{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos < 0) {\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (!bucket.getParsed().containsKey(DateTimeFieldType.year())) {\n                if (bucket.getParsed().containsKey(DateTimeFieldType.dayOfYear())) {\n                    instant.setMillis(chrono.dayOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfYear()).intValue()));\n                } else {\n                    instant.setMillis(chrono.monthOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.monthOfYear()).intValue()));\n                    instant.setMillis(chrono.dayOfMonth().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfMonth()).intValue()));\n                }\n            }\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            return newPos;\n        }\n\n        int year = bucket.getParsed(DateTimeFieldType.year()).intValue();\n        int month = bucket.getParsed(DateTimeFieldType.monthOfYear()).intValue();\n        int day = bucket.getParsed(DateTimeFieldType.dayOfMonth()).intValue();\n        \n        if (month == 2 && day == 29 && !chrno.isLeapYear(year)) {\n            throw new org.joda.time.IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Invalid date 'February 29' as '\" + year + \"' is not a leap year\", \"dayOfMonth\", day);\n        }\n\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..34c4678a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -712,6 +712,38 @@ public class DateTimeFormatter {\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n+        if (newPos < 0) {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (!bucket.getParsed().containsKey(DateTimeFieldType.year())) {\n+                if (bucket.getParsed().containsKey(DateTimeFieldType.dayOfYear())) {\n+                    instant.setMillis(chrono.dayOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfYear()).intValue()));\n+                } else {\n+                    instant.setMillis(chrono.monthOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.monthOfYear()).intValue()));\n+                    instant.setMillis(chrono.dayOfMonth().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfMonth()).intValue()));\n+                }\n+            }\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            return newPos;\n+        }\n+\n+        int year = bucket.getParsed(DateTimeFieldType.year()).intValue();\n+        int month = bucket.getParsed(DateTimeFieldType.monthOfYear()).intValue();\n+        int day = bucket.getParsed(DateTimeFieldType.dayOfMonth()).intValue();\n+        \n+        if (month == 2 && day == 29 && !chrno.isLeapYear(year)) {\n+            throw new org.joda.time.IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Invalid date 'February 29' as '\" + year + \"' is not a leap year\", \"dayOfMonth\", day);\n+        }\n+\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}