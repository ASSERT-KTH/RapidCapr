{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n    int numParams = fnParams.getChildCount();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n    Node lastParam = fnParams.getLastChild();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName() &&\n        NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n\n    int numArgs = 0;\n    while (cArg != null) {\n      numArgs++;\n      cArg = cArg.getNext();\n    }\n\n    if (numArgs != numParams) {\n      return CanInlineResult.NO;\n    }\n\n    for (Node arg = callNode.getFirstChild().getNext(),\n        param = fnParams.getFirstChild();\n        arg != null && param != null;\n        arg = arg.getNext(), param = param.getNext()) {\n      if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      if (param.hasChildren()\n          // if the name in the parameter list is assigned to, it can't be inlined.\n          || NodeUtil.isNameAssigned(fnNode, lastParam.getString(), false)) {\n        return CanInlineResult.NO;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..12e73e0f 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,50 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n+    int numParams = fnParams.getChildCount();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n+    Node lastParam = fnParams.getLastChild();\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    if (!callNode.getFirstChild().isName() &&\n+        NodeUtil.isFunctionObjectCall(callNode)) {\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n       }\n+      cArg = cArg.getNext();\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    int numArgs = 0;\n+    while (cArg != null) {\n+      numArgs++;\n+      cArg = cArg.getNext();\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (numArgs != numParams) {\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    for (Node arg = callNode.getFirstChild().getNext(),\n+        param = fnParams.getFirstChild();\n+        arg != null && param != null;\n+        arg = arg.getNext(), param = param.getNext()) {\n+      if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+      if (param.hasChildren()\n+          // if the name in the parameter list is assigned to, it can't be inlined.\n+          || NodeUtil.isNameAssigned(fnNode, lastParam.getString(), false)) {\n+        return CanInlineResult.NO;\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}