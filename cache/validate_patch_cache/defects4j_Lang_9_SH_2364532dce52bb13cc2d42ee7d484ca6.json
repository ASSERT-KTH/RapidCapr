{
    "patch": "    private void init() {\n        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        currentFormatField = \"\";\n        nextFormatField = \"\";\n        Strategy currentStrategy = null;\n        Strategy nextStrategy = null;\n        if (patternMatcher.find()) {\n            currentFormatField = patternMatcher.group();\n            currentStrategy = getStrategy(currentFormatField);\n            if (currentStrategy.isNumber() && currentFormatField.contains(\"y\")) {\n                if (patternMatcher.find()) {\n                    intermediate = pattern.substring(currentFormatField.length(), patternMatcher.start());\n                    List<Integer> l = parseInteger(intermediate);\n                    if (l.size() >= 2 && l.get(0) <= 12 && l.get(1) <= 31 && l.get(1) != 0) {\n                        currentFormatField += intermediate + patternMatcher.group();\n                        currentStrategy = getStrategy(\"M\");\n                    }                                   \n                }\n            }\n        }\n        if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        \n        while (patternMatcher.regionStart()<pattern.length()) {\n            patternMatcher.find();\n            String intermediate = pattern.substring(patternMatcher.regionStart()-1, patternMatcher.start());\n            if (currentFormatField.contains(\"y\") && intermediate.contains(\" \") && !parseInteger(intermediate).isEmpty()) {\n                if (currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                }\n                currentStrategy = getStrategy(\"y\");\n                currentFormatField = \"y\";\n                continue;\n            }\n            nextFormatField = patternMatcher.group();                \n            nextStrategy = getStrategy(nextFormatField);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField = nextFormatField;\n            currentStrategy = nextStrategy;\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = null;\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..897a00e0 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,63 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+    private void init() {\n+        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+\n+        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+\n+        StringBuilder regex= new StringBuilder();\n+        List<Strategy> collector = new ArrayList<Strategy>();\n+\n+        Matcher patternMatcher= formatPattern.matcher(pattern);\n+        currentFormatField = \"\";\n+        nextFormatField = \"\";\n+        Strategy currentStrategy = null;\n+        Strategy nextStrategy = null;\n+        if (patternMatcher.find()) {\n+            currentFormatField = patternMatcher.group();\n+            currentStrategy = getStrategy(currentFormatField);\n+            if (currentStrategy.isNumber() && currentFormatField.contains(\"y\")) {\n+                if (patternMatcher.find()) {\n+                    intermediate = pattern.substring(currentFormatField.length(), patternMatcher.start());\n+                    List<Integer> l = parseInteger(intermediate);\n+                    if (l.size() >= 2 && l.get(0) <= 12 && l.get(1) <= 31 && l.get(1) != 0) {\n+                        currentFormatField += intermediate + patternMatcher.group();\n+                        currentStrategy = getStrategy(\"M\");\n+                    }                                   \n+                }\n+            }\n+        }\n+        if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        \n+        while (patternMatcher.regionStart()<pattern.length()) {\n+            patternMatcher.find();\n+            String intermediate = pattern.substring(patternMatcher.regionStart()-1, patternMatcher.start());\n+            if (currentFormatField.contains(\"y\") && intermediate.contains(\" \") && !parseInteger(intermediate).isEmpty()) {\n+                if (currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                }\n+                currentStrategy = getStrategy(\"y\");\n+                currentFormatField = \"y\";\n+                continue;\n+            }\n+            nextFormatField = patternMatcher.group();                \n+            nextStrategy = getStrategy(nextFormatField);\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            currentFormatField = nextFormatField;\n+            currentStrategy = nextStrategy;\n+        }\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField = null;\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n+    }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}