{
    "patch": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    if (value.isScript()) {\n      return false;\n    }\n    if (value.isFunction()) {\n      // Parameters behave like \"var\" statements.  They can shadow names\n      // within the function, but can't be changed.\n      return true;\n    }\n\n    boolean result = false;\n    boolean firstTime = true;\n    Node parent = value.getParent();\n\n    while (parent != null) {\n      switch (parent.getType()) {\n        case Token.AND:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.OR:\n          if (parent.getFirstChild() != value) {\n            return false;\n          }\n          break;\n\n        case Token.CONDITIONAL:\n          if (!firstTime) {\n            return false;\n          }\n          break;\n\n        case Token.WHILE:\n        case Token.FOR:\n        case Token.FOR_OF:\n        case Token.FOR_IN:\n        case Token.DO:\n        case Token.CASE:\n          return false;\n\n        case Token.EXPR_RESULT:\n        case Token.RETURN:\n          result = true;\n          break;\n\n        case Token.ASSIGN:\n          if (parent.getFirstChild() == value) {\n            return false;\n          }\n          result = true;\n          break;\n\n        case Token.INC:\n        case Token.DEC:\n          if (parent.getFirstChild() != value) {\n            return false;\n          }\n          //$FALL-THROUGH$\n        case Token.NAME:\n          result = true;\n          break;\n\n        case Token.NEW:\n          return newHasLocalResult(parent) || evaluatesToLocalValue(parent, locals);\n\n        case Token.CALL:\n          return callHasLocalResult(parent) || evaluatesToLocalValue(parent, locals);\n\n        case Token.GETTER_DEF:\n        case Token.MEMBER_DEF:\n          return true;\n\n        case Token.BLOCK:\n          if (firstTime) {\n            firstTime = false;\n            break;\n          }\n          //$FALL-THROUGH$\n        case Token.SCRIPT:\n        case Token.CATCH:\n        case Token.DEFAULT_VALUE:\n          // block scopes end lexical scoping, so these all end the\n          // search for a local declaration (if the search has failed to this\n          // point)\n          if (!result) {\n            return locals.apply(value);\n          }\n          return true;\n\n        case Token.LOOP:\n        case Token.SWITCH:\n          // because case statement blocks have an implicit block scope,\n          // allow an inner block scope to declare a local.\n          break;\n\n        case Token.WITH:\n          throw new IllegalStateException(\"With statement detected.  \"\n              + \"Most JavaScript minifiers can't handle 'with'.  \");\n\n        case Token.STRING_KEY:\n          // Object literal key. Note that object literals obey the same block\n          // scopes object literals with computed keys allowed. So if we don't\n          // find it in the object literal, it isn't a true local.\n          if (!result && parent.getParent().isObjLit()) {\n            result = true;\n          }\n          break;\n      }\n      value = parent;\n      parent = value.getParent();\n    }\n\n    switch (value.getType()) {\n      case Token.DELETE:\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n\n      case Token.THIS:\n        return locals.apply(value);\n\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node \" + value + \"\\n parent:\" + value.getParent());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..b418c902 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,244 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.apply(value);\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.apply(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.apply(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.apply(value);\n+      case Token.NEW:\n+        return newHasLocalResult(value)\n+               || locals.apply(value);\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literals objects with non-literal children are allowed.\n         return true;\n-      default:\n-        return false;\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    if (value.isScript()) {\n+      return false;\n     }\n-  }\n-\n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+    if (value.isFunction()) {\n+      // Parameters behave like \"var\" statements.  They can shadow names\n+      // within the function, but can't be changed.\n+      return true;\n     }\n-    return false;\n-  }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n+    boolean result = false;\n+    boolean firstTime = true;\n+    Node parent = value.getParent();\n \n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n-  }\n+    while (parent != null) {\n+      switch (parent.getType()) {\n+        case Token.AND:\n+        case Token.HOOK:\n+        case Token.IF:\n+        case Token.OR:\n+          if (parent.getFirstChild() != value) {\n+            return false;\n+          }\n+          break;\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+        case Token.CONDITIONAL:\n+          if (!firstTime) {\n+            return false;\n+          }\n+          break;\n+\n+        case Token.WHILE:\n+        case Token.FOR:\n+        case Token.FOR_OF:\n+        case Token.FOR_IN:\n+        case Token.DO:\n+        case Token.CASE:\n+          return false;\n+\n+        case Token.EXPR_RESULT:\n+        case Token.RETURN:\n+          result = true;\n+          break;\n+\n+        case Token.ASSIGN:\n+          if (parent.getFirstChild() == value) {\n+            return false;\n+          }\n+          result = true;\n+          break;\n+\n+        case Token.INC:\n+        case Token.DEC:\n+          if (parent.getFirstChild() != value) {\n+            return false;\n+          }\n+          //$FALL-THROUGH$\n+        case Token.NAME:\n+          result = true;\n+          break;\n+\n+        case Token.NEW:\n+          return newHasLocalResult(parent) || evaluatesToLocalValue(parent, locals);\n+\n+        case Token.CALL:\n+          return callHasLocalResult(parent) || evaluatesToLocalValue(parent, locals);\n+\n+        case Token.GETTER_DEF:\n+        case Token.MEMBER_DEF:\n+          return true;\n+\n+        case Token.BLOCK:\n+          if (firstTime) {\n+            firstTime = false;\n+            break;\n+          }\n+          //$FALL-THROUGH$\n+        case Token.SCRIPT:\n+        case Token.CATCH:\n+        case Token.DEFAULT_VALUE:\n+          // block scopes end lexical scoping, so these all end the\n+          // search for a local declaration (if the search has failed to this\n+          // point)\n+          if (!result) {\n+            return locals.apply(value);\n+          }\n+          return true;\n+\n+        case Token.LOOP:\n+        case Token.SWITCH:\n+          // because case statement blocks have an implicit block scope,\n+          // allow an inner block scope to declare a local.\n+          break;\n+\n+        case Token.WITH:\n+          throw new IllegalStateException(\"With statement detected.  \"\n+              + \"Most JavaScript minifiers can't handle 'with'.  \");\n+\n+        case Token.STRING_KEY:\n+          // Object literal key. Note that object literals obey the same block\n+          // scopes object literals with computed keys allowed. So if we don't\n+          // find it in the object literal, it isn't a true local.\n+          if (!result && parent.getParent().isObjLit()) {\n+            result = true;\n+          }\n+          break;\n+      }\n+      value = parent;\n+      parent = value.getParent();\n     }\n-  }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+    switch (value.getType()) {\n+      case Token.DELETE:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals);\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.apply(value);\n+\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+\n+      case Token.THIS:\n+        return locals.apply(value);\n+\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.apply(value);\n+\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literals objects with non-literal children are allowed.\n+        return true;\n+\n+      default:\n+        // Other op force a local value:\n+        //  x = '' + g (x is now an local string)\n+        //  x -= g (x is now an local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node \" + value + \"\\n parent:\" + value.getParent());\n+    }\n   }\n+      case Token.IN:\n+        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n+        return true;\n+      default:\n+        // Other op force a local value:\n+        //  x = '' + g (x is now an local string)\n+        //  x -= g (x is now an local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value +\n+            \"\\n parent:\" + value.getParent());\n+    }\n+  }\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}