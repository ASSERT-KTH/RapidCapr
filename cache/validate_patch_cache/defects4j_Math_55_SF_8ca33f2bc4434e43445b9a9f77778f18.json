{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    // If either vector is the zero vector, return it\n    if (v1x == 0 && v1y == 0 && v1z == 0) {\n        return v1;\n    }\n    if (v2x == 0 && v2y == 0 && v2z == 0) {\n        return v2;\n    }\n\n    // compute rho as an approximation of v1.v2 / ||v2||\n    final double v2n = v2.getNorm();\n    final double rho = v2n * Double.MIN_NORMAL * (\n            v1x * v2x + v1y * v2y + v1z * v2z >= 0 ? 1 : -1);\n    \n    // compute cross product from scratch\n    final double alpha = v1y * v2z - v2y * v1z;\n    final double beta = v2x * v1z - v1x * v2z;\n    final double gamma = v1x * v2y - v1y * v2x;\n    final double delta = v1x * v2x + v1y * v2y + v1z * v2z;\n    final double alphaPrime = alpha + rho * v2y * gamma - rho * v2z * beta;\n    final double betaPrime = beta + rho * v2z * alpha - rho * v2x * gamma;\n    final double gammaPrime = gamma + rho * v2x * beta - rho * v2y * alpha;\n\n    if (delta == 0) {\n        // vectors are colinear, return the zero vector\n        return new Vector3D(0, 0, 0);\n    } else {\n        return new Vector3D(alphaPrime, betaPrime, gammaPrime);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..5f73eb206 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,43 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+\n+    // If either vector is the zero vector, return it\n+    if (v1x == 0 && v1y == 0 && v1z == 0) {\n+        return v1;\n+    }\n+    if (v2x == 0 && v2y == 0 && v2z == 0) {\n+        return v2;\n+    }\n \n-  }\n+    // compute rho as an approximation of v1.v2 / ||v2||\n+    final double v2n = v2.getNorm();\n+    final double rho = v2n * Double.MIN_NORMAL * (\n+            v1x * v2x + v1y * v2y + v1z * v2z >= 0 ? 1 : -1);\n+    \n+    // compute cross product from scratch\n+    final double alpha = v1y * v2z - v2y * v1z;\n+    final double beta = v2x * v1z - v1x * v2z;\n+    final double gamma = v1x * v2y - v1y * v2x;\n+    final double delta = v1x * v2x + v1y * v2y + v1z * v2z;\n+    final double alphaPrime = alpha + rho * v2y * gamma - rho * v2z * beta;\n+    final double betaPrime = beta + rho * v2z * alpha - rho * v2x * gamma;\n+    final double gammaPrime = gamma + rho * v2x * beta - rho * v2y * alpha;\n+\n+    if (delta == 0) {\n+        // vectors are colinear, return the zero vector\n+        return new Vector3D(0, 0, 0);\n+    } else {\n+        return new Vector3D(alphaPrime, betaPrime, gammaPrime);\n+    }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<1.5707963267948968>",
    "test_result": "FAIL"
}