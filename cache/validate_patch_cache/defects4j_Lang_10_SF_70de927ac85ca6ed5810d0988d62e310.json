{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (regex == null) {\n        regex = new StringBuilder();\n    } else {\n        regex.setLength(0);\n    }\n\n    boolean wasWhite = false;\n    boolean quoteOpened = false;\n\n    int i = 0;\n    while (i < value.length()) {\n        char c = value.charAt(i++);\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (quoteOpened) {\n                        quoteOpened = false;\n                    } else if (i < value.length() && value.charAt(i) == '\\'') {\n                        regex.append(c);\n                        i++;\n                    } else {\n                        quoteOpened = true;\n                    }\n                } else {\n                    regex.append(c);\n                }\n                break;\n\n            case '\\\\':\n                if (i < value.length()) {\n                    char nextChar = value.charAt(i++);\n                    switch (nextChar) {\n                        case '\\'':\n                            regex.append('\\'');\n                            break;\n                        default:\n                            regex.append(\"\\\\\\\\\").append(nextChar);\n                            break;\n                    }\n                } else {\n                    regex.append(c);\n                }\n                break;\n\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\').append(c);\n                break;\n\n            case ' ':\n                if (!quoteOpened && !wasWhite) {\n                    wasWhite = true;\n                    regex.append(\"\\\\s*+\");\n                }\n                break;\n\n            default:\n                wasWhite = false;\n                regex.append(c);\n                break;\n        }\n    }\n\n    if (quoteOpened) {\n        throw new IllegalArgumentException(\"Unterminated single quote\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..92288cf4 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,27 +300,51 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (regex == null) {\n+        regex = new StringBuilder();\n+    } else {\n+        regex.setLength(0);\n+    }\n+\n+    boolean wasWhite = false;\n+    boolean quoteOpened = false;\n+\n+    int i = 0;\n+    while (i < value.length()) {\n+        char c = value.charAt(i++);\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    if (quoteOpened) {\n+                        quoteOpened = false;\n+                    } else if (i < value.length() && value.charAt(i) == '\\'') {\n+                        regex.append(c);\n+                        i++;\n+                    } else {\n+                        quoteOpened = true;\n                     }\n-                    c= value.charAt(i);\n+                } else {\n+                    regex.append(c);\n                 }\n                 break;\n+\n+            case '\\\\':\n+                if (i < value.length()) {\n+                    char nextChar = value.charAt(i++);\n+                    switch (nextChar) {\n+                        case '\\'':\n+                            regex.append('\\'');\n+                            break;\n+                        default:\n+                            regex.append(\"\\\\\\\\\").append(nextChar);\n+                            break;\n+                    }\n+                } else {\n+                    regex.append(c);\n+                }\n+                break;\n+\n             case '?':\n             case '[':\n             case ']':\n@@ -328,20 +352,35 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append('\\\\').append(c);\n+                break;\n+\n+            case ' ':\n+                if (!quoteOpened && !wasWhite) {\n+                    wasWhite = true;\n+                    regex.append(\"\\\\s*+\");\n+                }\n+                break;\n+\n+            default:\n+                wasWhite = false;\n+                regex.append(c);\n+                break;\n         }\n-        return regex;\n     }\n \n+    if (quoteOpened) {\n+        throw new IllegalArgumentException(\"Unterminated single quote\");\n+    }\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}