{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset at the given instant\n    int initialOffset = getOffset(instantLocal);\n  \n    // Check if the given instant is within a transition\n    try {\n        long nextTransition = nextTransition(instantLocal - initialOffset);\n        if (nextTransition == instantLocal) {\n            // The given instant is exactly on a transition\n            int offsetBeforeTransition = getOffset(nextTransition - 1);\n            return (initialOffset < offsetBeforeTransition) ? getOffset(nextTransition - 1) : offsetBeforeTransition;\n        } else {\n            long prevTransition = previousTransition(instantLocal - initialOffset);\n            if (prevTransition == instantLocal - initialOffset) {\n                // The given instant is within an overlap\n                int offsetBeforeOverlap = getOffset(prevTransition - 1);\n                int offsetAfterOverlap = getOffset(prevTransition);\n                return (instantLocal < nextTransition) ? offsetBeforeOverlap : offsetAfterOverlap;\n            } else {\n                // The given instant is between two separate transitions\n                int nextOffset = getOffset(nextTransition - 1);\n                int prevOffset = getOffset(prevTransition - 1);\n                if (prevOffset < nextOffset) {\n                    return (initialOffset >= nextOffset) ? nextOffset : prevOffset;\n                } else if (prevOffset > nextOffset) {\n                    return (initialOffset >= prevOffset) ? prevOffset : nextOffset;\n                } else {\n                    return prevOffset;\n                }\n            }\n        }\n    } catch (IllegalArgumentException e) {\n        // The given instant is within a gap or overlap\n        long nextInstant = (e.getMessage().startsWith(\"IllegalArgumentException: Transition time\")) ? parseGapOrOverlapInstant(e.getMessage()) : nextTransition(instantLocal - initialOffset + 1);\n        long prevInstant = previousTransition(nextInstant - 1) + 1;\n        int offsetBeforeGapOrOverlap = getOffset(prevInstant - 1);\n        int offsetAfterGapOrOverlap = getOffset(nextInstant);\n        if (offsetBeforeGapOrOverlap == offsetAfterGapOrOverlap) {\n            // This is an overlap\n            return (instantLocal < nextInstant) ? offsetBeforeGapOrOverlap : offsetAfterGapOrOverlap;\n        } else {\n            // This is a gap\n            return offsetBeforeGapOrOverlap;\n        }\n    }\n}\n\n/**\n * Parses the instant from the exception message for an IllegalArgumentException\n * caused by an instant within a gap or overlap.\n *\n * @param message the exception message containing the instant information\n * @return the instant within the gap or overlap\n */\nprivate long parseGapOrOverlapInstant(String message) {\n    String[] parts = message.split(\": \");\n    String instantString = parts[1].substring(0, parts[1].indexOf(' '));\n    return ISODateTimeFormat.dateTimeParser().parseMillis(instantString);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..56048df5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,65 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset at the given instant\n+    int initialOffset = getOffset(instantLocal);\n+  \n+    // Check if the given instant is within a transition\n+    try {\n+        long nextTransition = nextTransition(instantLocal - initialOffset);\n+        if (nextTransition == instantLocal) {\n+            // The given instant is exactly on a transition\n+            int offsetBeforeTransition = getOffset(nextTransition - 1);\n+            return (initialOffset < offsetBeforeTransition) ? getOffset(nextTransition - 1) : offsetBeforeTransition;\n+        } else {\n+            long prevTransition = previousTransition(instantLocal - initialOffset);\n+            if (prevTransition == instantLocal - initialOffset) {\n+                // The given instant is within an overlap\n+                int offsetBeforeOverlap = getOffset(prevTransition - 1);\n+                int offsetAfterOverlap = getOffset(prevTransition);\n+                return (instantLocal < nextTransition) ? offsetBeforeOverlap : offsetAfterOverlap;\n+            } else {\n+                // The given instant is between two separate transitions\n+                int nextOffset = getOffset(nextTransition - 1);\n+                int prevOffset = getOffset(prevTransition - 1);\n+                if (prevOffset < nextOffset) {\n+                    return (initialOffset >= nextOffset) ? nextOffset : prevOffset;\n+                } else if (prevOffset > nextOffset) {\n+                    return (initialOffset >= prevOffset) ? prevOffset : nextOffset;\n+                } else {\n+                    return prevOffset;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+    } catch (IllegalArgumentException e) {\n+        // The given instant is within a gap or overlap\n+        long nextInstant = (e.getMessage().startsWith(\"IllegalArgumentException: Transition time\")) ? parseGapOrOverlapInstant(e.getMessage()) : nextTransition(instantLocal - initialOffset + 1);\n+        long prevInstant = previousTransition(nextInstant - 1) + 1;\n+        int offsetBeforeGapOrOverlap = getOffset(prevInstant - 1);\n+        int offsetAfterGapOrOverlap = getOffset(nextInstant);\n+        if (offsetBeforeGapOrOverlap == offsetAfterGapOrOverlap) {\n+            // This is an overlap\n+            return (instantLocal < nextInstant) ? offsetBeforeGapOrOverlap : offsetAfterGapOrOverlap;\n+        } else {\n+            // This is a gap\n+            return offsetBeforeGapOrOverlap;\n+        }\n     }\n+}\n+\n+/**\n+ * Parses the instant from the exception message for an IllegalArgumentException\n+ * caused by an instant within a gap or overlap.\n+ *\n+ * @param message the exception message containing the instant information\n+ * @return the instant within the gap or overlap\n+ */\n+private long parseGapOrOverlapInstant(String message) {\n+    String[] parts = message.split(\": \");\n+    String instantString = parts[1].substring(0, parts[1].indexOf(' '));\n+    return ISODateTimeFormat.dateTimeParser().parseMillis(instantString);\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}