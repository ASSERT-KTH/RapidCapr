{
    "patch": "public Line revert() {\n    MathContext mc = new MathContext(34, RoundingMode.HALF_EVEN); // set precise MathContext\n    final Vector negatedDirection = direction.negate();\n    final Vector zeroWithPreciseDecimal = zero.round(mc); // round zero \n    final Vector shiftedZeroWithPreciseDecimal = zeroWithPreciseDecimal.add(negatedDirection).round(mc); // round zero - direction\n    final Line reverted = new Line(shiftedZeroWithPreciseDecimal, zeroWithPreciseDecimal); \n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..9da8c8cda 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    MathContext mc = new MathContext(34, RoundingMode.HALF_EVEN); // set precise MathContext\n+    final Vector negatedDirection = direction.negate();\n+    final Vector zeroWithPreciseDecimal = zero.round(mc); // round zero \n+    final Vector shiftedZeroWithPreciseDecimal = zeroWithPreciseDecimal.add(negatedDirection).round(mc); // round zero - direction\n+    final Line reverted = new Line(shiftedZeroWithPreciseDecimal, zeroWithPreciseDecimal); \n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}