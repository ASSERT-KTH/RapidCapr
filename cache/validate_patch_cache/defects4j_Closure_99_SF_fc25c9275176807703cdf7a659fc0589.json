{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions if they are immediately nested within an\n    // expression or named function. e.g., `(function() { function foo() {} })();`\n    if (parent.getType() == Token.CALL ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.NAME ||\n        (parent.getType() == Token.ASSIGN &&\n         parent.getFirstChild() == n)) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() {}; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (pType == Token.BLOCK ||\n        pType == Token.SCRIPT ||\n        pType == Token.NAME ||\n        pType == Token.ASSIGN) {\n      // If the function is a method and its owner object is not `this`\n      // and it does not have an @externs, @override, or @type annotation,\n      // then don't traverse it.\n      if (functionIsMethod(n) &&\n          (jsDoc == null ||\n           (!jsDoc.isConstructor() &&\n            !jsDoc.isExterns() &&\n            !jsDoc.isOverride() &&\n            !jsDoc.hasEnumParameterType()))) {\n        Node owner = NodeUtil.getEnclosingObjectLitKey(n);\n        if (owner != null &&\n            (!owner.getString().equals(\"this\") ||\n             !isThis(owner.getFirstChild()))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  } else {\n    // Traverse non-function nodes.\n    return true;\n  }\n}\n\nprivate boolean functionIsMethod(Node functionNode) {\n  if (functionNode.getParent() != null) {\n    switch (functionNode.getParent().getType()) {\n      case Token.METHOD_DEF:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean isThis(Node node) {\n  return node.getType() == Token.THIS;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..925ac822 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,78 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+    // Don't traverse functions if they are immediately nested within an\n+    // expression or named function. e.g., `(function() { function foo() {} })();`\n+    if (parent.getType() == Token.CALL ||\n+        parent.getType() == Token.VAR ||\n+        parent.getType() == Token.NAME ||\n+        (parent.getType() == Token.ASSIGN &&\n+         parent.getFirstChild() == n)) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() {}; // or\n+    // function a() {} // or\n+    // a.x = function() {};\n+    int pType = parent.getType();\n+    if (pType == Token.BLOCK ||\n+        pType == Token.SCRIPT ||\n+        pType == Token.NAME ||\n+        pType == Token.ASSIGN) {\n+      // If the function is a method and its owner object is not `this`\n+      // and it does not have an @externs, @override, or @type annotation,\n+      // then don't traverse it.\n+      if (functionIsMethod(n) &&\n+          (jsDoc == null ||\n+           (!jsDoc.isConstructor() &&\n+            !jsDoc.isExterns() &&\n+            !jsDoc.isOverride() &&\n+            !jsDoc.hasEnumParameterType()))) {\n+        Node owner = NodeUtil.getEnclosingObjectLitKey(n);\n+        if (owner != null &&\n+            (!owner.getString().equals(\"this\") ||\n+             !isThis(owner.getFirstChild()))) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n       }\n+      return true;\n     }\n-\n+    return false;\n+  } else {\n+    // Traverse non-function nodes.\n     return true;\n   }\n+}\n+\n+private boolean functionIsMethod(Node functionNode) {\n+  if (functionNode.getParent() != null) {\n+    switch (functionNode.getParent().getType()) {\n+      case Token.METHOD_DEF:\n+      case Token.GETTER_DEF:\n+      case Token.SETTER_DEF:\n+        return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+private boolean isThis(Node node) {\n+  return node.getType() == Token.THIS;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}