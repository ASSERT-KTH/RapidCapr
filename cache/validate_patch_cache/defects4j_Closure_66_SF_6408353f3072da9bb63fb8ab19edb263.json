{
    "patch": "public double getTypedPercent(String js) {\n    double numTyped = 0.0;\n    double numChars = 0.0;\n    for (char ch : js.toCharArray()) {\n        if (ch == '\"' || ch == '\\'') {\n            // skip string literals\n            continue;\n        } else if (ch != ' ' && ch != '\\t' && ch != '\\n' && ch != '\\r' && ch != '/') {\n            // count non-whitespace, non-comment characters\n            numChars++;\n            if (ch != ':') {\n                numTyped++;\n            }\n        }\n    }\n    return (numTyped / numChars) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0c284ca3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    double numTyped = 0.0;\n+    double numChars = 0.0;\n+    for (char ch : js.toCharArray()) {\n+        if (ch == '\"' || ch == '\\'') {\n+            // skip string literals\n+            continue;\n+        } else if (ch != ' ' && ch != '\\t' && ch != '\\n' && ch != '\\r' && ch != '/') {\n+            // count non-whitespace, non-comment characters\n+            numChars++;\n+            if (ch != ':') {\n+                numTyped++;\n+            }\n+        }\n+    }\n+    return (numTyped / numChars) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}