{
    "patch": "public Line revert() throws JsonProcessingException {\n    ObjectMapper objectMapper = new ObjectMapper();\n    objectMapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\n    objectMapper.registerModule(new SimpleModule().addSerializer(Double.class, new StdScalarSerializer<Double>(Double.class) {\n        @Override\n        public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n            jgen.writeNumber(BigDecimal.valueOf(value).setScale(15, RoundingMode.HALF_UP));\n        }\n    }));\n    String json = objectMapper.writeValueAsString(direction);\n    double[] roundedDirection = objectMapper.readValue(json, double[].class);\n    return new Line(Vector3D.ZERO, new Vector3D(roundedDirection).negate());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..64662c3f1 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,19 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() throws JsonProcessingException {\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    objectMapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\n+    objectMapper.registerModule(new SimpleModule().addSerializer(Double.class, new StdScalarSerializer<Double>(Double.class) {\n+        @Override\n+        public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+            jgen.writeNumber(BigDecimal.valueOf(value).setScale(15, RoundingMode.HALF_UP));\n+        }\n+    }));\n+    String json = objectMapper.writeValueAsString(direction);\n+    double[] roundedDirection = objectMapper.readValue(json, double[].class);\n+    return new Line(Vector3D.ZERO, new Vector3D(roundedDirection).negate());\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}