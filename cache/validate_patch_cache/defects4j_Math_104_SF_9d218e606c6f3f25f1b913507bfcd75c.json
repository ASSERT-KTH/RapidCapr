{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    double result;\n    double igf = regularizedGammaQ(a, x);\n    if (Double.isNaN(igf)) {\n        result = Double.NaN;\n    } else {\n        result = 1.0 - igf;\n    }\n    return result;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x >= a + 1) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    double initValue = 0.0;\n    double n = 0.0;\n    double an = 1.0 / a;\n    double term = an;\n    double sum = initValue + term;\n    while (Math.abs(term / sum) > 10e-15 && n < 1000) {\n        n += 1.0;\n        an = -an * x / (a + n);\n        term = an;\n        sum += term;\n    }\n    double result;\n    if (n >= 1000) {\n        result = Double.NaN;\n    } else {\n        result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n    return result;\n}\n\npublic static double logGamma(double x) {\n    if (x <= 0.0) {\n        return Double.NaN;\n    }\n    double result = 0.0;\n    double y = x;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    for (int i = 0; i < 5; i++) {\n        y += 1.0;\n        result += Math.log(y / (x + i + 1.0));\n    }\n    return -tmp + Math.log(2.5066282746310007 * result / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..426ed8dea 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,67 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    double result;\n+    double igf = regularizedGammaQ(a, x);\n+    if (Double.isNaN(igf)) {\n+        result = Double.NaN;\n+    } else {\n+        result = 1.0 - igf;\n+    }\n+    return result;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    double initValue = 0.0;\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double term = an;\n+    double sum = initValue + term;\n+    while (Math.abs(term / sum) > 10e-15 && n < 1000) {\n+        n += 1.0;\n+        an = -an * x / (a + n);\n+        term = an;\n+        sum += term;\n+    }\n+    double result;\n+    if (n >= 1000) {\n+        result = Double.NaN;\n+    } else {\n+        result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+    return result;\n+}\n+\n+public static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        return Double.NaN;\n+    }\n+    double result = 0.0;\n+    double y = x;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    for (int i = 0; i < 5; i++) {\n+        y += 1.0;\n+        result += Math.log(y / (x + i + 1.0));\n+    }\n+    return -tmp + Math.log(2.5066282746310007 * result / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}