{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input==null || index<0 || index>=input.length()) {\n        return 0;\n    }\n    char first = input.charAt(index);\n    char second = (index+1<input.length()) ? input.charAt(index+1) : 0;\n    if (first != '&' || second != '#') {\n        return 0;\n    }\n    boolean isHex = false;\n    int start = index+2;\n    if (start<input.length() && (input.charAt(start)=='x' || input.charAt(start)=='X')) {\n        isHex = true;\n        start++;\n    }\n    int end = start;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n    int entityValue;\n    try {\n        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n    } catch(NumberFormatException nfe) {\n        return 0;\n    }\n    if (entityValue < 0 || entityValue >= Character.MIN_SURROGATE) {\n        out.write(entityValue);\n    } else if (entityValue < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n        out.write((char)entityValue);\n    } else {\n        out.write(Character.highSurrogate(entityValue));\n        out.write(Character.lowSurrogate(entityValue));\n    }\n    return end+1-index;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..c793117f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,39 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    if (input==null || index<0 || index>=input.length()) {\n+        return 0;\n+    }\n+    char first = input.charAt(index);\n+    char second = (index+1<input.length()) ? input.charAt(index+1) : 0;\n+    if (first != '&' || second != '#') {\n         return 0;\n     }\n+    boolean isHex = false;\n+    int start = index+2;\n+    if (start<input.length() && (input.charAt(start)=='x' || input.charAt(start)=='X')) {\n+        isHex = true;\n+        start++;\n+    }\n+    int end = start;\n+    while (end < input.length() && input.charAt(end) != ';') {\n+        end++;\n+    }\n+    int entityValue;\n+    try {\n+        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n+    } catch(NumberFormatException nfe) {\n+        return 0;\n+    }\n+    if (entityValue < 0 || entityValue >= Character.MIN_SURROGATE) {\n+        out.write(entityValue);\n+    } else if (entityValue < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+        out.write((char)entityValue);\n+    } else {\n+        out.write(Character.highSurrogate(entityValue));\n+        out.write(Character.lowSurrogate(entityValue));\n+    }\n+    return end+1-index;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: Failed to unescape numeric entities supplementary characters expected:<[\ud803\udc22]> but was:<[\u0c22]>",
    "test_result": "FAIL"
}