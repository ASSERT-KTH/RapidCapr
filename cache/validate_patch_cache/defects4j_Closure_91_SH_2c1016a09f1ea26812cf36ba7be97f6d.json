{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null) {\n        if (grandparent.getType() == Token.EXPR_RESULT ||\n            (grandparent.getType() == Token.VAR &&\n             grandparent.getParent() != null &&\n             grandparent.getParent().getType() == Token.SCRIPT)) {\n          return false;\n        }\n        if (NodeUtil.isCall(grandparent)) {\n          Node callTarget = grandparent.getFirstChild();\n          if (callTarget.getType() == Token.GETPROP && callTarget.getLastChild().getString().equals(\"bind\")) {\n            return false;\n          }\n        }\n        if (grandparent.getType() == Token.FOR &&\n            parent == grandparent.getFirstChild() &&\n            grandparent.getSecondChild() != null &&\n            grandparent.getSecondChild().getType() == Token.IN) {\n          // Do not traverse the value assigned by the `for-in` statement.\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e6dab9f2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null) {\n+        if (grandparent.getType() == Token.EXPR_RESULT ||\n+            (grandparent.getType() == Token.VAR &&\n+             grandparent.getParent() != null &&\n+             grandparent.getParent().getType() == Token.SCRIPT)) {\n+          return false;\n+        }\n+        if (NodeUtil.isCall(grandparent)) {\n+          Node callTarget = grandparent.getFirstChild();\n+          if (callTarget.getType() == Token.GETPROP && callTarget.getLastChild().getString().equals(\"bind\")) {\n+            return false;\n+          }\n+        }\n+        if (grandparent.getType() == Token.FOR &&\n+            parent == grandparent.getFirstChild() &&\n+            grandparent.getSecondChild() != null &&\n+            grandparent.getSecondChild().getType() == Token.IN) {\n+          // Do not traverse the value assigned by the `for-in` statement.\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}