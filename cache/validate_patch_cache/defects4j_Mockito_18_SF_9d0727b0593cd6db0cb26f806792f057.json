{
    "patch": "public static boolean isTwoPower(int n) {\n    if (n <= 0) {\n        return false;\n    }\n    int power = 0;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            return false;\n        }\n        n = n / 2;\n        power++;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..d302b56b5 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static boolean isTwoPower(int n) {\n+    if (n <= 0) {\n+        return false;\n+    }\n+    int power = 0;\n+    while (n != 1) {\n+        if (n % 2 != 0) {\n+            return false;\n+        }\n+        n = n / 2;\n+        power++;\n+    }\n+    return true;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}