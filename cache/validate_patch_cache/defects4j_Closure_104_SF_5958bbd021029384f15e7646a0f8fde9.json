{
    "patch": "  private JSType greatestSubtypeHelper(Set<ObjectType> seenThings) {\n    if (seenThings.contains(this)) {\n      return null;\n    }\n    Set<ObjectType> subtypes = new HashSet<>();\n    for (ObjectType type : getConstructor().getDirectSubTypes()) {\n      subtypes.add(type);\n      subtypes.addAll(type.greatestSubtypeHelper(seenThings));\n    }\n    JSType maybeGreatest = getRegistry()\n        .createUnionType(subtypes.toArray(new ObjectType[0]))\n        .evaluate(null);\n    if (maybeGreatest.isBottom()) {\n      return null;\n    }\n    JSType result = getGreatestSubtypeHelper(maybeGreatest, seenThings);\n    if (result == null) {\n      return maybeGreatest;\n    }\n    return result;\n  }\n\n  private JSType getGreatestSubtypeHelper(JSType other, Set<ObjectType> seenThings) {\n    if (other == null) {\n      return null;\n    } else if (other instanceof ObjectType) {\n      ObjectType otherObjectType = (ObjectType) other;\n      if (this.equals(otherObjectType)) {\n        return this;\n      } else if (otherObjectType.getConstructor() == null\n          || !otherObjectType.getConstructor().isFinalized()) {\n        return null;\n      } else {\n        return getGreatestSubtypeHelper(\n            otherObjectType.getConstructor().getRawType().evaluate(null), seenThings);\n      }\n    } else if (other instanceof UnionType) {\n      UnionType that = (UnionType) other;\n      JSType sup = null;\n      for (JSType alternate : that.alternates) {\n        JSType sub = getGreatestSubtypeHelper(alternate, seenThings);\n        if (sub != null) {\n          if (sup == null) {\n            sup = sub;\n          } else {\n            sup = sup.getLeastSupertype(sub);\n          }\n        }\n      }\n      return sup;\n    }\n    return null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..0586e3a6 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,59 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n+  private JSType greatestSubtypeHelper(Set<ObjectType> seenThings) {\n+    if (seenThings.contains(this)) {\n+      return null;\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+    Set<ObjectType> subtypes = new HashSet<>();\n+    for (ObjectType type : getConstructor().getDirectSubTypes()) {\n+      subtypes.add(type);\n+      subtypes.addAll(type.greatestSubtypeHelper(seenThings));\n     }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+    JSType maybeGreatest = getRegistry()\n+        .createUnionType(subtypes.toArray(new ObjectType[0]))\n+        .evaluate(null);\n+    if (maybeGreatest.isBottom()) {\n+      return null;\n     }\n+    JSType result = getGreatestSubtypeHelper(maybeGreatest, seenThings);\n+    if (result == null) {\n+      return maybeGreatest;\n+    }\n+    return result;\n   }\n \n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n+  private JSType getGreatestSubtypeHelper(JSType other, Set<ObjectType> seenThings) {\n+    if (other == null) {\n+      return null;\n+    } else if (other instanceof ObjectType) {\n+      ObjectType otherObjectType = (ObjectType) other;\n+      if (this.equals(otherObjectType)) {\n+        return this;\n+      } else if (otherObjectType.getConstructor() == null\n+          || !otherObjectType.getConstructor().isFinalized()) {\n+        return null;\n+      } else {\n+        return getGreatestSubtypeHelper(\n+            otherObjectType.getConstructor().getRawType().evaluate(null), seenThings);\n+      }\n+    } else if (other instanceof UnionType) {\n+      UnionType that = (UnionType) other;\n+      JSType sup = null;\n+      for (JSType alternate : that.alternates) {\n+        JSType sub = getGreatestSubtypeHelper(alternate, seenThings);\n+        if (sub != null) {\n+          if (sup == null) {\n+            sup = sub;\n+          } else {\n+            sup = sup.getLeastSupertype(sub);\n+          }\n+        }\n       }\n+      return sup;\n+    }\n+    return null;\n+  }\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}