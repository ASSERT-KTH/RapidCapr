{
    "patch": "case Token.TRY:\n    // If we are coming out of the TRY block...\n    if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n        } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n        }\n    // CATCH block.\n    } else if (NodeUtil.getCatchBlock(parent) == node){\n        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            Node finallyNode = parent.getFirstChild().getLastChild(); // Get the FINALLY block.\n            if (finallyNode != null) {\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                // Now, create an edge from all the nodes inside the FINALLY block, \n                // to the node following the TRY-CATCH-FINALLY block.\n                Node follow = computeFollowNode(fromNode, parent, cfa);\n                if (follow != null) {\n                    List<Node> finallyNodes = cfa.finallyMap.get(parent);\n                    for (Node n : finallyNodes) {\n                        cfa.createEdge(n, Branch.UNCOND, follow.getNext());\n                    }\n                }\n            }\n            return computeFollowNode(fromNode, parent, cfa);\n        } else {\n            return computeFollowNode(fromNode, parent, cfa);\n        }\n    // If we are coming out of the FINALLY block...\n    } else if (parent.getLastChild() == node){\n        return computeFollowNode(fromNode, parent, cfa);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ddacbb4b 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,38 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+case Token.TRY:\n+    // If we are coming out of the TRY block...\n+    if (parent.getFirstChild() == node) {\n+        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            return computeFallThrough(parent.getLastChild());\n+        } else { // and have no FINALLY.\n+            return computeFollowNode(fromNode, parent, cfa);\n+        }\n+    // CATCH block.\n+    } else if (NodeUtil.getCatchBlock(parent) == node){\n+        if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            Node finallyNode = parent.getFirstChild().getLastChild(); // Get the FINALLY block.\n+            if (finallyNode != null) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                // Now, create an edge from all the nodes inside the FINALLY block, \n+                // to the node following the TRY-CATCH-FINALLY block.\n+                Node follow = computeFollowNode(fromNode, parent, cfa);\n+                if (follow != null) {\n+                    List<Node> finallyNodes = cfa.finallyMap.get(parent);\n+                    for (Node n : finallyNodes) {\n+                        cfa.createEdge(n, Branch.UNCOND, follow.getNext());\n+                    }\n+                }\n+            }\n+            return computeFollowNode(fromNode, parent, cfa);\n+        } else {\n+            return computeFollowNode(fromNode, parent, cfa);\n+        }\n+    // If we are coming out of the FINALLY block...\n+    } else if (parent.getLastChild() == node){\n+        return computeFollowNode(fromNode, parent, cfa);\n+    }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}