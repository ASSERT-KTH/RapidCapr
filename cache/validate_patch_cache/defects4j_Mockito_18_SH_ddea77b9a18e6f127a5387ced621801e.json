{
    "patch": "public ReturnValue execute(final Execution execution) throws Throwable {\n    final ObjectList<Object> args = new ObjectArrayList<>();\n    final ReturnValue value = ExecutionUtils.executeWithTimeout(execution, target, args);\n    if (value.getType() == ReturnValue.Type.THROWABLE) {\n        throw (Throwable) value.getValue();\n    } else if (value.getType() == ReturnValue.Type.RETURN && value.getValue() instanceof Callable) {\n        final Callable<?> callable = (Callable<?>) value.getValue();\n        try {\n            final Object result = callable.call();\n            return ReturnValue.forValue(result);\n        } catch (final Throwable t) {\n            throw t;\n        }\n    } else {\n        return value;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}