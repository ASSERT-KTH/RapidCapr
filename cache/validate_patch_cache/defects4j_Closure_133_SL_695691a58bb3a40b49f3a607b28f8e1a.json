{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine().trim();\n    // Check if there is JSDoc parse error regarding type annotation\n    if (result.contains(JSDocInfoBuilder.JSDOC_TYPE_PARSE_ERROR)) {\n        // Skip error and return remaining JSDoc line\n        result = result.substring(result.indexOf(\"\\n\") + 1).trim();\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..48f5bd2f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,15 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine().trim();\n+    // Check if there is JSDoc parse error regarding type annotation\n+    if (result.contains(JSDocInfoBuilder.JSDOC_TYPE_PARSE_ERROR)) {\n+        // Skip error and return remaining JSDoc line\n+        result = result.substring(result.indexOf(\"\\n\") + 1).trim();\n+    }\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}