{
    "patch": "public class IRFactory {\n    // ...\n\n    /**\n     * Transforms a Rhino AST into a Google Closure Compiler AST.\n     */\n    public static Node transform(AstNode rootNode, SourceInfo sourceInfo) {\n        // ...\n        return transform(new TransformDispatcher(), rootNode, sourceInfo);\n    }\n\n}\n\n/**\n * Dispatches transformNode calls based on the node type. Use this dispatcher\n * when you want to apply a transform to every node in the tree.\n */\nclass TransformDispatcher implements IRFactory.TypeSafeDispatcher {\n    private static final List<String> ALLOWED_DIRECTIVES =\n            ImmutableList.of(\"use strict\");\n\n    private boolean isDirective(AstNode n) {\n        return n instanceof ExpressionStatement &&\n                ((ExpressionStatement) n).getExpression() instanceof StringLiteral &&\n                ALLOWED_DIRECTIVES.contains(((StringLiteral) ((ExpressionStatement) n)\n                        .getExpression()).getValue());\n    }\n\n    /**\n     * Transforms the body of a function. Adds a BLOCK node around the statements\n     * if necessary.\n     */\n    Node processFunctionBody(FunctionNode functionNode) {\n        // ...\n    }\n\n    // Other methods here...\n\n    @Override\n    public Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = newNode(Token.EXPR_RESULT);\n        AstNode exprNode = statementNode.getExpression();\n        if (!isDirective(exprNode)) {\n            node.addChildToBack(transform(exprNode));\n        }\n        return node;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..0df77910 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,54 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory {\n+    // ...\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    /**\n+     * Transforms a Rhino AST into a Google Closure Compiler AST.\n+     */\n+    public static Node transform(AstNode rootNode, SourceInfo sourceInfo) {\n+        // ...\n+        return transform(new TransformDispatcher(), rootNode, sourceInfo);\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+}\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+/**\n+ * Dispatches transformNode calls based on the node type. Use this dispatcher\n+ * when you want to apply a transform to every node in the tree.\n+ */\n+class TransformDispatcher implements IRFactory.TypeSafeDispatcher {\n+    private static final List<String> ALLOWED_DIRECTIVES =\n+            ImmutableList.of(\"use strict\");\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    private boolean isDirective(AstNode n) {\n+        return n instanceof ExpressionStatement &&\n+                ((ExpressionStatement) n).getExpression() instanceof StringLiteral &&\n+                ALLOWED_DIRECTIVES.contains(((StringLiteral) ((ExpressionStatement) n)\n+                        .getExpression()).getValue());\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    /**\n+     * Transforms the body of a function. Adds a BLOCK node around the statements\n+     * if necessary.\n+     */\n+    Node processFunctionBody(FunctionNode functionNode) {\n+        // ...\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+    // Other methods here...\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    public Node processExpressionStatement(ExpressionStatement statementNode) {\n+        Node node = newNode(Token.EXPR_RESULT);\n+        AstNode exprNode = statementNode.getExpression();\n+        if (!isDirective(exprNode)) {\n+            node.addChildToBack(transform(exprNode));\n+        }\n+        return node;\n     }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: class IRFactory is already defined in package com.google.javascript.jscomp.parsing",
    "test_result": "ERROR"
}