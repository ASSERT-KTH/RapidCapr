{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    final String[] parts = str.substring(2).split(\"_\", -1);\n    final int length = parts.length;\n    if (length == 1) {\n        language = str.substring(0, 2);\n        country = parts[0];\n    } else if (length == 2) {\n        language = str.substring(0, 2);\n        country = parts[0];\n        variant = parts[1];\n    } else if (length == 3) {\n        language = str.substring(0, 2);\n        country = parts[0];\n        variant = parts[1] + \"_\" + parts[2];\n    } else {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (!isValidLanguageCode(language)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (!isValidCountryCode(country)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (!isValidVariantCode(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidLanguageCode(String language) {\n    String pattern = \"^[a-z]{2}$\";\n    return language.matches(pattern);\n}\n\nprivate static boolean isValidCountryCode(String country) {\n    String pattern = \"^[A-Z]{2}|[0-9]{3}$\";\n    return country.matches(pattern);\n}\n\nprivate static boolean isValidVariantCode(String variant) {\n    String pattern = \"^[a-zA-Z0-9][a-zA-Z0-9_]*[a-zA-Z0-9]$\";\n    return variant.matches(pattern);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..62eaf8c8 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,78 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str);\n+    }\n+    if (len < 5) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n \n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    final String[] parts = str.substring(2).split(\"_\", -1);\n+    final int length = parts.length;\n+    if (length == 1) {\n+        language = str.substring(0, 2);\n+        country = parts[0];\n+    } else if (length == 2) {\n+        language = str.substring(0, 2);\n+        country = parts[0];\n+        variant = parts[1];\n+    } else if (length == 3) {\n+        language = str.substring(0, 2);\n+        country = parts[0];\n+        variant = parts[1] + \"_\" + parts[2];\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (!isValidLanguageCode(language)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (!isValidCountryCode(country)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (!isValidVariantCode(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidLanguageCode(String language) {\n+    String pattern = \"^[a-z]{2}$\";\n+    return language.matches(pattern);\n+}\n+\n+private static boolean isValidCountryCode(String country) {\n+    String pattern = \"^[A-Z]{2}|[0-9]{3}$\";\n+    return country.matches(pattern);\n+}\n+\n+private static boolean isValidVariantCode(String variant) {\n+    String pattern = \"^[a-zA-Z0-9][a-zA-Z0-9_]*[a-zA-Z0-9]$\";\n+    return variant.matches(pattern);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}