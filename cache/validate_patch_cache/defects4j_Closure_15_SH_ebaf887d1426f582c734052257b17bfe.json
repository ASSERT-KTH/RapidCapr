{
    "patch": "        if (n.isScript() || (n.isFunction() && NodeUtil.getFunctionBody(n) == null)) {\n          return false;\n        }\n\n        if (n.isCall() || n.isNew()) {\n          boolean isSideEffectFree = n.isCall() ? NodeUtil.functionCallIsSideEffectFree(n)\n              : NodeUtil.constructorCallIsSideEffectFree(n);\n          if (!isSideEffectFree) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..d3f7d3de 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,14 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isScript() || (n.isFunction() && NodeUtil.getFunctionBody(n) == null)) {\n+          return false;\n+        }\n+\n+        if (n.isCall() || n.isNew()) {\n+          boolean isSideEffectFree = n.isCall() ? NodeUtil.functionCallIsSideEffectFree(n)\n+              : NodeUtil.constructorCallIsSideEffectFree(n);\n+          if (!isSideEffectFree) {\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}