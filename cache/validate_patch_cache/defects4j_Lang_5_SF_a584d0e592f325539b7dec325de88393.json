{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final int len = str.length();\n    final int firstUnderscore = str.indexOf('_');\n    final int lastUnderscore = str.lastIndexOf('_');\n\n    if (firstUnderscore == -1) {\n        if (len < 2 || !Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str);\n    }\n\n    if (firstUnderscore == lastUnderscore) {\n        // Two-letter language, two-letter country, no variant\n        if (lastUnderscore != len - 3 || !Character.isUpperCase(str.charAt(lastUnderscore + 1))\n                || !Character.isUpperCase(str.charAt(lastUnderscore + 2))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, firstUnderscore), \n                str.substring(firstUnderscore + 1, lastUnderscore), \"\");\n    }\n\n    if (firstUnderscore > 0 && lastUnderscore == len - 3) {\n        // Two-letter language, two-letter country, one-letter variant (special case)\n        if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1)) \n                || !Character.isUpperCase(str.charAt(len - 2))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), \"\", str.substring(3));\n    }\n\n    if (firstUnderscore == 2 && lastUnderscore == len - 3) {\n        // Two-letter language, two-letter country, variant\n        if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))\n                || !Character.isUpperCase(str.charAt(len - 2)) || !str.substring(3, len - 2).matches(\"[0-9a-zA-Z]+\")) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, lastUnderscore), str.substring(lastUnderscore + 1));\n    }\n\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..d62a9587 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,53 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+    final int firstUnderscore = str.indexOf('_');\n+    final int lastUnderscore = str.lastIndexOf('_');\n+\n+    if (firstUnderscore == -1) {\n+        if (len < 2 || !Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        return new Locale(str);\n+    }\n+\n+    if (firstUnderscore == lastUnderscore) {\n+        // Two-letter language, two-letter country, no variant\n+        if (lastUnderscore != len - 3 || !Character.isUpperCase(str.charAt(lastUnderscore + 1))\n+                || !Character.isUpperCase(str.charAt(lastUnderscore + 2))) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        return new Locale(str.substring(0, firstUnderscore), \n+                str.substring(firstUnderscore + 1, lastUnderscore), \"\");\n+    }\n+\n+    if (firstUnderscore > 0 && lastUnderscore == len - 3) {\n+        // Two-letter language, two-letter country, one-letter variant (special case)\n+        if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1)) \n+                || !Character.isUpperCase(str.charAt(len - 2))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(str.substring(0, 2), \"\", str.substring(3));\n     }\n \n+    if (firstUnderscore == 2 && lastUnderscore == len - 3) {\n+        // Two-letter language, two-letter country, variant\n+        if (!Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))\n+                || !Character.isUpperCase(str.charAt(len - 2)) || !str.substring(3, len - 2).matches(\"[0-9a-zA-Z]+\")) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(str.substring(0, 2), str.substring(3, lastUnderscore), str.substring(lastUnderscore + 1));\n+    }\n+\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}