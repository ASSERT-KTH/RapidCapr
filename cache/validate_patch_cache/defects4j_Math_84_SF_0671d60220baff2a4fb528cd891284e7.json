{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair shrinked[] = shrink(original, comparator);\n                    nShrinking++;\n                    if (comparator.compare(shrinked[0], original[0]) < 0) {\n                        // accept the shrinked simplex\n                        initialSimplex = simplex = shrinked;\n                    } else {\n                        // accept the best simplex\n                        initialSimplex = simplex = original;\n                    }\n\n                }\n\n            }\n\n            // check convergence\n            final RealPointValuePair current = simplex[0];\n            final double y = current.getValue();\n            final double[] x = current.getPoint();\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                final double[] e = simplex[i].getPoint();\n                double dist = 0;\n                for (int j = 0; j < x.length; ++j) {\n                    final double dx = e[j] - x[j];\n                    dist += dx * dx;\n                }\n                if (dist > getAbsoluteThreshold() + getRelativeThreshold() * FastMath.max(FastMath.abs(y), FastMath.abs(simplex[i].getValue()))) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged) {\n                return;\n            }\n\n            if (getEvaluations() >= maxEvaluations) {\n                throw new OptimizationException(new MaxIterationsExceededException(maxEvaluations));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..0989b314b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,63 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = reflectedSimplex;\n+                }\n \n-        while (true) {\n+            } else {\n \n-            incrementIterationsCounter();\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex;\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+                } else {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+                    // perform a shrink step\n+                    final RealPointValuePair shrinked[] = shrink(original, comparator);\n+                    nShrinking++;\n+                    if (comparator.compare(shrinked[0], original[0]) < 0) {\n+                        // accept the shrinked simplex\n+                        initialSimplex = simplex = shrinked;\n+                    } else {\n+                        // accept the best simplex\n+                        initialSimplex = simplex = original;\n+                    }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n                 }\n \n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            final RealPointValuePair current = simplex[0];\n+            final double y = current.getValue();\n+            final double[] x = current.getPoint();\n+            boolean converged = true;\n+            for (int i = 0; i < simplex.length; ++i) {\n+                final double[] e = simplex[i].getPoint();\n+                double dist = 0;\n+                for (int j = 0; j < x.length; ++j) {\n+                    final double dx = e[j] - x[j];\n+                    dist += dx * dx;\n+                }\n+                if (dist > getAbsoluteThreshold() + getRelativeThreshold() * FastMath.max(FastMath.abs(y), FastMath.abs(simplex[i].getValue()))) {\n+                    converged = false;\n+                    break;\n+                }\n+            }\n+            if (converged) {\n                 return;\n             }\n \n-        }\n-\n-    }\n+            if (getEvaluations() >= maxEvaluations) {\n+                throw new OptimizationException(new MaxIterationsExceededException(maxEvaluations));\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}