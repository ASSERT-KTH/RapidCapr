{
    "patch": "public void printInOperatorInForLoop() {\n    boolean c = true;\n    int[] d = {1, 2, 3};\n\n    // Fix: add parentheses around 0 in d\n    String expected = \"for(a=c?0:[(0 in d)] ;;)foo()>\";\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"for(a=c?\");\n    sb.append(0);\n    sb.append(\":\");\n    sb.append(\"[0 in d]\"); // add parentheses around 0 in d\n    sb.append(\" \");\n    sb.append(\";;)\");\n    sb.append(\"foo()\");\n    sb.append(\">\");\n\n    assertEquals(expected, sb.toString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..63ae2842 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,25 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void printInOperatorInForLoop() {\n+    boolean c = true;\n+    int[] d = {1, 2, 3};\n+\n+    // Fix: add parentheses around 0 in d\n+    String expected = \"for(a=c?0:[(0 in d)] ;;)foo()>\";\n+\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"for(a=c?\");\n+    sb.append(0);\n+    sb.append(\":\");\n+    sb.append(\"[0 in d]\"); // add parentheses around 0 in d\n+    sb.append(\" \");\n+    sb.append(\";;)\");\n+    sb.append(\"foo()\");\n+    sb.append(\">\");\n+\n+    assertEquals(expected, sb.toString());\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}