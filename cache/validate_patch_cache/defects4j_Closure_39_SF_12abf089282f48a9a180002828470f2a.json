{
    "patch": "  public boolean canBeCalled() {\n    return !isRegexpType() && !isUnknownType() && !isTemplateType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n                   propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n\n        List<String> currPropertyNames = current.getOwnPropertyNames();\n        for (String currPropertyName: currPropertyNames) {\n          boolean hasGetterOrSetter = false;\n\n          // we do not show properties which only have getters or setters\n          // XXX: Are there situations where we do want to show these properties anyway?\n          ObjectType propertyOwner = current;\n          while (propertyOwner != null && !propertyOwner.isNativeObjectType()) {\n            PropertyDefinition pd = propertyOwner.getOwnPropertyDef(currPropertyName);\n            if (pd != null && pd.type == JSType.TEMPLATE_TYPE) {\n                hasGetterOrSetter = true;\n                return \"{}\";\n            }\n\n            ObjectType objType = ObjectType.cast(propertyOwner.getSlotType(currPropertyName));\n            if (objType != null) {\n              ObjectType functionPrototype = objType.getImplicitPrototype();\n              if (functionPrototype != null &&\n                  functionPrototype.getSlot(\"call\").getType().isFunctionType() &&\n                  functionPrototype.getSlot(\"apply\").getType().isFunctionType()) {\n                hasGetterOrSetter = true;\n                break;\n              }\n            }\n\n            propertyOwner = propertyOwner.getImplicitPrototype();\n          }\n\n          if (!hasGetterOrSetter) {\n            propertyNames.add(currPropertyName);\n          }\n        }\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..60083dc9 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,7 +346,7 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType() && !isUnknownType() && !isTemplateType();\n   }\n \n   @Override\n@@ -361,9 +361,41 @@ class PrototypeObjectType extends ObjectType {\n       Set<String> propertyNames = Sets.newTreeSet();\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+                   propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+\n+        List<String> currPropertyNames = current.getOwnPropertyNames();\n+        for (String currPropertyName: currPropertyNames) {\n+          boolean hasGetterOrSetter = false;\n+\n+          // we do not show properties which only have getters or setters\n+          // XXX: Are there situations where we do want to show these properties anyway?\n+          ObjectType propertyOwner = current;\n+          while (propertyOwner != null && !propertyOwner.isNativeObjectType()) {\n+            PropertyDefinition pd = propertyOwner.getOwnPropertyDef(currPropertyName);\n+            if (pd != null && pd.type == JSType.TEMPLATE_TYPE) {\n+                hasGetterOrSetter = true;\n+                return \"{}\";\n+            }\n+\n+            ObjectType objType = ObjectType.cast(propertyOwner.getSlotType(currPropertyName));\n+            if (objType != null) {\n+              ObjectType functionPrototype = objType.getImplicitPrototype();\n+              if (functionPrototype != null &&\n+                  functionPrototype.getSlot(\"call\").getType().isFunctionType() &&\n+                  functionPrototype.getSlot(\"apply\").getType().isFunctionType()) {\n+                hasGetterOrSetter = true;\n+                break;\n+              }\n+            }\n+\n+            propertyOwner = propertyOwner.getImplicitPrototype();\n+          }\n+\n+          if (!hasGetterOrSetter) {\n+            propertyNames.add(currPropertyName);\n+          }\n+        }\n       }\n \n       StringBuilder sb = new StringBuilder();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}