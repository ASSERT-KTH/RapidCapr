{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (!m.isSquare()) {\n        throw new IllegalArgumentException(\"Matrix is not square\");\n    }\n\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealVector eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix v = dec.getV();\n    final int n = m.getRowDimension();\n\n    // get square root of eigenvalues\n    for (int i = 0; i < n; i++) {\n        double value = eigenvalues.getEntry(i);\n        if (value < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        eigenvalues.setEntry(i, Math.sqrt(value));\n    }\n\n    // construct the diagonal matrix of square root of eigenvalues\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(eigenvalues.toArray());\n\n    // calculate the square root of matrix\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7f3b979f0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (!m.isSquare()) {\n+        throw new IllegalArgumentException(\"Matrix is not square\");\n     }\n+\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealVector eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix v = dec.getV();\n+    final int n = m.getRowDimension();\n+\n+    // get square root of eigenvalues\n+    for (int i = 0; i < n; i++) {\n+        double value = eigenvalues.getEntry(i);\n+        if (value < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        eigenvalues.setEntry(i, Math.sqrt(value));\n+    }\n+\n+    // construct the diagonal matrix of square root of eigenvalues\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(eigenvalues.toArray());\n+\n+    // calculate the square root of matrix\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}