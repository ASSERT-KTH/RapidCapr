{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parameters = functionType.getParameters();\n    if (parameters.isEmpty()) {\n        return;\n    }\n\n    int varArgsIndex = -1;\n    if (functionType.isVarArgs()) {\n        varArgsIndex = parameters.size() - 1;\n    }\n\n    int numPositionalArgs = functionType.getParametersWithoutOptional().size();\n    int numArgs = call.getChildCount() - 1;\n    if (numArgs < numPositionalArgs) {\n        report(t, call, MISSING_FORMAL_PARAMETER, String.valueOf(numPositionalArgs), String.valueOf(numPositionalArgs - numArgs));\n        return;\n    }\n\n    int positionalArgsIndex = 0;\n    for (int i = 0; i < parameters.size(); i++) {\n        Node parameter = parameters.get(i);\n        if (varArgsIndex == i) {\n            while (arguments.hasNext()) {\n                visitArgument(t, arguments.next(), parameter, i, varArgsIndex, call);\n            }\n        } else if (parameter.isOptional()) {\n            if (!arguments.hasNext()) {\n                break;\n            }\n            visitArgument(t, arguments.next(), parameter, i, varArgsIndex, call);\n        } else {\n            if (positionalArgsIndex >= numPositionalArgs) {\n                break;\n            }\n            visitArgument(t, arguments.next(), parameter, i, varArgsIndex, call);\n            positionalArgsIndex++;\n        }\n    }\n\n    int minArgs = functionType.getMinArguments();\n    if (numArgs < minArgs) {\n        report(t, call, MISSING_FORMAL_PARAMETER, String.valueOf(minArgs), String.valueOf(minArgs - numArgs));\n    }\n}\n\nprivate void visitArgument(NodeTraversal t, Node arg, Node param, int argIndex, int varArgsIndex, Node call) {\n    JSType expectedArgType = param.getJSType();\n    validator.expectArgumentMatchesParameter(t, arg, getJSType(arg), expectedArgType, call, argIndex);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..4c4677af 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    List<Node> parameters = functionType.getParameters();\n+    if (parameters.isEmpty()) {\n+        return;\n+    }\n+\n+    int varArgsIndex = -1;\n+    if (functionType.isVarArgs()) {\n+        varArgsIndex = parameters.size() - 1;\n     }\n \n+    int numPositionalArgs = functionType.getParametersWithoutOptional().size();\n     int numArgs = call.getChildCount() - 1;\n+    if (numArgs < numPositionalArgs) {\n+        report(t, call, MISSING_FORMAL_PARAMETER, String.valueOf(numPositionalArgs), String.valueOf(numPositionalArgs - numArgs));\n+        return;\n+    }\n+\n+    int positionalArgsIndex = 0;\n+    for (int i = 0; i < parameters.size(); i++) {\n+        Node parameter = parameters.get(i);\n+        if (varArgsIndex == i) {\n+            while (arguments.hasNext()) {\n+                visitArgument(t, arguments.next(), parameter, i, varArgsIndex, call);\n+            }\n+        } else if (parameter.isOptional()) {\n+            if (!arguments.hasNext()) {\n+                break;\n+            }\n+            visitArgument(t, arguments.next(), parameter, i, varArgsIndex, call);\n+        } else {\n+            if (positionalArgsIndex >= numPositionalArgs) {\n+                break;\n+            }\n+            visitArgument(t, arguments.next(), parameter, i, varArgsIndex, call);\n+            positionalArgsIndex++;\n+        }\n+    }\n+\n     int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (numArgs < minArgs) {\n+        report(t, call, MISSING_FORMAL_PARAMETER, String.valueOf(minArgs), String.valueOf(minArgs - numArgs));\n     }\n-  }\n+}\n+\n+private void visitArgument(NodeTraversal t, Node arg, Node param, int argIndex, int varArgsIndex, Node call) {\n+    JSType expectedArgType = param.getJSType();\n+    validator.expectArgumentMatchesParameter(t, arg, getJSType(arg), expectedArgType, call, argIndex);\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}