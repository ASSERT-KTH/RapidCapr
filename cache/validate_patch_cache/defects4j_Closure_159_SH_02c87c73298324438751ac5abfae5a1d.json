{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (changed.add(functionName)) {\n          Node functionNode = getFunctionNode(functionName);\n          if (functionNode != null) {\n            Node functionBody = functionNode.getLastChild();\n            findChangedGlobals(functionBody, changed);\n            findCalledFunctions(functionBody, changed);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..c3caa3e4 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,15 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (changed.add(functionName)) {\n+          Node functionNode = getFunctionNode(functionName);\n+          if (functionNode != null) {\n+            Node functionBody = functionNode.getLastChild();\n+            findChangedGlobals(functionBody, changed);\n+            findCalledFunctions(functionBody, changed);\n+          }\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}