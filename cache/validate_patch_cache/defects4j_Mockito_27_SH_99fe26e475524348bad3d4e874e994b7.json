{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockitoSession session = mockitoSession().initMocks(this).startMocking();\n        try {\n            T spy = session.getMock(T.class);\n            ((Factory) mock).setCallback(0, new MockDelegate(newFilter, spy));\n            reset(spy);\n        } finally {\n            session.finishMocking();\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..10f146634 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockitoSession session = mockitoSession().initMocks(this).startMocking();\n+        try {\n+            T spy = session.getMock(T.class);\n+            ((Factory) mock).setCallback(0, new MockDelegate(newFilter, spy));\n+            reset(spy);\n+        } finally {\n+            session.finishMocking();\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}