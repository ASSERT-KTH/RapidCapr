{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i != fieldIndex) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        int oldValue = values[fieldIndex];\n        instant = fieldType.getField(iChronology).add(instant, oldValue, valueToAdd);\n        int newValue = fieldType.getField(iChronology).get(instant);\n        if (newValue != oldValue) {\n            int[] newValues = partial.getPartialValues(fieldType.getField(iChronology).set(instant, oldValue));\n            values = newValues;\n        }\n        return values;\n    } else {\n        int year = DateTimeUtils.safeAdd(partial, fieldType, valueToAdd);\n        Chronology chrono = iChronology.withUTC();\n        long instant = chrono.getDateTimeMillis(year, 1, 1, 0);\n        int month = values[DateTimeFieldType.monthOfYear().getIndex()];\n        instant = chrono.monthOfYear().set(instant, month);\n        int day = values[DateTimeFieldType.dayOfMonth().getIndex()];\n        instant = chrono.dayOfMonth().set(instant, day);\n        if (instant < partial.toDateTime((DateTimeZone) null).getMillis()) {\n            instant = chrono.monthOfYear().add(instant, 1);\n        }\n        return iChronology.get(partial, instant);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0c6b9e5e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i != fieldIndex) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        int oldValue = values[fieldIndex];\n+        instant = fieldType.getField(iChronology).add(instant, oldValue, valueToAdd);\n+        int newValue = fieldType.getField(iChronology).get(instant);\n+        if (newValue != oldValue) {\n+            int[] newValues = partial.getPartialValues(fieldType.getField(iChronology).set(instant, oldValue));\n+            values = newValues;\n+        }\n+        return values;\n+    } else {\n+        int year = DateTimeUtils.safeAdd(partial, fieldType, valueToAdd);\n+        Chronology chrono = iChronology.withUTC();\n+        long instant = chrono.getDateTimeMillis(year, 1, 1, 0);\n+        int month = values[DateTimeFieldType.monthOfYear().getIndex()];\n+        instant = chrono.monthOfYear().set(instant, month);\n+        int day = values[DateTimeFieldType.dayOfMonth().getIndex()];\n+        instant = chrono.dayOfMonth().set(instant, day);\n+        if (instant < partial.toDateTime((DateTimeZone) null).getMillis()) {\n+            instant = chrono.monthOfYear().add(instant, 1);\n+        }\n+        return iChronology.get(partial, instant);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for add(long,int,int)",
    "test_result": "ERROR"
}