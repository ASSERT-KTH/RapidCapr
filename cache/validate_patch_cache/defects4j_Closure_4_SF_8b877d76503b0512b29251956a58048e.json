{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = resolveViaRegistry(t, enclosing);\n\n  // Detect if the current named type has an implicit prototype cycle\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n    return getReferencedType();\n  }\n\n  if (resolved) {\n    // Call the additional methods and return the resolved type\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n  \n  // Resolve the named type via properties if not resolved via registry\n  resolved = resolveViaProperties(t, enclosing);\n  \n  // Detect if the current named type still has an implicit prototype cycle\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n    return getReferencedType();\n  }\n\n  if (resolved) {\n    // Call the additional methods and return the resolved type\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // Report an error as the named type was not resolved via either mechanism\n  t.report(JSError.make(getNameNode(), UNKNOWN_EXPR_TYPE));\n  return unknownType();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..0f96e5b2 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,43 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  // Detect if the current named type has an implicit prototype cycle\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+    return getReferencedType();\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  if (resolved) {\n+    // Call the additional methods and return the resolved type\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+  \n+  // Resolve the named type via properties if not resolved via registry\n+  resolved = resolveViaProperties(t, enclosing);\n+  \n+  // Detect if the current named type still has an implicit prototype cycle\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+    return getReferencedType();\n+  }\n \n+  if (resolved) {\n+    // Call the additional methods and return the resolved type\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n+  // Report an error as the named type was not resolved via either mechanism\n+  t.report(JSError.make(getNameNode(), UNKNOWN_EXPR_TYPE));\n+  return unknownType();\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}