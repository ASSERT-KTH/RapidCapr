{
    "patch": "    // Remove non-referenced parameters from the start of the list.\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node param = argList.getFirstChild();\n      while (param != null) {\n        Var var = fnScope.getVar(param.getString());\n        boolean isReferenced = referenced.contains(var);\n        boolean isDestructuring = param.isDefaultValue() || param.isRest() || param.isDestructuringPattern();\n        if (!isReferenced && !isDestructuring) {\n          argList.removeChild(param);\n          compiler.reportCodeChange();\n          param = argList.getFirstChild();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..385fcc84 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove non-referenced parameters from the start of the list.\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node param = argList.getFirstChild();\n+      while (param != null) {\n+        Var var = fnScope.getVar(param.getString());\n+        boolean isReferenced = referenced.contains(var);\n+        boolean isDestructuring = param.isDefaultValue() || param.isRest() || param.isDestructuringPattern();\n+        if (!isReferenced && !isDestructuring) {\n+          argList.removeChild(param);\n+          compiler.reportCodeChange();\n+          param = argList.getFirstChild();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}