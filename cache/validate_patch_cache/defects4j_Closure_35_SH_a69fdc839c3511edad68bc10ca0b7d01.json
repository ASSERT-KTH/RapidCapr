{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType declaredPropType = objType.getPropertyType(prop);\n            JSType leastSupertype = declaredPropType.getLeastSupertype(propType);\n            if (!leastSupertype.equals(declaredPropType)) {\n              objType.defineInferredProperty(prop, leastSupertype, null);\n              if (declaredPropType.isSubtypeOf(getNativeType(NULL_TYPE))) {\n                CompilerInput input =\n                    getCompiler().getInput(n.getOriginalQualifiedName().getRoot());\n                warnings.add(JSError.make(\n                    input.getSourceFile(), n.getLineno(), DELETED_PROP_ON_NULL_OR_UNDEFINED,\n                    prop));\n              }\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..71e32e49 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1130,9 +1130,21 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType declaredPropType = objType.getPropertyType(prop);\n+            JSType leastSupertype = declaredPropType.getLeastSupertype(propType);\n+            if (!leastSupertype.equals(declaredPropType)) {\n+              objType.defineInferredProperty(prop, leastSupertype, null);\n+              if (declaredPropType.isSubtypeOf(getNativeType(NULL_TYPE))) {\n+                CompilerInput input =\n+                    getCompiler().getInput(n.getOriginalQualifiedName().getRoot());\n+                warnings.add(JSError.make(\n+                    input.getSourceFile(), n.getLineno(), DELETED_PROP_ON_NULL_OR_UNDEFINED,\n+                    prop));\n+              }\n+            }\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}