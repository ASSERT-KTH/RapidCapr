{
    "patch": "// Maybe STRING, GET, SET\nNode keyNode = child.getFirstChild();\n\n// We should never see a mix of numbers and strings.\nString name = keyNode.getString();\nT type = typeSystem.getType(getScope(), keyNode);\n\nProperty prop = getProperty(name);\nif (!prop.scheduleRenaming(keyNode,\n                           processProperty(t, prop, type, null))) {\n  if (prop.isUnrenameable()) {\n    // This error should be reported only when the property's name cannot be changed.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(\n          JSError.make(\n              t.getSourceName(),\n              child,\n              propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION,\n              name,\n              (type == null ? \"null\" : type.toString()),\n              n.toString(),\n              \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..eeb60511 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,32 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Maybe STRING, GET, SET\n+Node keyNode = child.getFirstChild();\n+\n+// We should never see a mix of numbers and strings.\n+String name = keyNode.getString();\n+T type = typeSystem.getType(getScope(), keyNode);\n+\n+Property prop = getProperty(name);\n+if (!prop.scheduleRenaming(keyNode,\n+                           processProperty(t, prop, type, null))) {\n+  if (prop.isUnrenameable()) {\n+    // This error should be reported only when the property's name cannot be changed.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(\n+          JSError.make(\n+              t.getSourceName(),\n+              child,\n+              propertiesToErrorFor.get(name),\n+              Warnings.INVALIDATION,\n+              name,\n+              (type == null ? \"null\" : type.toString()),\n+              n.toString(),\n+              \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: method getType in interface TypeSystem<T#2> cannot be applied to given types;",
    "test_result": "ERROR"
}