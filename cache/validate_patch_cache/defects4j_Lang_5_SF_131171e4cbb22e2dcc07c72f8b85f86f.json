{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int countryCodeIndex = str.indexOf('_', 2); // skip language code and find the first underscore after the language code\n    if (countryCodeIndex == -1) {\n        if (len == 2) {\n            // only language code provided, such as \"en\", \"fr\"\n            return new Locale(str);\n        } else if (len == 3) {\n            // language code and country code are provided (no variant), such as \"en_US\", \"fr_CA\"\n            return new Locale(str.substring(0, 2), str.substring(2));\n        } else {\n            // invalid format\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n\n    // language code and country code are present, but variant may not be\n    String language = str.substring(0, 2);\n    String countryCode = str.substring(3, countryCodeIndex);\n    int variantIndex = str.indexOf('_', countryCodeIndex + 1);\n    if (variantIndex == -1) {\n        // no variant provided, such as \"en_US\"\n        return new Locale(language, countryCode);\n    } else {\n        // variant present, such as \"en_US_POSIX\"\n        return new Locale(language, countryCode, str.substring(variantIndex + 1));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..6b8d8b6d 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,43 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    int countryCodeIndex = str.indexOf('_', 2); // skip language code and find the first underscore after the language code\n+    if (countryCodeIndex == -1) {\n+        if (len == 2) {\n+            // only language code provided, such as \"en\", \"fr\"\n+            return new Locale(str);\n+        } else if (len == 3) {\n+            // language code and country code are provided (no variant), such as \"en_US\", \"fr_CA\"\n+            return new Locale(str.substring(0, 2), str.substring(2));\n+        } else {\n+            // invalid format\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    // language code and country code are present, but variant may not be\n+    String language = str.substring(0, 2);\n+    String countryCode = str.substring(3, countryCodeIndex);\n+    int variantIndex = str.indexOf('_', countryCodeIndex + 1);\n+    if (variantIndex == -1) {\n+        // no variant provided, such as \"en_US\"\n+        return new Locale(language, countryCode);\n+    } else {\n+        // variant present, such as \"en_US_POSIX\"\n+        return new Locale(language, countryCode, str.substring(variantIndex + 1));\n+    }\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: -1",
    "test_result": "FAIL"
}