{
    "patch": "    boolean isAssignedOnceInLifetime() {\n        Reference ref = getOneAndOnlyAssignment();\n        if (ref == null) {\n            return false;\n        }\n\n        // Make sure this assignment is not in a loop.\n        boolean isLoop = false;\n        for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n            if (block.isFunction) {\n                break;\n            } else if (block.isLoop) {\n                isLoop = true;\n                break;\n            }\n        }\n\n        if (isLoop) {\n            return false;\n        }\n\n        int counter = 1;\n        for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n            Reference r = references.get(i);\n            if (r.isWrite() && !r.isDeclaration()) {\n                return false;\n            } else if (r.isRead() && counter == 1) {\n                counter++;\n            } else if (r.isWrite() && counter == 2) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..944c3b9a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,40 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    boolean isAssignedOnceInLifetime() {\n+        Reference ref = getOneAndOnlyAssignment();\n+        if (ref == null) {\n+            return false;\n+        }\n+\n+        // Make sure this assignment is not in a loop.\n+        boolean isLoop = false;\n+        for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+                break;\n+            } else if (block.isLoop) {\n+                isLoop = true;\n+                break;\n+            }\n+        }\n+\n+        if (isLoop) {\n+            return false;\n+        }\n+\n+        int counter = 1;\n+        for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n+            Reference r = references.get(i);\n+            if (r.isWrite() && !r.isDeclaration()) {\n+                return false;\n+            } else if (r.isRead() && counter == 1) {\n+                counter++;\n+            } else if (r.isWrite() && counter == 2) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}