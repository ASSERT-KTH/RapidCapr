{
    "patch": "        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (mockCandidate != null) {\n            if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                field.setAccessible(true);\n                try {\n                    Object oldValue = field.get(fieldInstance);\n                    if (oldValue != null && !oldValue.getClass().equals(mockCandidate.getClass())) {\n                        for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n                            innerField.setAccessible(true);\n                            if (innerField.get(oldValue) == fieldInstance) {\n                                innerField.set(oldValue, null);\n                            }\n                        }\n                    }\n                    field.set(fieldInstance, mockCandidate);\n                    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                        innerField.setAccessible(true);\n                        if (innerField.get(mockCandidate) == oldValue) {\n                            Object innerMockCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject();\n                            innerField.set(mockCandidate, innerMockCandidate);\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            } else {\n                throw new IllegalArgumentException(\"Cannot set \" + field.getName() + \" to an object of type \" + mockCandidate.getClass().getName());\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4e65cc012 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,38 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (mockCandidate != null) {\n+            if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                field.setAccessible(true);\n+                try {\n+                    Object oldValue = field.get(fieldInstance);\n+                    if (oldValue != null && !oldValue.getClass().equals(mockCandidate.getClass())) {\n+                        for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+                            innerField.setAccessible(true);\n+                            if (innerField.get(oldValue) == fieldInstance) {\n+                                innerField.set(oldValue, null);\n+                            }\n+                        }\n+                    }\n+                    field.set(fieldInstance, mockCandidate);\n+                    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                        innerField.setAccessible(true);\n+                        if (innerField.get(mockCandidate) == oldValue) {\n+                            Object innerMockCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject();\n+                            innerField.set(mockCandidate, innerMockCandidate);\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Cannot set \" + field.getName() + \" to an object of type \" + mockCandidate.getClass().getName());\n+            }\n+        }\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Cannot set dependency to an object of type org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1",
    "test_result": "FAIL"
}