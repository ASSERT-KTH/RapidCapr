{
    "patch": "public class MyClass<T> {\n    private T value;\n    \n    public void setValue(T value) {\n        this.value = value;\n    }\n    \n    public T getValue() {\n        return value;\n    }\n    \n    public Object returnValueFor(Class<?> clazz) {\n        if(clazz.equals(String.class)) {\n            return String.valueOf(value);\n        } else if(clazz.equals(Integer.class)) {\n            return Integer.parseInt(String.valueOf(value));\n        } else if(clazz.equals(Long.class)) {\n            return Long.parseLong(String.valueOf(value));\n        } else if(clazz.equals(Double.class)) {\n            return Double.parseDouble(String.valueOf(value));\n        } else if(clazz.equals(Float.class)) {\n            return Float.parseFloat(String.valueOf(value));\n        } else if(clazz.equals(Character.class)) {\n            return value.toString().charAt(0);\n        } else if(clazz.equals(Boolean.class)) {\n            return Boolean.parseBoolean(String.valueOf(value));\n        } else if(clazz.equals(Iterable.class)) {\n            if(value instanceof Iterable) {\n                return value;\n            } else {\n                return new ArrayList<>();\n            }            \n        }\n        return value;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8c90e3b2a 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,42 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass<T> {\n+    private T value;\n+    \n+    public void setValue(T value) {\n+        this.value = value;\n+    }\n+    \n+    public T getValue() {\n+        return value;\n+    }\n+    \n+    public Object returnValueFor(Class<?> clazz) {\n+        if(clazz.equals(String.class)) {\n+            return String.valueOf(value);\n+        } else if(clazz.equals(Integer.class)) {\n+            return Integer.parseInt(String.valueOf(value));\n+        } else if(clazz.equals(Long.class)) {\n+            return Long.parseLong(String.valueOf(value));\n+        } else if(clazz.equals(Double.class)) {\n+            return Double.parseDouble(String.valueOf(value));\n+        } else if(clazz.equals(Float.class)) {\n+            return Float.parseFloat(String.valueOf(value));\n+        } else if(clazz.equals(Character.class)) {\n+            return value.toString().charAt(0);\n+        } else if(clazz.equals(Boolean.class)) {\n+            return Boolean.parseBoolean(String.valueOf(value));\n+        } else if(clazz.equals(Iterable.class)) {\n+            if(value instanceof Iterable) {\n+                return value;\n+            } else {\n+                return new ArrayList<>();\n+            }            \n+        }\n+        return value;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}