{
    "patch": "public static Properties getProperty() {\n    Properties prop = new Properties();\n    FileInputStream input = null;\n    \n    try {\n        input = new FileInputStream(\"config.properties\");\n        prop.load(input);\n    } catch(IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if(input != null) {\n                input.close();\n            }\n        } catch(IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    String[] warnings = prop.getProperty(\"warnings\").split(\",\");\n    \n    for(String warning : warnings) {\n        if(Integer.parseInt(warning) > 10) {\n            System.out.println(\"Warning level greater than 10!\");\n            break;\n        }\n    }\n    \n    return prop;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..d9e1b2d3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static Properties getProperty() {\n+    Properties prop = new Properties();\n+    FileInputStream input = null;\n+    \n+    try {\n+        input = new FileInputStream(\"config.properties\");\n+        prop.load(input);\n+    } catch(IOException e) {\n+        e.printStackTrace();\n+    } finally {\n+        try {\n+            if(input != null) {\n+                input.close();\n+            }\n+        } catch(IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    String[] warnings = prop.getProperty(\"warnings\").split(\",\");\n+    \n+    for(String warning : warnings) {\n+        if(Integer.parseInt(warning) > 10) {\n+            System.out.println(\"Warning level greater than 10!\");\n+            break;\n+        }\n+    }\n+    \n+    return prop;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}