{
    "patch": "while (forward) {\n    // advance the integrator\n    final double previousT = integrator.getCurrentTime();\n    final double nextT = previousT + h;\n    integrator.integrate(nextT, y);\n    \n    // check if event occurs during current step\n    final double t = findRoot(event, previousT, y, yDot, nextT, interpolator);\n    if (t >= 0) {\n        // restrict the interpolator to the first part of the step, up to the event\n        interpolator.setInterpolatedTime(t);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(t);\n        \n        // handle the event\n        event.step(t, eventY);\n        stepHandlers.handleStep(event, forward);\n        \n        // update tMin and break the loop if t > tMin\n        tMin = Math.max(t, previousT);\n        if (t > tMin) {\n            break;\n        }\n    }\n    \n    // handle the step\n    stepHandlers.handleStep(event, forward);\n    integrator.storeTime(nextT);\n    \n    // update tMin\n    tMin = Math.max(tMin, nextT);\n    \n    // check for stop conditions\n    if (event.getStopCondition() != null && event.getStopCondition().isSatisfied()) {\n        stop();\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..924526b92 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,45 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n-\n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+while (forward) {\n+    // advance the integrator\n+    final double previousT = integrator.getCurrentTime();\n+    final double nextT = previousT + h;\n+    integrator.integrate(nextT, y);\n+    \n+    // check if event occurs during current step\n+    final double t = findRoot(event, previousT, y, yDot, nextT, interpolator);\n+    if (t >= 0) {\n+        // restrict the interpolator to the first part of the step, up to the event\n+        interpolator.setInterpolatedTime(t);\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(t);\n+        \n+        // handle the event\n+        event.step(t, eventY);\n+        stepHandlers.handleStep(event, forward);\n+        \n+        // update tMin and break the loop if t > tMin\n+        tMin = Math.max(t, previousT);\n+        if (t > tMin) {\n+            break;\n+        }\n+    }\n+    \n+    // handle the step\n+    stepHandlers.handleStep(event, forward);\n+    integrator.storeTime(nextT);\n+    \n+    // update tMin\n+    tMin = Math.max(tMin, nextT);\n+    \n+    // check for stop conditions\n+    if (event.getStopCondition() != null && event.getStopCondition().isSatisfied()) {\n+        stop();\n+        break;\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}