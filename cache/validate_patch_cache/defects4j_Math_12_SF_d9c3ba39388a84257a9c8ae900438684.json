{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[][][] dp = new double[D + 1][M][M];\n    for(int i=0; i<M; i++) {\n        for(int j=0; j<M; j++) {\n            dp[1][i][j] = genotypeProbabilities[i*M+j];\n        }\n    }\n    for(int i=2; i<=D; i++) {\n        for(int j=0; j<M; j++) {\n            for(int k=0; k<M; k++) {\n                double sum = 0;\n                int q = (int) Math.pow(M,i-1);\n                for(int x=0; x<M; x++) {\n                    for(int y=0; y<M; y++) {\n                        if(getDom(x,y,M) == j*M + k) {\n                            sum += genotypeProbabilities[x*M + y] * dp[i-1][x][y];\n                        }\n                    }\n                }\n                dp[i][j][k] = sum / q;\n            }\n        }\n    }\n\n    double[] probabilityDistribution = new double[N + 1];\n    for(int i=0; i<M; i++) {\n        for(int j=0; j<M; j++) {\n            int pCount = getPopulationCount(i*M + j);\n            probabilityDistribution[pCount] += dp[D][i][j];\n        }\n    }\n\n    for(int i=0; i<=N; i++) {\n        probabilityDistribution[i] /= Math.pow(M, D);\n    }\n\n    return probabilityDistribution;\n}\n\npublic int getDom(int x, int y, int M){\n    if(x <= y){\n        return (M*(M+1))/2 - (M-x)*((M-x)+1)/2 + y-x;\n    }\n    else {\n        return getDom(y,x,M);\n    }\n}\n\npublic int getPopulationCount(int probIndex) {\n    int count = 0;\n    for(int i = 0; i < 2 * Math.sqrt(probIndex); i++) {\n        if(((probIndex >> i) & 1) == 1) {\n            count++;\n        }\n    }\n    return count;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}