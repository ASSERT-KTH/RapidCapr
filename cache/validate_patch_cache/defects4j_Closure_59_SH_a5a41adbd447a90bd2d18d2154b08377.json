{
    "patch": "if (options.checkGlobalThisLevel != null &&\n    options.checkGlobalThisLevel != CheckLevel.OFF &&\n    options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n  options.setWarningLevel(\n      DiagnosticGroups.GLOBAL_THIS,\n      options.checkGlobalThisLevel);\n} else {\n  if (!options.getWarningLevel(DiagnosticGroups.GLOBAL_THIS).equals(\n      CheckLevel.OFF)) {\n    // Was on, turn off.\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..2e82b10c 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,19 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != null &&\n+    options.checkGlobalThisLevel != CheckLevel.OFF &&\n+    options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n+  options.setWarningLevel(\n+      DiagnosticGroups.GLOBAL_THIS,\n+      options.checkGlobalThisLevel);\n+} else {\n+  if (!options.getWarningLevel(DiagnosticGroups.GLOBAL_THIS).equals(\n+      CheckLevel.OFF)) {\n+    // Was on, turn off.\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+  }\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}