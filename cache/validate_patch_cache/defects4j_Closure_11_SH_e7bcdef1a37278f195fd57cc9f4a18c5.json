{
    "patch": "    } else if (n.getJSType() != null && parent.isAssign()) {\n        return;\n      }{\n        Node lastChild = n.getLastChild();\n        if (lastChild != null && lastChild.isName() && lastChild.getString().equals(\"length\")\n            && n.getFirstChild().isGetProp()) {\n          String prop = n.getFirstChild().getLastChild().getString();\n          if (prop.equals(\"slice\") || prop.equals(\"substring\") || prop.equals(\"substr\")) {\n            warnings.add(JSError.make(\"Use the second argument of '\"\n                + prop\n                + \"' instead of the two-argument form. \"\n                + \"More information at https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/\"\n                + prop));\n            return;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}