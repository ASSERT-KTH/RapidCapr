{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getParent()!= null) {\n        Node grandParent = parent.getParent();\n        if (grandParent != null ) {\n          if (NodeUtil.isPrototypePropertyDeclaration(grandParent)){\n            return false;\n          }\n          if (NodeUtil.isGet(grandParent)) {\n            Node greatGrandParent = grandParent.getParent();\n            if (greatGrandParent != null \n                && NodeUtil.isPrototypePropertyDeclaration(greatGrandParent.getParent())){\n              return false;\n            }            \n          }\n        }\n        if (NodeUtil.isObjectLitKey(parent, n) || parent.getType() == Token.OBJECTLIT) {\n          return false;\n        }\n        if (NodeUtil.isGet(n.getParent())) {\n          Node functionNode = n.getFirstChild();\n          if (NodeUtil.isGet(functionNode)) {\n            Node getterNode = functionNode.getLastChild();\n            if (NodeUtil.isPrototypePropertyDeclaration(getterNode)) {\n              return false;\n            }\n          } else {\n            Node parentParent = parent.getParent();\n            if (parentParent != null &&\n                NodeUtil.isGet(parentParent) &&\n                parentParent.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d975fb65 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,41 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent()!= null) {\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null ) {\n+          if (NodeUtil.isPrototypePropertyDeclaration(grandParent)){\n+            return false;\n+          }\n+          if (NodeUtil.isGet(grandParent)) {\n+            Node greatGrandParent = grandParent.getParent();\n+            if (greatGrandParent != null \n+                && NodeUtil.isPrototypePropertyDeclaration(greatGrandParent.getParent())){\n+              return false;\n+            }            \n+          }\n+        }\n+        if (NodeUtil.isObjectLitKey(parent, n) || parent.getType() == Token.OBJECTLIT) {\n+          return false;\n+        }\n+        if (NodeUtil.isGet(n.getParent())) {\n+          Node functionNode = n.getFirstChild();\n+          if (NodeUtil.isGet(functionNode)) {\n+            Node getterNode = functionNode.getLastChild();\n+            if (NodeUtil.isPrototypePropertyDeclaration(getterNode)) {\n+              return false;\n+            }\n+          } else {\n+            Node parentParent = parent.getParent();\n+            if (parentParent != null &&\n+                NodeUtil.isGet(parentParent) &&\n+                parentParent.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}