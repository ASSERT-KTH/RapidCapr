{
    "patch": "      if (providedNames == null || !providedNames.containsKey(ns)) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        ProvidedName provided = providedNames.get(ns);\n        JSModule providedModule = provided.explicitModule;\n        if (providedModule == null) {\n          unrecognizedRequires.add(\n              new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n          JSModule module = t.getModule();\n          if (moduleGraph != null && module != providedModule &&\n              !moduleGraph.dependsOn(module, providedModule)) {\n            compiler.report(\n                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                    providedModule.getName(), module.getName()));\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..f4abd059 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,23 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (providedNames == null || !providedNames.containsKey(ns)) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else {\n+        ProvidedName provided = providedNames.get(ns);\n+        JSModule providedModule = provided.explicitModule;\n+        if (providedModule == null) {\n+          unrecognizedRequires.add(\n+              new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        } else {\n+          JSModule module = t.getModule();\n+          if (moduleGraph != null && module != providedModule &&\n+              !moduleGraph.dependsOn(module, providedModule)) {\n+            compiler.report(\n+                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                    providedModule.getName(), module.getName()));\n+          }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}