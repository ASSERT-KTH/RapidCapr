{
    "patch": "public class Gamma {\n\n    private static final double DEFAULT_EPSILON = 1e-9;\n\n    /**\n     * Regularized gamma function P(a, x).\n     *\n     * @param a the parameter a (must be positive)\n     * @param x the value at which to evaluate the function (must be non-negative)\n     * @return the regularized gamma function P(a, x)\n     * @throws IllegalArgumentException if a is not positive or x is negative\n     */\n    public static double regularizedGammaP(double a, double x) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive\");\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative\");\n        }\n\n        if (x == 0) {\n            return 0;\n        }\n\n        double d = 1.0 / (a + 1e-15);\n        double c = 1.0 / 0.0;\n        double h = d;\n\n        for (int i = 1; i <= 100000; i++) {\n            double an = -i * (i - a);\n            b = b + 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < DEFAULT_EPSILON) {\n                d = DEFAULT_EPSILON;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < DEFAULT_EPSILON) {\n                c = DEFAULT_EPSILON;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h = h * del;\n            if (Math.abs(del - 1.0) < DEFAULT_EPSILON) {\n                return h * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n        }\n\n        throw new IllegalArgumentException(\"Could not compute regularized gamma function\");\n    }\n\n    /**\n     * Natural logarithm of the gamma function.\n     *\n     * @param x the value at which to evaluate the function (must be positive)\n     * @return the natural logarithm of the gamma function\n     * @throws IllegalArgumentException if x is not positive\n     */\n    public static double logGamma(double x) {\n        if (x <= 0) {\n            throw new IllegalArgumentException(\"x must be positive\");\n        }\n        if (x < 12) {\n            return logGammaHelper(x);\n        }\n\n        double sum = lanczos(x);\n        double tmp = x + LANCZOS_G + 0.5;\n        return (x + 0.5) * Math.log(tmp) - tmp + LOG_SQRT_TWO_PI + Math.log(sum / x);\n    }\n    \n    // ... additional methods ...\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}