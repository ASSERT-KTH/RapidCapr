{
    "patch": "public class EqualsBuilder {\n    private boolean isEquals = true;\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    protected void setEquals(boolean newValue) {\n        isEquals = newValue;\n    }\n\n    private void append(final Object[] lhs, final Object[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final boolean[] lhs, final boolean[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final byte[] lhs, final byte[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final char[] lhs, final char[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final double[] lhs, final double[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final float[] lhs, final float[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final int[] lhs, final int[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final long[] lhs, final long[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final short[] lhs, final short[] rhs) {\n        if (!isEquals) {\n            return;\n        }\n\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n\n        for (int i = 0; i < lhs.length && isEquals; i++) {\n            this.append(lhs[i], rhs[i]);\n        }\n    }\n\n    private void append(final boolean lhs, final boolean rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = lhs == rhs;\n    }\n\n    private void append(final byte lhs, final byte rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = lhs == rhs;\n    }\n\n    private void append(final char lhs, final char rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = lhs == rhs;\n    }\n\n    private void append(final double lhs, final double rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Double.doubleToLongBits(lhs) == Double.doubleToLongBits(rhs);\n    }\n\n    private void append(final float lhs, final float rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = Float.floatToIntBits(lhs) == Float.floatToIntBits(rhs);\n    }\n\n    private void append(final int lhs, final int rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = lhs == rhs;\n    }\n\n    private void append(final long lhs, final long rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = lhs == rhs;\n    }\n\n    private void append(final short lhs, final short rhs) {\n        if (!isEquals) {\n            return;\n        }\n        isEquals = lhs == rhs;\n    }\n\n    public boolean build() {\n        return isEquals();\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..1e542c8b 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,9 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+public class EqualsBuilder {\n+    private boolean isEquals = true;\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -377,8 +380,8 @@ public class EqualsBuilder {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n@@ -408,6 +411,210 @@ public class EqualsBuilder {\n         return this;\n     }\n \n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    protected void setEquals(boolean newValue) {\n+        isEquals = newValue;\n+    }\n+\n+    private void append(final Object[] lhs, final Object[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final boolean[] lhs, final boolean[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final byte[] lhs, final byte[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final char[] lhs, final char[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final double[] lhs, final double[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final float[] lhs, final float[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final int[] lhs, final int[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final long[] lhs, final long[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final short[] lhs, final short[] rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+\n+        for (int i = 0; i < lhs.length && isEquals; i++) {\n+            this.append(lhs[i], rhs[i]);\n+        }\n+    }\n+\n+    private void append(final boolean lhs, final boolean rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = lhs == rhs;\n+    }\n+\n+    private void append(final byte lhs, final byte rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = lhs == rhs;\n+    }\n+\n+    private void append(final char lhs, final char rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = lhs == rhs;\n+    }\n+\n+    private void append(final double lhs, final double rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Double.doubleToLongBits(lhs) == Double.doubleToLongBits(rhs);\n+    }\n+\n+    private void append(final float lhs, final float rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = Float.floatToIntBits(lhs) == Float.floatToIntBits(rhs);\n+    }\n+\n+    private void append(final int lhs, final int rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = lhs == rhs;\n+    }\n+\n+    private void append(final long lhs, final long rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = lhs == rhs;\n+    }\n+\n+    private void append(final short lhs, final short rhs) {\n+        if (!isEquals) {\n+            return;\n+        }\n+        isEquals = lhs == rhs;\n+    }\n+\n+    public boolean build() {\n+        return isEquals();\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: class EqualsBuilder is already defined in package org.apache.commons.lang.builder",
    "test_result": "ERROR"
}