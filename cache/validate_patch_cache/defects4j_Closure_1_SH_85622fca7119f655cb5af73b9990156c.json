{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (NodeUtil.isDefaultValue(lastArg) || NodeUtil.isRest(lastArg)) {\n          break; // non-simple parameter, can't remove preceding parameter\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          // remove all trailing non-simple parameters\n          boolean paramRemoved;\n          do {\n            paramRemoved = false;\n            Node children = argList.removeChildren();\n            for (Node child = children; child != null; child = child.getNext()) {\n              if (NodeUtil.isDefaultValue(child)\n                  || NodeUtil.isRest(child)) {\n                // not removable, re-add children and return\n                argList.addChildrenToFront(children);\n                return;\n              }\n              Var v = fnScope.getVar(child.getString());\n              if (referenced.contains(v)) {\n                // end of parameters\n                argList.addChildrenToFront(children);\n                return;\n              } else {\n                compiler.reportCodeChange();\n                paramRemoved = true;\n              }\n            }\n          } while (paramRemoved);\n          return;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..32012c71 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,58 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (NodeUtil.isDefaultValue(lastArg) || NodeUtil.isRest(lastArg)) {\n+          break; // non-simple parameter, can't remove preceding parameter\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          // remove all trailing non-simple parameters\n+          boolean paramRemoved;\n+          do {\n+            paramRemoved = false;\n+            Node children = argList.removeChildren();\n+            for (Node child = children; child != null; child = child.getNext()) {\n+              if (NodeUtil.isDefaultValue(child)\n+                  || NodeUtil.isRest(child)) {\n+                // not removable, re-add children and return\n+                argList.addChildrenToFront(children);\n+                return;\n+              }\n+              Var v = fnScope.getVar(child.getString());\n+              if (referenced.contains(v)) {\n+                // end of parameters\n+                argList.addChildrenToFront(children);\n+                return;\n+              } else {\n+                compiler.reportCodeChange();\n+                paramRemoved = true;\n+              }\n+            }\n+          } while (paramRemoved);\n+          return;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}