{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n            dec.getRealEigenvalues().stream()\n                    .map(FastMath::sqrt)\n                    .toArray());\n    final RealMatrix invV = dec.getV().inverse();\n    return dec.getV().multiply(sqrtD).multiply(invV);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7e4a393af 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+            dec.getRealEigenvalues().stream()\n+                    .map(FastMath::sqrt)\n+                    .toArray());\n+    final RealMatrix invV = dec.getV().inverse();\n+    return dec.getV().multiply(sqrtD).multiply(invV);\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}