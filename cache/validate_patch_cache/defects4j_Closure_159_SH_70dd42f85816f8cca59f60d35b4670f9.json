{
    "patch": "if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n        String calledFunctionName = child.getString();\n        if(!changed.contains(calledFunctionName)) {\n            changed.add(calledFunctionName);\n            Node fnNode = findMatchingFunction(calledFunctionName);\n            if(fnNode != null) {\n                findCalledFunctions(fnNode, changed); // recursive call\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..15157c36 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if (node.getType() == Token.CALL) {\n+    Node child = node.getFirstChild();\n+    if (child.getType() == Token.NAME) {\n+        String calledFunctionName = child.getString();\n+        if(!changed.contains(calledFunctionName)) {\n+            changed.add(calledFunctionName);\n+            Node fnNode = findMatchingFunction(calledFunctionName);\n+            if(fnNode != null) {\n+                findCalledFunctions(fnNode, changed); // recursive call\n+            }\n+        }\n+    }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}