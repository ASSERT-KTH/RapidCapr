{
    "patch": "    public <T> void resetMock(final T mock) {\n        final InvocationFactory oldInvocationFactory = ((Factory) mock).getInvocationFactory();\n        \n        // Create a new InvocationFactory with the original MockHandler and a new MethodInvocationControl\n        final MockHandler<T> newMockHandler = new MockHandler<T>(getMockHandler(mock));\n        final MethodInvocationControlImpl newMethodInvocationControl = new MethodInvocationControlImpl(mock, oldInvocationFactory.getConfig());\n        final InvocationFactory newInvocationFactory = new InvocationFactory(oldInvocationFactory.getConfig(), newMethodInvocationControl);\n\n        // Create a new ProxyInstance with the new InvocationFactory and set it as the callback for the mock\n        final ProxyInstance newProxyInstance = new ProxyInstance(newInvocationFactory, new Class<?>[]{Factory.class});\n        ((Factory) mock).setCallback(0, newProxyInstance);\n\n        // Set the MockHandler of the new MockHandler\n        newMockHandler.setMockitoInterceptor(newFilter.getInterceptor());\n\n        // Update MethodInfo objects for the new MockHandler with the MethodInfo objects of the old MockHandler\n        for (final Map.Entry<Method, MethodInfo> entry : oldMockHandler.getInvocationHandler().getMethodToInvocationHandler().entrySet()) {\n            newMockHandler.getInvocationHandler().setMethodMockBehavior(entry.getKey(), entry.getValue());\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c0ca72737 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(final T mock) {\n+        final InvocationFactory oldInvocationFactory = ((Factory) mock).getInvocationFactory();\n+        \n+        // Create a new InvocationFactory with the original MockHandler and a new MethodInvocationControl\n+        final MockHandler<T> newMockHandler = new MockHandler<T>(getMockHandler(mock));\n+        final MethodInvocationControlImpl newMethodInvocationControl = new MethodInvocationControlImpl(mock, oldInvocationFactory.getConfig());\n+        final InvocationFactory newInvocationFactory = new InvocationFactory(oldInvocationFactory.getConfig(), newMethodInvocationControl);\n+\n+        // Create a new ProxyInstance with the new InvocationFactory and set it as the callback for the mock\n+        final ProxyInstance newProxyInstance = new ProxyInstance(newInvocationFactory, new Class<?>[]{Factory.class});\n+        ((Factory) mock).setCallback(0, newProxyInstance);\n+\n+        // Set the MockHandler of the new MockHandler\n+        newMockHandler.setMockitoInterceptor(newFilter.getInterceptor());\n+\n+        // Update MethodInfo objects for the new MockHandler with the MethodInfo objects of the old MockHandler\n+        for (final Map.Entry<Method, MethodInfo> entry : oldMockHandler.getInvocationHandler().getMethodToInvocationHandler().entrySet()) {\n+            newMockHandler.getInvocationHandler().setMethodMockBehavior(entry.getKey(), entry.getValue());\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}