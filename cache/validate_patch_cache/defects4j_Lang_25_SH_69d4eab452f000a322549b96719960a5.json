{
    "patch": "private static String escapejava(String str) {\n    char[] ch = str.toCharArray();\n    int len = ch.length;\n    StringBuilder out = new StringBuilder(len * 2);\n    for (int x = 0; x < len; x++) {\n        switch (ch[x]) {\n            case '\"':\n                out.append(\"\\\\\\\"\");\n                break;\n            case '\\\\':\n                out.append(\"\\\\\\\\\");\n                break;\n            case '\\b':\n                out.append(\"\\\\b\");\n                break;\n            case '\\f':\n                out.append(\"\\\\f\");\n                break;\n            case '\\n':\n                out.append(\"\\\\n\");\n                break;\n            case '\\r':\n                out.append(\"\\\\r\");\n                break;\n            case '\\t':\n                out.append(\"\\\\t\");\n                break;\n            case '/':\n                out.append(\"\\\\/\");\n                break;\n            default:\n                if (isISOControl(ch[x])) {\n                    if (ch[x] > 0xfff) {\n                        out.append(\"\\\\u\").append(hex(ch[x]));\n                    } else if (ch[x] > 0xff) {\n                        out.append(\"\\\\u0\").append(hex(ch[x]));\n                    } else if (ch[x] > 0x7f) {\n                        out.append(\"\\\\u00\").append(hex(ch[x]));\n                    } else {\n                        out.append(\"\\\\u000\").append(hex(ch[x]));\n                    }\n                } else {\n                    // MODIFIED: Check for high surrogate pair of Unicode characters.\n                    if (ch[x] >= 0xD800 && ch[x] <= 0xDBFF) {\n                        if (x + 1 >= len) {\n                             throw new IllegalArgumentException(\"invalid unicode\");\n                        }\n                       char highSurrogate = ch[x];\n                        char lowSurrogate = ch[x + 1];\n                        int codePoint = Character.toCodePoint(highSurrogate, lowSurrogate);\n                        out.append(\"\\\\u\").append(String.format(\"%04x\", codePoint));\n                        x++;\n                    } else {\n                        out.append(ch[x]);\n                    }\n                }\n        }\n    }\n    return out.toString();\n}\n\n// Helper method to check if a character is an ISO control character.\nprivate static boolean isISOControl(char c) {\n    return c > 0x7F || (Character.isISOControl(c) && c != '\\n' && c != '\\r' && c != '\\t');\n}\n\n// Helper method to convert a character to its hexadecimal representation.\nprivate static String hex(char c) {\n    return Integer.toHexString(c).toUpperCase(Locale.ENGLISH);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}