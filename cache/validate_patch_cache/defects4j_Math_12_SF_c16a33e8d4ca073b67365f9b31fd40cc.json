{
    "patch": "import java.math.BigInteger;\n\npublic class Solution {\n    \n    public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n        double[][] dp = new double[D + 1][M];\n        dp[0][0] = 1;\n\n        for (int i = 1; i <= D; i++) {\n            for (int j = 0; j < M; j++) {\n                int count = populationCount(j);\n                double stateProb = genotypeProbabilities[j];\n\n                for (int k = 0; k <= count && k <= i; k++) {\n                    dp[i][j] += binomial(count, k).doubleValue() / binomial(M, i).doubleValue() * binomial(M - count, i - k).doubleValue() / binomial(M, i).doubleValue() * dp[i - k][j] * stateProb;\n                }\n            }\n        }\n\n        double[] result = new double[N + 1];\n\n        for (int i = 0; i < M; i++) {\n            int count = populationCount(i);\n            result[count] += dp[D][i];\n        }\n\n        for (int i = 0; i <= N; i++) {\n            result[i] /= Math.pow(M, D);\n        }\n\n        return result;\n    }\n\n    private int populationCount(int i) {\n        int result = 0;\n\n        while (i > 0) {\n            result += i % 2;\n            i /= 2;\n        }\n\n        return result;\n    }\n\n    private BigInteger binomial(int n, int k) {\n        BigInteger b = BigInteger.valueOf(1);\n\n        for (int i = 1; i <= k; i++) {\n            b = b.multiply(BigInteger.valueOf(n - i + 1)).divide(BigInteger.valueOf(i));\n        }\n\n        return b;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}