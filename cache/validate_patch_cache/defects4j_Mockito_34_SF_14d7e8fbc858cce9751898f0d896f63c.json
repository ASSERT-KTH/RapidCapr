{
    "patch": "public void captureArgumentsFrom(Invocation i) {\n    Object[] args = i.getArguments();\n    if (args != null) {\n        int length = Math.min(matchers.size(), args.length);\n        for (int k = 0; k < length; k++) {\n            Matcher m = matchers.get(k);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(args[k]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex c72b119dd..8f69631a0 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -100,13 +100,16 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return invocation.toString(matchers, printSettings);\n     }\n \n-    public void captureArgumentsFrom(Invocation i) {\n-        int k = 0;\n-        for (Matcher m : matchers) {\n+public void captureArgumentsFrom(Invocation i) {\n+    Object[] args = i.getArguments();\n+    if (args != null) {\n+        int length = Math.min(matchers.size(), args.length);\n+        for (int k = 0; k < length; k++) {\n+            Matcher m = matchers.get(k);\n             if (m instanceof CapturesArguments) {\n-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n+                ((CapturesArguments) m).captureFrom(args[k]);\n             }\n-            k++;\n         }\n     }\n-}\n\\ No newline at end of file\n+}\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}