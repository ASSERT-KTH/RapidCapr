{
    "patch": "} else if (parent instanceof NodeUtil.ImmutableResult) {\n    return;\n} else if (!n.isQualifiedName()) {\n    JSType type = n.getJSType();\n    if (type == null) {\n      warnings.add(makeLintWarning(\n          \"Property access without explicit type.\",\n          n));\n      return;\n    }\n    // Get the property passed to its type.\n    Node qName = null;\n    if (n.isString()) {\n      warnings.add(makeLintWarning(\n          \"Property access on a string.\",\n          n));\n      qName = Node.newString(n.getString());\n    } else {\n      qName = n.getFirstChild().cloneTree();\n    }\n    Node getElem = NodeUtil.newCallNode(\n        NodeUtil.newQNameNode(currentScope, \"goog.object.get\"),\n        qName.cloneTree(),\n        NodeUtil.newQNameNode(currentScope, type.getReferenceName()));\n    getElem.putBooleanProp(Node.FREE_CALL, true);\n    parent.replaceChild(n, getElem);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}