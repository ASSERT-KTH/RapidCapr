{
    "patch": "    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(fnNode);\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        // Remove the arg.\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        // Also remove the corresponding name from the function's variable \n        // table to avoid mismatches between the formal parameter list\n        // and the body parameter list during code generation.\n        fnScope.getScope().undeclare(var);\n      } else {\n        break;\n      }\n    }\n    // Remove any other unused arguments in argument list.\n    int numArgsRemoved = 0;\n    for (Node currentArg : argList.children()) {\n      String argName = currentArg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        // Remove the arg.\n        NodeListUtil.remove(argList, currentArg);\n        compiler.reportCodeChange();\n        // Also remove the corresponding name from the function's variable \n        // table to avoid mismatches between the formal parameter list\n        // and the body parameter list during code generation.\n        fnScope.getScope().undeclare(var);\n        numArgsRemoved++;\n      }\n    }\n    if (numArgsRemoved > 0) {\n      compiler.addToDebugLog(\"Removed \" + numArgsRemoved + \" unused arguments \" +\n          \"from function: \" + NodeUtil.getFunctionName(fnNode));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..45ce7979 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(fnNode);\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        // Remove the arg.\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        // Also remove the corresponding name from the function's variable \n+        // table to avoid mismatches between the formal parameter list\n+        // and the body parameter list during code generation.\n+        fnScope.getScope().undeclare(var);\n+      } else {\n+        break;\n+      }\n+    }\n+    // Remove any other unused arguments in argument list.\n+    int numArgsRemoved = 0;\n+    for (Node currentArg : argList.children()) {\n+      String argName = currentArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        // Remove the arg.\n+        NodeListUtil.remove(argList, currentArg);\n+        compiler.reportCodeChange();\n+        // Also remove the corresponding name from the function's variable \n+        // table to avoid mismatches between the formal parameter list\n+        // and the body parameter list during code generation.\n+        fnScope.getScope().undeclare(var);\n+        numArgsRemoved++;\n+      }\n+    }\n+    if (numArgsRemoved > 0) {\n+      compiler.addToDebugLog(\"Removed \" + numArgsRemoved + \" unused arguments \" +\n+          \"from function: \" + NodeUtil.getFunctionName(fnNode));\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}