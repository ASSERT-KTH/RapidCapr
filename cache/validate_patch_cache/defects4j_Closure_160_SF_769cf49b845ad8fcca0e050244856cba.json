{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    boolean checkVariables = true;\n    if (options.checkSymbols) {\n      checkVariables = warningsGuard == null ||\n          warningsGuard.enables(DiagnosticGroups.CHECK_VARIABLES);\n    }\n    if (checkVariables) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ERROR));\n    } else {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    guards.add(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF));\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n\n    // Instantiating checkLevelMap to pass it to the\n    // ObjectPropertyStringPreprocess pass.\n    ImmutableMap.Builder<String, CheckLevel> checkLevelMap = ImmutableMap.builder();\n    for (DiagnosticGroup group :\n        getDiagnosticGroups().getRegisteredGroups()) {\n      checkLevelMap.put(group.getType().key, options.getWarningLevel(group));\n    }\n    this.checkLevelMap = checkLevelMap.build();\n\n    // Create a CompilerInput for each extern\n    for (CompilerInput input : externs) {\n      input.setCompiler(this);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..da83617b 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,7 +223,7 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n     if (errorManager == null) {\n       if (outStream == null) {\n@@ -265,20 +265,36 @@ public class Compiler extends AbstractCompiler {\n             getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n-\n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n+    boolean checkVariables = true;\n+    if (options.checkSymbols) {\n+      checkVariables = warningsGuard == null ||\n+          warningsGuard.enables(DiagnosticGroups.CHECK_VARIABLES);\n+    }\n+    if (checkVariables) {\n+      guards.add(new DiagnosticGroupWarningsGuard(\n+          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ERROR));\n+    } else {\n       guards.add(new DiagnosticGroupWarningsGuard(\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n \n+    guards.add(new DiagnosticGroupWarningsGuard(\n+        DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF));\n     this.warningsGuard = new ComposeWarningsGuard(guards);\n+\n+    // Instantiating checkLevelMap to pass it to the\n+    // ObjectPropertyStringPreprocess pass.\n+    ImmutableMap.Builder<String, CheckLevel> checkLevelMap = ImmutableMap.builder();\n+    for (DiagnosticGroup group :\n+        getDiagnosticGroups().getRegisteredGroups()) {\n+      checkLevelMap.put(group.getType().key, options.getWarningLevel(group));\n+    }\n+    this.checkLevelMap = checkLevelMap.build();\n+\n+    // Create a CompilerInput for each extern\n+    for (CompilerInput input : externs) {\n+      input.setCompiler(this);\n+    }\n   }\n \n   /**",
    "result_reason": "error: package ImmutableMap does not exist",
    "test_result": "ERROR"
}