{
    "patch": "      Node getProp = first.getFirstChild();\n      // This is for, e.g. `goog.debug.Trace` in Closure so we don't assume all\n      // non-extern functions are constructors.\n      if (getProp == null) {\n        return;\n      }\n      Node parentOfProp = getProp.getFirstChild();\n      if (parentOfProp == null || !NodeUtil.isGet(parentOfProp)) {\n        return;\n      }\n      Node propNameNode = parentOfProp.getLastChild();\n      String propName;\n      if (propNameNode.isString()) {\n        propName = propNameNode.getString();\n      } else {\n        return;\n      }\n      FunctionInformation fnInfo = getFunctionsWithName(propName);\n      if (fnInfo == null) {\n        return;\n      }\n      if (fnInfo.isConstructor()) {\n        n.putBooleanProp(Node.CONSTRUCT_CALL, true);\n      } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..aebf8bf2 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,30 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node getProp = first.getFirstChild();\n+      // This is for, e.g. `goog.debug.Trace` in Closure so we don't assume all\n+      // non-extern functions are constructors.\n+      if (getProp == null) {\n+        return;\n+      }\n+      Node parentOfProp = getProp.getFirstChild();\n+      if (parentOfProp == null || !NodeUtil.isGet(parentOfProp)) {\n+        return;\n+      }\n+      Node propNameNode = parentOfProp.getLastChild();\n+      String propName;\n+      if (propNameNode.isString()) {\n+        propName = propNameNode.getString();\n+      } else {\n+        return;\n+      }\n+      FunctionInformation fnInfo = getFunctionsWithName(propName);\n+      if (fnInfo == null) {\n+        return;\n+      }\n+      if (fnInfo.isConstructor()) {\n+        n.putBooleanProp(Node.CONSTRUCT_CALL, true);\n+      } else {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}