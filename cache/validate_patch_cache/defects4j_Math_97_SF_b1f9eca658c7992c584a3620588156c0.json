{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either endpoint is a root\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        ret = min;\n    } else if (yMax == 0.0) {\n        setResult(max, 0);\n        ret = max;\n    } else {\n\n        // Verify bracketing\n        double sign = yMin * yMax;\n\n        if (sign > 0.0) {\n\n            if (Math.abs(yMin) < Math.abs(yMax)) {\n                // Solution on the left endpoint\n                if (yMin < 0.0) {\n                    ret = min;\n                    setResult(ret, yMin);\n                } else {\n                    ret = max;\n                    setResult(ret, yMax);\n                }\n            } else {\n                // Solution on the right endpoint\n                if (yMax < 0.0) {\n                    ret = max;\n                    setResult(ret, yMax);\n                } else {\n                    ret = min;\n                    setResult(ret, yMin);\n                }\n            }\n\n            throw new IllegalArgumentException(\n                    \"Function values at endpoints do not have different signs.  Endpoints: [\" + min + \",\" + max + \"]\" +\n                            \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n\n        } else {\n\n            ret = solve(min, yMin, max, yMax, min, yMin);\n\n        }\n\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..257488967 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,65 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException, \n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Check if either endpoint is a root\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        ret = min;\n+    } else if (yMax == 0.0) {\n+        setResult(max, 0);\n+        ret = max;\n+    } else {\n+\n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+\n+        if (sign > 0.0) {\n+\n+            if (Math.abs(yMin) < Math.abs(yMax)) {\n+                // Solution on the left endpoint\n+                if (yMin < 0.0) {\n+                    ret = min;\n+                    setResult(ret, yMin);\n+                } else {\n+                    ret = max;\n+                    setResult(ret, yMax);\n+                }\n+            } else {\n+                // Solution on the right endpoint\n+                if (yMax < 0.0) {\n+                    ret = max;\n+                    setResult(ret, yMax);\n+                } else {\n+                    ret = min;\n+                    setResult(ret, yMin);\n+                }\n+            }\n+\n+            throw new IllegalArgumentException(\n+                    \"Function values at endpoints do not have different signs.  Endpoints: [\" + min + \",\" + max + \"]\" +\n+                            \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+\n         } else {\n-            // solve using only the first endpoint as initial guess\n+\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+\n         }\n \n-        return ret;\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: method setResult in class UnivariateRealSolverImpl cannot be applied to given types;",
    "test_result": "ERROR"
}