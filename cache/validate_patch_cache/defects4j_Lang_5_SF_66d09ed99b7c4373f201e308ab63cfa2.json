{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(0) == '_' || str.charAt(len - 1) == '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n    if (str.charAt(2) != '_' || str.lastIndexOf('_') == 2) {\n        // no valid country code present\n        if (len != 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), \"\");\n    }\n    int separator1 = str.indexOf('_', 3);\n    if (separator1 == -1) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (separator1 == len - 1) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char c3 = str.charAt(3);\n    if (separator1 - 3 == 2 && Character.isUpperCase(c3)\n            && Character.isUpperCase(str.charAt(4))) {\n        // no valid variant and valid country code present\n        if (len > 5 && (str.charAt(5) != '_' || str.lastIndexOf('_') != 5)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, 5));\n    }\n    // variant and/or extensions present\n    int separator2 = str.indexOf('_', separator1 + 1);\n    if (separator2 == -1) {\n        separator2 = len;\n    }\n    if (separator2 - separator1 <= 1) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (separator2 == len) {\n        // valid country code and variant, no extensions\n        return new Locale(str.substring(0, 2), str.substring(3, separator1), str.substring(separator1 + 1));\n    }\n    // extensions present\n    if (str.charAt(separator2 + 1) != 'x' || str.charAt(separator2 + 2) != '-') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(str.substring(0, 2), str.substring(3, separator1), str.substring(separator1 + 1, separator2),\n            str.substring(separator2 + 1));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..0a840b10 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,62 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (str.charAt(0) == '_' || str.charAt(len - 1) == '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str);\n+    }\n+    if (str.charAt(2) != '_' || str.lastIndexOf('_') == 2) {\n+        // no valid country code present\n+        if (len != 5) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        return new Locale(str.substring(0, 2), \"\");\n+    }\n+    int separator1 = str.indexOf('_', 3);\n+    if (separator1 == -1) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (separator1 == len - 1) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    char c3 = str.charAt(3);\n+    if (separator1 - 3 == 2 && Character.isUpperCase(c3)\n+            && Character.isUpperCase(str.charAt(4))) {\n+        // no valid variant and valid country code present\n+        if (len > 5 && (str.charAt(5) != '_' || str.lastIndexOf('_') != 5)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        return new Locale(str.substring(0, 2), str.substring(3, 5));\n     }\n+    // variant and/or extensions present\n+    int separator2 = str.indexOf('_', separator1 + 1);\n+    if (separator2 == -1) {\n+        separator2 = len;\n+    }\n+    if (separator2 - separator1 <= 1) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (separator2 == len) {\n+        // valid country code and variant, no extensions\n+        return new Locale(str.substring(0, 2), str.substring(3, separator1), str.substring(separator1 + 1));\n+    }\n+    // extensions present\n+    if (str.charAt(separator2 + 1) != 'x' || str.charAt(separator2 + 2) != '-') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return new Locale(str.substring(0, 2), str.substring(3, separator1), str.substring(separator1 + 1, separator2),\n+            str.substring(separator2 + 1));\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable constructor found for Locale(String,String,String,String)",
    "test_result": "ERROR"
}