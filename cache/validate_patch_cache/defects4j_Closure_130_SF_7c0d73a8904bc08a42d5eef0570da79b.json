{
    "patch": "      if (name.localSets == 0 && name.globalSets == 1 && name.getDeclaration() == null && name.aliasingGets != 0) {\n        // remove all references of the aliasing property and replace them with the property value\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Ref.Type.ALIASING_GET) {\n            Node getPropNode = ref.getNode();\n            Node parent = getPropNode.getParent();\n            Node propValue = null;\n            if (getPropNode.isGetProp()) {\n              propValue = getPropNode.getNext();\n            } else if (getPropNode.isName()) {\n              for (Node prev = getPropNode.getPrevious(); prev != null; prev = prev.getPrevious()) {\n                if (!TokenUtil.isWhitespace(prev)) {\n                  propValue = prev.getFirstChild();\n                  break;\n                }\n              }\n            }\n\n            if (propValue != null) {\n              getPropNode.removeChild(propValue);\n              Node replacement = propValue.cloneNode();\n              parent.replaceChild(getPropNode, replacement);\n              replacement.setOriginalName(getPropNode.getOriginalName());\n              replacement.useSourceInfoFrom(getPropNode);\n\n              namespace.removeRef(ref);\n              name.removeRef(ref);\n              replacement.getQualifiedName();\n              Ref newRef = new Ref(replacement, ref.getInput().getCompiler().getCurrentScope(), name);\n              namespace.addRef(newRef);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..418a5920 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,27 +158,36 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+      if (name.localSets == 0 && name.globalSets == 1 && name.getDeclaration() == null && name.aliasingGets != 0) {\n+        // remove all references of the aliasing property and replace them with the property value\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Ref.Type.ALIASING_GET) {\n+            Node getPropNode = ref.getNode();\n+            Node parent = getPropNode.getParent();\n+            Node propValue = null;\n+            if (getPropNode.isGetProp()) {\n+              propValue = getPropNode.getNext();\n+            } else if (getPropNode.isName()) {\n+              for (Node prev = getPropNode.getPrevious(); prev != null; prev = prev.getPrevious()) {\n+                if (!TokenUtil.isWhitespace(prev)) {\n+                  propValue = prev.getFirstChild();\n+                  break;\n+                }\n+              }\n+            }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n+            if (propValue != null) {\n+              getPropNode.removeChild(propValue);\n+              Node replacement = propValue.cloneNode();\n+              parent.replaceChild(getPropNode, replacement);\n+              replacement.setOriginalName(getPropNode.getOriginalName());\n+              replacement.useSourceInfoFrom(getPropNode);\n+\n+              namespace.removeRef(ref);\n               name.removeRef(ref);\n+              replacement.getQualifiedName();\n+              Ref newRef = new Ref(replacement, ref.getInput().getCompiler().getCurrentScope(), name);\n+              namespace.addRef(newRef);\n             }\n           }\n         }\n@@ -186,15 +195,7 @@ class CollapseProperties implements CompilerPass {\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n-    }\n-  }\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}