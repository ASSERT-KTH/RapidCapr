{
    "patch": "      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      \n      // Traverse through any cast nodes and update first node accordingly\n      while (first != null && first.isCast()) {\n        first = first.getFirstChild();\n      }\n\n      if (first != null && !NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first != null && first.isName() && \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..aecd6ea4 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -155,26 +155,26 @@ class PrepareAst implements CompilerPass {\n      * There are two types of calls we are interested in calls without explicit\n      * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n      */\n-    private void annotateCalls(Node n) {\n       Preconditions.checkState(n.isCall());\n \n       // Keep track of of the \"this\" context of a call.  A call without an\n       // explicit \"this\" is a free call.\n       Node first = n.getFirstChild();\n+      \n+      // Traverse through any cast nodes and update first node accordingly\n+      while (first != null && first.isCast()) {\n+        first = first.getFirstChild();\n+      }\n \n-      // ignore cast nodes.\n-\n-      if (!NodeUtil.isGet(first)) {\n+      if (first != null && !NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n       }\n \n       // Keep track of the context in which eval is called. It is important\n       // to distinguish between \"(0, eval)()\" and \"eval()\".\n-      if (first.isName() &&\n-          \"eval\".equals(first.getString())) {\n+      if (first != null && first.isName() && \"eval\".equals(first.getString())) {\n         first.putBooleanProp(Node.DIRECT_EVAL, true);\n       }\n-    }\n \n     /**\n      * Translate dispatcher info into the property expected node.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}