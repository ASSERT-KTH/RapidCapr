{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n        FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean var_args = false;\n    while (arguments.hasNext()) {\n        if (!parameters.hasNext()) {\n            // If there are no parameters left in the list, then this must be\n            // a var_args function.\n            var_args = true;\n            break;\n        }\n        parameter = parameters.next();\n        ordinal++;\n        argument = arguments.next();\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (var_args) {\n        // For var_args function, the rest of the arguments (if any) must be of\n        // the same type as the parameter type of the last parameter in the list.\n        if (parameter == null) {\n            return;\n        }\n        while (argument != null) {\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n            ordinal++;\n            argument = arguments.hasNext() ? arguments.next() : null;\n        }\n        return;\n    }\n\n    boolean any_additional_arguments = false;\n    while (arguments.hasNext()) {\n        ordinal++;\n        any_additional_arguments = true;\n        argument = arguments.next();\n    }\n\n    if (any_additional_arguments && !functionType.hasRestFormals()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                \"Supplied more arguments than the function was expecting\", \"\", \"\");\n        return;\n    }\n\n    int numArgs = ordinal;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    if (minArgs > numArgs || maxArgs < numArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs),\n                String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ? \" and no more than \"\n                        + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e1aeaead 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call,\n+        FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1405,64 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    boolean var_args = false;\n+    while (arguments.hasNext()) {\n+        if (!parameters.hasNext()) {\n+            // If there are no parameters left in the list, then this must be\n+            // a var_args function.\n+            var_args = true;\n+            break;\n+        }\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        ordinal++;\n+        argument = arguments.next();\n+\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+\n+    if (var_args) {\n+        // For var_args function, the rest of the arguments (if any) must be of\n+        // the same type as the parameter type of the last parameter in the list.\n+        if (parameter == null) {\n+            return;\n+        }\n+        while (argument != null) {\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+            ordinal++;\n+            argument = arguments.hasNext() ? arguments.next() : null;\n+        }\n+        return;\n+    }\n+\n+    boolean any_additional_arguments = false;\n+    while (arguments.hasNext()) {\n+        ordinal++;\n+        any_additional_arguments = true;\n+        argument = arguments.next();\n+    }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    if (any_additional_arguments && !functionType.hasRestFormals()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                \"Supplied more arguments than the function was expecting\", \"\", \"\");\n+        return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n+    int numArgs = ordinal;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n+\n     if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs),\n+                String.valueOf(minArgs),\n+                maxArgs != Integer.MAX_VALUE ? \" and no more than \"\n+                        + maxArgs + \" argument(s)\" : \"\");\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}