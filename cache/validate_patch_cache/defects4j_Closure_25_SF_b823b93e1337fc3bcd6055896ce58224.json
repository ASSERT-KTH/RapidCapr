{
    "patch": "    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (!constructorType.isUnknownType()) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        FunctionType ctAbstract = constructorType.autobox().restrictByNotNullOrUndefined().toMaybeFunctionType();\n        if (ct == null && ctAbstract != null) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = ctAbstract;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..28575cf3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,23 +1032,19 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+      if (!constructorType.isUnknownType()) {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n+        FunctionType ctAbstract = constructorType.autobox().restrictByNotNullOrUndefined().toMaybeFunctionType();\n+        if (ct == null && ctAbstract != null) {\n           // If constructorType is a NoObjectType, then toMaybeFunctionType will\n           // return null. But NoObjectType implements the FunctionType\n           // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+          ct = ctAbstract;\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n@@ -1058,9 +1054,6 @@ class TypeInference\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}