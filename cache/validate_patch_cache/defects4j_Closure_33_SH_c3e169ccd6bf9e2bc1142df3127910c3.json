{
    "patch": "      return;\n    }\n\n    // Handle constraints on type variables.\n    if (constraintObj.isTypeVariable()) {\n      for (ObjectType bound : constraintObj.getTypeVariable().getBoundTypes()) {\n        matchConstraint(bound);\n      }\n      return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..0b10c042 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,16 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      return;\n+    }\n+\n+    // Handle constraints on type variables.\n+    if (constraintObj.isTypeVariable()) {\n+      for (ObjectType bound : constraintObj.getTypeVariable().getBoundTypes()) {\n+        matchConstraint(bound);\n+      }\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}