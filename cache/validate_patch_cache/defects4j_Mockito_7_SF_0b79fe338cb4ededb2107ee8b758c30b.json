{
    "patch": "private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        if (bound instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType)bound;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeVariables = TypeVariable.class.cast(parameterizedType.getRawType()).getTypeParameters();\n            for (int i = 0; i < typeVariables.length; i++) {\n                if (typeVariables[i].getName().equals(typeVariable.getName())) {\n                    if (actualTypeArguments[i] instanceof TypeVariable) {\n                        throw new IllegalStateException(\"Unable to extract actual type for type variable '\" + typeVariable.getTypeName() + \"', it is itself a type variable and cannot be resolved\");\n                    } else {\n                        return actualTypeArguments[i];\n                    }\n                }\n            }\n            throw new IllegalStateException(\"Unable to extract actual type for type variable '\" + typeVariable.getTypeName() + \"', none of the parameterized type's type variables match its name\");\n        }\n    }\n    throw new IllegalStateException(\"Unable to extract actual type for type variable '\" + typeVariable.getTypeName() + \"', none of its bounds are a parameterized type\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b716cd696 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        if (bound instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType)bound;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeVariables = TypeVariable.class.cast(parameterizedType.getRawType()).getTypeParameters();\n+            for (int i = 0; i < typeVariables.length; i++) {\n+                if (typeVariables[i].getName().equals(typeVariable.getName())) {\n+                    if (actualTypeArguments[i] instanceof TypeVariable) {\n+                        throw new IllegalStateException(\"Unable to extract actual type for type variable '\" + typeVariable.getTypeName() + \"', it is itself a type variable and cannot be resolved\");\n+                    } else {\n+                        return actualTypeArguments[i];\n+                    }\n+                }\n+            }\n+            throw new IllegalStateException(\"Unable to extract actual type for type variable '\" + typeVariable.getTypeName() + \"', none of the parameterized type's type variables match its name\");\n+        }\n+    }\n+    throw new IllegalStateException(\"Unable to extract actual type for type variable '\" + typeVariable.getTypeName() + \"', none of its bounds are a parameterized type\");\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}