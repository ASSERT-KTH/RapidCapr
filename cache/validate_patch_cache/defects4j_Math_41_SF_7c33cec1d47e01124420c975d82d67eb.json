{
    "patch": "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n\n    // If the number of values is less than two, return NaN\n    if (length < 2) {\n        return Double.NaN;\n    }\n\n    double sumWts = 0.0;\n    double accum = 0.0;\n    double accum2 = 0.0;\n\n    for (int i = begin; i < begin + length; i++) {\n        double dev = values[i] - mean;\n        double weight = weights[i];\n\n        accum += weight * dev * dev;\n        accum2 += weight * dev;\n        sumWts += weight;\n    }\n\n    // If sum of weights is zero, return NaN\n    if (sumWts == 0.0) {\n        return Double.NaN;\n    }\n\n    double var;\n\n    // If bias correction is enabled\n    if (isBiasCorrected) {\n        // Check if sum of weights minus one is zero or less\n        if ((sumWts - 1.0) <= 0.0) {\n            // Return NaN\n            return Double.NaN;\n        } else {\n            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n        }\n    } else {\n        var = accu",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\nindex e5518e31a..064547d72 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -498,39 +498,46 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * @throws IllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n-    public double evaluate(final double[] values, final double[] weights,\n-                           final double mean, final int begin, final int length) {\n+public double evaluate(final double[] values, final double[] weights,\n+                       final double mean, final int begin, final int length) {\n \n-        double var = Double.NaN;\n+    // If the number of values is less than two, return NaN\n+    if (length < 2) {\n+        return Double.NaN;\n+    }\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n-                }\n+    double sumWts = 0.0;\n+    double accum = 0.0;\n+    double accum2 = 0.0;\n \n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n+    for (int i = begin; i < begin + length; i++) {\n+        double dev = values[i] - mean;\n+        double weight = weights[i];\n \n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n-            }\n-        }\n-        return var;\n+        accum += weight * dev * dev;\n+        accum2 += weight * dev;\n+        sumWts += weight;\n+    }\n+\n+    // If sum of weights is zero, return NaN\n+    if (sumWts == 0.0) {\n+        return Double.NaN;\n     }\n \n+    double var;\n+\n+    // If bias correction is enabled\n+    if (isBiasCorrected) {\n+        // Check if sum of weights minus one is zero or less\n+        if ((sumWts - 1.0) <= 0.0) {\n+            // Return NaN\n+            return Double.NaN;\n+        } else {\n+            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+        }\n+    } else {\n+        var = accu\n+\n     /**\n      * <p>Returns the weighted variance of the values in the input array, using\n      * the precomputed weighted mean value.</p>",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}