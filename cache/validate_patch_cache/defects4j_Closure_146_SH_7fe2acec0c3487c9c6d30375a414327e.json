{
    "patch": "// restrict types by not null or undefined\nJSType thisRestricted = this.restrictByNotNullOrUndefined();\nJSType thatRestricted = that.restrictByNotNullOrUndefined();\n\n// check for equivalent types\nif (thisRestricted.isEquivalentTo(thatRestricted)) {\n  return new TypePair(thisRestricted, thisRestricted);\n}\n\n// handle cases where one type is nullable and the other is not\nif (this.isNullable() && !that.isNullable()) {\n  return new TypePair(that, that);\n} else if (that.isNullable() && !this.isNullable()) {\n  return new TypePair(this, this);\n}\n\n// handle cases where the types are unions with one shared type\nif (this instanceof UnionType && that instanceof UnionType) {\n  List<JSType> unionThis = ((UnionType) this).getAlternates();\n  List<JSType> unionThat = ((UnionType) that).getAlternates();\n  JSType sharedType = null;\n  for (JSType t : unionThis) {\n    if (unionThat.contains(t)) {\n      sharedType = t;\n      break;\n    }\n  }\n  if (sharedType != null) {\n    return new TypePair(sharedType, sharedType);\n  }\n}\n\n// return null if types are not equal and no shared type is found\nreturn new TypePair(null, null);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..085de523 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,40 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+// restrict types by not null or undefined\n+JSType thisRestricted = this.restrictByNotNullOrUndefined();\n+JSType thatRestricted = that.restrictByNotNullOrUndefined();\n+\n+// check for equivalent types\n+if (thisRestricted.isEquivalentTo(thatRestricted)) {\n+  return new TypePair(thisRestricted, thisRestricted);\n+}\n+\n+// handle cases where one type is nullable and the other is not\n+if (this.isNullable() && !that.isNullable()) {\n+  return new TypePair(that, that);\n+} else if (that.isNullable() && !this.isNullable()) {\n+  return new TypePair(this, this);\n+}\n+\n+// handle cases where the types are unions with one shared type\n+if (this instanceof UnionType && that instanceof UnionType) {\n+  List<JSType> unionThis = ((UnionType) this).getAlternates();\n+  List<JSType> unionThat = ((UnionType) that).getAlternates();\n+  JSType sharedType = null;\n+  for (JSType t : unionThis) {\n+    if (unionThat.contains(t)) {\n+      sharedType = t;\n+      break;\n+    }\n+  }\n+  if (sharedType != null) {\n+    return new TypePair(sharedType, sharedType);\n+  }\n+}\n+\n+// return null if types are not equal and no shared type is found\n+return new TypePair(null, null);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}