{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            final RealMatrix eigenvectorMatrix = dec.getV();\n            final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n            final RealMatrix eigenvalueSqrtMatrix = MatrixUtils.createRealDiagonalMatrix(FastMath.sqrt(dec.getRealEigenvalues()));\n            final RealMatrix sqrtMatrix = eigenvectorMatrix.multiply(eigenvalueSqrtMatrix).multiply(eigenvectorMatrix.transpose());\n            return sqrtMatrix;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..790ff6e96 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -560,6 +560,10 @@ public abstract class AbstractLeastSquaresOptimizer\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            final RealMatrix eigenvectorMatrix = dec.getV();\n+            final RealMatrix eigenvalueMatrix = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+            final RealMatrix eigenvalueSqrtMatrix = MatrixUtils.createRealDiagonalMatrix(FastMath.sqrt(dec.getRealEigenvalues()));\n+            final RealMatrix sqrtMatrix = eigenvectorMatrix.multiply(eigenvalueSqrtMatrix).multiply(eigenvectorMatrix.transpose());\n+            return sqrtMatrix;\n     }\n }",
    "result_reason": "error: method sqrt in class FastMath cannot be applied to given types;",
    "test_result": "ERROR"
}