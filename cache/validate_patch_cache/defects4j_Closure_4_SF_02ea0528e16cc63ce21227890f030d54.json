{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  List<CompilerInput> inputs = compiler.getInputsById().values().stream()\n          .filter(CompilerInput::isExtern)\n          .collect(Collectors.toList());\n  if (!compiler.hasHaltingErrors() && !inputs.isEmpty()) {\n    // Ensure all externs are resolved.\n    Set<String> unresolved = new LinkedHashSet<>();\n    for (CompilerInput input : inputs) {\n      unresolved.addAll(input.getRequires());\n    }\n    for (String require : unresolved) {\n      t.report(createUnresolvedRequireMsg(require));\n    }\n  }\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n      getReferencedType() : this;\n  } else {\n    WarningCollector warnings = new WarningCollector(compiler);\n    try (SuppressionGuard sg =\n      new SuppressionGuard(compiler, t, makeFilename(),\n          \"JSC_IMPLEMENTS_NON_INTERFACE\", Integer.MAX_VALUE, warnings)) {\n      super.resolveInternal(warnings, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n    assertEquals(\"Expected exactly one warning or error\", 1, warnings.getWarnings().size());\n  }\n\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  super.resolveInternal(t, enclosing);\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n  return registry.isLastGeneration() ?\n     getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..40bea469 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,54 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  List<CompilerInput> inputs = compiler.getInputsById().values().stream()\n+          .filter(CompilerInput::isExtern)\n+          .collect(Collectors.toList());\n+  if (!compiler.hasHaltingErrors() && !inputs.isEmpty()) {\n+    // Ensure all externs are resolved.\n+    Set<String> unresolved = new LinkedHashSet<>();\n+    for (CompilerInput input : inputs) {\n+      unresolved.addAll(input.getRequires());\n+    }\n+    for (String require : unresolved) {\n+      t.report(createUnresolvedRequireMsg(require));\n     }\n+  }\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ?\n+      getReferencedType() : this;\n+  } else {\n+    WarningCollector warnings = new WarningCollector(compiler);\n+    try (SuppressionGuard sg =\n+      new SuppressionGuard(compiler, t, makeFilename(),\n+          \"JSC_IMPLEMENTS_NON_INTERFACE\", Integer.MAX_VALUE, warnings)) {\n+      super.resolveInternal(warnings, enclosing);\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n+    assertEquals(\"Expected exactly one warning or error\", 1, warnings.getWarnings().size());\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+  super.resolveInternal(t, enclosing);\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n   }\n+  return registry.isLastGeneration() ?\n+     getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}