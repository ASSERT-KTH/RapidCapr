{
    "patch": "    /**\n     * Creates a new instance, converting the duration specified in milliseconds.\n     *\n     * @param duration  the duration, in milliseconds\n     */\n    protected BasePeriod(long duration) {\n        iMillis = FieldUtils.safeToInt(duration % DateTimeConstants.MILLIS_PER_SECOND);\n        duration = duration / DateTimeConstants.MILLIS_PER_SECOND;\n        iSeconds = FieldUtils.safeToInt(duration % DateTimeConstants.SECONDS_PER_MINUTE);\n        duration = duration / DateTimeConstants.SECONDS_PER_MINUTE;\n        iMinutes = FieldUtils.safeToInt(duration % DateTimeConstants.MINUTES_PER_HOUR);\n        duration = duration / DateTimeConstants.MINUTES_PER_HOUR;\n        iHours = FieldUtils.safeToInt(duration % DateTimeConstants.HOURS_PER_DAY);\n        duration = duration / DateTimeConstants.HOURS_PER_DAY;\n        iDays = FieldUtils.safeToInt(duration % ISOChronology.getInstanceUTC().daysPerWeek().get());\n        duration = duration / ISOChronology.getInstanceUTC().daysPerWeek().get();\n        iWeeks = FieldUtils.safeToInt(duration % ISOChronology.getInstanceUTC().weeksInyear().get());\n        duration = duration / ISOChronology.getInstanceUTC().weeksInyear().get();\n        iMonths = FieldUtils.safeToInt(duration % 12);\n        iYears = FieldUtils.safeToInt(duration / 12);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..05719174 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,26 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n+    /**\n+     * Creates a new instance, converting the duration specified in milliseconds.\n+     *\n+     * @param duration  the duration, in milliseconds\n+     */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        iMillis = FieldUtils.safeToInt(duration % DateTimeConstants.MILLIS_PER_SECOND);\n+        duration = duration / DateTimeConstants.MILLIS_PER_SECOND;\n+        iSeconds = FieldUtils.safeToInt(duration % DateTimeConstants.SECONDS_PER_MINUTE);\n+        duration = duration / DateTimeConstants.SECONDS_PER_MINUTE;\n+        iMinutes = FieldUtils.safeToInt(duration % DateTimeConstants.MINUTES_PER_HOUR);\n+        duration = duration / DateTimeConstants.MINUTES_PER_HOUR;\n+        iHours = FieldUtils.safeToInt(duration % DateTimeConstants.HOURS_PER_DAY);\n+        duration = duration / DateTimeConstants.HOURS_PER_DAY;\n+        iDays = FieldUtils.safeToInt(duration % ISOChronology.getInstanceUTC().daysPerWeek().get());\n+        duration = duration / ISOChronology.getInstanceUTC().daysPerWeek().get();\n+        iWeeks = FieldUtils.safeToInt(duration % ISOChronology.getInstanceUTC().weeksInyear().get());\n+        duration = duration / ISOChronology.getInstanceUTC().weeksInyear().get();\n+        iMonths = FieldUtils.safeToInt(duration % 12);\n+        iYears = FieldUtils.safeToInt(duration / 12);\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}