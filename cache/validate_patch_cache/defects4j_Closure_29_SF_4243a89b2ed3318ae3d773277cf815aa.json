{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n\n    // Collect all nodes that may be assigned to the object literal.\n    Set<Node> values = new HashSet<>();\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node grandparent = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(),\n        // since the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n            // A call target may be using the object as a 'this' value.\n            if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n                return false;\n            }\n            continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        // Collect all possible assigned values.\n        Node assignedValue = ref.getAssignedValue();\n        if (assignedValue != null) {\n            values.add(assignedValue);\n        }\n    }\n\n    // Check each value for self-reference and non-object-literal assignments.\n    for (Node value : values) {\n        for (Node child : value.children()) {\n            if (NodeUtil.mayHaveSideEffects(child)) {\n                return false;\n            }\n            if (!child.isStringKey() && !child.isMemberFunctionDef()) {\n                return false;\n            }\n            for (Reference ref : refs) {\n                Node refParent = ref.getParent();\n                if (refParent.isGetProp()) {\n                    // Ignore indirect references.\n                    continue;\n                }\n                if (NodeUtil.isAncestorOf(child, refParent)) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    ret = true;\n    return ret;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..45e493c2 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,64 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+    boolean ret = false;\n+\n+    // Collect all nodes that may be assigned to the object literal.\n+    Set<Node> values = new HashSet<>();\n+    for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n+        Node grandparent = ref.getGrandparent();\n \n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n+        // Ignore indirect references, like x.y (except x.y(),\n+        // since the function referenced by y might reference 'this').\n         if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+            // A call target may be using the object as a 'this' value.\n+            if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n+                return false;\n+            }\n+            continue;\n         }\n \n         // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n-\n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+            return false;\n         }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n+        // Collect all possible assigned values.\n+        Node assignedValue = ref.getAssignedValue();\n+        if (assignedValue != null) {\n+            values.add(assignedValue);\n         }\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n-\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n+    // Check each value for self-reference and non-object-literal assignments.\n+    for (Node value : values) {\n+        for (Node child : value.children()) {\n+            if (NodeUtil.mayHaveSideEffects(child)) {\n                 return false;\n-              }\n-              refNode = refNode.getParent();\n             }\n-          }\n+            if (!child.isStringKey() && !child.isMemberFunctionDef()) {\n+                return false;\n+            }\n+            for (Reference ref : refs) {\n+                Node refParent = ref.getParent();\n+                if (refParent.isGetProp()) {\n+                    // Ignore indirect references.\n+                    continue;\n+                }\n+                if (NodeUtil.isAncestorOf(child, refParent)) {\n+                    return false;\n+                }\n+            }\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n     }\n \n+    ret = true;\n+    return ret;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}