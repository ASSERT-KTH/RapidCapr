{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long currentInstant = instantLocal - initialOffset;\n    int currentOffset = getOffset(currentInstant);\n    if (initialOffset != currentOffset) {\n        if (initialOffset < currentOffset) {\n            long nextTransition = nextTransition(currentInstant);\n            while (nextTransition <= instantLocal) {\n                int nextOffset = getOffset(nextTransition);\n                if (nextOffset == initialOffset) {\n                    return initialOffset;\n                } else if (nextOffset > initialOffset) {\n                    return currentOffset;\n                } else {\n                    currentInstant = nextTransition;\n                    currentOffset = nextOffset;\n                    nextTransition = nextTransition(currentTransition + 1);\n                }\n            }\n            return currentOffset;\n        } else {\n            long previousTransition = previousTransition(currentInstant);\n            while (previousTransition > instantLocal) {\n                int previousOffset = getOffset(previousTransition);\n                if (previousOffset == currentOffset) {\n                    return initialOffset;\n                } else if (previousOffset < currentOffset) {\n                    return currentOffset;\n                } else {\n                    currentInstant = previousTransition;\n                    currentOffset = previousOffset;\n                    previousTransition = previousTransition(currentTransition - 1);\n                }\n            }\n            return currentOffset;\n        }\n    } else {\n        return currentOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..08fe8dda 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,46 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long currentInstant = instantLocal - initialOffset;\n+    int currentOffset = getOffset(currentInstant);\n+    if (initialOffset != currentOffset) {\n+        if (initialOffset < currentOffset) {\n+            long nextTransition = nextTransition(currentInstant);\n+            while (nextTransition <= instantLocal) {\n+                int nextOffset = getOffset(nextTransition);\n+                if (nextOffset == initialOffset) {\n+                    return initialOffset;\n+                } else if (nextOffset > initialOffset) {\n+                    return currentOffset;\n+                } else {\n+                    currentInstant = nextTransition;\n+                    currentOffset = nextOffset;\n+                    nextTransition = nextTransition(currentTransition + 1);\n                 }\n             }\n+            return currentOffset;\n+        } else {\n+            long previousTransition = previousTransition(currentInstant);\n+            while (previousTransition > instantLocal) {\n+                int previousOffset = getOffset(previousTransition);\n+                if (previousOffset == currentOffset) {\n+                    return initialOffset;\n+                } else if (previousOffset < currentOffset) {\n+                    return currentOffset;\n+                } else {\n+                    currentInstant = previousTransition;\n+                    currentOffset = previousOffset;\n+                    previousTransition = previousTransition(currentTransition - 1);\n+                }\n+            }\n+            return currentOffset;\n         }\n-        return offsetAdjusted;\n+    } else {\n+        return currentOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}