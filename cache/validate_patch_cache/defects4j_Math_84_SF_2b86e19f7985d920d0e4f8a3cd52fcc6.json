{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        int num = 0;\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] expandedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflected.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best, expanded, original[1]} : new RealPointValuePair[] {best, original[num + 1], reflected, original[num]};\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best, original[1], contracted} : new RealPointValuePair[] {best, contracted, original[num+1]};\n                } else {\n                    // perform a multiple contraction\n                    final RealPointValuePair[] contractedSimplex = simplex.clone();\n                    for (int i = 1; i < simplex.length; i++) {\n                        simplex[i] = RealPointValuePair.midpoint(best, simplex[i]);\n                    }\n                    num++;\n                    if (num >= simplex.length - 1) {\n                        // shrink the simplex\n                        shrink(comparator);\n                        num = 0;\n                    }\n                }\n            }\n\n            // check convergence\n            if (checker != null && checker.converged(iterations.getCount(), best, simplex[0])) {\n                return;\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                                  final double coeff, final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException {\n        final int dim = original[0].getPointRef().length;\n        final RealPointValuePair[] transformed = new RealPointValuePair[dim + 1];\n        transformed[0] = original[0];\n        final double[] xSmallest = original[0].getPointRef();\n        final double[] xLargest = original[dim].getPointRef();\n        double[] sum = new double[dim];\n        for (int i = 1; i <= dim; i++) {\n            final RealPointValuePair optr = original[i];\n            final double[] x = optr.getPointRef();\n            final double[] xNew = new double[dim];\n            for (int j = 0; j < dim; j++) {\n                sum[j] += x[j];\n                xNew[j] = xSmallest[j] + coeff * (sum[j] / i - xSmallest[j] - xLargest[j]);\n            }\n            final double value = computeObjectiveValue(xNew);\n            transformed[i] = new RealPointValuePair(xNew, value);\n        }\n        Arrays.sort(transformed, comparator);\n        return transformed[0];\n    }\n    \n    private void shrink(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        final RealPointValuePair best = simplex[0];\n        for (int i = 1; i < simplex.length; i++) {\n            simplex[i] = new RealPointValuePair(RealPointValuePair.midpoint(best, simplex[i]).getPointRef(),\n                    computeObjectiveValue(RealPointValuePair.midpoint(best, simplex[i]).getPointRef()));\n        }\n        Arrays.sort(simplex, comparator);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..c23ce2149 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,14 +59,14 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        int num = 0;\n         while (true) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n@@ -74,29 +74,80 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair[] expandedSimplex = simplex.clone();\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflected.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best, expanded, original[1]} : new RealPointValuePair[] {best, original[num + 1], reflected, original[num]};\n                 }\n \n-                return;\n-\n+            } else {\n+\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best, original[1], contracted} : new RealPointValuePair[] {best, contracted, original[num+1]};\n+                } else {\n+                    // perform a multiple contraction\n+                    final RealPointValuePair[] contractedSimplex = simplex.clone();\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        simplex[i] = RealPointValuePair.midpoint(best, simplex[i]);\n+                    }\n+                    num++;\n+                    if (num >= simplex.length - 1) {\n+                        // shrink the simplex\n+                        shrink(comparator);\n+                        num = 0;\n+                    }\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (checker != null && checker.converged(iterations.getCount(), best, simplex[0])) {\n                 return;\n             }\n \n         }\n \n     }\n+    \n+    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n+                                                  final double coeff, final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException {\n+        final int dim = original[0].getPointRef().length;\n+        final RealPointValuePair[] transformed = new RealPointValuePair[dim + 1];\n+        transformed[0] = original[0];\n+        final double[] xSmallest = original[0].getPointRef();\n+        final double[] xLargest = original[dim].getPointRef();\n+        double[] sum = new double[dim];\n+        for (int i = 1; i <= dim; i++) {\n+            final RealPointValuePair optr = original[i];\n+            final double[] x = optr.getPointRef();\n+            final double[] xNew = new double[dim];\n+            for (int j = 0; j < dim; j++) {\n+                sum[j] += x[j];\n+                xNew[j] = xSmallest[j] + coeff * (sum[j] / i - xSmallest[j] - xLargest[j]);\n+            }\n+            final double value = computeObjectiveValue(xNew);\n+            transformed[i] = new RealPointValuePair(xNew, value);\n+        }\n+        Arrays.sort(transformed, comparator);\n+        return transformed[0];\n+    }\n+    \n+    private void shrink(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        final RealPointValuePair best = simplex[0];\n+        for (int i = 1; i < simplex.length; i++) {\n+            simplex[i] = new RealPointValuePair(RealPointValuePair.midpoint(best, simplex[i]).getPointRef(),\n+                    computeObjectiveValue(RealPointValuePair.midpoint(best, simplex[i]).getPointRef()));\n+        }\n+        Arrays.sort(simplex, comparator);\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: method evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>) is already defined in class MultiDirectional",
    "test_result": "ERROR"
}