{
    "patch": "      // We only want to analyze first-order functions for escaping variables.\n      if (NodeUtil.isFunctionExpression(n) && t.getScopeDepth() <= 2) {\n        NodeTraversal.traverseEs6(\n            t.getCompiler(),\n            n.getLastChild(),\n            new FirstOrderFunctionAnalyzer(t.getScope(), data));\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..31fc164e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+      // We only want to analyze first-order functions for escaping variables.\n+      if (NodeUtil.isFunctionExpression(n) && t.getScopeDepth() <= 2) {\n+        NodeTraversal.traverseEs6(\n+            t.getCompiler(),\n+            n.getLastChild(),\n+            new FirstOrderFunctionAnalyzer(t.getScope(), data));\n+      }\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}