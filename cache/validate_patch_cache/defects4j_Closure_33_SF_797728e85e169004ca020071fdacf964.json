{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // Check that the constraint object is an anonymous record type.\n  if (constraintObj != null && constraintObj.isRecordType() && !constraintObj.hasReferenceName()) {\n    // Iterate all property names in the constraint object.\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      // Get the type of the property in the constraint object.\n      JSType propType = constraintObj.getPropertyType(prop);\n      // If the property is not already declared in the current object.\n      if (!isPropertyTypeDeclared(prop)) {\n        // If the current object has the property, take the least supertype\n        // of the inferred and constraint types as the inferred type.\n        if (hasProperty(prop)) {\n          JSType inferredType = getPropertyType(prop).getLeastSupertype(propType);\n          defineInferredProperty(prop, inferredType, null);\n        } else {\n          // If the current object does not have the property, use VOID type or UNKNOWN type\n          // as the inferred type depending on whether it should be considered inferred or declared.\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..bcb1630a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,25 +552,27 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n+public void matchConstraint(ObjectType constraintObj) {\n+  // Check that the constraint object is an anonymous record type.\n+  if (constraintObj != null && constraintObj.isRecordType() && !constraintObj.hasReferenceName()) {\n+    // Iterate all property names in the constraint object.\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      // Get the type of the property in the constraint object.\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      // If the property is not already declared in the current object.\n+      if (!isPropertyTypeDeclared(prop)) {\n+        // If the current object has the property, take the least supertype\n+        // of the inferred and constraint types as the inferred type.\n+        if (hasProperty(prop)) {\n+          JSType inferredType = getPropertyType(prop).getLeastSupertype(propType);\n+          defineInferredProperty(prop, inferredType, null);\n+        } else {\n+          // If the current object does not have the property, use VOID type or UNKNOWN type\n+          // as the inferred type depending on whether it should be considered inferred or declared.\n+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+            typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE)\n                 .getLeastSupertype(propType);\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n@@ -579,3 +581,4 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n }\n+}",
    "result_reason": "junit.framework.AssertionFailedError: expected a warning",
    "test_result": "FAIL"
}