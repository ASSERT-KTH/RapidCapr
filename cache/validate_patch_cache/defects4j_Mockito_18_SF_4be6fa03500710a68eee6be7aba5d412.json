{
    "patch": "public Iterable<String> getIterableValues(ReturnValues values) {\n    if (values == null) {\n        return Collections.emptyList();\n    }\n\n    Object returnValue = values.returnValueFor(Iterable.class);\n\n    if (returnValue instanceof Iterable) {\n        return (Iterable<String>) returnValue;\n    } else if (returnValue instanceof CharSequence) {\n        return Collections.singletonList(returnValue.toString());\n    }\n\n    return Collections.emptyList();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..5255e0626 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<String> getIterableValues(ReturnValues values) {\n+    if (values == null) {\n+        return Collections.emptyList();\n+    }\n+\n+    Object returnValue = values.returnValueFor(Iterable.class);\n+\n+    if (returnValue instanceof Iterable) {\n+        return (Iterable<String>) returnValue;\n+    } else if (returnValue instanceof CharSequence) {\n+        return Collections.singletonList(returnValue.toString());\n+    }\n+\n+    return Collections.emptyList();\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}