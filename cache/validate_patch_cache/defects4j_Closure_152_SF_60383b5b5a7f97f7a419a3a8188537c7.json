{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = safeResolve(call, t, scope).autobox();\n    prototype = safeResolve(prototype, t, scope).autobox();\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    if (!(typeOfThis instanceof ObjectType) && typeOfThis.isResolved()) {\n      t.warning(TypeValidator.UNRESOLVED_TYPEVAR,\n          \"the 'this' type of a function must be an object type or 'unknown'.\",\n          typeOfThis.getSource());\n    }\n    if (typeOfThis.isUnionType()) {\n      typeOfThis = typeOfThis.restrictByNotNullOrUndefined();\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<JSType> resolvedInterfaces = ImmutableList.builder();\n    for (JSType iface : implementedInterfaces) {\n      JSType resolvedIface = iface.resolve(t, scope).autobox();\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, subTypes.get(i).resolve(t, scope).autobox());\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..f68b6a3c 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -862,19 +862,25 @@ public class FunctionType extends PrototypeObjectType {\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    call = safeResolve(call, t, scope).autobox();\n+    prototype = safeResolve(prototype, t, scope).autobox();\n \n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (!(typeOfThis instanceof ObjectType) && typeOfThis.isResolved()) {\n+      t.warning(TypeValidator.UNRESOLVED_TYPEVAR,\n+          \"the 'this' type of a function must be an object type or 'unknown'.\",\n+          typeOfThis.getSource());\n+    }\n+    if (typeOfThis.isUnionType()) {\n+      typeOfThis = typeOfThis.restrictByNotNullOrUndefined();\n+    }\n \n     boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+    ImmutableList.Builder<JSType> resolvedInterfaces = ImmutableList.builder();\n+    for (JSType iface : implementedInterfaces) {\n+      JSType resolvedIface = iface.resolve(t, scope).autobox();\n       resolvedInterfaces.add(resolvedIface);\n       changed |= (resolvedIface != iface);\n     }\n@@ -884,7 +890,7 @@ public class FunctionType extends PrototypeObjectType {\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        subTypes.set(i, subTypes.get(i).resolve(t, scope).autobox());\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}