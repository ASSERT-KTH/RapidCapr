{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chronology = instant.getChronology();\n        DateTimeZone zone = chronology.getZone();\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chronology, iLocale, iPivotYear, zone);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chronology = chronology.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chronology = chronology.withZone(bucket.getZone());\n        }\n        instant.setChronology(chronology);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..52487633 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -704,23 +704,21 @@ public class DateTimeFormatter {\n         }\n         \n         long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        Chronology chronology = instant.getChronology();\n+        DateTimeZone zone = chronology.getZone();\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            instantMillis, chronology, iLocale, iPivotYear, zone);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            chronology = chronology.withZone(parsedZone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            chronology = chronology.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n+        instant.setChronology(chronology);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }",
    "result_reason": "error: incompatible types: DateTimeZone cannot be converted to int",
    "test_result": "ERROR"
}