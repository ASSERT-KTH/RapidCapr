{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n        while (numIterations < maxIterations) {\n\n            incrementIterationsCounter();\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = new RealPointValuePair[simplex.length];\n                    simplex[0] = reflected;\n                    for (int i = 0; i < reflectedSimplex.length - 1; i++) {\n                        simplex[i + 1] = reflectedSimplex[i];\n                    }\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[0]) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[simplex.length];\n                simplex[0] = contracted;\n                for (int i = 0; i < contracted.getPointRef().length; i++) {\n                    final double[] arr = getUnitSimplex()[i];\n                    for (int j = 0; j < arr.length; j++) {\n                        arr[j] = contracted.getPointRef()[j] + sigma * (arr[j] - contracted.getPointRef()[j]);\n                    }\n                    simplex[i+1] = new RealPointValuePair(arr, Double.NaN, false);\n                }\n            } else {\n\n                // shrink the simplex\n                for (int i = 1; i < simplex.length; i++) {\n                    final RealPointValuePair pair = simplex[i];\n                    final double[] x = pair.getPointRef();\n                    final double[] newX = new double[x.length];\n                    for (int j = 0; j < x.length; j++) {\n                        newX[j] = best.getPointRef()[j] + sigma * (x[j] - best.getPointRef()[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(newX, Double.NaN, false);\n                }\n\n            }\n\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..be2459601 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,11 +59,13 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n+        while (numIterations < maxIterations) {\n \n             incrementIterationsCounter();\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -76,9 +78,16 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = new RealPointValuePair[simplex.length];\n+                    simplex[0] = reflected;\n+                    for (int i = 0; i < reflectedSimplex.length - 1; i++) {\n+                        simplex[i + 1] = reflectedSimplex[i];\n+                    }\n                 }\n \n                 return;\n@@ -87,15 +96,35 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, original[0]) < 0) {\n                 // accept the contracted simplex\n+                simplex = new RealPointValuePair[simplex.length];\n+                simplex[0] = contracted;\n+                for (int i = 0; i < contracted.getPointRef().length; i++) {\n+                    final double[] arr = getUnitSimplex()[i];\n+                    for (int j = 0; j < arr.length; j++) {\n+                        arr[j] = contracted.getPointRef()[j] + sigma * (arr[j] - contracted.getPointRef()[j]);\n+                    }\n+                    simplex[i+1] = new RealPointValuePair(arr, Double.NaN, false);\n+                }\n+            } else {\n+\n+                // shrink the simplex\n+                for (int i = 1; i < simplex.length; i++) {\n+                    final RealPointValuePair pair = simplex[i];\n+                    final double[] x = pair.getPointRef();\n+                    final double[] newX = new double[x.length];\n+                    for (int j = 0; j < x.length; j++) {\n+                        newX[j] = best.getPointRef()[j] + sigma * (x[j] - best.getPointRef()[j]);\n+                    }\n+                    simplex[i] = new RealPointValuePair(newX, Double.NaN, false);\n+                }\n \n-            // check convergence\n-                return;\n             }\n \n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}