{
    "patch": "if (finallyNode.getFirstChild() == null) {\n  return computeFollowNode(fromNode, finallyNode.getNext(), cfa);\n} else {\n  Node child = finallyNode.getFirstChild();\n  while (child != null) {\n    Node childFollow = computeFollowNode(child, child, cfa);\n    if (childFollow != null) {\n      cfa.createEdge(child, Branch.UNCOND, childFollow);\n    }\n    child = child.getNext();\n  }\n  return computeFollowNode(fromNode, finallyNode.getFirstChild(), cfa);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..dd4cd98e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode.getFirstChild() == null) {\n+  return computeFollowNode(fromNode, finallyNode.getNext(), cfa);\n+} else {\n+  Node child = finallyNode.getFirstChild();\n+  while (child != null) {\n+    Node childFollow = computeFollowNode(child, child, cfa);\n+    if (childFollow != null) {\n+      cfa.createEdge(child, Branch.UNCOND, childFollow);\n+    }\n+    child = child.getNext();\n+  }\n+  return computeFollowNode(fromNode, finallyNode.getFirstChild(), cfa);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}