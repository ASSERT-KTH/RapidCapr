{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          // Don't defineVar() if we are within a catch.\n          if (NodeUtil.getEnclosingType(n, Token.CATCH) != null) {\n            return;\n          }\n\n          // If we already have seen this var, don't define again.\n          Node nameNode = n.getFirstChild();\n          Var nameVar = getVar(nameNode.getString());\n          if (nameVar != null) {\n            warning(\n                \"JSC_DUP_VAR_DECLARATION\",\n                \"variable \" + nameNode.getString() + \" redefined with type \"\n                    + getVarType(nameVar)\n                    + \", original definition at \"\n                    + nameVar.getNode().getSourceFileName()\n                    + \" line \" + nameVar.getNode().getLineno() + \" with type \"\n                    + getVarType(nameVar), nameNode);\n            return;\n          }\n\n          defineVar(n, parent);\n          break;\n      }\n      if (parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..64eefd54 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1460,9 +1460,32 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n+          // Don't defineVar() if we are within a catch.\n+          if (NodeUtil.getEnclosingType(n, Token.CATCH) != null) {\n+            return;\n+          }\n+\n+          // If we already have seen this var, don't define again.\n+          Node nameNode = n.getFirstChild();\n+          Var nameVar = getVar(nameNode.getString());\n+          if (nameVar != null) {\n+            warning(\n+                \"JSC_DUP_VAR_DECLARATION\",\n+                \"variable \" + nameNode.getString() + \" redefined with type \"\n+                    + getVarType(nameVar)\n+                    + \", original definition at \"\n+                    + nameVar.getNode().getSourceFileName()\n+                    + \" line \" + nameVar.getNode().getLineno() + \" with type \"\n+                    + getVarType(nameVar), nameNode);\n+            return;\n+          }\n+\n           defineVar(n, parent);\n           break;\n       }\n+      if (parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}