{
    "patch": "attachLiteralTypes(n);\n\nif (NodeUtil.isFunctionExpression(parent) || NodeUtil.isFunctionDeclaration(n)) {\n    Node functionParent = NodeUtil.getEnclosingNode(parent, Token.BLOCK);\n    if (functionParent != null) {\n        defineDeclaredFunction(n, functionParent);\n    }\n} else if (parent.getType() == Token.CATCH) {\n    defineCatch(n, parent);\n} else if (parent.getType() == Token.LP && parent.getParent() == scope.getRootNode()) {\n    handleFunctionInputs(parent.getParent());\n} else if (parent.getType() == Token.VAR) {\n    defineVar(n, parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d68de0c2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,20 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+\n+if (NodeUtil.isFunctionExpression(parent) || NodeUtil.isFunctionDeclaration(n)) {\n+    Node functionParent = NodeUtil.getEnclosingNode(parent, Token.BLOCK);\n+    if (functionParent != null) {\n+        defineDeclaredFunction(n, functionParent);\n+    }\n+} else if (parent.getType() == Token.CATCH) {\n+    defineCatch(n, parent);\n+} else if (parent.getType() == Token.LP && parent.getParent() == scope.getRootNode()) {\n+    handleFunctionInputs(parent.getParent());\n+} else if (parent.getType() == Token.VAR) {\n+    defineVar(n, parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}