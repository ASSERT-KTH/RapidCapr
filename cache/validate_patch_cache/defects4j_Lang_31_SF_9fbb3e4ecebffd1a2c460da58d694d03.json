{
    "patch": "I apologize for the mistake in my previous response. Here's the corrected implementation of the `containsAny` method of `StringUtils` class in Java that fixes the issue you mentioned:\n\n``` java\npublic static boolean containsAny(CharSequence str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        for (int j = 0; j < searchChars.length; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n            // handles supplementary characters\n            if (Character.isSurrogate(ch)) {\n                if (j < searchChars.length - 1 && searchChars[j+1] == str.charAt(i+1)) {\n                     return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```\n\nThis implementation properly handles supplementary characters by checking if the current character is a surrogate character and checking if the next character is the corresponding surrogate pair.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..3481d802 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,32 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the mistake in my previous response. Here's the corrected implementation of the `containsAny` method of `StringUtils` class in Java that fixes the issue you mentioned:\n+\n+``` java\n+public static boolean containsAny(CharSequence str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        for (int j = 0; j < searchChars.length; j++) {\n+            if (searchChars[j] == ch) {\n+                return true;\n+            }\n+            // handles supplementary characters\n+            if (Character.isSurrogate(ch)) {\n+                if (j < searchChars.length - 1 && searchChars[j+1] == str.charAt(i+1)) {\n+                     return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+```\n+\n+This implementation properly handles supplementary characters by checking if the current character is a surrogate character and checking if the next character is the corresponding surrogate pair.\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}