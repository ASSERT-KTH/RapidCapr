{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        Node prototypeNode = null;\n        if (lhs.getType() == Token.GETPROP) {\n          prototypeNode = lhs.getLastChild();\n        } else if (lhs.getQualifiedName() != null) {\n          int protoIndex = lhs.getQualifiedName().indexOf(\".prototype.\");\n          if (protoIndex >= 0) {\n            prototypeNode = lhs;\n            for (int i = 0; i < protoIndex; i++) {\n              prototypeNode = prototypeNode.getNext();\n            }\n          }\n        }\n        if (prototypeNode != null) {\n          String propName = rhs.getString();\n          if (propName != null && propName.length() > 0) {\n            if (propName.charAt(0) == '$' || propName.charAt(propName.length() - 1) == '$') {\n              return false;\n            }\n            if (propName.indexOf(\"$$\") >= 0) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..e6e1c2d4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,7 +81,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n@@ -122,18 +122,34 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+        Node prototypeNode = null;\n+        if (lhs.getType() == Token.GETPROP) {\n+          prototypeNode = lhs.getLastChild();\n+        } else if (lhs.getQualifiedName() != null) {\n+          int protoIndex = lhs.getQualifiedName().indexOf(\".prototype.\");\n+          if (protoIndex >= 0) {\n+            prototypeNode = lhs;\n+            for (int i = 0; i < protoIndex; i++) {\n+              prototypeNode = prototypeNode.getNext();\n+            }\n           }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+        }\n+        if (prototypeNode != null) {\n+          String propName = rhs.getString();\n+          if (propName != null && propName.length() > 0) {\n+            if (propName.charAt(0) == '$' || propName.charAt(propName.length() - 1) == '$') {\n+              return false;\n+            }\n+            if (propName.indexOf(\"$$\") >= 0) {\n+              return false;\n+            }\n           }\n+        }\n       }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}