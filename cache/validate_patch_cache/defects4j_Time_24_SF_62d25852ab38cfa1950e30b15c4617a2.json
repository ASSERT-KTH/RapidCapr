{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n\n        long millis = iMillis;\n        boolean yearAltered = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis != millis) {\n                    // Check if the field that changed is a month or day field\n                    DurationField firstChangedField = savedFields[i].iField.getDurationField();\n                    DurationField months = DurationFieldType.months().getField(iChrono);\n                    DurationField days = DurationFieldType.days().getField(iChrono);\n                    if (!yearAltered && \n                            (compareReverse(firstChangedField, months) >= 0 && \n                             compareReverse(firstChangedField, days) <= 0)) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                    millis = newMillis;\n                    yearAltered = yearAltered || savedFields[i].iField.getType().equals(DateTimeFieldType.year());\n                } \n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }     \n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1e84f2b8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -336,28 +336,33 @@ public class DateTimeParserBucket {\n             iSavedFieldsShared = false;\n         }\n         sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n \n         long millis = iMillis;\n+        boolean yearAltered = false;\n         try {\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis != millis) {\n+                    // Check if the field that changed is a month or day field\n+                    DurationField firstChangedField = savedFields[i].iField.getDurationField();\n+                    DurationField months = DurationFieldType.months().getField(iChrono);\n+                    DurationField days = DurationFieldType.days().getField(iChrono);\n+                    if (!yearAltered && \n+                            (compareReverse(firstChangedField, months) >= 0 && \n+                             compareReverse(firstChangedField, days) <= 0)) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                    millis = newMillis;\n+                    yearAltered = yearAltered || savedFields[i].iField.getType().equals(DateTimeFieldType.year());\n+                } \n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n             }\n             throw e;\n-        }\n+        }     \n         \n         if (iZone == null) {\n             millis -= iOffset;\n@@ -365,8 +370,7 @@ public class DateTimeParserBucket {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1970> but was:<2000>",
    "test_result": "FAIL"
}