{
    "patch": "// We check if the return type is a * type and whether the function has a\n// return statement, if it does not we return the inferred type as *\n// to ensure that no type warnings are raised.\nif (!(returnType.isNoType() || returnType.isVoidType()) && !functionContainsReturnStatement(func)) {\n  return getNativeType(JSTypeNative.ALL_TYPE);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..f672882d 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,12 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+// We check if the return type is a * type and whether the function has a\n+// return statement, if it does not we return the inferred type as *\n+// to ensure that no type warnings are raised.\n+if (!(returnType.isNoType() || returnType.isVoidType()) && !functionContainsReturnStatement(func)) {\n+  return getNativeType(JSTypeNative.ALL_TYPE);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}