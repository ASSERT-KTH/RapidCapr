{
    "patch": "            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n                // Check millis is within limits, as due to leap seconds, it is not a constant \n                if (i == count - 1 && ((savedFields[i].iField.getType() == DateTimeFieldType.hourOfDay() && millis >= DateTimeConstants.MILLIS_PER_DAY)\n                        || savedFields[i].iField.getType() == DateTimeFieldType.millisOfDay() && millis >= DateTimeConstants.MILLIS_PER_DAY)) {\n                    throw new IllegalFieldValueException(savedFields[i].iField.getType(), new Long(millis), null, null);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8a376d17 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+                // Check millis is within limits, as due to leap seconds, it is not a constant \n+                if (i == count - 1 && ((savedFields[i].iField.getType() == DateTimeFieldType.hourOfDay() && millis >= DateTimeConstants.MILLIS_PER_DAY)\n+                        || savedFields[i].iField.getType() == DateTimeFieldType.millisOfDay() && millis >= DateTimeConstants.MILLIS_PER_DAY)) {\n+                    throw new IllegalFieldValueException(savedFields[i].iField.getType(), new Long(millis), null, null);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}