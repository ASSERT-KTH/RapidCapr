{
    "patch": "      System.err.println(\"Node: \" + n);\n      System.err.println(\"Parent: \" + parent);\n      System.err.flush();\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        if(NodeUtil.isFunctionExpression(n.getFirstChild())) {\n          defineDeclaredFunction(n.getFirstChild(), n);\n        } else {\n          handleFunctionInputs(n);\n        }\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2373d1a5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,11 +1440,17 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      System.err.println(\"Node: \" + n);\n+      System.err.println(\"Parent: \" + parent);\n+      System.err.flush();\n       if (n == scope.getRootNode()) return;\n \n       if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+        if(NodeUtil.isFunctionExpression(n.getFirstChild())) {\n+          defineDeclaredFunction(n.getFirstChild(), n);\n+        } else {\n+          handleFunctionInputs(n);\n+        }\n         return;\n       }\n \n@@ -1462,8 +1468,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n-    }\n+        default:\n+          break;\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}