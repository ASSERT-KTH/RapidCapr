{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    JSType resolvedType;\n\n    // Keep trying to resolve the type until we either succeed or detect a cycle\n    while (true) {\n        boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n        boolean cycleDetected = detectImplicitPrototypeCycle();\n\n        if (cycleDetected) {\n            handleTypeCycle(t);\n\n            // Continue the loop, trying to resolve the type again\n            continue;\n\n        } else if (resolvedViaRegistry) {\n            // If we resolved the type via the registry, call super.resolveInternal() and finishPropertyContinuations()\n            super.resolveInternal(t, enclosing);\n            finishPropertyContinuations();\n\n            // If this is the last generation of the registry, return the referenced type\n            resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n            break;\n\n        } else {\n            // We couldn't resolve the type via the registry, so try to resolve it via properties\n            resolveViaProperties(t, enclosing);\n\n            // If we resolved the type via properties, call super.resolveInternal() and finishPropertyContinuations()\n            if (isResolved()) {\n                super.resolveInternal(t, enclosing);\n                finishPropertyContinuations();\n\n                // If this is the last generation of the registry, return the referenced type\n                resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n                break;\n            }\n        }\n\n        // If we couldn't resolve the type or detect a cycle, we're stuck in an infinite loop.\n        // Return this to avoid a StackOverflowError.\n        resolvedType = this;\n        break;\n    }\n\n    return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..3b146b36 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,52 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    JSType resolvedType;\n+\n+    // Keep trying to resolve the type until we either succeed or detect a cycle\n+    while (true) {\n+        boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+        boolean cycleDetected = detectImplicitPrototypeCycle();\n+\n+        if (cycleDetected) {\n+            handleTypeCycle(t);\n+\n+            // Continue the loop, trying to resolve the type again\n+            continue;\n+\n+        } else if (resolvedViaRegistry) {\n+            // If we resolved the type via the registry, call super.resolveInternal() and finishPropertyContinuations()\n+            super.resolveInternal(t, enclosing);\n+            finishPropertyContinuations();\n+\n+            // If this is the last generation of the registry, return the referenced type\n+            resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+            break;\n+\n+        } else {\n+            // We couldn't resolve the type via the registry, so try to resolve it via properties\n+            resolveViaProperties(t, enclosing);\n+\n+            // If we resolved the type via properties, call super.resolveInternal() and finishPropertyContinuations()\n+            if (isResolved()) {\n+                super.resolveInternal(t, enclosing);\n+                finishPropertyContinuations();\n+\n+                // If this is the last generation of the registry, return the referenced type\n+                resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+                break;\n+            }\n+        }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+        // If we couldn't resolve the type or detect a cycle, we're stuck in an infinite loop.\n+        // Return this to avoid a StackOverflowError.\n+        resolvedType = this;\n+        break;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return resolvedType;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}