{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n// rescale both vectors without losing precision,\n// to ensure their norm are the same order of magnitude\ndouble factor1 = v1.getNormInf();\ndouble factor2 = v2.getNormInf();\nVector3D w1 = v1.scalarMultiply(1.0 / factor1);\nVector3D w2 = v2.scalarMultiply(1.0 / factor2);\n\n// we reduce cancellation errors by preconditioning,\n// we replace w1 by w3 = w1 - rho w2 with rho chosen in order to compute\n// w3 without loss of precision. See Kahan lecture\n// \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n// available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n// compute rho as an 8 bits approximation of w1.w2 / w2.w2\ndouble rho = 0.00390625 * ((w1.getX() * w2.getX() + w1.getY() * w2.getY()) + w1.getZ() * w2.getZ());\n\nVector3D w3 = new Vector3D(w1.getX() - rho * w2.getX(),\n                           w1.getY() - rho * w2.getY(),\n                           w1.getZ() - rho * w2.getZ());\n\n// compute cross product from w3 and w2 instead of v1 and v2\nreturn new Vector3D(w3.getY() * w2.getZ() - w3.getZ() * w2.getY(),\n                    w3.getZ() * w2.getX() - w3.getX() * w2.getZ(),\n                    w3.getX() * w2.getY() - w3.getY() * w2.getX()).scalarMultiply(factor1 * factor2);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..289bae923 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,34 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+// rescale both vectors without losing precision,\n+// to ensure their norm are the same order of magnitude\n+double factor1 = v1.getNormInf();\n+double factor2 = v2.getNormInf();\n+Vector3D w1 = v1.scalarMultiply(1.0 / factor1);\n+Vector3D w2 = v2.scalarMultiply(1.0 / factor2);\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+// we reduce cancellation errors by preconditioning,\n+// we replace w1 by w3 = w1 - rho w2 with rho chosen in order to compute\n+// w3 without loss of precision. See Kahan lecture\n+// \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+// available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+// compute rho as an 8 bits approximation of w1.w2 / w2.w2\n+double rho = 0.00390625 * ((w1.getX() * w2.getX() + w1.getY() * w2.getY()) + w1.getZ() * w2.getZ());\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+Vector3D w3 = new Vector3D(w1.getX() - rho * w2.getX(),\n+                           w1.getY() - rho * w2.getY(),\n+                           w1.getZ() - rho * w2.getZ());\n \n+// compute cross product from w3 and w2 instead of v1 and v2\n+return new Vector3D(w3.getY() * w2.getZ() - w3.getZ() * w2.getY(),\n+                    w3.getZ() * w2.getX() - w3.getX() * w2.getZ(),\n+                    w3.getX() * w2.getY() - w3.getY() * w2.getX()).scalarMultiply(factor1 * factor2);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-1.00000034798647>",
    "test_result": "FAIL"
}