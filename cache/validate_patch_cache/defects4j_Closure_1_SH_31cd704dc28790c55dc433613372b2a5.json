{
    "patch": "      // create default assingment to explicit undefined value for the last arguments which have been removed\n      Node functionBody = function.getLastChild();\n      Node undefinedNode = new Node(Token.DEFAULT_VALUE, Node.newString(Token.NAME, \"undefined\"), Node.newString(Token.NAME, \"undefined\"));\n      undefinedNode.useSourceInfoFromForTree(functionBody);\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        argList.removeChild(lastArg);\n        undefinedNode.addChildToFront(new Node(Token.NAME, var.getName()));\n      }\n      if (undefinedNode.hasChildren()) {\n        functionBody.addChildToBack(undefinedNode);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..256ef90f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // create default assingment to explicit undefined value for the last arguments which have been removed\n+      Node functionBody = function.getLastChild();\n+      Node undefinedNode = new Node(Token.DEFAULT_VALUE, Node.newString(Token.NAME, \"undefined\"), Node.newString(Token.NAME, \"undefined\"));\n+      undefinedNode.useSourceInfoFromForTree(functionBody);\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        argList.removeChild(lastArg);\n+        undefinedNode.addChildToFront(new Node(Token.NAME, var.getName()));\n+      }\n+      if (undefinedNode.hasChildren()) {\n+        functionBody.addChildToBack(undefinedNode);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}