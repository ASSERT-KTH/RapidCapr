{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = original;\n                }\n\n            } else {\n\n                // try to perform a one-dimensional contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = createContractedSimplex(original, contracted);\n                } else {\n\n                    // perform a shrink\n                    final RealPointValuePair[] shrunkSimplex =\n                        shrinkSimplex(original, comparator);\n                    if (comparator.compare(shrunkSimplex[0], original[0]) < 0) {\n                        // accept the shrunk simplex\n                        simplex = shrunkSimplex;\n                    } else {\n                        // accept an arbitrary point (the best)\n                        simplex = createSimplex(best);\n                    }\n\n                }\n\n            }\n\n            // check convergence\n            final RealPointValuePair newBest = simplex[0];\n            if (isConverged(newBest, best)) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..0ed386545 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,42 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = original;\n                 }\n \n-                return;\n+            } else {\n+\n+                // try to perform a one-dimensional contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = createContractedSimplex(original, contracted);\n+                } else {\n+\n+                    // perform a shrink\n+                    final RealPointValuePair[] shrunkSimplex =\n+                        shrinkSimplex(original, comparator);\n+                    if (comparator.compare(shrunkSimplex[0], original[0]) < 0) {\n+                        // accept the shrunk simplex\n+                        simplex = shrunkSimplex;\n+                    } else {\n+                        // accept an arbitrary point (the best)\n+                        simplex = createSimplex(best);\n+                    }\n \n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                }\n \n-            // check convergence\n-                return;\n             }\n \n-        }\n-\n-    }\n+            // check convergence\n+            final RealPointValuePair newBest = simplex[0];\n+            if (isConverged(newBest, best)) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}