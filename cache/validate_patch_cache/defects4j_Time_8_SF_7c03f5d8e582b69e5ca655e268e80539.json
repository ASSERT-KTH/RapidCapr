{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n\n    int offset = hoursOffset * DateTimeConstants.MILLIS_PER_HOUR\n            + minutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;\n\n    String[] knownIDs = DateTimeZone.getAvailableIDs(offset);\n\n    // If there is only one ID, then use that.\n    if (knownIDs.length == 1) {\n        return DateTimeZone.forID(knownIDs[0]);\n    }\n\n    // If UTC use UTC, otherwise, continue.\n    if (\"UTC\".equals(knownIDs[0]) || \"UTC\".equals(knownIDs[1])) {\n        // In a sane world, this is correct. But we live in a world\n        // where someone might create \"GMT+00:00\" or similar.\n        for (String id : knownIDs) {\n            if (!\"UTC\".equals(id)) {\n                return DateTimeZone.forID(id);\n            }\n        }\n    }\n\n    // Try to find a primary ID that uses offset.\n    for (String id : knownIDs) {\n        DateTimeZone zone = DateTimeZone.forID(id);\n        if (zone.getOffset(DateTimeUtils.currentTimeMillis()) == offset) {\n            return zone;\n        }\n    }\n\n    // If that fails, use the first available ID.\n    return DateTimeZone.forID(knownIDs[0]);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..05b20426 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,31 +269,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n-        if (hoursOffset == 0 && minutesOffset == 0) {\n-            return DateTimeZone.UTC;\n-        }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n-        }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n-        }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+    if (hoursOffset == 0 && minutesOffset == 0) {\n+        return DateTimeZone.UTC;\n+    }\n+    if (hoursOffset < -23 || hoursOffset > 23) {\n+        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n+    }\n+    if (minutesOffset < -59 || minutesOffset > 59) {\n+        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+    }\n+\n+    int offset = hoursOffset * DateTimeConstants.MILLIS_PER_HOUR\n+            + minutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    String[] knownIDs = DateTimeZone.getAvailableIDs(offset);\n+\n+    // If there is only one ID, then use that.\n+    if (knownIDs.length == 1) {\n+        return DateTimeZone.forID(knownIDs[0]);\n+    }\n+\n+    // If UTC use UTC, otherwise, continue.\n+    if (\"UTC\".equals(knownIDs[0]) || \"UTC\".equals(knownIDs[1])) {\n+        // In a sane world, this is correct. But we live in a world\n+        // where someone might create \"GMT+00:00\" or similar.\n+        for (String id : knownIDs) {\n+            if (!\"UTC\".equals(id)) {\n+                return DateTimeZone.forID(id);\n             }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n-            throw new IllegalArgumentException(\"Offset is too large\");\n         }\n-        return forOffsetMillis(offset);\n     }\n \n+    // Try to find a primary ID that uses offset.\n+    for (String id : knownIDs) {\n+        DateTimeZone zone = DateTimeZone.forID(id);\n+        if (zone.getOffset(DateTimeUtils.currentTimeMillis()) == offset) {\n+            return zone;\n+        }\n+    }\n+\n+    // If that fails, use the first available ID.\n+    return DateTimeZone.forID(knownIDs[0]);\n+}\n+\n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.\n      *",
    "result_reason": "error: method getAvailableIDs in class DateTimeZone cannot be applied to given types;",
    "test_result": "ERROR"
}