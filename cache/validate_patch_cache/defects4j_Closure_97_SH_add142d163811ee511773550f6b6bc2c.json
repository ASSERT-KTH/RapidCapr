{
    "patch": "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n    return n;\n}\n\nif (!(rval >= 0 && rval < 32) && n.getType() != Token.URSH) {\n    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n    return n;\n}\n\nlong lvalLong = (long) lval;\nif (n.getType() == Token.URSH) {\n    lvalLong = (lvalLong < 0) ? lvalLong + Long.MAX_VALUE + 1 : lvalLong;\n    result = lvalLong >>> rvalInt;\n} else {\n    result = lvalLong >> rvalInt;\n    if (n.getType() == Token.LSH) {\n        result = lvalLong << rvalInt;\n    }\n}\n\nNode newNumber = Node.newNumber(result);\nn.getParent().replaceChild(n, newNumber);\nreportCodeChange();\n\nreturn newNumber;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..11b7c1b0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,32 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n+    error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n+    return n;\n+}\n+\n+if (!(rval >= 0 && rval < 32) && n.getType() != Token.URSH) {\n+    error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+    return n;\n+}\n+\n+long lvalLong = (long) lval;\n+if (n.getType() == Token.URSH) {\n+    lvalLong = (lvalLong < 0) ? lvalLong + Long.MAX_VALUE + 1 : lvalLong;\n+    result = lvalLong >>> rvalInt;\n+} else {\n+    result = lvalLong >> rvalInt;\n+    if (n.getType() == Token.LSH) {\n+        result = lvalLong << rvalInt;\n+    }\n+}\n+\n+Node newNumber = Node.newNumber(result);\n+n.getParent().replaceChild(n, newNumber);\n+reportCodeChange();\n+\n+return newNumber;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}