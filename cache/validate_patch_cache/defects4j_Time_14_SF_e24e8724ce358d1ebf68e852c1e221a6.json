{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        Chronology chrono = partial.getChronology();\n        DateTimeField field = partial.getField(fieldIndex);\n        long newFieldValue = field.addWrapPartial(partial, fieldIndex, values, valueToAdd);\n        // adjust to ensure no illegal month-year\n        int year = ISOChronology.getInstanceUTC().year().get(newFieldValue);\n        int month = ISOChronology.getInstanceUTC().monthOfYear().get(newFieldValue);\n        int day = ISOChronology.getInstanceUTC().dayOfMonth().get(newFieldValue);\n        if (month != field.get(chrono.set(year, month, Math.min(day, field.getMaximumValue())))) {\n            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(month), Integer.valueOf(field.getMinimumValue()), Integer.valueOf(field.getMaximumValue()), null);\n        }\n        // check cross-zone\n        DateTimeZone zone = DateTimeUtils.getZone(partial.getChronology());\n        DateTimeZone nextZone = DateTimeUtils.getZone(chrono);\n        if (zone != nextZone) {\n            int offset = zone.getOffsetFromLocal(newFieldValue);\n            newFieldValue = nextZone.getOffsetTransition(newFieldValue + offset).getInstant();\n            // still within limits\n            if (newFieldValue != field.set(fieldIndex,  newFieldValue)) {\n                throw new IllegalFieldValueException(field.getType(), Long.valueOf(newFieldValue), null, null, null);\n            }\n        }\n        return partial.set(fieldIndex, newFieldValue);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0ceabaed 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,17 +206,29 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // month is largest field and being added to, such as month-day\n+        Chronology chrono = partial.getChronology();\n+        DateTimeField field = partial.getField(fieldIndex);\n+        long newFieldValue = field.addWrapPartial(partial, fieldIndex, values, valueToAdd);\n+        // adjust to ensure no illegal month-year\n+        int year = ISOChronology.getInstanceUTC().year().get(newFieldValue);\n+        int month = ISOChronology.getInstanceUTC().monthOfYear().get(newFieldValue);\n+        int day = ISOChronology.getInstanceUTC().dayOfMonth().get(newFieldValue);\n+        if (month != field.get(chrono.set(year, month, Math.min(day, field.getMaximumValue())))) {\n+            throw new IllegalFieldValueException(field.getType(), Integer.valueOf(month), Integer.valueOf(field.getMinimumValue()), Integer.valueOf(field.getMaximumValue()), null);\n+        }\n+        // check cross-zone\n+        DateTimeZone zone = DateTimeUtils.getZone(partial.getChronology());\n+        DateTimeZone nextZone = DateTimeUtils.getZone(chrono);\n+        if (zone != nextZone) {\n+            int offset = zone.getOffsetFromLocal(newFieldValue);\n+            newFieldValue = nextZone.getOffsetTransition(newFieldValue + offset).getInstant();\n+            // still within limits\n+            if (newFieldValue != field.set(fieldIndex,  newFieldValue)) {\n+                throw new IllegalFieldValueException(field.getType(), Long.valueOf(newFieldValue), null, null, null);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return partial.set(fieldIndex, newFieldValue);\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}