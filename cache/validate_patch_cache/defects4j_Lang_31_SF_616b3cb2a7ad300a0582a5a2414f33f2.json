{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(CharSequence str, char[] searchChars) {\n        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            if (Character.isHighSurrogate(ch)) {\n                int codePoint = Character.codePointAt(str, i);\n                i++; // Skip the low surrogate character\n                if (containsCodePoint(searchChars, codePoint)) {\n                    return true;\n                }\n            } else {\n                if (contains(searchChars, ch)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean contains(char[] arr, char ch) {\n        for (char c : arr) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean containsCodePoint(char[] arr, int codePoint) {\n        for (char c : arr) {\n            if (Character.codePointAt(new char[] { c }, 0) == codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..af071805 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,47 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(CharSequence str, char[] searchChars) {\n+        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+        for (int i = 0; i < str.length(); i++) {\n+            char ch = str.charAt(i);\n+            if (Character.isHighSurrogate(ch)) {\n+                int codePoint = Character.codePointAt(str, i);\n+                i++; // Skip the low surrogate character\n+                if (containsCodePoint(searchChars, codePoint)) {\n+                    return true;\n+                }\n+            } else {\n+                if (contains(searchChars, ch)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean contains(char[] arr, char ch) {\n+        for (char c : arr) {\n+            if (c == ch) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean containsCodePoint(char[] arr, int codePoint) {\n+        for (char c : arr) {\n+            if (Character.codePointAt(new char[] { c }, 0) == codePoint) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}