{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    Set<Name> inlinedNames = new HashSet<>();\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n      if (!inlinedNames.add(name)) {\n        // We've already processed this name, so skip it.\n        continue;\n      }\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n        // {@code name} meets condition (b). \n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        boolean inlined = false;\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code ref} meets condition (c).\n            // Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              inlined = true;\n            }\n          }\n        }\n        if (inlined) {\n          // Removing at least one alias can make other symbols eligible for inlining.\n          inlinedNames.remove(name);\n          workList.addAll(namespace.getDescendants(name));\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n          && name.aliasingGets == 0 && name.props != null) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..d63a36f6 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,47 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    Set<Name> inlinedNames = new HashSet<>();\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n+      if (!inlinedNames.add(name)) {\n+        // We've already processed this name, so skip it.\n+        continue;\n+      }\n \n       // Don't attempt to inline a getter or setter property as a variable.\n       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n+        // {@code name} meets condition (b). \n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        boolean inlined = false;\n         for (Ref ref : refs) {\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+            // {@code ref} meets condition (c).\n+            // Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n+              inlined = true;\n             }\n           }\n         }\n+        if (inlined) {\n+          // Removing at least one alias can make other symbols eligible for inlining.\n+          inlinedNames.remove(name);\n+          workList.addAll(namespace.getDescendants(name));\n+        }\n       }\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n-    }\n-  }\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+          && name.aliasingGets == 0 && name.props != null) {\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}