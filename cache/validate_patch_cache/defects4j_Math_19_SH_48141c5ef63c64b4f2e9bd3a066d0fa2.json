{
    "patch": "        if (boundaries != null) {\n            double max = 0;\n            for (int i = 0; i < init.length; i++) {\n                if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {\n                    max = Math.max(max, FastMath.abs((uB[i] - lB[i]) / inputSigma[i]));\n                }\n            }\n            if (max > FastMath.sqrt(FastMath.max(1.0, ((double) init.length) * 1000))) {\n                throw new NumberIsTooLargeException(max, FastMath.sqrt(FastMath.max(1.0, ((double) init.length) * 1000)), true);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..6d685130a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,15 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+        if (boundaries != null) {\n+            double max = 0;\n+            for (int i = 0; i < init.length; i++) {\n+                if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {\n+                    max = Math.max(max, FastMath.abs((uB[i] - lB[i]) / inputSigma[i]));\n+                }\n+            }\n+            if (max > FastMath.sqrt(FastMath.max(1.0, ((double) init.length) * 1000))) {\n+                throw new NumberIsTooLargeException(max, FastMath.sqrt(FastMath.max(1.0, ((double) init.length) * 1000)), true);\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}