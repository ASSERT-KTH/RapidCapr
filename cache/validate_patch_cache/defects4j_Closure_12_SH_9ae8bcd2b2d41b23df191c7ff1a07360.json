{
    "patch": "protected JSType caseTopType(JSType topType) {\n  if (topType.isUnknownType() || topType.isAllType()) {\n    return topType;\n  } else {\n    return getNativeType(ARRAY_TYPE).getTemplateTypeMap().createInstantiation(\n        ImmutableList.of(topType.toMaybeObjectType()));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..c0d5560c 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,14 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+protected JSType caseTopType(JSType topType) {\n+  if (topType.isUnknownType() || topType.isAllType()) {\n+    return topType;\n+  } else {\n+    return getNativeType(ARRAY_TYPE).getTemplateTypeMap().createInstantiation(\n+        ImmutableList.of(topType.toMaybeObjectType()));\n+  }\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}