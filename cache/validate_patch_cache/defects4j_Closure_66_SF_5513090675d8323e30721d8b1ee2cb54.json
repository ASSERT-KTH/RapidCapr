{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JsonObject obj = JsonParser.parseString(json).getAsJsonObject();\n        double typeCount = obj.entrySet().stream()\n                .filter(entry -> entry.getValue().isJsonPrimitive())\n                .count();\n        double totalCount = obj.entrySet().size();\n        return (typeCount / totalCount) * 100.0;\n    } catch (Exception e) {\n        System.out.println(\"Error parsing JSON: \" + e.getMessage());\n        return -1.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f27e416d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JsonObject obj = JsonParser.parseString(json).getAsJsonObject();\n+        double typeCount = obj.entrySet().stream()\n+                .filter(entry -> entry.getValue().isJsonPrimitive())\n+                .count();\n+        double totalCount = obj.entrySet().size();\n+        return (typeCount / totalCount) * 100.0;\n+    } catch (Exception e) {\n+        System.out.println(\"Error parsing JSON: \" + e.getMessage());\n+        return -1.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}