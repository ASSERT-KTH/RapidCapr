{
    "patch": "                case REGULA_FALSI:\n                    // Detect early that algorithm is stuck, instead of waiting\n                    // for the maximum number of iterations to be exceeded.\n                    if (FastMath.abs(x - x1) <= functionValueAccuracy &&\n                            FastMath.abs(fx - f1) <= functionValueAccuracy) {\n                        throw new ConvergenceException(LocalizedFormats.OBJECTIVE_FUNCTION_CONVERGENCE,\n                                getMaxIterations(), x, FastMath.abs(fx));\n                    } else if (f1 * fx < 0) {\n                        x0 = x1;\n                        f0 = f1;\n                    }\n                    f1 = fx;\n                    x1 = x;\n                    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..8bfed0954 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,20 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                case REGULA_FALSI:\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    if (FastMath.abs(x - x1) <= functionValueAccuracy &&\n+                            FastMath.abs(fx - f1) <= functionValueAccuracy) {\n+                        throw new ConvergenceException(LocalizedFormats.OBJECTIVE_FUNCTION_CONVERGENCE,\n+                                getMaxIterations(), x, FastMath.abs(fx));\n+                    } else if (f1 * fx < 0) {\n+                        x0 = x1;\n+                        f0 = f1;\n+                    }\n+                    f1 = fx;\n+                    x1 = x;\n+                    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}