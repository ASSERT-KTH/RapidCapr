{
    "patch": "        final ParametricUnivariateSolver<DerivativeStructure> solver =\n                new BracketingNthOrderBrentSolver(getMaxEvaluations(), getAbsoluteAccuracy(), getRelativeAccuracy(), getFunctionValueAccuracy());\n        final DerivativeStructure[] optimum = solver.solve(getMaxEvaluations(), new UnivariateDifferentiableFunction() {\n            public DerivativeStructure value(final DerivativeStructure x) {\n                final double[] parameters = x.getAllDerivatives();\n                parameters[0] = parameters[0] <= 0 ? 1.0 : parameters[0];\n                parameters[1] = parameters[1] <= 0 ? 1.0 : parameters[1];\n                try {\n                    final Gaussian.Parametric model = new Gaussian.Parametric(parameters);\n                    final WeightedObservedPoints observations = getObservations();\n                    double error = 0;\n                    for (final WeightedObservedPoint observed : observations.toList()) {\n                        final double x0 = observed.getX();\n                        final double y0 = observed.getY();\n                        final double y = model.value(x0);\n                        error += observed.getWeight() * FastMath.pow(y0 - y, 2);\n                    }\n                    return new DerivativeStructure(2, 1, error);\n                } catch (final NumberIsTooSmallException e) {\n                    return new DerivativeStructure(2, 1, Double.POSITIVE_INFINITY);\n                }\n            }\n        }, new DerivativeStructure(2, 1, guess));\n        final Gaussian.Parametric model = new Gaussian.Parametric(optimum[0].getReal(), optimum[1].getReal(), 1.0);\n        final double[] results = new double[3];\n        results[0] = model.getPeak();\n        results[1] = model.getMean();\n        results[2] = model.getSigma();\n        return results;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..5e375e512 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,35 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final ParametricUnivariateSolver<DerivativeStructure> solver =\n+                new BracketingNthOrderBrentSolver(getMaxEvaluations(), getAbsoluteAccuracy(), getRelativeAccuracy(), getFunctionValueAccuracy());\n+        final DerivativeStructure[] optimum = solver.solve(getMaxEvaluations(), new UnivariateDifferentiableFunction() {\n+            public DerivativeStructure value(final DerivativeStructure x) {\n+                final double[] parameters = x.getAllDerivatives();\n+                parameters[0] = parameters[0] <= 0 ? 1.0 : parameters[0];\n+                parameters[1] = parameters[1] <= 0 ? 1.0 : parameters[1];\n+                try {\n+                    final Gaussian.Parametric model = new Gaussian.Parametric(parameters);\n+                    final WeightedObservedPoints observations = getObservations();\n+                    double error = 0;\n+                    for (final WeightedObservedPoint observed : observations.toList()) {\n+                        final double x0 = observed.getX();\n+                        final double y0 = observed.getY();\n+                        final double y = model.value(x0);\n+                        error += observed.getWeight() * FastMath.pow(y0 - y, 2);\n+                    }\n+                    return new DerivativeStructure(2, 1, error);\n+                } catch (final NumberIsTooSmallException e) {\n+                    return new DerivativeStructure(2, 1, Double.POSITIVE_INFINITY);\n+                }\n+            }\n+        }, new DerivativeStructure(2, 1, guess));\n+        final Gaussian.Parametric model = new Gaussian.Parametric(optimum[0].getReal(), optimum[1].getReal(), 1.0);\n+        final double[] results = new double[3];\n+        results[0] = model.getPeak();\n+        results[1] = model.getMean();\n+        results[2] = model.getSigma();\n+        return results;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}