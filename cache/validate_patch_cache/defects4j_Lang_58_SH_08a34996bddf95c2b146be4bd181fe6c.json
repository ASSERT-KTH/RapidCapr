{
    "patch": "                        boolean isNumeric = isDigits(numeric.replaceAll(\"-\", \"\"));\n                        boolean isNegativeNumeric = numeric.charAt(0) == '-';\n                        boolean validNumeric = isNumeric && (isNegativeNumeric || Character.isDigit(numeric.charAt(0)));\n                        if (validNumeric) {\n                            if (numeric.length() <= 18) {\n                                try {\n                                    return Long.parseLong(numeric);\n                                } catch (NumberFormatException nfeLong) {\n                                    // ignore the bad number\n                                }\n                            }\n                            return createBigInteger(numeric);\n                        }\n                        throw new NumberFormatException(str + \" is not a valid number.\");                ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..c73a4acd 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,20 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        boolean isNumeric = isDigits(numeric.replaceAll(\"-\", \"\"));\n+                        boolean isNegativeNumeric = numeric.charAt(0) == '-';\n+                        boolean validNumeric = isNumeric && (isNegativeNumeric || Character.isDigit(numeric.charAt(0)));\n+                        if (validNumeric) {\n+                            if (numeric.length() <= 18) {\n+                                try {\n+                                    return Long.parseLong(numeric);\n+                                } catch (NumberFormatException nfeLong) {\n+                                    // ignore the bad number\n+                                }\n+                            }\n+                            return createBigInteger(numeric);\n+                        }\n+                        throw new NumberFormatException(str + \" is not a valid number.\");                \n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}