{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        // use regularizedGammaQ because it should converge faster in this case.\n        return 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    }\n    double sum = 1.0 / a;\n    double term = sum;\n    int i = 1;\n    while (Math.abs(term) > epsilon && i < maxIterations) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        // use regularizedGammaP because it should converge faster in this case.\n        return 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n    // continued fraction has fewer rounding errors than the series representation\n    double f = (1.0 - a) + x;\n    double C = 1.0 / f;\n    double D = 0.0;\n    int i = 1;\n    while (Math.abs(1 - C / D) > epsilon && i < maxIterations) {\n        double a_i = -i * (i - a);\n        f += 2.0;\n        D = a_i * D + f * C;\n        if (D == 0.0) {\n            D = epsilon;\n        }\n        C = a_i / C + f / D;\n        if (C == 0.0) {\n            C = epsilon;\n        }\n        i++;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * C;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003;\n    ser -= 0.0108204228969043 * (x + 4);\n    ser -= 0.000690270197266813 * (x + 4) * (x + 3);\n    ser -= 0.000158750303175656 * (x + 4) * (x + 3) * (x + 2);\n    ser -= 0.0000101332778149209 * (x + 4) * (x + 3) * (x + 2) * (x + 1);\n    ser -= 0.00000193167204109091 * (x + 4) * (x + 3) * (x + 2) * (x + 1) * x;\n    ser -= 0.000000106832242673965 * (x + 4) * (x + 3) * (x + 2) * (x + 1) * x * (x - 1);\n    ser += 0.0000000201971118667424 * (x + 4) * (x + 3) * (x + 2) * (x + 1) * x * (x - 1) * (x - 2);\n    ser -= 1.0 / (x + 0.5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..3c9a0582e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,73 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        // use regularizedGammaQ because it should converge faster in this case.\n+        return 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n+    }\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    int i = 1;\n+    while (Math.abs(term) > epsilon && i < maxIterations) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        // use regularizedGammaP because it should converge faster in this case.\n+        return 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n+    }\n+    // continued fraction has fewer rounding errors than the series representation\n+    double f = (1.0 - a) + x;\n+    double C = 1.0 / f;\n+    double D = 0.0;\n+    int i = 1;\n+    while (Math.abs(1 - C / D) > epsilon && i < maxIterations) {\n+        double a_i = -i * (i - a);\n+        f += 2.0;\n+        D = a_i * D + f * C;\n+        if (D == 0.0) {\n+            D = epsilon;\n+        }\n+        C = a_i / C + f / D;\n+        if (C == 0.0) {\n+            C = epsilon;\n+        }\n+        i++;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * C;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003;\n+    ser -= 0.0108204228969043 * (x + 4);\n+    ser -= 0.000690270197266813 * (x + 4) * (x + 3);\n+    ser -= 0.000158750303175656 * (x + 4) * (x + 3) * (x + 2);\n+    ser -= 0.0000101332778149209 * (x + 4) * (x + 3) * (x + 2) * (x + 1);\n+    ser -= 0.00000193167204109091 * (x + 4) * (x + 3) * (x + 2) * (x + 1) * x;\n+    ser -= 0.000000106832242673965 * (x + 4) * (x + 3) * (x + 2) * (x + 1) * x * (x - 1);\n+    ser += 0.0000000201971118667424 * (x + 4) * (x + 3) * (x + 2) * (x + 1) * x * (x - 1) * (x - 2);\n+    ser -= 1.0 / (x + 0.5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}