{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class Calculator {\n    public static double getTypedPercent(String jsonStr) throws JSONException {\n        JSONObject json = new JSONObject(jsonStr);\n        JSONArray data = json.getJSONArray(\"data\");\n        double total = 0.0;\n        double typed = 0.0;\n\n        for (int i = 0; i < data.length(); i++) {\n            JSONObject obj = data.getJSONObject(i);\n            if (obj.has(\"total\") && obj.has(\"typed\")) {\n                total += obj.getDouble(\"total\");\n                typed += obj.getDouble(\"typed\");\n            }\n        }\n\n        return (total == 0.0) ? 0.0 : (typed / total) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d1d197da 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class Calculator {\n+    public static double getTypedPercent(String jsonStr) throws JSONException {\n+        JSONObject json = new JSONObject(jsonStr);\n+        JSONArray data = json.getJSONArray(\"data\");\n+        double total = 0.0;\n+        double typed = 0.0;\n+\n+        for (int i = 0; i < data.length(); i++) {\n+            JSONObject obj = data.getJSONObject(i);\n+            if (obj.has(\"total\") && obj.has(\"typed\")) {\n+                total += obj.getDouble(\"total\");\n+                typed += obj.getDouble(\"typed\");\n+            }\n+        }\n+\n+        return (total == 0.0) ? 0.0 : (typed / total) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}