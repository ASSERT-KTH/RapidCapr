{
    "patch": "      NodeUtil.Match tryMatch = NodeUtil.getEnclosingTry(n);\n      if (tryMatch != null) {\n        Node finallyBlock = NodeUtil.getFinallyBlock(tryMatch.body());\n        if (finallyBlock != null && NodeUtil.isTry(n.getParent())) {\n          // Don't try to minimize the exits of finally blocks, as this\n          // can cause problems if it changes the completion type of the finally\n          // block. See ECMA 262 Sections 8.9 & 12.14\n        } else {\n          Node nextNode = n.getNext();\n          if (nextNode != null) {\n            tryMinimizeExits(nextNode, exitType, labelName);\n          }\n        }\n      } else {\n        Node nextNode = n.getNext();\n        if (nextNode != null) {\n          tryMinimizeExits(nextNode, exitType, labelName);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..089eac74 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,24 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+      NodeUtil.Match tryMatch = NodeUtil.getEnclosingTry(n);\n+      if (tryMatch != null) {\n+        Node finallyBlock = NodeUtil.getFinallyBlock(tryMatch.body());\n+        if (finallyBlock != null && NodeUtil.isTry(n.getParent())) {\n+          // Don't try to minimize the exits of finally blocks, as this\n+          // can cause problems if it changes the completion type of the finally\n+          // block. See ECMA 262 Sections 8.9 & 12.14\n+        } else {\n+          Node nextNode = n.getNext();\n+          if (nextNode != null) {\n+            tryMinimizeExits(nextNode, exitType, labelName);\n+          }\n+        }\n+      } else {\n+        Node nextNode = n.getNext();\n+        if (nextNode != null) {\n+          tryMinimizeExits(nextNode, exitType, labelName);\n+        }\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}