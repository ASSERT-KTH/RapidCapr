{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                jsDoc.hasThisType() ||\n                jsDoc.isOverride())) {\n            return false;\n        }\n\n        // don't traverse function expression inside let or const\n        if (parent != null && (parent.getType() == Token.LET || parent.getType() == Token.CONST)) {\n            return false;\n        }\n\n        Node fnParent = n.getParent();\n        if (fnParent.getType() == Token.EXPR_RESULT) {\n            Node exprParent = fnParent.getParent();\n            // Don't traverse functions in sequences.\n            if (exprParent.getType() == Token.COMMA ||\n                    // Don't traverse functions in calls that are not direct\n                    // children of the script or a block.\n                    (!isBlockOrScript(exprParent) &&\n                            exprParent.getType() == Token.CALL &&\n                            exprParent.getFirstChild() != fnParent)) {\n                return false;\n            }\n\n            int grandParentType = exprParent.getParent().getType();\n            // Don't traverse functions in parameters of function calls or NEWs.\n            if (grandParentType == Token.CALL ||\n                    grandParentType == Token.NEW) {\n                if (skipFunctionStatements == null) {\n                    skipFunctionStatements = new HashSet<>();\n                }\n                skipFunctionStatements.add(fnParent);\n                return false;\n            }\n        }\n\n        int pType = parent.getType();\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME ||\n                (pType == Token.EXPR_RESULT && parent.getParent() != null && (parent.getParent().getType() == Token.BLOCK || parent.getParent().getType() == Token.SCRIPT)) ||\n                (pType == Token.ASSIGN || (pType == Token.VAR && this.isFunctionDeclaration(parent))))) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (lhs.getType() == Token.GETPROP &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isBlockOrScript(Node n) {\n    int type = n.getType();\n    return type == Token.BLOCK || type == Token.SCRIPT;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..e2c3b4b9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,92 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                jsDoc.hasThisType() ||\n+                jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // don't traverse function expression inside let or const\n+        if (parent != null && (parent.getType() == Token.LET || parent.getType() == Token.CONST)) {\n+            return false;\n+        }\n+\n+        Node fnParent = n.getParent();\n+        if (fnParent.getType() == Token.EXPR_RESULT) {\n+            Node exprParent = fnParent.getParent();\n+            // Don't traverse functions in sequences.\n+            if (exprParent.getType() == Token.COMMA ||\n+                    // Don't traverse functions in calls that are not direct\n+                    // children of the script or a block.\n+                    (!isBlockOrScript(exprParent) &&\n+                            exprParent.getType() == Token.CALL &&\n+                            exprParent.getFirstChild() != fnParent)) {\n+                return false;\n+            }\n+\n+            int grandParentType = exprParent.getParent().getType();\n+            // Don't traverse functions in parameters of function calls or NEWs.\n+            if (grandParentType == Token.CALL ||\n+                    grandParentType == Token.NEW) {\n+                if (skipFunctionStatements == null) {\n+                    skipFunctionStatements = new HashSet<>();\n+                }\n+                skipFunctionStatements.add(fnParent);\n+                return false;\n+            }\n+        }\n+\n+        int pType = parent.getType();\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        if (!(pType == Token.BLOCK ||\n+                pType == Token.SCRIPT ||\n+                pType == Token.NAME ||\n+                (pType == Token.EXPR_RESULT && parent.getParent() != null && (parent.getParent().getType() == Token.BLOCK || parent.getParent().getType() == Token.SCRIPT)) ||\n+                (pType == Token.ASSIGN || (pType == Token.VAR && this.isFunctionDeclaration(parent))))) {\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (lhs.getType() == Token.GETPROP &&\n+                    lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean isBlockOrScript(Node n) {\n+    int type = n.getType();\n+    return type == Token.BLOCK || type == Token.SCRIPT;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}