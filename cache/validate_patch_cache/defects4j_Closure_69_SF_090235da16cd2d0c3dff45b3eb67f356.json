{
    "patch": "      JSType thisType = null;\n      Node parent = n.getParent();\n      if (parent != null && parent.isNew()) {\n        // New operator calls constructor functions, which sets the\n        // 'this' type to the type being constructed.\n        thisType = functionType.getInstanceType();\n      } else if (isSuperCall(n)) {\n        // Super call expressions set the 'this' type to the base class.\n        // We use the 'this' type of the enclosing method as a proxy for the\n        // class being extended to avoid resolving the entire inheritance\n        // hierarchy here.\n        Node enclosingFunctionNode = NodeUtil.getEnclosingFunction(n);\n        if (enclosingFunctionNode != null) {\n          JSType enclosingFunctionType = getJSType(enclosingFunctionNode);\n          thisType = enclosingFunctionType.getTypeOfThis();\n        }\n      }\n\n      if (isCallWithGet(thisType, n)) {\n        report(t, n, CALL_WITH_NON_FUNCTION, childType.toString());\n      } else {\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n      }\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n\n  /**\n   * Determines whether the node parent of the node n in the AST being traversed\n   * has a GETPROP or GETELEM as its parent and the assignment to it is a call to\n   * the node n being visited.\n   *\n   * @param thisType The JS type for the \"this\" value in the function type.\n   * @param n The node being visited.\n   * @return True if the call expression is a call with a GETPROP/GETELEM parent.\n   */\n  private static boolean isCallWithGet(JSType thisType, Node n) {\n    Node parent = n.getParent();\n    if (parent == null || !(parent.isGetProp() || parent.isGetElem())) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null || !grandparent.isCall()) {\n      return false;\n    }\n    Node assignment = grandparent.getParent();\n    if (assignment == null || !assignment.isExprResult()) {\n      return false;\n    }\n    Node calleeNode = grandparent.getFirstChild();\n    if (calleeNode == null || calleeNode != parent) {\n      return false;\n    }\n\n    if (thisType != null) {\n      // Check that the \"this\" type in the function type matches the GET that\n      // contains this call.\n      Node instanceNode = null;\n      if (parent.isGetProp()) {\n        instanceNode = parent.getFirstChild();\n      } else {\n        instanceNode = parent.getLastChild();\n      }\n      JSType instanceType = getJSType(instanceNode);\n      if (!thisType.isSubtype(instanceType)) {\n        return false;\n      }\n    }\n\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c019e4ac 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,45 +1541,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n-\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n+      JSType thisType = null;\n+      Node parent = n.getParent();\n+      if (parent != null && parent.isNew()) {\n+        // New operator calls constructor functions, which sets the\n+        // 'this' type to the type being constructed.\n+        thisType = functionType.getInstanceType();\n+      } else if (isSuperCall(n)) {\n+        // Super call expressions set the 'this' type to the base class.\n+        // We use the 'this' type of the enclosing method as a proxy for the\n+        // class being extended to avoid resolving the entire inheritance\n+        // hierarchy here.\n+        Node enclosingFunctionNode = NodeUtil.getEnclosingFunction(n);\n+        if (enclosingFunctionNode != null) {\n+          JSType enclosingFunctionType = getJSType(enclosingFunctionNode);\n+          thisType = enclosingFunctionType.getTypeOfThis();\n+        }\n       }\n \n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      if (isCallWithGet(thisType, n)) {\n+        report(t, n, CALL_WITH_NON_FUNCTION, childType.toString());\n+      } else {\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n       }\n-\n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n-\n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n     } else {\n       ensureTyped(t, n);\n     }\n@@ -1589,6 +1574,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // about the non-portability of the call or both.\n   }\n \n+  /**\n+   * Determines whether the node parent of the node n in the AST being traversed\n+   * has a GETPROP or GETELEM as its parent and the assignment to it is a call to\n+   * the node n being visited.\n+   *\n+   * @param thisType The JS type for the \"this\" value in the function type.\n+   * @param n The node being visited.\n+   * @return True if the call expression is a call with a GETPROP/GETELEM parent.\n+   */\n+  private static boolean isCallWithGet(JSType thisType, Node n) {\n+    Node parent = n.getParent();\n+    if (parent == null || !(parent.isGetProp() || parent.isGetElem())) {\n+      return false;\n+    }\n+    Node grandparent = parent.getParent();\n+    if (grandparent == null || !grandparent.isCall()) {\n+      return false;\n+    }\n+    Node assignment = grandparent.getParent();\n+    if (assignment == null || !assignment.isExprResult()) {\n+      return false;\n+    }\n+    Node calleeNode = grandparent.getFirstChild();\n+    if (calleeNode == null || calleeNode != parent) {\n+      return false;\n+    }\n+\n+    if (thisType != null) {\n+      // Check that the \"this\" type in the function type matches the GET that\n+      // contains this call.\n+      Node instanceNode = null;\n+      if (parent.isGetProp()) {\n+        instanceNode = parent.getFirstChild();\n+      } else {\n+        instanceNode = parent.getLastChild();\n+      }\n+      JSType instanceType = getJSType(instanceNode);\n+      if (!thisType.isSubtype(instanceType)) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}