{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n\n  switch (n.getToken()) {\n    case ASSIGN: {\n      Node lhs = n.getFirstChild();\n      if (lhs.isGetProp()) {\n        // Handle static property assignments.\n        visitClassPropertyAssignment(t, lhs, parent, n.getLastChild());\n      } else if (lhs.isName()) {\n        // Handle variable assignments.\n        visitVariableAssignment(t, lhs, parent, n.getLastChild());\n      }\n      break;\n    }\n    case CALL: {\n      Node callee = n.getFirstChild();\n      if (callee.isGetProp()) {\n        // Handle static method calls.\n        visitStaticMethodCall(t, callee, parent, n);\n      } else {\n        // Handle constructor calls.\n        visitConstructorCall(t, callee, n.getLastChild());\n      }\n      break;\n    }\n    case OBJECTLIT:\n      visitObjectLiteral(t, n, parent);\n      break;\n    case FUNCTION:\n      // We only need to visit functions in a global scope if they have a name\n      // as that can be used to define a global object.\n      if (t.inGlobalScope() && n.getFirstChild().isName()) {\n        visitGlobalScopeFunction(t, n);\n      }\n      break;\n    case CLASS:\n      visitClass(t, n);\n      break;\n    default:\n      // Do nothing.\n      break;\n  }\n}\n\nprivate void visitClassPropertyAssignment(\n    NodeTraversal t, Node getProp, Node parent, Node value) {\n  if (!t.inGlobalScope() || !isClassPropertyDefinition(getProp)) {\n    return;\n  }\n  NameInformation ns = createNameInformation(t, getProp, parent);\n  if (ns == null || ns.isPrototype) {\n    return;\n  }\n  JsName name = getName(ns.name, /* isGlobal */ false);\n  if (name == null) {\n    return;\n  }\n  recordSet(name.name, getProp);\n}\n\nprivate void visitVariableAssignment(\n    NodeTraversal t, Node nameNode, Node parent, Node value) {\n  if (!t.inGlobalScope()) {\n    return;\n  }\n  NameInformation ns = createNameInformation(t, nameNode, parent);\n  if (ns == null || ns.isPrototype || ns.onlyAffectsClassDef) {\n    return;\n  }\n  JsName name = getName(ns.name, /* isGlobal */ true);\n  if (name == null) {\n    return;\n  }\n  if (value.isFunction()) {\n    refNodes.add(new ClassDefiningFunctionNode(\n        name, value, parent, parent.getParent()));\n  } else {\n    recordSet(name.name, nameNode);\n  }\n}\n\nprivate void visitStaticMethodCall(\n    NodeTraversal t, Node getProp, Node parent, Node call) {\n  if (!t.inGlobalScope() || !isClassMethodCall(getProp)) {\n    return;\n  }\n  NameInformation ns = createNameInformation(t, getProp, parent);\n  if (ns == null) {\n    return;\n  }\n  JsName name = getName(ns.name, /* isGlobal */ false);\n  if (name == null) {\n    return;\n  }\n  refNodes.add(new ClassDefiningFunctionNode(\n      name, call, parent, parent.getParent()));\n}\n\nprivate void visitConstructorCall(\n    NodeTraversal t, Node callee, Node arguments) {\n  NameInformation ns = createNameInformation(t, callee, null);\n  if (ns == null) {\n    return;\n  }\n  if (ns.ctorClass == null) {\n    // The callee does not refer to a constructor function.\n    return;\n  }\n  JsName name = getName(ns.ctorClass, /* isGlobal */ false);\n  if (name == null) {\n    return;\n  }\n  recordConstructorCall(name.name, arguments, /* isSuper */ false, null);\n}\n\nprivate void visitObjectLiteral(NodeTraversal t, Node objectLiteral, Node parent) {\n  if (!t.inGlobalScope() || !isObjectLiteralDefinition(parent)) {\n    return;\n  }\n  for (Node keyNode = objectLiteral.getFirstChild(); keyNode != null; keyNode =\n      keyNode.getNext()) {\n    NameInformation ns = createNameInformation(t, keyNode, parent);\n    if (ns == null || ns.isPrototype) {\n      continue;\n    }\n    JsName name = getName(ns.name, /* isGlobal */ false);\n    if (name == null) {\n      continue;\n    }\n    recordSet(name.name, keyNode);\n  }\n}\n\nprivate void visitGlobalScopeFunction(NodeTraversal t, Node function) {\n  Preconditions.checkState(function.getFirstChild().isName());\n  String className = extractClassNameFromQname(\n      function.getFirstFirstChild().getString());\n  if (className == null) {\n    return;\n  }\n  NodeTraversal.traverse(compiler, function.getLastChild(),\n      new FindClassDefiningPropertiesVisitor(className, this));\n}\n\nprivate void visitClass(NodeTraversal t, Node classNode) {\n  String className = classNode.getFirstChild().getString();\n  if (className == null) {\n    return;\n  }\n  // Process all static property definitions of this class.\n  Node statics =\n      NodeUtil.getEnclosingClassMembers(classNode.getParent()).getSecond();\n  for (Node property = statics.getFirstChild(); property != null; property = property.getNext()) {\n    NameInformation ns = createNameInformation(t, property, classNode);\n    if (ns == null || ns.isPrototype) {\n      continue;\n    }\n    JsName name = getName(ns.name, /* isGlobal */ false);\n    if (name == null) {\n      continue;\n    }\n    recordSet(name.name, property);\n  }\n  // Process the constructor of this class.\n  Node constructor = NodeUtil.getEs6ClassConstructorMember(classNode);\n  if (constructor != null) {\n    visitConstructor(classNode, constructor);\n  }\n  // Process the prototype object of this class.\n  Node prototype = NodeUtil.getImplementedInterface(classNode.getParent());\n  for (Node property = prototype.getFirstChild(); property != null; property = property.getNext()) {\n    NameInformation ns = createNameInformation(t, property, classNode);\n    if (ns == null || !ns.isPrototype) {\n      continue;\n    }\n    recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, property);\n  }\n}\n\nprivate void visitConstructor(Node classNode, Node constructor) {\n  String className = classNode.getFirstChild().getString();\n  NameInformation ns = createNameInformation(\n      new NodeTraversal(compiler, constructor), constructor.getFirstChild(), null);\n  if (ns == null) {\n    return;\n  }\n  JsName name = getName(className, /* isGlobal */ false);\n  if (name == null) {\n    return;\n  }\n  recordConstructorCall(name.name, constructor.getLastChild(), /* isSuper */ false, constructor);\n}\n\nprivate boolean isClassPropertyDefinition(Node getprop) {\n  return getprop.isGetProp()\n      && getprop.getParent().isAssign()\n      && getprop.getFirstChild().isThis()\n      && ASTUtil.isClassMember(getprop);\n}\n\nprivate boolean isClassMethodCall(Node getprop) {\n  return getprop.isGetProp()\n      && getprop.getParent().isCall()\n      && getprop.getFirstChild().isThis()\n      && ASTUtil.isClassMember(getprop);\n}\n\nprivate boolean isObjectLiteralDefinition(Node parent) {\n  return parent != null\n      && ASTUtil.isClassMember(parent)\n      && NodeUtil.getEnclosingClass(parent).getParent().isScript();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..44ce3645 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,218 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+\n+  switch (n.getToken()) {\n+    case ASSIGN: {\n+      Node lhs = n.getFirstChild();\n+      if (lhs.isGetProp()) {\n+        // Handle static property assignments.\n+        visitClassPropertyAssignment(t, lhs, parent, n.getLastChild());\n+      } else if (lhs.isName()) {\n+        // Handle variable assignments.\n+        visitVariableAssignment(t, lhs, parent, n.getLastChild());\n+      }\n+      break;\n+    }\n+    case CALL: {\n+      Node callee = n.getFirstChild();\n+      if (callee.isGetProp()) {\n+        // Handle static method calls.\n+        visitStaticMethodCall(t, callee, parent, n);\n+      } else {\n+        // Handle constructor calls.\n+        visitConstructorCall(t, callee, n.getLastChild());\n+      }\n+      break;\n+    }\n+    case OBJECTLIT:\n+      visitObjectLiteral(t, n, parent);\n+      break;\n+    case FUNCTION:\n+      // We only need to visit functions in a global scope if they have a name\n+      // as that can be used to define a global object.\n+      if (t.inGlobalScope() && n.getFirstChild().isName()) {\n+        visitGlobalScopeFunction(t, n);\n       }\n+      break;\n+    case CLASS:\n+      visitClass(t, n);\n+      break;\n+    default:\n+      // Do nothing.\n+      break;\n+  }\n+}\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+private void visitClassPropertyAssignment(\n+    NodeTraversal t, Node getProp, Node parent, Node value) {\n+  if (!t.inGlobalScope() || !isClassPropertyDefinition(getProp)) {\n+    return;\n+  }\n+  NameInformation ns = createNameInformation(t, getProp, parent);\n+  if (ns == null || ns.isPrototype) {\n+    return;\n+  }\n+  JsName name = getName(ns.name, /* isGlobal */ false);\n+  if (name == null) {\n+    return;\n+  }\n+  recordSet(name.name, getProp);\n+}\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n-        }\n-      }\n+private void visitVariableAssignment(\n+    NodeTraversal t, Node nameNode, Node parent, Node value) {\n+  if (!t.inGlobalScope()) {\n+    return;\n+  }\n+  NameInformation ns = createNameInformation(t, nameNode, parent);\n+  if (ns == null || ns.isPrototype || ns.onlyAffectsClassDef) {\n+    return;\n+  }\n+  JsName name = getName(ns.name, /* isGlobal */ true);\n+  if (name == null) {\n+    return;\n+  }\n+  if (value.isFunction()) {\n+    refNodes.add(new ClassDefiningFunctionNode(\n+        name, value, parent, parent.getParent()));\n+  } else {\n+    recordSet(name.name, nameNode);\n+  }\n+}\n+\n+private void visitStaticMethodCall(\n+    NodeTraversal t, Node getProp, Node parent, Node call) {\n+  if (!t.inGlobalScope() || !isClassMethodCall(getProp)) {\n+    return;\n+  }\n+  NameInformation ns = createNameInformation(t, getProp, parent);\n+  if (ns == null) {\n+    return;\n+  }\n+  JsName name = getName(ns.name, /* isGlobal */ false);\n+  if (name == null) {\n+    return;\n+  }\n+  refNodes.add(new ClassDefiningFunctionNode(\n+      name, call, parent, parent.getParent()));\n+}\n+\n+private void visitConstructorCall(\n+    NodeTraversal t, Node callee, Node arguments) {\n+  NameInformation ns = createNameInformation(t, callee, null);\n+  if (ns == null) {\n+    return;\n+  }\n+  if (ns.ctorClass == null) {\n+    // The callee does not refer to a constructor function.\n+    return;\n+  }\n+  JsName name = getName(ns.ctorClass, /* isGlobal */ false);\n+  if (name == null) {\n+    return;\n+  }\n+  recordConstructorCall(name.name, arguments, /* isSuper */ false, null);\n+}\n+\n+private void visitObjectLiteral(NodeTraversal t, Node objectLiteral, Node parent) {\n+  if (!t.inGlobalScope() || !isObjectLiteralDefinition(parent)) {\n+    return;\n+  }\n+  for (Node keyNode = objectLiteral.getFirstChild(); keyNode != null; keyNode =\n+      keyNode.getNext()) {\n+    NameInformation ns = createNameInformation(t, keyNode, parent);\n+    if (ns == null || ns.isPrototype) {\n+      continue;\n     }\n+    JsName name = getName(ns.name, /* isGlobal */ false);\n+    if (name == null) {\n+      continue;\n+    }\n+    recordSet(name.name, keyNode);\n+  }\n+}\n+\n+private void visitGlobalScopeFunction(NodeTraversal t, Node function) {\n+  Preconditions.checkState(function.getFirstChild().isName());\n+  String className = extractClassNameFromQname(\n+      function.getFirstFirstChild().getString());\n+  if (className == null) {\n+    return;\n+  }\n+  NodeTraversal.traverse(compiler, function.getLastChild(),\n+      new FindClassDefiningPropertiesVisitor(className, this));\n+}\n+\n+private void visitClass(NodeTraversal t, Node classNode) {\n+  String className = classNode.getFirstChild().getString();\n+  if (className == null) {\n+    return;\n+  }\n+  // Process all static property definitions of this class.\n+  Node statics =\n+      NodeUtil.getEnclosingClassMembers(classNode.getParent()).getSecond();\n+  for (Node property = statics.getFirstChild(); property != null; property = property.getNext()) {\n+    NameInformation ns = createNameInformation(t, property, classNode);\n+    if (ns == null || ns.isPrototype) {\n+      continue;\n+    }\n+    JsName name = getName(ns.name, /* isGlobal */ false);\n+    if (name == null) {\n+      continue;\n+    }\n+    recordSet(name.name, property);\n+  }\n+  // Process the constructor of this class.\n+  Node constructor = NodeUtil.getEs6ClassConstructorMember(classNode);\n+  if (constructor != null) {\n+    visitConstructor(classNode, constructor);\n+  }\n+  // Process the prototype object of this class.\n+  Node prototype = NodeUtil.getImplementedInterface(classNode.getParent());\n+  for (Node property = prototype.getFirstChild(); property != null; property = property.getNext()) {\n+    NameInformation ns = createNameInformation(t, property, classNode);\n+    if (ns == null || !ns.isPrototype) {\n+      continue;\n+    }\n+    recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, property);\n+  }\n+}\n+\n+private void visitConstructor(Node classNode, Node constructor) {\n+  String className = classNode.getFirstChild().getString();\n+  NameInformation ns = createNameInformation(\n+      new NodeTraversal(compiler, constructor), constructor.getFirstChild(), null);\n+  if (ns == null) {\n+    return;\n+  }\n+  JsName name = getName(className, /* isGlobal */ false);\n+  if (name == null) {\n+    return;\n+  }\n+  recordConstructorCall(name.name, constructor.getLastChild(), /* isSuper */ false, constructor);\n+}\n+\n+private boolean isClassPropertyDefinition(Node getprop) {\n+  return getprop.isGetProp()\n+      && getprop.getParent().isAssign()\n+      && getprop.getFirstChild().isThis()\n+      && ASTUtil.isClassMember(getprop);\n+}\n+\n+private boolean isClassMethodCall(Node getprop) {\n+  return getprop.isGetProp()\n+      && getprop.getParent().isCall()\n+      && getprop.getFirstChild().isThis()\n+      && ASTUtil.isClassMember(getprop);\n+}\n+\n+private boolean isObjectLiteralDefinition(Node parent) {\n+  return parent != null\n+      && ASTUtil.isClassMember(parent)\n+      && NodeUtil.getEnclosingClass(parent).getParent().isScript();\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}