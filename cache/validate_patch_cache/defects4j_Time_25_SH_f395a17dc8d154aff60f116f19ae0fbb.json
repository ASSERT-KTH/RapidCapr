{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // check if we are in a gap\n                int offsetBefore = getOffset(instantLocal - 1);\n                int offsetAfter = getOffset(instantLocal + 1);\n                if (offsetBefore != offsetAfter) {\n                    // we are in a gap, find the transition\n                    long transition = nextTransition(instantLocal - 1);\n                    int offsetAtTransition = getOffset(transition);\n                    if (offsetBefore == offsetAtTransition) {\n                        // we skipped forward over the gap, move back inside\n                        return offsetBefore;\n                    } else if (offsetAfter == offsetAtTransition) {\n                        // we jumped backward into the gap\n                        return offsetAfter;\n                    } else {\n                        // we must be near another transition\n                        return offsetAdjusted;\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..612fa5dc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    public int getOffsetFromLocal(long instantLocal) {\n+        // get the offset at instantLocal (first estimate)\n+        final int offsetLocal = getOffset(instantLocal);\n+        // adjust instantLocal using the estimate and recalc the offset\n+        final long instantAdjusted = instantLocal - offsetLocal;\n+        final int offsetAdjusted = getOffset(instantAdjusted);\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // check if we are in a gap\n+                int offsetBefore = getOffset(instantLocal - 1);\n+                int offsetAfter = getOffset(instantLocal + 1);\n+                if (offsetBefore != offsetAfter) {\n+                    // we are in a gap, find the transition\n+                    long transition = nextTransition(instantLocal - 1);\n+                    int offsetAtTransition = getOffset(transition);\n+                    if (offsetBefore == offsetAtTransition) {\n+                        // we skipped forward over the gap, move back inside\n+                        return offsetBefore;\n+                    } else if (offsetAfter == offsetAtTransition) {\n+                        // we jumped backward into the gap\n+                        return offsetAfter;\n+                    } else {\n+                        // we must be near another transition\n+                        return offsetAdjusted;\n+                    }\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}