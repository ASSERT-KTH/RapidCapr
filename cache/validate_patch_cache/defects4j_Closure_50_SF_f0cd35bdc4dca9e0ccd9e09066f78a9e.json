{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  if (!NodeUtil.isExprAssign(n.getParent()) && !NodeUtil.isExprResult(n.getParent())) {\n    return n;\n  }\n\n  Node joinCall = n.getFirstChild();\n  if (!NodeUtil.isCallTo(joinCall, \"join\")) {\n    return n;\n  }\n\n  Node array = joinCall.getFirstChild();\n  if (array == null) {\n    Node emptyStringNode = Node.newString(\"\");\n    n.replaceWith(emptyStringNode);\n    reportCodeChange();\n    return emptyStringNode;\n  }\n\n  String joinSep = \",\";\n  if (joinCall.getChildCount() == 2) {\n    Node sepNode = joinCall.getChildAtIndex(1);\n    if (sepNode.isString()) {\n      joinSep = sepNode.getString();\n    } else {\n      return n;\n    }\n  }\n\n  List<Node> elements = new ArrayList<>();\n  Node elem = array.getFirstChild();\n  while (elem != null) {\n    if (elem.isEmpty()) {\n      elem = elem.getNext();\n      continue;\n    }\n\n    if (elem.isString()) {\n      elements.add(Node.newString(elem.getString()));\n    } else if (NodeUtil.isImmutableValue(elem)) {\n      elements.add(Node.newString(NodeUtil.getArrayElementStringValue(elem)));\n    } else {\n      return n;\n    }\n\n    elem = elem.getNext();\n  }\n\n  if (elements.isEmpty()) {\n    Node emptyStringNode = Node.newString(\"\");\n    n.replaceWith(emptyStringNode);\n    reportCodeChange();\n    return emptyStringNode;\n  }\n\n  List<Node> foldedElements = new ArrayList<>();\n  int joinedLength = -joinSep.length(); // No separator before first element\n  for (Node el : elements) {\n    foldedElements.add(Node.newString(el.getString()));\n    joinedLength += el.getString().length() + joinSep.length();\n    if (joinedLength < 0) joinedLength = 0;\n  }\n  if (joinedLength == 0 && !joinSep.isEmpty()) {\n    // Special case: joinSep is not empty, so result is always at least 1 character long.\n    joinedLength = 1;\n  }\n\n  Node foldedNode;\n  if (joinedLength == 0) {\n    foldedNode = Node.newString(\"\");\n  } else {\n    foldedNode = foldedElements.remove(0);\n    for (Node el : foldedElements) {\n      foldedNode = new Node(Token.ADD, foldedNode, Node.newString(joinSep), el);\n    }\n  }\n\n  if (InlineCostEstimator.getCost(n) <= InlineCostEstimator.getCost(foldedNode)) {\n    return n;\n  }\n\n  n.replaceWith(foldedNode);\n  reportCodeChange();\n  return foldedNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..2a9ebdc9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,91 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+private Node tryFoldArrayJoin(Node n) {\n+  if (!NodeUtil.isExprAssign(n.getParent()) && !NodeUtil.isExprResult(n.getParent())) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node joinCall = n.getFirstChild();\n+  if (!NodeUtil.isCallTo(joinCall, \"join\")) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node array = joinCall.getFirstChild();\n+  if (array == null) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    n.replaceWith(emptyStringNode);\n+    reportCodeChange();\n+    return emptyStringNode;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+  String joinSep = \",\";\n+  if (joinCall.getChildCount() == 2) {\n+    Node sepNode = joinCall.getChildAtIndex(1);\n+    if (sepNode.isString()) {\n+      joinSep = sepNode.getString();\n+    } else {\n       return n;\n     }\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n+  List<Node> elements = new ArrayList<>();\n+  Node elem = array.getFirstChild();\n+  while (elem != null) {\n+    if (elem.isEmpty()) {\n       elem = elem.getNext();\n+      continue;\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (elem.isString()) {\n+      elements.add(Node.newString(elem.getString()));\n+    } else if (NodeUtil.isImmutableValue(elem)) {\n+      elements.add(Node.newString(NodeUtil.getArrayElementStringValue(elem)));\n+    } else {\n+      return n;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+\n+    elem = elem.getNext();\n+  }\n+\n+  if (elements.isEmpty()) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    n.replaceWith(emptyStringNode);\n+    reportCodeChange();\n+    return emptyStringNode;\n+  }\n+\n+  List<Node> foldedElements = new ArrayList<>();\n+  int joinedLength = -joinSep.length(); // No separator before first element\n+  for (Node el : elements) {\n+    foldedElements.add(Node.newString(el.getString()));\n+    joinedLength += el.getString().length() + joinSep.length();\n+    if (joinedLength < 0) joinedLength = 0;\n+  }\n+  if (joinedLength == 0 && !joinSep.isEmpty()) {\n+    // Special case: joinSep is not empty, so result is always at least 1 character long.\n+    joinedLength = 1;\n+  }\n+\n+  Node foldedNode;\n+  if (joinedLength == 0) {\n+    foldedNode = Node.newString(\"\");\n+  } else {\n+    foldedNode = foldedElements.remove(0);\n+    for (Node el : foldedElements) {\n+      foldedNode = new Node(Token.ADD, foldedNode, Node.newString(joinSep), el);\n     }\n+  }\n \n+  if (InlineCostEstimator.getCost(n) <= InlineCostEstimator.getCost(foldedNode)) {\n     return n;\n   }\n \n+  n.replaceWith(foldedNode);\n+  reportCodeChange();\n+  return foldedNode;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +616,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}