{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        // use the series representation as it converges faster in this case\n        return 1.0 - regularizedGammaQSeries(a, x);\n    } else {\n        // use the continued fraction representation as it converges faster in this case\n        return regularizedGammaPFraction(a, x);\n    }\n}\n\nprivate static double regularizedGammaPFraction(double a, double x) {\n    final double defaultEpsilon = 10e-9;\n    final int defaultMaxIterations = 1000;\n\n    double p = 1.0 / a;\n    double g = p;\n    double q = x / a + 1.0 / a;\n    double a1 = q * p + 1.0;\n    double b1 = x * p + 1.0;\n    double aOld = a1;\n    int n = 1;\n\n    while (n < defaultMaxIterations) {\n        double an = n * (n - a);\n        double a2 = q * a1 - an * p;\n        double b2 = x * a1 - n * g;\n        if (Math.abs(a2) > 0.0) {\n            double b3 = b2 / a2;\n            double delta = aOld * b3;\n            p = aOld;\n            g = delta;\n            aOld = a2 / delta;\n            q = (q * n + x) / delta - a;\n        } else {\n            // set a2 to a small value to prevent division by zero in b3\n            a2 = defaultEpsilon;\n            double b3 = b2 / a2;\n            double delta = aOld * b3;\n            p = aOld;\n            g = delta;\n            aOld = a2 / delta;\n            q = (q * n + x) / delta - a;\n        }\n        if (Math.abs(aOld - p) < defaultEpsilon * aOld) {\n            break;\n        }\n        n++;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * g;\n}\n\nprivate static double regularizedGammaQSeries(double a, double x) {\n    final double defaultEpsilon = 10e-9;\n    final int defaultMaxIterations = 1000;\n    final double defaultSmallNumber = 10e-15;\n\n    double term = a;\n    double sum = term;\n    double n = 1.0;\n    double an = a;\n\n    while (Math.abs(term) > Math.abs(sum) * defaultSmallNumber && n < defaultMaxIterations) {\n        an += 1.0;\n        term *= x / an;\n        sum += term;\n        n += 1.0;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n}\n\npublic static double logGamma(double x) {\n    final double[] cof = {76.18009172947146, -86.50532032941677,\n            24.01409824083091, -1.231739572450155, 0.1208650973866179e-2,\n            -0.5395239384953e-5};\n    double y = x;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    double ser = 1.000000000190015;\n    for (int j = 0; j <= 5; j++) {\n        y++;\n        ser += cof[j] / y;\n    }\n    return -tmp + Math.log(2.5066282746310005 * ser / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..feea48218 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,96 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        // use the series representation as it converges faster in this case\n+        return 1.0 - regularizedGammaQSeries(a, x);\n+    } else {\n+        // use the continued fraction representation as it converges faster in this case\n+        return regularizedGammaPFraction(a, x);\n+    }\n+}\n+\n+private static double regularizedGammaPFraction(double a, double x) {\n+    final double defaultEpsilon = 10e-9;\n+    final int defaultMaxIterations = 1000;\n+\n+    double p = 1.0 / a;\n+    double g = p;\n+    double q = x / a + 1.0 / a;\n+    double a1 = q * p + 1.0;\n+    double b1 = x * p + 1.0;\n+    double aOld = a1;\n+    int n = 1;\n+\n+    while (n < defaultMaxIterations) {\n+        double an = n * (n - a);\n+        double a2 = q * a1 - an * p;\n+        double b2 = x * a1 - n * g;\n+        if (Math.abs(a2) > 0.0) {\n+            double b3 = b2 / a2;\n+            double delta = aOld * b3;\n+            p = aOld;\n+            g = delta;\n+            aOld = a2 / delta;\n+            q = (q * n + x) / delta - a;\n+        } else {\n+            // set a2 to a small value to prevent division by zero in b3\n+            a2 = defaultEpsilon;\n+            double b3 = b2 / a2;\n+            double delta = aOld * b3;\n+            p = aOld;\n+            g = delta;\n+            aOld = a2 / delta;\n+            q = (q * n + x) / delta - a;\n+        }\n+        if (Math.abs(aOld - p) < defaultEpsilon * aOld) {\n+            break;\n+        }\n+        n++;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * g;\n+}\n+\n+private static double regularizedGammaQSeries(double a, double x) {\n+    final double defaultEpsilon = 10e-9;\n+    final int defaultMaxIterations = 1000;\n+    final double defaultSmallNumber = 10e-15;\n+\n+    double term = a;\n+    double sum = term;\n+    double n = 1.0;\n+    double an = a;\n+\n+    while (Math.abs(term) > Math.abs(sum) * defaultSmallNumber && n < defaultMaxIterations) {\n+        an += 1.0;\n+        term *= x / an;\n+        sum += term;\n+        n += 1.0;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n+}\n+\n+public static double logGamma(double x) {\n+    final double[] cof = {76.18009172947146, -86.50532032941677,\n+            24.01409824083091, -1.231739572450155, 0.1208650973866179e-2,\n+            -0.5395239384953e-5};\n+    double y = x;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    double ser = 1.000000000190015;\n+    for (int j = 0; j <= 5; j++) {\n+        y++;\n+        ser += cof[j] / y;\n+    }\n+    return -tmp + Math.log(2.5066282746310005 * ser / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}