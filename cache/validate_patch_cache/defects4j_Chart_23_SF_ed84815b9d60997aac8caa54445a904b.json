{
    "patch": "import junit.framework.TestCase;\n\npublic class RectangleTest extends TestCase {\n\n    public void testEquals() {\n        Rectangle r1 = new Rectangle(5, 10);\n        Rectangle r2 = new Rectangle(5, 10);\n        Rectangle r3 = new Rectangle(10, 5);\n        \n        assertTrue(r1.equals(r2));\n        assertFalse(r1.equals(r3));\n        assertFalse(r2.equals(r3));\n    }\n}\n\nclass Rectangle {\n    private double width, height;\n\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getWidth() {\n        return width;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public double getArea() {\n        return width * height;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Rectangle rectangle = (Rectangle) o;\n        return Double.compare(rectangle.width, width) == 0 &&\n                Double.compare(rectangle.height, height) == 0;\n    }\n}\n",
    "patch_diff": "diff --git a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\nindex bbd5ddb..251660b 100644\n--- a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n@@ -327,7 +327,51 @@ public class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer {\n      * @param column  the column index (zero-based).\n      * @param pass  the pass index.\n      */\n-    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n+import junit.framework.TestCase;\n+\n+public class RectangleTest extends TestCase {\n+\n+    public void testEquals() {\n+        Rectangle r1 = new Rectangle(5, 10);\n+        Rectangle r2 = new Rectangle(5, 10);\n+        Rectangle r3 = new Rectangle(10, 5);\n+        \n+        assertTrue(r1.equals(r2));\n+        assertFalse(r1.equals(r3));\n+        assertFalse(r2.equals(r3));\n+    }\n+}\n+\n+class Rectangle {\n+    private double width, height;\n+\n+    public Rectangle(double width, double height) {\n+        this.width = width;\n+        this.height = height;\n+    }\n+\n+    public double getWidth() {\n+        return width;\n+    }\n+\n+    public double getHeight() {\n+        return height;\n+    }\n+\n+    public double getArea() {\n+        return width * height;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Rectangle rectangle = (Rectangle) o;\n+        return Double.compare(rectangle.width, width) == 0 &&\n+                Double.compare(rectangle.height, height) == 0;\n+    }\n+}\n+\n             Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n             ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n             int pass) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}