{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node child = n.getFirstChild();\n            if (NodeUtil.isStatementBlock(child)) {\n                return false;\n            }\n            if (NodeUtil.isExpressionResult(child)) {\n                if (child.getFirstChild().getType() == Token.NOT) {\n                    return NodeUtil.isCompareToFalsy(child.getFirstChild().getFirstChild());\n                }\n                Node parent = n.getParent();\n                if (parent.getType() == Token.IF)\n                    return parent.getLastChild() == child || NodeUtil.getConditionExpression(parent) != child;\n                else if (parent.getType() == Token.HOOK) {\n                    Node grandParent = parent.getParent();\n                    return grandParent == null || grandParent.getType() != Token.EXPR_RESULT;\n                } else if (child.getType() == Token.FUNCTION) {\n                    Node last = NodeUtil.getLastFunctionInChain(child);\n                    return last.getLastChild().getType() != Token.RETURN;\n                }\n                Node grandParent = parent.getParent();\n                return grandParent == null || grandParent.getType() != Token.EXPR_RESULT;\n            }\n        } else if (n.getFirstChild() != null) {\n            Node child = n.getFirstChild();\n            Token type = child.getType();\n            if ((type == Token.NAME && !child.getString().startsWith(\"JSCompiler_\")) ||\n                    type == Token.EXPR_VOID ||\n                    type == Token.THIS ||\n                    type == Token.SUPER) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..71a380f9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (n.hasOneChild()) {\n+            Node child = n.getFirstChild();\n+            if (NodeUtil.isStatementBlock(child)) {\n+                return false;\n+            }\n+            if (NodeUtil.isExpressionResult(child)) {\n+                if (child.getFirstChild().getType() == Token.NOT) {\n+                    return NodeUtil.isCompareToFalsy(child.getFirstChild().getFirstChild());\n+                }\n+                Node parent = n.getParent();\n+                if (parent.getType() == Token.IF)\n+                    return parent.getLastChild() == child || NodeUtil.getConditionExpression(parent) != child;\n+                else if (parent.getType() == Token.HOOK) {\n+                    Node grandParent = parent.getParent();\n+                    return grandParent == null || grandParent.getType() != Token.EXPR_RESULT;\n+                } else if (child.getType() == Token.FUNCTION) {\n+                    Node last = NodeUtil.getLastFunctionInChain(child);\n+                    return last.getLastChild().getType() != Token.RETURN;\n+                }\n+                Node grandParent = parent.getParent();\n+                return grandParent == null || grandParent.getType() != Token.EXPR_RESULT;\n+            }\n+        } else if (n.getFirstChild() != null) {\n+            Node child = n.getFirstChild();\n+            Token type = child.getType();\n+            if ((type == Token.NAME && !child.getString().startsWith(\"JSCompiler_\")) ||\n+                    type == Token.EXPR_VOID ||\n+                    type == Token.THIS ||\n+                    type == Token.SUPER) {\n+                return true;\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}