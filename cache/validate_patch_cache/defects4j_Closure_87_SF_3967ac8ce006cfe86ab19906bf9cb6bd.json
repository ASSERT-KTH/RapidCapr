{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isFunctionExpression(maybeExpr)\n                && maybeExpr.getType() != Token.FUNCTION) {\n            boolean isReturnInIe = maybeExpr.getType() == Token.NAME && maybeExpr.getString().equals(\"undefined\")\n                    && n.getParent() != null && n.getParent().getParent() instanceof If &&\n                    // Check if this is an IE handler that needs to return undefined instead of void\n                    isEquivalent(maybeExpr, ((If) n.getParent().getParent()).getCondition().getFirstChild());\n            if (isReturnInIe) {\n                return false;\n            }\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n                Node grandparent = parent.getParent();\n                if (grandparent != null && grandparent.getType() == Token.FOR\n                        && grandparent.getFirstChild() == parent) {\n                    return false;\n                }\n                if (NodeUtil.isLabelName(grandparent)) {\n                    return false;\n                }\n                if (grandparent != null && (grandparent.getType() == Token.WHILE || grandparent.getType() == Token.FOR)) {\n                    Node condition = grandparent.getChildAtIndex(0);\n                    if (condition.getType() == Token.EXPR_RESULT || condition.getType() == Token.ASSIGN) {\n                        // Don't fold if the condition has an assignment or an expression that's not a comparison\n                        return false;\n                    } else if (!NodeUtil.isComparisonOperator(condition.getType())) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate boolean isEquivalent(Node node1, Node node2) {\n    return NodeUtil.isEquivalentTo(node1, node2);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..24050d3f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isFunctionExpression(maybeExpr)\n+                && maybeExpr.getType() != Token.FUNCTION) {\n+            boolean isReturnInIe = maybeExpr.getType() == Token.NAME && maybeExpr.getString().equals(\"undefined\")\n+                    && n.getParent() != null && n.getParent().getParent() instanceof If &&\n+                    // Check if this is an IE handler that needs to return undefined instead of void\n+                    isEquivalent(maybeExpr, ((If) n.getParent().getParent()).getCondition().getFirstChild());\n+            if (isReturnInIe) {\n+                return false;\n+            }\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+                Node grandparent = parent.getParent();\n+                if (grandparent != null && grandparent.getType() == Token.FOR\n+                        && grandparent.getFirstChild() == parent) {\n+                    return false;\n+                }\n+                if (NodeUtil.isLabelName(grandparent)) {\n+                    return false;\n+                }\n+                if (grandparent != null && (grandparent.getType() == Token.WHILE || grandparent.getType() == Token.FOR)) {\n+                    Node condition = grandparent.getChildAtIndex(0);\n+                    if (condition.getType() == Token.EXPR_RESULT || condition.getType() == Token.ASSIGN) {\n+                        // Don't fold if the condition has an assignment or an expression that's not a comparison\n+                        return false;\n+                    } else if (!NodeUtil.isComparisonOperator(condition.getType())) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n+\n+private boolean isEquivalent(Node node1, Node node2) {\n+    return NodeUtil.isEquivalentTo(node1, node2);\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}