{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  \n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    int years = 0;\n    int months = 0;\n\n    // normalize weeks to days before handling months and years\n    if (type.isSupported(DurationFieldType.weeks())) {\n        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    } else {\n        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_DAY * 7));\n    }\n\n    // handle months and years\n    int totalMonths = getMonths() + (getYears() * 12);\n    if (type.isSupported(DurationFieldType.years())) {\n        years = totalMonths / 12;\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        months = totalMonths % 12;\n    }\n\n    // create and return a new period\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears(years);\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(months);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..60d15124 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,44 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  \n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    int years = 0;\n+    int months = 0;\n+\n+    // normalize weeks to days before handling months and years\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    } else {\n+        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_DAY * 7));\n+    }\n+\n+    // handle months and years\n+    int totalMonths = getMonths() + (getYears() * 12);\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years = totalMonths / 12;\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months = totalMonths % 12;\n     }\n \n+    // create and return a new period\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (type.isSupported(DurationFieldType.years())) {\n+        result = result.withYears(years);\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        result = result.withMonths(months);\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P3W5D>",
    "test_result": "FAIL"
}