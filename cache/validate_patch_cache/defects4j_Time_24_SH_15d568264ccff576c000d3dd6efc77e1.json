{
    "patch": "            long originalMillis = millis;\n            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    // reset to original value before the failed field\n                    for (int j = 0; j < i; j++) {\n                        millis = savedFields[j].set(millis, resetFields);\n                    }\n                    // reset to (original - 1 day)\n                    millis = iChrono.dayOfYear().set(millis, 1);\n                    millis = iChrono.monthOfYear().set(millis, 1);\n                    long year = savedFields[0].getMillis() <= 0 ? 1970 : 2000;\n                    millis = iChrono.year().set(millis, year);\n                    for (int j = 0; j < i; j++) {\n                        millis = savedFields[j].set(millis, resetFields);\n                    }\n                    // rethrow exception\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..30a67d6c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            long originalMillis = millis;\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    // reset to original value before the failed field\n+                    for (int j = 0; j < i; j++) {\n+                        millis = savedFields[j].set(millis, resetFields);\n+                    }\n+                    // reset to (original - 1 day)\n+                    millis = iChrono.dayOfYear().set(millis, 1);\n+                    millis = iChrono.monthOfYear().set(millis, 1);\n+                    long year = savedFields[0].getMillis() <= 0 ? 1970 : 2000;\n+                    millis = iChrono.year().set(millis, year);\n+                    for (int j = 0; j < i; j++) {\n+                        millis = savedFields[j].set(millis, resetFields);\n+                    }\n+                    // rethrow exception\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}