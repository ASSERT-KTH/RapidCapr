{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n    Node lhs = n.getFirstChild();\n    Node rhs = lhs.getNext();\n    NameInformation ns = createNameInformation(t, lhs);\n    if (ns != null) {\n      if (isInVarDeclaration(lhs)) {\n        // If the left-hand side of the assignment is a var declaration, record the dependencies against the\n        // var node. Since vars are hoisted to the top of the function scope, we want to make sure they are\n        // associated with the correct scope.\n        recordDepScope(lhs, ns);\n      } else if (rhs != null && rhs.isCall()) {\n        // If the RHS is a function call, record its dependencies against the call expression\n        recordDepScope(rhs, ns);\n      } else if (n.getParent().isExprResult()) {\n        // If the assignment appears as an expression statement, record its dependencies against the statement\n        // parent. In other words, if the assignment is the entire expression, it's the context that uses the RHS.\n        recordDepScope(n.getParent(), ns);\n      } else {\n        Node parent = n.getParent().getParent();\n        if (isInObjectDeclaration(parent)) {\n          // If we're in an object declaration, the assigned variable is only visible within the object\n          // scope. Record the dependencies against the object node.\n          recordDepScope(parent, ns);\n        } else if (isInFunctionDeclaration(parent)) {\n          // If the assignment is part of a function declaration, record dependencies against the function node.\n          // This ensures that the variable is only visible within the function scope.\n          recordDepScope(parent.getFirstChild(), ns);\n        } else if (NodeUtil.isStatementBlock(parent) || parent.isScript() || parent.isBlock()) {\n          // If the assignment appears in a statement block, the global script or a block, and not as the entire\n          // expression, it's a statement that defines the variable in the current scope. Record the dependencies\n          // against the statement itself.\n          recordDepScope(n.getParent(), ns);\n        } else if (parent.isExprResult() && parent.getParent().isFor()) {\n          // If the assignment appears in the initialization part of a for loop, record the dependencies against\n          // the for loop (which represents a new scope).\n          recordDepScope(parent.getParent(), ns);\n        }\n      }\n    }\n  }\n\n  private boolean isInVarDeclaration(Node n) {\n    return n.getParent().isVar() && n.getParent().getFirstChild() == n;\n  }\n\n  private boolean isInObjectDeclaration(Node n) {\n    return n.isAssign() && n.getParent().isObjectLit();\n  }\n\n  private boolean isInFunctionDeclaration(Node n) {\n    return NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n)\n        || (n.isAssign() && n.getParent().isFunction());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..2e134c2e 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,59 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+    Node lhs = n.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    NameInformation ns = createNameInformation(t, lhs);\n+    if (ns != null) {\n+      if (isInVarDeclaration(lhs)) {\n+        // If the left-hand side of the assignment is a var declaration, record the dependencies against the\n+        // var node. Since vars are hoisted to the top of the function scope, we want to make sure they are\n+        // associated with the correct scope.\n+        recordDepScope(lhs, ns);\n+      } else if (rhs != null && rhs.isCall()) {\n+        // If the RHS is a function call, record its dependencies against the call expression\n+        recordDepScope(rhs, ns);\n+      } else if (n.getParent().isExprResult()) {\n+        // If the assignment appears as an expression statement, record its dependencies against the statement\n+        // parent. In other words, if the assignment is the entire expression, it's the context that uses the RHS.\n+        recordDepScope(n.getParent(), ns);\n+      } else {\n+        Node parent = n.getParent().getParent();\n+        if (isInObjectDeclaration(parent)) {\n+          // If we're in an object declaration, the assigned variable is only visible within the object\n+          // scope. Record the dependencies against the object node.\n+          recordDepScope(parent, ns);\n+        } else if (isInFunctionDeclaration(parent)) {\n+          // If the assignment is part of a function declaration, record dependencies against the function node.\n+          // This ensures that the variable is only visible within the function scope.\n+          recordDepScope(parent.getFirstChild(), ns);\n+        } else if (NodeUtil.isStatementBlock(parent) || parent.isScript() || parent.isBlock()) {\n+          // If the assignment appears in a statement block, the global script or a block, and not as the entire\n+          // expression, it's a statement that defines the variable in the current scope. Record the dependencies\n+          // against the statement itself.\n+          recordDepScope(n.getParent(), ns);\n+        } else if (parent.isExprResult() && parent.getParent().isFor()) {\n+          // If the assignment appears in the initialization part of a for loop, record the dependencies against\n+          // the for loop (which represents a new scope).\n+          recordDepScope(parent.getParent(), ns);\n         }\n       }\n     }\n+  }\n+\n+  private boolean isInVarDeclaration(Node n) {\n+    return n.getParent().isVar() && n.getParent().getFirstChild() == n;\n+  }\n+\n+  private boolean isInObjectDeclaration(Node n) {\n+    return n.isAssign() && n.getParent().isObjectLit();\n+  }\n+\n+  private boolean isInFunctionDeclaration(Node n) {\n+    return NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n)\n+        || (n.isAssign() && n.getParent().isFunction());\n+  }\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}