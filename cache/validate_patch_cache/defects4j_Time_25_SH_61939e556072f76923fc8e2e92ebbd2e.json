{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    long transition;\n    boolean dstGap;\n    \n    if (offsetLocal < offsetAdjusted) {\n        // check for a \"spring-forward\" transition\n        transition = nextTransition(instantAdjusted);\n        dstGap = (transition + getOffset(transition)) <= instantLocal &&\n            instantLocal < (transition + offsetAdjusted);\n    } else {\n        // check for a \"fall-back\" transition\n        transition = previousTransition(instantAdjusted);\n        dstGap = (transition + offsetLocal) <= instantLocal &&\n            instantLocal < (transition + getOffset(transition));\n    }\n    \n    if (dstGap) {\n        // we need additional inspection to know the correct offset\n        int beforeTransitionOffset = getOffset(transition - 1);\n        int afterTransitionOffset = getOffset(transition);\n        int currentOffset = (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n        \n        if (currentOffset < afterTransitionOffset || currentOffset - afterTransitionOffset >=\n                (beforeTransitionOffset - afterTransitionOffset) / 2) {\n            return (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n        } else {\n            if (offsetLocal < offsetAdjusted) {\n                return afterTransitionOffset;\n            } else {\n                // find the next \"fall-back\" transition and use its earlier offset\n                long nextTransition = nextTransition(instantAdjusted);\n                while (getOffset(nextTransition) >= afterTransitionOffset) {\n                     nextTransition = nextTransition(nextTransition);\n                }\n                return getOffset(nextTransition - 1);\n            }\n        }\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4a05662c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,48 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    long transition;\n+    boolean dstGap;\n+    \n+    if (offsetLocal < offsetAdjusted) {\n+        // check for a \"spring-forward\" transition\n+        transition = nextTransition(instantAdjusted);\n+        dstGap = (transition + getOffset(transition)) <= instantLocal &&\n+            instantLocal < (transition + offsetAdjusted);\n+    } else {\n+        // check for a \"fall-back\" transition\n+        transition = previousTransition(instantAdjusted);\n+        dstGap = (transition + offsetLocal) <= instantLocal &&\n+            instantLocal < (transition + getOffset(transition));\n+    }\n+    \n+    if (dstGap) {\n+        // we need additional inspection to know the correct offset\n+        int beforeTransitionOffset = getOffset(transition - 1);\n+        int afterTransitionOffset = getOffset(transition);\n+        int currentOffset = (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n+        \n+        if (currentOffset < afterTransitionOffset || currentOffset - afterTransitionOffset >=\n+                (beforeTransitionOffset - afterTransitionOffset) / 2) {\n+            return (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n+        } else {\n+            if (offsetLocal < offsetAdjusted) {\n+                return afterTransitionOffset;\n+            } else {\n+                // find the next \"fall-back\" transition and use its earlier offset\n+                long nextTransition = nextTransition(instantAdjusted);\n+                while (getOffset(nextTransition) >= afterTransitionOffset) {\n+                     nextTransition = nextTransition(nextTransition);\n+                }\n+                return getOffset(nextTransition - 1);\n+            }\n+        }\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}