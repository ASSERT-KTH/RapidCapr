{
    "patch": "public static double getTypedPercent(JSONObject json) {\n    try {\n        JSONArray resources = json.getJSONArray(\"resources\");\n        int total = resources.length();\n        int typed = 0;\n        for (int i = 0; i < total; i++) {\n            JSONObject resource = resources.getJSONObject(i);\n            if (resource.getString(\"type\").equals(\"typed\")) {\n                typed++;\n            }\n        }\n        return (double) typed / total * 100.0;\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e809e182 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject json) {\n+    try {\n+        JSONArray resources = json.getJSONArray(\"resources\");\n+        int total = resources.length();\n+        int typed = 0;\n+        for (int i = 0; i < total; i++) {\n+            JSONObject resource = resources.getJSONObject(i);\n+            if (resource.getString(\"type\").equals(\"typed\")) {\n+                typed++;\n+            }\n+        }\n+        return (double) typed / total * 100.0;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}