{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(notPrinter ? null : createCompositePrinter(elementPairs), notParser ? null : createCompositeParser(elementPairs));\n    } else if (size == 1) {\n        Object pair = elementPairs.get(0);\n        if (pair instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) pair, null);\n        } else if (pair instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) pair);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element pair\");\n        }\n    } else if (size == 2) {\n        Object o1 = elementPairs.get(0);\n        Object o2 = elementPairs.get(1);\n        if (o1 instanceof Separator) {\n            Separator sep = (Separator) o1;\n            PeriodFormatter f1 = toFormatter(List.of(o2), notPrinter, notParser);\n            sep = sep.finish(f1.getPrinter(), f1.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else if (o2 instanceof Separator) {\n            Separator sep = (Separator) o2;\n            PeriodFormatter f1 = toFormatter(List.of(o1), notPrinter, notParser);\n            sep = sep.finish(f1.getPrinter(), f1.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            return new PeriodFormatter(createCompositePrinter(elementPairs), createCompositeParser(elementPairs));\n        }\n    } else { // size > 2\n        Object o1 = elementPairs.get(0);\n        if (o1 instanceof Separator) {\n            Separator sep = (Separator) o1;\n            List<Object> remainingPairs = elementPairs.subList(1, size);\n            Object o2 = remainingPairs.get(0);\n            if (o2 instanceof Separator) {\n                PeriodFormatter f1 = toFormatter(remainingPairs, notPrinter, notParser);\n                sep = sep.finish(f1.getPrinter(), f1.getParser());\n                return new PeriodFormatter(sep, sep);\n            } else {\n                PeriodFormatter f1 = toFormatter(remainingPairs, notPrinter, true);\n                PeriodFormatter f2 = toFormatter(List.of(o1), true, notParser);\n                return new PeriodFormatter(f2.getPrinter(), f1.getParser());\n            }\n        } else {\n            return new PeriodFormatter(createCompositePrinter(elementPairs), createCompositeParser(elementPairs));\n        }\n    }\n}\n\nprivate static PeriodPrinter createCompositePrinter(List<Object> elementPairs) {\n    List<PeriodPrinter> printers = new ArrayList<>();\n    for (Object pair : elementPairs) {\n        if (pair instanceof PeriodPrinter) {\n            printers.add((PeriodPrinter) pair);\n        }\n    }\n    return (printer, locale) -> {\n        for (PeriodPrinter p : printers) {\n            printer.print(p, locale);\n        }\n    };\n}\n\nprivate static PeriodParser createCompositeParser(List<Object> elementPairs) {\n    List<PeriodParser> parsers = new ArrayList<>();\n    for (Object pair : elementPairs) {\n        if (pair instanceof PeriodParser) {\n            parsers.add((PeriodParser) pair);\n        }\n    }\n    return (periodStr, position, sign) -> {\n        for (PeriodParser p : parsers) {\n            p.parseInto(periodStr, position, sign);\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..6d3d92f1 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,86 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(notPrinter ? null : createCompositePrinter(elementPairs), notParser ? null : createCompositeParser(elementPairs));\n+    } else if (size == 1) {\n+        Object pair = elementPairs.get(0);\n+        if (pair instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) pair, null);\n+        } else if (pair instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) pair);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid element pair\");\n+        }\n+    } else if (size == 2) {\n+        Object o1 = elementPairs.get(0);\n+        Object o2 = elementPairs.get(1);\n+        if (o1 instanceof Separator) {\n+            Separator sep = (Separator) o1;\n+            PeriodFormatter f1 = toFormatter(List.of(o2), notPrinter, notParser);\n+            sep = sep.finish(f1.getPrinter(), f1.getParser());\n+            return new PeriodFormatter(sep, sep);\n+        } else if (o2 instanceof Separator) {\n+            Separator sep = (Separator) o2;\n+            PeriodFormatter f1 = toFormatter(List.of(o1), notPrinter, notParser);\n+            sep = sep.finish(f1.getPrinter(), f1.getParser());\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            return new PeriodFormatter(createCompositePrinter(elementPairs), createCompositeParser(elementPairs));\n+        }\n+    } else { // size > 2\n+        Object o1 = elementPairs.get(0);\n+        if (o1 instanceof Separator) {\n+            Separator sep = (Separator) o1;\n+            List<Object> remainingPairs = elementPairs.subList(1, size);\n+            Object o2 = remainingPairs.get(0);\n+            if (o2 instanceof Separator) {\n+                PeriodFormatter f1 = toFormatter(remainingPairs, notPrinter, notParser);\n+                sep = sep.finish(f1.getPrinter(), f1.getParser());\n                 return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                PeriodFormatter f1 = toFormatter(remainingPairs, notPrinter, true);\n+                PeriodFormatter f2 = toFormatter(List.of(o1), true, notParser);\n+                return new PeriodFormatter(f2.getPrinter(), f1.getParser());\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter(createCompositePrinter(elementPairs), createCompositeParser(elementPairs));\n         }\n     }\n+}\n+\n+private static PeriodPrinter createCompositePrinter(List<Object> elementPairs) {\n+    List<PeriodPrinter> printers = new ArrayList<>();\n+    for (Object pair : elementPairs) {\n+        if (pair instanceof PeriodPrinter) {\n+            printers.add((PeriodPrinter) pair);\n+        }\n+    }\n+    return (printer, locale) -> {\n+        for (PeriodPrinter p : printers) {\n+            printer.print(p, locale);\n+        }\n+    };\n+}\n+\n+private static PeriodParser createCompositeParser(List<Object> elementPairs) {\n+    List<PeriodParser> parsers = new ArrayList<>();\n+    for (Object pair : elementPairs) {\n+        if (pair instanceof PeriodParser) {\n+            parsers.add((PeriodParser) pair);\n+        }\n+    }\n+    return (periodStr, position, sign) -> {\n+        for (PeriodParser p : parsers) {\n+            p.parseInto(periodStr, position, sign);\n+        }\n+    };\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}