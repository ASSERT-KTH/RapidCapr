{
    "patch": "public class ZeroVectorException extends Exception {\n    public ZeroVectorException() {\n        super();\n    }\n    public Vector3D calculateDirection(Vector3D p1, Vector3D p2) {\n        double x = p2.getX() - p1.getX();\n        double y = p2.getY() - p1.getY();\n        double z = p2.getZ() - p1.getZ();\n        Vector3D direction = new Vector3D(x, y, z);\n        if (direction.equals(Vector3D.ZERO)) {\n            direction = new Vector3D(1, 1, 0);\n        }\n        return direction;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..34f804d61 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,21 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public class ZeroVectorException extends Exception {\n+    public ZeroVectorException() {\n+        super();\n+    }\n+    public Vector3D calculateDirection(Vector3D p1, Vector3D p2) {\n+        double x = p2.getX() - p1.getX();\n+        double y = p2.getY() - p1.getY();\n+        double z = p2.getZ() - p1.getZ();\n+        Vector3D direction = new Vector3D(x, y, z);\n+        if (direction.equals(Vector3D.ZERO)) {\n+            direction = new Vector3D(1, 1, 0);\n+        }\n+        return direction;\n     }\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}