{
    "patch": "        int count = 0;\n        for (Reference ref : references) {\n          if (ref.isAssignmentToName() && !ref.isCompoundAssignment() &&\n              ref.getNode().getIntroducedVariable() == this) {\n            count++;\n            if (count > 1) {\n              return false;\n            }\n          }\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..972c0884 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        int count = 0;\n+        for (Reference ref : references) {\n+          if (ref.isAssignmentToName() && !ref.isCompoundAssignment() &&\n+              ref.getNode().getIntroducedVariable() == this) {\n+            count++;\n+            if (count > 1) {\n+              return false;\n+            }\n+          }\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}