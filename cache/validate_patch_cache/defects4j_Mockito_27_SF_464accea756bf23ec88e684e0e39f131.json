{
    "patch": "import org.mockito.cglib.proxy.Callback;\nimport org.mockito.cglib.proxy.Enhancer;\n\n@SuppressWarnings(\"unchecked\")\npublic <T> void resetMock(T mock) {\n    Enhancer enhancer = new Enhancer();\n    enhancer.setSuperclass(mock.getClass());\n    enhancer.setCallbackType(MockHandlerInterface.class);\n    Class<?> mockClass = enhancer.createClass();\n    MockHandler<T> newMockHandler = new MockHandler<>(getMockHandler(mock));\n    MockHandlerInterface<T> newFilter = new MethodInterceptorFilter<>(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    Object newMock = enhancer.create(new Class[] {MockitoMock.class, Factory.class}, new Object[] {new MockitoMock<>(), newFilter});\n    ((MockitoMock<T>) mock).setMockInstance(newMock);\n    ((Factory) mock).setCallback(0, (Callback) newFilter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..31b105544 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Callback;\n+import org.mockito.cglib.proxy.Enhancer;\n+\n+@SuppressWarnings(\"unchecked\")\n+public <T> void resetMock(T mock) {\n+    Enhancer enhancer = new Enhancer();\n+    enhancer.setSuperclass(mock.getClass());\n+    enhancer.setCallbackType(MockHandlerInterface.class);\n+    Class<?> mockClass = enhancer.createClass();\n+    MockHandler<T> newMockHandler = new MockHandler<>(getMockHandler(mock));\n+    MockHandlerInterface<T> newFilter = new MethodInterceptorFilter<>(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    Object newMock = enhancer.create(new Class[] {MockitoMock.class, Factory.class}, new Object[] {new MockitoMock<>(), newFilter});\n+    ((MockitoMock<T>) mock).setMockInstance(newMock);\n+    ((Factory) mock).setCallback(0, (Callback) newFilter);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}