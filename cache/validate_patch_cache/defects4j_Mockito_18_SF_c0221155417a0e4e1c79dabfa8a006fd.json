{
    "patch": "public static boolean isPalindrome(String s) {\n    if (s == null) {\n        return true;\n    }\n    s = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n    int length = s.length();\n    for (int i = 0; i < length / 2; i++) {\n        if (s.charAt(i) != s.charAt(length - 1 - i)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..ec65c3c9e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static boolean isPalindrome(String s) {\n+    if (s == null) {\n+        return true;\n+    }\n+    s = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n+    int length = s.length();\n+    for (int i = 0; i < length / 2; i++) {\n+        if (s.charAt(i) != s.charAt(length - 1 - i)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}