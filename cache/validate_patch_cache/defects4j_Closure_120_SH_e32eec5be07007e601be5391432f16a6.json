{
    "patch": "          int countAssignments = 0;\n          List<BasicBlock> visitedBlocks = new ArrayList<>();\n          visitedBlocks.add(ref.getBasicBlock());\n\n          for (int i = references.indexOf(ref); i < references.size(); i++) {\n            Reference ref2 = references.get(i);\n            if (ref2.isAssignmentToName()) {\n              if (++countAssignments > 1) {\n                return false;\n              }\n\n              for (BasicBlock block2 = ref2.getBasicBlock(); block2 != null;\n                   block2 = block2.getParent()) {\n                if (visitedBlocks.contains(block2)) {\n                  return false;\n                }\n                visitedBlocks.add(block2);\n\n                if (ref.getBasicBlock() == block2) {\n                  break;\n                }\n              }\n            }\n          }\n          return true;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..775ecb3c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,37 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          int countAssignments = 0;\n+          List<BasicBlock> visitedBlocks = new ArrayList<>();\n+          visitedBlocks.add(ref.getBasicBlock());\n+\n+          for (int i = references.indexOf(ref); i < references.size(); i++) {\n+            Reference ref2 = references.get(i);\n+            if (ref2.isAssignmentToName()) {\n+              if (++countAssignments > 1) {\n+                return false;\n+              }\n+\n+              for (BasicBlock block2 = ref2.getBasicBlock(); block2 != null;\n+                   block2 = block2.getParent()) {\n+                if (visitedBlocks.contains(block2)) {\n+                  return false;\n+                }\n+                visitedBlocks.add(block2);\n+\n+                if (ref.getBasicBlock() == block2) {\n+                  break;\n+                }\n+              }\n+            }\n+          }\n+          return true;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}