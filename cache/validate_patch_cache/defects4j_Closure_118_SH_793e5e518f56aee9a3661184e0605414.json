{
    "patch": "String name = child.getString();\nNode valueNode = child.getFirstChild();\nT type = typeSystem.getType(getScope(), valueNode);\nif (!valueNode.isNumber()) {\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(\n          valueNode, processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n} else {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(\n        t.getSourceName(), child, propertiesToErrorFor.get(name),\n        Warnings.INVALIDATION, name, \"number\", n.toString(), \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..86e59da9 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,29 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+String name = child.getString();\n+Node valueNode = child.getFirstChild();\n+T type = typeSystem.getType(getScope(), valueNode);\n+if (!valueNode.isNumber()) {\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(\n+          valueNode, processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+} else {\n+  if (propertiesToErrorFor.containsKey(name)) {\n+    compiler.report(JSError.make(\n+        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+        Warnings.INVALIDATION, name, \"number\", n.toString(), \"\"));\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: method getType in interface TypeSystem<T#2> cannot be applied to given types;",
    "test_result": "ERROR"
}