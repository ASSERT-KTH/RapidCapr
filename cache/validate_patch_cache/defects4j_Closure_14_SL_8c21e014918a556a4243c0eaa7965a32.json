{
    "patch": "if (cfa != null && finallyNode != null) {\n    Node followNode = finallyNode.getFirstChild();\n    while (followNode.getNext() != null && followNode.getNext().isLabel()) {\n        followNode = followNode.getNext().getFirstChild();\n    }\n    if (followNode.getNext() != null && !followNode.getNext().isBlock()) {\n        followNode = followNode.getNext();\n    }\n    if (followNode != null && followNode != finallyNode) {\n        cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n        return;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..613b1ba2 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null) {\n+    Node followNode = finallyNode.getFirstChild();\n+    while (followNode.getNext() != null && followNode.getNext().isLabel()) {\n+        followNode = followNode.getNext().getFirstChild();\n+    }\n+    if (followNode.getNext() != null && !followNode.getNext().isBlock()) {\n+        followNode = followNode.getNext();\n+    }\n+    if (followNode != null && followNode != finallyNode) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+        return;\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: missing return value",
    "test_result": "ERROR"
}