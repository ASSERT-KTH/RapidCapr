{
    "patch": "          && n.getNext().getType() == Token.GETPROP) {\n        boolean isChainedProperty = Nodes.isChainedProperty(n);\n\n        if (isChainedProperty) {\n          Node child = NodeUtil.getBestLValue(n.getFirstChild().getNext());\n\n          if (Nodes.isPrototypeProperty(child)) {\n            return true;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..8da6e901 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,16 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getNext().getType() == Token.GETPROP) {\n+        boolean isChainedProperty = Nodes.isChainedProperty(n);\n+\n+        if (isChainedProperty) {\n+          Node child = NodeUtil.getBestLValue(n.getFirstChild().getNext());\n+\n+          if (Nodes.isPrototypeProperty(child)) {\n+            return true;\n+          }\n+        }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}