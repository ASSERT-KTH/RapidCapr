{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        DateTimeZone zone = DateTimeZone.UTC;\n        int year = iDefaultYear;\n        int month = 1;\n        int day = 1;\n        boolean yearChanged = false;\n        boolean monthChanged = false;\n        boolean dayChanged = false;\n        for (int i = 0; i < count; i++) {\n            // set fields in order largest to smallest\n            DurationField field = savedFields[i].iField.getDurationField();\n            int value = savedFields[i].iValue;\n\n            if (field == DateTimeFieldType.year().getField(iChrono)) {\n                yearChanged = setParsedField(DateTimeFieldType.year(), year, value);\n                if (yearChanged) {\n                    year = value;\n                }\n            } else if (field == DateTimeFieldType.weekyear().getField(iChrono)) {\n                yearChanged = setParsedField(DateTimeFieldType.weekyear(), year, value);\n                if (yearChanged) {\n                    year = value;\n                }\n            } else if (field == DateTimeFieldType.monthOfYear().getField(iChrono)) {\n                monthChanged = setParsedField(DateTimeFieldType.monthOfYear(), month, value);\n                if (monthChanged) {\n                    month = value;\n                }\n            } else if (field == DateTimeFieldType.weekOfWeekyear().getField(iChrono)) {\n                long firstDayMillis = zone.convertLocalToUTC(\n                        year, month, day, 0);\n                long firstDayOfWeekMillis =\n                        ISOChronology.getInstanceUTC().weekOfWeekyear().roundFloor(firstDayMillis);\n                long millisSinceFirstDayOfWeek =\n                        (ISOChronology.getInstanceUTC().millisOfDay().get(firstDayMillis) +\n                                (value - 1) * (long) DateTimeConstants.MILLIS_PER_WEEK);\n                long parsedMillis = firstDayOfWeekMillis + millisSinceFirstDayOfWeek;\n                Chronology parsedChrono = (iChrono != null ? iChrono : ISOChronology.getInstanceUTC());\n                millis = parsedChrono.millisOfDay().set(parsedMillis, millis);\n            } else {\n                if (field == DateTimeFieldType.dayOfYear().getField(iChrono)) {\n                    monthChanged = setParsedField(DateTimeFieldType.monthOfYear(), month, 1);\n                    if (monthChanged) {\n                        month = 1;\n                    }\n                    dayChanged = setParsedField(DateTimeFieldType.dayOfMonth(), day, value);\n                    if (dayChanged) {\n                        day = value;\n                    }\n                } else if (field == DateTimeFieldType.dayOfMonth().getField(iChrono)) {\n                    dayChanged = setParsedField(DateTimeFieldType.dayOfMonth(), day, value);\n                    if (dayChanged) {\n                        day = value;\n                    }\n                } else if (field == DateTimeFieldType.dayOfWeek().getField(iChrono)) {\n                    monthChanged = setParsedField(DateTimeFieldType.monthOfYear(), month, 1);\n                    if (monthChanged) {\n                        month = 1;\n                    }\n                    int firstDiff = value - zone.getOffset(0L);\n                    long startOfDayUTC = zone.convertLocalToUTC(\n                            year, month, day, 0) + firstDiff;\n                    int newDayOfWeek = ISOChronology.getInstanceUTC().dayOfWeek().get(startOfDayUTC);\n                    dayChanged = setParsedField(DateTimeFieldType.dayOfWeek(), day, newDayOfWeek);\n                    if (dayChanged) {\n                        day = newDayOfWeek;\n                    }\n                } else if (field instanceof ImpreciseDateTimeField) {\n                    long guess = field.add(millis, value);\n                    if (guess != millis) {\n                        if (resetFields) {\n                            // reset all fields and try again\n                            return computeMillis(true, text);\n                        } else {\n                            if (text != null) {\n                                throw new IllegalFieldValueException(\n                                        \"Cannot parse \\\"\" + text + \"\\\", field is too imprecise [\" +\n                                                savedFields[i].iField.getName() + ']');\n                            }\n                            throw new IllegalFieldValueException(\n                                    \"Field \" + savedFields[i].iField.getName() + \" is too imprecise\");\n                        }\n                    }\n                } else {\n                    millis = field.set(millis, value);\n                }\n            }\n        }\n\n        if (yearChanged | monthChanged | dayChanged) {\n            millis = getChronology().year().set(millis, year);\n            millis = getChronology().monthOfYear().set(millis, month);\n            millis = getChronology().dayOfMonth().set(millis, day);\n            // validate leap day and year\n            if (month == 2 && day == 29) {\n                if (!getChronology().isLeapYear(getChronology().year().get(millis))) {\n                    if (resetFields) {\n                        // reset all fields and try again\n                        return computeMillis(true, text);\n                    } else {\n                        throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\", invalid leap year\");\n                    }\n                }\n            }\n        }\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6a68014c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,137 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        DateTimeZone zone = DateTimeZone.UTC;\n+        int year = iDefaultYear;\n+        int month = 1;\n+        int day = 1;\n+        boolean yearChanged = false;\n+        boolean monthChanged = false;\n+        boolean dayChanged = false;\n+        for (int i = 0; i < count; i++) {\n+            // set fields in order largest to smallest\n+            DurationField field = savedFields[i].iField.getDurationField();\n+            int value = savedFields[i].iValue;\n+\n+            if (field == DateTimeFieldType.year().getField(iChrono)) {\n+                yearChanged = setParsedField(DateTimeFieldType.year(), year, value);\n+                if (yearChanged) {\n+                    year = value;\n+                }\n+            } else if (field == DateTimeFieldType.weekyear().getField(iChrono)) {\n+                yearChanged = setParsedField(DateTimeFieldType.weekyear(), year, value);\n+                if (yearChanged) {\n+                    year = value;\n+                }\n+            } else if (field == DateTimeFieldType.monthOfYear().getField(iChrono)) {\n+                monthChanged = setParsedField(DateTimeFieldType.monthOfYear(), month, value);\n+                if (monthChanged) {\n+                    month = value;\n+                }\n+            } else if (field == DateTimeFieldType.weekOfWeekyear().getField(iChrono)) {\n+                long firstDayMillis = zone.convertLocalToUTC(\n+                        year, month, day, 0);\n+                long firstDayOfWeekMillis =\n+                        ISOChronology.getInstanceUTC().weekOfWeekyear().roundFloor(firstDayMillis);\n+                long millisSinceFirstDayOfWeek =\n+                        (ISOChronology.getInstanceUTC().millisOfDay().get(firstDayMillis) +\n+                                (value - 1) * (long) DateTimeConstants.MILLIS_PER_WEEK);\n+                long parsedMillis = firstDayOfWeekMillis + millisSinceFirstDayOfWeek;\n+                Chronology parsedChrono = (iChrono != null ? iChrono : ISOChronology.getInstanceUTC());\n+                millis = parsedChrono.millisOfDay().set(parsedMillis, millis);\n+            } else {\n+                if (field == DateTimeFieldType.dayOfYear().getField(iChrono)) {\n+                    monthChanged = setParsedField(DateTimeFieldType.monthOfYear(), month, 1);\n+                    if (monthChanged) {\n+                        month = 1;\n+                    }\n+                    dayChanged = setParsedField(DateTimeFieldType.dayOfMonth(), day, value);\n+                    if (dayChanged) {\n+                        day = value;\n+                    }\n+                } else if (field == DateTimeFieldType.dayOfMonth().getField(iChrono)) {\n+                    dayChanged = setParsedField(DateTimeFieldType.dayOfMonth(), day, value);\n+                    if (dayChanged) {\n+                        day = value;\n+                    }\n+                } else if (field == DateTimeFieldType.dayOfWeek().getField(iChrono)) {\n+                    monthChanged = setParsedField(DateTimeFieldType.monthOfYear(), month, 1);\n+                    if (monthChanged) {\n+                        month = 1;\n+                    }\n+                    int firstDiff = value - zone.getOffset(0L);\n+                    long startOfDayUTC = zone.convertLocalToUTC(\n+                            year, month, day, 0) + firstDiff;\n+                    int newDayOfWeek = ISOChronology.getInstanceUTC().dayOfWeek().get(startOfDayUTC);\n+                    dayChanged = setParsedField(DateTimeFieldType.dayOfWeek(), day, newDayOfWeek);\n+                    if (dayChanged) {\n+                        day = newDayOfWeek;\n+                    }\n+                } else if (field instanceof ImpreciseDateTimeField) {\n+                    long guess = field.add(millis, value);\n+                    if (guess != millis) {\n+                        if (resetFields) {\n+                            // reset all fields and try again\n+                            return computeMillis(true, text);\n+                        } else {\n+                            if (text != null) {\n+                                throw new IllegalFieldValueException(\n+                                        \"Cannot parse \\\"\" + text + \"\\\", field is too imprecise [\" +\n+                                                savedFields[i].iField.getName() + ']');\n+                            }\n+                            throw new IllegalFieldValueException(\n+                                    \"Field \" + savedFields[i].iField.getName() + \" is too imprecise\");\n+                        }\n+                    }\n+                } else {\n+                    millis = field.set(millis, value);\n+                }\n             }\n         }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        if (yearChanged | monthChanged | dayChanged) {\n+            millis = getChronology().year().set(millis, year);\n+            millis = getChronology().monthOfYear().set(millis, month);\n+            millis = getChronology().dayOfMonth().set(millis, day);\n+            // validate leap day and year\n+            if (month == 2 && day == 29) {\n+                if (!getChronology().isLeapYear(getChronology().year().get(millis))) {\n+                    if (resetFields) {\n+                        // reset all fields and try again\n+                        return computeMillis(true, text);\n+                    } else {\n+                        throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\", invalid leap year\");\n+                    }\n+                }\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: incomparable types: DurationField and DateTimeField",
    "test_result": "ERROR"
}