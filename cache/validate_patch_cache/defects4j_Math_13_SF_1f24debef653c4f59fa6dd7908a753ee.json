{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double trace = m.getTrace();\n    final int n = m.getRowDimension();\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n\n    if (trace == 0.0) {\n        return identity.scalarMultiply(0.0);\n    } else if (n == 1) {\n        final double[] data = new double[] { FastMath.sqrt(trace) };\n        return MatrixUtils.createRowRealMatrix(data);\n    } else if (trace < 0.0) {\n        throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2e92c967b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double trace = m.getTrace();\n+    final int n = m.getRowDimension();\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+\n+    if (trace == 0.0) {\n+        return identity.scalarMultiply(0.0);\n+    } else if (n == 1) {\n+        final double[] data = new double[] { FastMath.sqrt(trace) };\n+        return MatrixUtils.createRowRealMatrix(data);\n+    } else if (trace < 0.0) {\n+        throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}