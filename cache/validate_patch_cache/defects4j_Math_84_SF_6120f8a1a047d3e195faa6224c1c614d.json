{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n\n        while (numIterations < maxIterations) {\n\n            incrementIterationsCounter();\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n\n            // compute the centroid\n            final RealPointValuePair centroid = computeCentroid(original, comparator);\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, alpha, centroid, comparator);\n            if (comparator.compare(reflected, original[0]) < 0) {\n\n                // perform an expansion step\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, centroid, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = replaceWorstPoint(original, expanded, comparator);\n                } else {\n                    simplex = replaceWorstPoint(original, reflected, comparator);\n                }\n\n            } else {\n                // reflection did not improve the simplex\n                if (comparator.compare(reflected, original[worst]) < 0) {\n                    simplex = replaceWorstPoint(original, reflected, comparator);\n                }\n\n                // perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, centroid, comparator);\n                if (comparator.compare(contracted, original[worst]) < 0) {\n                    simplex = replaceWorstPoint(original, contracted, comparator);\n                } else {\n                    // perform a shrink step\n                    shrinkSimplex(original, comparator);\n                }\n\n            }\n\n            if (isConverged()) {\n                return;\n            }\n\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a799dc93f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -61,41 +61,57 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n+\n+        while (numIterations < maxIterations) {\n \n             incrementIterationsCounter();\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+\n+            // compute the centroid\n+            final RealPointValuePair centroid = computeCentroid(original, comparator);\n \n             // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            final RealPointValuePair reflected = evaluateNewSimplex(original, alpha, centroid, comparator);\n+            if (comparator.compare(reflected, original[0]) < 0) {\n+\n+                // perform an expansion step\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, centroid, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = replaceWorstPoint(original, expanded, comparator);\n+                } else {\n+                    simplex = replaceWorstPoint(original, reflected, comparator);\n                 }\n \n-                return;\n+            } else {\n+                // reflection did not improve the simplex\n+                if (comparator.compare(reflected, original[worst]) < 0) {\n+                    simplex = replaceWorstPoint(original, reflected, comparator);\n+                }\n \n-            }\n+                // perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, centroid, comparator);\n+                if (comparator.compare(contracted, original[worst]) < 0) {\n+                    simplex = replaceWorstPoint(original, contracted, comparator);\n+                } else {\n+                    // perform a shrink step\n+                    shrinkSimplex(original, comparator);\n+                }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n-            // check convergence\n+            if (isConverged()) {\n                 return;\n             }\n \n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n+\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}