{
    "patch": "public class BugFix {\n\n    public static String fixBug(String input) {\n        String[] lines = input.split(\"\\n\");\n        StringBuilder output = new StringBuilder();\n\n        for (String line : lines) {\n            if (line.contains(\"for\")) {\n                int start = line.indexOf(\"(\");\n                int end = line.lastIndexOf(\")\");\n                String[] tokens = line.substring(start + 1, end).split(\";\");\n\n                for (int i = 0; i < tokens.length; i++) {\n                    if (tokens[i].contains(\"in\")) {\n                        String[] parts = tokens[i].split(\"\\\\s+\");\n                        parts[0] = \"(\" + parts[0] + \")\";\n                        tokens[i] = String.join(\" \", parts);\n                    }\n                }\n\n                String fixedLine = line.substring(0, start + 1) + String.join(\";\", tokens) + line.substring(end, line.length());\n                output.append(fixedLine).append(\"\\n\");\n            } else {\n                output.append(line).append(\"\\n\");\n            }\n        }\n\n        return output.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..dd57bd6d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,36 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public class BugFix {\n+\n+    public static String fixBug(String input) {\n+        String[] lines = input.split(\"\\n\");\n+        StringBuilder output = new StringBuilder();\n+\n+        for (String line : lines) {\n+            if (line.contains(\"for\")) {\n+                int start = line.indexOf(\"(\");\n+                int end = line.lastIndexOf(\")\");\n+                String[] tokens = line.substring(start + 1, end).split(\";\");\n+\n+                for (int i = 0; i < tokens.length; i++) {\n+                    if (tokens[i].contains(\"in\")) {\n+                        String[] parts = tokens[i].split(\"\\\\s+\");\n+                        parts[0] = \"(\" + parts[0] + \")\";\n+                        tokens[i] = String.join(\" \", parts);\n+                    }\n+                }\n+\n+                String fixedLine = line.substring(0, start + 1) + String.join(\";\", tokens) + line.substring(end, line.length());\n+                output.append(fixedLine).append(\"\\n\");\n+            } else {\n+                output.append(line).append(\"\\n\");\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}