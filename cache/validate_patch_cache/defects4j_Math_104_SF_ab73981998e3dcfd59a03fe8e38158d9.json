{
    "patch": "public static double regularizedGammaP(double a, double x){\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid input arguments for regularizedGammaP function.\");\n    }\n    double gamma = gamma(a);\n    double gser = gser(a, x);\n    double gcf = gcf(a, x);\n    double result = 0;\n    if (x < (a + 1)) {\n        result = gser;\n    } else {\n        result = 1 - gcf;\n    }\n    return result;\n}\n\npublic static double gamma(double x) {\n    double gamma = 1;\n    double y = x;\n    double cof[] = {\n            76.18009172947146, -86.50532032941677,\n            24.01409824083091, -1.231739572450155,\n            0.001208650973866179, -0.000005395239384953\n    };\n    double d = 1.000000000190015;\n    for (int i = 0; i < 6; ++i) {\n        y++;\n        d += cof[i] / y;\n    }\n    double ser = 1.000000000190015 + cof[0] / (x + 1.0);\n    double tmp = 1.000000000858991;\n    for (int i = 1; i < 6; ++i) {\n        tmp *= x + i;\n        ser += cof[i] / tmp;\n    }\n    gamma = ser/x*Math.exp(-x+Math.log(d)) * Math.sqrt(2.0 * Math.PI);\n    return gamma;\n}\n\npublic static double gser(double a, double x) {\n    double gln = gamln(a);\n    double ap = a;\n    double sum = 1 / a;\n    double del = sum;\n    for (int n = 1; n <= 100; ++n) {\n        ++ap;\n        del *= x / ap;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * RELATIVE_ERROR_TOLERANCE) {\n            return sum * Math.exp(-x + a * Math.log(x) - gln);\n        }\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - gln);\n}\n\npublic static double gcf(double a, double x) {\n    double gln = gamln(a);\n    double b = x + 1 - a;\n    double c = 1 / FPMIN;\n    double d = 1 / b;\n    double h = d;\n    double an, del;\n    for (int i = 1; i <= 100; ++i) {\n        an = -i * (i - a);\n        b += 2;\n        d = an * d + b;\n        if (Math.abs(d) < FPMIN) {\n            d = FPMIN;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < FPMIN) {\n            c = FPMIN;\n        }\n        d = 1 / d;\n        del = d * c;\n        h *= del;\n        if (Math.abs(del - 1) < RELATIVE_ERROR_TOLERANCE) {\n            return Math.exp(-x + a * Math.log(x) - gln) * h;\n        }\n    }\n    return Math.exp(-x + a * Math.log(x) - gln) * h;\n}\n\npublic static double gamln(double x) {\n    double[] cof = {\n            76.18009172947146, -86.50532032941677,\n            24.01409824083091, -1.231739572450155,\n            0.001208650973866179, -0.000005395239384953\n    };\n    double ser = 1.000000000190015 + cof[0] / (x + 1.);\n    double tmp = 1.000000000858991;\n    for (int i = 1; i < 6; i++) {\n        tmp *= x + i;\n        ser += cof[i] / (x + i);\n    }\n    double result = (x + 0.5) * Math.log((x + 5.5)) - (x + 5.5) + Math.log(ser * 2.5066282746310007 / x);\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c203c9277 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,104 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x){\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments for regularizedGammaP function.\");\n+    }\n+    double gamma = gamma(a);\n+    double gser = gser(a, x);\n+    double gcf = gcf(a, x);\n+    double result = 0;\n+    if (x < (a + 1)) {\n+        result = gser;\n+    } else {\n+        result = 1 - gcf;\n+    }\n+    return result;\n+}\n+\n+public static double gamma(double x) {\n+    double gamma = 1;\n+    double y = x;\n+    double cof[] = {\n+            76.18009172947146, -86.50532032941677,\n+            24.01409824083091, -1.231739572450155,\n+            0.001208650973866179, -0.000005395239384953\n+    };\n+    double d = 1.000000000190015;\n+    for (int i = 0; i < 6; ++i) {\n+        y++;\n+        d += cof[i] / y;\n+    }\n+    double ser = 1.000000000190015 + cof[0] / (x + 1.0);\n+    double tmp = 1.000000000858991;\n+    for (int i = 1; i < 6; ++i) {\n+        tmp *= x + i;\n+        ser += cof[i] / tmp;\n+    }\n+    gamma = ser/x*Math.exp(-x+Math.log(d)) * Math.sqrt(2.0 * Math.PI);\n+    return gamma;\n+}\n+\n+public static double gser(double a, double x) {\n+    double gln = gamln(a);\n+    double ap = a;\n+    double sum = 1 / a;\n+    double del = sum;\n+    for (int n = 1; n <= 100; ++n) {\n+        ++ap;\n+        del *= x / ap;\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * RELATIVE_ERROR_TOLERANCE) {\n+            return sum * Math.exp(-x + a * Math.log(x) - gln);\n+        }\n+    }\n+    return sum * Math.exp(-x + a * Math.log(x) - gln);\n+}\n+\n+public static double gcf(double a, double x) {\n+    double gln = gamln(a);\n+    double b = x + 1 - a;\n+    double c = 1 / FPMIN;\n+    double d = 1 / b;\n+    double h = d;\n+    double an, del;\n+    for (int i = 1; i <= 100; ++i) {\n+        an = -i * (i - a);\n+        b += 2;\n+        d = an * d + b;\n+        if (Math.abs(d) < FPMIN) {\n+            d = FPMIN;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < FPMIN) {\n+            c = FPMIN;\n+        }\n+        d = 1 / d;\n+        del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1) < RELATIVE_ERROR_TOLERANCE) {\n+            return Math.exp(-x + a * Math.log(x) - gln) * h;\n+        }\n+    }\n+    return Math.exp(-x + a * Math.log(x) - gln) * h;\n+}\n+\n+public static double gamln(double x) {\n+    double[] cof = {\n+            76.18009172947146, -86.50532032941677,\n+            24.01409824083091, -1.231739572450155,\n+            0.001208650973866179, -0.000005395239384953\n+    };\n+    double ser = 1.000000000190015 + cof[0] / (x + 1.);\n+    double tmp = 1.000000000858991;\n+    for (int i = 1; i < 6; i++) {\n+        tmp *= x + i;\n+        ser += cof[i] / (x + i);\n+    }\n+    double result = (x + 0.5) * Math.log((x + 5.5)) - (x + 5.5) + Math.log(ser * 2.5066282746310007 / x);\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}