{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && name.getInlineableProps().size() == 0) {\n        // {@code name} meets condition (a).\n        if (inlineSimpleFunctionIfPossible(name)) {\n          workList.addAll(name.getRefs());\n        }\n      } else if (name.type == Name.Type.STRING &&\n          name.aliasingGets == 0 &&\n          name.getInlineableProps().size() == 0) {\n        // Don't inline string literals, as they might be used to do\n        // non-trivial computations via the \"+\"/\"[]\" operators.\n      } else if (name.type == Name.Type.OBJECTLIT &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            // Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n        // check if this inlining has made all of {@code name}'s\n        // children meet condition (a), so they can be added to the worklist.\n        if (name.aliasingGets == 0 && name.getInlineableProps().size() > 0) {\n          workList.addAll(name.getInlineableProps());\n        }\n      } else if ((name.type == Name.Type.OBJECTLIT ||\n                   name.type == Name.Type.FUNCTION) &&\n                  name.aliasingGets == 0 && name.getInlineableProps().size() > 0) {\n        // All of {@code name}'s properties meet condition (a), so inline them.\n        inlineObjectLiteralPropsIfPossible(name, namespace);\n        workList.addAll(name.getRefs());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..b1f8f3cd 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,42 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && name.getInlineableProps().size() == 0) {\n+        // {@code name} meets condition (a).\n+        if (inlineSimpleFunctionIfPossible(name)) {\n+          workList.addAll(name.getRefs());\n+        }\n+      } else if (name.type == Name.Type.STRING &&\n+          name.aliasingGets == 0 &&\n+          name.getInlineableProps().size() == 0) {\n+        // Don't inline string literals, as they might be used to do\n+        // non-trivial computations via the \"+\"/\"[]\" operators.\n+      } else if (name.type == Name.Type.OBJECTLIT &&\n+          name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        // Find all of its local aliases and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            // {@code name} meets condition (c).\n+            // Try to inline it.\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+        // check if this inlining has made all of {@code name}'s\n+        // children meet condition (a), so they can be added to the worklist.\n+        if (name.aliasingGets == 0 && name.getInlineableProps().size() > 0) {\n+          workList.addAll(name.getInlineableProps());\n+        }\n+      } else if ((name.type == Name.Type.OBJECTLIT ||\n+                   name.type == Name.Type.FUNCTION) &&\n+                  name.aliasingGets == 0 && name.getInlineableProps().size() > 0) {\n+        // All of {@code name}'s properties meet condition (a), so inline them.\n+        inlineObjectLiteralPropsIfPossible(name, namespace);\n+        workList.addAll(name.getRefs());\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}