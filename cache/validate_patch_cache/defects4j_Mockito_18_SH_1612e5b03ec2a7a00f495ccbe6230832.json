{
    "patch": "public Object execute(ExecutionContext ctx) throws Exception {\n    Object first = inputs.get(0).getValue(ctx);\n    if (first == null) {\n        return null;\n    }\n\n    Iterator<?> iterator = null;\n    if (first instanceof Iterable) {\n        iterator = ((Iterable<?>) first).iterator();\n    } else if (first instanceof Object[]) {\n        iterator = Arrays.asList((Object[]) first).iterator();\n    } else {\n        throw new Exception(\"Input must be an iterable or an array.\");\n    }\n\n    while (iterator.hasNext()) {\n        Object curr = iterator.next();\n        if (curr == null) {\n            continue;\n        }\n\n        Class<?> currClass = curr.getClass();\n        if (!counters.containsKey(currClass)) {\n            counters.put(currClass, 0);\n        }\n\n        int count = counters.get(currClass);\n        counters.put(currClass, count + 1);\n    }\n\n    return counters;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}