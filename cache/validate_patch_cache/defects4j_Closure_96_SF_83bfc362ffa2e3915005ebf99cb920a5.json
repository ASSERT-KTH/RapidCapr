{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    // Check for wrong number of arguments\n    if (numArgs < minArgs || numArgs > maxArgs) {\n        String message = \"\";\n        if (minArgs == maxArgs) {\n            message = \"Expected \" + minArgs + \" argument(s)\";\n        } else if (maxArgs == Integer.MAX_VALUE) {\n            message = \"Expected at least \" + minArgs + \" argument(s)\";\n        } else {\n            message = \"Expected between \" + minArgs + \" and \" + maxArgs + \" argument(s)\";\n        }\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), message, \"\");\n        return;\n    }\n\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    while (parameters.hasNext()) {\n        Node parameter = parameters.next();\n        Node argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    // check for varargs\n    if (functionType.hasRestFormals()) {\n        Node parameter = parameters.next();\n        while (arguments.hasNext()) {\n            Node argument = arguments.next();\n            ordinal++;\n\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..75ac59f0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,52 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    int numArgs = call.getChildCount() - 1;\n+    int minArgs = functionType.getMinArguments();\n+    int maxArgs = functionType.getMaxArguments();\n+\n+    // Check for wrong number of arguments\n+    if (numArgs < minArgs || numArgs > maxArgs) {\n+        String message = \"\";\n+        if (minArgs == maxArgs) {\n+            message = \"Expected \" + minArgs + \" argument(s)\";\n+        } else if (maxArgs == Integer.MAX_VALUE) {\n+            message = \"Expected at least \" + minArgs + \" argument(s)\";\n+        } else {\n+            message = \"Expected between \" + minArgs + \" and \" + maxArgs + \" argument(s)\";\n+        }\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), message, \"\");\n+        return;\n+    }\n+\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+    while (parameters.hasNext()) {\n+        Node parameter = parameters.next();\n+        Node argument = arguments.next();\n+        ordinal++;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-  }\n+    // check for varargs\n+    if (functionType.hasRestFormals()) {\n+        Node parameter = parameters.next();\n+        while (arguments.hasNext()) {\n+            Node argument = arguments.next();\n+            ordinal++;\n+\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}