{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    // Don't traverse functions that:\n    // - Are flagged by CheckJSDoc as having errors.\n    // - Are abstract methods.\n    // - Have the @private tag or have a name starting with _.\n    // - Are constructors, interfaces, or have the @this or @override annotation.\n    if (jsDoc != null &&\n        (jsDoc.containsDeclaration() ||\n         jsDoc.isAbstract() ||\n         jsDoc.isPrivate() ||\n         n.getFirstChild().getString().startsWith(\"_\") ||\n         jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally be able to have a @this annotation\n    // associated with them.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          // prototype methods: foo.bar.prototype.baz = function() {...};\n          (parent.isGetProp() &&\n           parent.getParent().isAssign() &&\n           parent.getParent().getFirstChild().isGetProp() &&\n           parent.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\")))) {\n      return false;\n    }\n  }\n\n  // Don't traverse code in the global scope or at the module or script level.\n  if (parent == null || parent.isScript() || parent.isModuleBody()) {\n    return true;\n  }\n\n  // Don't traverse functions that are being lent or assigned.\n  Node lhs;\n  Node lastParent = null;\n  while ((lhs = NodeUtil.getBestLValue(parent)) != null) {\n    Node rhs = NodeUtil.getRValueOfLValue(lhs);\n    if (rhs == null) {\n      return true;\n    }\n    // Don't traverse the child if it's being assigned to a prototype property or subproperty,\n    // or if it's being assigned to a global object.\n    // e.g.:\n    //  A.prototype.method = function() {...}\n    //  B.C = function() {...}\n    //  self.bla = function() {...}  // In the global scope.\n    if ((lhs.isGetProp() &&\n         lhs.getLastChild().getString().equals(\"prototype\")) ||\n        isNamespaceAssignment(parent) ||\n        (rhs.isFunction() &&\n         rhs.getFirstChild().getString().startsWith(\"new \"))) {\n      return false;\n    }\n    lastParent = parent;\n    parent = parent.getParent();\n  }\n\n  // Don't traverse the child if it's being assigned to a prototype property or subproperty,\n  // or if it's being assigned to a global object.\n  // e.g.:\n  //  x.A.prototype.method = function() {...}\n  //  x.B.C = function() {...}\n  //  x.self.bla = function() {...}  // In the global scope.\n  if (parent != null &&\n      lhs.isGetProp() &&\n      lhs.getLastChild().getString().equals(\"prototype\")) {\n    return false;\n  }\n  if (lastParent != null) {\n    Node lastParentLhs = NodeUtil.getBestLValue(lastParent);\n    if (lastParentLhs != null &&\n        lastParentLhs.isGetProp() &&\n        lastParentLhs.getLastChild().getString().equals(\"$jscomp$global\")) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7efaf867 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,95 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    // Don't traverse functions that:\n+    // - Are flagged by CheckJSDoc as having errors.\n+    // - Are abstract methods.\n+    // - Have the @private tag or have a name starting with _.\n+    // - Are constructors, interfaces, or have the @this or @override annotation.\n+    if (jsDoc != null &&\n+        (jsDoc.containsDeclaration() ||\n+         jsDoc.isAbstract() ||\n+         jsDoc.isPrivate() ||\n+         n.getFirstChild().getString().startsWith(\"_\") ||\n+         jsDoc.isConstructor() ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse functions unless they would normally be able to have a @this annotation\n+    // associated with them.\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+          // prototype methods: foo.bar.prototype.baz = function() {...};\n+          (parent.isGetProp() &&\n+           parent.getParent().isAssign() &&\n+           parent.getParent().getFirstChild().isGetProp() &&\n+           parent.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\")))) {\n+      return false;\n     }\n+  }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+  // Don't traverse code in the global scope or at the module or script level.\n+  if (parent == null || parent.isScript() || parent.isModuleBody()) {\n+    return true;\n+  }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n+  // Don't traverse functions that are being lent or assigned.\n+  Node lhs;\n+  Node lastParent = null;\n+  while ((lhs = NodeUtil.getBestLValue(parent)) != null) {\n+    Node rhs = NodeUtil.getRValueOfLValue(lhs);\n+    if (rhs == null) {\n+      return true;\n     }\n+    // Don't traverse the child if it's being assigned to a prototype property or subproperty,\n+    // or if it's being assigned to a global object.\n+    // e.g.:\n+    //  A.prototype.method = function() {...}\n+    //  B.C = function() {...}\n+    //  self.bla = function() {...}  // In the global scope.\n+    if ((lhs.isGetProp() &&\n+         lhs.getLastChild().getString().equals(\"prototype\")) ||\n+        isNamespaceAssignment(parent) ||\n+        (rhs.isFunction() &&\n+         rhs.getFirstChild().getString().startsWith(\"new \"))) {\n+      return false;\n+    }\n+    lastParent = parent;\n+    parent = parent.getParent();\n+  }\n \n-    return true;\n+  // Don't traverse the child if it's being assigned to a prototype property or subproperty,\n+  // or if it's being assigned to a global object.\n+  // e.g.:\n+  //  x.A.prototype.method = function() {...}\n+  //  x.B.C = function() {...}\n+  //  x.self.bla = function() {...}  // In the global scope.\n+  if (parent != null &&\n+      lhs.isGetProp() &&\n+      lhs.getLastChild().getString().equals(\"prototype\")) {\n+    return false;\n+  }\n+  if (lastParent != null) {\n+    Node lastParentLhs = NodeUtil.getBestLValue(lastParent);\n+    if (lastParentLhs != null &&\n+        lastParentLhs.isGetProp() &&\n+        lastParentLhs.getLastChild().getString().equals(\"$jscomp$global\")) {\n+      return false;\n+    }\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}