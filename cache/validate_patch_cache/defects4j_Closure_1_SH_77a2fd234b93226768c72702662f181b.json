{
    "patch": "      Iterator<Node> argumentNodes = argList.children().iterator(); // create an iterator to traverse the arguments\n      List<Node> unusedArguments = new ArrayList<Node>(); // create a list of all unused arguments to be removed\n      while (argumentNodes.hasNext()) { // check each argument if it is unused and add it to the list of unused arguments to be removed\n        Node arg = argumentNodes.next();\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unusedArguments.add(arg);\n        } else {\n          break;\n        }\n      }\n      for (Node arg : unusedArguments) { // remove each unused and un-referenced argument\n        argList.removeChild(arg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..90628b61 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Iterator<Node> argumentNodes = argList.children().iterator(); // create an iterator to traverse the arguments\n+      List<Node> unusedArguments = new ArrayList<Node>(); // create a list of all unused arguments to be removed\n+      while (argumentNodes.hasNext()) { // check each argument if it is unused and add it to the list of unused arguments to be removed\n+        Node arg = argumentNodes.next();\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unusedArguments.add(arg);\n+        } else {\n+          break;\n+        }\n+      }\n+      for (Node arg : unusedArguments) { // remove each unused and un-referenced argument\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}