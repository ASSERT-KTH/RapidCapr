{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n        return;\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          if (NodeUtil.isName(lhs)) {\n            Symbol symbol = getSymbol(lhs.getString());\n            addToBitSet(kill, symbol);\n            addToBitSet(gen, symbol);\n          }\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              if (NodeUtil.isName(c.getFirstChild())) {\n                Symbol symbol = getSymbol(c.getFirstChild().getString());\n                if (symbol != null && symbol.isLocal()) {\n                  addToBitSet(kill, symbol);\n                }\n              }\n            }\n          }\n        }\n        return;\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else if (NodeUtil.isName(n)) {\n          Symbol symbol = getSymbol(n.getString());\n          if (symbol != null && symbol.isLocal()) {\n            addToBitSet(gen, symbol);\n          }\n        }\n        return;\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            if (NodeUtil.isName(lhs)) {\n              Symbol symbol = getSymbol(lhs.getString());\n              if (symbol != null && symbol.isLocal()) {\n                addToBitSet(kill, symbol);\n              }\n            }\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            if (NodeUtil.isName(lhs)) {\n              Symbol symbol = getSymbol(lhs.getString());\n              if (symbol != null && symbol.isLocal()) {\n                addToBitSet(gen, symbol);\n              }\n            }\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }\n\n  private Symbol getSymbol(String name) {\n    Symbol symbol = null;\n    for (Symbol s = currentScope.getSymbol(name); s != null; s = s.getOuterSymbol()) {\n        symbol = s;\n    }\n    return symbol;\n  }\n\n  private <T extends BitVector<T>> void addToBitSet(BitSet<T> bitSet, Symbol symbol) {\n    if (symbol != null && symbol.isLocal()) {\n      Uniqueness uniqueness = symbolAppears.get(symbol);\n      switch (uniqueness) {\n        case ONCE:\n          bitSet.set(symbol.getLocalIndex());\n          break;\n        case MORE_THAN_ONCE:\n          bitSet.set(symbol.getDirtyLocalIndex());\n          break;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..a3b392ce 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,7 +175,7 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+private void computeGenKill(Node n, BitSet gen, BitSet kill,\n       boolean conditional) {\n \n     switch (n.getType()) {\n@@ -183,18 +183,14 @@ class LiveVariablesAnalysis extends\n       case Token.BLOCK:\n       case Token.FUNCTION:\n         return;\n-\n       case Token.WHILE:\n       case Token.DO:\n       case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n         return;\n-\n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n         } else {\n           // for(x in y) {...}\n           Node lhs = n.getFirstChild();\n@@ -203,54 +199,70 @@ class LiveVariablesAnalysis extends\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n+          if (NodeUtil.isName(lhs)) {\n+            Symbol symbol = getSymbol(lhs.getString());\n+            addToBitSet(kill, symbol);\n+            addToBitSet(gen, symbol);\n+          }\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n-\n       case Token.VAR:\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (c.hasChildren()) {\n             computeGenKill(c.getFirstChild(), gen, kill, conditional);\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+              if (NodeUtil.isName(c.getFirstChild())) {\n+                Symbol symbol = getSymbol(c.getFirstChild().getString());\n+                if (symbol != null && symbol.isLocal()) {\n+                  addToBitSet(kill, symbol);\n+                }\n+              }\n             }\n           }\n         }\n         return;\n-\n       case Token.AND:\n       case Token.OR:\n         computeGenKill(n.getFirstChild(), gen, kill, conditional);\n         // May short circuit.\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n-\n       case Token.HOOK:\n         computeGenKill(n.getFirstChild(), gen, kill, conditional);\n         // Assume both sides are conditional.\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n-\n       case Token.NAME:\n         if (isArgumentsName(n)) {\n           markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n+        } else if (NodeUtil.isName(n)) {\n+          Symbol symbol = getSymbol(n.getString());\n+          if (symbol != null && symbol.isLocal()) {\n+            addToBitSet(gen, symbol);\n+          }\n         }\n         return;\n-\n       default:\n         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n           Node lhs = n.getFirstChild();\n           if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n+            if (NodeUtil.isName(lhs)) {\n+              Symbol symbol = getSymbol(lhs.getString());\n+              if (symbol != null && symbol.isLocal()) {\n+                addToBitSet(kill, symbol);\n+              }\n+            }\n           }\n           if (!NodeUtil.isAssign(n)) {\n             // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n+            if (NodeUtil.isName(lhs)) {\n+              Symbol symbol = getSymbol(lhs.getString());\n+              if (symbol != null && symbol.isLocal()) {\n+                addToBitSet(gen, symbol);\n+              }\n+            }\n           }\n           computeGenKill(lhs.getNext(), gen, kill, conditional);\n         } else {\n@@ -262,6 +274,28 @@ class LiveVariablesAnalysis extends\n     }\n   }\n \n+  private Symbol getSymbol(String name) {\n+    Symbol symbol = null;\n+    for (Symbol s = currentScope.getSymbol(name); s != null; s = s.getOuterSymbol()) {\n+        symbol = s;\n+    }\n+    return symbol;\n+  }\n+\n+  private <T extends BitVector<T>> void addToBitSet(BitSet<T> bitSet, Symbol symbol) {\n+    if (symbol != null && symbol.isLocal()) {\n+      Uniqueness uniqueness = symbolAppears.get(symbol);\n+      switch (uniqueness) {\n+        case ONCE:\n+          bitSet.set(symbol.getLocalIndex());\n+          break;\n+        case MORE_THAN_ONCE:\n+          bitSet.set(symbol.getDirtyLocalIndex());\n+          break;\n+      }\n+    }\n+  }\n+\n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));\n     String name = node.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}