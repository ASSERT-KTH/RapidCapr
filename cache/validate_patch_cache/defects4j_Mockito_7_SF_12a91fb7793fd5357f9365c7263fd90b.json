{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        // if the declaring class is a parameterized type, then the actual type argument may be specified there\n        Type type = typeVariable.getGenericDeclaration();\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] typeArgs = parameterizedType.getActualTypeArguments();\n            int i = Arrays.asList(((Class<?>) parameterizedType.getRawType()).getTypeParameters()).indexOf(typeVariable);\n            if (i >= 0 && i < typeArgs.length) {\n                actualTypeArg = typeArgs[i];\n            }\n        }\n        // if the declaring class is a raw type, then the actual type argument is simply Object\n        else if (type instanceof Class && ((Class<?>) type).getTypeParameters().length > 0) {\n            actualTypeArg = Object.class;\n        }\n        // if the declaring class has type variables, then the actual type argument is unavailable\n        else {\n            throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n        }\n    }\n\n    if (actualTypeArg instanceof WildcardType) {\n        WildcardType wildcard = (WildcardType) actualTypeArg;\n        Type[] lowerBounds = wildcard.getLowerBounds();\n        Type[] upperBounds = wildcard.getUpperBounds();\n        if (lowerBounds.length > 0) {\n            actualTypeArg = lowerBounds[0];\n        } else if (upperBounds.length > 0) {\n            actualTypeArg = upperBounds[0];\n        } else {\n            throw new RuntimeException(\"Wildcard type argument is invalid for \" + typeVariable.getTypeName());\n        }\n    }\n\n    if (actualTypeArg instanceof TypeVariable) {\n        TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArg;\n        Type[] bounds = typeVar.getBounds();\n        if (bounds.length > 0) {\n            actualTypeArg = bounds[0];\n        } else {\n            throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVar.getName());\n        }\n    }\n\n    registerTypeVariablesOn(actualTypeArg);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d134169d7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,59 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        // if the declaring class is a parameterized type, then the actual type argument may be specified there\n+        Type type = typeVariable.getGenericDeclaration();\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            Type[] typeArgs = parameterizedType.getActualTypeArguments();\n+            int i = Arrays.asList(((Class<?>) parameterizedType.getRawType()).getTypeParameters()).indexOf(typeVariable);\n+            if (i >= 0 && i < typeArgs.length) {\n+                actualTypeArg = typeArgs[i];\n+            }\n+        }\n+        // if the declaring class is a raw type, then the actual type argument is simply Object\n+        else if (type instanceof Class && ((Class<?>) type).getTypeParameters().length > 0) {\n+            actualTypeArg = Object.class;\n+        }\n+        // if the declaring class has type variables, then the actual type argument is unavailable\n+        else {\n+            throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+        }\n+    }\n+\n+    if (actualTypeArg instanceof WildcardType) {\n+        WildcardType wildcard = (WildcardType) actualTypeArg;\n+        Type[] lowerBounds = wildcard.getLowerBounds();\n+        Type[] upperBounds = wildcard.getUpperBounds();\n+        if (lowerBounds.length > 0) {\n+            actualTypeArg = lowerBounds[0];\n+        } else if (upperBounds.length > 0) {\n+            actualTypeArg = upperBounds[0];\n+        } else {\n+            throw new RuntimeException(\"Wildcard type argument is invalid for \" + typeVariable.getTypeName());\n+        }\n+    }\n+\n+    if (actualTypeArg instanceof TypeVariable) {\n+        TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArg;\n+        Type[] bounds = typeVar.getBounds();\n+        if (bounds.length > 0) {\n+            actualTypeArg = bounds[0];\n+        } else {\n+            throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVar.getName());\n+        }\n+    }\n+\n+    registerTypeVariablesOn(actualTypeArg);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}