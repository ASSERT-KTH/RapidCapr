{
    "patch": "public static String escape(String str) {\n    StringBuffer buf = new StringBuffer();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        switch(ch) {\n            case '<': buf.append(\"&lt;\"); break;\n            case '>': buf.append(\"&gt;\"); break;\n            case '&': buf.append(\"&amp;\"); break;\n            case '\"': buf.append(\"&quot;\"); break;\n            case '\\'': buf.append(\"&#39;\"); break;\n            case '%': buf.append(\"&#37;\"); break;\n            case '\\\\': buf.append(\"&#92;\"); break; // backslash\n            case '/': buf.append(\"&#47;\"); break; // forward slash\n            case '\\t': buf.append(\"&#x9;\"); break; // tab\n            case '\\r': buf.append(\"\\r\"); break; // carriage return\n            case '\\n': buf.append(\"\\n\"); break; // new line\n            case '\\f': buf.append(\"&#xC;\"); break; // form feed\n            default: buf.append(ch); break;\n        }\n    }\n    return buf.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..f63e3569 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,28 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escape(String str) {\n+    StringBuffer buf = new StringBuffer();\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        switch(ch) {\n+            case '<': buf.append(\"&lt;\"); break;\n+            case '>': buf.append(\"&gt;\"); break;\n+            case '&': buf.append(\"&amp;\"); break;\n+            case '\"': buf.append(\"&quot;\"); break;\n+            case '\\'': buf.append(\"&#39;\"); break;\n+            case '%': buf.append(\"&#37;\"); break;\n+            case '\\\\': buf.append(\"&#92;\"); break; // backslash\n+            case '/': buf.append(\"&#47;\"); break; // forward slash\n+            case '\\t': buf.append(\"&#x9;\"); break; // tab\n+            case '\\r': buf.append(\"\\r\"); break; // carriage return\n+            case '\\n': buf.append(\"\\n\"); break; // new line\n+            case '\\f': buf.append(\"&#xC;\"); break; // form feed\n+            default: buf.append(ch); break;\n+        }\n+    }\n+    return buf.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}