{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n\n    // Consume all parameters if it is var_args function\n    boolean varArgsFunction = parameters.hasNext() && parameters.next().isVarArgs();\n    if (varArgsFunction) {\n      while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (arguments.hasNext()) {\n          argument = arguments.next();\n          ordinal++;\n\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter), call, ordinal);\n        } else {\n          // If there are no arguments left in the list but there are var_args parameters left,\n          // must check the var_args at the end of the function call.\n          validator.expectArgumentMatchesParameter(t, null, getNativeType(\"undefined\"),\n              getJSType(parameter), call, ordinal);\n        }\n      }\n    } else {\n      while (arguments.hasNext() && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    boolean extraArgumentFound = false;\n    while (arguments.hasNext()) {\n      extraArgumentFound = true;\n      argument = arguments.next();\n      numArgs++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, numArgs);\n      if (!varArgsFunction) {\n        break;\n      }\n    }\n\n    if (extraArgumentFound && !varArgsFunction) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs),\n          String.valueOf(minArgs), \" and at most \" + maxArgs + \" argument(s)\");\n      return;\n    }\n\n    if (minArgs > numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs),\n          String.valueOf(minArgs), \"\");\n    } else if (numArgs > maxArgs) {\n      if (varArgsFunction) {\n        maxArgs = Integer.MAX_VALUE;\n      }\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs),\n          String.valueOf(minArgs),\n          \" and at most \" + maxArgs + \" argument(s) and no more than \" + (numArgs - maxArgs) + \" extra argument(s).\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..248a619c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1404,71 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+\n+    // Consume all parameters if it is var_args function\n+    boolean varArgsFunction = parameters.hasNext() && parameters.next().isVarArgs();\n+    if (varArgsFunction) {\n+      while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        if (arguments.hasNext()) {\n+          argument = arguments.next();\n+          ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else {\n+          // If there are no arguments left in the list but there are var_args parameters left,\n+          // must check the var_args at the end of the function call.\n+          validator.expectArgumentMatchesParameter(t, null, getNativeType(\"undefined\"),\n+              getJSType(parameter), call, ordinal);\n+        }\n+      }\n+    } else {\n+      while (arguments.hasNext() && parameters.hasNext()) {\n+        parameter = parameters.next();\n+        argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+\n+    boolean extraArgumentFound = false;\n+    while (arguments.hasNext()) {\n+      extraArgumentFound = true;\n+      argument = arguments.next();\n+      numArgs++;\n+      validator.expectArgumentMatchesParameter(t, argument,\n+          getJSType(argument), getJSType(parameter), call, numArgs);\n+      if (!varArgsFunction) {\n+        break;\n+      }\n+    }\n+\n+    if (extraArgumentFound && !varArgsFunction) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs),\n+          String.valueOf(minArgs), \" and at most \" + maxArgs + \" argument(s)\");\n+      return;\n     }\n-  }\n+\n+    if (minArgs > numArgs) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs),\n+          String.valueOf(minArgs), \"\");\n+    } else if (numArgs > maxArgs) {\n+      if (varArgsFunction) {\n+        maxArgs = Integer.MAX_VALUE;\n+      }\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false), String.valueOf(numArgs),\n+          String.valueOf(minArgs),\n+          \" and at most \" + maxArgs + \" argument(s) and no more than \" + (numArgs - maxArgs) + \" extra argument(s).\");\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}