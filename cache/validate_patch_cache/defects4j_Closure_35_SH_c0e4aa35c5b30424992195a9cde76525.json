{
    "patch": "  private static final String VOID_TYPE = \"void\";\n\n  /**\n   * Infers properties of `type` using the declared properties of `constraint`.\n   */\n  private void inferPropertiesFromConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeInferred(prop) && !objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              if (propType.isUnionType() && propType.isTruthy()) {\n                typeToInfer = propType;\n              } else {\n                typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n              }\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n\n      JSType targetType = type.autobox();\n      if (targetType.isRecordType()) {\n        ObjectType objectType = targetType.toObjectType();\n        inferPropertiesFromConstraint(objectType, targetType);\n        ObjectType projectedType = scope.getSlot(n.getQualifiedName()).getDeclaredTypeOfSymbol().toObjectType();\n        if (projectedType != null && projectedType.isRecordType()) {\n          mergeObjectTypes(objectType, projectedType, n, scope);\n        }\n      }\n\n      if (targetType.isEnumElementType()) {\n        EnumType eType = enumTypes.get(targetType.getDisplayName());\n        if (eType != null) {\n          ObjectType symbolsObj = ObjectType.cast(\n              eType.getElementsType().restrictByNotNullOrUndefined());\n          inferPropertiesFromConstraint(symbolsObj, targetType);\n        }\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..abae5948 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,16 +1118,33 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+  private static final String VOID_TYPE = \"void\";\n+\n+  /**\n+   * Infers properties of `type` using the declared properties of `constraint`.\n+   */\n+  private void inferPropertiesFromConstraint(\n+      JSType type, JSType constraint) {\n+    if (type == null || constraint == null) {\n+      return;\n+    }\n+\n+    ObjectType constraintObj =\n+        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!objType.isPropertyTypeInferred(prop) && !objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              if (propType.isUnionType() && propType.isTruthy()) {\n+                typeToInfer = propType;\n+              } else {\n+                typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              }\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1136,6 +1153,41 @@ class TypeInference\n     }\n   }\n \n+  /**\n+   * If we access a property of a symbol, then that symbol is not\n+   * null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (type != narrowed) {\n+        scope = narrowScope(scope, n, narrowed);\n+      }\n+\n+      JSType targetType = type.autobox();\n+      if (targetType.isRecordType()) {\n+        ObjectType objectType = targetType.toObjectType();\n+        inferPropertiesFromConstraint(objectType, targetType);\n+        ObjectType projectedType = scope.getSlot(n.getQualifiedName()).getDeclaredTypeOfSymbol().toObjectType();\n+        if (projectedType != null && projectedType.isRecordType()) {\n+          mergeObjectTypes(objectType, projectedType, n, scope);\n+        }\n+      }\n+\n+      if (targetType.isEnumElementType()) {\n+        EnumType eType = enumTypes.get(targetType.getDisplayName());\n+        if (eType != null) {\n+          ObjectType symbolsObj = ObjectType.cast(\n+              eType.getElementsType().restrictByNotNullOrUndefined());\n+          inferPropertiesFromConstraint(symbolsObj, targetType);\n+        }\n+      }\n+    }\n+    return scope;\n+    }\n+  }\n+\n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}