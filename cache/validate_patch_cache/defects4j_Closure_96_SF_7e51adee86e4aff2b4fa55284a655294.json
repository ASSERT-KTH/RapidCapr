{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = false;\n    boolean isOptional = false;\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        isOptional = parameter.isOptionalArg();\n        if (!arguments.hasNext() && !hasVarArgs && !isOptional) {\n            // Not enough arguments, report an error.\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\", \n                                        functionType.getMinArguments(),\n                                        functionType.getMaxArguments()),\n                    String.format(\"Missing required argument %s at position %d\", \n                                        parameter.getString(), ordinal + 1),\n                    \"\");\n            return;\n        }\n        if (!arguments.hasNext() && hasVarArgs) {\n            break;\n        }\n        if (isOptional) {\n            continue;\n        }\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (hasVarArgs) {\n        // Handle varargs.\n        JSType varArgType = functionType.getReturnType();\n        while (arguments.hasNext()) {\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), varArgType, call, ordinal);\n        }\n    } else if (arguments.hasNext()) {\n        // Too many arguments, report an error.\n        int argCount = 0;\n        while (arguments.hasNext()) {\n            arguments.next();\n            argCount++;\n        }\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.format(\"Function called with %d argument(s)\", ordinal + argCount),\n                String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\", \n                                functionType.getMinArguments(),\n                                functionType.getMaxArguments()),\n                \"\");\n    } else {\n        // Check if there are un-visited parameters.\n        while (parameters.hasNext()) {\n            parameter = parameters.next();\n            if (!parameter.isOptionalArg()) {\n                // Optional parameter not filled in; report an error.\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.format(\"Function requires between %d and %d argument(s)\", \n                                        functionType.getMinArguments(),\n                                        functionType.getMaxArguments()),\n                        String.format(\"Missing required argument %s at position %d\", \n                                        parameter.getString(), ordinal + 1),\n                        \"\");\n                return;\n            }\n        }\n        int numArgs = ordinal;\n        int minArgs = functionType.getMinArguments();\n        int maxArgs = functionType.getMaxArguments();\n        if (numArgs < minArgs || numArgs > maxArgs) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.format(\"Function called with %d argument(s)\", numArgs),\n                    String.format(\"Function requires between %d and %d argument(s)\", \n                                    functionType.getMinArguments(),\n                                    functionType.getMaxArguments()),\n                    \"\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..65d8a024 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,29 +1405,89 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    boolean hasVarArgs = false;\n+    boolean isOptional = false;\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n+        isOptional = parameter.isOptionalArg();\n+        if (!arguments.hasNext() && !hasVarArgs && !isOptional) {\n+            // Not enough arguments, report an error.\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\", \n+                                        functionType.getMinArguments(),\n+                                        functionType.getMaxArguments()),\n+                    String.format(\"Missing required argument %s at position %d\", \n+                                        parameter.getString(), ordinal + 1),\n+                    \"\");\n+            return;\n+        }\n+        if (!arguments.hasNext() && hasVarArgs) {\n+            break;\n+        }\n+        if (isOptional) {\n+            continue;\n+        }\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (hasVarArgs) {\n+        // Handle varargs.\n+        JSType varArgType = functionType.getReturnType();\n+        while (arguments.hasNext()) {\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), varArgType, call, ordinal);\n+        }\n+    } else if (arguments.hasNext()) {\n+        // Too many arguments, report an error.\n+        int argCount = 0;\n+        while (arguments.hasNext()) {\n+            arguments.next();\n+            argCount++;\n+        }\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.format(\"Function called with %d argument(s)\", ordinal + argCount),\n+                String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\", \n+                                functionType.getMinArguments(),\n+                                functionType.getMaxArguments()),\n+                \"\");\n+    } else {\n+        // Check if there are un-visited parameters.\n+        while (parameters.hasNext()) {\n+            parameter = parameters.next();\n+            if (!parameter.isOptionalArg()) {\n+                // Optional parameter not filled in; report an error.\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.format(\"Function requires between %d and %d argument(s)\", \n+                                        functionType.getMinArguments(),\n+                                        functionType.getMaxArguments()),\n+                        String.format(\"Missing required argument %s at position %d\", \n+                                        parameter.getString(), ordinal + 1),\n+                        \"\");\n+                return;\n+            }\n+        }\n+        int numArgs = ordinal;\n+        int minArgs = functionType.getMinArguments();\n+        int maxArgs = functionType.getMaxArguments();\n+        if (numArgs < minArgs || numArgs > maxArgs) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.format(\"Function called with %d argument(s)\", numArgs),\n+                    String.format(\"Function requires between %d and %d argument(s)\", \n+                                    functionType.getMinArguments(),\n+                                    functionType.getMaxArguments()),\n+                    \"\");\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_WRONG_ARGUMENT_COUNT. Function Function: called with Function requires at least 0 argument(s) and no more than 2147483647 argument(s) argument(s). Function requires at least Missing required argument at position 1 argument(s). at testcode line 6 : 109 expected:<0> but was:<1>",
    "test_result": "FAIL"
}