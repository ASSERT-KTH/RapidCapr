{
    "patch": "            if ((offsetLocal - offsetAdjusted) != 0) {\n                // Get the next transition after instantAdjusted\n                long nextTransition = nextTransition(instantAdjusted);\n                // Calculate the daylight gap between instant local and the next transition\n                int gap = getOffset(nextTransition) - offsetAdjusted;\n                // If the daylight gap is greater than the difference between the offsets\n                if (Math.abs(gap) > Math.abs(offsetLocal - offsetAdjusted)) {\n                    // We are near a daylight change but not actually there. Adjust instantAdjusted to the nearest second at the prior offset\n                    long priorInstant = previousTransition(instantLocal - offsetLocal);\n                    if ((priorInstant + DateTimeConstants.MILLIS_PER_SECOND) > instantAdjusted) {\n                        // We've adjusted too far back. Roll forward a little\n                        priorInstant = nextTransition(priorInstant) - DateTimeConstants.MILLIS_PER_SECOND;\n                    }\n                    // Re-compute the offsets with the adjusted instant\n                    int priorOffset = getOffset(priorInstant);\n                    int correctOffset = getOffset(instantAdjusted);\n                    int diff = priorOffset - correctOffset;\n\n                    // If the daylight gap is equal to the difference between the offsets and\n                    // the total daylight gap less the daylight gap after the estimated time is greater than zero,\n                    // then we are near the end of daylight and we need to use the earlier offset (thanks to Jon Skeet for this fix)\n                    if (Math.abs(gap) == Math.abs(offsetLocal - offsetAdjusted) &&\n                            (getOffset(nextTransition(nextTransition)) - offsetAdjusted) > 0) {\n                        return offsetLocal;\n                    }\n\n                    if (diff > 0) {\n                        return priorOffset;\n                    } else if (diff < 0) {\n                        return correctOffset;\n                    } else {\n                        return offsetAdjusted;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..94d2b7e4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) != 0) {\n+                // Get the next transition after instantAdjusted\n+                long nextTransition = nextTransition(instantAdjusted);\n+                // Calculate the daylight gap between instant local and the next transition\n+                int gap = getOffset(nextTransition) - offsetAdjusted;\n+                // If the daylight gap is greater than the difference between the offsets\n+                if (Math.abs(gap) > Math.abs(offsetLocal - offsetAdjusted)) {\n+                    // We are near a daylight change but not actually there. Adjust instantAdjusted to the nearest second at the prior offset\n+                    long priorInstant = previousTransition(instantLocal - offsetLocal);\n+                    if ((priorInstant + DateTimeConstants.MILLIS_PER_SECOND) > instantAdjusted) {\n+                        // We've adjusted too far back. Roll forward a little\n+                        priorInstant = nextTransition(priorInstant) - DateTimeConstants.MILLIS_PER_SECOND;\n+                    }\n+                    // Re-compute the offsets with the adjusted instant\n+                    int priorOffset = getOffset(priorInstant);\n+                    int correctOffset = getOffset(instantAdjusted);\n+                    int diff = priorOffset - correctOffset;\n+\n+                    // If the daylight gap is equal to the difference between the offsets and\n+                    // the total daylight gap less the daylight gap after the estimated time is greater than zero,\n+                    // then we are near the end of daylight and we need to use the earlier offset (thanks to Jon Skeet for this fix)\n+                    if (Math.abs(gap) == Math.abs(offsetLocal - offsetAdjusted) &&\n+                            (getOffset(nextTransition(nextTransition)) - offsetAdjusted) > 0) {\n+                        return offsetLocal;\n+                    }\n+\n+                    if (diff > 0) {\n+                        return priorOffset;\n+                    } else if (diff < 0) {\n+                        return correctOffset;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}