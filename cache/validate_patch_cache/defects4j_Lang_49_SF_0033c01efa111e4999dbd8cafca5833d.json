{
    "patch": "public Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == 1) { // if the fraction is already reduced\n        return this;\n    } else if (gcd == 0) { // if the fraction is 0/0\n        return new Fraction(0, 0);\n    } else { // reduce the fraction\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..6a10770d 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,16 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+    if (gcd == 1) { // if the fraction is already reduced\n+        return this;\n+    } else if (gcd == 0) { // if the fraction is 0/0\n+        return new Fraction(0, 0);\n+    } else { // reduce the fraction\n+        return new Fraction(numerator / gcd, denominator / gcd);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<100>",
    "test_result": "FAIL"
}