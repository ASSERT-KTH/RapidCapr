{
    "patch": "boolean declarationSeen = false;\nboolean assignmentSeen = false;\nfor (int i = 0; i < size; i++) {\n  if (isInitializingDeclarationAt(i)) {\n    if (declarationSeen) {\n      return null;\n    }\n\n    declarationSeen = true;\n    if (!assignmentSeen) {\n      return references.get(i);\n    }\n  } else if (isInitializingAssignmentAt(i)) {\n    if (assignmentSeen) {\n      return null;\n    }\n\n    assignmentSeen = true;\n    if (!declarationSeen) {\n      return references.get(i);\n    }\n  }\n}\nreturn null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..121c092c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean declarationSeen = false;\n+boolean assignmentSeen = false;\n+for (int i = 0; i < size; i++) {\n+  if (isInitializingDeclarationAt(i)) {\n+    if (declarationSeen) {\n+      return null;\n+    }\n+\n+    declarationSeen = true;\n+    if (!assignmentSeen) {\n+      return references.get(i);\n+    }\n+  } else if (isInitializingAssignmentAt(i)) {\n+    if (assignmentSeen) {\n+      return null;\n+    }\n+\n+    assignmentSeen = true;\n+    if (!declarationSeen) {\n+      return references.get(i);\n+    }\n+  }\n+}\n+return null;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}