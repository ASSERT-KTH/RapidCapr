{
    "patch": "public static Map<Integer, Integer> getPairs(List<Integer> nums, int sum) {\n    Map<Integer, Integer> pairs = new HashMap<>();\n\n    for (int i = 0; i < nums.size() - 1; i++) {\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums.get(i) + nums.get(j) == sum) {\n                pairs.put(nums.get(i), nums.get(j));\n            }\n        }\n    }\n    \n    return pairs;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..0f3b5865b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Integer, Integer> getPairs(List<Integer> nums, int sum) {\n+    Map<Integer, Integer> pairs = new HashMap<>();\n+\n+    for (int i = 0; i < nums.size() - 1; i++) {\n+        for (int j = i + 1; j < nums.size(); j++) {\n+            if (nums.get(i) + nums.get(j) == sum) {\n+                pairs.put(nums.get(i), nums.get(j));\n+            }\n+        }\n+    }\n+    \n+    return pairs;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}