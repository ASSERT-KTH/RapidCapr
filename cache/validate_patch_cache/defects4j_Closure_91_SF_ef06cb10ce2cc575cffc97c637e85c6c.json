{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n        if (!isPlaceForThisAnnotation(n.getParent())) {\n            return false;\n        }\n\n        // Don't traverse functions that are bindings to prototype properties\n        if (parent != null && parent.getType() == Token.ASSIGN) {\n            Node lhs = parent.getFirstChild();\n            if (lhs != null) {\n                Node grandParent = parent.getParent();\n                if (grandParent != null && (grandParent.getType() == Token.CALL || grandParent.getType() == Token.NEW)) {\n                    lhs = grandParent;\n                    grandParent = grandParent.getParent();\n                }\n                if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT && grandParent.getParent() != null &&\n                        (grandParent.getParent().getType() == Token.LET || grandParent.getParent().getType() == Token.CONST)) {\n                    // don't traverse binding to prototype properties inside of a let/const scope\n                    return false;\n                }\n                for (Node ancestor = lhs; ancestor != null; ancestor = ancestor.getParent()) {\n                    if (ancestor.getType() == Token.GETPROP) {\n                        Node lastChildNode = ancestor.getLastChild();\n                        if (lastChildNode != null && lastChildNode.getType() == Token.STRING && \"prototype\".equals(lastChildNode.getString())) {\n                            if (lhs == ancestor) {\n                                return false;\n                            }\n                            Node grandAncestor = ancestor.getParent();\n                            if (grandAncestor != null && grandAncestor.getType() == Token.ASSIGN) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isPlaceForThisAnnotation(Node node) {\n    if (node == null || NodeUtil.isFunctionDeclaration(node) || NodeUtil.isClassDeclaration(node) ||\n            node.getType() == Token.OBJECTLIT || node.getType() == Token.ARRAYLIT) {\n        return true;\n    }\n    if (node.getType() == Token.ASSIGN && node.getParent() != null && node.getParent().getType() == Token.EXPR_RESULT) {\n        Node lhs = node.getFirstChild();\n        Node rhs = lhs.getNext();\n        // functions assigned to non-prototype objects will not be rewritten by the removeUnusedCodePass\n        // if they have a non-null global \"this\"\n        if (NodeUtil.isGet(lhs) &&\n                (NodeUtil.isObjectLiteral(rhs) || NodeUtil.isArrayLiteral(rhs)) &&\n                rhs.hasChildren()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f149b398 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,73 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+        if (!isPlaceForThisAnnotation(n.getParent())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+        // Don't traverse functions that are bindings to prototype properties\n+        if (parent != null && parent.getType() == Token.ASSIGN) {\n+            Node lhs = parent.getFirstChild();\n+            if (lhs != null) {\n+                Node grandParent = parent.getParent();\n+                if (grandParent != null && (grandParent.getType() == Token.CALL || grandParent.getType() == Token.NEW)) {\n+                    lhs = grandParent;\n+                    grandParent = grandParent.getParent();\n+                }\n+                if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT && grandParent.getParent() != null &&\n+                        (grandParent.getParent().getType() == Token.LET || grandParent.getParent().getType() == Token.CONST)) {\n+                    // don't traverse binding to prototype properties inside of a let/const scope\n+                    return false;\n+                }\n+                for (Node ancestor = lhs; ancestor != null; ancestor = ancestor.getParent()) {\n+                    if (ancestor.getType() == Token.GETPROP) {\n+                        Node lastChildNode = ancestor.getLastChild();\n+                        if (lastChildNode != null && lastChildNode.getType() == Token.STRING && \"prototype\".equals(lastChildNode.getString())) {\n+                            if (lhs == ancestor) {\n+                                return false;\n+                            }\n+                            Node grandAncestor = ancestor.getParent();\n+                            if (grandAncestor != null && grandAncestor.getType() == Token.ASSIGN) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    return true;\n+}\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+private boolean isPlaceForThisAnnotation(Node node) {\n+    if (node == null || NodeUtil.isFunctionDeclaration(node) || NodeUtil.isClassDeclaration(node) ||\n+            node.getType() == Token.OBJECTLIT || node.getType() == Token.ARRAYLIT) {\n+        return true;\n+    }\n+    if (node.getType() == Token.ASSIGN && node.getParent() != null && node.getParent().getType() == Token.EXPR_RESULT) {\n+        Node lhs = node.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        // functions assigned to non-prototype objects will not be rewritten by the removeUnusedCodePass\n+        // if they have a non-null global \"this\"\n+        if (NodeUtil.isGet(lhs) &&\n+                (NodeUtil.isObjectLiteral(rhs) || NodeUtil.isArrayLiteral(rhs)) &&\n+                rhs.hasChildren()) {\n+            return true;\n         }\n-      }\n     }\n-\n-    return true;\n-  }\n+    return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}