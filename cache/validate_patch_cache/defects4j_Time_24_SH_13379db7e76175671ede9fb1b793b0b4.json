{
    "patch": "            boolean triedAsMillis = false;\n            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (savedFields != iSavedFields) {\n                    throw e;\n                }\n                triedAsMillis = true;\n                boolean hasTime = false;\n                for (int i = 0; i < count; i++) {\n                    try {\n                        savedFields[i].set(millis, resetFields);\n                    } catch (IllegalFieldValueException ex) {\n                        if (compareReverse(savedFields[i].iField.getDurationField(), DurationFieldType.time()) >= 0) {\n                            hasTime = true;\n                            break;\n                        }\n                    }\n                }\n                if (hasTime) {\n                    throw e;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6884f61f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean triedAsMillis = false;\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (savedFields != iSavedFields) {\n+                    throw e;\n+                }\n+                triedAsMillis = true;\n+                boolean hasTime = false;\n+                for (int i = 0; i < count; i++) {\n+                    try {\n+                        savedFields[i].set(millis, resetFields);\n+                    } catch (IllegalFieldValueException ex) {\n+                        if (compareReverse(savedFields[i].iField.getDurationField(), DurationFieldType.time()) >= 0) {\n+                            hasTime = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (hasTime) {\n+                    throw e;\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}