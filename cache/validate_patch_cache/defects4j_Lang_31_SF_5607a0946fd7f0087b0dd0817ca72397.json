{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n    \n    public static boolean containsAny(final char[] arr, final char[] searchChars) {\n        final int len = arr.length;\n        final int searchLen = searchChars.length;\n        final int total = searchLen - 1;\n        if (total < 0) {\n            return true;\n        }\n        if (len < searchLen) {\n            return false;\n        }\n        final char[] chars = new char[searchLen];\n        int i = -1;\n        for (int j = 0; j < searchLen; j++) {\n            final char ch = searchChars[j];\n            if (Character.isHighSurrogate(ch)) {\n                if (++j == searchLen) {\n                    throw new IllegalArgumentException(\"Invalid surrogate pair at the end of input: \" + Arrays.toString(searchChars));\n                }\n                final char ch2 = searchChars[j];\n                if (!Character.isLowSurrogate(ch2)) {\n                    throw new IllegalArgumentException(\"Expected low surrogate character but found \" + ch2 + \" at index \" + j + \" in input: \" + Arrays.toString(searchChars));\n                }\n                chars[++i] = ch;\n                chars[++i] = ch2;\n            } else if (Character.isLowSurrogate(ch)) {\n                throw new IllegalArgumentException(\"Unexpected low surrogate character '\" + ch + \"' at index \" + j + \" in input: \" + Arrays.toString(searchChars));\n            } else {\n                chars[++i] = ch;\n            }\n        }\n        outer:\n        for (int k = 0; k < len; k++) {\n            final char ch3 = arr[k];\n            if (Character.isHighSurrogate(ch3)) {\n                final int remaining = len - k - 1;\n                if (remaining == 0) {\n                    return false;\n                }\n                final char ch4 = arr[k + 1];\n                if (!Character.isLowSurrogate(ch4)) {\n                    throw new IllegalArgumentException(\"Expected low surrogate but found char '\" + ch4 + \"' at index \" + (k + 1) + \" in input: \" + Arrays.toString(arr));\n                }\n                final int cp = Character.toCodePoint(ch3, ch4);\n                for (int m = 0; m < chars.length; m += 2) {\n                    final int expected = Character.toCodePoint(chars[m], chars[m + 1]);\n                    if (cp == expected) {\n                        return true;\n                    }\n                }\n                continue;\n            }\n            if (Character.isLowSurrogate(ch3)) {\n                continue;\n            }\n            for (int n = 0; n < searchLen; n++) {\n                if (searchChars[n] == ch3) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..7fb584b6 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,73 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final char[] arr, final char[] searchChars) {\n+        final int len = arr.length;\n+        final int searchLen = searchChars.length;\n+        final int total = searchLen - 1;\n+        if (total < 0) {\n+            return true;\n+        }\n+        if (len < searchLen) {\n+            return false;\n+        }\n+        final char[] chars = new char[searchLen];\n+        int i = -1;\n+        for (int j = 0; j < searchLen; j++) {\n+            final char ch = searchChars[j];\n+            if (Character.isHighSurrogate(ch)) {\n+                if (++j == searchLen) {\n+                    throw new IllegalArgumentException(\"Invalid surrogate pair at the end of input: \" + Arrays.toString(searchChars));\n+                }\n+                final char ch2 = searchChars[j];\n+                if (!Character.isLowSurrogate(ch2)) {\n+                    throw new IllegalArgumentException(\"Expected low surrogate character but found \" + ch2 + \" at index \" + j + \" in input: \" + Arrays.toString(searchChars));\n+                }\n+                chars[++i] = ch;\n+                chars[++i] = ch2;\n+            } else if (Character.isLowSurrogate(ch)) {\n+                throw new IllegalArgumentException(\"Unexpected low surrogate character '\" + ch + \"' at index \" + j + \" in input: \" + Arrays.toString(searchChars));\n+            } else {\n+                chars[++i] = ch;\n+            }\n+        }\n+        outer:\n+        for (int k = 0; k < len; k++) {\n+            final char ch3 = arr[k];\n+            if (Character.isHighSurrogate(ch3)) {\n+                final int remaining = len - k - 1;\n+                if (remaining == 0) {\n+                    return false;\n+                }\n+                final char ch4 = arr[k + 1];\n+                if (!Character.isLowSurrogate(ch4)) {\n+                    throw new IllegalArgumentException(\"Expected low surrogate but found char '\" + ch4 + \"' at index \" + (k + 1) + \" in input: \" + Arrays.toString(arr));\n+                }\n+                final int cp = Character.toCodePoint(ch3, ch4);\n+                for (int m = 0; m < chars.length; m += 2) {\n+                    final int expected = Character.toCodePoint(chars[m], chars[m + 1]);\n+                    if (cp == expected) {\n+                        return true;\n+                    }\n+                }\n+                continue;\n+            }\n+            if (Character.isLowSurrogate(ch3)) {\n+                continue;\n+            }\n+            for (int n = 0; n < searchLen; n++) {\n+                if (searchChars[n] == ch3) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}