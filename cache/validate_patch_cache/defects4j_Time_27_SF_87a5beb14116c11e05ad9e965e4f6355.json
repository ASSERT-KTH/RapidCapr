{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    if (notPrinter && size == 2 && elementPairs.get(0) instanceof Separator &&\n        elementPairs.get(1) instanceof Literal) {\n        return new PeriodFormatter(null, (PeriodParser) elementPairs.get(0));\n    }\n    if (notParser && size == 2 && elementPairs.get(0) instanceof Separator &&\n        elementPairs.get(1) instanceof Literal) {\n        return new PeriodFormatter((PeriodPrinter) elementPairs.get(0), null);\n    }\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    Separator separator = null;\n    for (int i = 0; i < size; i++) {\n        Object element = elementPairs.get(i);\n        if (element instanceof Separator) {\n            separator = (Separator) element;\n        } else if (element instanceof Literal) {\n            continue;\n        } else if (element instanceof PeriodPrinter) {\n            printer = (printer == null) ? (PeriodPrinter) element : printer.and((PeriodPrinter) element);\n        } else if (element instanceof PeriodParser) {\n            parser = (parser == null) ? (PeriodParser) element : parser.and((PeriodParser) element);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element type: \" + element.getClass());\n        }\n    }\n    if (printer != null && parser != null) {\n        separator = separator.finish(printer, parser);\n    }\n    if (notPrinter) {\n        return new PeriodFormatter(null, parser);\n    } else if (notParser) {\n        return new PeriodFormatter(printer, null);\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bb2f6bb6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,50 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (notPrinter && size == 2 && elementPairs.get(0) instanceof Separator &&\n+        elementPairs.get(1) instanceof Literal) {\n+        return new PeriodFormatter(null, (PeriodParser) elementPairs.get(0));\n+    }\n+    if (notParser && size == 2 && elementPairs.get(0) instanceof Separator &&\n+        elementPairs.get(1) instanceof Literal) {\n+        return new PeriodFormatter((PeriodPrinter) elementPairs.get(0), null);\n+    }\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    Separator separator = null;\n+    for (int i = 0; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+        if (element instanceof Separator) {\n+            separator = (Separator) element;\n+        } else if (element instanceof Literal) {\n+            continue;\n+        } else if (element instanceof PeriodPrinter) {\n+            printer = (printer == null) ? (PeriodPrinter) element : printer.and((PeriodPrinter) element);\n+        } else if (element instanceof PeriodParser) {\n+            parser = (parser == null) ? (PeriodParser) element : parser.and((PeriodParser) element);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            throw new IllegalArgumentException(\"Invalid element type: \" + element.getClass());\n         }\n     }\n+    if (printer != null && parser != null) {\n+        separator = separator.finish(printer, parser);\n+    }\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, parser);\n+    } else if (notParser) {\n+        return new PeriodFormatter(printer, null);\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}