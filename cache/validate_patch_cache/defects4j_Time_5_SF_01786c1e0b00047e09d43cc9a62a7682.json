{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Calculate the total duration in milliseconds\n    long totalMillis = getMillis() +\n            getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n            getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n            getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n            getDays() * DateTimeConstants.MILLIS_PER_DAY +\n            getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // Calculate total months from years and months\n    int totalMonths = getYears() * 12 + getMonths();\n\n    // Convert the total duration to a period of the requested type\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    // If years or months are included in the type, normalize the duration\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        // Calculate normalized years and months from total months\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n\n        // Update the period with the normalized years and months\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(normalizedYears);\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(normalizedMonths);\n        }\n    }\n\n    // If weeks or days are included in the type, normalize the duration\n    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n        // Calculate total days from weeks and days\n        int totalDays = getWeeks() * 7 + getDays();\n\n        // If weeks are included in the type, normalize weeks and update the period\n        if (type.isSupported(DurationFieldType.weeks())) {\n            int normalizedWeeks = totalDays / 7;\n            result = result.withWeeks(normalizedWeeks);\n        }\n\n        // If days are included in the type, normalize days and update the period\n        if (type.isSupported(DurationFieldType.days())) {\n            int normalizedDays = totalDays % 7;\n            result = result.withDays(normalizedDays);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..3b389b05 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,57 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // Calculate the total duration in milliseconds\n+    long totalMillis = getMillis() +\n+            getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n+            getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n+            getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n+            getDays() * DateTimeConstants.MILLIS_PER_DAY +\n+            getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    // Calculate total months from years and months\n+    int totalMonths = getYears() * 12 + getMonths();\n+\n+    // Convert the total duration to a period of the requested type\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n+\n+    // If years or months are included in the type, normalize the duration\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+        // Calculate normalized years and months from total months\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+\n+        // Update the period with the normalized years and months\n+        if (type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(normalizedYears);\n+        }\n+        if (type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(normalizedMonths);\n         }\n-        return result;\n     }\n \n+    // If weeks or days are included in the type, normalize the duration\n+    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n+        // Calculate total days from weeks and days\n+        int totalDays = getWeeks() * 7 + getDays();\n+\n+        // If weeks are included in the type, normalize weeks and update the period\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            int normalizedWeeks = totalDays / 7;\n+            result = result.withWeeks(normalizedWeeks);\n+        }\n+\n+        // If days are included in the type, normalize days and update the period\n+        if (type.isSupported(DurationFieldType.days())) {\n+            int normalizedDays = totalDays % 7;\n+            result = result.withDays(normalizedDays);\n+        }\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}