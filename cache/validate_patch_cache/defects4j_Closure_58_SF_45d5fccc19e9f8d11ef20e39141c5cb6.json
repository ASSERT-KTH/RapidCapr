{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          if (NodeUtil.getConditionExpression(n) != null) {\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n          }\n          if (n.getLastChild().getType() == Token.BLOCK) {\n              for (Node blockNode = n.getLastChild().getFirstChild(); blockNode != null;\n                   blockNode = blockNode.getNext()) {\n                computeGenKill(blockNode, gen, kill, true);\n              }\n          } else {\n            computeGenKill(n.getLastChild(), gen, kill, true);\n          }\n          return;\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          addToSetIfLocal(lhs, kill);\n          addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n          return;\n        }\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, true);\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n          }\n          if (!conditional) {\n            addToSetIfLocal(c, kill);\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, conditional);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..c7f6170e 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,9 +175,7 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n     switch (n.getType()) {\n       case Token.SCRIPT:\n       case Token.BLOCK:\n@@ -187,14 +185,25 @@ class LiveVariablesAnalysis extends\n       case Token.WHILE:\n       case Token.DO:\n       case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n         return;\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          if (NodeUtil.getConditionExpression(n) != null) {\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+          }\n+          if (n.getLastChild().getType() == Token.BLOCK) {\n+              for (Node blockNode = n.getLastChild().getFirstChild(); blockNode != null;\n+                   blockNode = blockNode.getNext()) {\n+                computeGenKill(blockNode, gen, kill, true);\n+              }\n+          } else {\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+          }\n+          return;\n         } else {\n           // for(x in y) {...}\n           Node lhs = n.getFirstChild();\n@@ -203,64 +212,38 @@ class LiveVariablesAnalysis extends\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n+          addToSetIfLocal(lhs, kill);\n+          addToSetIfLocal(lhs, gen);\n           computeGenKill(rhs, gen, kill, conditional);\n+          return;\n         }\n-        return;\n \n       case Token.VAR:\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (c.hasChildren()) {\n+            computeGenKill(c.getFirstChild(), gen, kill, true);\n             computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n-            }\n+          }\n+          if (!conditional) {\n+            addToSetIfLocal(c, kill);\n           }\n         }\n         return;\n \n       case Token.AND:\n       case Token.OR:\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n \n       case Token.HOOK:\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+        computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n-        }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n-        }\n-        return;\n-    }\n-  }\n+        computeGenKill(n.getLastChild(), gen, kill, conditional);\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}