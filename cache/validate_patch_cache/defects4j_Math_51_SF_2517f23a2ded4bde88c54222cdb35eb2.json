{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\n\npublic class BisectionSolver extends AbstractUnivariateSolver {\n\n    /**\n     * Construct a solver with default accuracy.\n     */\n    public BisectionSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver with the given accuracy.\n     *\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public BisectionSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Solve for a zero in the given interval, starting at {@code maxIterations} iterations if it is positive.\n     *\n     * @param maxEval Maximum number of evaluations to perform, or -1 for no maximum.\n     * @param f Function to find the zero of.\n     * @param min Lower bound of the search interval.\n     * @param max Upper bound of the search interval.\n     * @param startValue Starting point to use in step finding.\n     * @return A value which is an estimate for the actual root.<br>\n     * If {@link AllowedSolution#ANY_SIDE} is requested and a root is detected, the returned\n     * value will be a number a such that {@code lower < a < upper} and {@code f(a) == 0}.<br>\n     * If {@link AllowedSolution#LEFT_SIDE} is requested and a left-sided root is detected\n     * ({@code f(min) == 0} or {@code f(min) > 0} and {@code f(max) < 0}), the returned\n     * value will be the maximum number {@code a} such that {@code a <= initial} and\n     * {@code f(a) == 0}.<br>\n     * If {@link AllowedSolution#RIGHT_SIDE} is requested and a right-sided root is detected\n     * ({@code f(min) < 0} and {@code f(max) == 0} or {@code f(min) < 0} and {@code f(max) > 0}),\n     * the returned value will be the minimum number {@code a} such that {@code a >= initial} and\n     * {@code f(a) == 0}.<br>\n     * If {@link AllowedSolution#BELOW_SIDE} is requested, the returned value will be the maximum\n     * number {@code a} such that {@code a <= initial} and either<ol>\n     * <li>{@code f(a) == 0}</li><li>{@code f(a) < 0}</li></ol>\n     * If {@link AllowedSolution#ABOVE_SIDE} is requested, the returned value will be the minimum\n     * number {@code a} such that {@code a >= initial} and either<ol>\n     * <li>{@code f(a) == 0}</li><li>{@code f(a) > 0}</li></ol>\n     * @throws MathIllegalArgumentException if {@code max < min} or the endpoints do not contain\n     * a root and a sign change.\n     * @throws TooManyEvaluationsException if an iterative solver exceeds the permitted number\n     * of evaluations.\n     */\n    @Override\n    public double solve(int maxEval, final UnivariateFunction f, double min, double max, double startValue, AllowedSolution allowed)\n        throws MathIllegalArgumentException, TooManyEvaluationsException {\n        // Prepare min and max for calls to endpointBisection.\n        double mInf = Double.NEGATIVE_INFINITY;\n        double mSup = Double.POSITIVE_INFINITY;\n        final double fMin = f.value(min);\n        final double fMax = f.value(max);\n\n        verifyInterval(min, max);\n        verifySequence(min, startValue, max);\n\n        int i = 0;\n        while (true) {\n            final double m = UnivariateSolverUtils.midpoint(min, max);\n            final double fMid = f.value(m);\n\n            if (fMid == 0.0) { // we have found an exact root, return it\n                if (allowed == AllowedSolution.ANY_SIDE) {\n                    return m;\n                }\n                return (fMax < 0) ? solve(maxEval, f, m, max, m, allowed) : solve(maxEval, f, min, m, m, allowed);\n            } else if (fMid < 0) {\n                min = m;\n                fMin = fMid;\n            } else {\n                max = m;\n                fMax = fMid;\n            }\n\n            if (++i >= maximalIterationCount) {\n                throw new TooManyEvaluationsException(maximalIterationCount);\n            }\n            if (FastMath.abs(max - min) <= absoluteAccuracy) {\n                final double mInternal = UnivariateSolverUtils.midpoint(min, max);\n                if (allowed == AllowedSolution.ANY_SIDE ||\n                    (allowed == AllowedSolution.LEFT_SIDE && getFunctionValueAccuracy() == 0 && fMax <= 0) ||\n                    (allowed == AllowedSolution.RIGHT_SIDE && getFunctionValueAccuracy() == 0 && fMin >= 0)) {\n                    return mInternal;\n                }\n                if (fMin * fMax <= 0) {\n                    return mInternal;\n                }\n                if (allowed == AllowedSolution.LEFT_SIDE) {\n                    return min;\n                }\n                if (allowed == AllowedSolution.RIGHT_SIDE) {\n                    return max;\n                }\n                throw new MathIllegalStateException(\n                        \"No bracketing for allowed solutions \" + allowed + \" \" + fMin + \" \" + fMax, min, max, fMin, fMax);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..8f08348d7 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,114 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+public class BisectionSolver extends AbstractUnivariateSolver {\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    /**\n+     * Construct a solver with default accuracy.\n+     */\n+    public BisectionSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n+    }\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    /**\n+     * Construct a solver with the given accuracy.\n+     *\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public BisectionSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy, Method.BISECTION);\n+    }\n \n-        // Keep finding better approximations.\n+    /**\n+     * Solve for a zero in the given interval, starting at {@code maxIterations} iterations if it is positive.\n+     *\n+     * @param maxEval Maximum number of evaluations to perform, or -1 for no maximum.\n+     * @param f Function to find the zero of.\n+     * @param min Lower bound of the search interval.\n+     * @param max Upper bound of the search interval.\n+     * @param startValue Starting point to use in step finding.\n+     * @return A value which is an estimate for the actual root.<br>\n+     * If {@link AllowedSolution#ANY_SIDE} is requested and a root is detected, the returned\n+     * value will be a number a such that {@code lower < a < upper} and {@code f(a) == 0}.<br>\n+     * If {@link AllowedSolution#LEFT_SIDE} is requested and a left-sided root is detected\n+     * ({@code f(min) == 0} or {@code f(min) > 0} and {@code f(max) < 0}), the returned\n+     * value will be the maximum number {@code a} such that {@code a <= initial} and\n+     * {@code f(a) == 0}.<br>\n+     * If {@link AllowedSolution#RIGHT_SIDE} is requested and a right-sided root is detected\n+     * ({@code f(min) < 0} and {@code f(max) == 0} or {@code f(min) < 0} and {@code f(max) > 0}),\n+     * the returned value will be the minimum number {@code a} such that {@code a >= initial} and\n+     * {@code f(a) == 0}.<br>\n+     * If {@link AllowedSolution#BELOW_SIDE} is requested, the returned value will be the maximum\n+     * number {@code a} such that {@code a <= initial} and either<ol>\n+     * <li>{@code f(a) == 0}</li><li>{@code f(a) < 0}</li></ol>\n+     * If {@link AllowedSolution#ABOVE_SIDE} is requested, the returned value will be the minimum\n+     * number {@code a} such that {@code a >= initial} and either<ol>\n+     * <li>{@code f(a) == 0}</li><li>{@code f(a) > 0}</li></ol>\n+     * @throws MathIllegalArgumentException if {@code max < min} or the endpoints do not contain\n+     * a root and a sign change.\n+     * @throws TooManyEvaluationsException if an iterative solver exceeds the permitted number\n+     * of evaluations.\n+     */\n+    @Override\n+    public double solve(int maxEval, final UnivariateFunction f, double min, double max, double startValue, AllowedSolution allowed)\n+        throws MathIllegalArgumentException, TooManyEvaluationsException {\n+        // Prepare min and max for calls to endpointBisection.\n+        double mInf = Double.NEGATIVE_INFINITY;\n+        double mSup = Double.POSITIVE_INFINITY;\n+        final double fMin = f.value(min);\n+        final double fMax = f.value(max);\n+\n+        verifyInterval(min, max);\n+        verifySequence(min, startValue, max);\n+\n+        int i = 0;\n         while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+            final double m = UnivariateSolverUtils.midpoint(min, max);\n+            final double fMid = f.value(m);\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n+            if (fMid == 0.0) { // we have found an exact root, return it\n+                if (allowed == AllowedSolution.ANY_SIDE) {\n+                    return m;\n                 }\n+                return (fMax < 0) ? solve(maxEval, f, m, max, m, allowed) : solve(maxEval, f, min, m, m, allowed);\n+            } else if (fMid < 0) {\n+                min = m;\n+                fMin = fMid;\n+            } else {\n+                max = m;\n+                fMax = fMid;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (++i >= maximalIterationCount) {\n+                throw new TooManyEvaluationsException(maximalIterationCount);\n             }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+            if (FastMath.abs(max - min) <= absoluteAccuracy) {\n+                final double mInternal = UnivariateSolverUtils.midpoint(min, max);\n+                if (allowed == AllowedSolution.ANY_SIDE ||\n+                    (allowed == AllowedSolution.LEFT_SIDE && getFunctionValueAccuracy() == 0 && fMax <= 0) ||\n+                    (allowed == AllowedSolution.RIGHT_SIDE && getFunctionValueAccuracy() == 0 && fMin >= 0)) {\n+                    return mInternal;\n+                }\n+                if (fMin * fMax <= 0) {\n+                    return mInternal;\n                 }\n+                if (allowed == AllowedSolution.LEFT_SIDE) {\n+                    return min;\n+                }\n+                if (allowed == AllowedSolution.RIGHT_SIDE) {\n+                    return max;\n+                }\n+                throw new MathIllegalStateException(\n+                        \"No bracketing for allowed solutions \" + allowed + \" \" + fMin + \" \" + fMax, min, max, fMin, fMax);\n             }\n         }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}