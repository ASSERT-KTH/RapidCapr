{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.CallSiteOptimizationPass.GraphChanges;\nimport com.google.javascript.jscomp.NodeTraversal.Callback;\nimport com.google.javascript.jscomp.Scope.Var;\n\nprivate void removeUnreferencedFunctionArgs(Scope fnScope, boolean modifyCallSites, Set<Var> referenced) {\n  // Notice that removing unreferenced function args breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers && argList != null) {\n    int numArgs = argList.getChildCount();\n    if (numArgs > 0) {\n      Node lastArg = null;\n      for (int i = numArgs - 1; i >= 0; i--) {\n        lastArg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      if (lastArg != null) {\n        lastArg.putBooleanProp(Node.IS_LAST_ARG, true);\n      }\n    }\n  } else if (modifyCallers) {\n    GraphChanges graphChanges = callSiteOptimizer.optimize(fnScope, referenced);\n    if (graphChanges.changedNode != null) {\n      NodeTraversal.traverse(compiler, graphChanges.changedNode, new Callback() {\n        @Override\n        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {\n          return true;\n        }\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (NodeUtil.isEntireFunctionDeclaration(n)) {\n            fnScope.getVar(n.getFirstChild().getString()).setInitialValue(n);\n            t.reportCodeChange();\n          }\n        }\n      });\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7466d5ad 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,32 +366,38 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.CallSiteOptimizationPass.GraphChanges;\n+import com.google.javascript.jscomp.NodeTraversal.Callback;\n+import com.google.javascript.jscomp.Scope.Var;\n+\n+private void removeUnreferencedFunctionArgs(Scope fnScope, boolean modifyCallSites, Set<Var> referenced) {\n+  // Notice that removing unreferenced function args breaks\n+  // Function.prototype.length. In advanced mode, we don't really care\n+  // about this: we consider \"length\" the equivalent of reflecting on\n+  // the function's lexical source.\n+  //\n+  // Rather than create a new option for this, we assume that if the user\n+  // is removing globals, then it's OK to remove unused function args.\n+  //\n+  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers && argList != null) {\n+    int numArgs = argList.getChildCount();\n+    if (numArgs > 0) {\n+      Node lastArg = null;\n+      for (int i = numArgs - 1; i >= 0; i--) {\n+        lastArg = argList.getChildAtIndex(i);\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n           argList.removeChild(lastArg);\n@@ -400,10 +406,30 @@ class RemoveUnusedVars\n           break;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      if (lastArg != null) {\n+        lastArg.putBooleanProp(Node.IS_LAST_ARG, true);\n+      }\n+    }\n+  } else if (modifyCallers) {\n+    GraphChanges graphChanges = callSiteOptimizer.optimize(fnScope, referenced);\n+    if (graphChanges.changedNode != null) {\n+      NodeTraversal.traverse(compiler, graphChanges.changedNode, new Callback() {\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {\n+          return true;\n+        }\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (NodeUtil.isEntireFunctionDeclaration(n)) {\n+            fnScope.getVar(n.getFirstChild().getString()).setInitialValue(n);\n+            t.reportCodeChange();\n+          }\n+        }\n+      });\n     }\n   }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}