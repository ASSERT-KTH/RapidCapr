{
    "patch": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    int visits = 0;\n    LinkedList<Node> traversalStack = new LinkedList<>();\n    traversalStack.push(node);\n    while(!traversalStack.isEmpty()) {\n        Node n = traversalStack.pop();\n        Node c = n.getFirstChild();\n        while(c != null) {\n            traversalStack.push(c);\n            c = c.getNext();\n        }\n        visit(n);\n        visits++;\n        if(visits >= 10000) {\n            throw new IllegalStateException(\"too many iterations\");\n        } \n        if (shouldRetraverse(node) && visits < 10000) {\n            traversalStack.push(n);\n        }\n    }\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..780bb023 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,37 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private void traverse(Node node) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n-\n-      visit(node);\n-      visits++;\n-\n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    LinkedList<Node> traversalStack = new LinkedList<>();\n+    traversalStack.push(node);\n+    while(!traversalStack.isEmpty()) {\n+        Node n = traversalStack.pop();\n+        Node c = n.getFirstChild();\n+        while(c != null) {\n+            traversalStack.push(c);\n+            c = c.getNext();\n+        }\n+        visit(n);\n+        visits++;\n+        if(visits >= 10000) {\n+            throw new IllegalStateException(\"too many iterations\");\n+        } \n+        if (shouldRetraverse(node) && visits < 10000) {\n+            traversalStack.push(n);\n+        }\n+    }\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}