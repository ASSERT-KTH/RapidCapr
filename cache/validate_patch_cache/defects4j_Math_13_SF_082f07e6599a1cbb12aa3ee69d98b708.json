{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SchurDecomposition dec = new SchurDecomposition(m);\n    final RealMatrix s = dec.getT().sqrt();\n    final RealMatrix v = dec.getV();\n    final RealMatrix vInv = v.inverse();\n    return v.multiply(s).multiply(vInv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d6f276de2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,11 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SchurDecomposition dec = new SchurDecomposition(m);\n+    final RealMatrix s = dec.getT().sqrt();\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vInv = v.inverse();\n+    return v.multiply(s).multiply(vInv);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}