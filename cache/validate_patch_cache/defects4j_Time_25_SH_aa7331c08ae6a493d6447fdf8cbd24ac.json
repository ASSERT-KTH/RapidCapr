{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // gap is between instantLocal - offsetAdjusted and nextAdjusted\n                    // calculate instantLocal + overlap to get to next valid instant\n                    int offsetOverlap = getOffset(nextAdjusted);\n                    if (offsetAdjusted != offsetOverlap) {\n                        nextAdjusted -= offsetAdjusted - offsetOverlap;\n                    }\n                    return getOffset(nextAdjusted);\n                }\n                return offsetLocal;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..131afa76 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // gap is between instantLocal - offsetAdjusted and nextAdjusted\n+                    // calculate instantLocal + overlap to get to next valid instant\n+                    int offsetOverlap = getOffset(nextAdjusted);\n+                    if (offsetAdjusted != offsetOverlap) {\n+                        nextAdjusted -= offsetAdjusted - offsetOverlap;\n+                    }\n+                    return getOffset(nextAdjusted);\n+                }\n+                return offsetLocal;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}