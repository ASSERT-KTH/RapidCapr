{
    "patch": "private static final double EPSILON = 1e-8;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n    final int n = m.getRowDimension();\n    double[] eigenvalues = d.getColumn(0);\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n        }\n        eigenvalues[i] = Math.sqrt(Math.max(0, eigenvalues[i]));\n    }\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n\n    // Check that the square of sqrtM is equal to m, within a given tolerance\n    final RealMatrix diff = sqrtM.multiply(sqrtM).subtract(m);\n    if (diff.getNorm() > EPSILON) {\n        throw new IllegalStateException(\"Square root computation failed \" +\n                \"(norm of difference between sqrtM * sqrtM and m is too large)\");\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..27f6136d2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static final double EPSILON = 1e-8;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+    final int n = m.getRowDimension();\n+    double[] eigenvalues = d.getColumn(0);\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive-semidefinite\");\n+        }\n+        eigenvalues[i] = Math.sqrt(Math.max(0, eigenvalues[i]));\n+    }\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+\n+    // Check that the square of sqrtM is equal to m, within a given tolerance\n+    final RealMatrix diff = sqrtM.multiply(sqrtM).subtract(m);\n+    if (diff.getNorm() > EPSILON) {\n+        throw new IllegalStateException(\"Square root computation failed \" +\n+                \"(norm of difference between sqrtM * sqrtM and m is too large)\");\n     }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.IllegalStateException: Square root computation failed (norm of difference between sqrtM LICENSE.txt NOTICE.txt PROPOSAL.html RELEASE-NOTES.txt all_tests build.xml checkstyle.xml defects4j.build.properties doap_math.rdf doc failing_tests findbugs-exclude-filter.xml license-header.txt math-RC.sh math-pre-RC.sh pom.xml siteMods src target test-jar.xml sqrtM and m is too large)",
    "test_result": "FAIL"
}