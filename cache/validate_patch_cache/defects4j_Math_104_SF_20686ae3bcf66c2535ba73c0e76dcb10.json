{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    final double lgm = Gamma.lgamma(a);\n    if (x <= a + 1.0) {\n        final double eps = 1e-9;\n        double sum = 1.0 / a;\n        double term = sum;\n        while (Math.abs(term) > eps * Math.abs(sum)) {\n            term *= x / (a + sum);\n            sum += term;\n        }\n        return Math.exp(-x + a * Math.log(x) - lgm) * sum;\n    }\n    return 1.0 - regularizedGammaQ(a, x);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    final double lgm = Gamma.lgamma(a);\n    /* continued fraction */\n    final double eps = 1e-9;\n    final double fpmin = 1e-30;\n    final double b = x + 1 - a;\n    double c = 1.0 / fpmin;\n    double d = 1.0 / b;\n    double h = d;\n    double an, del;\n    for (int i = 1; i <= 100; ++i) {\n        an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < fpmin) {\n            d = fpmin;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < fpmin) {\n            c = fpmin;\n        }\n        d = 1.0 / d;\n        del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < eps) {\n            return Math.exp(-x + a * Math.log(x) - lgm) * h;\n        }\n    }\n    throw new RuntimeException(\"a or x too large, or MAXITER reached\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..17dc820d5 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,66 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    final double lgm = Gamma.lgamma(a);\n+    if (x <= a + 1.0) {\n+        final double eps = 1e-9;\n+        double sum = 1.0 / a;\n+        double term = sum;\n+        while (Math.abs(term) > eps * Math.abs(sum)) {\n+            term *= x / (a + sum);\n+            sum += term;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - lgm) * sum;\n+    }\n+    return 1.0 - regularizedGammaQ(a, x);\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    final double lgm = Gamma.lgamma(a);\n+    /* continued fraction */\n+    final double eps = 1e-9;\n+    final double fpmin = 1e-30;\n+    final double b = x + 1 - a;\n+    double c = 1.0 / fpmin;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an, del;\n+    for (int i = 1; i <= 100; ++i) {\n+        an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < fpmin) {\n+            d = fpmin;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < fpmin) {\n+            c = fpmin;\n+        }\n+        d = 1.0 / d;\n+        del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < eps) {\n+            return Math.exp(-x + a * Math.log(x) - lgm) * h;\n+        }\n+    }\n+    throw new RuntimeException(\"a or x too large, or MAXITER reached\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}