{
    "patch": "        T type;\n        if (child.isString()) {\n          String name = child.getString();\n          type = typeSystem.getType(getScope(), n, name);\n        } else if (child.isGetterDef() || child.isSetterDef()) {\n          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(child);\n          if (jsDoc.containsDeclaration()) {\n            String name = jsDoc.getDeclarationName();\n            type = typeSystem.getType(getScope(), n, name);\n          } else {\n            type = null;\n          }\n        } else {\n          throw new IllegalStateException(\n              \"Unexpected OBJECTLIT child: \" + child.toStringTree());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..9285e7e3 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,22 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        T type;\n+        if (child.isString()) {\n+          String name = child.getString();\n+          type = typeSystem.getType(getScope(), n, name);\n+        } else if (child.isGetterDef() || child.isSetterDef()) {\n+          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(child);\n+          if (jsDoc.containsDeclaration()) {\n+            String name = jsDoc.getDeclarationName();\n+            type = typeSystem.getType(getScope(), n, name);\n+          } else {\n+            type = null;\n+          }\n+        } else {\n+          throw new IllegalStateException(\n+              \"Unexpected OBJECTLIT child: \" + child.toStringTree());\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}