{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() &&\n           parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    } else if (numArgs > maxArgs) {\n        // The following if-else block was added to fix the issue:\n        if (maxArgs < functionType.getParameters().size()) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        } else {\n            Node lastParam = functionType.getParameters().get(functionType.getParameters().size() - 1);\n            for (int i = functionType.getParameters().size(); i < numArgs; i++) {\n                validator.expectArgumentMatchesParameter(t, arguments.next(),\n                        getJSType(arguments.next()), getJSType(lastParam), call, i+1);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..eadbe3f7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1407,27 +1407,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Node argument = null;\n     while (arguments.hasNext() &&\n            parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        argument = arguments.next();\n+        ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n+    if (numArgs < minArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    } else if (numArgs > maxArgs) {\n+        // The following if-else block was added to fix the issue:\n+        if (maxArgs < functionType.getParameters().size()) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(numArgs), String.valueOf(minArgs),\n+              maxArgs != Integer.MAX_VALUE ?\n+              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        } else {\n+            Node lastParam = functionType.getParameters().get(functionType.getParameters().size() - 1);\n+            for (int i = functionType.getParameters().size(); i < numArgs; i++) {\n+                validator.expectArgumentMatchesParameter(t, arguments.next(),\n+                        getJSType(arguments.next()), getJSType(lastParam), call, i+1);\n+            }\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}