{
    "patch": "if (callNode.getParent().isExprResult()\n              && callNode.hasOneChild()\n              && callNode.getFirstChild().isAssign()) {\n            Node assignment = callNode.getFirstChild();\n            if (assignment.hasOneChild()\n                && assignment.getFirstChild().isGetProp()) {\n              value = assignment.getFirstChild();\n            } else {\n              // Do not inline the result of the call if it is not assigned to\n              // a simple qualified name (e.g. x) but produce a warning instead.\n              // This avoids problems with inlining calls that define new variables,\n              // e.g. `var x = foo()`.\n              compiler.report(JSError.make(\n                  NOT_SIMPLE_QUALIFIED_NAME_ERROR, callNode));\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..7c8c64a9 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,23 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (callNode.getParent().isExprResult()\n+              && callNode.hasOneChild()\n+              && callNode.getFirstChild().isAssign()) {\n+            Node assignment = callNode.getFirstChild();\n+            if (assignment.hasOneChild()\n+                && assignment.getFirstChild().isGetProp()) {\n+              value = assignment.getFirstChild();\n+            } else {\n+              // Do not inline the result of the call if it is not assigned to\n+              // a simple qualified name (e.g. x) but produce a warning instead.\n+              // This avoids problems with inlining calls that define new variables,\n+              // e.g. `var x = foo()`.\n+              compiler.report(JSError.make(\n+                  NOT_SIMPLE_QUALIFIED_NAME_ERROR, callNode));\n+              return false;\n+            }\n+          }\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}