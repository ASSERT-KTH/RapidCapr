{
    "patch": "protected BasePeriod(long duration) {\n    if (duration == 0) { // Handle zero duration case separately\n        this.duration = duration;\n        return;\n    }\n    int[] fieldValues = new int[7];\n    int[] fieldTypes = { DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.weeks(),\n                         DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(),\n                         DurationFieldType.seconds() };\n    for (int i = 0; i < fieldTypes.length; i++) {\n        DurationFieldType fieldType = fieldTypes[i];\n        if (fieldType.equals(DurationFieldType.weeks())) {\n            fieldValues[i] = (int) (duration / (7 * MILLIS_PER_DAY));\n        } else {\n            fieldValues[i] = (int) (duration / fieldType.getField(null).getUnitMillis());\n        }\n        duration -= fieldValues[i] * fieldType.getField(null).getUnitMillis();\n    }\n    this.duration = new Period(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4],\n            fieldValues[5], fieldValues[6]).toStandardDuration().getMillis();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..3e1e63aa 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,27 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    if (duration == 0) { // Handle zero duration case separately\n+        this.duration = duration;\n+        return;\n+    }\n+    int[] fieldValues = new int[7];\n+    int[] fieldTypes = { DurationFieldType.years(), DurationFieldType.months(), DurationFieldType.weeks(),\n+                         DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(),\n+                         DurationFieldType.seconds() };\n+    for (int i = 0; i < fieldTypes.length; i++) {\n+        DurationFieldType fieldType = fieldTypes[i];\n+        if (fieldType.equals(DurationFieldType.weeks())) {\n+            fieldValues[i] = (int) (duration / (7 * MILLIS_PER_DAY));\n+        } else {\n+            fieldValues[i] = (int) (duration / fieldType.getField(null).getUnitMillis());\n+        }\n+        duration -= fieldValues[i] * fieldType.getField(null).getUnitMillis();\n     }\n+    this.duration = new Period(fieldValues[0], fieldValues[1], fieldValues[2], fieldValues[3], fieldValues[4],\n+            fieldValues[5], fieldValues[6]).toStandardDuration().getMillis();\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}