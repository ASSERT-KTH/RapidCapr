{
    "patch": "private static synchronized String getConvertedId(String id) {\n    Map<String, String> map = cZoneIdConversion;\n    if (map == null) {\n        // Double-check locking to avoid race conditions.\n        map = new HashMap<String, String>();\n        map.put(\"MIT\", \"Pacific/Midway\");\n        map.put(\"HST\", \"Pacific/Honolulu\");\n        map.put(\"AST\", \"America/Anchorage\");\n        map.put(\"PST\", \"America/Los_Angeles\");\n        map.put(\"MST\", \"America/Denver\");\n        map.put(\"CST\", \"America/Chicago\");\n        map.put(\"EST\", \"America/New_York\");\n        map.put(\"IET\", \"America/Indiana/Indianapolis\");\n        map.put(\"PRT\", \"America/Puerto_Rico\");\n        map.put(\"CNT\", \"America/St_Johns\");\n        map.put(\"GMT\", \"Etc/GMT\");\n        map.put(\"UTC\", \"Etc/UTC\");\n        map.put(\"CET\", \"Europe/Paris\");\n        map.put(\"MET\", \"Europe/Berlin\");\n        map.put(\"EET\", \"Europe/Istanbul\");\n        map.put(\"WET\", \"Europe/Lisbon\");\n        map.put(\"EGT\", \"Atlantic/Azores\");\n        map.put(\"ART\", \"Africa/Cairo\");\n        map.put(\"CAT\", \"Africa/Harare\");\n        map.put(\"HKT\", \"Asia/Hong_Kong\");\n        map.put(\"JST\", \"Asia/Tokyo\");\n        map.put(\"KST\", \"Asia/Seoul\");\n        map.put(\"ICT\", \"Asia/Bangkok\");\n        map.put(\"SST\", \"Pacific/Guadalcanal\");\n        map.put(\"NZT\", \"Pacific/Auckland\");\n        cZoneIdConversion = map;\n    }\n    String zoneId = map.get(id);\n    if (zoneId == null) {\n        // Resolve inconsistencies between Java timezone IDs and IANA timezone database IDs.\n        switch (id) {\n            case \"GMT\":\n            case \"UTC\":\n                zoneId = \"Etc/\" + id;\n                break;\n            case \"ACT\":\n                zoneId = \"Australia/Darwin\";\n                break;\n            case \"AET\":\n                zoneId = \"Australia/Sydney\";\n                break;\n            case \"AGT\":\n                zoneId = \"America/Argentina/Buenos_Aires\";\n                break;\n            case \"ART\":\n                zoneId = \"Africa/Cairo\";\n                break;\n            case \"AST\":\n                zoneId = \"America/Anchorage\";\n                break;\n            case \"BET\":\n                zoneId = \"America/Sao_Paulo\";\n                break;\n            case \"BST\":\n                zoneId = \"Asia/Dhaka\";\n                break;\n            case \"CAT\":\n                zoneId = \"Africa/Harare\";\n                break;\n            case \"CNT\":\n                zoneId = \"America/St_Johns\";\n                break;\n            case \"CST\":\n                zoneId = \"America/Chicago\";\n                break;\n            case \"CTT\":\n                zoneId = \"Asia/Shanghai\";\n                break;\n            case \"EAT\":\n                zoneId = \"Africa/Addis_Ababa\";\n                break;\n            case \"ECT\":\n                zoneId = \"Europe/Paris\";\n                break;\n            case \"EST\":\n                zoneId = \"America/New_York\";\n                break;\n            case \"GST\":\n                zoneId = \"Asia/Dubai\";\n                break;\n            case \"IET\":\n                zoneId = \"America/Indiana/Indianapolis\";\n                break;\n            case \"IST\":\n                zoneId = \"Asia/Kolkata\";\n                break;\n            case \"JST\":\n                zoneId = \"Asia/Tokyo\";\n                break;\n            case \"MET\":\n                zoneId = \"Europe/Berlin\";\n                break;\n            case \"MIT\":\n                zoneId = \"Pacific/Midway\";\n                break;\n            case \"NET\":\n                zoneId = \"Asia/Yerevan\";\n                break;\n            case \"NST\":\n                zoneId = \"Pacific/Auckland\";\n                break;\n            case \"PLT\":\n                zoneId = \"Asia/Karachi\";\n                break;\n            case \"PNT\":\n                zoneId = \"America/Phoenix\";\n                break;\n            case \"PRT\":\n                zoneId = \"America/Puerto_Rico\";\n                break;\n            case \"PST\":\n                zoneId = \"America/Los_Angeles\";\n                break;\n            case \"SST\":\n                zoneId = \"Pacific/Guadalcanal\";\n                break;\n            case \"VST\":\n                zoneId = \"Asia/Ho_Chi_Minh\";\n                break;\n            case \"EST5EDT\":\n                zoneId = \"America/New_York\";\n                break;\n            case \"CST6CDT\":\n                zoneId = \"America/Chicago\";\n                break;\n            case \"MST7MDT\":\n                zoneId = \"America/Denver\";\n                break;\n            case \"PST8PDT\":\n                zoneId = \"America/Los_Angeles\";\n                break;\n            default:\n                zoneId = id;\n                break;\n        }\n    }\n    return zoneId;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 5d89e34b..bb86cb07 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -555,47 +555,149 @@ public abstract class DateTimeZone implements Serializable {\n      * @param id  the old style id\n      * @return the new style id, null if not found\n      */\n-    private static synchronized String getConvertedId(String id) {\n-        Map<String, String> map = cZoneIdConversion;\n-        if (map == null) {\n-            // Backwards compatibility with TimeZone.\n-            map = new HashMap<String, String>();\n-            map.put(\"GMT\", \"UTC\");\n-            map.put(\"MIT\", \"Pacific/Apia\");\n-            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n-            map.put(\"AST\", \"America/Anchorage\");\n-            map.put(\"PST\", \"America/Los_Angeles\");\n-            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n-            map.put(\"PNT\", \"America/Phoenix\");\n-            map.put(\"CST\", \"America/Chicago\");\n-            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n-            map.put(\"IET\", \"America/Indianapolis\");\n-            map.put(\"PRT\", \"America/Puerto_Rico\");\n-            map.put(\"CNT\", \"America/St_Johns\");\n-            map.put(\"AGT\", \"America/Buenos_Aires\");\n-            map.put(\"BET\", \"America/Sao_Paulo\");\n-            map.put(\"WET\", \"Europe/London\");\n-            map.put(\"ECT\", \"Europe/Paris\");\n-            map.put(\"ART\", \"Africa/Cairo\");\n-            map.put(\"CAT\", \"Africa/Harare\");\n-            map.put(\"EET\", \"Europe/Bucharest\");\n-            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n-            map.put(\"MET\", \"Asia/Tehran\");\n-            map.put(\"NET\", \"Asia/Yerevan\");\n-            map.put(\"PLT\", \"Asia/Karachi\");\n-            map.put(\"IST\", \"Asia/Calcutta\");\n-            map.put(\"BST\", \"Asia/Dhaka\");\n-            map.put(\"VST\", \"Asia/Saigon\");\n-            map.put(\"CTT\", \"Asia/Shanghai\");\n-            map.put(\"JST\", \"Asia/Tokyo\");\n-            map.put(\"ACT\", \"Australia/Darwin\");\n-            map.put(\"AET\", \"Australia/Sydney\");\n-            map.put(\"SST\", \"Pacific/Guadalcanal\");\n-            map.put(\"NST\", \"Pacific/Auckland\");\n-            cZoneIdConversion = map;\n+private static synchronized String getConvertedId(String id) {\n+    Map<String, String> map = cZoneIdConversion;\n+    if (map == null) {\n+        // Double-check locking to avoid race conditions.\n+        map = new HashMap<String, String>();\n+        map.put(\"MIT\", \"Pacific/Midway\");\n+        map.put(\"HST\", \"Pacific/Honolulu\");\n+        map.put(\"AST\", \"America/Anchorage\");\n+        map.put(\"PST\", \"America/Los_Angeles\");\n+        map.put(\"MST\", \"America/Denver\");\n+        map.put(\"CST\", \"America/Chicago\");\n+        map.put(\"EST\", \"America/New_York\");\n+        map.put(\"IET\", \"America/Indiana/Indianapolis\");\n+        map.put(\"PRT\", \"America/Puerto_Rico\");\n+        map.put(\"CNT\", \"America/St_Johns\");\n+        map.put(\"GMT\", \"Etc/GMT\");\n+        map.put(\"UTC\", \"Etc/UTC\");\n+        map.put(\"CET\", \"Europe/Paris\");\n+        map.put(\"MET\", \"Europe/Berlin\");\n+        map.put(\"EET\", \"Europe/Istanbul\");\n+        map.put(\"WET\", \"Europe/Lisbon\");\n+        map.put(\"EGT\", \"Atlantic/Azores\");\n+        map.put(\"ART\", \"Africa/Cairo\");\n+        map.put(\"CAT\", \"Africa/Harare\");\n+        map.put(\"HKT\", \"Asia/Hong_Kong\");\n+        map.put(\"JST\", \"Asia/Tokyo\");\n+        map.put(\"KST\", \"Asia/Seoul\");\n+        map.put(\"ICT\", \"Asia/Bangkok\");\n+        map.put(\"SST\", \"Pacific/Guadalcanal\");\n+        map.put(\"NZT\", \"Pacific/Auckland\");\n+        cZoneIdConversion = map;\n+    }\n+    String zoneId = map.get(id);\n+    if (zoneId == null) {\n+        // Resolve inconsistencies between Java timezone IDs and IANA timezone database IDs.\n+        switch (id) {\n+            case \"GMT\":\n+            case \"UTC\":\n+                zoneId = \"Etc/\" + id;\n+                break;\n+            case \"ACT\":\n+                zoneId = \"Australia/Darwin\";\n+                break;\n+            case \"AET\":\n+                zoneId = \"Australia/Sydney\";\n+                break;\n+            case \"AGT\":\n+                zoneId = \"America/Argentina/Buenos_Aires\";\n+                break;\n+            case \"ART\":\n+                zoneId = \"Africa/Cairo\";\n+                break;\n+            case \"AST\":\n+                zoneId = \"America/Anchorage\";\n+                break;\n+            case \"BET\":\n+                zoneId = \"America/Sao_Paulo\";\n+                break;\n+            case \"BST\":\n+                zoneId = \"Asia/Dhaka\";\n+                break;\n+            case \"CAT\":\n+                zoneId = \"Africa/Harare\";\n+                break;\n+            case \"CNT\":\n+                zoneId = \"America/St_Johns\";\n+                break;\n+            case \"CST\":\n+                zoneId = \"America/Chicago\";\n+                break;\n+            case \"CTT\":\n+                zoneId = \"Asia/Shanghai\";\n+                break;\n+            case \"EAT\":\n+                zoneId = \"Africa/Addis_Ababa\";\n+                break;\n+            case \"ECT\":\n+                zoneId = \"Europe/Paris\";\n+                break;\n+            case \"EST\":\n+                zoneId = \"America/New_York\";\n+                break;\n+            case \"GST\":\n+                zoneId = \"Asia/Dubai\";\n+                break;\n+            case \"IET\":\n+                zoneId = \"America/Indiana/Indianapolis\";\n+                break;\n+            case \"IST\":\n+                zoneId = \"Asia/Kolkata\";\n+                break;\n+            case \"JST\":\n+                zoneId = \"Asia/Tokyo\";\n+                break;\n+            case \"MET\":\n+                zoneId = \"Europe/Berlin\";\n+                break;\n+            case \"MIT\":\n+                zoneId = \"Pacific/Midway\";\n+                break;\n+            case \"NET\":\n+                zoneId = \"Asia/Yerevan\";\n+                break;\n+            case \"NST\":\n+                zoneId = \"Pacific/Auckland\";\n+                break;\n+            case \"PLT\":\n+                zoneId = \"Asia/Karachi\";\n+                break;\n+            case \"PNT\":\n+                zoneId = \"America/Phoenix\";\n+                break;\n+            case \"PRT\":\n+                zoneId = \"America/Puerto_Rico\";\n+                break;\n+            case \"PST\":\n+                zoneId = \"America/Los_Angeles\";\n+                break;\n+            case \"SST\":\n+                zoneId = \"Pacific/Guadalcanal\";\n+                break;\n+            case \"VST\":\n+                zoneId = \"Asia/Ho_Chi_Minh\";\n+                break;\n+            case \"EST5EDT\":\n+                zoneId = \"America/New_York\";\n+                break;\n+            case \"CST6CDT\":\n+                zoneId = \"America/Chicago\";\n+                break;\n+            case \"MST7MDT\":\n+                zoneId = \"America/Denver\";\n+                break;\n+            case \"PST8PDT\":\n+                zoneId = \"America/Los_Angeles\";\n+                break;\n+            default:\n+                zoneId = id;\n+                break;\n         }\n-        return map.get(id);\n     }\n+    return zoneId;\n+}\n \n     private static int parseOffset(String str) {\n         // Can't use a real chronology if called during class",
    "result_reason": "error: strings in switch are not supported in -source 1.5",
    "test_result": "ERROR"
}