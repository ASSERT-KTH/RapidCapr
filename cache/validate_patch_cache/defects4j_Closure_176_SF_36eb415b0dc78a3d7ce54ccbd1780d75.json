{
    "patch": "private void inferDeclaration(NodeTraversal t, Node declaration, JSType exprType) {\n    Preconditions.checkState(declaration.isName());\n    String name = declaration.getString();\n    Var var = t.getScope().getVar(name);\n    // Check that the var is defined.\n    if (var == null) {\n      return;\n    }\n    Node value = declaration.getFirstChild();\n    boolean valueIsNullOrFunction = value == null || value.isFunction();\n    // The new type is inferred if:\n    // - the var is inferred\n    // - the var has an inferred type\n    // - the var has no type, but the value is either null or a function\n    if (var.isInferred() || var.isTypeInferred() ||\n        (var.getType() == null && valueIsNullOrFunction)) {\n      JSType declaredType = var.getType();\n      JSType newType;\n      if (value != null && !valueIsNullOrFunction &&\n          (declaredType == null || declaredType.isUnknown())) {\n        // Inferring a declared variable with an unknown type.\n        newType = getJSType(value);\n      } else if (exprType != null) {\n        newType = exprType;\n        if (declaredType != null && !declaredType.isUnknown()) {\n          JSType narrowedType = narrowType(var, declaredType, exprType);\n          if (narrowedType != null) {\n            newType = narrowedType;\n          }\n        }\n      } else {\n        // For now we assume inferred constructors will be anonymous, and mark\n        // them unannotatable. We may later add support for arbitrary functions\n        // to be inferred and annotated.\n        Preconditions.checkState(\n            valueIsNullOrFunction || (var.isInferred() && var.isConstructor()));\n        ObjectType type = ObjectType.cast(getJSType(value));\n        // Anonymous functions should not become types. We do not want\n        // this.typeCheckingHasFailed() to be true for example1.js\n        if (type == null || (type.isFunctionType() && !var.isInferred())) {\n          return;\n        }\n        newType = registry.createConstructorObjectUnion(type);\n      }\n      if (!typeMismatch(declaredType, newType)) {\n        var.setType(newType);\n      } else {\n        t.report(declaration, TYPE_MISMATCH_WARNING,\n            var.getName(), declaredType.toString(), newType.toString());\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex c43a7d1a..97cdbad2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -521,109 +521,58 @@ class TypeInference\n    * an assignment or a type cast.\n    */\n   private void updateScopeForTypeChange(\n-      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n-    Preconditions.checkNotNull(resultType);\n-    switch (left.getType()) {\n-      case Token.NAME:\n-        String varName = left.getString();\n-        Var var = syntacticScope.getVar(varName);\n-        boolean isVarDeclaration = left.hasChildren();\n-\n-        // When looking at VAR initializers for declared VARs, we tend\n-        // to use the declared type over the type it's being\n-        // initialized to in the global scope.\n-        //\n-        // For example,\n-        // /** @param {number} */ var f = goog.abstractMethod;\n-        // it's obvious that the programmer wants you to use\n-        // the declared function signature, not the inferred signature.\n-        //\n-        // Or,\n-        // /** @type {Object.<string>} */ var x = {};\n-        // the one-time anonymous object on the right side\n-        // is as narrow as it can possibly be, but we need to make\n-        // sure we back-infer the <string> element constraint on\n-        // the left hand side, so we use the left hand side.\n-\n-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n-            // Makes it easier to check for NPEs.\n-\n-        // TODO(nicksantos): This might be a better check once we have\n-        // back-inference of object/array constraints.  It will probably\n-        // introduce more type warnings.  It uses the result type iff it's\n-        // strictly narrower than the declared var type.\n-        //\n-        //boolean isVarTypeBetter = isVarDeclaration &&\n-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)\n-        //     || !resultType.isSubtype(varType));\n-\n-\n-        if (isVarTypeBetter) {\n-          redeclareSimpleVar(scope, left, resultType);\n-        }\n-        left.setJSType(isVarDeclaration || leftType == null ?\n-            resultType : null);\n-\n-        if (var != null && var.isTypeInferred()) {\n-          JSType oldType = var.getType();\n-          var.setType(oldType == null ?\n-              resultType : oldType.getLeastSupertype(resultType));\n-        }\n-        break;\n-      case Token.GETPROP:\n-        String qualifiedName = left.getQualifiedName();\n-        if (qualifiedName != null) {\n-          scope.inferQualifiedSlot(left, qualifiedName,\n-              leftType == null ? unknownType : leftType,\n-              resultType);\n-        }\n-\n-        left.setJSType(resultType);\n-        ensurePropertyDefined(left, resultType);\n-        break;\n+private void inferDeclaration(NodeTraversal t, Node declaration, JSType exprType) {\n+    Preconditions.checkState(declaration.isName());\n+    String name = declaration.getString();\n+    Var var = t.getScope().getVar(name);\n+    // Check that the var is defined.\n+    if (var == null) {\n+      return;\n     }\n-  }\n-\n-  /**\n-   * Defines a property if the property has not been defined yet.\n-   */\n-  private void ensurePropertyDefined(Node getprop, JSType rightType) {\n-    String propName = getprop.getLastChild().getString();\n-    Node obj = getprop.getFirstChild();\n-    JSType nodeType = getJSType(obj);\n-    ObjectType objectType = ObjectType.cast(\n-        nodeType.restrictByNotNullOrUndefined());\n-    boolean propCreationInConstructor = obj.isThis() &&\n-        getJSType(syntacticScope.getRootNode()).isConstructor();\n-\n-    if (objectType == null) {\n-      registry.registerPropertyOnType(propName, nodeType);\n-    } else {\n-      if (nodeType.isStruct() && !objectType.hasProperty(propName)) {\n-        // In general, we don't want to define a property on a struct object,\n-        // b/c TypeCheck will later check for improper property creation on\n-        // structs. There are two exceptions.\n-        // 1) If it's a property created inside the constructor, on the newly\n-        //    created instance, allow it.\n-        // 2) If it's a prototype property, allow it. For example:\n-        //    Foo.prototype.bar = baz;\n-        //    where Foo.prototype is a struct and the assignment happens at the\n-        //    top level and the constructor Foo is defined in the same file.\n-        boolean staticPropCreation = false;\n-        Node maybeAssignStm = getprop.getParent().getParent();\n-        if (syntacticScope.isGlobal() &&\n-            NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)) {\n-          String propCreationFilename = maybeAssignStm.getSourceFileName();\n-          Node ctor = objectType.getOwnerFunction().getSource();\n-          if (ctor != null &&\n-              ctor.getSourceFileName().equals(propCreationFilename)) {\n-            staticPropCreation = true;\n+    Node value = declaration.getFirstChild();\n+    boolean valueIsNullOrFunction = value == null || value.isFunction();\n+    // The new type is inferred if:\n+    // - the var is inferred\n+    // - the var has an inferred type\n+    // - the var has no type, but the value is either null or a function\n+    if (var.isInferred() || var.isTypeInferred() ||\n+        (var.getType() == null && valueIsNullOrFunction)) {\n+      JSType declaredType = var.getType();\n+      JSType newType;\n+      if (value != null && !valueIsNullOrFunction &&\n+          (declaredType == null || declaredType.isUnknown())) {\n+        // Inferring a declared variable with an unknown type.\n+        newType = getJSType(value);\n+      } else if (exprType != null) {\n+        newType = exprType;\n+        if (declaredType != null && !declaredType.isUnknown()) {\n+          JSType narrowedType = narrowType(var, declaredType, exprType);\n+          if (narrowedType != null) {\n+            newType = narrowedType;\n           }\n         }\n-        if (!propCreationInConstructor && !staticPropCreation) {\n-          return; // Early return to avoid creating the property below.\n+      } else {\n+        // For now we assume inferred constructors will be anonymous, and mark\n+        // them unannotatable. We may later add support for arbitrary functions\n+        // to be inferred and annotated.\n+        Preconditions.checkState(\n+            valueIsNullOrFunction || (var.isInferred() && var.isConstructor()));\n+        ObjectType type = ObjectType.cast(getJSType(value));\n+        // Anonymous functions should not become types. We do not want\n+        // this.typeCheckingHasFailed() to be true for example1.js\n+        if (type == null || (type.isFunctionType() && !var.isInferred())) {\n+          return;\n         }\n+        newType = registry.createConstructorObjectUnion(type);\n+      }\n+      if (!typeMismatch(declaredType, newType)) {\n+        var.setType(newType);\n+      } else {\n+        t.report(declaration, TYPE_MISMATCH_WARNING,\n+            var.getName(), declaredType.toString(), newType.toString());\n       }\n+    }\n+  }\n \n       if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n         return;",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}