{
    "patch": "    boolean warned = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // check if the warning has already been detected\n    // and only trigger it if it hasn't\n    JSType maybeFnType = this;\n    if (!maybeFnType.isConstructor() &&\n        maybeFnType.isInterface() &&\n        registry.getInput().hasJSWarning(\n            JSC_IMPLEMENTS_NON_INTERFACE, getPropName())) {\n      warned = true;\n    }\n\n    super.resolveInternal(t, enclosing);\n\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    // trigger the warning if it hasn't been detected yet\n    if (!warned && !maybeFnType.isConstructor() &&\n        maybeFnType.isInterface() &&\n        registry.getInput().getCompilerOptions().enables(\n            DiagnosticGroups.ES5_STRICT_MODE)) {\n      t.warning(\n          JSC_IMPLEMENTS_NON_INTERFACE, getPropName().getRoot(), \"\");",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..79da5bfc 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,14 +181,11 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean warned = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n+      return registry.isLastGeneration() ?\n+          getReferencedType() : this;\n     }\n \n     if (resolved) {\n@@ -198,18 +195,29 @@ class NamedType extends ProxyObjectType {\n           getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // check if the warning has already been detected\n+    // and only trigger it if it hasn't\n+    JSType maybeFnType = this;\n+    if (!maybeFnType.isConstructor() &&\n+        maybeFnType.isInterface() &&\n+        registry.getInput().hasJSWarning(\n+            JSC_IMPLEMENTS_NON_INTERFACE, getPropName())) {\n+      warned = true;\n     }\n \n     super.resolveInternal(t, enclosing);\n+\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    // trigger the warning if it hasn't been detected yet\n+    if (!warned && !maybeFnType.isConstructor() &&\n+        maybeFnType.isInterface() &&\n+        registry.getInput().getCompilerOptions().enables(\n+            DiagnosticGroups.ES5_STRICT_MODE)) {\n+      t.warning(\n+          JSC_IMPLEMENTS_NON_INTERFACE, getPropName().getRoot(), \"\");\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}