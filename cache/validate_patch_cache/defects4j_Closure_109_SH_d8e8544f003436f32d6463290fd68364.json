{
    "patch": "    if (token.type == JsDocToken.Type.NAME || token.type == JsDocToken.Type.SPECIAL) {\n          return parseTypeName(token);\n    } else if (token.type == JsDocToken.Type.BRACE_OPEN) {\n          return parseObjectType(token);\n    } else if (token.type == JsDocToken.Type.ARRAY_OPEN) {\n          return parseArrayType(token);\n    }\n    reportError(\"Bad type annotation. type not recognized due to syntax error\");\n    return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..83143c18 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,15 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n+    if (token.type == JsDocToken.Type.NAME || token.type == JsDocToken.Type.SPECIAL) {\n           return parseTypeName(token);\n+    } else if (token.type == JsDocToken.Type.BRACE_OPEN) {\n+          return parseObjectType(token);\n+    } else if (token.type == JsDocToken.Type.ARRAY_OPEN) {\n+          return parseArrayType(token);\n+    }\n+    reportError(\"Bad type annotation. type not recognized due to syntax error\");\n+    return null;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}