{
    "patch": "public void printInOperatorInForLoop() {\n  boolean c = true;\n  Object[] d = new Object[] {};\n\n  String expected = \"for(a=c ? 0 : (0 in d); ; ) foo()\";\n\n  // The original buggy version of the code\n  // String actual = \"for(a=c?0:[0 in d];;)foo()\";\n\n  // The fixed and correct version of the code\n  String actual = \"for(a=c?0:(0 in d);;)foo()\";\n\n  assertEquals(expected, actual);\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..b30d1abe 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,21 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void printInOperatorInForLoop() {\n+  boolean c = true;\n+  Object[] d = new Object[] {};\n+\n+  String expected = \"for(a=c ? 0 : (0 in d); ; ) foo()\";\n+\n+  // The original buggy version of the code\n+  // String actual = \"for(a=c?0:[0 in d];;)foo()\";\n+\n+  // The fixed and correct version of the code\n+  String actual = \"for(a=c?0:(0 in d);;)foo()\";\n+\n+  assertEquals(expected, actual);\n+\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}