{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n    int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException {\n\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    long instant = 0;\n    boolean isJulianCalendar = false;\n    if (year < 1582 || (year == 1582 && monthOfYear < 10) ||\n            (year == 1582 && monthOfYear == 10 && dayOfMonth < 15)) {\n        isJulianCalendar = true;\n    }\n    if (isJulianCalendar) {\n        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    } else {\n        try {\n            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalFieldValueException e) {\n            if (dayOfMonth == 0 || (dayOfMonth == 29 && monthOfYear == Calendar.FEBRUARY)) {\n                instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, 28,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                instant = new LocalDate(instant).plusMonths(1).getMillis();\n            } else {\n                throw e;\n            }\n        }\n        if (instant < iCutoverMillis) {\n            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n    }\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..efe8b693 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,51 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+    int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n+    throws IllegalArgumentException {\n+\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    long instant = 0;\n+    boolean isJulianCalendar = false;\n+    if (year < 1582 || (year == 1582 && monthOfYear < 10) ||\n+            (year == 1582 && monthOfYear == 10 && dayOfMonth < 15)) {\n+        isJulianCalendar = true;\n+    }\n+    if (isJulianCalendar) {\n+        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (instant >= iCutoverMillis) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n+        }\n+    } else {\n+        try {\n+            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalFieldValueException e) {\n+            if (dayOfMonth == 0 || (dayOfMonth == 29 && monthOfYear == Calendar.FEBRUARY)) {\n+                instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, 28,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                instant = new LocalDate(instant).plusMonths(1).getMillis();\n+            } else {\n+                throw e;\n+            }\n+        }\n         if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n+            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant < iCutoverMillis) {\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n         }\n-        return instant;\n     }\n+    return instant;\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}