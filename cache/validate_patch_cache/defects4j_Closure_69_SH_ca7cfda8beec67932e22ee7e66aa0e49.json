{
    "patch": "      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n      if (jsDocInfo != null && jsDocInfo.hasThisType()) {\n        Node parent = n.getParent();\n        if (parent == null || (parent.isGetProp() || parent.isGetElem())) {\n          visitParameterList(t, n, functionType);\n          ensureTyped(t, n, functionType.getReturnType());\n        } else {\n          report(t, n, ILLEGAL_THIS);\n        }\n      } else {\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c3bb3954 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n+      if (jsDocInfo != null && jsDocInfo.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (parent == null || (parent.isGetProp() || parent.isGetElem())) {\n+          visitParameterList(t, n, functionType);\n+          ensureTyped(t, n, functionType.getReturnType());\n+        } else {\n+          report(t, n, ILLEGAL_THIS);\n+        }\n+      } else {\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}