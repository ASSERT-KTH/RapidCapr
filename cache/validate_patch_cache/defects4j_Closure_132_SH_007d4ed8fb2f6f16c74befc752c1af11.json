{
    "patch": "                return newExpr;\n              }\n            }\n          }\n          // if(x)foo();else bar(); -> x?foo():bar()\n          Node hookNode = IR.hook(cond, getBlockExpression(thenBranch).detachFromParent(), getBlockExpression(elseBranch).detachFromParent()).srcref(n);\n          Node expr = NodeUtil.newExpr(hookNode);\n          parent.replaceChild(n, expr);\n          reportCodeChange();\n          return expr;\n        } else if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n                   getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n          Node var = getBlockVar(thenBranch);\n          Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n\n          Node name1 = var.getFirstChild();\n          Node maybeName2 = elseAssign.getFirstChild();\n\n          if (name1.hasChildren()\n              && maybeName2.isName()\n              && name1.getString().equals(maybeName2.getString())) {\n            Node thenExpr = name1.removeChildren();\n            Node elseExpr = elseAssign.getLastChild().detachFromParent();\n            cond.detachFromParent();\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n);\n            var.detachFromParent();\n            name1.addChildrenToBack(hookNode);\n            parent.replaceChild(n, var);\n            reportCodeChange();\n            return var;\n          }\n\n        // if(x)y=1;else var y=2  ->  var y=x?1:2\n        } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n                   getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n\n          Node var = getBlockVar(elseBranch);\n          Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n          Node maybeName1 = thenAssign.getFirstChild();\n          Node name2 = var.getFirstChild();\n\n          if (name2.hasChildren()\n              && maybeName1.isName()\n              && maybeName1.getString().equals(name2.getString())) {\n            Node thenExpr = thenAssign.getLastChild().detachFromParent();\n            Node elseExpr = name2.removeChildren();\n            cond.detachFromParent();\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            var.detachFromParent();\n            name2.addChildrenToBack(hookNode);\n            parent.replaceChild(n, var);\n            reportCodeChange();\n\n            return var;\n          }\n        }\n      } else if (elseBranch.isEmpty()) {\n        Node notConst = IR.not(cond.detachFromParent()).srcref(n);\n        parent.replaceChild(n, notConst);\n        reportCodeChange();\n        return tryMinimizeIf(notConst);\n      } else if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n        Node thenExpr = getBlockReturnExpression(thenBranch);\n        Node elseExpr = getBlockReturnExpression(elseBranch);\n\n        if (thenExpr == null || elseExpr == null) {\n          return n;\n        }\n\n        n.removeChild(cond);\n        thenExpr.detachFromParent();\n        elseExpr.detachFromParent();\n\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n        Node retNode = new Node(Token.RETURN, hookNode).srcref(n);\n        parent.replaceChild(n, retNode);\n        reportCodeChange();\n        return retNode;\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..bbf7c14e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,91 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+                return newExpr;\n+              }\n+            }\n+          }\n+          // if(x)foo();else bar(); -> x?foo():bar()\n+          Node hookNode = IR.hook(cond, getBlockExpression(thenBranch).detachFromParent(), getBlockExpression(elseBranch).detachFromParent()).srcref(n);\n+          Node expr = NodeUtil.newExpr(hookNode);\n+          parent.replaceChild(n, expr);\n+          reportCodeChange();\n+          return expr;\n+        } else if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n+                   getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n+\n+          Node var = getBlockVar(thenBranch);\n+          Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n+\n+          Node name1 = var.getFirstChild();\n+          Node maybeName2 = elseAssign.getFirstChild();\n+\n+          if (name1.hasChildren()\n+              && maybeName2.isName()\n+              && name1.getString().equals(maybeName2.getString())) {\n+            Node thenExpr = name1.removeChildren();\n+            Node elseExpr = elseAssign.getLastChild().detachFromParent();\n+            cond.detachFromParent();\n+            Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                                .srcref(n);\n+            var.detachFromParent();\n+            name1.addChildrenToBack(hookNode);\n+            parent.replaceChild(n, var);\n+            reportCodeChange();\n+            return var;\n+          }\n+\n+        // if(x)y=1;else var y=2  ->  var y=x?1:2\n+        } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n+                   getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n+\n+          Node var = getBlockVar(elseBranch);\n+          Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n+\n+          Node maybeName1 = thenAssign.getFirstChild();\n+          Node name2 = var.getFirstChild();\n+\n+          if (name2.hasChildren()\n+              && maybeName1.isName()\n+              && maybeName1.getString().equals(name2.getString())) {\n+            Node thenExpr = thenAssign.getLastChild().detachFromParent();\n+            Node elseExpr = name2.removeChildren();\n+            cond.detachFromParent();\n+            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            var.detachFromParent();\n+            name2.addChildrenToBack(hookNode);\n+            parent.replaceChild(n, var);\n+            reportCodeChange();\n+\n+            return var;\n+          }\n+        }\n+      } else if (elseBranch.isEmpty()) {\n+        Node notConst = IR.not(cond.detachFromParent()).srcref(n);\n+        parent.replaceChild(n, notConst);\n+        reportCodeChange();\n+        return tryMinimizeIf(notConst);\n+      } else if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n+        Node thenExpr = getBlockReturnExpression(thenBranch);\n+        Node elseExpr = getBlockReturnExpression(elseBranch);\n+\n+        if (thenExpr == null || elseExpr == null) {\n+          return n;\n+        }\n+\n+        n.removeChild(cond);\n+        thenExpr.detachFromParent();\n+        elseExpr.detachFromParent();\n+\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+        Node retNode = new Node(Token.RETURN, hookNode).srcref(n);\n+        parent.replaceChild(n, retNode);\n+        reportCodeChange();\n+        return retNode;\n+      }\n+    }\n+    return n;\n+  }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}