{
    "patch": "            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new NumberIsTooLargeException(\n                    LocalizedFormats.DIMENSION,\n                    lB.length, 0, true\n                );\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                for (int i = 0; i < init.length; ++i) {\n                    final double normalized = (init[i] - lB[i]) / (uB[i] - lB[i]);\n                    if (Double.isInfinite(normalized)) {\n                        throw new NumberIsTooLargeException(\n                            LocalizedFormats.NORMALIZE_INFINITE,\n                            init[i], lB[i], uB[i]\n                        );\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..e05b103e5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,30 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (hasInfiniteBounds) {\n+                // If there is at least one finite bound, none can be infinite,\n+                // because mixed cases are not supported by the current code.\n+                throw new NumberIsTooLargeException(\n+                    LocalizedFormats.DIMENSION,\n+                    lB.length, 0, true\n+                );\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < init.length; ++i) {\n+                    final double normalized = (init[i] - lB[i]) / (uB[i] - lB[i]);\n+                    if (Double.isInfinite(normalized)) {\n+                        throw new NumberIsTooLargeException(\n+                            LocalizedFormats.NORMALIZE_INFINITE,\n+                            init[i], lB[i], uB[i]\n+                        );\n+                    }\n+                }\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: no suitable constructor found for NumberIsTooLargeException(LocalizedFormats,double,double,double)",
    "test_result": "ERROR"
}