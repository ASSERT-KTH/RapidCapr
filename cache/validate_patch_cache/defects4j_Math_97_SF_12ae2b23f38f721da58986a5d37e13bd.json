{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if (yMin == 0.0) {\n        ret = min;\n    } else if (yMax == 0.0) {\n        ret = max;\n    } else if (yMin * yMax > 0.0) {\n        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    } else {\n        double x = (min + max) / 2.0;\n        double y = f.value(x);\n        double xPrev = min;\n        double yPrev = yMin;\n\n        int i = 0;\n        while (i++ < this.allowedIterations) {\n            if (y == 0.0) {\n                ret = x;\n                break;\n            }\n\n            if (yMin * y < 0) {\n                max = x;\n                yMax = y;\n            } else {\n                min = x;\n                yMin = y;\n            }\n\n            double xNext = x - y * (x - xPrev) / (y - yPrev);\n            if (Double.isNaN(xNext) || Double.isInfinite(xNext)) {\n                ret = x;\n                break;\n            }\n\n            if (Math.abs(xNext - x) <= this.absoluteAccuracy) {\n                ret = xNext;\n                break;\n            }\n\n            xPrev = x;\n            yPrev = y;\n            x = xNext;\n            y = f.value(x);\n        }\n        if (Double.isNaN(ret)) {\n            ret = x;\n        }\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..99cd83b02 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,68 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n \n-        return ret;\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    if (yMin == 0.0) {\n+        ret = min;\n+    } else if (yMax == 0.0) {\n+        ret = max;\n+    } else if (yMin * yMax > 0.0) {\n+        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n+                                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+                                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+    } else {\n+        double x = (min + max) / 2.0;\n+        double y = f.value(x);\n+        double xPrev = min;\n+        double yPrev = yMin;\n+\n+        int i = 0;\n+        while (i++ < this.allowedIterations) {\n+            if (y == 0.0) {\n+                ret = x;\n+                break;\n+            }\n+\n+            if (yMin * y < 0) {\n+                max = x;\n+                yMax = y;\n+            } else {\n+                min = x;\n+                yMin = y;\n+            }\n+\n+            double xNext = x - y * (x - xPrev) / (y - yPrev);\n+            if (Double.isNaN(xNext) || Double.isInfinite(xNext)) {\n+                ret = x;\n+                break;\n+            }\n+\n+            if (Math.abs(xNext - x) <= this.absoluteAccuracy) {\n+                ret = xNext;\n+                break;\n+            }\n+\n+            xPrev = x;\n+            yPrev = y;\n+            x = xNext;\n+            y = f.value(x);\n+        }\n+        if (Double.isNaN(ret)) {\n+            ret = x;\n+        }\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}