{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n      if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild()) {\n        maybeExpr = maybeExpr.getFirstChild();\n      }\n      // We only have to worry about methods with an implicit 'this'\n      // param, or this doesn't happen.\n      if (maybeExpr.getType() == Token.AND || maybeExpr.getType() == Token.OR) {\n        return true;\n      }\n      if (maybeExpr.getType() == Token.IF) {\n        boolean hasIfWithoutElse = false;\n        Node child = maybeExpr.getFirstChild();\n        if (child.getType() == Token.NOT) {\n          child = child.getFirstChild();\n        }\n        // Check if there are any IF statements without an ELSE block.\n        while (child != null) {\n          if (child.getType() == Token.IF) {\n            if (child.getChildCount() < 2 || child.getLastChild().getType() != Token.BLOCK) {\n              hasIfWithoutElse = true;\n              break;\n            }\n          }\n          child = child.getNext();\n        }\n        return !hasIfWithoutElse;\n      }\n      return NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..04d8fae0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      // IE has a bug where event handlers behave differently when\n+      // their return value is used vs. when their return value is in\n+      // an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs\n+      // into other expressions.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild()) {\n+        maybeExpr = maybeExpr.getFirstChild();\n+      }\n+      // We only have to worry about methods with an implicit 'this'\n+      // param, or this doesn't happen.\n+      if (maybeExpr.getType() == Token.AND || maybeExpr.getType() == Token.OR) {\n+        return true;\n       }\n+      if (maybeExpr.getType() == Token.IF) {\n+        boolean hasIfWithoutElse = false;\n+        Node child = maybeExpr.getFirstChild();\n+        if (child.getType() == Token.NOT) {\n+          child = child.getFirstChild();\n+        }\n+        // Check if there are any IF statements without an ELSE block.\n+        while (child != null) {\n+          if (child.getType() == Token.IF) {\n+            if (child.getChildCount() < 2 || child.getLastChild().getType() != Token.BLOCK) {\n+              hasIfWithoutElse = true;\n+              break;\n+            }\n+          }\n+          child = child.getNext();\n+        }\n+        return !hasIfWithoutElse;\n+      }\n+      return NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr);\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}