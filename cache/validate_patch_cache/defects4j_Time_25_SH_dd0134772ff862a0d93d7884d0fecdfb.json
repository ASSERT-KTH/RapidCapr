{
    "patch": "        if (offsetLocal > offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            if (prevAdjusted != prevLocal) {\n                int beforeDstOffset = getOffset(prevLocal);\n                int afterDstOffset = getStandardOffset(prevLocal);\n                if (beforeDstOffset > afterDstOffset) {\n                    return beforeDstOffset;\n                }\n                return offsetLocal;\n            }\n        } else if (offsetAdjusted > offsetLocal) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextAdjusted != nextLocal) {\n                int beforeDstOffset = getOffset(nextLocal);\n                int afterDstOffset = getStandardOffset(nextLocal+1);\n                if (beforeDstOffset < afterDstOffset) {\n                    return beforeDstOffset;\n                }\n                return offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a217cf6f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal > offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            if (prevAdjusted != prevLocal) {\n+                int beforeDstOffset = getOffset(prevLocal);\n+                int afterDstOffset = getStandardOffset(prevLocal);\n+                if (beforeDstOffset > afterDstOffset) {\n+                    return beforeDstOffset;\n+                }\n+                return offsetLocal;\n+            }\n+        } else if (offsetAdjusted > offsetLocal) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextAdjusted != nextLocal) {\n+                int beforeDstOffset = getOffset(nextLocal);\n+                int afterDstOffset = getStandardOffset(nextLocal+1);\n+                if (beforeDstOffset < afterDstOffset) {\n+                    return beforeDstOffset;\n+                }\n+                return offsetLocal;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}