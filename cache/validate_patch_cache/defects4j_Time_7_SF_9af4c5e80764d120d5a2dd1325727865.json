{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n\n    DateTimeParserBucket bucket;\n    long instantLocal = instant.getMillis();\n\n    // First try parsing with the original chrono and zone\n    bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos >= 0) {\n        // The parsing was successful\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            // Use the offset if an explicit offset was parsed\n            int parsedOffset = bucket.getOffsetInteger();\n            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n            bucket.setZone(zone);\n            instantLocal = bucket.computeMillis();\n        } else if (bucket.getZone() != null) {\n            // Otherwise use the zone from the bucket\n            zone = bucket.getZone();\n            instantLocal = bucket.computeMillis();\n        } else if (iZone != null) {\n            // If no zone was parsed but iZone is set, use iZone\n            zone = iZone;\n            instantLocal = bucket.computeMillis(zone);\n        } else {\n            // Otherwise use the zone from the original instant\n            instantLocal = bucket.computeMillis(zone);\n        }\n\n        chrono = selectChronology(chrono);\n        instant.setChronology(chrono.withZone(zone));\n        instant.setMillis(instantLocal);\n\n        if (!iOffsetParsed && bucket.getOffsetInteger() != null) {\n            // Get the actual offset from the parsed instant if no offset was parsed\n            int actualOffset = zone.getOffset(instantLocal);\n            if (actualOffset != bucket.getOffsetInteger()) {\n                // Offset is different; we must parse again with a new bucket\n                newPos = parser.parseInto(new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal)), text, position);\n                if (newPos >= 0) {\n                    // Parsing was successful; use the new instantLocal value\n                    instantLocal = bucket.computeMillis();\n                    instant.setMillis(instantLocal);\n                } else {\n                    // Parsing failed; use the old instantLocal value\n                    newPos = position;\n                }\n            }\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..aa87e6c8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,68 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+\n+    DateTimeParserBucket bucket;\n+    long instantLocal = instant.getMillis();\n+\n+    // First try parsing with the original chrono and zone\n+    bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos >= 0) {\n+        // The parsing was successful\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            // Use the offset if an explicit offset was parsed\n             int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            zone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            bucket.setZone(zone);\n+            instantLocal = bucket.computeMillis();\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            // Otherwise use the zone from the bucket\n+            zone = bucket.getZone();\n+            instantLocal = bucket.computeMillis();\n+        } else if (iZone != null) {\n+            // If no zone was parsed but iZone is set, use iZone\n+            zone = iZone;\n+            instantLocal = bucket.computeMillis(zone);\n+        } else {\n+            // Otherwise use the zone from the original instant\n+            instantLocal = bucket.computeMillis(zone);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        chrono = selectChronology(chrono);\n+        instant.setChronology(chrono.withZone(zone));\n+        instant.setMillis(instantLocal);\n+\n+        if (!iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            // Get the actual offset from the parsed instant if no offset was parsed\n+            int actualOffset = zone.getOffset(instantLocal);\n+            if (actualOffset != bucket.getOffsetInteger()) {\n+                // Offset is different; we must parse again with a new bucket\n+                newPos = parser.parseInto(new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal)), text, position);\n+                if (newPos >= 0) {\n+                    // Parsing was successful; use the new instantLocal value\n+                    instantLocal = bucket.computeMillis();\n+                    instant.setMillis(instantLocal);\n+                } else {\n+                    // Parsing failed; use the old instantLocal value\n+                    newPos = position;\n+                }\n+            }\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: incompatible types: DateTimeZone cannot be converted to boolean",
    "test_result": "ERROR"
}