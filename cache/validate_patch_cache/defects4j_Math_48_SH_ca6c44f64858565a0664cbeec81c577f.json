{
    "patch": "                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                             atol)) {\n                        if (FastMath.abs(f1 * f0) < FastMath.ulp(1d)) {\n                            throw new ConvergenceException(LocalizedFormats.FAILED_FRACTION_CONVERGENCE,\n                                                           getMaximalIterationCount());\n                        } else {\n                            throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n                                                           getMaximalIterationCount());\n                        }\n                    } else {\n                        int sign = 1;\n                        if (f1 < 0) {\n                            sign = -1;\n                        }\n                        float f01 = FastMath.abs(f0) + FastMath.abs(f1);\n                        double x = sign * f1 * (FastMath.abs(x1 - x0) / f01);\n                        double xMin = sign * x1;\n                        double xMax = xMin + x;\n                        double fMax = computeObjectiveValue(xMax);\n                        double fDiff = f1 - f0;\n                        double fProd = fMax * fDiff;\n                        if (fProd < 0) {\n                            x0 = xMax;\n                            f0 = fMax;\n                        } else if (fProd > 0) {\n                            x1 = xMax;\n                            f1 = fMax;\n                            f0 *= fDiff / (fDiff + fMax - f1);\n                        } else {\n                            return xMax;\n                        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..d089afa6b 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,37 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+                                                             atol)) {\n+                        if (FastMath.abs(f1 * f0) < FastMath.ulp(1d)) {\n+                            throw new ConvergenceException(LocalizedFormats.FAILED_FRACTION_CONVERGENCE,\n+                                                           getMaximalIterationCount());\n+                        } else {\n+                            throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n+                                                           getMaximalIterationCount());\n+                        }\n+                    } else {\n+                        int sign = 1;\n+                        if (f1 < 0) {\n+                            sign = -1;\n+                        }\n+                        float f01 = FastMath.abs(f0) + FastMath.abs(f1);\n+                        double x = sign * f1 * (FastMath.abs(x1 - x0) / f01);\n+                        double xMin = sign * x1;\n+                        double xMax = xMin + x;\n+                        double fMax = computeObjectiveValue(xMax);\n+                        double fDiff = f1 - f0;\n+                        double fProd = fMax * fDiff;\n+                        if (fProd < 0) {\n+                            x0 = xMax;\n+                            f0 = fMax;\n+                        } else if (fProd > 0) {\n+                            x1 = xMax;\n+                            f1 = fMax;\n+                            f0 *= fDiff / (fDiff + fMax - f1);\n+                        } else {\n+                            return xMax;\n+                        }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}