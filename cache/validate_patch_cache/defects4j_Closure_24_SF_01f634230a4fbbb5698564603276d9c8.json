{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.hasChildren()) {\n            continue;\n        }\n\n        Node parent = n.getParent();\n        if (parent == null || !parent.isVar() || parent.getFirstChild() != n) {\n            continue;\n        }\n\n        Node rValue = n.getLastChild();\n        if (rValue == null || !rValue.isQualifiedName() || rValue.getJSDocInfo() != null) {\n            // If the right-hand side is not a qualified name, or has a JSDoc comment, it's not an alias\n            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n            continue;\n        }\n\n        Var aliasVar = scope.getVar(n.getFirstChild().getQualifiedName());\n        if (aliasVar == null || aliasVar.getInitialValue() == null || !aliasVar.getInitialValue().isQualifiedName()) {\n            // If the left-hand side is not a qualified name or its initial value is not a qualified name, it's not an alias\n            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n            continue;\n        }\n\n        Node aliasRValue = aliasVar.getInitialValue();\n        if (aliasRValue == null || !aliasRValue.isQualifiedName()) {\n            // If the initial value of the left-hand side is not a qualified name, it's not an alias\n            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n            continue;\n        }\n\n        String qualifiedName = rValue.getQualifiedName();\n        String aliasQualifiedName = aliasRValue.getQualifiedName();\n        if (!qualifiedName.equals(aliasQualifiedName)) {\n            // If the right-hand side is not the same as the initial value of the left-hand side, it's an alias\n            aliases.put(n.getFirstChild().getQualifiedName(), aliasVar);\n            transformation.addAlias(n.getFirstChild().getQualifiedName(), qualifiedName);\n        } else {\n            // If the right-hand side is the same as the initial value of the left-hand side, it's not an alias\n            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..cfffb934 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,52 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null || !n.hasChildren()) {\n+            continue;\n+        }\n+\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent == null || !parent.isVar() || parent.getFirstChild() != n) {\n+            continue;\n         }\n+\n+        Node rValue = n.getLastChild();\n+        if (rValue == null || !rValue.isQualifiedName() || rValue.getJSDocInfo() != null) {\n+            // If the right-hand side is not a qualified name, or has a JSDoc comment, it's not an alias\n+            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n+            continue;\n+        }\n+\n+        Var aliasVar = scope.getVar(n.getFirstChild().getQualifiedName());\n+        if (aliasVar == null || aliasVar.getInitialValue() == null || !aliasVar.getInitialValue().isQualifiedName()) {\n+            // If the left-hand side is not a qualified name or its initial value is not a qualified name, it's not an alias\n+            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n+            continue;\n+        }\n+\n+        Node aliasRValue = aliasVar.getInitialValue();\n+        if (aliasRValue == null || !aliasRValue.isQualifiedName()) {\n+            // If the initial value of the left-hand side is not a qualified name, it's not an alias\n+            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n+            continue;\n+        }\n+\n+        String qualifiedName = rValue.getQualifiedName();\n+        String aliasQualifiedName = aliasRValue.getQualifiedName();\n+        if (!qualifiedName.equals(aliasQualifiedName)) {\n+            // If the right-hand side is not the same as the initial value of the left-hand side, it's an alias\n+            aliases.put(n.getFirstChild().getQualifiedName(), aliasVar);\n+            transformation.addAlias(n.getFirstChild().getQualifiedName(), qualifiedName);\n+        } else {\n+            // If the right-hand side is the same as the initial value of the left-hand side, it's not an alias\n+            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}