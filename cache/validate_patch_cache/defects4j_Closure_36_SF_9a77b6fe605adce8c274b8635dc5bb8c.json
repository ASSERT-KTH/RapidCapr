{
    "patch": "/**\n * Returns true if the value can be moved into the reference's basic block.\n * Assumes the precondition that isValidDeclaration(declaration),\n * isValidInitialization(initialization), and isValidReference(reference) are true.\n */\nprivate boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n  if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp() && reference.getParent().isCall() &&\n      reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      // Bug 2388531: Don't inline subclass definitions into class defining\n      // calls as this confused class removing logic.\n      SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n      // issue 668: Don't inline singleton getter methods calls as this confused class removing logic.\n      else if (isSingletonGetter(callNode)) {\n        return false;\n      }\n    }\n  }\n\n  return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}\n\nprivate boolean canMoveModerately(Reference initialization, Reference reference) {\n  Node value = initialization.getAssignedValue();\n  if (ControlFlowGraph.isEnteringNewControlFlowNode(reference.getNode())) {\n    return false;\n  }\n\n  if (!value.isCommutative() && !isExpressionParentOfCurrentValue(reference)) {\n    return false;\n  }\n\n  if (!NodeUtil.mayBeString(value) && !value.isNumber() && !NodeUtil.isObjectLitKey(value) && !NodeUtil.isImmutableValue(value)) {\n    return false;\n  }\n\n  if (value.isObjectLit() && isReferenceParentOfGetElem(reference)) {\n    return false;\n  }\n\n  if (isLastChildOfVarInitialization(reference, initialization)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Returns whether the current reference is the parent node of any GETELEM node.\n */\nprivate boolean isReferenceParentOfGetElem(Reference reference) {\n  Node node = reference.getNode();\n  while (true) {\n    Node parent = node.getParent();\n    if (parent == null || parent.isBlock()) {\n      return false;\n    }\n    if (parent.isGetProp() && parent.getSecondChild() == node) {\n      Node grandparent = parent.getParent();\n      if (grandparent.isGetElem() && grandparent.getFirstChild() == parent) {\n        return true;\n      }\n    }\n    node = parent;\n  }\n}\n\n/**\n * Returns whether the expression that references the current value is the parent node of the\n * current value.\n */\nprivate boolean isExpressionParentOfCurrentValue(Reference reference) {\n  Node current = reference.getNode();\n  Node parent = current.getParent();\n  while (parent != null) {\n    if (parent.isBlock()) {\n      return false;\n    }\n    if (parent.getFirstChild() == current) {\n      return NodeUtil.isExpressionNode(parent);\n    }\n    current = parent;\n    parent = current.getParent();\n  }\n  return false;\n}\n\n/**\n * Returns whether the reference is the last child of the EXPR_RESULT node that initializes a VAR\n * declaration.\n */\nprivate boolean isLastChildOfVarInitialization(Reference reference, Reference initialization) {\n  return initialization.getAssignParent() != null &&\n      initialization.getAssignParent().isVar() &&\n      initialization.getAssignParent().getFirstChild() == initialization.getNode() &&\n      reference.getParent().getParent().isExprResult() &&\n      reference.getNode() == reference.getGrandparent().getLastChild();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..6c8584b9 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -516,68 +516,119 @@ class InlineVariables implements CompilerPass {\n      * @return true if the provided reference and declaration can be safely\n      *         inlined according to our criteria\n      */\n-    private boolean canInline(\n-        Reference declaration,\n-        Reference initialization,\n-        Reference reference) {\n-      if (!isValidDeclaration(declaration)\n-          || !isValidInitialization(initialization)\n-          || !isValidReference(reference)) {\n-        return false;\n-      }\n+/**\n+ * Returns true if the value can be moved into the reference's basic block.\n+ * Assumes the precondition that isValidDeclaration(declaration),\n+ * isValidInitialization(initialization), and isValidReference(reference) are true.\n+ */\n+private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n+  if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {\n+    return false;\n+  }\n \n-      // If the value is read more than once, skip it.\n-      // VAR declarations and EXPR_RESULT don't need the value, but other\n-      // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n-        return false;\n-      }\n+  Node value = initialization.getAssignedValue();\n+  Preconditions.checkState(value != null);\n+  if (value.isGetProp() && reference.getParent().isCall() &&\n+      reference.getParent().getFirstChild() == reference.getNode()) {\n+    return false;\n+  }\n \n-      // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n+  if (value.isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (reference.getParent().isCall()) {\n+      CodingConvention convention = compiler.getCodingConvention();\n+      // Bug 2388531: Don't inline subclass definitions into class defining\n+      // calls as this confused class removing logic.\n+      SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n+      if (relationship != null) {\n         return false;\n       }\n-\n-      // Do not inline into a call node. This would change\n-      // the context in which it was being called. For example,\n-      //   var a = b.c;\n-      //   a();\n-      // should not be inlined, because it calls a in the context of b\n-      // rather than the context of the window.\n-      //   var a = b.c;\n-      //   f(a)\n-      // is ok.\n-      Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n-      if (value.isGetProp()\n-          && reference.getParent().isCall()\n-          && reference.getParent().getFirstChild() == reference.getNode()) {\n+      // issue 668: Don't inline singleton getter methods calls as this confused class removing logic.\n+      else if (isSingletonGetter(callNode)) {\n         return false;\n       }\n+    }\n+  }\n \n-      if (value.isFunction()) {\n-        Node callNode = reference.getParent();\n-        if (reference.getParent().isCall()) {\n-          CodingConvention convention = compiler.getCodingConvention();\n-          // Bug 2388531: Don't inline subclass definitions into class defining\n-          // calls as this confused class removing logic.\n-          SubclassRelationship relationship =\n-              convention.getClassesDefinedByCall(callNode);\n-          if (relationship != null) {\n-            return false;\n-          }\n+  return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n+}\n \n-          // issue 668: Don't inline singleton getter methods\n-          // calls as this confused class removing logic.\n-        }\n+private boolean canMoveModerately(Reference initialization, Reference reference) {\n+  Node value = initialization.getAssignedValue();\n+  if (ControlFlowGraph.isEnteringNewControlFlowNode(reference.getNode())) {\n+    return false;\n+  }\n+\n+  if (!value.isCommutative() && !isExpressionParentOfCurrentValue(reference)) {\n+    return false;\n+  }\n+\n+  if (!NodeUtil.mayBeString(value) && !value.isNumber() && !NodeUtil.isObjectLitKey(value) && !NodeUtil.isImmutableValue(value)) {\n+    return false;\n+  }\n+\n+  if (value.isObjectLit() && isReferenceParentOfGetElem(reference)) {\n+    return false;\n+  }\n+\n+  if (isLastChildOfVarInitialization(reference, initialization)) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n+/**\n+ * Returns whether the current reference is the parent node of any GETELEM node.\n+ */\n+private boolean isReferenceParentOfGetElem(Reference reference) {\n+  Node node = reference.getNode();\n+  while (true) {\n+    Node parent = node.getParent();\n+    if (parent == null || parent.isBlock()) {\n+      return false;\n+    }\n+    if (parent.isGetProp() && parent.getSecondChild() == node) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent.isGetElem() && grandparent.getFirstChild() == parent) {\n+        return true;\n       }\n+    }\n+    node = parent;\n+  }\n+}\n \n-      return canMoveAggressively(value) ||\n-          canMoveModerately(initialization, reference);\n+/**\n+ * Returns whether the expression that references the current value is the parent node of the\n+ * current value.\n+ */\n+private boolean isExpressionParentOfCurrentValue(Reference reference) {\n+  Node current = reference.getNode();\n+  Node parent = current.getParent();\n+  while (parent != null) {\n+    if (parent.isBlock()) {\n+      return false;\n+    }\n+    if (parent.getFirstChild() == current) {\n+      return NodeUtil.isExpressionNode(parent);\n     }\n+    current = parent;\n+    parent = current.getParent();\n+  }\n+  return false;\n+}\n+\n+/**\n+ * Returns whether the reference is the last child of the EXPR_RESULT node that initializes a VAR\n+ * declaration.\n+ */\n+private boolean isLastChildOfVarInitialization(Reference reference, Reference initialization) {\n+  return initialization.getAssignParent() != null &&\n+      initialization.getAssignParent().isVar() &&\n+      initialization.getAssignParent().getFirstChild() == initialization.getNode() &&\n+      reference.getParent().getParent().isExprResult() &&\n+      reference.getNode() == reference.getGrandparent().getLastChild();\n+}\n \n     /**\n      * If the value is a literal, we can cross more boundaries to inline it.",
    "result_reason": "error: method canMoveModerately(Reference,Reference) is already defined in class InlineVariables.InliningBehavior",
    "test_result": "ERROR"
}