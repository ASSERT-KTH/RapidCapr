{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is week-based\n        DateTimeFieldType firstType = savedFields[0].iField.getType();\n        if (firstType == DateTimeFieldType.weekyear()\n                || firstType == DateTimeFieldType.weekyearOfCentury()\n                || firstType == DateTimeFieldType.weekOfWeekyear()) {\n            int weekyear = computeWeekyear(savedFields, count);\n            Chronology chrono = iChrono.withUTC();\n            millis = chrono.getDateTimeMillis(weekyear, 1, 1, 0);\n            // set the weekyear as the default year\n            saveField(DateTimeFieldType.year(), weekyear);\n        }\n    }\n    \n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}\n\nprivate int computeWeekyear(SavedField[] savedFields, int count) {\n    Chronology chrono = iChrono.withUTC();\n    int weekyear = iDefaultYear;\n    for (int i = 0; i < count; i++) {\n        DateTimeField field = savedFields[i].iField;\n        DurationField rangeField = field.getDurationField().getRangeDurationField();\n        if (rangeField == null) {\n            continue;\n        }\n        int value = savedFields[i].iValue;\n        if (field.getType() == DateTimeFieldType.weekyear()) {\n            weekyear = value;\n            continue;\n        }\n        if (field.getType() == DateTimeFieldType.weekyearOfCentury()) {\n            weekyear = value * 100;\n            continue;\n        }\n        if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n            // compute the weekyear from the week of weekyear and the saved year\n            int savedYear = getSavedField(DateTimeFieldType.year(), chrono).iValue;\n            weekyear = getWeekyear(chrono, savedYear, value);\n            continue;\n        }\n    }\n    return weekyear;\n}\n\nprivate int getWeekyear(Chronology chrono, int year, int weekOfWeekyear) {\n    int weeksInYear = chrono.weeksInYear(year);\n    if (weekOfWeekyear < weeksInYear - 1) {\n        return year;\n    } else {\n        return year - 1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ad08354f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,94 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is week-based\n+        DateTimeFieldType firstType = savedFields[0].iField.getType();\n+        if (firstType == DateTimeFieldType.weekyear()\n+                || firstType == DateTimeFieldType.weekyearOfCentury()\n+                || firstType == DateTimeFieldType.weekOfWeekyear()) {\n+            int weekyear = computeWeekyear(savedFields, count);\n+            Chronology chrono = iChrono.withUTC();\n+            millis = chrono.getDateTimeMillis(weekyear, 1, 1, 0);\n+            // set the weekyear as the default year\n+            saveField(DateTimeFieldType.year(), weekyear);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+    }\n+    \n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    \n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n+    }\n+    \n+    return millis;\n+}\n+\n+private int computeWeekyear(SavedField[] savedFields, int count) {\n+    Chronology chrono = iChrono.withUTC();\n+    int weekyear = iDefaultYear;\n+    for (int i = 0; i < count; i++) {\n+        DateTimeField field = savedFields[i].iField;\n+        DurationField rangeField = field.getDurationField().getRangeDurationField();\n+        if (rangeField == null) {\n+            continue;\n         }\n-        \n-        return millis;\n+        int value = savedFields[i].iValue;\n+        if (field.getType() == DateTimeFieldType.weekyear()) {\n+            weekyear = value;\n+            continue;\n+        }\n+        if (field.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+            weekyear = value * 100;\n+            continue;\n+        }\n+        if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+            // compute the weekyear from the week of weekyear and the saved year\n+            int savedYear = getSavedField(DateTimeFieldType.year(), chrono).iValue;\n+            weekyear = getWeekyear(chrono, savedYear, value);\n+            continue;\n+        }\n+    }\n+    return weekyear;\n+}\n+\n+private int getWeekyear(Chronology chrono, int year, int weekOfWeekyear) {\n+    int weeksInYear = chrono.weeksInYear(year);\n+    if (weekOfWeekyear < weeksInYear - 1) {\n+        return year;\n+    } else {\n+        return year - 1;\n     }\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}