{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    \n    // If mean, variance or geomean have been overridden,\n    // need to increment these using the correct implementations\n    if (meanImpl != null && !(meanImpl instanceof Mean)) {\n        if (meanImpl instanceof StorelessUnivariateStatistic) {\n            ((StorelessUnivariateStatistic) meanImpl).increment(value);\n        } else {\n            // meanImpl is a custom implementation\n            meanImpl.increment(value);\n        }\n    } else {\n        // use the default Mean implementation\n        meanImpl = new Mean();\n        meanImpl.increment(value);\n    }\n    \n    if (varianceImpl != null && !(varianceImpl instanceof Variance)) {\n        if (varianceImpl instanceof StorelessUnivariateStatistic) {\n            ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n        } else {\n            // varianceImpl is a custom implementation\n            varianceImpl.increment(value);\n        }\n    } else {\n        // use the default Variance implementation\n        varianceImpl = new Variance();\n        varianceImpl.increment(value);\n    }\n    \n    if (geoMeanImpl != null && !(geoMeanImpl instanceof GeometricMean)) {\n        if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n            if (value > 0) {\n                ((StorelessUnivariateStatistic) geoMeanImpl).increment(value);\n            }\n        } else {\n            // geoMeanImpl is a custom implementation\n            if (value > 0) {\n                geoMeanImpl.increment(value);\n            }\n        }\n    } else {\n        // use the default GeometricMean implementation\n        geoMeanImpl = new GeometricMean();\n        if (value > 0) {\n            geoMeanImpl.increment(value);\n        }\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..e7b3cccd7 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,64 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    \n+    // If mean, variance or geomean have been overridden,\n+    // need to increment these using the correct implementations\n+    if (meanImpl != null && !(meanImpl instanceof Mean)) {\n+        if (meanImpl instanceof StorelessUnivariateStatistic) {\n+            ((StorelessUnivariateStatistic) meanImpl).increment(value);\n+        } else {\n+            // meanImpl is a custom implementation\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+    } else {\n+        // use the default Mean implementation\n+        meanImpl = new Mean();\n+        meanImpl.increment(value);\n+    }\n+    \n+    if (varianceImpl != null && !(varianceImpl instanceof Variance)) {\n+        if (varianceImpl instanceof StorelessUnivariateStatistic) {\n+            ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n+        } else {\n+            // varianceImpl is a custom implementation\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    } else {\n+        // use the default Variance implementation\n+        varianceImpl = new Variance();\n+        varianceImpl.increment(value);\n+    }\n+    \n+    if (geoMeanImpl != null && !(geoMeanImpl instanceof GeometricMean)) {\n+        if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n+            if (value > 0) {\n+                ((StorelessUnivariateStatistic) geoMeanImpl).increment(value);\n+            }\n+        } else {\n+            // geoMeanImpl is a custom implementation\n+            if (value > 0) {\n+                geoMeanImpl.increment(value);\n+            }\n+        }\n+    } else {\n+        // use the default GeometricMean implementation\n+        geoMeanImpl = new GeometricMean();\n+        if (value > 0) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}