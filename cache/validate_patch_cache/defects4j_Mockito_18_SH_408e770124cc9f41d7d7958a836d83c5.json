{
    "patch": "try {\n    Object returnValue = method.invoke(target, args);\n    if (returnValue != null && Iterable.class.isAssignableFrom(returnValue.getClass())) {\n        // Avoiding type erasure by accessing the iterator this way\n        Iterator<?> iterator = ((Iterable<?>) returnValue).iterator();\n        if (iterator.hasNext()) {\n            // If the iterable has elements, wrap it in a List and return\n            List<Object> list = new ArrayList<>();\n            iterator.forEachRemaining(list::add);\n            return list;\n        }\n    }\n    return returnValue;\n} catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\n    throw new RuntimeException(e);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}