{
    "patch": "    if (function.isArrowFunction()) {\n      // Arrow functions may not have leading arguments.\n      Preconditions.checkState(argList.getFirstChild() == null);\n      while (argList.getLastChild() != null) {\n        Node lastArg = argList.getLastChild();\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportChangeToEnclosingScope(argList);\n        } else {\n          break;\n        }\n      }\n    } else if (!function.isArrowFunction()) {\n      if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportChangeToEnclosingScope(argList);\n          } else {\n            break;\n          }\n        }\n      } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5b87233f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (function.isArrowFunction()) {\n+      // Arrow functions may not have leading arguments.\n+      Preconditions.checkState(argList.getFirstChild() == null);\n+      while (argList.getLastChild() != null) {\n+        Node lastArg = argList.getLastChild();\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportChangeToEnclosingScope(argList);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else if (!function.isArrowFunction()) {\n+      if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportChangeToEnclosingScope(argList);\n+          } else {\n+            break;\n+          }\n+        }\n+      } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}