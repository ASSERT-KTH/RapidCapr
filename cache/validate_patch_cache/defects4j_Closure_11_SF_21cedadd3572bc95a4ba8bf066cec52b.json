{
    "patch": "public boolean getProp1(boolean p) {\n    return p && true;\n}\npublic int getProp2(int x, int y) {\n    if (x > y) {\n        return x - y;\n    } else {\n        return y - x;\n    }\n}\npublic String getProp3(String s1, String s2) {\n    return s1 + s2;\n}\npublic void getProp4() {\n    try {\n        int x = 1/0;\n    } catch (ArithmeticException e) {\n        System.out.println(\"Warning: division by zero\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..ae4d9f83 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getProp1(boolean p) {\n+    return p && true;\n+}\n+public int getProp2(int x, int y) {\n+    if (x > y) {\n+        return x - y;\n+    } else {\n+        return y - x;\n+    }\n+}\n+public String getProp3(String s1, String s2) {\n+    return s1 + s2;\n+}\n+public void getProp4() {\n+    try {\n+        int x = 1/0;\n+    } catch (ArithmeticException e) {\n+        System.out.println(\"Warning: division by zero\");\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}