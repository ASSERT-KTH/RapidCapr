{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expand(reflectedSimplex, expanded, comparator);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // perform a contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contract(original, contracted, comparator);\n                } else {\n\n                    // perform a one-dimensional reduction\n                    simplex = reduce(original, comparator);\n                    if (comparator.compare(simplex[simplex.length - 1], original[0]) >= 0) {\n                        // if the reduction did not help, we stop here\n                        return;\n                    }\n\n                }\n\n            }\n\n            // check convergence\n            final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n            final double ort = 2 * Math.abs(best.getValue()) + Math.abs(simplex[simplex.length - 1].getValue());\n            if (range <= absoluteThreshold + relativeThreshold * ort) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..91651a8da 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,7 +58,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n@@ -75,28 +75,39 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expand(reflectedSimplex, expanded, comparator);\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // perform a contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contract(original, contracted, comparator);\n+                } else {\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                    // perform a one-dimensional reduction\n+                    simplex = reduce(original, comparator);\n+                    if (comparator.compare(simplex[simplex.length - 1], original[0]) >= 0) {\n+                        // if the reduction did not help, we stop here\n+                        return;\n+                    }\n \n-            // check convergence\n-                return;\n-            }\n+                }\n \n-        }\n+            }\n \n-    }\n+            // check convergence\n+            final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n+            final double ort = 2 * Math.abs(best.getValue()) + Math.abs(simplex[simplex.length - 1].getValue());\n+            if (range <= absoluteThreshold + relativeThreshold * ort) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}