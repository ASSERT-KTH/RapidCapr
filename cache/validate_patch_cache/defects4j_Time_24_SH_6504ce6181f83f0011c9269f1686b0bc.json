{
    "patch": "try {\n    int monthOrdinal = 0;\n    boolean isMonthSet = false;\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n        if (!isMonthSet) {\n            DateTimeField field = savedFields[i].iField;\n            if (field.getType() == DateTimeFieldType.monthOfYear()) {\n                monthOrdinal = field.get(millis);\n                isMonthSet = true;\n            } else if (field.getType() == DateTimeFieldType.year()) {\n                // alter base year for parsing if first field is year or weekyear\n                DurationField years = DurationFieldType.years().getField(iChrono);\n                DateTimeField first = savedFields[0].iField;\n                if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n                        || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n                    millis = first.roundFloor(millis);\n                    for (int j = 1; j < count; j++) {\n                        millis = savedFields[j].set(millis, resetFields);\n                    }\n                    break;\n                }\n            } else if (field.getType() == DateTimeFieldType.weekyear()) {\n                DurationField years = DurationFieldType.years().getField(iChrono);\n                int year = field.get(millis);\n                if (year < 1) {\n                    throw new IllegalFieldValueException(DateTimeFieldType.weekyear(), year, 1, Integer.MAX_VALUE, null);\n                }\n                millis = iChrono.weekyear().roundFloor(millis);\n                millis = iChrono.year().set(millis, field.get(millis));\n                savedFields[i] = new SavedField(iChrono.weekOfWeekyear(), Integer.toString(year));\n                for (int j = i + 1; j < count; j++) {\n                    DateTimeFieldType fieldType = savedFields[j].iField.getType();\n                    if (fieldType == DateTimeFieldType.weekyear() || fieldType == DateTimeFieldType.weekOfWeekyear()\n                            || fieldType == DateTimeFieldType.dayOfWeek()) {\n                        savedFields[j - 1] = savedFields[j];\n                        savedFields[j] = null;\n                    }\n                }\n                count--;\n                isMonthSet = true;\n            }\n        }\n    }\n    // if parsing a time without date, check that month is not changed\n    if (iSavedFields[0].iField.getType() == DateTimeFieldType.hourOfDay() && !isMonthSet && monthOrdinal != 0) {\n        saveField(DateTimeFieldType.monthOfYear(), monthOrdinal);\n        millis = computeMillis(resetFields, text);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..79fa635e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,67 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int monthOrdinal = 0;\n+    boolean isMonthSet = false;\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+        if (!isMonthSet) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (field.getType() == DateTimeFieldType.monthOfYear()) {\n+                monthOrdinal = field.get(millis);\n+                isMonthSet = true;\n+            } else if (field.getType() == DateTimeFieldType.year()) {\n+                // alter base year for parsing if first field is year or weekyear\n+                DurationField years = DurationFieldType.years().getField(iChrono);\n+                DateTimeField first = savedFields[0].iField;\n+                if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n+                        || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+                    millis = first.roundFloor(millis);\n+                    for (int j = 1; j < count; j++) {\n+                        millis = savedFields[j].set(millis, resetFields);\n+                    }\n+                    break;\n+                }\n+            } else if (field.getType() == DateTimeFieldType.weekyear()) {\n+                DurationField years = DurationFieldType.years().getField(iChrono);\n+                int year = field.get(millis);\n+                if (year < 1) {\n+                    throw new IllegalFieldValueException(DateTimeFieldType.weekyear(), year, 1, Integer.MAX_VALUE, null);\n+                }\n+                millis = iChrono.weekyear().roundFloor(millis);\n+                millis = iChrono.year().set(millis, field.get(millis));\n+                savedFields[i] = new SavedField(iChrono.weekOfWeekyear(), Integer.toString(year));\n+                for (int j = i + 1; j < count; j++) {\n+                    DateTimeFieldType fieldType = savedFields[j].iField.getType();\n+                    if (fieldType == DateTimeFieldType.weekyear() || fieldType == DateTimeFieldType.weekOfWeekyear()\n+                            || fieldType == DateTimeFieldType.dayOfWeek()) {\n+                        savedFields[j - 1] = savedFields[j];\n+                        savedFields[j] = null;\n+                    }\n+                }\n+                count--;\n+                isMonthSet = true;\n+            }\n+        }\n+    }\n+    // if parsing a time without date, check that month is not changed\n+    if (iSavedFields[0].iField.getType() == DateTimeFieldType.hourOfDay() && !isMonthSet && monthOrdinal != 0) {\n+        saveField(DateTimeFieldType.monthOfYear(), monthOrdinal);\n+        millis = computeMillis(resetFields, text);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(DateTimeFieldType,int,int,int,<null>)",
    "test_result": "ERROR"
}