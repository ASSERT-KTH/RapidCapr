{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrt;\n    try {\n        CholeskyDecomposition choleskyDecomposition = new CholeskyDecomposition(m);\n        sqrt = choleskyDecomposition.getL();\n        RealMatrix sqrtTranspose = sqrt.transpose();\n        sqrt = sqrt.multiply(sqrtTranspose); // sqrt = L * L'\n    } catch (Exception e) {\n        throw new RuntimeException(\"Matrix is not positive definite\");\n    }\n\n    // Round small values to zero to reduce memory usage\n    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n            if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n                sqrt.setEntry(i, j, 0.0);\n            }\n        }\n    }\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..705ecc7c7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrt;\n+    try {\n+        CholeskyDecomposition choleskyDecomposition = new CholeskyDecomposition(m);\n+        sqrt = choleskyDecomposition.getL();\n+        RealMatrix sqrtTranspose = sqrt.transpose();\n+        sqrt = sqrt.multiply(sqrtTranspose); // sqrt = L * L'\n+    } catch (Exception e) {\n+        throw new RuntimeException(\"Matrix is not positive definite\");\n     }\n+\n+    // Round small values to zero to reduce memory usage\n+    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n+        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n+            if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n+                sqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n+    }\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}