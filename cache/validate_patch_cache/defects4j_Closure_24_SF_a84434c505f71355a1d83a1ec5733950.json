{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node nameNode = v.getNameNode();\n    if (nameNode != null && NodeUtil.isNameDeclaration(nameNode.getParent())\n        && v.getInitialValue() != null && v.getInitialValue().isQualifiedName()) {\n      String name = v.getName();\n      Node valueNode = v.getInitialValue();\n      String qualifiedName = valueNode.getQualifiedName();\n      aliases.put(name, v);\n      transformation.addAlias(name, qualifiedName);\n    } else if (nameNode != null && NodeUtil.isNameDeclaration(nameNode.getParent())) {\n      report(t, nameNode, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..ac49cec3 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,22 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node nameNode = v.getNameNode();\n+    if (nameNode != null && NodeUtil.isNameDeclaration(nameNode.getParent())\n+        && v.getInitialValue() != null && v.getInitialValue().isQualifiedName()) {\n+      String name = v.getName();\n+      Node valueNode = v.getInitialValue();\n+      String qualifiedName = valueNode.getQualifiedName();\n+      aliases.put(name, v);\n+      transformation.addAlias(name, qualifiedName);\n+    } else if (nameNode != null && NodeUtil.isNameDeclaration(nameNode.getParent())) {\n+      report(t, nameNode, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}