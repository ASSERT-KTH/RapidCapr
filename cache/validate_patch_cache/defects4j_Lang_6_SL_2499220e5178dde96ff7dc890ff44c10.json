{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int codePoint = Character.codePointAt(input, pos);\n        int charCount = Character.charCount(codePoint);\n        if (charCount > 1) {\n            // surrogate pair\n            translate(input.subSequence(pos, pos + charCount), out);\n        } else {\n            translate(Character.toString((char) codePoint), out);\n        }\n        // This updates the position variable to skip over the already translated characters.\n        pos += charCount;\n        continue;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..06b12ee4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,29 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int codePoint = Character.codePointAt(input, pos);\n+        int charCount = Character.charCount(codePoint);\n+        if (charCount > 1) {\n+            // surrogate pair\n+            translate(input.subSequence(pos, pos + charCount), out);\n+        } else {\n+            translate(Character.toString((char) codePoint), out);\n+        }\n+        // This updates the position variable to skip over the already translated characters.\n+        pos += charCount;\n+        continue;\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}