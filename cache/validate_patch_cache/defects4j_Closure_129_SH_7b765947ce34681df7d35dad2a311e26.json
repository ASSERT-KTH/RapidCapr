{
    "patch": "      // Keep track of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      \n      // ignore cast nodes if first child is GETPROP or GETELEM\n      if (NodeUtil.isGet(first)) {\n        Node second = first.getNext();\n        if (second.isCast()) {\n          second = second.getFirstChild(); \n        }\n        first = second;\n      } else if (first.isCast()) {\n        first = first.getFirstChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..0fcc4ba6 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,19 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      // Keep track of the \"this\" context of a call.  A call without an\n+      // explicit \"this\" is a free call.\n+      Node first = n.getFirstChild();\n+      \n+      // ignore cast nodes if first child is GETPROP or GETELEM\n+      if (NodeUtil.isGet(first)) {\n+        Node second = first.getNext();\n+        if (second.isCast()) {\n+          second = second.getFirstChild(); \n+        }\n+        first = second;\n+      } else if (first.isCast()) {\n+        first = first.getFirstChild();\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}