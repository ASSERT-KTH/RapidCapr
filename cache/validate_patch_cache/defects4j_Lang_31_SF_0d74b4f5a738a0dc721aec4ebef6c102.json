{
    "patch": "package com.example;\n\npublic class StringUtils {\n\n    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n\n        final int csLength = sequence.length();\n        final int searchLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchLast = searchLength - 1;\n\n        // Check if any search character is a supplementary character\n        for (int i = 0; i < searchLength; i++) {\n            if (Character.isHighSurrogate(searchChars[i])) {\n                if (i < searchLast && Character.isLowSurrogate(searchChars[i + 1])) {\n                    i++;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid supplementary character at index \" + i);\n                }\n            }\n        }\n\n        for (int i = 0; i < csLength; i++) {\n            final char ch = sequence.charAt(i);\n\n            // Check if the current character matches any of the search characters\n            for (int j = 0; j < searchLength; j++) {\n                final char searchChar = searchChars[j];\n                if (ch == searchChar) {\n                    // Found a match\n                    return true;\n                }\n                if (Character.isHighSurrogate(searchChar)) {\n                    if (j < searchLast && i < csLast && sequence.charAt(i + 1) == Character.lowSurrogate(searchChars[j + 1])) {\n                        // Found a match with supplementary character\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f535ba0e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,56 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+package com.example;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence sequence, final char... searchChars) {\n+        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+\n+        final int csLength = sequence.length();\n+        final int searchLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchLast = searchLength - 1;\n+\n+        // Check if any search character is a supplementary character\n+        for (int i = 0; i < searchLength; i++) {\n+            if (Character.isHighSurrogate(searchChars[i])) {\n+                if (i < searchLast && Character.isLowSurrogate(searchChars[i + 1])) {\n+                    i++;\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid supplementary character at index \" + i);\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = sequence.charAt(i);\n+\n+            // Check if the current character matches any of the search characters\n+            for (int j = 0; j < searchLength; j++) {\n+                final char searchChar = searchChars[j];\n+                if (ch == searchChar) {\n+                    // Found a match\n+                    return true;\n+                }\n+                if (Character.isHighSurrogate(searchChar)) {\n+                    if (j < searchLast && i < csLast && sequence.charAt(i + 1) == Character.lowSurrogate(searchChars[j + 1])) {\n+                        // Found a match with supplementary character\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}