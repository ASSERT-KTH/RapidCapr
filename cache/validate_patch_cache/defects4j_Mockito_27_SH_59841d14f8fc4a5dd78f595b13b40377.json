{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock instanceof Factory) {\n            Callback[] callbacks = ((Factory) mock).getCallbacks();\n            List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n            if (!callbackList.contains(newFilter)) {\n                callbackList.add(newFilter);\n            }\n            ((Factory) mock).setCallbacks(callbackList.toArray(new Callback[callbackList.size()]));\n        } else {\n            throw new RuntimeException(\"Mock object is not a Factory instance.\");\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..aee980b41 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Factory) {\n+            Callback[] callbacks = ((Factory) mock).getCallbacks();\n+            List<Callback> callbackList = new ArrayList<>(Arrays.asList(callbacks));\n+            if (!callbackList.contains(newFilter)) {\n+                callbackList.add(newFilter);\n+            }\n+            ((Factory) mock).setCallbacks(callbackList.toArray(new Callback[callbackList.size()]));\n+        } else {\n+            throw new RuntimeException(\"Mock object is not a Factory instance.\");\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}