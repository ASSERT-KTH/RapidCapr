{
    "patch": "public static double getTypedPercent(JSONObject json) {\n    double count = 0.0;\n    double total = 0.0;\n\n    JSONArray dataArray = json.getJSONArray(\"data\");\n\n    for (int i = 0; i < dataArray.length(); i++) {\n        JSONObject dataObj = dataArray.getJSONObject(i);\n        if (dataObj.has(\"type\")) {\n            String type = dataObj.getString(\"type\");\n            if (type.equals(\"typed\")) {\n                count += dataObj.getDouble(\"count\");\n            }\n            total += dataObj.getDouble(\"count\");\n        }\n    }\n\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b68bf034 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject json) {\n+    double count = 0.0;\n+    double total = 0.0;\n+\n+    JSONArray dataArray = json.getJSONArray(\"data\");\n+\n+    for (int i = 0; i < dataArray.length(); i++) {\n+        JSONObject dataObj = dataArray.getJSONObject(i);\n+        if (dataObj.has(\"type\")) {\n+            String type = dataObj.getString(\"type\");\n+            if (type.equals(\"typed\")) {\n+                count += dataObj.getDouble(\"count\");\n+            }\n+            total += dataObj.getDouble(\"count\");\n+        }\n+    }\n+\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}