{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = replaceWorst(expanded, original, comparator);\n            } else {\n                // accept the reflected simplex\n                simplex = replaceWorst(reflected, original, comparator);\n            }\n\n            return;\n\n        }\n\n        // perform a contraction\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = replaceWorst(contracted, original, comparator);\n            return;\n        }\n\n        // perform a reduction\n        simplex = reduction(original, comparator);\n    }\n}\n\nprivate RealPointValuePair[] reduction(final RealPointValuePair[] original,\n                                        final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    contractedSimplex[0] = best;\n\n    for (int i = 1; i < simplex.length; i++) {\n        RealPointValuePair vertex = original[i];\n        RealPointValuePair contractedVertex = new RealPointValuePair(\n                best.getPoint().add(vertex.getPoint().subtract(best.getPoint()).mapMultiply(sigma)), Double.NaN);\n        contractedSimplex[i] = contractedVertex;\n    }\n\n    for (int i = 1; i < simplex.length; i++) {\n        RealPointValuePair contracted;\n        if (Math.random() < probability) {\n            contracted = evaluateNewSimplex(contractedSimplex, alpha, comparator);\n            simplex = replaceWorst(contracted, contractedSimplex, comparator);\n        } else {\n            simplex = replaceWorst(simplex[i].immutablePointUpdate(\n                    best.getPoint().add(simplex[i].getPoint().subtract(best.getPoint()).mapMultiply(sigma))),\n                    simplex, comparator);\n        }\n    }\n\n    return simplex;\n}\n\nprivate RealPointValuePair[] replaceWorst(final RealPointValuePair replacement,\n                                           final RealPointValuePair[] original,\n                                           final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] working = Arrays.copyOf(original, original.length);\n    working[getWorst(original)] = replacement;\n\n    return working;\n}\n\nprivate int getWorst(final RealPointValuePair[] array) {\n    int worstIndex = 0;\n    double worstValue = array[0].getValue();\n    for (int i = 1; i < array.length; i++) {\n        final double value = array[i].getValue();\n        if (value > worstValue) {\n            worstIndex = i;\n            worstValue = value;\n        }\n    }\n    return worstIndex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..434b0aff9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,97 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = replaceWorst(expanded, original, comparator);\n+            } else {\n+                // accept the reflected simplex\n+                simplex = replaceWorst(reflected, original, comparator);\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // perform a contraction\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = replaceWorst(contracted, original, comparator);\n+            return;\n+        }\n \n-            // check convergence\n-                return;\n-            }\n+        // perform a reduction\n+        simplex = reduction(original, comparator);\n+    }\n+}\n+\n+private RealPointValuePair[] reduction(final RealPointValuePair[] original,\n+                                        final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    contractedSimplex[0] = best;\n+\n+    for (int i = 1; i < simplex.length; i++) {\n+        RealPointValuePair vertex = original[i];\n+        RealPointValuePair contractedVertex = new RealPointValuePair(\n+                best.getPoint().add(vertex.getPoint().subtract(best.getPoint()).mapMultiply(sigma)), Double.NaN);\n+        contractedSimplex[i] = contractedVertex;\n+    }\n \n+    for (int i = 1; i < simplex.length; i++) {\n+        RealPointValuePair contracted;\n+        if (Math.random() < probability) {\n+            contracted = evaluateNewSimplex(contractedSimplex, alpha, comparator);\n+            simplex = replaceWorst(contracted, contractedSimplex, comparator);\n+        } else {\n+            simplex = replaceWorst(simplex[i].immutablePointUpdate(\n+                    best.getPoint().add(simplex[i].getPoint().subtract(best.getPoint()).mapMultiply(sigma))),\n+                    simplex, comparator);\n         }\n+    }\n+\n+    return simplex;\n+}\n+\n+private RealPointValuePair[] replaceWorst(final RealPointValuePair replacement,\n+                                           final RealPointValuePair[] original,\n+                                           final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] working = Arrays.copyOf(original, original.length);\n+    working[getWorst(original)] = replacement;\n \n+    return working;\n+}\n+\n+private int getWorst(final RealPointValuePair[] array) {\n+    int worstIndex = 0;\n+    double worstValue = array[0].getValue();\n+    for (int i = 1; i < array.length; i++) {\n+        final double value = array[i].getValue();\n+        if (value > worstValue) {\n+            worstIndex = i;\n+            worstValue = value;\n+        }\n     }\n+    return worstIndex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}