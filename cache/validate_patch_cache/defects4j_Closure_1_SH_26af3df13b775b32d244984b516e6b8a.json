{
    "patch": "    Node body = function.getLastChild();\n    NodeList<Node> parameters = NodeUtil.getFunctionParameters(function);\n    int nParams = parameters.getLength();\n    int unusedParamCount = 0;\n\n    for (int i = nParams - 1; i >= 0; i--) {\n      Node param = parameters.get(i);\n\n      if (referenced.contains(fnScope.getVar(param.getString()))) {\n        break;\n      }\n\n      unusedParamCount++;\n      body.removeChild(param);\n    }\n\n    if (unusedParamCount == nParams) {\n      // If all parameters are unused, we can drop the procedure type.\n      function.removeChild(body);\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c9e96e36 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node body = function.getLastChild();\n+    NodeList<Node> parameters = NodeUtil.getFunctionParameters(function);\n+    int nParams = parameters.getLength();\n+    int unusedParamCount = 0;\n+\n+    for (int i = nParams - 1; i >= 0; i--) {\n+      Node param = parameters.get(i);\n+\n+      if (referenced.contains(fnScope.getVar(param.getString()))) {\n+        break;\n+      }\n+\n+      unusedParamCount++;\n+      body.removeChild(param);\n+    }\n+\n+    if (unusedParamCount == nParams) {\n+      // If all parameters are unused, we can drop the procedure type.\n+      function.removeChild(body);\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}