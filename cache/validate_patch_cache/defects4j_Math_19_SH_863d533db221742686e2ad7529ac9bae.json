{
    "patch": "if (boundaries != null) {\n    for (int i = 0; i < init.length; i++) {\n        double range = boundaries[1][i] - boundaries[0][i];\n        if (!Double.isFinite(range) || Math.abs(range) >= Double.MAX_VALUE / 2.0) {\n            throw new NumberIsTooLarg",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..c5eabd437 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,11 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (boundaries != null) {\n+    for (int i = 0; i < init.length; i++) {\n+        double range = boundaries[1][i] - boundaries[0][i];\n+        if (!Double.isFinite(range) || Math.abs(range) >= Double.MAX_VALUE / 2.0) {\n+            throw new NumberIsTooLarg\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: '(' or '[' expected",
    "test_result": "ERROR"
}