{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0 || bounds[0] == Object.class) {\n    registerTypeVariablesOn(Object.class);\n} else {\n    for (Type type : bounds) {\n        registerTypeVariablesOn(type);\n        if (type instanceof TypeVariable) {\n            readTypeVariables();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1588ff10a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,22 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0 || bounds[0] == Object.class) {\n+    registerTypeVariablesOn(Object.class);\n+} else {\n+    for (Type type : bounds) {\n+        registerTypeVariablesOn(type);\n+        if (type instanceof TypeVariable) {\n+            readTypeVariables();\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}