{
    "patch": "public static double getTypedPercent(String input) {\n    double count = 0;\n    double total = 0;\n\n    Scanner scanner = new Scanner(input);\n\n    while(scanner.hasNextLine()) {\n        total++;\n        String line = scanner.nextLine();\n        String[] parts = line.split(\",\");\n        \n        if (parts.length > 1) {\n            try {\n                Double.parseDouble(parts[1]);\n                count++;\n            } catch (NumberFormatException e) {\n                // ignore and proceed to next line\n            }\n        }\n    }\n\n    scanner.close();\n\n    return (count / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8e043da0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String input) {\n+    double count = 0;\n+    double total = 0;\n+\n+    Scanner scanner = new Scanner(input);\n+\n+    while(scanner.hasNextLine()) {\n+        total++;\n+        String line = scanner.nextLine();\n+        String[] parts = line.split(\",\");\n+        \n+        if (parts.length > 1) {\n+            try {\n+                Double.parseDouble(parts[1]);\n+                count++;\n+            } catch (NumberFormatException e) {\n+                // ignore and proceed to next line\n+            }\n+        }\n+    }\n+\n+    scanner.close();\n+\n+    return (count / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}