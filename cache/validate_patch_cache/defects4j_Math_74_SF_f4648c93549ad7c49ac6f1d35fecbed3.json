{
    "patch": "  private static final int MAX_EVALUATIONS = 200;\n\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n    throws DerivativeException, IntegratorException {\n\n    int neq = equations.getDimension();\n    double[] y1 = new double[neq];\n    double[] yDot0 = new double[neq];\n    double[] yDot1 = new double[neq];\n    double[] yMidDots = new double[neq];\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput()) {\n      final DormandPrince54StepInterpolator ddp5Interpolator =\n        new DormandPrince54StepInterpolator();\n      ddp5Interpolator.reinitialize(this, y, yDot0, y1, yDot1, yMidDots);\n      interpolator = ddp5Interpolator;\n    } else {\n      interpolator = new DummyStepInterpolator(y1, false);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    firstStep = true;\n    boolean forward = t > t0;\n    double[] yTmp = new double[neq];\n    System.arraycopy(y0, 0, y, 0, neq);\n    double hNew = 0;\n    interpolator.storeTime(t0);\n    stepStart = t0;\n\n    // main integration loop\n    while (true) {\n      interpolator.shift();\n\n      // set up the sample step\n      if (firstStep) {\n        hNew = initializeStep(forward, getOrder(), y0, y1, yDot0, yMidDots, yTmp, t0, t, stepSize);\n        firstStep = false;\n      } else {\n        hNew = filterStep(hNew, forward, true);\n      }\n      double nextT = stepStart + hNew;\n      if (forward ? nextT >= t : nextT <= t) {\n        hNew = t - stepStart;\n        nextT = t;\n      }\n\n      // check for too small steps\n      if (Math.abs(hNew) <= Math.ulp(stepStart)) {\n        throw new DerivativeException(LocalizedFormats.EQUAL_STEPSIZE_NOT_SUPPORTED_BY_DORMAND_PRINCE,\n                                      stepStart);\n      }\n\n      // Propagate one step\n      final int    lastRow    = updateHighOrderDerivativesPhase1(y, yDot0, yMidDots, yDot1, hNew, yTmp);\n      final double errorScale = estimateErrorScale(y0, yDot0, y1, yDot1, yMidDots, hNew);\n      updateHighOrderDerivativesPhase2(y, yMidDots, yDot1, errorScale, lastRow, yTmp);\n\n      // check convergence\n      double error = 0;\n      for (int j = 0; j < neq; ++j) {\n        double e = Math.abs(y0[j]) + Math.abs(y1[j]);\n        if (e <= 1.0) {\n          e = 1;\n        }\n        double tol = scalAbsoluteTolerance + scalRelativeTolerance * e;\n        double ratio = (y1[j] - y[j]) / tol;\n        error += ratio * ratio;\n      }\n      error = Math.sqrt(error / neq);\n      if (error > 1.0) {\n        // reject step and attempt to reduce error\n        hNew = filterStep(hNew * Math.min(maxGrowth, safety * Math.pow(error, -0.25)), forward, false);\n      } else {\n        // accept step\n        interpolator.storeTime(nextT);\n        System.arraycopy(y1, 0, y, 0, y0.length);\n        if (stepHandler != null && !stepHandler.handleStep(interpolator, lastStep)) {\n          throw new IntegratorException(LocalizedFormats.STEP_HANDLER_REJECTED_THE_STEP);\n        }\n        stepStart = nextT;\n        if (lastStep) {\n          interpolator.storeTime(t);\n          resetInternalState();\n          return stepStart;\n        }\n        // prepare next step\n        double dotTmp[] = yDot0;\n        yDot0 = yDot1;\n        yDot1 = dotTmp;\n        interpolator.storeTime(stepStart);\n        for (int j = 0; j < neq; ++j) {\n          yMidDots[lastRow][j] = yDot1[j];\n        }\n      }\n\n    }\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..09bde4a21 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,173 +189,111 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n+  private static final int MAX_EVALUATIONS = 200;\n+\n   public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0,\n                           final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n+    throws DerivativeException, IntegratorException {\n+\n+    int neq = equations.getDimension();\n+    double[] y1 = new double[neq];\n+    double[] yDot0 = new double[neq];\n+    double[] yDot1 = new double[neq];\n+    double[] yMidDots = new double[neq];\n \n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n     resetEvaluations();\n-    final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\n     AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n+    if (requiresDenseOutput()) {\n+      final DormandPrince54StepInterpolator ddp5Interpolator =\n+        new DormandPrince54StepInterpolator();\n+      ddp5Interpolator.reinitialize(this, y, yDot0, y1, yDot1, yMidDots);\n+      interpolator = ddp5Interpolator;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+      interpolator = new DummyStepInterpolator(y1, false);\n     }\n     interpolator.storeTime(t0);\n \n     // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n+    firstStep = true;\n+    boolean forward = t > t0;\n+    double[] yTmp = new double[neq];\n+    System.arraycopy(y0, 0, y, 0, neq);\n+    double hNew = 0;\n+    interpolator.storeTime(t0);\n+    stepStart = t0;\n \n     // main integration loop\n-    while (!lastStep) {\n-\n+    while (true) {\n       interpolator.shift();\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n-\n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n-\n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n-            }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n-\n-        stepSize = hNew;\n-\n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n-            }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n-\n-        }\n-\n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n-        }\n-\n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n-        }\n-\n+      // set up the sample step\n+      if (firstStep) {\n+        hNew = initializeStep(forward, getOrder(), y0, y1, yDot0, yMidDots, yTmp, t0, t, stepSize);\n+        firstStep = false;\n+      } else {\n+        hNew = filterStep(hNew, forward, true);\n       }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n+      double nextT = stepStart + hNew;\n+      if (forward ? nextT >= t : nextT <= t) {\n+        hNew = t - stepStart;\n+        nextT = t;\n       }\n-      stepStart = nextStep;\n \n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n+      // check for too small steps\n+      if (Math.abs(hNew) <= Math.ulp(stepStart)) {\n+        throw new DerivativeException(LocalizedFormats.EQUAL_STEPSIZE_NOT_SUPPORTED_BY_DORMAND_PRINCE,\n+                                      stepStart);\n       }\n \n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n+      // Propagate one step\n+      final int    lastRow    = updateHighOrderDerivativesPhase1(y, yDot0, yMidDots, yDot1, hNew, yTmp);\n+      final double errorScale = estimateErrorScale(y0, yDot0, y1, yDot1, yMidDots, hNew);\n+      updateHighOrderDerivativesPhase2(y, yMidDots, yDot1, errorScale, lastRow, yTmp);\n \n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n+      // check convergence\n+      double error = 0;\n+      for (int j = 0; j < neq; ++j) {\n+        double e = Math.abs(y0[j]) + Math.abs(y1[j]);\n+        if (e <= 1.0) {\n+          e = 1;\n+        }\n+        double tol = scalAbsoluteTolerance + scalRelativeTolerance * e;\n+        double ratio = (y1[j] - y[j]) / tol;\n+        error += ratio * ratio;\n+      }\n+      error = Math.sqrt(error / neq);\n+      if (error > 1.0) {\n+        // reject step and attempt to reduce error\n+        hNew = filterStep(hNew * Math.min(maxGrowth, safety * Math.pow(error, -0.25)), forward, false);\n+      } else {\n+        // accept step\n+        interpolator.storeTime(nextT);\n+        System.arraycopy(y1, 0, y, 0, y0.length);\n+        if (stepHandler != null && !stepHandler.handleStep(interpolator, lastStep)) {\n+          throw new IntegratorException(LocalizedFormats.STEP_HANDLER_REJECTED_THE_STEP);\n+        }\n+        stepStart = nextT;\n+        if (lastStep) {\n+          interpolator.storeTime(t);\n+          resetInternalState();\n+          return stepStart;\n+        }\n+        // prepare next step\n+        double dotTmp[] = yDot0;\n+        yDot0 = yDot1;\n+        yDot1 = dotTmp;\n+        interpolator.storeTime(stepStart);\n+        for (int j = 0; j < neq; ++j) {\n+          yMidDots[lastRow][j] = yDot1[j];\n+        }\n       }\n \n     }\n-\n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n-\n   }\n \n   /** Get the minimal reduction factor for stepsize control.",
    "result_reason": "error: annotation type not applicable to this kind of declaration",
    "test_result": "ERROR"
}