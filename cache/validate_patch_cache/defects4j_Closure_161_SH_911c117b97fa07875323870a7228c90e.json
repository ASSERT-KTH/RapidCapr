{
    "patch": "// Check if the access is an l-value or if it is not being used as an assignment target\nif (NodeUtil.isLValue(n) || !NodeUtil.isAssignmentTarget(n)) {\n  return n;\n}\nNode assignParent = parent.getFirstChild();\nif (assignParent.getType() == Token.GETELEM && assignParent.getFirstChild().isEquivalentTo(left)) {\n  if (NodeUtil.isAssignmentOp(parent)) {\n    return n;\n  }\n  Node grandParent = parent.getParent();\n  if (grandParent != null && gran",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..f69274aa 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,17 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the access is an l-value or if it is not being used as an assignment target\n+if (NodeUtil.isLValue(n) || !NodeUtil.isAssignmentTarget(n)) {\n+  return n;\n+}\n+Node assignParent = parent.getFirstChild();\n+if (assignParent.getType() == Token.GETELEM && assignParent.getFirstChild().isEquivalentTo(left)) {\n+  if (NodeUtil.isAssignmentOp(parent)) {\n+    return n;\n+  }\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && gran\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}