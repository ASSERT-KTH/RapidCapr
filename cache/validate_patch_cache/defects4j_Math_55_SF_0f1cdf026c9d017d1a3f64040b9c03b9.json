{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double v1X = v1.getX();\n    double v1Y = v1.getY();\n    double v1Z = v1.getZ();\n    double v2X = v2.getX();\n    double v2Y = v2.getY();\n    double v2Z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double factor1 = FastMath.max(FastMath.max(FastMath.abs(v1X), FastMath.abs(v1Y)), FastMath.abs(v1Z));\n    double factor2 = FastMath.max(FastMath.max(FastMath.abs(v2X), FastMath.abs(v2Y)), FastMath.abs(v2Z));\n    v1X /= factor1;\n    v1Y /= factor1;\n    v1Z /= factor1;\n    v2X /= factor2;\n    v2Y /= factor2;\n    v2Z /= factor2;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan-Parlett algorithm\n    // https://en.wikipedia.org/wiki/Kahan%E2%80%93Babu%C5%A1ka_algorithm\n    double dotV1V2 = v1X * v2X + v1Y * v2Y + v1Z * v2Z;\n    double dotV2V2 = v2X * v2X + v2Y * v2Y + v2Z * v2Z;\n    double alpha = dotV1V2 / dotV2V2;\n    Vector3D minusAlphaV2 = new Vector3D(-alpha * v2X, -alpha * v2Y, -alpha * v2Z);\n    Vector3D newV1 = new Vector3D(v1X, v1Y, v1Z).add(minusAlphaV2);\n    \n    // compute cross product from v3 and v2 instead of v1 and v2\n    Vector3D crossProductVector = new Vector3D(newV1.getY() * v2Z - newV1.getZ() * v2Y,\n            newV1.getZ() * v2X - newV1.getX() * v2Z, newV1.getX() * v2Y - newV1.getY() * v2X);\n    \n    // adjust the computed cross product vector back to the original scale\n    return crossProductVector.scalarMultiply(factor1 * factor2 / crossProductVector.getNorm());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..80082b34c 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,43 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    double v1X = v1.getX();\n+    double v1Y = v1.getY();\n+    double v1Z = v1.getZ();\n+    double v2X = v2.getX();\n+    double v2Y = v2.getY();\n+    double v2Z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double factor1 = FastMath.max(FastMath.max(FastMath.abs(v1X), FastMath.abs(v1Y)), FastMath.abs(v1Z));\n+    double factor2 = FastMath.max(FastMath.max(FastMath.abs(v2X), FastMath.abs(v2Y)), FastMath.abs(v2Z));\n+    v1X /= factor1;\n+    v1Y /= factor1;\n+    v1Z /= factor1;\n+    v2X /= factor2;\n+    v2Y /= factor2;\n+    v2Z /= factor2;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan-Parlett algorithm\n+    // https://en.wikipedia.org/wiki/Kahan%E2%80%93Babu%C5%A1ka_algorithm\n+    double dotV1V2 = v1X * v2X + v1Y * v2Y + v1Z * v2Z;\n+    double dotV2V2 = v2X * v2X + v2Y * v2Y + v2Z * v2Z;\n+    double alpha = dotV1V2 / dotV2V2;\n+    Vector3D minusAlphaV2 = new Vector3D(-alpha * v2X, -alpha * v2Y, -alpha * v2Z);\n+    Vector3D newV1 = new Vector3D(v1X, v1Y, v1Z).add(minusAlphaV2);\n+    \n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    Vector3D crossProductVector = new Vector3D(newV1.getY() * v2Z - newV1.getZ() * v2Y,\n+            newV1.getZ() * v2X - newV1.getX() * v2Z, newV1.getX() * v2Y - newV1.getY() * v2X);\n+    \n+    // adjust the computed cross product vector back to the original scale\n+    return crossProductVector.scalarMultiply(factor1 * factor2 / crossProductVector.getNorm());\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.289686993997119>",
    "test_result": "FAIL"
}