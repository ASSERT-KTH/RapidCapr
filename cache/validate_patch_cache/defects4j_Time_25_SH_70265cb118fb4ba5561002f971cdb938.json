{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if we just return offsetAdjusted then the time is pushed\n                    // back before the transition, whereas it should be\n                    // on or after the transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        // If the gap is exactly one hour, then it's possible that the instant in\n                        // the gap maps back to the same local time, which can cause the offset\n                        // adjustment to flip. To resolve this, check if getOffset() is consistent\n                        // around the transition. If it isn't, then return the original offset.\n                        int offsetBefore = getOffset(nextLocal - DateTimeConstants.MILLIS_PER_HOUR);\n                        int offsetAfter = getOffset(nextLocal);\n                        if (offsetBefore == offsetAfter) {\n                            return offsetBefore;\n                        } else {\n                            return offsetLocal;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1d86d8a2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if we just return offsetAdjusted then the time is pushed\n+                    // back before the transition, whereas it should be\n+                    // on or after the transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        // If the gap is exactly one hour, then it's possible that the instant in\n+                        // the gap maps back to the same local time, which can cause the offset\n+                        // adjustment to flip. To resolve this, check if getOffset() is consistent\n+                        // around the transition. If it isn't, then return the original offset.\n+                        int offsetBefore = getOffset(nextLocal - DateTimeConstants.MILLIS_PER_HOUR);\n+                        int offsetAfter = getOffset(nextLocal);\n+                        if (offsetBefore == offsetAfter) {\n+                            return offsetBefore;\n+                        } else {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}