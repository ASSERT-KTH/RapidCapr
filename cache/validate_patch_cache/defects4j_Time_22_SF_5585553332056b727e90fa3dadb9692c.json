{
    "patch": "protected BasePeriod(long duration) {\n    this(duration, PeriodType.standard());\n}\n\nprotected BasePeriod(long duration, PeriodType type) {\n    super();\n    iType = type;\n    iValues = new int[type.size()];\n    setPeriod(duration);\n}\n\nprivate void setPeriod(long duration) {\n    duration = FieldUtils.safeAdd(duration, 0);  // ensures non-null for duration\n    int[] values = iType.getFieldTypes();\n    long remainder = duration;\n    for (int i = 0, imax = values.length; i < imax; i++) {\n        DurationFieldType type = values[i].getDurationType();\n        int value;\n        if (type == DurationFieldType.years()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else if (type == DurationFieldType.months()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else if (type == DurationFieldType.weeks()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else if (type == DurationFieldType.days()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else if (type == DurationFieldType.hours()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else if (type == DurationFieldType.minutes()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else if (type == DurationFieldType.seconds()) {\n            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n            iValues[i] = value;\n            if (value != 0) {\n                duration = remainder;\n            }\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }\n    }\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..e0e014bc 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,79 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    this(duration, PeriodType.standard());\n+}\n+\n+protected BasePeriod(long duration, PeriodType type) {\n+    super();\n+    iType = type;\n+    iValues = new int[type.size()];\n+    setPeriod(duration);\n+}\n+\n+private void setPeriod(long duration) {\n+    duration = FieldUtils.safeAdd(duration, 0);  // ensures non-null for duration\n+    int[] values = iType.getFieldTypes();\n+    long remainder = duration;\n+    for (int i = 0, imax = values.length; i < imax; i++) {\n+        DurationFieldType type = values[i].getDurationType();\n+        int value;\n+        if (type == DurationFieldType.years()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else if (type == DurationFieldType.months()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else if (type == DurationFieldType.weeks()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else if (type == DurationFieldType.days()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else if (type == DurationFieldType.hours()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else if (type == DurationFieldType.minutes()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else if (type == DurationFieldType.seconds()) {\n+            value = getDurationField(type).getDifferenceAsInt(0L, duration);\n+            remainder = duration - getDurationField(type).getFieldValue(0L, value);\n+            iValues[i] = value;\n+            if (value != 0) {\n+                duration = remainder;\n+            }\n+        } else {\n+            throw new RuntimeException(\"Unreachable\");\n+        }\n     }\n+}\n+\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}