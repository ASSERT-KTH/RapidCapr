{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS).spiedInstance(mock));\n    Enhancer enhancer = new Enhancer();\n    enhancer.setSuperclass(mock.getClass());\n    enhancer.setCallback(newFilter);\n    T newMock = (T) enhancer.create();\n    copyMockState(mock, newMock);\n}\n// This function is needed to copy over the state of the mock to the new mock.\nprivate void copyMockState(Object mock, Object newMock) {\n    if (!(mock instanceof MockAccess)) {\n        return;\n    }\n    MockAccess mockAccess = (MockAccess) mock;\n    MockAccess newMockAccess = (MockAccess) newMock;\n\n    MockHandler<?> mockHandler = mockAccess.getMockitoInterceptor().getMockHandler();\n    MockHandler<?> newMockHandler = newMockAccess.getMockitoInterceptor().getMockHandler();\n\n    @SuppressWarnings(\"unchecked\")\n    Map<Object, MockCreationSettings<?>> mocksOnThread = MockRepository.instance().getMocks();\n    MockCreationSettings<?> settings = mocksOnThread.get(mock);\n    if (settings == null) {\n        settings = MockSettingsImpl.INSTANCE;\n    }\n\n    newMockAccess.getMockitoInterceptor().setMockHandler(newMockHandler);\n    MockRepository.putAdditionalState(newMock, MockRepository.pullAdditionalState(mock));\n    InterfaceOnlyMockMaker.copyMockState(mock, newMock);\n    MockRepository.putMock(settings.name(), newMock);\n    newMockHandler.setDelegate(Delegate.INSTANCE);\n    MockitoCore.instance().onMockReset(newMock, settings);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b30802a49 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,42 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS).spiedInstance(mock));\n+    Enhancer enhancer = new Enhancer();\n+    enhancer.setSuperclass(mock.getClass());\n+    enhancer.setCallback(newFilter);\n+    T newMock = (T) enhancer.create();\n+    copyMockState(mock, newMock);\n+}\n+// This function is needed to copy over the state of the mock to the new mock.\n+private void copyMockState(Object mock, Object newMock) {\n+    if (!(mock instanceof MockAccess)) {\n+        return;\n+    }\n+    MockAccess mockAccess = (MockAccess) mock;\n+    MockAccess newMockAccess = (MockAccess) newMock;\n+\n+    MockHandler<?> mockHandler = mockAccess.getMockitoInterceptor().getMockHandler();\n+    MockHandler<?> newMockHandler = newMockAccess.getMockitoInterceptor().getMockHandler();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Map<Object, MockCreationSettings<?>> mocksOnThread = MockRepository.instance().getMocks();\n+    MockCreationSettings<?> settings = mocksOnThread.get(mock);\n+    if (settings == null) {\n+        settings = MockSettingsImpl.INSTANCE;\n+    }\n+\n+    newMockAccess.getMockitoInterceptor().setMockHandler(newMockHandler);\n+    MockRepository.putAdditionalState(newMock, MockRepository.pullAdditionalState(mock));\n+    InterfaceOnlyMockMaker.copyMockState(mock, newMock);\n+    MockRepository.putMock(settings.name(), newMock);\n+    newMockHandler.setDelegate(Delegate.INSTANCE);\n+    MockitoCore.instance().onMockReset(newMock, settings);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}