{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null) {\n          break;\n        }\n      }\n\n      if (docInfo == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      JSType ownerType = normalizeClassType(objectType);\n      Visibility visibility = docInfo.getVisibility();\n\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = null;\n        if (overridingInfo != null) {\n          overridingVisibility = overridingInfo.getVisibility();\n        }\n\n        if (!Visibility.isOverrideAllowed(visibility, overridingVisibility)) {\n          String errorMsg = \"\";\n          if (overridingVisibility == Visibility.INHERITED) {\n            errorMsg = String.format(\n                \"Attempt to override property %s in base class %s with property \"\n                + \"in externs. Property overridden despite being marked \"\n                + \"non-overridable.\",\n                propertyName, ownerType.toString());\n          } else {\n            errorMsg = String.format(\n                \"property %s is annotated as @%s, but the \"\n                + \"overriding property is @%s.\",\n                propertyName, visibility, overridingVisibility);\n          }\n          compiler.report(\n              t.makeError(getprop, BAD_PROPERTY_OVERRIDE, errorMsg));\n        }\n\n      } else if (visibility == Visibility.PRIVATE) {\n        JSType currentMethodClass = null;\n        Node currentParent = parent;\n        while (currentParent != null && currentMethodClass == null) {\n          if (NodeUtil.isFunctionBlock(currentParent)) {\n            Node fnNode = currentParent.getParent();\n            if (fnNode.isFunction()) {\n              ObjectType fnClass =\n                  ObjectType.cast(fnNode.getFirstChild().getJSType());\n              if (fnClass != null) {\n                currentMethodClass = normalizeClassType(fnClass);\n              }\n            }\n          }\n          currentParent = currentParent.getParent();\n        }\n        if (currentMethodClass == null) {\n          // Private properties can be accessed only from inside methods\n          // of the same class.\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                           propertyName, ownerType.toString()));\n        } else if (ownerType.differsFrom(currentMethodClass)) {\n          // Private properties can be accessed only from inside methods\n          // of the same class.\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                           propertyName, ownerType.toString()));\n        }\n      } else if (visibility == Visibility.PROTECTED) {\n        if (currentClass == null) {\n          return;\n        }\n        // Any access to a protected property must occur through 'this'.\n        Node recvNode = getprop.getFirstChild().getFirstChild();\n        if (recvNode == null || !NodeUtil.isName(recvNode, \"this\")) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                           propertyName, ownerType.toString()));\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..56c96cd2 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -417,83 +417,90 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n       JSDocInfo docInfo = null;\n       for (; objectType != null;\n            objectType = objectType.getImplicitPrototype()) {\n         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n+        if (docInfo != null) {\n           break;\n         }\n       }\n \n-      if (objectType == null) {\n+      if (docInfo == null) {\n         // We couldn't find a visibility modifier; assume it's public.\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n       JSType ownerType = normalizeClassType(objectType);\n+      Visibility visibility = docInfo.getVisibility();\n+\n       if (isOverride) {\n         // Check an ASSIGN statement that's trying to override a property\n         // on a superclass.\n+\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility = null;\n+        if (overridingInfo != null) {\n+          overridingVisibility = overridingInfo.getVisibility();\n+        }\n \n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n+        if (!Visibility.isOverrideAllowed(visibility, overridingVisibility)) {\n+          String errorMsg = \"\";\n+          if (overridingVisibility == Visibility.INHERITED) {\n+            errorMsg = String.format(\n+                \"Attempt to override property %s in base class %s with property \"\n+                + \"in externs. Property overridden despite being marked \"\n+                + \"non-overridable.\",\n+                propertyName, ownerType.toString());\n+          } else {\n+            errorMsg = String.format(\n+                \"property %s is annotated as @%s, but the \"\n+                + \"overriding property is @%s.\",\n+                propertyName, visibility, overridingVisibility);\n+          }\n           compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n+              t.makeError(getprop, BAD_PROPERTY_OVERRIDE, errorMsg));\n+        }\n+\n+      } else if (visibility == Visibility.PRIVATE) {\n+        JSType currentMethodClass = null;\n+        Node currentParent = parent;\n+        while (currentParent != null && currentMethodClass == null) {\n+          if (NodeUtil.isFunctionBlock(currentParent)) {\n+            Node fnNode = currentParent.getParent();\n+            if (fnNode.isFunction()) {\n+              ObjectType fnClass =\n+                  ObjectType.cast(fnNode.getFirstChild().getJSType());\n+              if (fnClass != null) {\n+                currentMethodClass = normalizeClassType(fnClass);\n+              }\n+            }\n+          }\n+          currentParent = currentParent.getParent();\n+        }\n+        if (currentMethodClass == null) {\n+          // Private properties can be accessed only from inside methods\n+          // of the same class.\n+          compiler.report(\n+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n+                           propertyName, ownerType.toString()));\n+        } else if (ownerType.differsFrom(currentMethodClass)) {\n+          // Private properties can be accessed only from inside methods\n+          // of the same class.\n           compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n+                           propertyName, ownerType.toString()));\n         }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n+      } else if (visibility == Visibility.PROTECTED) {\n+        if (currentClass == null) {\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n+        }\n+        // Any access to a protected property must occur through 'this'.\n+        Node recvNode = getprop.getFirstChild().getFirstChild();\n+        if (recvNode == null || !NodeUtil.isName(recvNode, \"this\")) {\n           compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n+              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n+                           propertyName, ownerType.toString()));\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}