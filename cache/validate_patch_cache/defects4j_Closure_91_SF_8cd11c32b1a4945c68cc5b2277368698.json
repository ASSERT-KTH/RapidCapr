{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                        jsDoc.isInterface() ||\n                        jsDoc.hasThisType() ||\n                        jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {}; // or\n        // var a = {x: function() {}};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME ||\n                pType == Token.ASSIGN ||\n                // object literal keys\n                (pType == Token.STRING_KEY && parent.getParent() != null &&\n                        parent.getParent().getType() == Token.OBJECTLIT) ||\n                (pType == Token.NUMBER &&\n                        parent.getParent() != null &&\n                        parent.getParent().getType() == Token.ARRAYLIT))) {\n            return false;\n        }\n\n\n        // Don't traverse functions that are getting lent to a prototype.\n        if (parent.getType() == Token.ASSIGN) {\n            Node lhs = parent.getFirstChild();\n            // If the LHS is some sort of prototype chain, we shouldn't traverse\n            // down into it.\n            if (isPrototypeChain(lhs)) {\n                return false;\n            }\n            if (t.getScope().isPrototypeMethod(lhs)) {\n                return false;\n            }\n        }\n\n\n    } else if (NodeUtil.isGet(parent)) {\n        // Don't traverse functions that are assigned to prototype property\n        // unless it was assigned to a named function in a prototype assign.\n        Node lhs = parent.getFirstChild();\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getLastChild().getString().equals(\"prototype\") &&\n                (lhs.getType() != Token.GETELEM ||\n                        NodeUtil.isImmutableValue(lhs.getLastChild())) &&\n                !t.getScope().isPrototypeMethod(lhs)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Returns true if the left hand side of an assignment is a prototype chain.\n *\n * @param lhs The left hand side of an assignment.\n */\nprivate boolean isPrototypeChain(Node lhs) {\n    // This method checks if a node looks like \"a.prototype.b = function() {...}\"\n    if (lhs.getType() != Token.GETPROP) {\n        return false;\n    }\n    Node obj = lhs.getFirstChild();\n    Node prop = lhs.getLastChild();\n    if (obj.getType() != Token.GETPROP) {\n        return false;\n    }\n    Node objObj = obj.getFirstChild();\n    Node objProp = obj.getLastChild();\n    return objObj.matchesName(\"Object\") && objProp.matchesName(\"prototype\") &&\n            !prop.matchesQualifiedName(\"constructor\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..64ed0779 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,90 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                        jsDoc.isInterface() ||\n+                        jsDoc.hasThisType() ||\n+                        jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {}; // or\n+        // var a = {x: function() {}};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+                pType == Token.SCRIPT ||\n+                pType == Token.NAME ||\n+                pType == Token.ASSIGN ||\n+                // object literal keys\n+                (pType == Token.STRING_KEY && parent.getParent() != null &&\n+                        parent.getParent().getType() == Token.OBJECTLIT) ||\n+                (pType == Token.NUMBER &&\n+                        parent.getParent() != null &&\n+                        parent.getParent().getType() == Token.ARRAYLIT))) {\n+            return false;\n+        }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (parent.getType() == Token.ASSIGN) {\n+            Node lhs = parent.getFirstChild();\n+            // If the LHS is some sort of prototype chain, we shouldn't traverse\n+            // down into it.\n+            if (isPrototypeChain(lhs)) {\n+                return false;\n+            }\n+            if (t.getScope().isPrototypeMethod(lhs)) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+\n+\n+    } else if (NodeUtil.isGet(parent)) {\n+        // Don't traverse functions that are assigned to prototype property\n+        // unless it was assigned to a named function in a prototype assign.\n+        Node lhs = parent.getFirstChild();\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getLastChild().getString().equals(\"prototype\") &&\n+                (lhs.getType() != Token.GETELEM ||\n+                        NodeUtil.isImmutableValue(lhs.getLastChild())) &&\n+                !t.getScope().isPrototypeMethod(lhs)) {\n             return false;\n-          }\n         }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+/**\n+ * Returns true if the left hand side of an assignment is a prototype chain.\n+ *\n+ * @param lhs The left hand side of an assignment.\n+ */\n+private boolean isPrototypeChain(Node lhs) {\n+    // This method checks if a node looks like \"a.prototype.b = function() {...}\"\n+    if (lhs.getType() != Token.GETPROP) {\n+        return false;\n+    }\n+    Node obj = lhs.getFirstChild();\n+    Node prop = lhs.getLastChild();\n+    if (obj.getType() != Token.GETPROP) {\n+        return false;\n+    }\n+    Node objObj = obj.getFirstChild();\n+    Node objProp = obj.getLastChild();\n+    return objObj.matchesName(\"Object\") && objProp.matchesName(\"prototype\") &&\n+            !prop.matchesQualifiedName(\"constructor\");\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}