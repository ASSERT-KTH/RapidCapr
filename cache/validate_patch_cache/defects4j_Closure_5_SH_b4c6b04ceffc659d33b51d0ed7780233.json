{
    "patch": "  static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n    if (!fn.isFunction()) {\n      return false;\n    }\n\n    if (!NodeUtil.isFunctionExpression(fn)) {\n      return false;\n    }\n\n    if (NodeUtil.isThisReferenced(fn.getLastChild())) {\n      return false;\n    }\n\n    Node parent = fn.getParent();\n    if (!parent.isExprResult()) {\n      return false;\n    }\n\n    // Check that the expression result is a decl statement,\n    // and that it contains only a single variable declaration.\n    Node call = parent.getFirstChild();\n    if (!call.isCall()) {\n      return false;\n    }\n    Node callee = call.getFirstChild();\n    if (!callee.isQualifiedName()) {\n      return false;\n    }\n    String calleeName = callee.getQualifiedName();\n    if (!calleeName.equals(\"goog.scope\")) {\n      return false;\n    }\n\n    Node args = call.getSecondChild();\n    if (!args.isFunction()) {\n      return false;\n    }\n\n    return NodeUtil.getDeclaredVars(args).length == 0;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..d8b163d6 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,46 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+  static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n+    if (!fn.isFunction()) {\n+      return false;\n+    }\n+\n+    if (!NodeUtil.isFunctionExpression(fn)) {\n+      return false;\n+    }\n+\n+    if (NodeUtil.isThisReferenced(fn.getLastChild())) {\n+      return false;\n+    }\n+\n+    Node parent = fn.getParent();\n+    if (!parent.isExprResult()) {\n+      return false;\n+    }\n+\n+    // Check that the expression result is a decl statement,\n+    // and that it contains only a single variable declaration.\n+    Node call = parent.getFirstChild();\n+    if (!call.isCall()) {\n+      return false;\n+    }\n+    Node callee = call.getFirstChild();\n+    if (!callee.isQualifiedName()) {\n+      return false;\n+    }\n+    String calleeName = callee.getQualifiedName();\n+    if (!calleeName.equals(\"goog.scope\")) {\n+      return false;\n+    }\n+\n+    Node args = call.getSecondChild();\n+    if (!args.isFunction()) {\n+      return false;\n+    }\n+\n+    return NodeUtil.getDeclaredVars(args).length == 0;\n+  }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}