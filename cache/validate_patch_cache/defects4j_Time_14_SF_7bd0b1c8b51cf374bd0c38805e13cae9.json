{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n\n    if (valueToAdd > 0) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex && partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                int currentMonth = values[fieldIndex];\n                int currentYear = iChronology.getYear(instant);\n                int newMonth = (currentMonth - 1 + valueToAdd) % 12 + 1;\n                int yearsToAdd = (currentMonth - 1 + valueToAdd) / 12;\n                if (newMonth < currentMonth) {\n                    yearsToAdd++;\n                }\n                int newYear = currentYear + yearsToAdd;\n                int dayOfMonth = iChronology.getDayOfMonth(instant);\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, newYear), newMonth);\n                if (dayOfMonth > maxDayOfMonth) {\n                    dayOfMonth = maxDayOfMonth;\n                }\n                instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    }\n    // Dealing with the negative valueToAdd branches out the solution in a few different ways,\n    // since we need to adjust the computed field values to obtain a valid date time\n    // according to the Gregorian calendar. The following code covers edge cases that have\n    // different results when normalized differently.\n    else {\n        int[] currentValues = Arrays.copyOf(values, values.length);\n        long difference;\n        do {\n            int[] newValues = add(partial, fieldIndex, currentValues, 1);\n            difference = getTimeDifference(partial, values, newValues);\n            if (difference <= valueToAdd) {\n                currentValues = newValues;\n            }\n        } while (difference <= valueToAdd);\n        // Extra check in case increments of one day don't suffice to apply the negative addition.\n        // If valueToAdd == -1, the do-while loop will definitely provide a satisfying solution.\n        if (valueToAdd < -1) {\n            return add(partial, fieldIndex, currentValues, valueToAdd + 1);\n        }\n        // When difference > valueToAdd and difference - valueToAdd < current month days,\n        // we still need to apply an additional decrement to dayOfMonth.\n        long instant = iChronology.set(partial, currentValues[0], currentValues[1], currentValues[2], 0);\n        int currentMonth = currentValues[fieldIndex];\n        int currentYear = iChronology.getYear(instant);\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, currentYear), currentMonth);\n        instant = iChronology.dayOfMonth().set(instant, Math.min(currentValues[2], maxDayOfMonth));\n        int dayOfMonth = iChronology.getDayOfMonth(instant);\n        int newMonth = currentMonth + valueToAdd;\n        int yearsToSubtract = 0;\n        if (newMonth <= 0) {\n            yearsToSubtract = -(newMonth / 12) + 1;\n            newMonth = 12 + newMonth % 12;\n        }\n        int newYear = currentYear - yearsToSubtract;\n        if (newYear < 1) {\n            throw new IllegalArgumentException(\"Minus years out of range\");\n        }\n        int newDayOfMonth;\n        int maxDayOfMonthOfNewMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, newYear), newMonth);\n        if (dayOfMonth > maxDayOfMonthOfNewMonth) {\n            newDayOfMonth = maxDayOfMonthOfNewMonth;\n        } else {\n            newDayOfMonth = dayOfMonth;\n        }\n        instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n        newMonth--;\n        while (getTimeDifference(partial, values, iChronology.get(partial, instant)) < valueToAdd && newMonth > 0) {\n            int maxDayOfMonthOfReducedMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, newYear), newMonth);\n            if (newDayOfMonth > maxDayOfMonthOfReducedMonth) {\n                instant = iChronology.dayOfMonth().set(instant, maxDayOfMonthOfReducedMonth);\n                newDayOfMonth = maxDayOfMonthOfReducedMonth;\n            } else {\n                instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n            }\n            newMonth--;\n            instant = iChronology.monthOfYear().set(instant, newMonth);\n            if (newMonth == 0) {\n                newYear--;\n                if (newYear < 1) {\n                    throw new IllegalArgumentException(\"Minus years out of range\");\n                }\n                instant = iChronology.year().set(instant, newYear);\n                instant = iChronology.monthOfYear().set(instant, 12);\n                instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n                newMonth = 12;\n            }\n        }\n        return iChronology.get(partial, instant);\n    }\n}\n\nprivate long getTimeDifference(ReadablePartial partial, int[] values1, int[] values2) {\n    long instant1 = iChronology.set(partial, values1[0], values1[1], values1[2], 0);\n    long instant2 = iChronology.set(partial, values2[0], values2[1], values2[2], 0);\n    return instant2 - instant1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c6e4e879 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,116 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+\n+    if (valueToAdd > 0) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex && partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n+                int currentMonth = values[fieldIndex];\n+                int currentYear = iChronology.getYear(instant);\n+                int newMonth = (currentMonth - 1 + valueToAdd) % 12 + 1;\n+                int yearsToAdd = (currentMonth - 1 + valueToAdd) / 12;\n+                if (newMonth < currentMonth) {\n+                    yearsToAdd++;\n+                }\n+                int newYear = currentYear + yearsToAdd;\n+                int dayOfMonth = iChronology.getDayOfMonth(instant);\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, newYear), newMonth);\n+                if (dayOfMonth > maxDayOfMonth) {\n+                    dayOfMonth = maxDayOfMonth;\n+                }\n+                instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    }\n+    // Dealing with the negative valueToAdd branches out the solution in a few different ways,\n+    // since we need to adjust the computed field values to obtain a valid date time\n+    // according to the Gregorian calendar. The following code covers edge cases that have\n+    // different results when normalized differently.\n+    else {\n+        int[] currentValues = Arrays.copyOf(values, values.length);\n+        long difference;\n+        do {\n+            int[] newValues = add(partial, fieldIndex, currentValues, 1);\n+            difference = getTimeDifference(partial, values, newValues);\n+            if (difference <= valueToAdd) {\n+                currentValues = newValues;\n+            }\n+        } while (difference <= valueToAdd);\n+        // Extra check in case increments of one day don't suffice to apply the negative addition.\n+        // If valueToAdd == -1, the do-while loop will definitely provide a satisfying solution.\n+        if (valueToAdd < -1) {\n+            return add(partial, fieldIndex, currentValues, valueToAdd + 1);\n+        }\n+        // When difference > valueToAdd and difference - valueToAdd < current month days,\n+        // we still need to apply an additional decrement to dayOfMonth.\n+        long instant = iChronology.set(partial, currentValues[0], currentValues[1], currentValues[2], 0);\n+        int currentMonth = currentValues[fieldIndex];\n+        int currentYear = iChronology.getYear(instant);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, currentYear), currentMonth);\n+        instant = iChronology.dayOfMonth().set(instant, Math.min(currentValues[2], maxDayOfMonth));\n+        int dayOfMonth = iChronology.getDayOfMonth(instant);\n+        int newMonth = currentMonth + valueToAdd;\n+        int yearsToSubtract = 0;\n+        if (newMonth <= 0) {\n+            yearsToSubtract = -(newMonth / 12) + 1;\n+            newMonth = 12 + newMonth % 12;\n+        }\n+        int newYear = currentYear - yearsToSubtract;\n+        if (newYear < 1) {\n+            throw new IllegalArgumentException(\"Minus years out of range\");\n+        }\n+        int newDayOfMonth;\n+        int maxDayOfMonthOfNewMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, newYear), newMonth);\n+        if (dayOfMonth > maxDayOfMonthOfNewMonth) {\n+            newDayOfMonth = maxDayOfMonthOfNewMonth;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newDayOfMonth = dayOfMonth;\n+        }\n+        instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n+        instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+        newMonth--;\n+        while (getTimeDifference(partial, values, iChronology.get(partial, instant)) < valueToAdd && newMonth > 0) {\n+            int maxDayOfMonthOfReducedMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(0L, newYear), newMonth);\n+            if (newDayOfMonth > maxDayOfMonthOfReducedMonth) {\n+                instant = iChronology.dayOfMonth().set(instant, maxDayOfMonthOfReducedMonth);\n+                newDayOfMonth = maxDayOfMonthOfReducedMonth;\n+            } else {\n+                instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+            }\n+            newMonth--;\n+            instant = iChronology.monthOfYear().set(instant, newMonth);\n+            if (newMonth == 0) {\n+                newYear--;\n+                if (newYear < 1) {\n+                    throw new IllegalArgumentException(\"Minus years out of range\");\n+                }\n+                instant = iChronology.year().set(instant, newYear);\n+                instant = iChronology.monthOfYear().set(instant, 12);\n+                instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+                newMonth = 12;\n+            }\n         }\n+        return iChronology.get(partial, instant);\n     }\n+}\n+\n+private long getTimeDifference(ReadablePartial partial, int[] values1, int[] values2) {\n+    long instant1 = iChronology.set(partial, values1[0], values1[1], values1[2], 0);\n+    long instant2 = iChronology.set(partial, values2[0], values2[1], values2[2], 0);\n+    return instant2 - instant1;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}