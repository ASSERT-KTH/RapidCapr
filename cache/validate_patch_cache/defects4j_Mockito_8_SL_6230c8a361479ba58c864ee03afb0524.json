{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n            Type resolvedType = this.contextualActualTypeParameters.get(actualTypeArgument);\n            if (resolvedType == null) {\n                // No resolved type was found for this type variable in the current context, use the original type variable\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                if (resolvedType.equals(typeParameter)) {\n                    // Resolved type refers to this type parameter, use the original type variable\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                } else {\n                    // Use the resolved type for this type parameter\n                    contextualActualTypeParameters.put(typeParameter, resolvedType);\n                }\n            }\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..88728d329 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,23 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n+            Type resolvedType = this.contextualActualTypeParameters.get(actualTypeArgument);\n+            if (resolvedType == null) {\n+                // No resolved type was found for this type variable in the current context, use the original type variable\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            } else {\n+                if (resolvedType.equals(typeParameter)) {\n+                    // Resolved type refers to this type parameter, use the original type variable\n+                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+                } else {\n+                    // Use the resolved type for this type parameter\n+                    contextualActualTypeParameters.put(typeParameter, resolvedType);\n+                }\n+            }\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}