{
    "patch": "    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    } else {\n      // Set the warning level to OFF.\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          CheckLevel.OFF);\n      // Report warning when checkGlobalThis is turned off and language\n      // mode is ECMASCRIPT5_STRICT.\n      if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n        errorHandler.report(\n            RhinoErrorReporter.createGlobalThisUndefinedWarning(\n                \"global\", 0, 0));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..72639823 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,23 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel);\n+    } else {\n+      // Set the warning level to OFF.\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          CheckLevel.OFF);\n+      // Report warning when checkGlobalThis is turned off and language\n+      // mode is ECMASCRIPT5_STRICT.\n+      if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n+        errorHandler.report(\n+            RhinoErrorReporter.createGlobalThisUndefinedWarning(\n+                \"global\", 0, 0));\n+      }\n+    }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}