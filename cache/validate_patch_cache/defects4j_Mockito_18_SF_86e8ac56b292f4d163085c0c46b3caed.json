{
    "patch": "public class MyClass {\n\n    private List<String> values;\n\n    public MyClass() {\n        values = new ArrayList<>();\n    }\n\n    public void addValue(String value) {\n        values.add(value);\n    }\n\n    public Iterable<String> getValues() {\n        return values;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..c63c1c361 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+\n+    private List<String> values;\n+\n+    public MyClass() {\n+        values = new ArrayList<>();\n+    }\n+\n+    public void addValue(String value) {\n+        values.add(value);\n+    }\n+\n+    public Iterable<String> getValues() {\n+        return values;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}