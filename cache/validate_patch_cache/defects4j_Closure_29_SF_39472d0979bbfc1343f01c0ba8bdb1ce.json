{
    "patch": "  private boolean isInlinableObject(List<Reference> refs) {\n    for (Reference ref : refs) {\n      Node name = ref.getNode();\n      Node parent = ref.getParent();\n      Node gramps = ref.getGrandparent();\n\n      // Ignore indirect references, like x.y (except x.y(), since\n      // the function referenced by y might reference 'this').\n      //\n      if (NodeUtil.isNormalGetProp(parent)\n          && parent.getFirstChild() == name\n          && (!NodeUtil.isFunctionObjectCall(gramps.getFirstChild(), parent))) {\n        continue;\n      }\n\n      // Only rewrite VAR declarations or simple assignment statements\n      if (!isVarOrAssignExprLhs(name)) {\n        return false;\n      }\n\n      Node value = ref.getAssignedValue();\n      if (value == null) {\n        // \"var x;\" is ok\n        continue;\n      }\n\n      // We're looking for object literal assignments only.\n      if (!value.isObjectLit()) {\n        return false;\n      }\n\n      // Make sure that the value is not self-refential. IOW,\n      // disallow things like x = {b: x.a}.\n      //\n      // TODO: Only exclude unorderable self-referential\n      // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n      // but x = {a: 1, b: x.a} is.\n      //\n      // Also, ES5 getters/setters aren't handled by this pass.\n      final Set<Node> referredRefs = collectReferredRefs(refs);\n\n      for (Node child = value.getFirstChild(); child != null;\n           child = child.getNext()) {\n        if (child.isGetterDef() ||\n            child.isSetterDef()) {\n          // ES5 get/set not supported.\n          return false;\n        }\n\n        if (!child.isStringKey() && !child.isMemberFunctionDef()) {\n          return false;\n        }\n\n        // Check if the child is safe to inline. Every child node must either have a\n        // simple right-hand-side expression, or be a function.\n        for (Node childValue : child.isMemberFunctionDef()\n            ? new Node[] { child.getLastChild() } : new Node[] { child.getFirstChild() }) {\n          if (childValue == null) {\n            continue;\n          }\n\n          if (childValue.isFunction()) {\n            continue;\n          } else if (childValue.isNew()) {\n            // Only allow `new Foo()` in an object literal if the variable being assigned to\n            // is also involved.\n            Node grandparent = childValue.getParent();\n            if (!NodeUtil.isNewTargetInline(childValue, parent, value) &&\n                !(parent.isAssign() && grandparent.getFirstChild() == parent &&\n                  !NodeUtil.isNormalGetProp(grandparent.getSecondChild()) &&\n                  grandparent.getSecondChild().hasChildren() &&\n                  grandparent.getSecondChild().getFirstChild().isName() &&\n                  grandparent.getSecondChild().getFirstChild().getString().equals(name.getString())) &&\n                !(grandparent.isFunction() && grandparent.getFirstChild() == parent)) {\n              return false;\n            }\n          } else if (childValue.isClass()) {\n            // Only allow `class Foo {}` in an object literal if the variable being assigned to\n            // is also involved.\n            Node grandparent = childValue.getParent();\n            if (!NodeUtil.isClassInstanceInline(childValue, parent, value) &&\n                !(parent.isAssign() && grandparent.getFirstChild() == parent &&\n                  !NodeUtil.isNormalGetProp(grandparent.getSecondChild()) &&\n                  grandparent.getSecondChild().hasChildren() &&\n                  grandparent.getSecondChild().getFirstChild().isName() &&\n                  grandparent.getSecondChild().getFirstChild().getString().equals(name.getString())) &&\n                !(grandparent.isFunction() && grandparent.getFirstChild() == parent)) {\n              return false;\n            }\n          } else if (!NodeUtil.isSimpleExpr(childValue, true) &&\n              !referredRefs.contains(childValue)) {\n            return false;\n          }\n        }\n      }\n      // We have found an acceptable object literal assignment. As\n      // long as there are no other assignments that mess things up,\n      // we can inline.\n      return true;\n    }\n    return false;\n  }\n\n  static Set<Node> collectReferredRefs(List<Reference> refs) {\n    Set<Node> referredRefs = new HashSet<>();\n    for (Reference ref : refs) {\n      Node val = NodeUtil.getRValueOfLValue(ref.getNode());\n      if (val != null && !NodeUtil.mayHaveSideEffects(val)) {\n        referredRefs.add(val);\n      }\n    }\n    return referredRefs;\n  }\n\n  static boolean isVarOrAssignExprLhs(Node n) {\n    if (NodeUtil.isNameDeclaration(n)) {\n      return true;\n    }\n\n    if (n.isExprResult()) {\n      n = n.getFirstChild();\n    }\n\n    if (n.isInc() || n.isDec()) {\n      n = n.getFirstChild();\n    }\n\n    if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isObjectPattern()) {\n      return false;\n    }\n\n    return NodeUtil.isLValue(n);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..b3f187b6 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,139 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+  private boolean isInlinableObject(List<Reference> refs) {\n+    for (Reference ref : refs) {\n+      Node name = ref.getNode();\n+      Node parent = ref.getParent();\n+      Node gramps = ref.getGrandparent();\n+\n+      // Ignore indirect references, like x.y (except x.y(), since\n+      // the function referenced by y might reference 'this').\n+      //\n+      if (NodeUtil.isNormalGetProp(parent)\n+          && parent.getFirstChild() == name\n+          && (!NodeUtil.isFunctionObjectCall(gramps.getFirstChild(), parent))) {\n+        continue;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+      // Only rewrite VAR declarations or simple assignment statements\n+      if (!isVarOrAssignExprLhs(name)) {\n+        return false;\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      Node value = ref.getAssignedValue();\n+      if (value == null) {\n+        // \"var x;\" is ok\n+        continue;\n+      }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+      // We're looking for object literal assignments only.\n+      if (!value.isObjectLit()) {\n+        return false;\n+      }\n+\n+      // Make sure that the value is not self-refential. IOW,\n+      // disallow things like x = {b: x.a}.\n+      //\n+      // TODO: Only exclude unorderable self-referential\n+      // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+      // but x = {a: 1, b: x.a} is.\n+      //\n+      // Also, ES5 getters/setters aren't handled by this pass.\n+      final Set<Node> referredRefs = collectReferredRefs(refs);\n+\n+      for (Node child = value.getFirstChild(); child != null;\n+           child = child.getNext()) {\n+        if (child.isGetterDef() ||\n+            child.isSetterDef()) {\n+          // ES5 get/set not supported.\n+          return false;\n         }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+        if (!child.isStringKey() && !child.isMemberFunctionDef()) {\n           return false;\n         }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n+        // Check if the child is safe to inline. Every child node must either have a\n+        // simple right-hand-side expression, or be a function.\n+        for (Node childValue : child.isMemberFunctionDef()\n+            ? new Node[] { child.getLastChild() } : new Node[] { child.getFirstChild() }) {\n+          if (childValue == null) {\n+            continue;\n           }\n \n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+          if (childValue.isFunction()) {\n+            continue;\n+          } else if (childValue.isNew()) {\n+            // Only allow `new Foo()` in an object literal if the variable being assigned to\n+            // is also involved.\n+            Node grandparent = childValue.getParent();\n+            if (!NodeUtil.isNewTargetInline(childValue, parent, value) &&\n+                !(parent.isAssign() && grandparent.getFirstChild() == parent &&\n+                  !NodeUtil.isNormalGetProp(grandparent.getSecondChild()) &&\n+                  grandparent.getSecondChild().hasChildren() &&\n+                  grandparent.getSecondChild().getFirstChild().isName() &&\n+                  grandparent.getSecondChild().getFirstChild().getString().equals(name.getString())) &&\n+                !(grandparent.isFunction() && grandparent.getFirstChild() == parent)) {\n+              return false;\n             }\n+          } else if (childValue.isClass()) {\n+            // Only allow `class Foo {}` in an object literal if the variable being assigned to\n+            // is also involved.\n+            Node grandparent = childValue.getParent();\n+            if (!NodeUtil.isClassInstanceInline(childValue, parent, value) &&\n+                !(parent.isAssign() && grandparent.getFirstChild() == parent &&\n+                  !NodeUtil.isNormalGetProp(grandparent.getSecondChild()) &&\n+                  grandparent.getSecondChild().hasChildren() &&\n+                  grandparent.getSecondChild().getFirstChild().isName() &&\n+                  grandparent.getSecondChild().getFirstChild().getString().equals(name.getString())) &&\n+                !(grandparent.isFunction() && grandparent.getFirstChild() == parent)) {\n+              return false;\n+            }\n+          } else if (!NodeUtil.isSimpleExpr(childValue, true) &&\n+              !referredRefs.contains(childValue)) {\n+            return false;\n           }\n         }\n+      }\n+      // We have found an acceptable object literal assignment. As\n+      // long as there are no other assignments that mess things up,\n+      // we can inline.\n+      return true;\n+    }\n+    return false;\n+  }\n \n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+  static Set<Node> collectReferredRefs(List<Reference> refs) {\n+    Set<Node> referredRefs = new HashSet<>();\n+    for (Reference ref : refs) {\n+      Node val = NodeUtil.getRValueOfLValue(ref.getNode());\n+      if (val != null && !NodeUtil.mayHaveSideEffects(val)) {\n+        referredRefs.add(val);\n       }\n-      return ret;\n     }\n+    return referredRefs;\n+  }\n+\n+  static boolean isVarOrAssignExprLhs(Node n) {\n+    if (NodeUtil.isNameDeclaration(n)) {\n+      return true;\n+    }\n+\n+    if (n.isExprResult()) {\n+      n = n.getFirstChild();\n+    }\n+\n+    if (n.isInc() || n.isDec()) {\n+      n = n.getFirstChild();\n+    }\n+\n+    if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isObjectPattern()) {\n+      return false;\n+    }\n+\n+    return NodeUtil.isLValue(n);\n+  }\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}