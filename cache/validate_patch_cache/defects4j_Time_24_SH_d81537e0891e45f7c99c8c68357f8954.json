{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        long newMillis = savedField.set(millis, resetFields); // set the new millis value\n        if ((millis < 0) != (newMillis < 0)) { // check for overflow or underflow\n            // adjust millis to prevent overflow\n            if (newMillis >= 0) {\n                millis = Long.MAX_VALUE;\n            } else {\n                millis = Long.MIN_VALUE;\n            }\n            throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..389f201a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        long newMillis = savedField.set(millis, resetFields); // set the new millis value\n+        if ((millis < 0) != (newMillis < 0)) { // check for overflow or underflow\n+            // adjust millis to prevent overflow\n+            if (newMillis >= 0) {\n+                millis = Long.MAX_VALUE;\n+            } else {\n+                millis = Long.MIN_VALUE;\n+            }\n+            throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Parse failed due to numeric overflow",
    "test_result": "FAIL"
}