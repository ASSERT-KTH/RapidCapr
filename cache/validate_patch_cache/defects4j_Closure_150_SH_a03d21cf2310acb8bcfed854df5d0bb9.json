{
    "patch": "// attachLiteralTypes function definition must be added at the beginning \n// of the visit() function definition\nprivate void attachLiteralTypes(Node n) {\n    Preconditions.checkNotNull(n);\n    if (options.getLanguageIn() != LanguageMode.ECMASCRIPT3) {\n        Scope.Var var = scope.getVar(n.getString());\n        JSType varType = null;\n        if (var != null) {\n            varType = var.getType();\n        }\n        if (varType != null) {\n            n.setJSType(varType);\n        } else if (n.isFunction()) {\n            // Default function type\n            n.setJSType(n.getFirstChild().getJSType());\n        } else if (n.isStringLit()) {\n            // Set types for escaped characters and try to interpret as boolean.\n            String strValue = n.getString();\n            if (strValue.startsWith(\"\\\\u\") || strValue.startsWith(\"\\\\x\")) {\n                n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));\n            } else {\n                n.setJSType(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n            }\n        } else if (n.isNumber()) {\n            Double.parseDouble(n.getString()); // may throw NumberFormatException\n            n.setJSType(getNativeType(JSTypeNative.NUMBER_TYPE));\n        } else if (n.isBoolean()) {\n            n.setJSType(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n        } else if (n.isNull()) {\n            n.setJSType(getNativeType(JSTypeNative.NULL_TYPE));\n        } else if (n.isRegExp()) {\n            n.setJSType(getNativeType(JSTypeNative.REGEXP_TYPE));\n        } else if (n.isArrayLit() && !n.hasChildren()) {\n            n.setJSType(getNativeType(JSTypeNative.VOID_TYPE)); // Empty array\n        } else if (NodeUtil.mayBeObjectLitKey(n)) {\n            n.setJSType(getNativeType(JSTypeNative.STRING_TYPE));\n        } else if (n.isObjectLit() && !n.hasChildren()) {\n            // When an object literal is created with no properties\n            n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));\n        } else {\n            n.setJSType(null);\n        }\n    }\n}\n\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        attachLiteralTypes(n);\n        return;\n    }\n\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (!NodeUtil.isFunctionDeclaration(n)) {\n                defineDeclaredFunction(n, parent);\n            }\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (parent == scope.getRootNode()) {\n                handleFunctionInputs(n);\n            }\n            break;\n        default:\n            attachLiteralTypes(n); // moved attachLiteralTypes to the default case\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2932c135 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,80 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+// attachLiteralTypes function definition must be added at the beginning \n+// of the visit() function definition\n+private void attachLiteralTypes(Node n) {\n+    Preconditions.checkNotNull(n);\n+    if (options.getLanguageIn() != LanguageMode.ECMASCRIPT3) {\n+        Scope.Var var = scope.getVar(n.getString());\n+        JSType varType = null;\n+        if (var != null) {\n+            varType = var.getType();\n+        }\n+        if (varType != null) {\n+            n.setJSType(varType);\n+        } else if (n.isFunction()) {\n+            // Default function type\n+            n.setJSType(n.getFirstChild().getJSType());\n+        } else if (n.isStringLit()) {\n+            // Set types for escaped characters and try to interpret as boolean.\n+            String strValue = n.getString();\n+            if (strValue.startsWith(\"\\\\u\") || strValue.startsWith(\"\\\\x\")) {\n+                n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+            } else {\n+                n.setJSType(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n+            }\n+        } else if (n.isNumber()) {\n+            Double.parseDouble(n.getString()); // may throw NumberFormatException\n+            n.setJSType(getNativeType(JSTypeNative.NUMBER_TYPE));\n+        } else if (n.isBoolean()) {\n+            n.setJSType(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n+        } else if (n.isNull()) {\n+            n.setJSType(getNativeType(JSTypeNative.NULL_TYPE));\n+        } else if (n.isRegExp()) {\n+            n.setJSType(getNativeType(JSTypeNative.REGEXP_TYPE));\n+        } else if (n.isArrayLit() && !n.hasChildren()) {\n+            n.setJSType(getNativeType(JSTypeNative.VOID_TYPE)); // Empty array\n+        } else if (NodeUtil.mayBeObjectLitKey(n)) {\n+            n.setJSType(getNativeType(JSTypeNative.STRING_TYPE));\n+        } else if (n.isObjectLit() && !n.hasChildren()) {\n+            // When an object literal is created with no properties\n+            n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+        } else {\n+            n.setJSType(null);\n+        }\n+    }\n+}\n+\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+        attachLiteralTypes(n);\n+        return;\n+    }\n+\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (!NodeUtil.isFunctionDeclaration(n)) {\n+                defineDeclaredFunction(n, parent);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (parent == scope.getRootNode()) {\n+                handleFunctionInputs(n);\n+            }\n+            break;\n+        default:\n+            attachLiteralTypes(n); // moved attachLiteralTypes to the default case\n+            break;\n+    }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}