{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    boolean isSupplementarySearchChar = false;\n    int codePoint;\n    if (searchLen == 1 && Character.isHighSurrogate(searchChars[0])) {\n        isSupplementarySearchChar = true;\n        codePoint = Character.toCodePoint(searchChars[0], searchChars[1]);\n    } else {\n        codePoint = -1;\n    }\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (isSupplementarySearchChar && Character.isHighSurrogate(ch)) {\n            codePoint = Character.toCodePoint(ch, str.charAt(i + 1));\n        }\n        if (searchCharsContains(ch, codePoint, searchChars)) {\n            return true;\n        }\n        if (isSupplementarySearchChar && Character.isHighSurrogate(ch)) {\n            i++;\n        }\n        codePoint = -1;\n    }\n    return false;\n}\n\nprivate static boolean searchCharsContains(char ch, int codePoint, char[] searchChars) {\n    for (char searchChar : searchChars) {\n        if (searchChar == ch) {\n            return true;\n        }\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            if (Character.charCount(codePoint) == 1) {\n                continue;\n            }\n            int searchCodePoint = Character.toCodePoint(searchChar, searchChars[++i]);\n            if (searchCodePoint == codePoint) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..6e8ffe9f 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,53 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    boolean isSupplementarySearchChar = false;\n+    int codePoint;\n+    if (searchLen == 1 && Character.isHighSurrogate(searchChars[0])) {\n+        isSupplementarySearchChar = true;\n+        codePoint = Character.toCodePoint(searchChars[0], searchChars[1]);\n+    } else {\n+        codePoint = -1;\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (isSupplementarySearchChar && Character.isHighSurrogate(ch)) {\n+            codePoint = Character.toCodePoint(ch, str.charAt(i + 1));\n+        }\n+        if (searchCharsContains(ch, codePoint, searchChars)) {\n+            return true;\n+        }\n+        if (isSupplementarySearchChar && Character.isHighSurrogate(ch)) {\n+            i++;\n+        }\n+        codePoint = -1;\n+    }\n+    return false;\n+}\n+\n+private static boolean searchCharsContains(char ch, int codePoint, char[] searchChars) {\n+    for (char searchChar : searchChars) {\n+        if (searchChar == ch) {\n+            return true;\n+        }\n+        if (Character.isSupplementaryCodePoint(codePoint)) {\n+            if (Character.charCount(codePoint) == 1) {\n+                continue;\n+            }\n+            int searchCodePoint = Character.toCodePoint(searchChar, searchChars[++i]);\n+            if (searchCodePoint == codePoint) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}