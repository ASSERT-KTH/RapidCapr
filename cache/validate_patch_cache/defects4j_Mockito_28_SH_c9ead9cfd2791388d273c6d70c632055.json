{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (candidate != null) {\n    try {\n        field.setAccessible(true);\n        if (Modifier.isFinal(field.getModifiers())) {\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n        }\n        field.set(fieldInstance, candidate);\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Could not set field value\", e);\n    } catch (NoSuchFieldException e) {\n        throw new IllegalStateException(\"Could not set final field value\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..b98cb1e64 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,25 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (candidate != null) {\n+    try {\n+        field.setAccessible(true);\n+        if (Modifier.isFinal(field.getModifiers())) {\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+        }\n+        field.set(fieldInstance, candidate);\n+    } catch (IllegalAccessException e) {\n+        throw new IllegalStateException(\"Could not set field value\", e);\n+    } catch (NoSuchFieldException e) {\n+        throw new IllegalStateException(\"Could not set final field value\", e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}