{
    "patch": "                SavedField save = savedFields[i];\n                DateTimeField field = save.iField;\n                int newVal = save.newValue;\n                int curVal = field.get(millis);\n                if (i == 0 && curVal < newVal) {\n                    if (field.getDurationField().getType() == DurationFieldType.weekyears()) {\n                        LocalDate oldDate = new LocalDate(millis, iChrono);\n                        int oldWeekyear = oldDate.getWeekyear();\n                        if (newVal <= oldWeekyear) {\n                            curVal = oldDate.getWeekOfWeekyear();\n                            int weeksDiff = ISOWeek.weeksIn(newVal);\n                            LocalDate newDate = oldDate.withWeekyear(newVal).withWeekOfWeekyear(curVal);\n                            if (newDate.getWeekOfWeekyear() != curVal) {\n                                // push curVal down a week, unless too close to Min, then error\n                                int week = (curVal < 5 ? 1 : curVal > 358 ? 51 : curVal - weeksDiff);\n                                newDate = newDate.plusWeeks(1).withWeekOfWeekyear(week);\n                            }\n                            curVal = newDate.getYear();\n                            saveField(DateTimeFieldType.weekyear(), curVal);\n                        }\n                    }\n                    if (field.getDurationField().getType() == DurationFieldType.months()) {\n                        LocalDate oldDate = new LocalDate(millis, iChrono);\n                        LocalDate newDate = oldDate.withMonthOfYear(newVal);\n                        curVal = newDate.getYear();\n                        if (curVal != oldDate.getYear()) {\n                            saveField(DateTimeFieldType.year(), curVal);\n                        }\n                    }\n                }\n                millis = field.set(millis, curVal);\n                if (millis == Long.MIN_VALUE) {\n                    throw new IllegalFieldValueException(field.getType(), Integer.toString(newVal));",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..04bab450 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                SavedField save = savedFields[i];\n+                DateTimeField field = save.iField;\n+                int newVal = save.newValue;\n+                int curVal = field.get(millis);\n+                if (i == 0 && curVal < newVal) {\n+                    if (field.getDurationField().getType() == DurationFieldType.weekyears()) {\n+                        LocalDate oldDate = new LocalDate(millis, iChrono);\n+                        int oldWeekyear = oldDate.getWeekyear();\n+                        if (newVal <= oldWeekyear) {\n+                            curVal = oldDate.getWeekOfWeekyear();\n+                            int weeksDiff = ISOWeek.weeksIn(newVal);\n+                            LocalDate newDate = oldDate.withWeekyear(newVal).withWeekOfWeekyear(curVal);\n+                            if (newDate.getWeekOfWeekyear() != curVal) {\n+                                // push curVal down a week, unless too close to Min, then error\n+                                int week = (curVal < 5 ? 1 : curVal > 358 ? 51 : curVal - weeksDiff);\n+                                newDate = newDate.plusWeeks(1).withWeekOfWeekyear(week);\n+                            }\n+                            curVal = newDate.getYear();\n+                            saveField(DateTimeFieldType.weekyear(), curVal);\n+                        }\n+                    }\n+                    if (field.getDurationField().getType() == DurationFieldType.months()) {\n+                        LocalDate oldDate = new LocalDate(millis, iChrono);\n+                        LocalDate newDate = oldDate.withMonthOfYear(newVal);\n+                        curVal = newDate.getYear();\n+                        if (curVal != oldDate.getYear()) {\n+                            saveField(DateTimeFieldType.year(), curVal);\n+                        }\n+                    }\n+                }\n+                millis = field.set(millis, curVal);\n+                if (millis == Long.MIN_VALUE) {\n+                    throw new IllegalFieldValueException(field.getType(), Integer.toString(newVal));\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}