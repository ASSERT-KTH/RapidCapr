{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        }\n\n        // This no-op statement was there so that JSDoc information could\n        // be attached to the name. This check should not complain about it.\n        if (n == parent.getLastChild()) {\n            for (Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == Token.COMMA) {\n                    continue;\n                }\n                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n                    return;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n                n == parent.getFirstChild().getNext().getNext())) {\n            return;\n        } else {\n            return;\n        }\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed) {\n        // We exclude string literals from this check, as there are legitimate cases\n        // where string literals are used in isolation, and we don't want to flag\n        // those cases as \"useless code\".\n        if (!n.isString() && !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n            return;\n        }\n\n        // We exclude the following cases as they can be used as placeholders for future statements,\n        // carry code for annotations, or generate valid no-op statements.\n        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n            return;\n        } else if (n.isExprResult()) {\n            return;\n        }\n\n        // We only flag the \"useless code\" warning in the declared \"level\" scope.\n        if (isSimpleOp) {\n            // The \"+=\" and \"-=\" operators are valid ways to update variables without having to\n            // use the explicit assignment operator. We do not flag this as \"useless code\".\n            if (n.getType() == Token.ADD_ASSIGN || n.getType() == Token.SUB_ASSIGN) {\n                return;\n            }\n\n            // Report \"useless code\" warning.\n            String operator = Token.name(n.getType()).toLowerCase();\n            String msg = \"The result of the '\" + operator +\n                    \"' operator is not being used.\";\n            t.report(n, USELESS_CODE_ERROR, msg);\n        } else {\n            // Report \"useless code\" warning.\n            String msg = \"This code lacks side-effects. Is there a bug?\";\n            if (n.isString()) {\n                msg = \"Is there a missing '+' on the previous line?\";\n            }\n            t.report(n, USELESS_CODE_ERROR, msg);\n        }\n        // TODO(johnlenz): determine if it is necessary to\n        // try to protect side-effect free statements as well.\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..1aedfa42 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,100 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n+    if (n.isEmpty() || n.isComma()) {\n+        return;\n     }\n \n     if (parent == null) {\n-      return;\n+        return;\n     }\n \n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n     if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+        Node gramps = parent.getParent();\n+        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n+            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+                return;\n+            }\n         }\n-    }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+        // This no-op statement was there so that JSDoc information could\n+        // be attached to the name. This check should not complain about it.\n+        if (n == parent.getLastChild()) {\n+            for (Node an : parent.getAncestors()) {\n+                int ancestorType = an.getType();\n+                if (ancestorType == Token.COMMA) {\n+                    continue;\n+                }\n+                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n+                    return;\n+                } else {\n+                    break;\n+                }\n+            }\n         }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n+        if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n+                n == parent.getFirstChild().getNext().getNext())) {\n+            return;\n+        } else {\n+            return;\n+        }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+    if (!isResultUsed) {\n+        // We exclude string literals from this check, as there are legitimate cases\n+        // where string literals are used in isolation, and we don't want to flag\n+        // those cases as \"useless code\".\n+        if (!n.isString() && !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+            return;\n+        }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+        // We exclude the following cases as they can be used as placeholders for future statements,\n+        // carry code for annotations, or generate valid no-op statements.\n+        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+            return;\n+        } else if (n.isExprResult()) {\n+            return;\n+        }\n+\n+        // We only flag the \"useless code\" warning in the declared \"level\" scope.\n+        if (isSimpleOp) {\n+            // The \"+=\" and \"-=\" operators are valid ways to update variables without having to\n+            // use the explicit assignment operator. We do not flag this as \"useless code\".\n+            if (n.getType() == Token.ADD_ASSIGN || n.getType() == Token.SUB_ASSIGN) {\n+                return;\n+            }\n+\n+            // Report \"useless code\" warning.\n+            String operator = Token.name(n.getType()).toLowerCase();\n+            String msg = \"The result of the '\" + operator +\n+                    \"' operator is not being used.\";\n+            t.report(n, USELESS_CODE_ERROR, msg);\n+        } else {\n+            // Report \"useless code\" warning.\n+            String msg = \"This code lacks side-effects. Is there a bug?\";\n+            if (n.isString()) {\n+                msg = \"Is there a missing '+' on the previous line?\";\n+            }\n+            t.report(n, USELESS_CODE_ERROR, msg);\n+        }\n+        // TODO(johnlenz): determine if it is necessary to\n+        // try to protect side-effect free statements as well.\n+        if (!NodeUtil.isStatement(n)) {\n+            problemNodes.add(n);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}