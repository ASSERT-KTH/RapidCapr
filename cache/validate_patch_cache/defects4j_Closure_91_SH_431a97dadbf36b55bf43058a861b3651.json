{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isLValue(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        if (rhs != null && rhs.getType() == Token.FUNCTION &&\n            NodeUtil.getEnclosingTypeDeclaration(lhs) != null &&\n            NodeUtil.getPrototypeProperty(lhs) != null) {\n          return false;\n        }\n      }\n    } else if (n.getType() == Token.EXPORT) {\n      switch (parent.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n          break;\n\n        default:\n          // MODULE_BODY, EXPORT, EXPORT_SPECS\n          return false;\n      }\n      final JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n      if (info != null) {\n        final boolean isDefault = n.getBooleanProp(Node.EXPORT_DEFAULT);\n        if (isDefault) {\n          // ES6 15.2.3:\n          // In a script, export var v; declares a new global variable without\n          // affecting variables of the same name inside functions.\n          // We make a special case here so that we don't flag the variable as\n          // unused.\n          return true;\n        } else if (info.hasEnumParameterType()) {\n          // An enum is an object literal.\n          return true;\n        } else if (info.isConstant() || info.isDefine()) {\n          // A const, enum, define, etc is a read-only statement.\n\n          // A const annotated with @nocollapse should not be implicitly removed.\n          if (info.isNoCollapse()) {\n            codingConvention.report(\"constant\", t.makeError(n, CONST_WITHOUT_INITIALIZER));\n          }\n          return true;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        if (rhs != null && rhs.getType() == Token.FUNCTION &&\n            NodeUtil.getEnclosingTypeDeclaration(lhs) != null &&\n            NodeUtil.getPrototypeProperty(lhs) != null) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9b268923 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,143 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isLValue(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (rhs != null && rhs.getType() == Token.FUNCTION &&\n+            NodeUtil.getEnclosingTypeDeclaration(lhs) != null &&\n+            NodeUtil.getPrototypeProperty(lhs) != null) {\n+          return false;\n+        }\n+      }\n+    } else if (n.getType() == Token.EXPORT) {\n+      switch (parent.getType()) {\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+          break;\n+\n+        default:\n+          // MODULE_BODY, EXPORT, EXPORT_SPECS\n+          return false;\n+      }\n+      final JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+      if (info != null) {\n+        final boolean isDefault = n.getBooleanProp(Node.EXPORT_DEFAULT);\n+        if (isDefault) {\n+          // ES6 15.2.3:\n+          // In a script, export var v; declares a new global variable without\n+          // affecting variables of the same name inside functions.\n+          // We make a special case here so that we don't flag the variable as\n+          // unused.\n+          return true;\n+        } else if (info.hasEnumParameterType()) {\n+          // An enum is an object literal.\n+          return true;\n+        } else if (info.isConstant() || info.isDefine()) {\n+          // A const, enum, define, etc is a read-only statement.\n+\n+          // A const annotated with @nocollapse should not be implicitly removed.\n+          if (info.isNoCollapse()) {\n+            codingConvention.report(\"constant\", t.makeError(n, CONST_WITHOUT_INITIALIZER));\n+          }\n+          return true;\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (rhs != null && rhs.getType() == Token.FUNCTION &&\n+            NodeUtil.getEnclosingTypeDeclaration(lhs) != null &&\n+            NodeUtil.getPrototypeProperty(lhs) != null) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}