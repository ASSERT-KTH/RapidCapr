{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Normalize years and months.\n    if (type.isSupported(DurationFieldType.months())) {\n        months += years * 12;\n        years = 0;\n    }\n\n    if (months >=12 && type.isSupported(DurationFieldType.years())) {\n        years += months / 12;\n        months = months % 12;\n    }\n\n    // Normalize weeks and days.\n    days += weeks * 7;\n    weeks = 0;\n\n    if (days >= 7) {\n        weeks = days / 7;\n        days = days % 7;\n    }\n\n    // Normalize remaining fields.\n    if (type.isSupported(DurationFieldType.hours())) {\n        hours += days * 24;\n        days = 0;\n        minutes += hours * 60;\n        hours = 0;\n        seconds += minutes * 60;\n        minutes = 0;\n        millis += seconds * 1000;\n        seconds = 0;\n    } else {\n        long totalMillis = (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n                + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n                + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n                + (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n                + millis;\n\n        days = 0;\n        hours = 0;\n        minutes = 0;\n        seconds = 0;\n        millis = (int) (totalMillis % 1000);\n        totalMillis = totalMillis / 1000;\n        seconds = (int) (totalMillis % 60);\n        totalMillis = totalMillis / 60;\n        minutes = (int) (totalMillis % 60);\n        totalMillis = totalMillis / 60;\n        hours = (int) (totalMillis % 24);\n        totalMillis = totalMillis / 24;\n        days = (int) totalMillis;\n    }\n\n    Period result = new Period(years, months, weeks, days, hours, minutes, seconds, millis, type);\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..87593179 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,72 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // Normalize years and months.\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months += years * 12;\n+        years = 0;\n+    }\n+\n+    if (months >=12 && type.isSupported(DurationFieldType.years())) {\n+        years += months / 12;\n+        months = months % 12;\n+    }\n+\n+    // Normalize weeks and days.\n+    days += weeks * 7;\n+    weeks = 0;\n+\n+    if (days >= 7) {\n+        weeks = days / 7;\n+        days = days % 7;\n+    }\n+\n+    // Normalize remaining fields.\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        hours += days * 24;\n+        days = 0;\n+        minutes += hours * 60;\n+        hours = 0;\n+        seconds += minutes * 60;\n+        minutes = 0;\n+        millis += seconds * 1000;\n+        seconds = 0;\n+    } else {\n+        long totalMillis = (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+                + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+                + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+                + (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+                + millis;\n+\n+        days = 0;\n+        hours = 0;\n+        minutes = 0;\n+        seconds = 0;\n+        millis = (int) (totalMillis % 1000);\n+        totalMillis = totalMillis / 1000;\n+        seconds = (int) (totalMillis % 60);\n+        totalMillis = totalMillis / 60;\n+        minutes = (int) (totalMillis % 60);\n+        totalMillis = totalMillis / 60;\n+        hours = (int) (totalMillis % 24);\n+        totalMillis = totalMillis / 24;\n+        days = (int) totalMillis;\n+    }\n+\n+    Period result = new Period(years, months, weeks, days, hours, minutes, seconds, millis, type);\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}