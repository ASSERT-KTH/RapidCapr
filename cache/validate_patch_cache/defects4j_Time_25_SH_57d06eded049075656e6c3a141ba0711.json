{
    "patch": "            if (offsetAdjusted < offsetLocal) {\n                // We need to check if we have crossed a DST boundary\n                // If the current time is within a DST interval before the original transition,\n                // then we just need to use the original offset,\n                // otherwise, we need to use the new offset.\n                long nextLocalTransition = nextTransition(instantLocal - offsetLocal);\n                long nextAdjustedTransition = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocalTransition == nextAdjustedTransition) {\n                    return offsetAdjusted;\n                } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c29a972c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetAdjusted < offsetLocal) {\n+                // We need to check if we have crossed a DST boundary\n+                // If the current time is within a DST interval before the original transition,\n+                // then we just need to use the original offset,\n+                // otherwise, we need to use the new offset.\n+                long nextLocalTransition = nextTransition(instantLocal - offsetLocal);\n+                long nextAdjustedTransition = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocalTransition == nextAdjustedTransition) {\n+                    return offsetAdjusted;\n+                } else {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}