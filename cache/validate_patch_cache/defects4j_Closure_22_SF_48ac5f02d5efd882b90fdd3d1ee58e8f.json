{
    "patch": "    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    if (parent.getType() == Token.COMMA || parent.getType() == Token.LABEL) {\n      return;\n    }\n\n    // Speed up: don't bother visiting or removing a subexpression that\n    // doesn't have side effects and whose result is unused.  (Since this is\n    // a local transform, this is already true of all ancestor expressions,\n    // all named values, and all expression results.)\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n    // While removing conditional expressions we'll try pretty hard to find\n    // side-effect-free alternatives to leave behind.\n    boolean tryPrettyHard =\n        parent.getType() == Token.IF && parent.getFirstChild() == n ||\n        parent.getType() == Token.HOOK && parent.getFirstChild() == n;\n\n    // Only obey the isSimpleOperatorType whitelist if the option is on and\n    // the expression is not complex.\n    boolean isSimpleOp =\n        NodeUtil.isSimpleOperatorType(n.getType()) &&\n        !tryPrettyHard &&\n        (ignoreResultComplexity || isResultUsed || NodeUtil.mayHaveSideEffects(n, t.getCompiler()));\n\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      }\n\n      if (!tryPrettyHard || !tryRemovingConditionalExpression(n)) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n          msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n              + \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..53d35920 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,13 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    if (n.isEmpty() || n.isComma()) {\n       return;\n     }\n \n@@ -95,40 +89,29 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+    if (parent.getType() == Token.COMMA || parent.getType() == Token.LABEL) {\n       return;\n-        }\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n     }\n \n+    // Speed up: don't bother visiting or removing a subexpression that\n+    // doesn't have side effects and whose result is unused.  (Since this is\n+    // a local transform, this is already true of all ancestor expressions,\n+    // all named values, and all expression results.)\n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+\n+    // While removing conditional expressions we'll try pretty hard to find\n+    // side-effect-free alternatives to leave behind.\n+    boolean tryPrettyHard =\n+        parent.getType() == Token.IF && parent.getFirstChild() == n ||\n+        parent.getType() == Token.HOOK && parent.getFirstChild() == n;\n+\n+    // Only obey the isSimpleOperatorType whitelist if the option is on and\n+    // the expression is not complex.\n+    boolean isSimpleOp =\n+        NodeUtil.isSimpleOperatorType(n.getType()) &&\n+        !tryPrettyHard &&\n+        (ignoreResultComplexity || isResultUsed || NodeUtil.mayHaveSideEffects(n, t.getCompiler()));\n+\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n@@ -136,23 +119,18 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       } else if (n.isExprResult()) {\n         return;\n       }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n-    }\n-  }\n+      if (!tryPrettyHard || !tryRemovingConditionalExpression(n)) {\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        if (n.isString()) {\n+          msg = \"Is there a missing '+' on the previous line?\";\n+        } else if (isSimpleOp) {\n+          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase()\n+              + \"' operator is not being used.\";\n+        }\n+\n+        t.getCompiler().report(\n+            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}