{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    while (parameters.hasNext()) {\n      Node parameter = parameters.next();\n      Node argument = null;\n      if (!arguments.hasNext()) {\n        if (!functionType.hasRestFormals()) {\n          // Not enough arguments for a non-varargs function.\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal),\n              String.valueOf(functionType.getMinArguments()),\n              functionType.getMaxArguments() != Integer.MAX_VALUE\n                  ? \" and no more than \"\n                      + functionType.getMaxArguments() + \" argument(s)\"\n                  : \"\");\n          return;\n        }\n        // If it has rest formals, then we can consider that the rest of the\n        // arguments match the rest of the parameters.\n        break;\n      }\n      argument = arguments.next();\n      ordinal++;\n\n      // Only check argument/parameter type equivalence beyond the formal parameter list.\n      // For instance\n      // function foo(x) { ... }\n      // var obj = {x:2};\n      // foo(obj);\n      // is valid.\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n          getJSType(parameter), call, ordinal);\n    }\n\n    // Consume any leftover arguments if the function was called with too many.\n    while (arguments.hasNext() && functionType.hasRestFormals()) {\n      Node argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n          getJSType(functionType.getRestFormalsType()), call, ordinal++);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs || (numArgs > maxArgs && !functionType.hasRestFormals())) {\n      String expectedArgumentCount = functionType.hasRestFormals()\n          ? \">=\" + (functionType.getMinArguments() - 1)\n          : String.valueOf(functionType.getMinArguments());\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), expectedArgumentCount,\n          functionType.getMaxArguments() != Integer.MAX_VALUE\n              ? \" and no more than \"\n                  + functionType.getMaxArguments() + \" argument(s)\"\n              : \"\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..35e053f3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,67 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    while (parameters.hasNext()) {\n+      Node parameter = parameters.next();\n+      Node argument = null;\n+      if (!arguments.hasNext()) {\n+        if (!functionType.hasRestFormals()) {\n+          // Not enough arguments for a non-varargs function.\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal),\n+              String.valueOf(functionType.getMinArguments()),\n+              functionType.getMaxArguments() != Integer.MAX_VALUE\n+                  ? \" and no more than \"\n+                      + functionType.getMaxArguments() + \" argument(s)\"\n+                  : \"\");\n+          return;\n+        }\n+        // If it has rest formals, then we can consider that the rest of the\n+        // arguments match the rest of the parameters.\n+        break;\n+      }\n       argument = arguments.next();\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      // Only check argument/parameter type equivalence beyond the formal parameter list.\n+      // For instance\n+      // function foo(x) { ... }\n+      // var obj = {x:2};\n+      // foo(obj);\n+      // is valid.\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+          getJSType(parameter), call, ordinal);\n+    }\n+\n+    // Consume any leftover arguments if the function was called with too many.\n+    while (arguments.hasNext() && functionType.hasRestFormals()) {\n+      Node argument = arguments.next();\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+          getJSType(functionType.getRestFormalsType()), call, ordinal++);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (numArgs < minArgs || (numArgs > maxArgs && !functionType.hasRestFormals())) {\n+      String expectedArgumentCount = functionType.hasRestFormals()\n+          ? \">=\" + (functionType.getMinArguments() - 1)\n+          : String.valueOf(functionType.getMinArguments());\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), expectedArgumentCount,\n+          functionType.getMaxArguments() != Integer.MAX_VALUE\n+              ? \" and no more than \"\n+                  + functionType.getMaxArguments() + \" argument(s)\"\n+              : \"\");\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}