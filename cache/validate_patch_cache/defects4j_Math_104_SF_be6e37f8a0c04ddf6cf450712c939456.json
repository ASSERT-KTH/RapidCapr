{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double lgam = Gamma.logGamma(a);\n    double xpowa = Math.pow(x, a);\n    double sum = x / (a + 1.0);\n    double term = sum;\n\n    double tolerance = 10e-15;\n\n    for (int i = 2; sum != 0.0; i++) {\n        double ap = a + i - 1.0;\n        double del = x * term / ap;\n        sum += del;\n        if (Math.abs(del) < tolerance * Math.abs(sum)) {\n            return sum * xpowa / Math.exp(lgam);\n        }\n        term *= x / ap;\n    }\n\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e75d50c80 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double lgam = Gamma.logGamma(a);\n+    double xpowa = Math.pow(x, a);\n+    double sum = x / (a + 1.0);\n+    double term = sum;\n+\n+    double tolerance = 10e-15;\n+\n+    for (int i = 2; sum != 0.0; i++) {\n+        double ap = a + i - 1.0;\n+        double del = x * term / ap;\n+        sum += del;\n+        if (Math.abs(del) < tolerance * Math.abs(sum)) {\n+            return sum * xpowa / Math.exp(lgam);\n+        }\n+        term *= x / ap;\n+    }\n+\n+    return Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}