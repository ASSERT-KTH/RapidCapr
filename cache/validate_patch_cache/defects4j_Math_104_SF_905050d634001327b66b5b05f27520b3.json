{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double epsilon = 1e-15;\n    double sum = 0;\n    double term = 1 / a;\n    int n = 1;\n    do {\n        sum += term;\n        term *= x / (a + n);\n        n++;\n    } while (Math.abs(term) > epsilon && n < 1000); // added a limit to prevent infinite loop\n    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..95e0bc251 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,18 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double epsilon = 1e-15;\n+    double sum = 0;\n+    double term = 1 / a;\n+    int n = 1;\n+    do {\n+        sum += term;\n+        term *= x / (a + n);\n+        n++;\n+    } while (Math.abs(term) > epsilon && n < 1000); // added a limit to prevent infinite loop\n+    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}