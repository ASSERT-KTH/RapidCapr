{
    "patch": "if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n    // See issue 184.\n    Object[] arguments = invocation.getArguments();\n    Object other = arguments[0];\n    if (invocation.getMock() instanceof Comparable && invocation.getMock().getClass().equals(other.getClass())) {\n        // If compared to an object of same class, use natural order comparison\n        return ((Comparable) invocation.getMock()).compareTo(other);\n    } else {\n        // Otherwise, return 0 if references are the same, otherwise some other value\n        return (invocation.getMock() == other) ? 0 : 1;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 4c00f50b1..adb1579fd 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -73,7 +73,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             //see issue 184.\n             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n             //Only for compareTo() method by the Comparable interface\n-            return 1;\n+if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n+    // See issue 184.\n+    Object[] arguments = invocation.getArguments();\n+    Object other = arguments[0];\n+    if (invocation.getMock() instanceof Comparable && invocation.getMock().getClass().equals(other.getClass())) {\n+        // If compared to an object of same class, use natural order comparison\n+        return ((Comparable) invocation.getMock()).compareTo(other);\n+    } else {\n+        // Otherwise, return 0 if references are the same, otherwise some other value\n+        return (invocation.getMock() == other) ? 0 : 1;\n+    }\n+}\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n@@ -120,4 +131,4 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n         return null;\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}