{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n>>> [ INFILL ] <<<\n              List<DiGraphEdge<Node, Branch>> fallthroughEdges =\n              getCfg().getFallThroughEdges(node);\n              if (fallthroughEdges.size() > 0) {\n                for (DiGraphEdge<Node, Branch> e : fallthroughEdges) {\n                  cfa.createEdge(node, e.getValue(), e.getDestination());\n                }\n              } else {\n                cfa.createEdge(node, Branch.UNCOND, nextSibling);\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..d7524656 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -765,6 +765,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+>>> [ INFILL ] <<<\n+              List<DiGraphEdge<Node, Branch>> fallthroughEdges =\n+              getCfg().getFallThroughEdges(node);\n+              if (fallthroughEdges.size() > 0) {\n+                for (DiGraphEdge<Node, Branch> e : fallthroughEdges) {\n+                  cfa.createEdge(node, e.getValue(), e.getDestination());\n+                }\n+              } else {\n+                cfa.createEdge(node, Branch.UNCOND, nextSibling);\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}