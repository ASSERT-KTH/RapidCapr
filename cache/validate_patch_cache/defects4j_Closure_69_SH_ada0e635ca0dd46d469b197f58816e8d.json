{
    "patch": "if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        boolean shouldWarnForNonThisGetProp =\n            parent.isGetProp()\n                && !parent.getFirstChild().isThis()\n                && parent.getFirstChild().getTypeI().isSubtypeOf(\n                    getNativeType(JSTypeNative.OBJECT_TYPE));\n        boolean shouldWarnForNonThisGetElem =\n            parent.isGetElem()\n                && parent.getFirstChild().getTypeI().isSubtypeOf(\n                    getNativeType(JSTypeNative.OBJECT_TYPE));\n        if (!shouldWarnForNonThisGetProp && !shouldWarnForNonThisGetElem) {\n          report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n        }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a1e4398a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        boolean shouldWarnForNonThisGetProp =\n+            parent.isGetProp()\n+                && !parent.getFirstChild().isThis()\n+                && parent.getFirstChild().getTypeI().isSubtypeOf(\n+                    getNativeType(JSTypeNative.OBJECT_TYPE));\n+        boolean shouldWarnForNonThisGetElem =\n+            parent.isGetElem()\n+                && parent.getFirstChild().getTypeI().isSubtypeOf(\n+                    getNativeType(JSTypeNative.OBJECT_TYPE));\n+        if (!shouldWarnForNonThisGetProp && !shouldWarnForNonThisGetElem) {\n+          report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+        }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}