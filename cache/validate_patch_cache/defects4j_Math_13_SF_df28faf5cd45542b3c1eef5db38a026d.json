{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            System.gc();\n            final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n            throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b16ae486c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        } catch (OutOfMemoryError e) {\n+            System.gc();\n+            final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+            throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n+        }\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space limit reached (14564 MB)",
    "test_result": "FAIL"
}