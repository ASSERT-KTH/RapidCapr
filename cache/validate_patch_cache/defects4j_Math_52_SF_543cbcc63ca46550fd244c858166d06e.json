{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n  }\n\n  // scalar and vector parts recomputation\n  double invUNorm = 1.0 / FastMath.sqrt(uRef.getNormSq());\n  double su       = FastMath.sqrt((u2u2 - coeffU * coeffU * u1u1) / (1.0 - coeffU * coeffU)) * invUNorm;\n  double cu       = FastMath.sqrt((u1u1 - u2u2) / (u1u1 - coeffU * coeffU * u1u1));\n  if (u.dotProduct(v1.crossProduct(v2)) < 0.0) {\n    su = -su;\n  }\n  q0 = cu;\n  Vector3D vsu = new Vector3D(su, uRef);\n  q1 = vsu.getX();\n  q2 = vsu.getY();\n  q3 = vsu.getZ();\n\n  // vectorial part recomputation\n  double invVNorm = 1.0 / FastMath.sqrt(vRef.getNormSq());\n  Vector3D vu1    = v1.scalarMultiply(invVNorm).crossProduct(uRef.scalarMultiply(invUNorm));\n  Vector3D vu2    = v2.scalarMultiply(invVNorm).crossProduct(uRef.scalarMultiply(invUNorm));\n  double dot      = vu1.dotProduct(vu2);\n  double sign;\n  if (dot >= 0.0) {\n    sign = 1.0;\n  } else {\n    vu2 = new Vector3D(-1.0, vu2);\n    sign = -1.0;\n  }\n\n  double nvu1 = vu1.getNorm();\n  double nvu2 = vu2.getNorm();\n  double c = (nvu1 * nvu2 != 0.0) ? vu1.dotProduct(vu2) / (nvu1 * nvu2) : 0.0;\n  double s = FastMath.sqrt((1.0 - c) / 2.0);\n  vsu = sign * new Vector3D(s, vu1.crossProduct(vu2).normalize());\n  q1R = vsu.getX();\n  q2R = vsu.getY();\n  q3R = vsu.getZ();\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..da536423a 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,7 +310,7 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n   double u1u1 = u1.getNormSq();\n@@ -353,8 +353,8 @@ public class Rotation implements Serializable {\n     if (c == 0) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n+      k = v2Su2.crossProduct(v3Su3);\n+      c = k.dotProduct(u2.crossProduct(u3));\n \n       if (c == 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n@@ -371,9 +371,45 @@ public class Rotation implements Serializable {\n       vRef = v2;\n \n     }\n+  }\n \n+  // scalar and vector parts recomputation\n+  double invUNorm = 1.0 / FastMath.sqrt(uRef.getNormSq());\n+  double su       = FastMath.sqrt((u2u2 - coeffU * coeffU * u1u1) / (1.0 - coeffU * coeffU)) * invUNorm;\n+  double cu       = FastMath.sqrt((u1u1 - u2u2) / (u1u1 - coeffU * coeffU * u1u1));\n+  if (u.dotProduct(v1.crossProduct(v2)) < 0.0) {\n+    su = -su;\n+  }\n+  q0 = cu;\n+  Vector3D vsu = new Vector3D(su, uRef);\n+  q1 = vsu.getX();\n+  q2 = vsu.getY();\n+  q3 = vsu.getZ();\n+\n+  // vectorial part recomputation\n+  double invVNorm = 1.0 / FastMath.sqrt(vRef.getNormSq());\n+  Vector3D vu1    = v1.scalarMultiply(invVNorm).crossProduct(uRef.scalarMultiply(invUNorm));\n+  Vector3D vu2    = v2.scalarMultiply(invVNorm).crossProduct(uRef.scalarMultiply(invUNorm));\n+  double dot      = vu1.dotProduct(vu2);\n+  double sign;\n+  if (dot >= 0.0) {\n+    sign = 1.0;\n+  } else {\n+    vu2 = new Vector3D(-1.0, vu2);\n+    sign = -1.0;\n   }\n \n+  double nvu1 = vu1.getNorm();\n+  double nvu2 = vu2.getNorm();\n+  double c = (nvu1 * nvu2 != 0.0) ? vu1.dotProduct(vu2) / (nvu1 * nvu2) : 0.0;\n+  double s = FastMath.sqrt((1.0 - c) / 2.0);\n+  vsu = sign * new Vector3D(s, vu1.crossProduct(vu2).normalize());\n+  q1R = vsu.getX();\n+  q2R = vsu.getY();\n+  q3R = vsu.getZ();\n+\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}