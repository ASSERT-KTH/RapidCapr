{
    "patch": "    return !isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      Set<ObjectType> printedTypes = new HashSet<>();\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        Object propertyType = getPropertyType(property);\n        String propertyTypeString = propertyType.toString();\n\n        // Handle recursive object types\n        if (propertyType instanceof ObjectType) {\n          ObjectType objectType = (ObjectType) propertyType;\n          if (!objectType.equals(this) && !printedTypes.contains(objectType)) {\n            printedTypes.add(objectType);\n            propertyTypeString = objectType.toStringHelper(false);\n          }\n        }\n\n        sb.append(propertyTypeString);\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..4111a1be 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,8 +345,7 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n   @Override\n@@ -370,6 +369,7 @@ class PrototypeObjectType extends ObjectType {\n       sb.append(\"{\");\n \n       int i = 0;\n+      Set<ObjectType> printedTypes = new HashSet<>();\n       for (String property : propertyNames) {\n         if (i > 0) {\n           sb.append(\", \");\n@@ -377,23 +377,23 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        Object propertyType = getPropertyType(property);\n+        String propertyTypeString = propertyType.toString();\n+\n+        // Handle recursive object types\n+        if (propertyType instanceof ObjectType) {\n+          ObjectType objectType = (ObjectType) propertyType;\n+          if (!objectType.equals(this) && !printedTypes.contains(objectType)) {\n+            printedTypes.add(objectType);\n+            propertyTypeString = objectType.toStringHelper(false);\n+          }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(propertyTypeString);\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+        ++i;\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}