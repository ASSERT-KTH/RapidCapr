{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if (name.aliasingGets == 0) {\n      // No aliases to inline, continue with next name.\n      continue;\n    }\n\n    if (name.globalSets > 1 || name.localSets > 0) {\n      // The name is too complex, we cannot inline its aliases.\n      continue;\n    }\n\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.props != null) {\n      // Add all children (properties) of name to the worklist.\n      List<Name> propsList = Lists.newArrayList(name.props);\n      workList.addAll(propsList);\n\n      if (propsList.size() < name.aliasingGets) {\n        // There cannot be enough aliases to inline because there are fewer properties than aliases.\n        continue;\n      }\n\n      Map<String, Ref> propertyReferences = new HashMap<String, Ref>();\n      Set<String> propertyNames = new HashSet<String>();\n\n      // Collect all property references.\n      for (Ref ref : name.getRefs()) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() && ref.getTwin() == null) {\n          String propertyName = ref.propertyName();\n          propertyReferences.put(propertyName, ref);\n          propertyNames.add(propertyName);\n        }\n      }\n\n      if (propertyNames.size() < name.aliasingGets) {\n        // There are duplicates among the aliases.\n        continue;\n      }\n\n      // Try to inline aliases by replacing them with their property value.\n      int inlinedCount = 0;\n      for (Ref ref : propertyReferences.values()) {\n        if (inlineAliasIfPossible(ref, namespace)) {\n          inlinedCount += 1;\n          name.removeRef(ref);\n        }\n\n        if (inlinedCount == name.aliasingGets) {\n          // All required aliases were inlined, stop processing.\n          break;\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..d909246d 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,70 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    if (name.aliasingGets == 0) {\n+      // No aliases to inline, continue with next name.\n+      continue;\n+    }\n+\n+    if (name.globalSets > 1 || name.localSets > 0) {\n+      // The name is too complex, we cannot inline its aliases.\n+      continue;\n+    }\n+\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.props != null) {\n+      // Add all children (properties) of name to the worklist.\n+      List<Name> propsList = Lists.newArrayList(name.props);\n+      workList.addAll(propsList);\n+\n+      if (propsList.size() < name.aliasingGets) {\n+        // There cannot be enough aliases to inline because there are fewer properties than aliases.\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n+      Map<String, Ref> propertyReferences = new HashMap<String, Ref>();\n+      Set<String> propertyNames = new HashSet<String>();\n+\n+      // Collect all property references.\n+      for (Ref ref : name.getRefs()) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() && ref.getTwin() == null) {\n+          String propertyName = ref.propertyName();\n+          propertyReferences.put(propertyName, ref);\n+          propertyNames.add(propertyName);\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      if (propertyNames.size() < name.aliasingGets) {\n+        // There are duplicates among the aliases.\n+        continue;\n+      }\n+\n+      // Try to inline aliases by replacing them with their property value.\n+      int inlinedCount = 0;\n+      for (Ref ref : propertyReferences.values()) {\n+        if (inlineAliasIfPossible(ref, namespace)) {\n+          inlinedCount += 1;\n+          name.removeRef(ref);\n+        }\n+\n+        if (inlinedCount == name.aliasingGets) {\n+          // All required aliases were inlined, stop processing.\n+          break;\n+        }\n       }\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}