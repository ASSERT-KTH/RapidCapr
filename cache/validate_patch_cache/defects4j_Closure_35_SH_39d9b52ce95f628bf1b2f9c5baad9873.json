{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null && objType.isNominalType()) {\n        boolean isDouble = false;\n        if (constraint.isNumberValueType()) {\n          if (constraint.isSubtypeOf(getNativeNumberType())\n              || constraint.isSubtypeOf(getNativeBigIntType())) {\n            isDouble = objType.isSubtypeOf(getNativeNumberType());\n          } else if (constraint.isSubtypeOf(getNativeBigIntType())) {\n            isDouble = objType.isSubtypeOf(getNativeBigIntType());\n          }\n        }\n        if (isDouble) {\n          JSType narrowed = getNativeNumberType().getPrimitiveType();\n          if (scope.isLoose()) {\n            narrowed = narrowed.getLeastSupertype(constraint);\n          }\n          scope = narrowScope(scope, n, narrowed);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2f759551 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1133,6 +1133,25 @@ class TypeInference\n           }\n         }\n       }\n+    } else {\n+      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      if (objType != null && objType.isNominalType()) {\n+        boolean isDouble = false;\n+        if (constraint.isNumberValueType()) {\n+          if (constraint.isSubtypeOf(getNativeNumberType())\n+              || constraint.isSubtypeOf(getNativeBigIntType())) {\n+            isDouble = objType.isSubtypeOf(getNativeNumberType());\n+          } else if (constraint.isSubtypeOf(getNativeBigIntType())) {\n+            isDouble = objType.isSubtypeOf(getNativeBigIntType());\n+          }\n+        }\n+        if (isDouble) {\n+          JSType narrowed = getNativeNumberType().getPrimitiveType();\n+          if (scope.isLoose()) {\n+            narrowed = narrowed.getLeastSupertype(constraint);\n+          }\n+          scope = narrowScope(scope, n, narrowed);\n+        }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}