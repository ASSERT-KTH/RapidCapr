{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n\n    String[] parts = str.split(\"_\");\n    int length = parts.length;\n\n    if (length == 0) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    String language = parts[0];\n    validateLanguage(language);\n\n    String country = \"\";\n    String variant = \"\";\n\n    if (length > 1) {\n        country = parts[1];\n        validateCountry(country);\n\n        if (length > 2) {\n            variant = str.substring(str.indexOf('_', str.indexOf('_') + 1) + 1);\n            validateVariant(variant);\n        }\n\n        if (variant.isEmpty() && country.length() == 4 && country.charAt(2) != 'I' && country.charAt(3) != 'I') {\n            variant = \"UNDEFINED\";\n        }\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static void validateLanguage(String language) {\n    if (language.length() != 2 && language.length() != 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: invalid language code - \" + language);\n    }\n\n    if (!language.matches(\"^[a-zA-Z]+$\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: invalid language code - \" + language);\n    }\n}\n\nprivate static void validateCountry(String country) {\n    if (country.isEmpty()) {\n        return;\n    }\n\n    if (country.length() != 2 && country.length() != 3 && country.length() != 4) {\n        throw new IllegalArgumentException(\"Invalid locale format: invalid country code - \" + country);\n    }\n\n    if (!country.matches(\"^[a-zA-Z]+$\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: invalid country code - \" + country);\n    }\n}\n\nprivate static void validateVariant(String variant) {\n    if (variant.isEmpty()) {\n        return;\n    }\n\n    if (!variant.matches(\"^([a-zA-Z]{1,8}(_[a-zA-Z0-9]{1,8})*)$\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: invalid variant - \" + variant);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..87a7d3f3 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,75 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+\n+    String[] parts = str.split(\"_\");\n+    int length = parts.length;\n+\n+    if (length == 0) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    String language = parts[0];\n+    validateLanguage(language);\n+\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    if (length > 1) {\n+        country = parts[1];\n+        validateCountry(country);\n+\n+        if (length > 2) {\n+            variant = str.substring(str.indexOf('_', str.indexOf('_') + 1) + 1);\n+            validateVariant(variant);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+        if (variant.isEmpty() && country.length() == 4 && country.charAt(2) != 'I' && country.charAt(3) != 'I') {\n+            variant = \"UNDEFINED\";\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    return new Locale(language, country, variant);\n+}\n+\n+private static void validateLanguage(String language) {\n+    if (language.length() != 2 && language.length() != 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: invalid language code - \" + language);\n+    }\n+\n+    if (!language.matches(\"^[a-zA-Z]+$\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: invalid language code - \" + language);\n+    }\n+}\n+\n+private static void validateCountry(String country) {\n+    if (country.isEmpty()) {\n+        return;\n+    }\n+\n+    if (country.length() != 2 && country.length() != 3 && country.length() != 4) {\n+        throw new IllegalArgumentException(\"Invalid locale format: invalid country code - \" + country);\n+    }\n+\n+    if (!country.matches(\"^[a-zA-Z]+$\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: invalid country code - \" + country);\n+    }\n+}\n+\n+private static void validateVariant(String variant) {\n+    if (variant.isEmpty()) {\n+        return;\n+    }\n+\n+    if (!variant.matches(\"^([a-zA-Z]{1,8}(_[a-zA-Z0-9]{1,8})*)$\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: invalid variant - \" + variant);\n+    }\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: invalid language code -",
    "test_result": "FAIL"
}