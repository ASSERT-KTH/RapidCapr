{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int codePoint = Character.codePointAt(input, pos);\n        if (Character.isHighSurrogate(input.charAt(pos))) {\n            // the current character is the beginning of a surrogate pair\n            int nextPos = pos + Character.charCount(codePoint);\n            if (nextPos < input.length() && Character.isLowSurrogate(input.charAt(nextPos))) {\n                // the next character is the end of the surrogate pair\n                int surrogatePair = Character.toCodePoint(input.charAt(pos), input.charAt(nextPos));\n                translate(Character.toString((char) surrogatePair), 0, out);\n            } else {\n                // the next character is not the end of the surrogate pair\n                translate(Character.toString((char) codePoint), 0, out);\n                translate(input.subSequence(nextPos, len), out);\n                break;\n            }\n        } else {\n            // the current character is not part of a surrogate pair\n            translate(Character.toString((char) codePoint), 0, out);\n            pos += Character.charCount(codePoint);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..53fa0d14 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,37 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int codePoint = Character.codePointAt(input, pos);\n+        if (Character.isHighSurrogate(input.charAt(pos))) {\n+            // the current character is the beginning of a surrogate pair\n+            int nextPos = pos + Character.charCount(codePoint);\n+            if (nextPos < input.length() && Character.isLowSurrogate(input.charAt(nextPos))) {\n+                // the next character is the end of the surrogate pair\n+                int surrogatePair = Character.toCodePoint(input.charAt(pos), input.charAt(nextPos));\n+                translate(Character.toString((char) surrogatePair), 0, out);\n+            } else {\n+                // the next character is not the end of the surrogate pair\n+                translate(Character.toString((char) codePoint), 0, out);\n+                translate(input.subSequence(nextPos, len), out);\n+                break;\n+            }\n+        } else {\n+            // the current character is not part of a surrogate pair\n+            translate(Character.toString((char) codePoint), 0, out);\n+            pos += Character.charCount(codePoint);\n+        }\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}