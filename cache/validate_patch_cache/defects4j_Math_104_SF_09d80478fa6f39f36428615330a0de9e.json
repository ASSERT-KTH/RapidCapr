{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n\n    /**\n     * Computes the regularized gamma function P(a, x).\n     *\n     * @param a Parameter of the gamma distribution.\n     * @param x Integration end point.\n     * @param epsilon Maximum absolute error.\n     * @param maxIterations Maximum number of iterations.\n     * @return P(a, x).\n     */\n    public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n        if (a <= 0 || x < 0) {\n            throw new IllegalArgumentException(\"Invalid argument for gamma function.\");\n        }\n        double sum = 0;\n        double term = 1;\n        int n = 1;\n        while (n <= maxIterations && FastMath.abs(term) > epsilon) {\n            term *= x / (a + n - 1);\n            sum += term;\n            ++n;\n        }\n        double factor = FastMath.exp(-x + a * FastMath.log(x) - logGamma(a));\n        return factor * sum;\n    }\n\n    private static final double[] COEFF = {76.18009172947146, -86.50532032941677,\n                                           24.01409824083091, -1.231739572450155,\n                                           0.001208650973866179, -0.000005395239384953};\n\n    private static double logGamma(double x) {\n        double tmp = (x - 0.5) * FastMath.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 + 0.9999999999999978 / (COEFF[0] +\n                                                 COEFF[1] / (x + 1) +\n                                                 COEFF[2] / (x + 2) +\n                                                 COEFF[3] / (x + 3) +\n                                                 COEFF[4] / (x + 4) +\n                                                 COEFF[5] / (x + 5));\n        return tmp + FastMath.log(2.5066282746310005 * ser / x);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d1a4e37a4 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,50 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+\n+    /**\n+     * Computes the regularized gamma function P(a, x).\n+     *\n+     * @param a Parameter of the gamma distribution.\n+     * @param x Integration end point.\n+     * @param epsilon Maximum absolute error.\n+     * @param maxIterations Maximum number of iterations.\n+     * @return P(a, x).\n+     */\n+    public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n+        if (a <= 0 || x < 0) {\n+            throw new IllegalArgumentException(\"Invalid argument for gamma function.\");\n+        }\n+        double sum = 0;\n+        double term = 1;\n+        int n = 1;\n+        while (n <= maxIterations && FastMath.abs(term) > epsilon) {\n+            term *= x / (a + n - 1);\n+            sum += term;\n+            ++n;\n+        }\n+        double factor = FastMath.exp(-x + a * FastMath.log(x) - logGamma(a));\n+        return factor * sum;\n+    }\n+\n+    private static final double[] COEFF = {76.18009172947146, -86.50532032941677,\n+                                           24.01409824083091, -1.231739572450155,\n+                                           0.001208650973866179, -0.000005395239384953};\n+\n+    private static double logGamma(double x) {\n+        double tmp = (x - 0.5) * FastMath.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 + 0.9999999999999978 / (COEFF[0] +\n+                                                 COEFF[1] / (x + 1) +\n+                                                 COEFF[2] / (x + 2) +\n+                                                 COEFF[3] / (x + 3) +\n+                                                 COEFF[4] / (x + 4) +\n+                                                 COEFF[5] / (x + 5));\n+        return tmp + FastMath.log(2.5066282746310005 * ser / x);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}