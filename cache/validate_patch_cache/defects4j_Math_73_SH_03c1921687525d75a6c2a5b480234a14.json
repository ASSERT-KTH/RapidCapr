{
    "patch": "        // check if any input value is NaN or infinite\n        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) \n            || Double.isNaN(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax)) {\n            throw new IllegalArgumentException(\"Function values at endpoints or initial guess are NaN or infinite",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..61a8429a4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,10 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if any input value is NaN or infinite\n+        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) \n+            || Double.isNaN(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints or initial guess are NaN or infinite\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unclosed string literal",
    "test_result": "ERROR"
}