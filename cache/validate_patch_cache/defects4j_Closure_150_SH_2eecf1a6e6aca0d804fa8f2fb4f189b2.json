{
    "patch": "attachLiteralTypes(n);\nif (n.isFunction()) {\n    // Add the function name to the current scope.\n    String name = n.getFirstChild().getString();\n    declareVar(name, getBestJSType(n));\n\n    // For named functions, register them with the NodeUtil.\n    if (n.getFirstChild().getNext() != null) {\n        NodeUtil.registerFunctionDeclaration(\n            t.getInput(), n.getFirstChild(), scope);\n    }\n} else if (n.getType() == Token.CATCH) {\n    defineCatch(n, parent);\n} else if (n.getType() == Token.VAR && NodeUtil.isVarDeclaration(n)) {\n    defineVar(n, parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..cff7ff42 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,22 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+if (n.isFunction()) {\n+    // Add the function name to the current scope.\n+    String name = n.getFirstChild().getString();\n+    declareVar(name, getBestJSType(n));\n+\n+    // For named functions, register them with the NodeUtil.\n+    if (n.getFirstChild().getNext() != null) {\n+        NodeUtil.registerFunctionDeclaration(\n+            t.getInput(), n.getFirstChild(), scope);\n+    }\n+} else if (n.getType() == Token.CATCH) {\n+    defineCatch(n, parent);\n+} else if (n.getType() == Token.VAR && NodeUtil.isVarDeclaration(n)) {\n+    defineVar(n, parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}