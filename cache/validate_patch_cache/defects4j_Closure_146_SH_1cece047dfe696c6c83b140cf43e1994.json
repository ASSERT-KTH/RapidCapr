{
    "patch": "if (this.isSubtypeOf(JSType.nullOrUndefined())) {\n    if (that.isSubtypeOf(JSType.nullOrUndefined())) {\n        return new TypePair(this, that);\n    } else {\n        return new TypePair(null, null);\n    }\n} else if (that.isSubtypeOf(JSType.nullOrUndefined())) {\n    return new TypePair(null, null);\n} else {\n    return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..fbee5ec4 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,17 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n+if (this.isSubtypeOf(JSType.nullOrUndefined())) {\n+    if (that.isSubtypeOf(JSType.nullOrUndefined())) {\n+        return new TypePair(this, that);\n+    } else {\n         return new TypePair(null, null);\n+    }\n+} else if (that.isSubtypeOf(JSType.nullOrUndefined())) {\n+    return new TypePair(null, null);\n+} else {\n+    return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+}\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}