{
    "patch": "public double regularizedGammaP(double a, double x) {\n    if (a <= 0.0) {\n        throw new IllegalArgumentException(\"a must be positive. Invalid value: \" + a);\n    }\n\n    if (x < 0.0) {\n        throw new IllegalArgumentException(\"x must be non-negative. Invalid value: \" + x);\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    final double lgm = regularizedGammaPrefix(a, x);\n\n    if (Double.isNaN(lgm)) {\n        return lgm;\n    }\n\n    final double igf = Gamma.regularizedGammaQ(a, x);\n\n    return igf == 0.0 ? 1.0 : lgm / igf;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a4e994904 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0) {\n+        throw new IllegalArgumentException(\"a must be positive. Invalid value: \" + a);\n+    }\n+\n+    if (x < 0.0) {\n+        throw new IllegalArgumentException(\"x must be non-negative. Invalid value: \" + x);\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    final double lgm = regularizedGammaPrefix(a, x);\n+\n+    if (Double.isNaN(lgm)) {\n+        return lgm;\n+    }\n+\n+    final double igf = Gamma.regularizedGammaQ(a, x);\n+\n+    return igf == 0.0 ? 1.0 : lgm / igf;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}