{
    "patch": "        callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null) {\n        if (value.isNumber()) {\n          value.setString(Double.toString(value.getDouble()));\n        } else if (value.isString() && !value.hasChildren()) {\n          value.setString(value.getString());\n        } else {\n          return n;\n        }\n        n.removeChild(value);\n        n.getParent().replaceChild(n, value);\n        reportCodeChange();\n        return value;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..6a486591 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -216,8 +216,21 @@ class PeepholeSubstituteAlternateSyntax\n       // We can't do this in the general case, because String(a) has\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+      Node value = callTarget.getNext();\n+        callTarget.getString().equals(\"String\")) {\n       Node value = callTarget.getNext();\n       if (value != null) {\n+        if (value.isNumber()) {\n+          value.setString(Double.toString(value.getDouble()));\n+        } else if (value.isString() && !value.hasChildren()) {\n+          value.setString(value.getString());\n+        } else {\n+          return n;\n+        }\n+        n.removeChild(value);\n+        n.getParent().replaceChild(n, value);\n+        reportCodeChange();\n+        return value;\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}