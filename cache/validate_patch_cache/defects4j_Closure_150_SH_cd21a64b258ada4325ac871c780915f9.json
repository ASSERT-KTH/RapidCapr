{
    "patch": "    /**\n     * In some cases, type information can be attached to a node based on the\n     * context in which it appears. This function is used to attach literal types\n     * to expressions that can have them.\n     *\n     * @param n The node to attach to.\n     */\n    private void attachLiteralTypes(Node n) {\n      JSType t = getJSType(n);\n      if (!t.isUnknownType()) {\n        return; // If the type is already set, don't overwrite it.\n      }\n\n      switch (n.getType()) {\n        case Token.TRUE:\n        case Token.FALSE:\n        case Token.NULL:\n        case Token.NUMBER:\n        case Token.STRING:\n          setJSType(n, getLiteralType(n));\n          break;\n        case Token.THIS:\n          // We don't have an accurate type for `this`.\n          setJSType(n, registry.getNativeType(JSTypeNative.ALL_TYPE));\n          break;\n        case Token.ARRAYLIT:\n          setJSType(\n              n, getArrayType(\n                      n.hasChildren()\n                          ? getJSType(n.getFirstChild())\n                          : registry.getNativeType(JSTypeNative.NO_TYPE)));\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n     * @return True if it has already been declared.\n     */\n    private boolean declareVar(NodeTraversal t, Node n, Node parent) {\n      String name = n.getString();\n      Scope.Var var = t.getScope().getVar(name);\n      if (var == null || var.isGlobal()) {\n        return false;\n      }\n\n      if (NodeUtil.isFunctionDeclaration(n)) {\n        // Function declarations override variable declarations.\n        if (var.isParam() || var.getParentNode().getType() != Token.VAR) {\n          return false; // These have already been dealt with by visitParamList.\n        }\n        Node varParent = var.getParentNode();\n        while (varParent != n) {\n          varParent.removeChild(varParent.getFirstChild());\n          reportCodeChange();\n        }\n        return false;\n      }\n\n      if (!n.hasChildren()) {\n        // We found a VAR node with an empty child. Remove it.\n        parent.removeChild(n);\n        reportCodeChange();\n        return false;\n      }\n\n      JSType typeBefore = var.getJSType();\n      JSType typeAfter = getJSType(n.getFirstChild());\n      if (typeBefore == null) {\n        var.setJSType(typeAfter);\n      } else if (!typeBefore.equals(typeAfter)) {\n        warning(n, JSC_DUP_VAR_DECLARATION, name);\n        setJSType(n, typeBefore); // Keep the original type.\n        return true;\n      }\n      return false;\n    }\n\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          } else if (n.getFirstChild().getType() == Token.NAME) {\n            defineDeclaredFunction(n.getFirstChild(), n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          if (declareVar(t, n, parent)) {\n            return;\n          }\n          defineVar(n, parent);\n          break;\n        case Token.NAME:\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.LP:\n        case Token.DEFAULT_VALUE:\n          // Handle function parameters elsewhere.\n          break;\n        case Token.ARRAY_PATTERN:\n        case Token.OBJECT_PATTERN:\n          defineDestructuringVars(n, parent);\n          break;\n        default:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c0043b4f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,127 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+    /**\n+     * In some cases, type information can be attached to a node based on the\n+     * context in which it appears. This function is used to attach literal types\n+     * to expressions that can have them.\n+     *\n+     * @param n The node to attach to.\n+     */\n+    private void attachLiteralTypes(Node n) {\n+      JSType t = getJSType(n);\n+      if (!t.isUnknownType()) {\n+        return; // If the type is already set, don't overwrite it.\n+      }\n+\n+      switch (n.getType()) {\n+        case Token.TRUE:\n+        case Token.FALSE:\n+        case Token.NULL:\n+        case Token.NUMBER:\n+        case Token.STRING:\n+          setJSType(n, getLiteralType(n));\n+          break;\n+        case Token.THIS:\n+          // We don't have an accurate type for `this`.\n+          setJSType(n, registry.getNativeType(JSTypeNative.ALL_TYPE));\n+          break;\n+        case Token.ARRAYLIT:\n+          setJSType(\n+              n, getArrayType(\n+                      n.hasChildren()\n+                          ? getJSType(n.getFirstChild())\n+                          : registry.getNativeType(JSTypeNative.NO_TYPE)));\n+          break;\n+        default:\n+          break;\n+      }\n+    }\n+\n+    /**\n+     * @return True if it has already been declared.\n+     */\n+    private boolean declareVar(NodeTraversal t, Node n, Node parent) {\n+      String name = n.getString();\n+      Scope.Var var = t.getScope().getVar(name);\n+      if (var == null || var.isGlobal()) {\n+        return false;\n+      }\n+\n+      if (NodeUtil.isFunctionDeclaration(n)) {\n+        // Function declarations override variable declarations.\n+        if (var.isParam() || var.getParentNode().getType() != Token.VAR) {\n+          return false; // These have already been dealt with by visitParamList.\n+        }\n+        Node varParent = var.getParentNode();\n+        while (varParent != n) {\n+          varParent.removeChild(varParent.getFirstChild());\n+          reportCodeChange();\n+        }\n+        return false;\n+      }\n+\n+      if (!n.hasChildren()) {\n+        // We found a VAR node with an empty child. Remove it.\n+        parent.removeChild(n);\n+        reportCodeChange();\n+        return false;\n+      }\n+\n+      JSType typeBefore = var.getJSType();\n+      JSType typeAfter = getJSType(n.getFirstChild());\n+      if (typeBefore == null) {\n+        var.setJSType(typeAfter);\n+      } else if (!typeBefore.equals(typeAfter)) {\n+        warning(n, JSC_DUP_VAR_DECLARATION, name);\n+        setJSType(n, typeBefore); // Keep the original type.\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) return;\n+\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (n.getFirstChild().getType() == Token.NAME) {\n+            defineDeclaredFunction(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n+          if (declareVar(t, n, parent)) {\n+            return;\n+          }\n           defineVar(n, parent);\n           break;\n+        case Token.NAME:\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+          break;\n+        case Token.LP:\n+        case Token.DEFAULT_VALUE:\n+          // Handle function parameters elsewhere.\n+          break;\n+        case Token.ARRAY_PATTERN:\n+        case Token.OBJECT_PATTERN:\n+          defineDestructuringVars(n, parent);\n+          break;\n+        default:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n       }\n     }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}