{
    "patch": "      // Find unreferenced args and remove them.\n      Set<String> referencedArgs = new HashSet<>();\n      for (VarReference ref : referenced) {\n        // if the reference is to a function argument, mark it as referenced\n        if (ref.isLocal()) {\n          String name = ref.getName();\n          if (fnScope.isDeclared(name, true)) {\n            referencedArgs.add(name);\n          }\n        }\n      }\n      if (!referencedArgs.isEmpty()) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n          String argName = lastArg.getString();\n          Var var = fnScope.getVar(argName);\n          if (!referencedArgs.contains(argName)) {\n            argList.removeChild(lastArg);\n            fnScope.undeclare(var);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..78e0ce71 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Find unreferenced args and remove them.\n+      Set<String> referencedArgs = new HashSet<>();\n+      for (VarReference ref : referenced) {\n+        // if the reference is to a function argument, mark it as referenced\n+        if (ref.isLocal()) {\n+          String name = ref.getName();\n+          if (fnScope.isDeclared(name, true)) {\n+            referencedArgs.add(name);\n+          }\n+        }\n+      }\n+      if (!referencedArgs.isEmpty()) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+          String argName = lastArg.getString();\n+          Var var = fnScope.getVar(argName);\n+          if (!referencedArgs.contains(argName)) {\n+            argList.removeChild(lastArg);\n+            fnScope.undeclare(var);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}