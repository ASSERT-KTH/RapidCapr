{
    "patch": "        StringBuilder correctedRegex = new StringBuilder();\n        boolean wasWhite = false;\n        for(int i= 0; i<value.length(); ++i) {\n            char c= value.charAt(i);\n            if(Character.isWhitespace(c)) {\n                if(!wasWhite) {\n                    wasWhite= true;\n                    correctedRegex.append(\"\\\\s*+\");\n                }\n                continue;\n            }\n            wasWhite= false;\n            switch(c) {\n                case '\\'':\n                    if(unquote) {\n                        if(++i==value.length()) {\n                            return correctedRegex;\n                        }\n                        c= value.charAt(i);\n                    }\n                    break;\n                case '?':\n                case '[':\n                case ']':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '\\\\':\n                case '|':\n                case '*':\n                case '+':\n                case '^':\n                case '$':\n                case '.':\n                    correctedRegex.append('\\\\');\n            }\n            correctedRegex.append(c);\n        }\n        return correctedRegex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..3c295453 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,46 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n+        StringBuilder correctedRegex = new StringBuilder();\n+        boolean wasWhite = false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n             if(Character.isWhitespace(c)) {\n                 if(!wasWhite) {\n                     wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+                    correctedRegex.append(\"\\\\s*+\");\n                 }\n                 continue;\n             }\n             wasWhite= false;\n             switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                case '\\'':\n+                    if(unquote) {\n+                        if(++i==value.length()) {\n+                            return correctedRegex;\n+                        }\n+                        c= value.charAt(i);\n                     }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                    break;\n+                case '?':\n+                case '[':\n+                case ']':\n+                case '(':\n+                case ')':\n+                case '{':\n+                case '}':\n+                case '\\\\':\n+                case '|':\n+                case '*':\n+                case '+':\n+                case '^':\n+                case '$':\n+                case '.':\n+                    correctedRegex.append('\\\\');\n             }\n-            regex.append(c);\n+            correctedRegex.append(c);\n         }\n-        return regex;\n-    }\n+        return correctedRegex;\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}