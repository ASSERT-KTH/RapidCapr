{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction(), function);\n\n    // The parameters for object literal setters can not be removed.\n    if (NodeUtil.isObjectLitKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // If the function call sites allow modifications, remove unused arguments from call sites.\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n  \n    List<Node> unusedArgs = new ArrayList<>();\n\n    // Traverse through the argument list\n    for (Node argNode : argList.children()) {\n      Var var = fnScope.getVar(argNode.getString());\n      if (!referenced.contains(var)) {\n        unusedArgs.add(argNode);\n      } else if (!unusedArgs.isEmpty()) {\n        // Remove the unused arguments from the argument list\n        for (Node unusedArg : unusedArgs) {\n          argList.removeChild(unusedArg);\n        }\n        compiler.reportCodeChange();\n        unusedArgs.clear();\n      }\n    }\n\n    // Handle the case where all parameters are unused\n    if (!unusedArgs.isEmpty()) {\n      for (Node unusedArg : unusedArgs) {\n        argList.removeChild(unusedArg);\n      }\n      compiler.reportCodeChange();\n      unusedArgs.clear();\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4ba7f335 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction(), function);\n+\n+    // The parameters for object literal setters can not be removed.\n+    if (NodeUtil.isObjectLitKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // If the function call sites allow modifications, remove unused arguments from call sites.\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+  \n+    List<Node> unusedArgs = new ArrayList<>();\n+\n+    // Traverse through the argument list\n+    for (Node argNode : argList.children()) {\n+      Var var = fnScope.getVar(argNode.getString());\n+      if (!referenced.contains(var)) {\n+        unusedArgs.add(argNode);\n+      } else if (!unusedArgs.isEmpty()) {\n+        // Remove the unused arguments from the argument list\n+        for (Node unusedArg : unusedArgs) {\n+          argList.removeChild(unusedArg);\n+        }\n+        compiler.reportCodeChange();\n+        unusedArgs.clear();\n+      }\n+    }\n+\n+    // Handle the case where all parameters are unused\n+    if (!unusedArgs.isEmpty()) {\n+      for (Node unusedArg : unusedArgs) {\n+        argList.removeChild(unusedArg);\n+      }\n+      compiler.reportCodeChange();\n+      unusedArgs.clear();\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}