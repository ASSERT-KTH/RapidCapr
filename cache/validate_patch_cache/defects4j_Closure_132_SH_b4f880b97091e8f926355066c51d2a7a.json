{
    "patch": "          new Node(thenOp.getType(),\n                   assignName.cloneTree(),\n                   IR.hook(cond.cloneTree(), thenExpr.cloneTree(), elseExpr.cloneTree()))\n              .srcref(thenOp);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..d40909af 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,10 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+          new Node(thenOp.getType(),\n+                   assignName.cloneTree(),\n+                   IR.hook(cond.cloneTree(), thenExpr.cloneTree(), elseExpr.cloneTree()))\n+              .srcref(thenOp);\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}