{
    "patch": "private static CharSequence unescape(CharSequence input) {\n    int length = input.length();\n    StringBuilder output = new StringBuilder(length);\n    int i = 0;\n    while (i < length) {\n        char c = input.charAt(i);\n        if (c == '\\\\') {\n            if (i < length - 1) {\n                char next = input.charAt(i + 1);\n                switch (next) {\n                    case '\\\\':\n                        output.append('\\\\');\n                        break;\n                    case 'n':\n                        output.append('\\n');\n                        break;\n                    case 't':\n                        output.append('\\t');\n                        break;\n                    case 'b':\n                        if (i < length - 3 && Character.isHighSurrogate(input.charAt(i + 2)) && Character.isLowSurrogate(input.charAt(i + 3))) {\n                            int cp = Character.toCodePoint(input.charAt(i + 2), input.charAt(i + 3));\n                            if (cp == 0x08) {\n                                output.append('\\b');\n                                i += 2;\n                                break;\n                            }\n                        }\n                        output.append('\\\\').append('b');\n                        break;\n                    default:\n                        output.append(c).append(next);\n                        break;\n                }\n                i++;\n            } else {\n                output.append(c);\n            }\n        } else {\n            output.append(c);\n        }\n        i++;\n    }\n    return output;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..7bf2d0bf 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,51 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+private static CharSequence unescape(CharSequence input) {\n+    int length = input.length();\n+    StringBuilder output = new StringBuilder(length);\n+    int i = 0;\n+    while (i < length) {\n+        char c = input.charAt(i);\n+        if (c == '\\\\') {\n+            if (i < length - 1) {\n+                char next = input.charAt(i + 1);\n+                switch (next) {\n+                    case '\\\\':\n+                        output.append('\\\\');\n+                        break;\n+                    case 'n':\n+                        output.append('\\n');\n+                        break;\n+                    case 't':\n+                        output.append('\\t');\n+                        break;\n+                    case 'b':\n+                        if (i < length - 3 && Character.isHighSurrogate(input.charAt(i + 2)) && Character.isLowSurrogate(input.charAt(i + 3))) {\n+                            int cp = Character.toCodePoint(input.charAt(i + 2), input.charAt(i + 3));\n+                            if (cp == 0x08) {\n+                                output.append('\\b');\n+                                i += 2;\n+                                break;\n+                            }\n+                        }\n+                        output.append('\\\\').append('b');\n+                        break;\n+                    default:\n+                        output.append(c).append(next);\n+                        break;\n+                }\n+                i++;\n+            } else {\n+                output.append(c);\n+            }\n+        } else {\n+            output.append(c);\n+        }\n+        i++;\n+    }\n+    return output;\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}