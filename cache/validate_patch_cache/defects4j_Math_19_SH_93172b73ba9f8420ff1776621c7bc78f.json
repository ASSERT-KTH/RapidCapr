{
    "patch": "            if (hasFiniteBounds) {\n                boolean allFiniteBounds = true;\n                for (int i = 0; i < lB.length; i++) {\n                    if (Double.isInfinite(lB[i]) ||\n                        Double.isInfinite(uB[i])) {\n                        allFiniteBounds = false;\n                        break;\n                    }\n                }\n                if (allFiniteBounds) {\n                    // Convert API to internal handling of boundaries.\n                    boundaries = new double[2][];\n                    boundaries[0] = lB;\n                    boundaries[1] = uB;\n\n                    // Abort early if the normalization will overflow (cf. \"encode\" method).\n                    double sum = 0;\n                    double[] start = getStartPoint();\n                    for (int i = 0; i < start.length; i++) {\n                        double boundRange = boundaries[1][i] - boundaries[0][i];\n                        if (Math.abs(start[i]) > 0.1 * boundRange) {\n                            throw new NumberIsTooLargeException(\n                                    start[i], 0.1 * boundRange, true);\n                        }\n                        if (inputSigma != null) {\n                            sum += inputSigma[i] * inputSigma[i];\n                        }\n                    }\n                    if (sum >= 0.5 * (double) start.length) {\n                        throw new NumberIsTooLargeException(sum, 0.5 * (double) start.length, true);\n                    }\n                } else {\n                    // If there is at least one finite bound, none can be infinite,\n                    // because mixed cases are not supported by the current code.\n                    throw new MathUnsupportedOperationException();\n                }\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..31e585280 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,45 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (hasFiniteBounds) {\n+                boolean allFiniteBounds = true;\n+                for (int i = 0; i < lB.length; i++) {\n+                    if (Double.isInfinite(lB[i]) ||\n+                        Double.isInfinite(uB[i])) {\n+                        allFiniteBounds = false;\n+                        break;\n+                    }\n+                }\n+                if (allFiniteBounds) {\n+                    // Convert API to internal handling of boundaries.\n+                    boundaries = new double[2][];\n+                    boundaries[0] = lB;\n+                    boundaries[1] = uB;\n+\n+                    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                    double sum = 0;\n+                    double[] start = getStartPoint();\n+                    for (int i = 0; i < start.length; i++) {\n+                        double boundRange = boundaries[1][i] - boundaries[0][i];\n+                        if (Math.abs(start[i]) > 0.1 * boundRange) {\n+                            throw new NumberIsTooLargeException(\n+                                    start[i], 0.1 * boundRange, true);\n+                        }\n+                        if (inputSigma != null) {\n+                            sum += inputSigma[i] * inputSigma[i];\n+                        }\n+                    }\n+                    if (sum >= 0.5 * (double) start.length) {\n+                        throw new NumberIsTooLargeException(sum, 0.5 * (double) start.length, true);\n+                    }\n+                } else {\n+                    // If there is at least one finite bound, none can be infinite,\n+                    // because mixed cases are not supported by the current code.\n+                    throw new MathUnsupportedOperationException();\n+                }\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = null;\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}