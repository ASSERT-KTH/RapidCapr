{
    "patch": "private Properties props = null;\nprivate final String PROP_FILE = \"config.properties\";\n\npublic String getProp(String key) {\n    if (props == null) {\n        loadProps();\n    }\n    return props.getProperty(key, \"\");\n}\n\npublic void loadProps() {\n    props = new Properties();\n    try {\n        props.load(new FileInputStream(PROP_FILE));\n    } catch (IOException e) {\n        System.err.println(\"Error loading properties file: \" + e.getMessage());\n    }\n}\n\npublic void setProp(String key, String value) {\n    if (props == null) {\n        loadProps();\n    }\n    props.setProperty(key, value);\n    try {\n        props.store(new FileOutputStream(PROP_FILE), null);\n    } catch (IOException e) {\n        System.err.println(\"Error storing properties file: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..74502517 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+private Properties props = null;\n+private final String PROP_FILE = \"config.properties\";\n+\n+public String getProp(String key) {\n+    if (props == null) {\n+        loadProps();\n+    }\n+    return props.getProperty(key, \"\");\n+}\n+\n+public void loadProps() {\n+    props = new Properties();\n+    try {\n+        props.load(new FileInputStream(PROP_FILE));\n+    } catch (IOException e) {\n+        System.err.println(\"Error loading properties file: \" + e.getMessage());\n+    }\n+}\n+\n+public void setProp(String key, String value) {\n+    if (props == null) {\n+        loadProps();\n+    }\n+    props.setProperty(key, value);\n+    try {\n+        props.store(new FileOutputStream(PROP_FILE), null);\n+    } catch (IOException e) {\n+        System.err.println(\"Error storing properties file: \" + e.getMessage());\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}