{
    "patch": "if (!(rval >= 0 && rval < 32)) {\n  error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n  return n;\n}\n\n// Convert the numbers to ints\nint lvalInt = (int) lval;\nif (lvalInt != lval) {\n  error(FRACTIONAL_BITWISE_OPERAND, left);\n  return n;\n}\n\nint rvalInt = (int) rval;\nif (rvalInt != rval) {\n  error(FRACTIONAL_BITWISE_OPERAND, right);\n  return n;\n}\n\nswitch (n.getType()) {\n  case Token.LSH:\n    result = lvalInt << rvalInt;\n    break;\n  case Token.RSH:\n    result = lvalInt >> rvalInt;\n    break;\n  case Token.URSH:\n    if (lval >= 0) { \n      result = lvalInt >>> rvalInt;\n    } else { \n      result = (lvalInt >>> rvalInt) | (2 << ~rvalInt);\n    }\n    break;\n  default:\n    throw new AssertionError(\"Unknown shift operator: \" +\n        Node.tokenToName(n.getType()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..c16ac6c8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,42 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (!(rval >= 0 && rval < 32)) {\n+  error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+  return n;\n+}\n+\n+// Convert the numbers to ints\n+int lvalInt = (int) lval;\n+if (lvalInt != lval) {\n+  error(FRACTIONAL_BITWISE_OPERAND, left);\n+  return n;\n+}\n+\n+int rvalInt = (int) rval;\n+if (rvalInt != rval) {\n+  error(FRACTIONAL_BITWISE_OPERAND, right);\n+  return n;\n+}\n+\n+switch (n.getType()) {\n+  case Token.LSH:\n+    result = lvalInt << rvalInt;\n+    break;\n+  case Token.RSH:\n+    result = lvalInt >> rvalInt;\n+    break;\n+  case Token.URSH:\n+    if (lval >= 0) { \n+      result = lvalInt >>> rvalInt;\n+    } else { \n+      result = (lvalInt >>> rvalInt) | (2 << ~rvalInt);\n+    }\n+    break;\n+  default:\n+    throw new AssertionError(\"Unknown shift operator: \" +\n+        Node.tokenToName(n.getType()));\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: variable lvalInt is already defined in method tryFoldShift(Node,Node,Node)",
    "test_result": "ERROR"
}