{
    "patch": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n    int order = matrix.getRowDimension();\n    double[][] c = matrix.getData();\n    double[][] b = new double[order][order];\n    int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    while (r < order) {\n        // Find largest diagonal element\n        double max = 0;\n        int maxIndex = r;\n        for (int i = r; i < order; ++i) {\n            double cii = c[index[i]][index[i]];\n            if (cii > max) {\n                max = cii;\n                maxIndex = i;\n            }\n        }\n\n        // Swap elements if necessary\n        int swapTemp = index[r];\n        index[r] = index[maxIndex];\n        index[maxIndex] = swapTemp;\n\n        if (max < small) {\n            // Check remaining diagonal elements\n            for (int i = r; i < order; ++i) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);\n                }\n            }\n            break;\n        } else {\n            b[r][r] = FastMath.sqrt(max);\n            double invBRR = 1 / b[r][r];\n            for (int i = r + 1; i < order; ++i) {\n                double e = c[index[i]][index[r]] * invBRR;\n                b[i][r] = e;\n                double cii = c[index[i]][index[i]] - e * e;\n                c[index[i]][index[i]] = cii;\n                for (int j = r + 1; j < i; ++j) {\n                    double f = c[index[i]][index[j]] - e * b[j][r];\n                    c[index[i]][index[j]] = f;\n                    c[index[j]][index[i]] = f;\n                }\n            }\n            ++r;\n        }\n    }\n\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\nindex 04488e593..9975f1884 100644\n--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n@@ -59,96 +59,68 @@ public class RectangularCholeskyDecomposition {\n      * @exception NonPositiveDefiniteMatrixException if the matrix is not\n      * positive semidefinite.\n      */\n-    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n+public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         throws NonPositiveDefiniteMatrixException {\n+    int order = matrix.getRowDimension();\n+    double[][] c = matrix.getData();\n+    double[][] b = new double[order][order];\n+    int[] index = new int[order];\n+    for (int i = 0; i < order; ++i) {\n+        index[i] = i;\n+    }\n \n-        final int order = matrix.getRowDimension();\n-        final double[][] c = matrix.getData();\n-        final double[][] b = new double[order][order];\n-\n-        int[] swap  = new int[order];\n-        int[] index = new int[order];\n-        for (int i = 0; i < order; ++i) {\n-            index[i] = i;\n+    int r = 0;\n+    while (r < order) {\n+        // Find largest diagonal element\n+        double max = 0;\n+        int maxIndex = r;\n+        for (int i = r; i < order; ++i) {\n+            double cii = c[index[i]][index[i]];\n+            if (cii > max) {\n+                max = cii;\n+                maxIndex = i;\n+            }\n         }\n \n-        int r = 0;\n-        for (boolean loop = true; loop;) {\n+        // Swap elements if necessary\n+        int swapTemp = index[r];\n+        index[r] = index[maxIndex];\n+        index[maxIndex] = swapTemp;\n \n-            // find maximal diagonal element\n-            swap[r] = r;\n-            for (int i = r + 1; i < order; ++i) {\n-                int ii  = index[i];\n-                int isi = index[swap[i]];\n-                if (c[ii][ii] > c[isi][isi]) {\n-                    swap[r] = i;\n+        if (max < small) {\n+            // Check remaining diagonal elements\n+            for (int i = r; i < order; ++i) {\n+                if (c[index[i]][index[i]] < -small) {\n+                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], index[i], small);\n                 }\n             }\n-\n-\n-            // swap elements\n-            if (swap[r] != r) {\n-                int tmp = index[r];\n-                index[r] = index[swap[r]];\n-                index[swap[r]] = tmp;\n-            }\n-\n-            // check diagonal element\n-            int ir = index[r];\n-            if (c[ir][ir] < small) {\n-\n-                if (r == 0) {\n-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n-                }\n-\n-                // check remaining diagonal elements\n-                for (int i = r; i < order; ++i) {\n-                    if (c[index[i]][index[i]] < -small) {\n-                        // there is at least one sufficiently negative diagonal element,\n-                        // the symmetric positive semidefinite matrix is wrong\n-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n-                    }\n-                }\n-\n-                // all remaining diagonal elements are close to zero, we consider we have\n-                // found the rank of the symmetric positive semidefinite matrix\n-                ++r;\n-                loop = false;\n-\n-            } else {\n-\n-                // transform the matrix\n-                final double sqrt = FastMath.sqrt(c[ir][ir]);\n-                b[r][r] = sqrt;\n-                final double inverse  = 1 / sqrt;\n-                for (int i = r + 1; i < order; ++i) {\n-                    final int ii = index[i];\n-                    final double e = inverse * c[ii][ir];\n-                    b[i][r] = e;\n-                    c[ii][ii] -= e * e;\n-                    for (int j = r + 1; j < i; ++j) {\n-                        final int ij = index[j];\n-                        final double f = c[ii][ij] - e * b[j][r];\n-                        c[ii][ij] = f;\n-                        c[ij][ii] = f;\n-                    }\n+            break;\n+        } else {\n+            b[r][r] = FastMath.sqrt(max);\n+            double invBRR = 1 / b[r][r];\n+            for (int i = r + 1; i < order; ++i) {\n+                double e = c[index[i]][index[r]] * invBRR;\n+                b[i][r] = e;\n+                double cii = c[index[i]][index[i]] - e * e;\n+                c[index[i]][index[i]] = cii;\n+                for (int j = r + 1; j < i; ++j) {\n+                    double f = c[index[i]][index[j]] - e * b[j][r];\n+                    c[index[i]][index[j]] = f;\n+                    c[index[j]][index[i]] = f;\n                 }\n-\n-                // prepare next iteration\n-                loop = ++r < order;\n             }\n+            ++r;\n         }\n+    }\n \n-        // build the root matrix\n-        rank = r;\n-        root = MatrixUtils.createRealMatrix(order, r);\n-        for (int i = 0; i < order; ++i) {\n-            for (int j = 0; j < r; ++j) {\n-                root.setEntry(index[i], j, b[i][j]);\n-            }\n+    rank = r;\n+    root = MatrixUtils.createRealMatrix(order, r);\n+    for (int i = 0; i < order; ++i) {\n+        for (int j = 0; j < r; ++j) {\n+            root.setEntry(index[i], j, b[i][j]);\n         }\n-\n     }\n+}\n \n     /** Get the root of the covariance matrix.\n      * The root is the rectangular matrix <code>B</code> such that",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.0057503119247414945>",
    "test_result": "FAIL"
}