{
    "patch": "Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      if (argList.getChildCount() == 0) {\n        // No arguments were left. If modifyCallers is true,\n        // we should bail and let some other pass take care of it\n        // (otherwise we might break any annotated signatures.)\n        if (!modifyCallers && !function.getBooleanProp(Node.IS_ARROW_FUNCTION)) {\n          // An arrow function in default arguments mode may have an empty argument list.\n          // We should not drop this argument list since it could cause unexpected syntax errors.\n          argList.addChildToFront(new Node(Token.EMPTY));\n          compiler.reportCodeChange();\n        } else {\n          return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f8cac2a2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      if (argList.getChildCount() == 0) {\n+        // No arguments were left. If modifyCallers is true,\n+        // we should bail and let some other pass take care of it\n+        // (otherwise we might break any annotated signatures.)\n+        if (!modifyCallers && !function.getBooleanProp(Node.IS_ARROW_FUNCTION)) {\n+          // An arrow function in default arguments mode may have an empty argument list.\n+          // We should not drop this argument list since it could cause unexpected syntax errors.\n+          argList.addChildToFront(new Node(Token.EMPTY));\n+          compiler.reportCodeChange();\n+        } else {\n+          return;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}