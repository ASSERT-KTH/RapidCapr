{
    "patch": "private void updateBounds(TimePeriod period, int index) {\n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    updateIndex(start, minStartIndex, index, n -> n < start);\n    updateIndex(start, maxStartIndex, index, n -> n > start);\n    updateMiddleIndex(middle, index);\n    updateIndex(end, minEndIndex, index, n -> n > end);\n    updateIndex(end, maxEndIndex, index, n -> n < end);\n}\n\nprivate void updateIndex(long value, int currentIndex, int newIndex, LongPredicate condition) {\n    if (currentIndex >= 0) {\n        long currentValue = getDataItem(currentIndex).getPeriod()\n                .getStart().getTime(); // can use end for minEndIndex and maxEndIndex\n        if (condition.test(currentValue)) {\n            currentIndex = newIndex;\n        }\n    } else {\n        currentIndex = newIndex;\n    }\n}\n\nprivate void updateMiddleIndex(long middle, int newIndex) {\n    if (minMiddleIndex >= 0) {\n        TimePeriod minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();\n        long minMiddle = calculateMiddle(minMiddlePeriod);\n        if (middle < minMiddle) {\n            minMiddleIndex = newIndex;\n        }\n    } else {\n        minMiddleIndex = newIndex;\n    }\n\n    if (maxMiddleIndex >= 0) {\n        TimePeriod maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();\n        long maxMiddle = calculateMiddle(maxMiddlePeriod);\n        if (middle > maxMiddle) {\n            maxMiddleIndex = newIndex;\n        }\n    } else {\n        maxMiddleIndex = newIndex;\n    }\n}\n\nprivate long calculateMiddle(TimePeriod period) {\n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    return start + ((end - start) / 2);\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..6518209 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -254,85 +254,57 @@ public class TimePeriodValues extends Series implements Serializable {\n      * @param period  the time period.\n      * @param index  the index of the time period.\n      */\n-    private void updateBounds(TimePeriod period, int index) {\n-        \n-        long start = period.getStart().getTime();\n-        long end = period.getEnd().getTime();\n-        long middle = start + ((end - start) / 2);\n-\n-        if (this.minStartIndex >= 0) {\n-            long minStart = getDataItem(this.minStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start < minStart) {\n-                this.minStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minStartIndex = index;\n-        }\n-        \n-        if (this.maxStartIndex >= 0) {\n-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start > maxStart) {\n-                this.maxStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxStartIndex = index;\n-        }\n-        \n-        if (this.minMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long minMiddle = s + (e - s) / 2;\n-            if (middle < minMiddle) {\n-                this.minMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minMiddleIndex = index;\n-        }\n-        \n-        if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long maxMiddle = s + (e - s) / 2;\n-            if (middle > maxMiddle) {\n-                this.maxMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxMiddleIndex = index;\n-        }\n-        \n-        if (this.minEndIndex >= 0) {\n-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end < minEnd) {\n-                this.minEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minEndIndex = index;\n-        }\n-       \n-        if (this.maxEndIndex >= 0) {\n-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end > maxEnd) {\n-                this.maxEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxEndIndex = index;\n-        }\n-        \n-    }\n+private void updateBounds(TimePeriod period, int index) {\n+    long start = period.getStart().getTime();\n+    long end = period.getEnd().getTime();\n+    long middle = start + ((end - start) / 2);\n+\n+    updateIndex(start, minStartIndex, index, n -> n < start);\n+    updateIndex(start, maxStartIndex, index, n -> n > start);\n+    updateMiddleIndex(middle, index);\n+    updateIndex(end, minEndIndex, index, n -> n > end);\n+    updateIndex(end, maxEndIndex, index, n -> n < end);\n+}\n+\n+private void updateIndex(long value, int currentIndex, int newIndex, LongPredicate condition) {\n+    if (currentIndex >= 0) {\n+        long currentValue = getDataItem(currentIndex).getPeriod()\n+                .getStart().getTime(); // can use end for minEndIndex and maxEndIndex\n+        if (condition.test(currentValue)) {\n+            currentIndex = newIndex;\n+        }\n+    } else {\n+        currentIndex = newIndex;\n+    }\n+}\n+\n+private void updateMiddleIndex(long middle, int newIndex) {\n+    if (minMiddleIndex >= 0) {\n+        TimePeriod minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();\n+        long minMiddle = calculateMiddle(minMiddlePeriod);\n+        if (middle < minMiddle) {\n+            minMiddleIndex = newIndex;\n+        }\n+    } else {\n+        minMiddleIndex = newIndex;\n+    }\n+\n+    if (maxMiddleIndex >= 0) {\n+        TimePeriod maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();\n+        long maxMiddle = calculateMiddle(maxMiddlePeriod);\n+        if (middle > maxMiddle) {\n+            maxMiddleIndex = newIndex;\n+        }\n+    } else {\n+        maxMiddleIndex = newIndex;\n+    }\n+}\n+\n+private long calculateMiddle(TimePeriod period) {\n+    long start = period.getStart().getTime();\n+    long end = period.getEnd().getTime();\n+    return start + ((end - start) / 2);\n+}\n     \n     /**\n      * Recalculates the bounds for the collection of items.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}