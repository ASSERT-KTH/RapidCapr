{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        MockMethodInterceptor.MockAccess mockAccess = getMockAccessObject(mockInstance, mockedProxyType);\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    }\n}\n\nprivate <T> MockMethodInterceptor.MockAccess getMockAccessObject(T mockInstance, Class<? extends T> mockedProxyType) {\n    // Get all interfaces of mockedProxyType\n    List<Class<?>> interfaceList = new ArrayList<>();\n    Collections.addAll(interfaceList, mockedProxyType.getInterfaces());\n    Class<?> superClass = mockedProxyType.getSuperclass();\n    while (superClass != null) {\n        Collections.addAll(interfaceList, superClass.getInterfaces());\n        superClass = superClass.getSuperclass();\n    }\n\n    // Find the interface that extends MockMethodInterceptor.MockAccess and get its MockAccess class\n    for (Class<?> iface : interfaceList) {\n        if (iface.getName().startsWith(\"org.mockito.codegen.Mock\") && iface != MockMethodInterceptor.MockAccess.class) {\n            String mockAccessName = iface.getName() + \"$MockAccess\";\n            try {\n                Class<?> mockAccessClass = Class.forName(mockAccessName, true, mockedProxyType.getClassLoader());\n                return (MockMethodInterceptor.MockAccess) mockAccessClass.cast(mockInstance);\n            } catch (ClassNotFoundException e) {\n                throw new MockitoException(\"Unable to find MockAccess class for mock instance\", e);\n            } catch (ClassCastException e) {\n                throw new MockitoException(\"Unable to cast mock instance to mockito MockAccess\", e);\n            }\n        }\n    }\n    throw new MockitoException(\"Mock instance does not implement org.mockito.codegen.Mock\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..f78d71a7b 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,63 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance = null;\n+    try {\n+        mockInstance = classInstantiator.instantiate(mockedProxyType);\n+        MockMethodInterceptor.MockAccess mockAccess = getMockAccessObject(mockInstance, mockedProxyType);\n+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mockito mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                \"  proxy instance class : \" + describeClass(mockInstance),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+                \"\"\n+        ), cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    }\n+}\n+\n+private <T> MockMethodInterceptor.MockAccess getMockAccessObject(T mockInstance, Class<? extends T> mockedProxyType) {\n+    // Get all interfaces of mockedProxyType\n+    List<Class<?>> interfaceList = new ArrayList<>();\n+    Collections.addAll(interfaceList, mockedProxyType.getInterfaces());\n+    Class<?> superClass = mockedProxyType.getSuperclass();\n+    while (superClass != null) {\n+        Collections.addAll(interfaceList, superClass.getInterfaces());\n+        superClass = superClass.getSuperclass();\n+    }\n+\n+    // Find the interface that extends MockMethodInterceptor.MockAccess and get its MockAccess class\n+    for (Class<?> iface : interfaceList) {\n+        if (iface.getName().startsWith(\"org.mockito.codegen.Mock\") && iface != MockMethodInterceptor.MockAccess.class) {\n+            String mockAccessName = iface.getName() + \"$MockAccess\";\n+            try {\n+                Class<?> mockAccessClass = Class.forName(mockAccessName, true, mockedProxyType.getClassLoader());\n+                return (MockMethodInterceptor.MockAccess) mockAccessClass.cast(mockInstance);\n+            } catch (ClassNotFoundException e) {\n+                throw new MockitoException(\"Unable to find MockAccess class for mock instance\", e);\n+            } catch (ClassCastException e) {\n+                throw new MockitoException(\"Unable to cast mock instance to mockito MockAccess\", e);\n+            }\n         }\n     }\n+    throw new MockitoException(\"Mock instance does not implement org.mockito.codegen.Mock\");\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}