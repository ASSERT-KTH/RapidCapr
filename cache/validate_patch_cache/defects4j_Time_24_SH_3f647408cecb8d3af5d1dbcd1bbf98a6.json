{
    "patch": "            } catch (IllegalArgumentException e) {\n                if (resetFields) {\n                    for (int j = 0; j < iSavedFieldsCount; j++) {\n                        if (!savedFields[j].isSaved()) {\n                            savedFields[j].restore();\n                        }\n                    }\n                    if (iSavedFieldsCount > 0) {\n                        iSavedFields[iSavedFieldsCount - 1].set(iMillis, savedFields[iSavedFieldsCount - 1].getField().getType());\n                    } else {\n                        throw e;\n                    }\n                } else {\n                    throw e;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a05e448b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalArgumentException e) {\n+                if (resetFields) {\n+                    for (int j = 0; j < iSavedFieldsCount; j++) {\n+                        if (!savedFields[j].isSaved()) {\n+                            savedFields[j].restore();\n+                        }\n+                    }\n+                    if (iSavedFieldsCount > 0) {\n+                        iSavedFields[iSavedFieldsCount - 1].set(iMillis, savedFields[iSavedFieldsCount - 1].getField().getType());\n+                    } else {\n+                        throw e;\n+                    }\n+                } else {\n+                    throw e;\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}