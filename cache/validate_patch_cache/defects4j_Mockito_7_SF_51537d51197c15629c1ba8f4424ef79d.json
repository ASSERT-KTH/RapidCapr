{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null) {\n        for (Type type : bounds) {\n            // skip if type is null\n            if (type == null) {\n                continue;\n            }\n\n            // check if type is parameterized type and recursively register its type variables\n            if (type instanceof ParameterizedType) {\n                ParameterizedType pType = (ParameterizedType) type;\n\n                Type[] actualTypeArguments = pType.getActualTypeArguments();\n                if (actualTypeArguments != null) {\n                    for (Type arg : actualTypeArguments) {\n                        if (arg != null) {\n                            registerTypeVariablesOn(arg);\n                        }\n                    }\n                }\n            } else if (type instanceof TypeVariable) {\n                // recursively register type variables for type variable bounds\n                readTypeVariablesForTypeVariableBounds((TypeVariable<?>) type);\n            }\n        }\n    }\n\n    // recursively register type variables for actual type argument if it is a type variable\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable) {\n        readTypeVariablesForTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariablesForTypeVariableBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null) {\n        for (Type type : bounds) {\n            if (type != null) {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable) {\n        readTypeVariablesForTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..44e3a9109 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,61 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null) {\n+        for (Type type : bounds) {\n+            // skip if type is null\n+            if (type == null) {\n+                continue;\n+            }\n+\n+            // check if type is parameterized type and recursively register its type variables\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType pType = (ParameterizedType) type;\n+\n+                Type[] actualTypeArguments = pType.getActualTypeArguments();\n+                if (actualTypeArguments != null) {\n+                    for (Type arg : actualTypeArguments) {\n+                        if (arg != null) {\n+                            registerTypeVariablesOn(arg);\n+                        }\n+                    }\n+                }\n+            } else if (type instanceof TypeVariable) {\n+                // recursively register type variables for type variable bounds\n+                readTypeVariablesForTypeVariableBounds((TypeVariable<?>) type);\n+            }\n+        }\n+    }\n+\n+    // recursively register type variables for actual type argument if it is a type variable\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        readTypeVariablesForTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariablesForTypeVariableBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null) {\n+        for (Type type : bounds) {\n+            if (type != null) {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        readTypeVariablesForTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}