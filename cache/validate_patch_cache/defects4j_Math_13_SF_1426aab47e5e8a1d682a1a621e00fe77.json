{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix root = dec.getSquareRoot();\n\n    // Check for NaN values in the root\n    for (int i = 0; i < root.getRowDimension(); i++) {\n        for (int j = 0; j < root.getColumnDimension(); j++) {\n            if (Double.isNaN(root.getEntry(i, j))) {\n                return null;\n            }\n        }\n    }\n\n    return root;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..79e11cdcf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix root = dec.getSquareRoot();\n+\n+    // Check for NaN values in the root\n+    for (int i = 0; i < root.getRowDimension(); i++) {\n+        for (int j = 0; j < root.getColumnDimension(); j++) {\n+            if (Double.isNaN(root.getEntry(i, j))) {\n+                return null;\n+            }\n+        }\n     }\n+\n+    return root;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}