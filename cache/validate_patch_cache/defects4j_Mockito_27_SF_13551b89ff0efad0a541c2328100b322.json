{
    "patch": "import org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.internal.handler.MockHandlerImpl;\nimport org.mockito.internal.handler.MockHandlerInterface;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.plugins.MockMaker;\n\nimport java.util.Collections;\n\npublic class MyMockMaker implements MockMaker {\n    @Override\n    public <T> T createMock(MockCreationSettings<T> settings, MockHandlerInterface<T> handler) {\n        T mock = settings.getTypeToMock().cast(java.lang.reflect.Proxy.newProxyInstance(\n                settings.getTypeToMock().getClassLoader(),\n                new Class<?>[]{settings.getTypeToMock()},\n                handler\n        ));\n\n        ((MockHandlerImpl<T>) handler).setMock(mock);\n\n        return mock;\n    }\n\n    @Override\n    public MockHandlerInterface getHandler(Object mock) {\n        return ((MockAccess) mock).getMockitoInterceptor().getHandler();\n    }\n\n    @Override\n    public void resetMock(Object mock, MockHandlerInterface newHandler, MockCreationSettings settings) {\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().\n                defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n    }\n\n    @Override\n    public TypeMockability isTypeMockable(Class<?> type) {\n        if (type.isPrimitive()) {\n            return TypeMockability.NON_MOCKABLE;\n        }\n\n        return TypeMockability.MOCKABLE;\n    }\n\n    @Override\n    public void resetMock(Object mock, MockHandlerInterface newHandler, MockCreationSettings settings, MockMaker.TypeMockability typeMockability) {\n        resetMock(mock, newHandler, settings);\n    }\n\n    @Override\n    public MockCreationSettings<?> buildSettings(MockCreationSettings<?> mockSettings) {\n        return mockSettings;\n    }\n\n    @Override\n    public void clearMock(Object mock) {\n        ((MockAccess) mock).setMockitoInterceptor(null);\n        ((MockAccess) mock).setMockitoMockSettings(Collections.emptyList());\n        ((MockAccess) mock).setMockitoInterceptor(null);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..289f0b1ef 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,67 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.handler.MockHandlerImpl;\n+import org.mockito.internal.handler.MockHandlerInterface;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.plugins.MockMaker;\n+\n+import java.util.Collections;\n+\n+public class MyMockMaker implements MockMaker {\n+    @Override\n+    public <T> T createMock(MockCreationSettings<T> settings, MockHandlerInterface<T> handler) {\n+        T mock = settings.getTypeToMock().cast(java.lang.reflect.Proxy.newProxyInstance(\n+                settings.getTypeToMock().getClassLoader(),\n+                new Class<?>[]{settings.getTypeToMock()},\n+                handler\n+        ));\n+\n+        ((MockHandlerImpl<T>) handler).setMock(mock);\n+\n+        return mock;\n+    }\n+\n+    @Override\n+    public MockHandlerInterface getHandler(Object mock) {\n+        return ((MockAccess) mock).getMockitoInterceptor().getHandler();\n+    }\n+\n+    @Override\n+    public void resetMock(Object mock, MockHandlerInterface newHandler, MockCreationSettings settings) {\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().\n+                defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n+    }\n+\n+    @Override\n+    public TypeMockability isTypeMockable(Class<?> type) {\n+        if (type.isPrimitive()) {\n+            return TypeMockability.NON_MOCKABLE;\n+        }\n+\n+        return TypeMockability.MOCKABLE;\n+    }\n+\n+    @Override\n+    public void resetMock(Object mock, MockHandlerInterface newHandler, MockCreationSettings settings, MockMaker.TypeMockability typeMockability) {\n+        resetMock(mock, newHandler, settings);\n+    }\n+\n+    @Override\n+    public MockCreationSettings<?> buildSettings(MockCreationSettings<?> mockSettings) {\n+        return mockSettings;\n+    }\n+\n+    @Override\n+    public void clearMock(Object mock) {\n+        ((MockAccess) mock).setMockitoInterceptor(null);\n+        ((MockAccess) mock).setMockitoMockSettings(Collections.emptyList());\n+        ((MockAccess) mock).setMockitoInterceptor(null);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}