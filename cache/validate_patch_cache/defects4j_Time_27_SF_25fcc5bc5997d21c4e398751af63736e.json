{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int numSeparators = 0;\n    for(Object o : elementPairs) {\n        if (o instanceof Separator) {\n            numSeparators++;\n        }\n    }\n    if (numSeparators == 0) {\n        Object[] comps = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comps[0], (PeriodParser) comps[1]);\n    } else if (numSeparators == 1 && !(elementPairs.get(0) instanceof Separator) && !(elementPairs.get(elementPairs.size() - 1) instanceof Separator)) {\n        int separatorIndex = -1;\n        for (int i = 0; i < elementPairs.size(); i++) {\n            if (elementPairs.get(i) instanceof Separator) {\n                separatorIndex = i;\n                break;\n            }\n        }\n        List<Object> leftPairs = elementPairs.subList(0, separatorIndex);\n        List<Object> rightPairs = elementPairs.subList(separatorIndex + 1, elementPairs.size());\n        Object[] leftComps = createComposite(leftPairs);\n        Object[] rightComps = createComposite(rightPairs);\n        PeriodPrinter printer = notPrinter ? null : ((Separator) elementPairs.get(separatorIndex)).finish((PeriodPrinter) leftComps[0], (PeriodParser) rightComps[1]);\n        PeriodParser parser = notParser ? null : ((Separator) elementPairs.get(separatorIndex)).finish((PeriodPrinter) rightComps[0], (PeriodParser) leftComps[1]);\n        return new PeriodFormatter(printer, parser);\n    } else {\n        throw new IllegalStateException(\"Invalid element pair configuration\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..a2951333 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,38 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int numSeparators = 0;\n+    for(Object o : elementPairs) {\n+        if (o instanceof Separator) {\n+            numSeparators++;\n         }\n     }\n+    if (numSeparators == 0) {\n+        Object[] comps = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comps[0], (PeriodParser) comps[1]);\n+    } else if (numSeparators == 1 && !(elementPairs.get(0) instanceof Separator) && !(elementPairs.get(elementPairs.size() - 1) instanceof Separator)) {\n+        int separatorIndex = -1;\n+        for (int i = 0; i < elementPairs.size(); i++) {\n+            if (elementPairs.get(i) instanceof Separator) {\n+                separatorIndex = i;\n+                break;\n+            }\n+        }\n+        List<Object> leftPairs = elementPairs.subList(0, separatorIndex);\n+        List<Object> rightPairs = elementPairs.subList(separatorIndex + 1, elementPairs.size());\n+        Object[] leftComps = createComposite(leftPairs);\n+        Object[] rightComps = createComposite(rightPairs);\n+        PeriodPrinter printer = notPrinter ? null : ((Separator) elementPairs.get(separatorIndex)).finish((PeriodPrinter) leftComps[0], (PeriodParser) rightComps[1]);\n+        PeriodParser parser = notParser ? null : ((Separator) elementPairs.get(separatorIndex)).finish((PeriodPrinter) rightComps[0], (PeriodParser) leftComps[1]);\n+        return new PeriodFormatter(printer, parser);\n+    } else {\n+        throw new IllegalStateException(\"Invalid element pair configuration\");\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IllegalStateException: Invalid element pair configuration",
    "test_result": "FAIL"
}