{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            double p = tmp2[0];\n            if (p != p) {\n                result[resultOffset] = Double.NaN;\n            } else {\n                result[resultOffset] = ((p <= 0) ? -FastMath.PI : FastMath.PI) - 2 * p; // +/-pi - 2 * atan(y / (r - x))\n            }\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        int adjust = 0;\n        if (x[xOffset] == 0) {\n            if (y[yOffset] == 0) {\n                result[resultOffset] = ((y[yOffset] < 0) ? -0.0 : (1/y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.copySign(0d, y[yOffset]) : +0.0);\n            } else if (y[yOffset] < 0) {\n                result[resultOffset] = -FastMath.PI;\n            } else if (y[yOffset] > 0) {\n                result[resultOffset] = +FastMath.PI;\n            } else {\n                // y is NaN\n                adjust = -1;\n            }\n        } else if ((y[yOffset] != y[yOffset]) || (x[xOffset] != x[xOffset])) { // NaNs\n            adjust = -1;\n        } else if (1/x[xOffset] == Double.POSITIVE_INFINITY) {\n            if (y[yOffset] == Double.POSITIVE_INFINITY) {\n                result[resultOffset] = FastMath.PI / 4;\n            } else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n                result[resultOffset] = 7 * FastMath.PI / 4;\n            } else if (y[yOffset] < 0) {\n                result[resultOffset] = -FastMath.PI / 2;\n            } else if (y[yOffset] > 0) {\n                result[resultOffset] = +FastMath.PI / 2;\n            } else {\n                // y is +0.0 or -0.0\n                result[resultOffset] = ((1 / y[yOffset] == Double.POSITIVE_INFINITY) ? FastMath.copySign(FastMath.PI/2, y[yOffset]) : FastMath.copySign(0d, y[yOffset]));\n            }\n        } else if (1/x[xOffset] == Double.NEGATIVE_INFINITY) {\n            if (y[yOffset] == Double.POSITIVE_INFINITY) {\n                result[resultOffset] = 3 * FastMath.PI / 4;\n            } else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n                result[resultOffset] = -3 * FastMath.PI / 4;\n            } else if (y[yOffset] < 0) {\n                result[resultOffset] = -FastMath.PI / 2;\n            } else if (y[yOffset] > 0) {\n                result[resultOffset] = +FastMath.PI / 2;\n            } else {\n                // y is +0.0 or -0.0\n                result[resultOffset] = ((1 / y[yOffset] == Double.NEGATIVE_INFINITY) ? FastMath.copySign(FastMath.PI/2, y[yOffset]) : FastMath.copySign(FastMath.PI, y[yOffset]));\n            }\n        }\n        if (adjust == -1) {\n            result[resultOffset] = Double.NaN;\n            Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), Double.NaN);\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..afe9ef518 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1407,8 +1407,12 @@ public class DSCompiler {\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+            double p = tmp2[0];\n+            if (p != p) {\n+                result[resultOffset] = Double.NaN;\n+            } else {\n+                result[resultOffset] = ((p <= 0) ? -FastMath.PI : FastMath.PI) - 2 * p; // +/-pi - 2 * atan(y / (r - x))\n+            }\n             for (int i = 1; i < tmp2.length; ++i) {\n                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n             }\n@@ -1416,6 +1420,51 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        int adjust = 0;\n+        if (x[xOffset] == 0) {\n+            if (y[yOffset] == 0) {\n+                result[resultOffset] = ((y[yOffset] < 0) ? -0.0 : (1/y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.copySign(0d, y[yOffset]) : +0.0);\n+            } else if (y[yOffset] < 0) {\n+                result[resultOffset] = -FastMath.PI;\n+            } else if (y[yOffset] > 0) {\n+                result[resultOffset] = +FastMath.PI;\n+            } else {\n+                // y is NaN\n+                adjust = -1;\n+            }\n+        } else if ((y[yOffset] != y[yOffset]) || (x[xOffset] != x[xOffset])) { // NaNs\n+            adjust = -1;\n+        } else if (1/x[xOffset] == Double.POSITIVE_INFINITY) {\n+            if (y[yOffset] == Double.POSITIVE_INFINITY) {\n+                result[resultOffset] = FastMath.PI / 4;\n+            } else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n+                result[resultOffset] = 7 * FastMath.PI / 4;\n+            } else if (y[yOffset] < 0) {\n+                result[resultOffset] = -FastMath.PI / 2;\n+            } else if (y[yOffset] > 0) {\n+                result[resultOffset] = +FastMath.PI / 2;\n+            } else {\n+                // y is +0.0 or -0.0\n+                result[resultOffset] = ((1 / y[yOffset] == Double.POSITIVE_INFINITY) ? FastMath.copySign(FastMath.PI/2, y[yOffset]) : FastMath.copySign(0d, y[yOffset]));\n+            }\n+        } else if (1/x[xOffset] == Double.NEGATIVE_INFINITY) {\n+            if (y[yOffset] == Double.POSITIVE_INFINITY) {\n+                result[resultOffset] = 3 * FastMath.PI / 4;\n+            } else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n+                result[resultOffset] = -3 * FastMath.PI / 4;\n+            } else if (y[yOffset] < 0) {\n+                result[resultOffset] = -FastMath.PI / 2;\n+            } else if (y[yOffset] > 0) {\n+                result[resultOffset] = +FastMath.PI / 2;\n+            } else {\n+                // y is +0.0 or -0.0\n+                result[resultOffset] = ((1 / y[yOffset] == Double.NEGATIVE_INFINITY) ? FastMath.copySign(FastMath.PI/2, y[yOffset]) : FastMath.copySign(FastMath.PI, y[yOffset]));\n+            }\n+        }\n+        if (adjust == -1) {\n+            result[resultOffset] = Double.NaN;\n+            Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), Double.NaN);\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}