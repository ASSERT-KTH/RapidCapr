{
    "patch": "  List<String> paramsToRemove = new ArrayList<>();\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer != null\n      && callSiteOptimizer.canModifyCallers(fnScope);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    int numArgsToRemove = 0;\n    for (Node arg : argList.children()) {\n      String argName = arg.getString();\n      if (fnScope.isFormalParameter(argName) && !referenced.contains(fnScope.getVar(argName))) {\n        paramsToRemove.add(argName);\n        numArgsToRemove++;\n      } else if (numArgsToRemove > 0) {\n        // If there are unused arguments before this one, we cannot remove\n        // this one. Doing so changes the ordinal position of the remaining\n        // arguments.\n        paramsToRemove.clear();\n        break;\n      }\n    }\n    for (String paramName : paramsToRemove) {\n      Node paramNode = getParamNode(paramName, argList);\n      Preconditions.checkState(paramNode.getParent() == argList);\n      argList.removeChild(paramNode);\n    }\n    if (!paramsToRemove.isEmpty()) {\n      compiler.reportCodeChange();\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a3965904 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  List<String> paramsToRemove = new ArrayList<>();\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer != null\n+      && callSiteOptimizer.canModifyCallers(fnScope);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    int numArgsToRemove = 0;\n+    for (Node arg : argList.children()) {\n+      String argName = arg.getString();\n+      if (fnScope.isFormalParameter(argName) && !referenced.contains(fnScope.getVar(argName))) {\n+        paramsToRemove.add(argName);\n+        numArgsToRemove++;\n+      } else if (numArgsToRemove > 0) {\n+        // If there are unused arguments before this one, we cannot remove\n+        // this one. Doing so changes the ordinal position of the remaining\n+        // arguments.\n+        paramsToRemove.clear();\n+        break;\n+      }\n+    }\n+    for (String paramName : paramsToRemove) {\n+      Node paramNode = getParamNode(paramName, argList);\n+      Preconditions.checkState(paramNode.getParent() == argList);\n+      argList.removeChild(paramNode);\n+    }\n+    if (!paramsToRemove.isEmpty()) {\n+      compiler.reportCodeChange();\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}