{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal); // initial offset at local time\n\n    long utc = instantLocal - initialOffset; // UTC time for local time\n    int currentOffset = getOffset(utc); // current offset at UTC time\n\n    if (initialOffset == currentOffset) {\n        return currentOffset;\n    }\n\n    long nextLocalTransition = nextTransition(instantLocal); // next local transition\n    long nextUTCTransition = nextTransition(utc); // next UTC transition\n\n    if (nextLocalTransition == nextUTCTransition) {\n        int offsetAtTransition = getOffset(nextUTCTransition);\n        if (offsetAtTransition == currentOffset) {\n            return currentOffset;\n        }\n    }\n\n    long prevLocalTransition = previousTransition(instantLocal);\n    long prevUTCTransition = previousTransition(utc);\n\n    if (prevLocalTransition == prevUTCTransition) {\n        int offsetAtTransition = getOffset(prevUTCTransition);\n        if (offsetAtTransition == initialOffset) {\n            return initialOffset;\n        }\n    }\n\n    if (initialOffset < currentOffset) {\n        long prevLocalTransitionForOffset = previousTransition(instantLocal - initialOffset);\n        if (prevLocalTransitionForOffset == prevLocalTransition) {\n            return initialOffset;\n        }\n    }\n\n    if (initialOffset > currentOffset) {\n        long nextLocalTransitionForOffset = nextTransition(instantLocal - currentOffset);\n        if (nextLocalTransitionForOffset == nextLocalTransition) {\n            return currentOffset;\n        }\n    }\n\n    return currentOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..27157bf5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,53 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal); // initial offset at local time\n+\n+    long utc = instantLocal - initialOffset; // UTC time for local time\n+    int currentOffset = getOffset(utc); // current offset at UTC time\n+\n+    if (initialOffset == currentOffset) {\n+        return currentOffset;\n+    }\n+\n+    long nextLocalTransition = nextTransition(instantLocal); // next local transition\n+    long nextUTCTransition = nextTransition(utc); // next UTC transition\n+\n+    if (nextLocalTransition == nextUTCTransition) {\n+        int offsetAtTransition = getOffset(nextUTCTransition);\n+        if (offsetAtTransition == currentOffset) {\n+            return currentOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    long prevLocalTransition = previousTransition(instantLocal);\n+    long prevUTCTransition = previousTransition(utc);\n+\n+    if (prevLocalTransition == prevUTCTransition) {\n+        int offsetAtTransition = getOffset(prevUTCTransition);\n+        if (offsetAtTransition == initialOffset) {\n+            return initialOffset;\n+        }\n+    }\n+\n+    if (initialOffset < currentOffset) {\n+        long prevLocalTransitionForOffset = previousTransition(instantLocal - initialOffset);\n+        if (prevLocalTransitionForOffset == prevLocalTransition) {\n+            return initialOffset;\n+        }\n+    }\n+\n+    if (initialOffset > currentOffset) {\n+        long nextLocalTransitionForOffset = nextTransition(instantLocal - currentOffset);\n+        if (nextLocalTransitionForOffset == nextLocalTransition) {\n+            return currentOffset;\n+        }\n+    }\n+\n+    return currentOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-11T01:00:00.000-05:00 expected:<2007-03-11T0[3:00:00.000-04]:00> but was:<2007-03-11T0[1:00:00.000-05]:00>",
    "test_result": "FAIL"
}