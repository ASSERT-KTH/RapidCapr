{
    "patch": "final double norm = direction.getNorm();\nfinal Vector3D newOrigin;\nif (Double.compare(norm, 0.0) == 0) {\n    newOrigin = zero;\n} else {\n    newOrigin = zero.add(direction.normalize().scalarMultiply(-1));\n}\nfinal Vector3D revertedDirection = direction.negate().normalize();\nfinal Line reverted = new Line(newOrigin, revertedDirection);\nreturn reverted;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..02df5ee94 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final double norm = direction.getNorm();\n+final Vector3D newOrigin;\n+if (Double.compare(norm, 0.0) == 0) {\n+    newOrigin = zero;\n+} else {\n+    newOrigin = zero.add(direction.normalize().scalarMultiply(-1));\n+}\n+final Vector3D revertedDirection = direction.negate().normalize();\n+final Line reverted = new Line(newOrigin, revertedDirection);\n+return reverted;\n         return reverted;\n     }\n ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}