{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    List<Object> list = new ArrayList<>();\n    for (Object obj : elementPairs) {\n        if (obj instanceof Separator) {\n            if (!list.isEmpty()) {\n                PeriodFormatter f = toFormatter(list, notPrinter, notParser);\n                Separator sep = ((Separator) obj).finish(f.getPrinter(), f.getParser());\n                return new PeriodFormatter(sep, sep);\n            }\n        } else {\n            list.add(obj);\n        }\n    }\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, createComposite(elementPairs)[1]);\n    } else if (notParser) {\n        return new PeriodFormatter(createComposite(elementPairs)[0], null);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c895f883 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,34 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    List<Object> list = new ArrayList<>();\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof Separator) {\n+            if (!list.isEmpty()) {\n+                PeriodFormatter f = toFormatter(list, notPrinter, notParser);\n+                Separator sep = ((Separator) obj).finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            list.add(obj);\n         }\n     }\n \n+    if (notPrinter) {\n+        return new PeriodFormatter(null, createComposite(elementPairs)[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter(createComposite(elementPairs)[0], null);\n+    } else {\n+        Object[] comp = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}