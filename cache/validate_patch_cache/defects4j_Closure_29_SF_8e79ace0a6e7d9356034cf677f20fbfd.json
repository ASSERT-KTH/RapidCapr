{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (int i = 0; i < refs.size(); i++) {\n    Reference refI = refs.get(i);\n    Node nameI = refI.getNode();\n    Node parentI = refI.getParent();\n    Node grampsI = refI.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    //\n    if (parentI.isGetProp()) {\n      Preconditions.checkState(parentI.getFirstChild() == nameI);\n      // A call target maybe using the object as a 'this' value.\n      if (grampsI.isCall() && grampsI.getFirstChild() == parentI) {\n        continue;\n      }\n\n      // NOTE(nicksantos): This pass's object-splitting algorithm has\n      // a blind spot. It assumes that if a property isn't defined on an\n      // object, then the value is undefined. This is not true, because\n      // Object.prototype can have arbitrary properties on it.\n      //\n      // We short-circuit this problem by bailing out if we see a reference\n      // to a property that isn't defined on the object literal. This\n      // isn't a perfect algorithm, but it should catch most cases.\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(nameI)) {\n      continue;\n    }\n\n    Node valI = refI.getAssignedValue();\n    if (valI == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!valI.isObjectLit()) {\n      continue;\n    }\n\n    // Check if the referenced object literal is referenced by another value.\n    // This can happen just before the object literal assignment or in parent\n    // expressions. Eg: a = {a: true}; b = a.a || false;\n    for (Reference refCheck : refs) {\n      if (refCheck == refI) {\n        continue;\n      }\n      Node nodeCheck = refCheck.getNode();\n      Node parentCheck = refCheck.getParent();\n      Node grampsCheck = refCheck.getGrandparent();\n\n      if (parentCheck != null && parentCheck.isOr() && parentCheck.getFirstChild() == nodeCheck) {\n        Node grandParentCheck = parentCheck.getParent();\n        if (grandParentCheck.isAssign() && grandParentCheck.getFirstChild() == parentCheck &&\n          grandParentCheck.getLastChild().isObjectLit() && grandParentCheck.getLastChild().isEquivalentTo(valI)) {\n          continue;\n        }\n      }\n\n      if (parentCheck != null && parentCheck.isObjectLit() && parentCheck.isEquivalentTo(valI)) {\n        continue;\n      }\n\n      if (grampsCheck != null && grampsCheck.isAssign() && grampsCheck.getFirstChild() == parentCheck\n          && grampsCheck.getLastChild().isObjectLit() && grampsCheck.getLastChild().isEquivalentTo(valI)) {\n        continue;\n      }\n\n      if (parentCheck != null && parentCheck.isGetProp()\n          && parentCheck.getFirstChild().isEquivalentTo(valI)\n          && (grampsCheck == null || !grampsCheck.isCall() || grampsCheck.getFirstChild() != parentCheck)) {\n        continue;\n      }\n\n      return false;\n    }\n\n    // Make sure that the value is not self-refential. IOW,\n    // disallow things like x = {b: x.a}.\n    //\n    // TODO: Only exclude unorderable self-referential\n    // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n    // but x = {a: 1, b: x.a} is.\n    //\n    // Also, ES5 getters/setters aren't handled by this pass.\n    for (Node child = valI.getFirstChild(); child != null;\n        child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES5 get/set not supported.\n        return false;\n      }\n\n      Node childVal = child.getFirstChild();\n      // Check if childVal is the parent of any of the passed in\n      // references, as that is how self-referential assignments\n      // will happen.\n      for (Reference refJ : refs) {\n        Node nodeJ = refJ.getNode();\n        if (nodeJ == childVal || nodeJ.isEquivalentTo(childVal)) {\n          return false;\n        }\n      }\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..af60173f 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,122 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (int i = 0; i < refs.size(); i++) {\n+    Reference refI = refs.get(i);\n+    Node nameI = refI.getNode();\n+    Node parentI = refI.getParent();\n+    Node grampsI = refI.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    //\n+    if (parentI.isGetProp()) {\n+      Preconditions.checkState(parentI.getFirstChild() == nameI);\n+      // A call target maybe using the object as a 'this' value.\n+      if (grampsI.isCall() && grampsI.getFirstChild() == parentI) {\n+        continue;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+      // NOTE(nicksantos): This pass's object-splitting algorithm has\n+      // a blind spot. It assumes that if a property isn't defined on an\n+      // object, then the value is undefined. This is not true, because\n+      // Object.prototype can have arbitrary properties on it.\n+      //\n+      // We short-circuit this problem by bailing out if we see a reference\n+      // to a property that isn't defined on the object literal. This\n+      // isn't a perfect algorithm, but it should catch most cases.\n+      continue;\n+    }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(nameI)) {\n+      continue;\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n+    Node valI = refI.getAssignedValue();\n+    if (valI == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n+\n+    // We're looking for object literal assignments only.\n+    if (!valI.isObjectLit()) {\n+      continue;\n+    }\n+\n+    // Check if the referenced object literal is referenced by another value.\n+    // This can happen just before the object literal assignment or in parent\n+    // expressions. Eg: a = {a: true}; b = a.a || false;\n+    for (Reference refCheck : refs) {\n+      if (refCheck == refI) {\n+        continue;\n+      }\n+      Node nodeCheck = refCheck.getNode();\n+      Node parentCheck = refCheck.getParent();\n+      Node grampsCheck = refCheck.getGrandparent();\n+\n+      if (parentCheck != null && parentCheck.isOr() && parentCheck.getFirstChild() == nodeCheck) {\n+        Node grandParentCheck = parentCheck.getParent();\n+        if (grandParentCheck.isAssign() && grandParentCheck.getFirstChild() == parentCheck &&\n+          grandParentCheck.getLastChild().isObjectLit() && grandParentCheck.getLastChild().isEquivalentTo(valI)) {\n           continue;\n         }\n+      }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+      if (parentCheck != null && parentCheck.isObjectLit() && parentCheck.isEquivalentTo(valI)) {\n+        continue;\n+      }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+      if (grampsCheck != null && grampsCheck.isAssign() && grampsCheck.getFirstChild() == parentCheck\n+          && grampsCheck.getLastChild().isObjectLit() && grampsCheck.getLastChild().isEquivalentTo(valI)) {\n+        continue;\n+      }\n \n+      if (parentCheck != null && parentCheck.isGetProp()\n+          && parentCheck.getFirstChild().isEquivalentTo(valI)\n+          && (grampsCheck == null || !grampsCheck.isCall() || grampsCheck.getFirstChild() != parentCheck)) {\n+        continue;\n+      }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+      return false;\n+    }\n \n+    // Make sure that the value is not self-refential. IOW,\n+    // disallow things like x = {b: x.a}.\n+    //\n+    // TODO: Only exclude unorderable self-referential\n+    // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+    // but x = {a: 1, b: x.a} is.\n+    //\n+    // Also, ES5 getters/setters aren't handled by this pass.\n+    for (Node child = valI.getFirstChild(); child != null;\n+        child = child.getNext()) {\n+      if (child.isGetterDef() || child.isSetterDef()) {\n+        // ES5 get/set not supported.\n+        return false;\n+      }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+      Node childVal = child.getFirstChild();\n+      // Check if childVal is the parent of any of the passed in\n+      // references, as that is how self-referential assignments\n+      // will happen.\n+      for (Reference refJ : refs) {\n+        Node nodeJ = refJ.getNode();\n+        if (nodeJ == childVal || nodeJ.isEquivalentTo(childVal)) {\n+          return false;\n+        }\n       }\n-      return ret;\n     }\n \n+    // We have found an acceptable object literal assignment. As\n+    // long as there are no other assignments that mess things up,\n+    // we can inline.\n+    return true;\n+  }\n+  return false;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}