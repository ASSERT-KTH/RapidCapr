{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  ObjectType objType = constructorType != null ? constructorType.restrictByNotNullOrUndefined().autobox().toObjectType() : null;\n  if (objType != null) {\n      // constructor is an object type\n      type = objType;\n  } else if (constructorType instanceof FunctionType){\n      FunctionType ct = (FunctionType) constructorType;\n      if (ct.isConstructor()) {\n          // constructor is a constructor function\n          type = ct.getInstanceType();\n      } else {\n          // constructor is a non-constructor function\n          type = ct;\n      }\n  } else {\n      // constructor is not an object type nor a function\n      type = constructorType;\n  }\n  if (type != null) {\n      n.setJSType(type);\n  }\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..db2707e3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,36 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  ObjectType objType = constructorType != null ? constructorType.restrictByNotNullOrUndefined().autobox().toObjectType() : null;\n+  if (objType != null) {\n+      // constructor is an object type\n+      type = objType;\n+  } else if (constructorType instanceof FunctionType){\n+      FunctionType ct = (FunctionType) constructorType;\n+      if (ct.isConstructor()) {\n+          // constructor is a constructor function\n           type = ct.getInstanceType();\n-        }\n+      } else {\n+          // constructor is a non-constructor function\n+          type = ct;\n       }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+  } else {\n+      // constructor is not an object type nor a function\n+      type = constructorType;\n+  }\n+  if (type != null) {\n+      n.setJSType(type);\n+  }\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_MISMATCH. inconsistent return type",
    "test_result": "FAIL"
}