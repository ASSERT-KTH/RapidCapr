{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Check if there is anything after &#\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            isHex = true;\n            start++;\n        }\n\n        // Check if there is at least one digit after &# or &#x\n        if (start >= seqEnd || !Character.isDigit(input.charAt(start)) && (!isHex || Character.digit(input.charAt(start), 16) == -1)) {\n            return 0;\n        }\n\n        int end = start + 1;\n        // Find the end of the number\n        while (end < seqEnd && (Character.isDigit(input.charAt(end)) || (isHex && Character.digit(input.charAt(end), 16) != -1))) {\n            end++;\n        }\n\n        // Check if entity was unfinished\n        if (end == seqEnd || (input.charAt(end) != ';' && (end == seqEnd - 1 || !Character.isLetterOrDigit(input.charAt(end))))){\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString());\n            }\n        } catch (NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs, 0, chrs.length);\n        } else if (entityValue == 34) {\n            out.write(\"&quot;\");\n        } else if (entityValue == 60){\n            out.write(\"&lt;\");\n        }else if (entityValue == 62) {\n            out.write(\"&gt;\");\n        } else if (entityValue == 38) {\n            out.write(\"&amp;\");\n        }else {\n            out.write(entityValue);\n        }\n\n        // Return the number of characters consumed\n        return end - index + 1;\n\n    }\n    // Return 0 if there was no entity\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..b52bdc76 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,66 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    // Check if there is anything after &#\n+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            isHex = true;\n+            start++;\n+        }\n \n-                // Check there's more than just an x after the &#\n-            }\n+        // Check if there is at least one digit after &# or &#x\n+        if (start >= seqEnd || !Character.isDigit(input.charAt(start)) && (!isHex || Character.digit(input.charAt(start), 16) == -1)) {\n+            return 0;\n+        }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+        int end = start + 1;\n+        // Find the end of the number\n+        while (end < seqEnd && (Character.isDigit(input.charAt(end)) || (isHex && Character.digit(input.charAt(end), 16) != -1))) {\n+            end++;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        // Check if entity was unfinished\n+        if (end == seqEnd || (input.charAt(end) != ';' && (end == seqEnd - 1 || !Character.isLetterOrDigit(input.charAt(end))))){\n+            return 0;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+        try {\n+            if (isHex) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString());\n             }\n+        } catch (NumberFormatException nfe) {\n+            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            return 0;\n+        }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs, 0, chrs.length);\n+        } else if (entityValue == 34) {\n+            out.write(\"&quot;\");\n+        } else if (entityValue == 60){\n+            out.write(\"&lt;\");\n+        }else if (entityValue == 62) {\n+            out.write(\"&gt;\");\n+        } else if (entityValue == 38) {\n+            out.write(\"&amp;\");\n+        }else {\n+            out.write(entityValue);\n         }\n-        return 0;\n+\n+        // Return the number of characters consumed\n+        return end - index + 1;\n+\n     }\n+    // Return 0 if there was no entity\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 33 expected:<![\"]> but was:<![&quot;]>",
    "test_result": "FAIL"
}