{
    "patch": "                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n                if (i == 0 && savedFields[i].getFieldType() == DateTimeFieldType.weekyear() && savedFields[i].getDurationField().getUnitMillis() < DateTimeConstants.MILLIS_PER_DAY) {\n                    // dayOfWeek follows weekyear or week, so day must be adjusted\n                    int year = iChrono.weekyear().roundFloor(millis);\n                    int woy = iChrono.weekOfWeekyear().get(millis, year);\n                    if (woy == 1) {\n                        // Selects the highest leap week (woy=1) of the previous year between weeks 1-7\n                        year--;\n                        woy = iChrono.weeksInYear(year);\n                        millis = iChrono.weekyear().set(millis, year);\n                        millis = iChrono.weekOfWeekyear().set(millis, woy);\n                        millis = iChrono.dayOfWeek().set(millis, 1);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..10ea6c93 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+                if (i == 0 && savedFields[i].getFieldType() == DateTimeFieldType.weekyear() && savedFields[i].getDurationField().getUnitMillis() < DateTimeConstants.MILLIS_PER_DAY) {\n+                    // dayOfWeek follows weekyear or week, so day must be adjusted\n+                    int year = iChrono.weekyear().roundFloor(millis);\n+                    int woy = iChrono.weekOfWeekyear().get(millis, year);\n+                    if (woy == 1) {\n+                        // Selects the highest leap week (woy=1) of the previous year between weeks 1-7\n+                        year--;\n+                        woy = iChrono.weeksInYear(year);\n+                        millis = iChrono.weekyear().set(millis, year);\n+                        millis = iChrono.weekOfWeekyear().set(millis, woy);\n+                        millis = iChrono.dayOfWeek().set(millis, 1);\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}