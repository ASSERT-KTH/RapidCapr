{
    "patch": "      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node parent = n.getParent();\n        if(parent == null) {\n          report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n          return;\n        }\n        if (parent.isCall() || (parent.isNew() && parent.getParent().isCall())) {\n          report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n          return;\n        }\n        Node left = parent.getFirstChild();\n        if (left == n) {\n          report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n          return;\n        }\n        JSType objectType = getJSType(left).restrictByNotNullOrUndefined();\n        if (!objectType.isSubtypeOf(thisType)) {\n          report(t, n, FUNCTION_CALL_BAD_THIS, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ef8ea1f4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node parent = n.getParent();\n+        if(parent == null) {\n+          report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n+          return;\n+        }\n+        if (parent.isCall() || (parent.isNew() && parent.getParent().isCall())) {\n+          report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n+          return;\n+        }\n+        Node left = parent.getFirstChild();\n+        if (left == n) {\n+          report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n+          return;\n+        }\n+        JSType objectType = getJSType(left).restrictByNotNullOrUndefined();\n+        if (!objectType.isSubtypeOf(thisType)) {\n+          report(t, n, FUNCTION_CALL_BAD_THIS, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}