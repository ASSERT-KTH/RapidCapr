{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() &&\n           parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n        parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n      return; // return if argument count is wrong\n    }\n    // if there are more arguments than parameters, but the function allows\n    // it (via varargs \"...\" parameter), we need to ensure that only the last\n    // parameter is of variable length.\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!parameter.isVarArgs()) {\n            validator.expectArgumentMatchesParameter(t, arguments.next(),\n              JSCompiler.getUnknownType(), getJSType(parameter), call, ordinal++);\n        } else {\n            while (arguments.hasNext()) {\n                validator.expectArgumentMatchesParameter(t, arguments.next(),\n                  JSCompiler.getUnknownType(), getJSType(parameter), call, ordinal++);\n            }\n        }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..f6cbd666 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1426,6 +1426,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      return; // return if argument count is wrong\n+    }\n+    // if there are more arguments than parameters, but the function allows\n+    // it (via varargs \"...\" parameter), we need to ensure that only the last\n+    // parameter is of variable length.\n+    while (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        if (!parameter.isVarArgs()) {\n+            validator.expectArgumentMatchesParameter(t, arguments.next(),\n+              JSCompiler.getUnknownType(), getJSType(parameter), call, ordinal++);\n+        } else {\n+            while (arguments.hasNext()) {\n+                validator.expectArgumentMatchesParameter(t, arguments.next(),\n+                  JSCompiler.getUnknownType(), getJSType(parameter), call, ordinal++);\n+            }\n+        }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}