{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          Node rn = n.getFirstChild();\n          if (rn.getType() == Token.ASSIGN) {\n            defineAssign(rn);\n          } else {\n            defineExpr(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b11b2381 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1456,6 +1456,14 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.EXPR_RESULT:\n+          Node rn = n.getFirstChild();\n+          if (rn.getType() == Token.ASSIGN) {\n+            defineAssign(rn);\n+          } else {\n+            defineExpr(n, parent);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}