{
    "patch": "    private void readTypeVariables() {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            if (actualTypeArgument instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n                Type[] typeArguments = parameterizedType.getActualTypeArguments();\n                for (Type typeArgument : typeArguments) {\n                    if (typeArgument instanceof TypeVariable) {\n                        readTypeVariables((TypeVariable<?>) typeArgument);\n                    }\n                }\n            }\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n        for (Type bound : typeVariable.getBounds()) {\n            registerTypeVariablesOn(bound);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d7b69fa4f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+    private void readTypeVariables() {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            if (actualTypeArgument instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n+                Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+                for (Type typeArgument : typeArguments) {\n+                    if (typeArgument instanceof TypeVariable) {\n+                        readTypeVariables((TypeVariable<?>) typeArgument);\n+                    }\n+                }\n+            }\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+        for (Type bound : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}