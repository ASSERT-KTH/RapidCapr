{
    "patch": "public static int countChars(String str, char ch) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        if(str.charAt(i) == ch) {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static double getTypedPercent(String js) {\n    double totalChars = countChars(js, ';') + countChars(js, ':');\n    double typedChars = countChars(js, ':');\n    return (typedChars / totalChars) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..cf718a09 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static int countChars(String str, char ch) {\n+    int count = 0;\n+    for(int i = 0; i < str.length(); i++) {\n+        if(str.charAt(i) == ch) {\n+            count++;\n+        }\n+    }\n+    return count;\n+}\n+\n+public static double getTypedPercent(String js) {\n+    double totalChars = countChars(js, ';') + countChars(js, ':');\n+    double typedChars = countChars(js, ':');\n+    return (typedChars / totalChars) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}