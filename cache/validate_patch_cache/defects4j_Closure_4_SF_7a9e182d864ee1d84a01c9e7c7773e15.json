{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n  // If the type isn't resolved via registry, try to resolve it via properties.\n  if (!resolvedViaRegistry) {\n    resolveViaProperties(t, enclosing);\n  }\n\n  // Check for implicit prototype cycles and handle them if detected.\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n\n    // If the type isn't resolved yet, try to resolve it via properties again.\n    if (!isResolved()) {\n      resolveViaProperties(t, enclosing);\n    }\n  }\n\n  // If the type is resolved, finish resolving it and return the referenced type.\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // Otherwise, return this.\n  return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..3eaaee6e 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,35 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n \n+  // If the type isn't resolved via registry, try to resolve it via properties.\n+  if (!resolvedViaRegistry) {\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+  }\n+\n+  // Check for implicit prototype cycles and handle them if detected.\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+\n+    // If the type isn't resolved yet, try to resolve it via properties again.\n+    if (!isResolved()) {\n+      resolveViaProperties(t, enclosing);\n     }\n+  }\n \n+  // If the type is resolved, finish resolving it and return the referenced type.\n+  if (isResolved()) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n+  // Otherwise, return this.\n+  return this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>",
    "test_result": "FAIL"
}