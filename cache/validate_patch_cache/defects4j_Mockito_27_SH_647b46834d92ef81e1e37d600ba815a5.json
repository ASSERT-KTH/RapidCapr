{
    "patch": "    private <T> MockSettingsImpl getMockSettings(MockHandlerInterface<T> mockHandler) {\n        InvocationContainer invocationContainer = (InvocationContainer) getFieldValue(mockHandler, \"ivc\");\n        MockCreationSettings<T> mockCreationSettings = (MockCreationSettings<T>) getFieldValue(invocationContainer, \"mockSettings\");\n        return (MockSettingsImpl) mockCreationSettings;\n    }\n\n    private Object getFieldValue(Object instance, String fieldName) {\n        try {\n            Field field = instance.getClass().getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field.get(instance);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..5b59204ef 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    private <T> MockSettingsImpl getMockSettings(MockHandlerInterface<T> mockHandler) {\n+        InvocationContainer invocationContainer = (InvocationContainer) getFieldValue(mockHandler, \"ivc\");\n+        MockCreationSettings<T> mockCreationSettings = (MockCreationSettings<T>) getFieldValue(invocationContainer, \"mockSettings\");\n+        return (MockSettingsImpl) mockCreationSettings;\n+    }\n+\n+    private Object getFieldValue(Object instance, String fieldName) {\n+        try {\n+            Field field = instance.getClass().getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            return field.get(instance);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}