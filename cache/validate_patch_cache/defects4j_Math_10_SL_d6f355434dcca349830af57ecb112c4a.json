{
    "patch": "    private double evaluateSpecialCases(final double[] y, final int yOffset,\n                                         final double[] x, final int xOffset) {\n        double absY = FastMath.abs(y[yOffset]);\n        double absX = FastMath.abs(x[xOffset]);\n\n        if (absY <= PRECISION && absX <= PRECISION) {\n            return 0.0; // atan2(\u00b10,\u00b10) case\n        } else if (y[yOffset] >= 0 && absX <= PRECISION) {\n            return 0.0; // atan2(\u00b1y,0) case\n        } else if (y[yOffset] < 0 && absX <= PRECISION) {\n            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.PI : FastMath.PI; // atan2(\u00b10,\u22120) case\n        } else if (absY == Double.POSITIVE_INFINITY && absX == Double.POSITIVE_INFINITY) {\n            return Double.NaN; // atan2(\u00b1\u221e,\u00b1\u221e) case\n        } else if (absY == Double.NEGATIVE_INFINITY && absX == Double.POSITIVE_INFINITY) {\n            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.PI / 4.0 : FastMath.PI / 4.0; // atan2(\u2212\u221e,\u221e) case\n        } else if (absY == Double.POSITIVE_INFINITY && absX == Double.NEGATIVE_INFINITY) {\n            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -3.0 * FastMath.PI / 4.0 : 3.0 * FastMath.PI / 4.0; // atan2(\u221e,\u2212\u221e) case\n        } else if (absY == Double.NEGATIVE_INFINITY && absX == Double.NEGATIVE_INFINITY) {\n            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.PI / 4.0 : FastMath.PI / 4.0; // atan2(\u2212\u221e,\u2212\u221e) case\n        } else if (absY == Double.POSITIVE_INFINITY && x[xOffset] == 0) {\n            return (y[yOffset] == Double.POSITIVE_INFINITY) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0; // atan2(\u00b1\u221e,0) case\n        } else if (y[yOffset] == 0 && x[xOffset] > 0) {\n            return 0.0; // atan2(0,+x) case\n        } else if (y[yOffset] == 0 && x[xOffset] < 0) {\n            return (x[xOffset] == Double.NEGATIVE_INFINITY) ? FastMath.PI : -FastMath.PI; // atan2(\u00b10,\u2212x) case\n        } else if (y[yOffset] > 0) {\n            return FastMath.PI / 2.0; // atan2(+y,\u00b1\u221e) case\n        } else {\n            return -FastMath.PI / 2.0; // atan2(\u2212y,\u00b1\u221e) case",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..e7dd51b15 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,35 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+    private double evaluateSpecialCases(final double[] y, final int yOffset,\n+                                         final double[] x, final int xOffset) {\n+        double absY = FastMath.abs(y[yOffset]);\n+        double absX = FastMath.abs(x[xOffset]);\n+\n+        if (absY <= PRECISION && absX <= PRECISION) {\n+            return 0.0; // atan2(\u00b10,\u00b10) case\n+        } else if (y[yOffset] >= 0 && absX <= PRECISION) {\n+            return 0.0; // atan2(\u00b1y,0) case\n+        } else if (y[yOffset] < 0 && absX <= PRECISION) {\n+            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.PI : FastMath.PI; // atan2(\u00b10,\u22120) case\n+        } else if (absY == Double.POSITIVE_INFINITY && absX == Double.POSITIVE_INFINITY) {\n+            return Double.NaN; // atan2(\u00b1\u221e,\u00b1\u221e) case\n+        } else if (absY == Double.NEGATIVE_INFINITY && absX == Double.POSITIVE_INFINITY) {\n+            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.PI / 4.0 : FastMath.PI / 4.0; // atan2(\u2212\u221e,\u221e) case\n+        } else if (absY == Double.POSITIVE_INFINITY && absX == Double.NEGATIVE_INFINITY) {\n+            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -3.0 * FastMath.PI / 4.0 : 3.0 * FastMath.PI / 4.0; // atan2(\u221e,\u2212\u221e) case\n+        } else if (absY == Double.NEGATIVE_INFINITY && absX == Double.NEGATIVE_INFINITY) {\n+            return (y[yOffset] == Double.NEGATIVE_INFINITY) ? -FastMath.PI / 4.0 : FastMath.PI / 4.0; // atan2(\u2212\u221e,\u2212\u221e) case\n+        } else if (absY == Double.POSITIVE_INFINITY && x[xOffset] == 0) {\n+            return (y[yOffset] == Double.POSITIVE_INFINITY) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0; // atan2(\u00b1\u221e,0) case\n+        } else if (y[yOffset] == 0 && x[xOffset] > 0) {\n+            return 0.0; // atan2(0,+x) case\n+        } else if (y[yOffset] == 0 && x[xOffset] < 0) {\n+            return (x[xOffset] == Double.NEGATIVE_INFINITY) ? FastMath.PI : -FastMath.PI; // atan2(\u00b10,\u2212x) case\n+        } else if (y[yOffset] > 0) {\n+            return FastMath.PI / 2.0; // atan2(+y,\u00b1\u221e) case\n+        } else {\n+            return -FastMath.PI / 2.0; // atan2(\u2212y,\u00b1\u221e) case\n \n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}