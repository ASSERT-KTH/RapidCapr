{
    "patch": "public void doEvents(final double tMin, final double tMax,\n        final double maxCheckInterval, final Collection<EventState> events, final EventHandler<ActionEvent> handler) {\n    final List<EventState> eventsStates = new ArrayList<EventState>(events);\n    Collections.sort(eventsStates, getEventTimeComparator());\n    double t0 = Double.NaN;\n    while (true) {\n        // initialize the events states\n        for (final EventState state : eventsStates) {\n            state.reinitializeBegin(getPrimaryMapper());\n        }\n        List<EventState> occuringEvents = new ArrayList<>();\n        for (final EventState state : eventsStates) {\n            final double t = state.evaluateStep(getPrimaryMapper());\n            if (t >= tMin && t <= tMax) {\n                occuringEvents.add(state);\n            }\n        }\n        clearOccurredEvents(occuringEvents, getPrimaryMapper());\n        if (occuringEvents.isEmpty()) {\n            // no event was triggered\n            if (Double.isNaN(t0)) {\n                setStepSize(Math.min(getStepSize(), maxCheckInterval));\n            } else {\n                setStepStart(t0);\n                setStepSize(Math.min(getStepSize(), Math.abs(tMax - t0)));\n            }\n            try {\n                getStepSizeHandler().handleStep(getEquations(), forward,\n                        1.0, getPrimaryMapper(), getSecondaryMapper(),\n                        getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n                        getInterpolatedSecondaryState(), getInterpolatedSecondaryDerivatives(),\n                        new DummyStepInterpolator(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n                                true, getStateVectorSized(), getPrimaryMapper().getOrder(),\n                                getPrimaryMapper().getOrder() + 1));\n\n                if (isLastStep()) {\n                    return;\n                }\n                final double nextT0 = getPrimaryMapper().getCurrentTime();\n                if (Math.abs(nextT0 - tMax) <= 1.0e-10 * Math.abs(tMax)) {\n                    setStepStart(t0);\n                    setStepSize(Math.abs(tMax - t0));\n                } else {\n                    t0 = nextT0;\n                }\n            } catch (final ExceptionWrapper ew) {\n                ew.printStackTrace(System.err);\n                if (ew.getException() instanceof RuntimeException) {\n                    throw (RuntimeException) ew.getException();\n                }\n                throw new RuntimeException(ew.getException());\n            }\n        } else {\n            // handle the chronologically first event\n            final Iterator<EventState> iterator = occuringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n            if (Double.isNaN(currentEvent.getEventTime())) {\n                // this is a bisection update\n                for (final EventState state : eventsStates) {\n                    state.stepAccepted(getPrimaryMapper().getCurrentTime(), getPrimaryMapper().getInterpolatedState());\n                    if (state != currentEvent) {\n                        state.reinitialize(getPrimaryMapper());\n                    }\n                }\n            }\n            // restrict the interpolator to the first part of the step, up to the event\n            final double eventT = currentEvent.getEventTime();\n            setStepSize(Math.abs(eventT - getPrimaryMapper().getCurrentTime()));\n            getStepStart();\n            try {\n                getStepSizeHandler().handleStep(getEquations(), forward,\n                        1.0, getPrimaryMapper(), getSecondaryMapper(),\n                        eventT, getInterpolatedState(), getInterpolatedDerivatives(),\n                        getInterpolatedSecondaryState(), getInterpolatedSecondaryDerivatives(),\n                        new DummyStepInterpolator(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n                                true, getStateVectorSized(), getPrimaryMapper().getOrder(),\n                                getPrimaryMapper().getOrder() + 1));\n            } catch (final ExceptionWrapper ew) {\n                ew.printStackTrace(System.err);\n                if (ew.getException() instanceof RuntimeException) {\n                    throw (RuntimeException) ew.getException();\n                }\n                throw new RuntimeException(ew.getException());\n            } finally {\n                getInterpolationArray().fill(0.0);\n            }\n            getPrimaryMapper().setSoftPreviousTime(getStepStart() - t0);\n            getPrimaryMapper().setSoftCurrentTime(eventT - t0);\n            // handle the event\n            ActionEvent evt = currentEvent.getAction(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(), getPrimaryMapper().isForward());\n            boolean stop = evt == EventHandler.Action.STOP;\n            if (!stop) {\n                double hNew = getStepSizeHandler().\n                                initializeStep(getEquations(), forward,\n                                              1.0, evt.getTDouble(), getInterpolatedState(),\n                                              getInterpolatedDerivatives(), getInterpolatedSecondaryState(),\n                                              getInterpolatedSecondaryDerivatives());\n                if (Math.abs(hNew) <= 0.01 * Math.max(Math.abs(getStepSize()), Math.abs(evt.getTDouble()))) {\n                    hNew = 0.01 * getStepSize();\n                }\n                setStepSize(Math.abs(hNew));\n            }\n            // handle the remaining part of the step, after the event\n            final double stopTime = eventT + (isLastStep() ? 0.0 : Math.max(0.001, getStepSize()));\n            t0 = eventT;\n            while (getStepStart() < stopTime) {\n                if (stop) {\n                    setStepSize(stopTime - getStepStart());\n                }\n                try {\n                    getStepSizeHandler().handleStep(getEquations(), forward,\n                            1.0, getPrimaryMapper(), getSecondaryMapper(),\n                            stopTime, getInterpolatedState(), getInterpolatedDerivatives(),\n                            getInterpolatedSecondaryState(), getInterpolatedSecondaryDerivatives(),\n                            new DummyStepInterpolator(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n                                    true, getStateVectorSized(), getPrimaryMapper().getOrder(),\n                                    getPrimaryMapper().getOrder() + 1));\n                } catch (final ExceptionWrapper ew) {\n                    ew.printStackTrace(System.err);\n                    if (ew.getException() instanceof RuntimeException) {\n                        throw (RuntimeException) ew.getException();\n                    }\n                    throw new RuntimeException(ew.getException());\n                } finally {\n                    getInterpolationArray().fill(0.0);\n                }\n                evt = currentEvent.getAction(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(), getPrimaryMapper().isForward());\n                if (evt == EventHandler.Action.STOP) {\n                    stop = true;\n                }\n                if (stop) {\n                    setStepSize(stopTime - getStepStart());\n                } else {\n                    double hNew = getStepSizeHandler().\n                            initializeStep(getEquations(), forward,\n                                    1.0, evt.getTDouble(), getInterpolatedState(),\n                                    getInterpolatedDerivatives(), getInterpolatedSecondaryState(),\n                                    getInterpolatedSecondaryDerivatives());\n                    if (Math.abs(hNew) <= 0.01 * Math.max(Math.abs(getStepSize()), Math.abs(evt.getTDouble()))) {\n                        hNew = 0.01 * getStepSize();\n                    }\n                    setStepSize(Math.abs(hNew));\n                    t0 = getStepStart();\n                }\n                if (isLastStep()) {\n                    return;\n                }\n            }\n            if (stop) {\n                setStepSize(Math.abs(stopTime - t0));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..4510a0a35 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,161 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+public void doEvents(final double tMin, final double tMax,\n+        final double maxCheckInterval, final Collection<EventState> events, final EventHandler<ActionEvent> handler) {\n+    final List<EventState> eventsStates = new ArrayList<EventState>(events);\n+    Collections.sort(eventsStates, getEventTimeComparator());\n+    double t0 = Double.NaN;\n+    while (true) {\n+        // initialize the events states\n+        for (final EventState state : eventsStates) {\n+            state.reinitializeBegin(getPrimaryMapper());\n+        }\n+        List<EventState> occuringEvents = new ArrayList<>();\n+        for (final EventState state : eventsStates) {\n+            final double t = state.evaluateStep(getPrimaryMapper());\n+            if (t >= tMin && t <= tMax) {\n+                occuringEvents.add(state);\n+            }\n+        }\n+        clearOccurredEvents(occuringEvents, getPrimaryMapper());\n+        if (occuringEvents.isEmpty()) {\n+            // no event was triggered\n+            if (Double.isNaN(t0)) {\n+                setStepSize(Math.min(getStepSize(), maxCheckInterval));\n+            } else {\n+                setStepStart(t0);\n+                setStepSize(Math.min(getStepSize(), Math.abs(tMax - t0)));\n+            }\n+            try {\n+                getStepSizeHandler().handleStep(getEquations(), forward,\n+                        1.0, getPrimaryMapper(), getSecondaryMapper(),\n+                        getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n+                        getInterpolatedSecondaryState(), getInterpolatedSecondaryDerivatives(),\n+                        new DummyStepInterpolator(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n+                                true, getStateVectorSized(), getPrimaryMapper().getOrder(),\n+                                getPrimaryMapper().getOrder() + 1));\n+\n+                if (isLastStep()) {\n+                    return;\n                 }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n+                final double nextT0 = getPrimaryMapper().getCurrentTime();\n+                if (Math.abs(nextT0 - tMax) <= 1.0e-10 * Math.abs(tMax)) {\n+                    setStepStart(t0);\n+                    setStepSize(Math.abs(tMax - t0));\n+                } else {\n+                    t0 = nextT0;\n+                }\n+            } catch (final ExceptionWrapper ew) {\n+                ew.printStackTrace(System.err);\n+                if (ew.getException() instanceof RuntimeException) {\n+                    throw (RuntimeException) ew.getException();\n                 }\n+                throw new RuntimeException(ew.getException());\n             }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n-\n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+        } else {\n+            // handle the chronologically first event\n+            final Iterator<EventState> iterator = occuringEvents.iterator();\n+            final EventState currentEvent = iterator.next();\n+            iterator.remove();\n+            if (Double.isNaN(currentEvent.getEventTime())) {\n+                // this is a bisection update\n+                for (final EventState state : eventsStates) {\n+                    state.stepAccepted(getPrimaryMapper().getCurrentTime(), getPrimaryMapper().getInterpolatedState());\n+                    if (state != currentEvent) {\n+                        state.reinitialize(getPrimaryMapper());\n+                    }\n                 }\n+            }\n+            // restrict the interpolator to the first part of the step, up to the event\n+            final double eventT = currentEvent.getEventTime();\n+            setStepSize(Math.abs(eventT - getPrimaryMapper().getCurrentTime()));\n+            getStepStart();\n+            try {\n+                getStepSizeHandler().handleStep(getEquations(), forward,\n+                        1.0, getPrimaryMapper(), getSecondaryMapper(),\n+                        eventT, getInterpolatedState(), getInterpolatedDerivatives(),\n+                        getInterpolatedSecondaryState(), getInterpolatedSecondaryDerivatives(),\n+                        new DummyStepInterpolator(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n+                                true, getStateVectorSized(), getPrimaryMapper().getOrder(),\n+                                getPrimaryMapper().getOrder() + 1));\n+            } catch (final ExceptionWrapper ew) {\n+                ew.printStackTrace(System.err);\n+                if (ew.getException() instanceof RuntimeException) {\n+                    throw (RuntimeException) ew.getException();\n+                }\n+                throw new RuntimeException(ew.getException());\n+            } finally {\n+                getInterpolationArray().fill(0.0);\n+            }\n+            getPrimaryMapper().setSoftPreviousTime(getStepStart() - t0);\n+            getPrimaryMapper().setSoftCurrentTime(eventT - t0);\n+            // handle the event\n+            ActionEvent evt = currentEvent.getAction(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(), getPrimaryMapper().isForward());\n+            boolean stop = evt == EventHandler.Action.STOP;\n+            if (!stop) {\n+                double hNew = getStepSizeHandler().\n+                                initializeStep(getEquations(), forward,\n+                                              1.0, evt.getTDouble(), getInterpolatedState(),\n+                                              getInterpolatedDerivatives(), getInterpolatedSecondaryState(),\n+                                              getInterpolatedSecondaryDerivatives());\n+                if (Math.abs(hNew) <= 0.01 * Math.max(Math.abs(getStepSize()), Math.abs(evt.getTDouble()))) {\n+                    hNew = 0.01 * getStepSize();\n+                }\n+                setStepSize(Math.abs(hNew));\n+            }\n+            // handle the remaining part of the step, after the event\n+            final double stopTime = eventT + (isLastStep() ? 0.0 : Math.max(0.001, getStepSize()));\n+            t0 = eventT;\n+            while (getStepStart() < stopTime) {\n+                if (stop) {\n+                    setStepSize(stopTime - getStepStart());\n+                }\n+                try {\n+                    getStepSizeHandler().handleStep(getEquations(), forward,\n+                            1.0, getPrimaryMapper(), getSecondaryMapper(),\n+                            stopTime, getInterpolatedState(), getInterpolatedDerivatives(),\n+                            getInterpolatedSecondaryState(), getInterpolatedSecondaryDerivatives(),\n+                            new DummyStepInterpolator(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(),\n+                                    true, getStateVectorSized(), getPrimaryMapper().getOrder(),\n+                                    getPrimaryMapper().getOrder() + 1));\n+                } catch (final ExceptionWrapper ew) {\n+                    ew.printStackTrace(System.err);\n+                    if (ew.getException() instanceof RuntimeException) {\n+                        throw (RuntimeException) ew.getException();\n+                    }\n+                    throw new RuntimeException(ew.getException());\n+                } finally {\n+                    getInterpolationArray().fill(0.0);\n+                }\n+                evt = currentEvent.getAction(getInterpolatedTime(), getInterpolatedState(), getInterpolatedDerivatives(), getPrimaryMapper().isForward());\n+                if (evt == EventHandler.Action.STOP) {\n+                    stop = true;\n+                }\n+                if (stop) {\n+                    setStepSize(stopTime - getStepStart());\n+                } else {\n+                    double hNew = getStepSizeHandler().\n+                            initializeStep(getEquations(), forward,\n+                                    1.0, evt.getTDouble(), getInterpolatedState(),\n+                                    getInterpolatedDerivatives(), getInterpolatedSecondaryState(),\n+                                    getInterpolatedSecondaryDerivatives());\n+                    if (Math.abs(hNew) <= 0.01 * Math.max(Math.abs(getStepSize()), Math.abs(evt.getTDouble()))) {\n+                        hNew = 0.01 * getStepSize();\n+                    }\n+                    setStepSize(Math.abs(hNew));\n+                    t0 = getStepStart();\n+                }\n+                if (isLastStep()) {\n+                    return;\n+                }\n+            }\n+            if (stop) {\n+                setStepSize(Math.abs(stopTime - t0));\n+            }\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}