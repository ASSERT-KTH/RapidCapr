{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (!e.getMessage().contains(savedFields[count].iField.getName())) {\n                throw e;\n            }\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            for (int i = 0; i < count; i++) {\n                if (i != count - 1) {\n                    iSavedFields[i] = savedFields[i];\n                } else {\n                    iSavedFields[count - 1] =\n                        new SavedField(savedFields[count - 1].iField, iDefaultYear);\n                }\n            }\n            millis = computeMillis(resetFields, text);\n            for (int i = 0; i < count; i++) {\n                millis = iSavedFields[i].set(millis, resetFields);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..69462100 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (!e.getMessage().contains(savedFields[count].iField.getName())) {\n+                throw e;\n+            }\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            for (int i = 0; i < count; i++) {\n+                if (i != count - 1) {\n+                    iSavedFields[i] = savedFields[i];\n+                } else {\n+                    iSavedFields[count - 1] =\n+                        new SavedField(savedFields[count - 1].iField, iDefaultYear);\n+                }\n+            }\n+            millis = computeMillis(resetFields, text);\n+            for (int i = 0; i < count; i++) {\n+                millis = iSavedFields[i].set(millis, resetFields);\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}