{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long currentInstant = 0L;\n            boolean isEndOfMonth = false;\n            for (int i = 0; i < partial.size(); i++) {\n                if (i == fieldIndex) {\n                    int currentValue = values[i];\n                    int newValue = iChronology.getField(i).add(currentInstant, currentValue, valueToAdd);\n                    if (newValue != currentValue) { // adjust other fields to keep the total millisecond consistent\n                        int maxDayOfMonth = iChronology.getDaysInYearMonth(values[0], values[1]); // this year, month\n                        if (values[2] > maxDayOfMonth) { // cap at the end of month\n                            values[2] = maxDayOfMonth;\n                            isEndOfMonth = true; // remember to make further adjustment later\n                        }\n                        currentInstant = iChronology.getDateTimeMillis(\n                                newValue >= 0 ? values[0] : values[0] - 1,\n                                newValue >= 0 ? newValue : 12 + newValue,\n                                values[2], \n                                values[3]);\n                    }\n                } else {\n                    currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, values[i]);\n                }\n            }\n            \n            currentInstant = add(currentInstant, valueToAdd);\n            \n            int[] result = iChronology.get(partial, currentInstant);\n            \n            if (isEndOfMonth && result[2] < values[2]) { // further adjustment needed\n                result[2] = iChronology.getDaysInYearMonth(result[0], result[1]); // fix to the last day of month\n                result[1]++; // increase month because we go beyond the month originally wanted\n            }\n            \n            return result;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6e05b680 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            long currentInstant = 0L;\n+            boolean isEndOfMonth = false;\n+            for (int i = 0; i < partial.size(); i++) {\n+                if (i == fieldIndex) {\n+                    int currentValue = values[i];\n+                    int newValue = iChronology.getField(i).add(currentInstant, currentValue, valueToAdd);\n+                    if (newValue != currentValue) { // adjust other fields to keep the total millisecond consistent\n+                        int maxDayOfMonth = iChronology.getDaysInYearMonth(values[0], values[1]); // this year, month\n+                        if (values[2] > maxDayOfMonth) { // cap at the end of month\n+                            values[2] = maxDayOfMonth;\n+                            isEndOfMonth = true; // remember to make further adjustment later\n+                        }\n+                        currentInstant = iChronology.getDateTimeMillis(\n+                                newValue >= 0 ? values[0] : values[0] - 1,\n+                                newValue >= 0 ? newValue : 12 + newValue,\n+                                values[2], \n+                                values[3]);\n+                    }\n+                } else {\n+                    currentInstant = partial.getFieldType(i).getField(iChronology).set(currentInstant, values[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            \n+            currentInstant = add(currentInstant, valueToAdd);\n+            \n+            int[] result = iChronology.get(partial, currentInstant);\n+            \n+            if (isEndOfMonth && result[2] < values[2]) { // further adjustment needed\n+                result[2] = iChronology.getDaysInYearMonth(result[0], result[1]); // fix to the last day of month\n+                result[1]++; // increase month because we go beyond the month originally wanted\n+            }\n+            \n+            return result;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}