{
    "patch": "        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            if (actualTypeArgument instanceof ParameterizedType) {\n                for (Type type : ((ParameterizedType) actualTypeArgument).getActualTypeArguments()) {\n                    registerTypeVariablesOn(type);\n                }\n            } else if (actualTypeArgument instanceof Class) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else if (actualTypeArgument instanceof WildcardType) {\n                for (Type bound : ((WildcardType) actualTypeArgument).getUpperBounds()) {\n                    registerTypeVariablesOn(bound);\n                }\n            } \n        } else {",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..63d852044 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            if (actualTypeArgument instanceof ParameterizedType) {\n+                for (Type type : ((ParameterizedType) actualTypeArgument).getActualTypeArguments()) {\n+                    registerTypeVariablesOn(type);\n+                }\n+            } else if (actualTypeArgument instanceof Class) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else if (actualTypeArgument instanceof WildcardType) {\n+                for (Type bound : ((WildcardType) actualTypeArgument).getUpperBounds()) {\n+                    registerTypeVariablesOn(bound);\n+                }\n+            } \n+        } else {\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}