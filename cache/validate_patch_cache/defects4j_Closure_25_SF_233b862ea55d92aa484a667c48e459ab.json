{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType == null) {\n        type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isFunctionType()) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n            type = ct.getInstanceType();\n        } else {\n            type = getNativeType(UNKNOWN_TYPE);\n        }\n    } else if (constructorType.isNoType() \n        || constructorType.isUnknownType() \n        || constructorType.isVoidType() \n        || constructorType.isAllType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isUnionType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n        for (JSType alternative : constructorType.getUnionMembers()) {\n            if (alternative.isFunctionType() \n                && alternative.toMaybeFunctionType().isConstructor()) {\n                type = alternative.toMaybeFunctionType().getInstanceType();\n                break;\n            }\n        }\n    }\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n\n    if (type == null) {\n        // If type is still null, set it to UNKNOWN_TYPE.\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n\n    n.setJSType(type);\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..d3edf177 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,50 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+\n+    if (constructorType == null) {\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+    } else if (constructorType.isFunctionType()) {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+            type = ct.getInstanceType();\n+        } else {\n+            type = getNativeType(UNKNOWN_TYPE);\n+        }\n+    } else if (constructorType.isNoType() \n+        || constructorType.isUnknownType() \n+        || constructorType.isVoidType() \n+        || constructorType.isAllType()) {\n+        type = getNativeType(UNKNOWN_TYPE);\n+    } else if (constructorType.isUnionType()) {\n+        type = getNativeType(UNKNOWN_TYPE);\n+        for (JSType alternative : constructorType.getUnionMembers()) {\n+            if (alternative.isFunctionType() \n+                && alternative.toMaybeFunctionType().isConstructor()) {\n+                type = alternative.toMaybeFunctionType().getInstanceType();\n+                break;\n+            }\n         }\n-      }\n     }\n-    n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n+    }\n+\n+    if (type == null) {\n+        // If type is still null, set it to UNKNOWN_TYPE.\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n+\n+    n.setJSType(type);\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}