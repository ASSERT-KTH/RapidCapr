{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        int separatorCount = 0;\n        \n        List<Object> printerElements = new ArrayList<>();\n        List<Object> parserElements = new ArrayList<>();\n        \n        // Split element pairs into printer and parser parts\n        for (int i = 1; i < size; i += 2) {\n            Object element = elementPairs.get(i);\n            \n            if (element instanceof Separator) {\n                separatorCount++;\n            }\n            \n            if (separatorCount == 1) {\n                printerElements.add(elementPairs.get(i-1));\n                parserElements.add(elementPairs.get(i));\n            } else {\n                List<Object> sublist = new ArrayList<>();\n                sublist.add(elementPairs.get(i-1));\n                sublist.add(element);\n                sublist.addAll(getLiteralElements(elementPairs.get(i+1 < size ? i+1 : i)));\n                printerElements.add(sublist);\n                parserElements.add(sublist);\n            }\n        }\n        \n        // Generate new formatters for printer and parser parts\n        PeriodFormatter printerFormatter = toFormatter(printerElements, false, true);\n        PeriodFormatter parserFormatter = toFormatter(parserElements, true, false);\n        \n        // Generate new separator with finished parts\n        sep = sep.finish(printerFormatter.getPrinter(), parserFormatter.getParser());\n        return new PeriodFormatter(sep, sep);\n        \n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}\n\nprivate static List<Object> getLiteralElements(Object element) {\n    List<Object> elements = new ArrayList<>();\n    if (element instanceof Literal) {\n        elements.add(element);\n    } else if (element instanceof List) {\n        List<?> list = (List<?>) element;\n        for (Object obj : list) {\n            if (obj instanceof Literal) {\n                elements.add(obj);\n            } else if (obj instanceof List) {\n                elements.addAll(getLiteralElements(obj));\n            }\n        }\n    }\n    return elements;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2118ac75 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,51 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        int separatorCount = 0;\n+        \n+        List<Object> printerElements = new ArrayList<>();\n+        List<Object> parserElements = new ArrayList<>();\n+        \n+        // Split element pairs into printer and parser parts\n+        for (int i = 1; i < size; i += 2) {\n+            Object element = elementPairs.get(i);\n+            \n+            if (element instanceof Separator) {\n+                separatorCount++;\n+            }\n+            \n+            if (separatorCount == 1) {\n+                printerElements.add(elementPairs.get(i-1));\n+                parserElements.add(elementPairs.get(i));\n+            } else {\n+                List<Object> sublist = new ArrayList<>();\n+                sublist.add(elementPairs.get(i-1));\n+                sublist.add(element);\n+                sublist.addAll(getLiteralElements(elementPairs.get(i+1 < size ? i+1 : i)));\n+                printerElements.add(sublist);\n+                parserElements.add(sublist);\n+            }\n         }\n+        \n+        // Generate new formatters for printer and parser parts\n+        PeriodFormatter printerFormatter = toFormatter(printerElements, false, true);\n+        PeriodFormatter parserFormatter = toFormatter(parserElements, true, false);\n+        \n+        // Generate new separator with finished parts\n+        sep = sep.finish(printerFormatter.getPrinter(), parserFormatter.getParser());\n+        return new PeriodFormatter(sep, sep);\n+        \n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +845,24 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n+\n+private static List<Object> getLiteralElements(Object element) {\n+    List<Object> elements = new ArrayList<>();\n+    if (element instanceof Literal) {\n+        elements.add(element);\n+    } else if (element instanceof List) {\n+        List<?> list = (List<?>) element;\n+        for (Object obj : list) {\n+            if (obj instanceof Literal) {\n+                elements.add(obj);\n+            } else if (obj instanceof List) {\n+                elements.addAll(getLiteralElements(obj));\n+            }\n+        }\n+    }\n+    return elements;\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}