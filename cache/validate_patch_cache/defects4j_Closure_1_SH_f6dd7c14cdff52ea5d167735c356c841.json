{
    "patch": "      Node lastArg = argList.getLastChild(); // initialize lastArg to the first arg to be removed\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (referenced.contains(var)) { // check if the lastArg is referenced\n          break; // if it is, break and do not remove any more args\n        }\n        // if it's not referenced, remove it and advance to the next arg to be removed\n        argList.removeChild(lastArg);\n        lastArg = argList.getLastChild();\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d6ebcd56 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild(); // initialize lastArg to the first arg to be removed\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (referenced.contains(var)) { // check if the lastArg is referenced\n+          break; // if it is, break and do not remove any more args\n+        }\n+        // if it's not referenced, remove it and advance to the next arg to be removed\n+        argList.removeChild(lastArg);\n+        lastArg = argList.getLastChild();\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}