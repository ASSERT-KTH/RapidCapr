{
    "patch": "public static String toPattern(Locale locale, String value) throws ParseException {\n    // Remove the decimal point if there is no decimals.\n    if (!value.contains(\".\")) {\n        value = value.replace(\".\", \"\");\n    }\n\n    SimpleDateFormat sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.FULL, locale);\n    SimpleDateFormat parser = new SimpleDateFormat(sdf.toPattern().replace(\"yy\", \"y\"), locale);\n    Date date = parser.parse(value);\n\n    // Get the date format pattern.\n    String pattern = ((SimpleDateFormat)DateFormat.getDateInstance(DateFormat.FULL, locale)).toPattern();\n\n    // Get the era format.\n    String eraPattern = \"\";\n    for (char c : pattern.toCharArray()) {\n        if (c == 'G') {\n            if (eraPattern.length() > 0) break;\n            eraPattern += c;\n        } else if (eraPattern.length() > 0) {\n            eraPattern += c;\n        }\n    }\n\n    // Append the time format pattern.\n    pattern += \" HH:mm:ss.SSS Z\";\n\n    // Replace all occurrences of era pattern with 'GGGG'.\n    pattern = pattern.replace(eraPattern, \"GGGG\");\n\n    // Replace all occurrences of 'y' with 'yyyy'.\n    pattern = pattern.replaceAll(\"([^y]|^)(y)([^y]|$)\", \"$1yyyy$3\");\n\n    // Get the date format.\n    SimpleDateFormat outputFormat = new SimpleDateFormat(pattern, locale);\n\n    return outputFormat.format(date);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..7c5a2413 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,45 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+public static String toPattern(Locale locale, String value) throws ParseException {\n+    // Remove the decimal point if there is no decimals.\n+    if (!value.contains(\".\")) {\n+        value = value.replace(\".\", \"\");\n+    }\n+\n+    SimpleDateFormat sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.FULL, locale);\n+    SimpleDateFormat parser = new SimpleDateFormat(sdf.toPattern().replace(\"yy\", \"y\"), locale);\n+    Date date = parser.parse(value);\n+\n+    // Get the date format pattern.\n+    String pattern = ((SimpleDateFormat)DateFormat.getDateInstance(DateFormat.FULL, locale)).toPattern();\n+\n+    // Get the era format.\n+    String eraPattern = \"\";\n+    for (char c : pattern.toCharArray()) {\n+        if (c == 'G') {\n+            if (eraPattern.length() > 0) break;\n+            eraPattern += c;\n+        } else if (eraPattern.length() > 0) {\n+            eraPattern += c;\n         }\n-        return regex;\n     }\n \n+    // Append the time format pattern.\n+    pattern += \" HH:mm:ss.SSS Z\";\n+\n+    // Replace all occurrences of era pattern with 'GGGG'.\n+    pattern = pattern.replace(eraPattern, \"GGGG\");\n+\n+    // Replace all occurrences of 'y' with 'yyyy'.\n+    pattern = pattern.replaceAll(\"([^y]|^)(y)([^y]|$)\", \"$1yyyy$3\");\n+\n+    // Get the date format.\n+    SimpleDateFormat outputFormat = new SimpleDateFormat(pattern, locale);\n+\n+    return outputFormat.format(date);\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}