{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (arguments.hasNext()) {\n    if (parameters.hasNext()) {\n      parameter = parameters.next();\n    } else if (functionType.isVarArgs()) {\n      parameter = functionType.getVarArgsType();\n    } else {\n      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n          argumentsRemaining(parameters), String.valueOf(call.getChildCount() - 1),\n          FUNCTION_WRONG_ARGUMENT_COUNT_FLAG);\n      return;\n    }\n\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  if (argumentsRemaining(parameters) > 0) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        argumentsRemaining(parameters), String.valueOf(call.getChildCount() - 1),\n        FUNCTION_WRONG_ARGUMENT_COUNT_FLAG);\n  }\n}\n\nprivate int argumentsRemaining(Iterator<Node> parameters) {\n  int remainingArgs = 0;\n  while (parameters.hasNext()) {\n    parameters.next();\n    remainingArgs++;\n  }\n  return remainingArgs;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..9ee2995c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,47 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  while (arguments.hasNext()) {\n+    if (parameters.hasNext()) {\n+      parameter = parameters.next();\n+    } else if (functionType.isVarArgs()) {\n+      parameter = functionType.getVarArgsType();\n+    } else {\n+      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          argumentsRemaining(parameters), String.valueOf(call.getChildCount() - 1),\n+          FUNCTION_WRONG_ARGUMENT_COUNT_FLAG);\n+      return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n+    argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  if (argumentsRemaining(parameters) > 0) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        argumentsRemaining(parameters), String.valueOf(call.getChildCount() - 1),\n+        FUNCTION_WRONG_ARGUMENT_COUNT_FLAG);\n   }\n+}\n+\n+private int argumentsRemaining(Iterator<Node> parameters) {\n+  int remainingArgs = 0;\n+  while (parameters.hasNext()) {\n+    parameters.next();\n+    remainingArgs++;\n+  }\n+  return remainingArgs;\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}