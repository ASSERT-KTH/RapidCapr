{
    "patch": "      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n != lhs && NodeUtil.isGet(lhs)) {\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.NAME) {\n            String varName = llhs.getString();\n            if (assignedPrototypeVars.contains(varName) &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          } else if (llhs.getType() == Token.GETPROP) {\n            Node ctor = llhs.getFirstChild();\n            Node prop = llhs.getLastChild();\n            if (assignedPrototypeVars.contains(ctor.getString()) &&\n                prop.getString().equals(\"prototype\")) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..414f8ecb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n != lhs && NodeUtil.isGet(lhs)) {\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.NAME) {\n+            String varName = llhs.getString();\n+            if (assignedPrototypeVars.contains(varName) &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          } else if (llhs.getType() == Token.GETPROP) {\n+            Node ctor = llhs.getFirstChild();\n+            Node prop = llhs.getLastChild();\n+            if (assignedPrototypeVars.contains(ctor.getString()) &&\n+                prop.getString().equals(\"prototype\")) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}