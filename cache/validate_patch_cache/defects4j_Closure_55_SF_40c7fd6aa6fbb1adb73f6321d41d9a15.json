{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n) ||\n        (n.isCall() && NodeUtil.isFunctionExpression(n.getFirstChild().getFunction())) ||\n        (n.isGetProp() && NodeUtil.isFunctionExpression(n.getFirstChild()));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..e5580377 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,9 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    return NodeUtil.isFunctionExpression(n) ||\n+        (n.isCall() && NodeUtil.isFunctionExpression(n.getFirstChild().getFunction())) ||\n+        (n.isGetProp() && NodeUtil.isFunctionExpression(n.getFirstChild()));\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}