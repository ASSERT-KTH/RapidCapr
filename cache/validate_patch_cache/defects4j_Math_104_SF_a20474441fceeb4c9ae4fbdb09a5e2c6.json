{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 10e-9;\n    double[] pqr = {a, 1.0 - x, a + 1.0};\n    double result = continuedFraction(pqr, x, epsilon);\n    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * result;\n}\n\npublic static double continuedFraction(double[] pqr, double x, double epsilon) {\n    double tiny = 10e-30;\n    double maxIter = 1000.0;\n    double cf = pqr[0];\n    double a = pqr[0];\n    double b = x + pqr[1];\n    double D = 0.0;\n    if (Math.abs(b) < tiny) {\n        b = tiny;\n    }\n    D = 1.0 / b;\n    double deltaN = 0;\n    double deltaD = 0;\n\n    int n = 1;\n    while (n < maxIter) {\n        double cn = pqr[n];\n        double a1 = (b * a) + cn * cf;\n        double b1 = b * b + x * a * cf;\n        if (Math.abs(b1) < tiny) {\n            b1 = tiny;\n        }\n        D = 1.0 / b1;\n        deltaN = a1 * D * deltaD;\n        cf = b1 * D * cf - deltaN;\n        if (Math.abs(cf) > 1.0 / tiny) {\n            cf = cf * tiny;\n            deltaD = tiny;\n        } else {\n            deltaD = 1.0 / cf;\n        }\n\n        if (Math.abs(deltaN / cf) < epsilon) {\n            break;\n        }\n        b = b1;\n        a = a1;\n        ++n;\n    }\n    if (n >= maxIter) {\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    }\n\n    return cf;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..14432497a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,58 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 10e-9;\n+    double[] pqr = {a, 1.0 - x, a + 1.0};\n+    double result = continuedFraction(pqr, x, epsilon);\n+    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * result;\n+}\n+\n+public static double continuedFraction(double[] pqr, double x, double epsilon) {\n+    double tiny = 10e-30;\n+    double maxIter = 1000.0;\n+    double cf = pqr[0];\n+    double a = pqr[0];\n+    double b = x + pqr[1];\n+    double D = 0.0;\n+    if (Math.abs(b) < tiny) {\n+        b = tiny;\n+    }\n+    D = 1.0 / b;\n+    double deltaN = 0;\n+    double deltaD = 0;\n+\n+    int n = 1;\n+    while (n < maxIter) {\n+        double cn = pqr[n];\n+        double a1 = (b * a) + cn * cf;\n+        double b1 = b * b + x * a * cf;\n+        if (Math.abs(b1) < tiny) {\n+            b1 = tiny;\n+        }\n+        D = 1.0 / b1;\n+        deltaN = a1 * D * deltaD;\n+        cf = b1 * D * cf - deltaN;\n+        if (Math.abs(cf) > 1.0 / tiny) {\n+            cf = cf * tiny;\n+            deltaD = tiny;\n+        } else {\n+            deltaD = 1.0 / cf;\n+        }\n+\n+        if (Math.abs(deltaN / cf) < epsilon) {\n+            break;\n+        }\n+        b = b1;\n+        a = a1;\n+        ++n;\n+    }\n+    if (n >= maxIter) {\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    return cf;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}