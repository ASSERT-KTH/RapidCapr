{
    "patch": "      if (NodeUtil.isFunctionExpression(value) || NodeUtil.isArrowFunctionExpression(value)) {\n        // issue 1098: Don't inline constructors. Inlining constructors on a call where `this` is\n        // used will invalidate the `this` reference which could have impacts like changing the\n        // meaning of `instanceof`.\n        if (value.isFunction() && value.getJSType().isObject() && value.getParent().isCall()) {\n          return false;\n        }\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          String methodName =\n              convention.getSingletonGetterClassName(callNode);\n          if (methodName != null) {\n            return false;\n          }\n\n          // issue 1098: Don't inline constructors. Inlining constructors on a call where `this` is\n          // used will invalidate the `this` reference which could have impacts like changing the\n          // meaning of `instanceof`.\n          if (value.isConstructor()) {\n            return false;\n          }\n\n          // With completely side-effect free function calls, the notion\n          // of \"passing the value\" is meaningless, so allow it.\n          if (value.isFunction() && canFunctionReturnValueBeElided(value)) {\n            return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..7da78475 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,43 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (NodeUtil.isFunctionExpression(value) || NodeUtil.isArrowFunctionExpression(value)) {\n+        // issue 1098: Don't inline constructors. Inlining constructors on a call where `this` is\n+        // used will invalidate the `this` reference which could have impacts like changing the\n+        // meaning of `instanceof`.\n+        if (value.isFunction() && value.getJSType().isObject() && value.getParent().isCall()) {\n+          return false;\n+        }\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          String methodName =\n+              convention.getSingletonGetterClassName(callNode);\n+          if (methodName != null) {\n+            return false;\n+          }\n+\n+          // issue 1098: Don't inline constructors. Inlining constructors on a call where `this` is\n+          // used will invalidate the `this` reference which could have impacts like changing the\n+          // meaning of `instanceof`.\n+          if (value.isConstructor()) {\n+            return false;\n+          }\n+\n+          // With completely side-effect free function calls, the notion\n+          // of \"passing the value\" is meaningless, so allow it.\n+          if (value.isFunction() && canFunctionReturnValueBeElided(value)) {\n+            return true;\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}