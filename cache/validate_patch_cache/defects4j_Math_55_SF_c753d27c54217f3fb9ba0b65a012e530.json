{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double eps = Math.ulp(1d);\n    final double n1 = v1.getNorm();\n    final double n2 = v2.getNorm();\n    final Vector3D vv1;\n    final Vector3D vv2;\n\n    if ((n1 < eps) || (n2 < eps)) {\n        // vectors are either too small\n        // we try to rescale them to a more suitable size\n        // we use a rescaling factor based on the precision\n        final double alpha = eps / 4 * Math.max(Math.max(Math.abs(v1.getX()), Math.abs(v1.getY())), Math.abs(v1.getZ())) + eps;\n        final double beta = eps / 4 * Math.max(Math.max(Math.abs(v2.getX()), Math.abs(v2.getY())), Math.abs(v2.getZ())) + eps;\n        vv1 = new Vector3D(alpha * v1.getX(), alpha * v1.getY(), alpha * v1.getZ());\n        vv2 = new Vector3D(beta * v2.getX(), beta * v2.getY(), beta * v2.getZ());\n    } else {\n        vv1 = v1;\n        vv2 = v2;\n    }\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    final double r = vv1.dotProduct(vv2) / (n1 * n2);\n\n    // if r > 0.7 we will lose too much accuracy\n    final double threshold = 0.7d;\n    if ((r > threshold) || (r < -threshold)) {\n        final Vector3D tmp = vv1.subtract(vv2.scalarMultiply(r));\n        return new Vector3D(tmp.getY() * vv2.getZ() - tmp.getZ() * vv2.getY(),\n                            tmp.getZ() * vv2.getX() - tmp.getX() * vv2.getZ(),\n                            tmp.getX() * vv2.getY() - tmp.getY() * vv2.getX());\n    } else {\n        // we can directly compute the cross product safely\n        return new Vector3D(vv1.getY() * vv2.getZ() - vv1.getZ() * vv2.getY(),\n                            vv1.getZ() * vv2.getX() - vv1.getX() * vv2.getZ(),\n                            vv1.getX() * vv2.getY() - vv1.getY() * vv2.getX());\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..d39f21492 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,51 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double eps = Math.ulp(1d);\n+    final double n1 = v1.getNorm();\n+    final double n2 = v2.getNorm();\n+    final Vector3D vv1;\n+    final Vector3D vv2;\n+\n+    if ((n1 < eps) || (n2 < eps)) {\n+        // vectors are either too small\n+        // we try to rescale them to a more suitable size\n+        // we use a rescaling factor based on the precision\n+        final double alpha = eps / 4 * Math.max(Math.max(Math.abs(v1.getX()), Math.abs(v1.getY())), Math.abs(v1.getZ())) + eps;\n+        final double beta = eps / 4 * Math.max(Math.max(Math.abs(v2.getX()), Math.abs(v2.getY())), Math.abs(v2.getZ())) + eps;\n+        vv1 = new Vector3D(alpha * v1.getX(), alpha * v1.getY(), alpha * v1.getZ());\n+        vv2 = new Vector3D(beta * v2.getX(), beta * v2.getY(), beta * v2.getZ());\n+    } else {\n+        vv1 = v1;\n+        vv2 = v2;\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    final double r = vv1.dotProduct(vv2) / (n1 * n2);\n+\n+    // if r > 0.7 we will lose too much accuracy\n+    final double threshold = 0.7d;\n+    if ((r > threshold) || (r < -threshold)) {\n+        final Vector3D tmp = vv1.subtract(vv2.scalarMultiply(r));\n+        return new Vector3D(tmp.getY() * vv2.getZ() - tmp.getZ() * vv2.getY(),\n+                            tmp.getZ() * vv2.getX() - tmp.getX() * vv2.getZ(),\n+                            tmp.getX() * vv2.getY() - tmp.getY() * vv2.getX());\n+    } else {\n+        // we can directly compute the cross product safely\n+        return new Vector3D(vv1.getY() * vv2.getZ() - vv1.getZ() * vv2.getY(),\n+                            vv1.getZ() * vv2.getX() - vv1.getX() * vv2.getZ(),\n+                            vv1.getX() * vv2.getY() - vv1.getY() * vv2.getX());\n+    }\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: method dotProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}