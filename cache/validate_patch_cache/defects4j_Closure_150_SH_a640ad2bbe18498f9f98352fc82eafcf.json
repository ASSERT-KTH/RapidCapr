{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (n.getType() == Token.LP && NodeUtil.getAncestor(parent, 1).getType() == Token.EXPR_RESULT) {\n        Node fnNode = scope.getClosestHoistScope(n).getDeclaredFunctionParent(n);\n        if (fnNode != null) {\n          defineVar(fnNode.getFirstChild(), fnNode.getParent());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..42dbd8eb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1463,6 +1463,12 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+\n+      if (n.getType() == Token.LP && NodeUtil.getAncestor(parent, 1).getType() == Token.EXPR_RESULT) {\n+        Node fnNode = scope.getClosestHoistScope(n).getDeclaredFunctionParent(n);\n+        if (fnNode != null) {\n+          defineVar(fnNode.getFirstChild(), fnNode.getParent());\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}