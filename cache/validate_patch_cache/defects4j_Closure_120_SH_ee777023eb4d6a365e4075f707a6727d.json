{
    "patch": "        if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n            return false;\n        }\n        Block clearUpToBlock = ref.getBasicBlock();\n        for (BasicBlock block = clearUpToBlock.getParent(); block != null; block = block.getParent()) {\n            if (block.isFunction) {\n                // Only allow one assignment to a variable in a function.\n                return clearUpToBlock.equals(ref.getBasicBlock());\n            } else if (block.isLoop) {\n                if (!clearUpToBlock.equals(ref.getBasicBlock())) {\n                    return false;\n                }\n            } else {\n                clearUpToBlock = block;\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c89f0f42 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n+            return false;\n+        }\n+        Block clearUpToBlock = ref.getBasicBlock();\n+        for (BasicBlock block = clearUpToBlock.getParent(); block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+                // Only allow one assignment to a variable in a function.\n+                return clearUpToBlock.equals(ref.getBasicBlock());\n+            } else if (block.isLoop) {\n+                if (!clearUpToBlock.equals(ref.getBasicBlock())) {\n+                    return false;\n+                }\n+            } else {\n+                clearUpToBlock = block;\n+            }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}