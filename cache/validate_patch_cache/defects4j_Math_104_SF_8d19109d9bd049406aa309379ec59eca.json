{
    "patch": "public static double regularizedGammaP(double a, double x, double accuracy) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 0;\n    }\n\n    if (x >= a + 1) {\n        double b = regularizedGammaQ(a, x, accuracy);\n        return 1 - b;\n    }\n\n    double sum = 1 / a;\n    double term = sum;\n\n    do {\n        ++a;\n        term *= x / a;\n        sum += term;\n    } while (term > accuracy);\n\n    return Math.exp(-x + (a - 1) * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x, double accuracy) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 1;\n    }\n\n    if (x < a + 1) {\n        double b = regularizedGammaP(a, x, accuracy);\n        return 1 - b;\n    }\n\n    double w = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    double z = 1 / (x - a + 1);\n    double sum = z;\n    double term = z;\n\n    do {\n        ++a;\n        z += 1;\n        term *= z / a;\n        sum += term;\n    } while (term * z > accuracy);\n\n    return 1 - w * sum;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003;\n    ser += 4.09111911189 * Math.log(x + 30.6104694625);\n    ser -= 0.280385665397 * Math.log(x + 5.78452056079);\n    ser += 0.00668964236008 * Math.log(x + 0.00737221894338);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..714e2b8e4 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,69 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double accuracy) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    }\n+\n+    if (x >= a + 1) {\n+        double b = regularizedGammaQ(a, x, accuracy);\n+        return 1 - b;\n+    }\n+\n+    double sum = 1 / a;\n+    double term = sum;\n+\n+    do {\n+        ++a;\n+        term *= x / a;\n+        sum += term;\n+    } while (term > accuracy);\n+\n+    return Math.exp(-x + (a - 1) * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double accuracy) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 1;\n+    }\n+\n+    if (x < a + 1) {\n+        double b = regularizedGammaP(a, x, accuracy);\n+        return 1 - b;\n+    }\n+\n+    double w = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    double z = 1 / (x - a + 1);\n+    double sum = z;\n+    double term = z;\n+\n+    do {\n+        ++a;\n+        z += 1;\n+        term *= z / a;\n+        sum += term;\n+    } while (term * z > accuracy);\n+\n+    return 1 - w * sum;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003;\n+    ser += 4.09111911189 * Math.log(x + 30.6104694625);\n+    ser -= 0.280385665397 * Math.log(x + 5.78452056079);\n+    ser += 0.00668964236008 * Math.log(x + 0.00737221894338);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}