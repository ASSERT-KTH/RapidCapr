{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target may be using the object as a 'this' value.\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // If the property being referenced does not belong to the object literal,\n      // we cannot inline it.\n      if (parent.getString().isEmpty()) {\n        return false;\n      }\n\n      // Ensure that Object.prototype does not have arbitrary properties.\n      // Bail out if we find a reference to an undefined property.\n      if (parent.getFirstChild().isThis()\n          && !hasDefinedPropertyInObjectLiteral(refs, parent.getString())) {\n        return false;\n      }\n\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements.\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Check for self-referential assignments.\n    if (isObjectLiteralAssignmentSelfReferential(val, refs)) {\n      return false;\n    }\n\n    // We have found an acceptable object literal assignment. As long\n    // as there are no other assignments that mess things up, we\n    // can inline.\n    return true;\n  }\n\n  return false;\n}\n\nprivate boolean isObjectLiteralAssignmentSelfReferential(Node node, List<Reference> refs) {\n  List<String> childProps = new ArrayList<>();\n  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      // ES5 get/set not supported.\n      return true;\n    }\n\n    String propName = child.getString();\n    Node childVal = child.getFirstChild();\n    if (childVal == null) {\n      // The property value is not explicitly defined. This\n      // can happen with spread properties or computed properties.\n      // We can't be sure if the resulting object will be self-referential.\n      return true;\n    }\n\n    if (childVal.isObjectLit()) {\n      // If the child value is an object literal, recursively check for self-referential assignments.\n      if (isObjectLiteralAssignmentSelfReferential(childVal, refs)) {\n        return true;\n      }\n    } else {\n      // Check if the child value is the parent of any of the passed in\n      // references, as that is how self-referential assignments will happen.\n      for (Reference ref : refs) {\n        Node refNode = ref.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal\n              || (refNode.isGetProp() \n                  && refNode.getFirstChild().isQualifiedName() \n                  && refNode.getFirstChild().getLastChild().getString().equals(propName))) {\n            // There's a self-referential assignment.\n            return true;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n    childProps.add(propName);\n  }\n\n  // Check if there is a self-referential assignment that involves more\n  // than one object literal.\n  for (Reference ref : refs) {\n    Node refNode = ref.getParent();\n    while (!NodeUtil.isStatementBlock(refNode)) {\n      if (refNode.isGetProp() \n          && refNode.getFirstChild().isQualifiedName() \n          && childProps.contains(refNode.getFirstChild().getLastChild().getString())) {\n        Node grandparent = refNode.getGrandparent();\n        if (!grandparent.isAssign() \n            || !grandparent.getFirstChild().isQualifiedName()\n            || !childProps.contains(grandparent.getFirstChild().getLastChild().getString())) {\n          return true;\n        }\n      }\n      refNode = refNode.getParent();\n    }\n  }\n\n  return false;\n}\n\nprivate boolean hasDefinedPropertyInObjectLiteral(List<Reference> refs, String propName) {\n  // Check if the referenced property is defined in the object literal.\n  for (Reference ref : refs) {\n    Node refNode = ref.getParent();\n    while (!NodeUtil.isStatementBlock(refNode)) {\n      // Look for the root of the object literal.\n      if (refNode.isObjectLit()) {\n        for (Node child = refNode.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isStringKey() && child.getString().equals(propName)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      refNode = refNode.getParent();\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..7c4a3912 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,151 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target may be using the object as a 'this' value.\n+      if (gramps.isCall()\n+          && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+      // If the property being referenced does not belong to the object literal,\n+      // we cannot inline it.\n+      if (parent.getString().isEmpty()) {\n+        return false;\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      // Ensure that Object.prototype does not have arbitrary properties.\n+      // Bail out if we find a reference to an undefined property.\n+      if (parent.getFirstChild().isThis()\n+          && !hasDefinedPropertyInObjectLiteral(refs, parent.getString())) {\n+        return false;\n+      }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+      continue;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements.\n+    if (!isVarOrAssignExprLhs(name)) {\n+      return false;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    Node val = ref.getAssignedValue();\n+    if (val == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n+    // We're looking for object literal assignments only.\n+    if (!val.isObjectLit()) {\n+      return false;\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+    // Check for self-referential assignments.\n+    if (isObjectLiteralAssignmentSelfReferential(val, refs)) {\n+      return false;\n+    }\n+\n+    // We have found an acceptable object literal assignment. As long\n+    // as there are no other assignments that mess things up, we\n+    // can inline.\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n+private boolean isObjectLiteralAssignmentSelfReferential(Node node, List<Reference> refs) {\n+  List<String> childProps = new ArrayList<>();\n+  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isGetterDef() || child.isSetterDef()) {\n+      // ES5 get/set not supported.\n+      return true;\n+    }\n+\n+    String propName = child.getString();\n+    Node childVal = child.getFirstChild();\n+    if (childVal == null) {\n+      // The property value is not explicitly defined. This\n+      // can happen with spread properties or computed properties.\n+      // We can't be sure if the resulting object will be self-referential.\n+      return true;\n+    }\n+\n+    if (childVal.isObjectLit()) {\n+      // If the child value is an object literal, recursively check for self-referential assignments.\n+      if (isObjectLiteralAssignmentSelfReferential(childVal, refs)) {\n+        return true;\n+      }\n+    } else {\n+      // Check if the child value is the parent of any of the passed in\n+      // references, as that is how self-referential assignments will happen.\n+      for (Reference ref : refs) {\n+        Node refNode = ref.getParent();\n+        while (!NodeUtil.isStatementBlock(refNode)) {\n+          if (refNode == childVal\n+              || (refNode.isGetProp() \n+                  && refNode.getFirstChild().isQualifiedName() \n+                  && refNode.getFirstChild().getLastChild().getString().equals(propName))) {\n+            // There's a self-referential assignment.\n+            return true;\n           }\n+          refNode = refNode.getParent();\n+        }\n+      }\n+    }\n+    childProps.add(propName);\n+  }\n+\n+  // Check if there is a self-referential assignment that involves more\n+  // than one object literal.\n+  for (Reference ref : refs) {\n+    Node refNode = ref.getParent();\n+    while (!NodeUtil.isStatementBlock(refNode)) {\n+      if (refNode.isGetProp() \n+          && refNode.getFirstChild().isQualifiedName() \n+          && childProps.contains(refNode.getFirstChild().getLastChild().getString())) {\n+        Node grandparent = refNode.getGrandparent();\n+        if (!grandparent.isAssign() \n+            || !grandparent.getFirstChild().isQualifiedName()\n+            || !childProps.contains(grandparent.getFirstChild().getLastChild().getString())) {\n+          return true;\n         }\n+      }\n+      refNode = refNode.getParent();\n+    }\n+  }\n \n+  return false;\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+private boolean hasDefinedPropertyInObjectLiteral(List<Reference> refs, String propName) {\n+  // Check if the referenced property is defined in the object literal.\n+  for (Reference ref : refs) {\n+    Node refNode = ref.getParent();\n+    while (!NodeUtil.isStatementBlock(refNode)) {\n+      // Look for the root of the object literal.\n+      if (refNode.isObjectLit()) {\n+        for (Node child = refNode.getFirstChild(); child != null; child = child.getNext()) {\n+          if (child.isStringKey() && child.getString().equals(propName)) {\n+            return true;\n+          }\n+        }\n+        return false;\n       }\n-      return ret;\n+      refNode = refNode.getParent();\n     }\n+  }\n+  return true;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}