{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                // negative offsets that pass the transition point are pushed forwards\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                if (prevLocal != prevAdjusted) {\n                    return offsetAdjusted;\n                }\n            } else if (offsetLocal > offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                if (offsetLocal >= 0) {\n                    return offsetLocal;\n                }\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                if (prevLocal != prevAdjusted) {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..610395c8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                // negative offsets that pass the transition point are pushed forwards\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+            } else if (offsetLocal > offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                if (offsetLocal >= 0) {\n+                    return offsetLocal;\n+                }\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}