{
    "patch": "private void readTypeVariables() {\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        actualTypeArgument = tryExtractingActualTypeArgument(typeVariable.getGenericDeclaration().getTypeParameters(), typeVariable.getName());\n    }\n    if (actualTypeArgument == null) {\n        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n    }\n\n    registerTypeVariablesOn(actualTypeArgument);\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n    }\n}\n\nprivate Type tryExtractingActualTypeArgument(TypeVariable<?>[] typeParameters, String typeVariableName) {\n    for (TypeVariable<?> typeParameter : typeParameters) {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeParameter);\n        if (actualTypeArgument != null) {\n            String actualTypeArgumentName = typeParameter.getName();\n            if (actualTypeArgumentName.equals(typeVariableName)) {\n                return actualTypeArgument;\n            }\n        } else if (typeParameter.getName().equals(typeVariableName)) {\n            return Object.class;\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..4a332fcb2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        actualTypeArgument = tryExtractingActualTypeArgument(typeVariable.getGenericDeclaration().getTypeParameters(), typeVariable.getName());\n+    }\n+    if (actualTypeArgument == null) {\n+        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n+    }\n+\n+    registerTypeVariablesOn(actualTypeArgument);\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+    }\n+}\n+\n+private Type tryExtractingActualTypeArgument(TypeVariable<?>[] typeParameters, String typeVariableName) {\n+    for (TypeVariable<?> typeParameter : typeParameters) {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeParameter);\n+        if (actualTypeArgument != null) {\n+            String actualTypeArgumentName = typeParameter.getName();\n+            if (actualTypeArgumentName.equals(typeVariableName)) {\n+                return actualTypeArgument;\n+            }\n+        } else if (typeParameter.getName().equals(typeVariableName)) {\n+            return Object.class;\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}