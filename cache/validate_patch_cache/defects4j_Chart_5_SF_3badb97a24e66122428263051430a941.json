{
    "patch": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n        AtomicReference<XYDataItem> overwritten = new AtomicReference<>(null);\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten.set((XYDataItem) existing.clone());\n            } catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        } else {\n            XYDataItem toAdd = new XYDataItem(x, y);\n            int size = this.data.size();\n            if (size == 0) {\n                this.data.add(toAdd);\n            } else {\n                int i = 0;\n                if (!this.autoSort) {\n                    while (i < size) {\n                        XYDataItem item = (XYDataItem) this.data.get(i);\n                        if (x.equals(item.getX())) {\n                            if (this.allowDuplicateXValues) {\n                                i = i + 1;\n                            } else {\n                                try {\n                                    overwritten.set((XYDataItem) item.clone());\n                                } catch (CloneNotSupportedException e) {\n                                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                                }\n                                item.setY(y);\n                                break;\n                            }\n                        } else if (x.doubleValue() < item.getXValue()) {\n                            break;\n                        } else {\n                            i = i + 1;\n                        }\n                    }\n                    if (i == size) {\n                        this.data.add(toAdd);\n                    } else {\n                        this.data.add(i, toAdd);\n                    }\n                } else {\n                    if (index < 0) {\n                        index = -(index + 1);\n                    }\n                    if (index < size) {\n                        XYDataItem existing = (XYDataItem) this.data.get(index);\n                        if (existing.getX().equals(x)) {\n                            if (this.allowDuplicateXValues) {\n                                while (index < size && existing.getX().equals(x)) {\n                                    index = index + 1;\n                                    if (index < size) {\n                                        existing = (XYDataItem) this.data.get(index);\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } else {\n                                try {\n                                    overwritten.set((XYDataItem) existing.clone());\n                                } catch (CloneNotSupportedException e) {\n                                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                                }\n                                existing.setY(y);\n                                return overwritten.get();\n                            }\n                        }\n                        this.data.add(index, toAdd);\n                    } else {\n                        this.data.add(toAdd);\n                    }\n                }\n            }\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten.get();\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..3cfb98d 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,92 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+    public XYDataItem addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+        AtomicReference<XYDataItem> overwritten = new AtomicReference<>(null);\n+        int index = indexOf(x);\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            try {\n+                overwritten.set((XYDataItem) existing.clone());\n+            } catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+            existing.setY(y);\n+        } else {\n+            XYDataItem toAdd = new XYDataItem(x, y);\n+            int size = this.data.size();\n+            if (size == 0) {\n+                this.data.add(toAdd);\n+            } else {\n+                int i = 0;\n+                if (!this.autoSort) {\n+                    while (i < size) {\n+                        XYDataItem item = (XYDataItem) this.data.get(i);\n+                        if (x.equals(item.getX())) {\n+                            if (this.allowDuplicateXValues) {\n+                                i = i + 1;\n+                            } else {\n+                                try {\n+                                    overwritten.set((XYDataItem) item.clone());\n+                                } catch (CloneNotSupportedException e) {\n+                                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                                }\n+                                item.setY(y);\n+                                break;\n+                            }\n+                        } else if (x.doubleValue() < item.getXValue()) {\n+                            break;\n+                        } else {\n+                            i = i + 1;\n+                        }\n+                    }\n+                    if (i == size) {\n+                        this.data.add(toAdd);\n+                    } else {\n+                        this.data.add(i, toAdd);\n+                    }\n+                } else {\n+                    if (index < 0) {\n+                        index = -(index + 1);\n+                    }\n+                    if (index < size) {\n+                        XYDataItem existing = (XYDataItem) this.data.get(index);\n+                        if (existing.getX().equals(x)) {\n+                            if (this.allowDuplicateXValues) {\n+                                while (index < size && existing.getX().equals(x)) {\n+                                    index = index + 1;\n+                                    if (index < size) {\n+                                        existing = (XYDataItem) this.data.get(index);\n+                                    } else {\n+                                        break;\n+                                    }\n+                                }\n+                            } else {\n+                                try {\n+                                    overwritten.set((XYDataItem) existing.clone());\n+                                } catch (CloneNotSupportedException e) {\n+                                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                                }\n+                                existing.setY(y);\n+                                return overwritten.get();\n+                            }\n+                        }\n+                        this.data.add(index, toAdd);\n+                    } else {\n+                        this.data.add(toAdd);\n+                    }\n+                }\n+            }\n+            if (getItemCount() > this.maximumItemCount) {\n+                this.data.remove(0);\n+            }\n+        }\n+        fireSeriesChanged();\n+        return overwritten.get();\n+    }\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}