{
    "patch": "public static int largest_prime_factor(int n) {\n    if (n <= 1) {\n        return -1; // or throw an exception for invalid input\n    }\n    for (int j = 2; j <= Math.sqrt(n); j++) {\n        if (n % j == 0) {\n            int factor1 = largest_prime_factor(j);\n            int factor2 = largest_prime_factor(n / j);\n            return factor1 > factor2 ? factor1 : factor2;\n        }\n    }\n    return n;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java b/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\nindex 794cf2e..60ecf41 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_PRIME_FACTOR.java\n@@ -17,13 +17,17 @@ public class LARGEST_PRIME_FACTOR {\n         return true;\n     }\n \n-    public static int largest_prime_factor(int n) {\n-        int largest = 1;\n-        for (int j = 2; j < n; j += 1) {\n-            if (is_prime(j)){\n-                largest = n % j;\n-            }\n+public static int largest_prime_factor(int n) {\n+    if (n <= 1) {\n+        return -1; // or throw an exception for invalid input\n+    }\n+    for (int j = 2; j <= Math.sqrt(n); j++) {\n+        if (n % j == 0) {\n+            int factor1 = largest_prime_factor(j);\n+            int factor2 = largest_prime_factor(n / j);\n+            return factor1 > factor2 ? factor1 : factor2;\n         }\n-        return largest;\n     }\n+    return n;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}