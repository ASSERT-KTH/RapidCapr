{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(dim, vals.length);\n    }\n\n    final double normalizationFactor = 1.0 / Math.sqrt(Math.pow(2 * Math.PI, dim) * Math.abs(covarianceMatrixDeterminant));\n    final double exponentTerm = getExponentTerm(vals);\n\n    if (Double.isInfinite(normalizationFactor) || Double.isNaN(normalizationFactor) ||\n            Double.isInfinite(exponentTerm) || Double.isNaN(exponentTerm)) {\n        return 0;\n    }\n\n    double result = normalizationFactor * exponentTerm;\n\n    if (Double.isInfinite(result) || Double.isNaN(result)) {\n        result = 0;\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..d52186f43 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,29 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(dim, vals.length);\n+    }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    final double normalizationFactor = 1.0 / Math.sqrt(Math.pow(2 * Math.PI, dim) * Math.abs(covarianceMatrixDeterminant));\n+    final double exponentTerm = getExponentTerm(vals);\n+\n+    if (Double.isInfinite(normalizationFactor) || Double.isNaN(normalizationFactor) ||\n+            Double.isInfinite(exponentTerm) || Double.isNaN(exponentTerm)) {\n+        return 0;\n     }\n \n+    double result = normalizationFactor * exponentTerm;\n+\n+    if (Double.isInfinite(result) || Double.isNaN(result)) {\n+        result = 0;\n+    }\n+\n+    return result;\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}