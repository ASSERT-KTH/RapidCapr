{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types and object literals.\n    if (!constraintObj.isNominalConstructor() && !constraintObj.isFunctionType()) {\n        return;\n    }\n\n    if (constraintObj.isNominalConstructor() && !constraintObj.getReferenceName().isEmpty()) {\n        return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (propType == null) {\n                propType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n            }\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n\n    // Handle the case where the constraint object is a function type.\n    if (constraintObj.isFunctionType()) {\n        if (this.isFunctionType()) {\n            FunctionTypeInterface thisFunType = this.toMaybeFunctionType();\n            FunctionTypeInterface constraintFunType = constraintObj.toMaybeFunctionType();\n            int minArity = Math.max(constraintFunType.getMinArguments(), thisFunType.getMinArguments());\n            JSType receiverType = constraintFunType.getTypeOfThis().getGreatestSubtype(thisFunType.getTypeOfThis());\n            ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n            for (int i = 0; i < minArity; i++) {\n                builder.add(constraintFunType.getParameterType(i)\n                                .getGreatestSubtype(thisFunType.getParameterType(i)));\n            }\n\n            JSType restTypeUnion = null;\n            if (constraintFunType.hasRestFormals()) {\n                ImmutableList.Builder<JSType> restBuilder = ImmutableList.builder();\n                if (thisFunType.hasRestFormals()) {\n                    restBuilder.add(\n                            thisFunType.getRestFormalsType().getGreatestSubtype(constraintFunType.getRestFormalsType()));\n                } else {\n                    restBuilder.add(constraintFunType.getRestFormalsType());\n                }\n                restTypeUnion = JSType.join(ImmutableList.<JSType>of(),\n                        Iterables.transform(\n                                thisFunType.getParametersWithoutTypes(minArity),\n                                p -> p.getType()));\n                restTypeUnion = restTypeUnion.specialize(\n                        constraintFunType.getRestFormalsType().getParameters().get(0).getKey(),\n                        constraintFunType.getRestFormalsType().getParameters().get(0).getValue());\n                restBuilder.add(restTypeUnion);\n                builder.add(getNativeType(JSTypeNative.ALL_TYPE));\n            }\n\n            FunctionType result = new FunctionType(\n                    receiverType,\n                    builder.build(),\n                    restTypeUnion,\n                    constraintFunType.getReturnType(),\n                    constraintFunType.getSource(),\n                    constraintFunType.isAbstract());\n            JSType supertype =\n                    getCommonTypes().createFunctionType(result.getParameters(), result.getReturnType());\n            FunctionType subtype = result.substituteGenericsWithUnknown();\n            supertype = supertype.substituteGenerics(typeParameters, subtype.getTypeParameters());\n            nominaltypes.putAll(subtype.getNominalTypes());\n            inheritPropertiesFromFunction(subtype);\n            resolveFunctionType(supertype.toMaybeFunctionType(), subtype);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f09e2049 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,15 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match constraints on anonymous types and object literals.\n+    if (!constraintObj.isNominalConstructor() && !constraintObj.isFunctionType()) {\n+        return;\n+    }\n+\n+    if (constraintObj.isNominalConstructor() && !constraintObj.getReferenceName().isEmpty()) {\n+        return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -562,20 +569,72 @@ class PrototypeObjectType extends ObjectType {\n     // f({});\n     //\n     // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n+    // taking each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (propType == null) {\n+                propType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+            }\n+            if (!isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer = propType;\n+                if (!hasProperty(prop)) {\n+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+                }\n+                defineInferredProperty(prop, typeToInfer, null);\n+            }\n         }\n-      }\n     }\n-  }\n+\n+    // Handle the case where the constraint object is a function type.\n+    if (constraintObj.isFunctionType()) {\n+        if (this.isFunctionType()) {\n+            FunctionTypeInterface thisFunType = this.toMaybeFunctionType();\n+            FunctionTypeInterface constraintFunType = constraintObj.toMaybeFunctionType();\n+            int minArity = Math.max(constraintFunType.getMinArguments(), thisFunType.getMinArguments());\n+            JSType receiverType = constraintFunType.getTypeOfThis().getGreatestSubtype(thisFunType.getTypeOfThis());\n+            ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+            for (int i = 0; i < minArity; i++) {\n+                builder.add(constraintFunType.getParameterType(i)\n+                                .getGreatestSubtype(thisFunType.getParameterType(i)));\n+            }\n+\n+            JSType restTypeUnion = null;\n+            if (constraintFunType.hasRestFormals()) {\n+                ImmutableList.Builder<JSType> restBuilder = ImmutableList.builder();\n+                if (thisFunType.hasRestFormals()) {\n+                    restBuilder.add(\n+                            thisFunType.getRestFormalsType().getGreatestSubtype(constraintFunType.getRestFormalsType()));\n+                } else {\n+                    restBuilder.add(constraintFunType.getRestFormalsType());\n+                }\n+                restTypeUnion = JSType.join(ImmutableList.<JSType>of(),\n+                        Iterables.transform(\n+                                thisFunType.getParametersWithoutTypes(minArity),\n+                                p -> p.getType()));\n+                restTypeUnion = restTypeUnion.specialize(\n+                        constraintFunType.getRestFormalsType().getParameters().get(0).getKey(),\n+                        constraintFunType.getRestFormalsType().getParameters().get(0).getValue());\n+                restBuilder.add(restTypeUnion);\n+                builder.add(getNativeType(JSTypeNative.ALL_TYPE));\n+            }\n+\n+            FunctionType result = new FunctionType(\n+                    receiverType,\n+                    builder.build(),\n+                    restTypeUnion,\n+                    constraintFunType.getReturnType(),\n+                    constraintFunType.getSource(),\n+                    constraintFunType.isAbstract());\n+            JSType supertype =\n+                    getCommonTypes().createFunctionType(result.getParameters(), result.getReturnType());\n+            FunctionType subtype = result.substituteGenericsWithUnknown();\n+            supertype = supertype.substituteGenerics(typeParameters, subtype.getTypeParameters());\n+            nominaltypes.putAll(subtype.getNominalTypes());\n+            inheritPropertiesFromFunction(subtype);\n+            resolveFunctionType(supertype.toMaybeFunctionType(), subtype);\n+        }\n+    }\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}