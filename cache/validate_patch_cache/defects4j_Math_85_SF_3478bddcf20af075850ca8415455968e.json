{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    // Set up initial points and function values\n    double fa = function.value(lowerBound);\n    double fb = function.value(upperBound);\n    double fc = function.value(initial);\n\n    if (fa * fc >= 0.0 && fb * fc >= 0.0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"could not find bracketing interval:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    // Use Brent's method to bracket the root\n    double a = initial;\n    double b = initial;\n    double c = initial;\n    double s = lowerBound;\n    double d = upperBound;\n    double e = 0;\n    double fs = function.value(s);\n    double tol = 1e-12;\n\n    for (int iter = 0; iter < maximumIterations; iter++) {\n        // Choose the largest magnitude of the triple of points\n        double tol1 = tol * Math.abs(c) + 1e-20;\n        double tol2 = 2 * tol1;\n        if (Math.abs(c - b) > tol2 && Math.abs(fc) > Math.abs(fb)) {\n            // Use inverse quadratic interpolation\n            double denom = (fb - fc) * (fa - fc) * (fb - fa);\n            double num = c * (fb - fc) * (fc - fa) + b * (fc - fa) * (fa - fb);\n            double p = num / denom;\n            double q = (fa - fc) * (fb - fc) * (fc - b);\n            e = d;\n            d = c;\n            if (Math.abs(p - b) < tol1 && q < 0.0) {\n                c = b + tol1 * Math.signum(c - b);\n            } else {\n                c = p;\n            }\n            fc = function.value(c);\n        } else {\n            // Use bisection\n            e = d;\n            d = c;\n            c = b + 0.5 * (e - b);\n            fc = function.value(c);\n        }\n\n        // Update the triple of points\n        if (Math.abs(fc) < Math.abs(fb)) {\n            e = d;\n            d = b;\n            b = c;\n            c = e;\n            fa = fb;\n            fb = fc;\n            fc = function.value(c);\n        }\n\n        // Check for convergence\n        double m = 0.5 * (lowerBound + upperBound);\n        double tol3 = tol * Math.abs(b) + 1e-20;\n        if (Math.abs(b - m) <= tol3 || fc == 0.0) {\n            return new double[]{a, b};\n        }\n\n        // Update the interval if fc and fb have the same sign\n        if (fb * fc >= 0.0) {\n            a = s;\n            fa = fs;\n            s = b;\n            fs = fb;\n            b = c;\n            fb = fc;\n            c = b + (upperBound - b) / 2.0;\n            fc = function.value(c);\n        }\n    }\n\n    // If we get here, then the method has failed to find a bracketing interval\n    throw new ConvergenceException(\n            \"failed to find bracketing interval: iterations={0}, initial={1}, lowerBound={2}, \" +\n                    \"upperBound={3}, a={4}, b={5}, c={6}, fa={7}, fb={8}, fc={9}\",\n            maximumIterations, initial, lowerBound, upperBound, a, b, c, fa, fb, fc);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..5e892b657 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,109 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+        FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    // Set up initial points and function values\n+    double fa = function.value(lowerBound);\n+    double fb = function.value(upperBound);\n+    double fc = function.value(initial);\n+\n+    if (fa * fc >= 0.0 && fb * fc >= 0.0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"could not find bracketing interval:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    // Use Brent's method to bracket the root\n+    double a = initial;\n+    double b = initial;\n+    double c = initial;\n+    double s = lowerBound;\n+    double d = upperBound;\n+    double e = 0;\n+    double fs = function.value(s);\n+    double tol = 1e-12;\n+\n+    for (int iter = 0; iter < maximumIterations; iter++) {\n+        // Choose the largest magnitude of the triple of points\n+        double tol1 = tol * Math.abs(c) + 1e-20;\n+        double tol2 = 2 * tol1;\n+        if (Math.abs(c - b) > tol2 && Math.abs(fc) > Math.abs(fb)) {\n+            // Use inverse quadratic interpolation\n+            double denom = (fb - fc) * (fa - fc) * (fb - fa);\n+            double num = c * (fb - fc) * (fc - fa) + b * (fc - fa) * (fa - fb);\n+            double p = num / denom;\n+            double q = (fa - fc) * (fb - fc) * (fc - b);\n+            e = d;\n+            d = c;\n+            if (Math.abs(p - b) < tol1 && q < 0.0) {\n+                c = b + tol1 * Math.signum(c - b);\n+            } else {\n+                c = p;\n+            }\n+            fc = function.value(c);\n+        } else {\n+            // Use bisection\n+            e = d;\n+            d = c;\n+            c = b + 0.5 * (e - b);\n+            fc = function.value(c);\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+\n+        // Update the triple of points\n+        if (Math.abs(fc) < Math.abs(fb)) {\n+            e = d;\n+            d = b;\n+            b = c;\n+            c = e;\n+            fa = fb;\n+            fb = fc;\n+            fc = function.value(c);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+\n+        // Check for convergence\n+        double m = 0.5 * (lowerBound + upperBound);\n+        double tol3 = tol * Math.abs(b) + 1e-20;\n+        if (Math.abs(b - m) <= tol3 || fc == 0.0) {\n+            return new double[]{a, b};\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        // Update the interval if fc and fb have the same sign\n+        if (fb * fc >= 0.0) {\n+            a = s;\n+            fa = fs;\n+            s = b;\n+            fs = fb;\n+            b = c;\n+            fb = fc;\n+            c = b + (upperBound - b) / 2.0;\n+            fc = function.value(c);\n         }\n-        \n-        return new double[]{a, b};\n     }\n \n+    // If we get here, then the method has failed to find a bracketing interval\n+    throw new ConvergenceException(\n+            \"failed to find bracketing interval: iterations={0}, initial={1}, lowerBound={2}, \" +\n+                    \"upperBound={3}, a={4}, b={5}, c={6}, fa={7}, fb={8}, fc={9}\",\n+            maximumIterations, initial, lowerBound, upperBound, a, b, c, fa, fb, fc);\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}