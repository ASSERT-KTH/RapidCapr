{
    "patch": "public static int getprop(String propName) {\n    String propValue = System.getProperty(propName);\n    if (propValue == null) {\n        System.err.println(\"Property \" + propName + \" is not set\");\n        return -1;\n    } else {\n        try {\n            int value = Integer.parseInt(propValue);\n            return value;\n        } catch (NumberFormatException e) {\n            System.err.println(\"Property \" + propName + \"is not an integer\");\n            return -1;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..cb593adf 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static int getprop(String propName) {\n+    String propValue = System.getProperty(propName);\n+    if (propValue == null) {\n+        System.err.println(\"Property \" + propName + \" is not set\");\n+        return -1;\n+    } else {\n+        try {\n+            int value = Integer.parseInt(propValue);\n+            return value;\n+        } catch (NumberFormatException e) {\n+            System.err.println(\"Property \" + propName + \"is not an integer\");\n+            return -1;\n+        }\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}