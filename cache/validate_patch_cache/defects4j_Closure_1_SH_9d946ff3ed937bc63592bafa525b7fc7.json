{
    "patch": "    // if modifies are not required, remove the unreferenced arguments from the end of the function declaration\n    if (!modifyCallSites && !modifyParameters) {\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportChangeToEnclosingScope(argList);\n        } else {\n          break;\n        }\n      }\n    } else {\n      // modifies are required, optimize the function calls\n      callSiteOptimizer.optimize(fnScope, referenced);\n      // remove the unreferenced function parameters\n      removeFunctionParamOptimizations(fnScope, referenced, function, argList);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..96ed3ae2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // if modifies are not required, remove the unreferenced arguments from the end of the function declaration\n+    if (!modifyCallSites && !modifyParameters) {\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportChangeToEnclosingScope(argList);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      // modifies are required, optimize the function calls\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      // remove the unreferenced function parameters\n+      removeFunctionParamOptimizations(fnScope, referenced, function, argList);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}