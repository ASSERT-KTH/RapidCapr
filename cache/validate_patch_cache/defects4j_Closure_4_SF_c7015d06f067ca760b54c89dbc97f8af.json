{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    boolean resolvedViaProperties = resolveViaProperties(t, enclosing);\n    if (resolvedViaRegistry && resolvedViaProperties) {\n      // Both ways of resolving the type name led to the same result, so use that.\n      if (!getReferencedType().equals(this)) {\n        // We need to copy over the properties from the defined type to the reference.\n        copyFrom(getReferencedType());\n      }\n      super.resolveInternal(t, enclosing);\n      return this;\n    }\n\n    if (resolvedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..4e219333 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,31 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n+    // TODO Investigate whether it is really necessary to keep two\n     // different mechanisms for resolving named types, and if so, which order\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProperties = resolveViaProperties(t, enclosing);\n+    if (resolvedViaRegistry && resolvedViaProperties) {\n+      // Both ways of resolving the type name led to the same result, so use that.\n+      if (!getReferencedType().equals(this)) {\n+        // We need to copy over the properties from the defined type to the reference.\n+        copyFrom(getReferencedType());\n+      }\n+      super.resolveInternal(t, enclosing);\n+      return this;\n     }\n \n-    if (resolved) {\n+    if (resolvedViaRegistry) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}