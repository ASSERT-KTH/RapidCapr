{
    "patch": "if (constraintObj.isRecordType()) {\n  for (String prop : constraintObj.getOwnPropertyNames())  {\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!hasProperty(prop)) {\n        JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        defineInferredProperty(prop, typeToInfer, null);\n      } else {\n        inferPropertyType(prop, propType, null, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..fba91b11 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,19 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (constraintObj.isRecordType()) {\n+  for (String prop : constraintObj.getOwnPropertyNames())  {\n+    if (!isPropertyTypeDeclared(prop)) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!hasProperty(prop)) {\n+        JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+        defineInferredProperty(prop, typeToInfer, null);\n+      } else {\n+        inferPropertyType(prop, propType, null, null);\n+      }\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}