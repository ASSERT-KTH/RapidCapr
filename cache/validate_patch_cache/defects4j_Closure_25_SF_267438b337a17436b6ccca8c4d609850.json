{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructorNode = n.getFirstChild();\n  scope = traverse(constructorNode, scope);\n  JSType constructorType = constructorNode.getJSType().restrictByNotNullOrUndefined();\n  if (constructorType == null) {\n    constructorType = unknownType;\n  }\n  JSType type = null;\n  FunctionType ct = constructorType.toMaybeFunctionType();\n  if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n    type = ct.getInstanceType().autobox();\n    // Special case for if..then, which allows its conditionally created\n    // instance to escape to the enclosing scope.\n    if (n.getParent() != null && n.getParent().isIf()) {\n      FlowScope.ConditionalAccumulator ifAcc = scope.getAccumulator(n.getParent().getBlock());\n      ifAcc.recordTypeChange(n.getFirstChild(), type);\n      if (n.getNext() != null && n.getNext().isQualifiedName()) {\n        ifAcc.recordTypeChange(n.getNext(), type);\n      }\n    }\n  } else if (constructorType.isFunctionType()) {\n    // Case where we construct an object from a function value.\n    type = constructorType.autobox();\n    if (type.isUnknownType()) {\n      type = getObjectLiteralType(n.getLastChild());\n    }\n  } else {\n    type = getObjectLiteralType(n.getLastChild());\n  }\n  if (type == null) {\n    type = objectType;\n  }\n  n.setJSType(type);\n  for (Node arg = constructorNode.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}\n\nprivate JSType getObjectLiteralType(Node objLit) {\n  // Try to infer {string|number}\n  staticTypeAnalyzer.analyzeObjectType(objLit, registry.getNativeType(JSTypeNative.OBJECT_TYPE));\n  return objLit.getJSType().autobox();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..4441d043 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,50 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructorNode = n.getFirstChild();\n+  scope = traverse(constructorNode, scope);\n+  JSType constructorType = constructorNode.getJSType().restrictByNotNullOrUndefined();\n+  if (constructorType == null) {\n+    constructorType = unknownType;\n+  }\n+  JSType type = null;\n+  FunctionType ct = constructorType.toMaybeFunctionType();\n+  if (ct != null && ct.isConstructor() && ct.getInstanceType() != null) {\n+    type = ct.getInstanceType().autobox();\n+    // Special case for if..then, which allows its conditionally created\n+    // instance to escape to the enclosing scope.\n+    if (n.getParent() != null && n.getParent().isIf()) {\n+      FlowScope.ConditionalAccumulator ifAcc = scope.getAccumulator(n.getParent().getBlock());\n+      ifAcc.recordTypeChange(n.getFirstChild(), type);\n+      if (n.getNext() != null && n.getNext().isQualifiedName()) {\n+        ifAcc.recordTypeChange(n.getNext(), type);\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+  } else if (constructorType.isFunctionType()) {\n+    // Case where we construct an object from a function value.\n+    type = constructorType.autobox();\n+    if (type.isUnknownType()) {\n+      type = getObjectLiteralType(n.getLastChild());\n     }\n-    return scope;\n+  } else {\n+    type = getObjectLiteralType(n.getLastChild());\n+  }\n+  if (type == null) {\n+    type = objectType;\n+  }\n+  n.setJSType(type);\n+  for (Node arg = constructorNode.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n   }\n+  return scope;\n+}\n+\n+private JSType getObjectLiteralType(Node objLit) {\n+  // Try to infer {string|number}\n+  staticTypeAnalyzer.analyzeObjectType(objLit, registry.getNativeType(JSTypeNative.OBJECT_TYPE));\n+  return objLit.getJSType().autobox();\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}