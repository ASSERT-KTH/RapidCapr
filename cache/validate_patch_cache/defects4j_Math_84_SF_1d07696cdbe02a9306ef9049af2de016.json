{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = contract(original, comparator);\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                simplex = contract(original, comparator);\n\n                // check convergence\n                if (best == simplex[0]) {\n                    return;\n                }\n            }\n        }\n    }\n    \n    private RealPointValuePair[] contract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair best = original[0];\n        RealPointValuePair[] contractedSimplex = simplex;\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            return contractedSimplex;\n        } else {\n            return reduce(original, comparator);\n        }\n    }\n\n    private RealPointValuePair[] reduce(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = original[0];\n        for (int i = 1; i < simplex.length; i++) {\n            final RealPointValuePair[] alternative = new RealPointValuePair[dimension + 1];\n            alternative[0] = best;\n            for (int j = 0; j < original.length; j++) {\n                if (j != i) {\n                    for (int k = 0; k < dimension; k++) {\n                        alternatePoint[k] =\n                                psi * (original[j].getPoint()[k] - original[i].getPoint()[k]);\n                        alternative[j + 1] = new RealPointValuePair(add(original[i].getPoint(), alternatePoint),\n                                                                Double.NaN);\n                    }\n                }\n            }\n            sortPairs(alternative, comparator);\n            simplex = alternative;\n            if (comparator.compare(simplex[0], best) < 0) {\n                return simplex;\n            }\n        }\n        return simplex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e3e92c0ea 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,23 +79,58 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, comparator);\n                 }\n \n-                return;\n+            } else {\n \n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                // compute the contracted simplex\n+                simplex = contract(original, comparator);\n \n-            // check convergence\n-                return;\n+                // check convergence\n+                if (best == simplex[0]) {\n+                    return;\n+                }\n             }\n-\n         }\n+    }\n+    \n+    private RealPointValuePair[] contract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair best = original[0];\n+        RealPointValuePair[] contractedSimplex = simplex;\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            return contractedSimplex;\n+        } else {\n+            return reduce(original, comparator);\n+        }\n+    }\n \n+    private RealPointValuePair[] reduce(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = original[0];\n+        for (int i = 1; i < simplex.length; i++) {\n+            final RealPointValuePair[] alternative = new RealPointValuePair[dimension + 1];\n+            alternative[0] = best;\n+            for (int j = 0; j < original.length; j++) {\n+                if (j != i) {\n+                    for (int k = 0; k < dimension; k++) {\n+                        alternatePoint[k] =\n+                                psi * (original[j].getPoint()[k] - original[i].getPoint()[k]);\n+                        alternative[j + 1] = new RealPointValuePair(add(original[i].getPoint(), alternatePoint),\n+                                                                Double.NaN);\n+                    }\n+                }\n+            }\n+            sortPairs(alternative, comparator);\n+            simplex = alternative;\n+            if (comparator.compare(simplex[0], best) < 0) {\n+                return simplex;\n+            }\n+        }\n+        return simplex;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}