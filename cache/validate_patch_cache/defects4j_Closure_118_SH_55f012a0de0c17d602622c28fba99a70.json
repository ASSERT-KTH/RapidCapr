{
    "patch": "// Maybe STRING, GETPROP, GET, SET\nif (NodeUtil.isGet(child)) {\n    StringBuilder sb = new StringBuilder();\n    Node getPropNode = null;\n    for (Node member = child.getFirstChild(); member != null; member = member.getNext()) {\n        if (getPropNode != null) {\n            sb.append('.');\n        }\n        sb.append(member.getString());\n        getPropNode = member;\n    }\n    child = getPropNode;\n    name = sb.toString();\n} else {\n    name = child.getString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..6594389c 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,22 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Maybe STRING, GETPROP, GET, SET\n+if (NodeUtil.isGet(child)) {\n+    StringBuilder sb = new StringBuilder();\n+    Node getPropNode = null;\n+    for (Node member = child.getFirstChild(); member != null; member = member.getNext()) {\n+        if (getPropNode != null) {\n+            sb.append('.');\n+        }\n+        sb.append(member.getString());\n+        getPropNode = member;\n+    }\n+    child = getPropNode;\n+    name = sb.toString();\n+} else {\n+    name = child.getString();\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}