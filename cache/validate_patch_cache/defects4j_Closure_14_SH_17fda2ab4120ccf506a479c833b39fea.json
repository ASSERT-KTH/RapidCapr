{
    "patch": "} else if (parent.getType() == Token.FINALLY) {\n      if (nextSibling != null) {\n        computeInsnTaint(fromNode, nextSibling);\n        cfa.createEdge(fromNode, Branch.UNCOND, nextSibling);\n      } else {\n        // The only case when a finally block has no immediately succeeding\n        // code is when the finally block is at the end of the main block\n        // (not inside another block like try-catch).\n        computeInsnTaint(fromNode, parent.getNext());\n        cfa.createEdge(fromNode, Branch.UNCOND, parent.getNext());\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..df958c93 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+} else if (parent.getType() == Token.FINALLY) {\n+      if (nextSibling != null) {\n+        computeInsnTaint(fromNode, nextSibling);\n+        cfa.createEdge(fromNode, Branch.UNCOND, nextSibling);\n+      } else {\n+        // The only case when a finally block has no immediately succeeding\n+        // code is when the finally block is at the end of the main block\n+        // (not inside another block like try-catch).\n+        computeInsnTaint(fromNode, parent.getNext());\n+        cfa.createEdge(fromNode, Branch.UNCOND, parent.getNext());\n+      }\n+    }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}