{
    "patch": "public class IRFactory extends Parser {\n    private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n        ImmutableSet.of(\"use strict\");\n\n    private final CompilerOptions options;\n    private final ErrorReporter errorReporter;\n    private final String sourceName;\n    private final SourceReader sourceReader;\n\n    // In order of decreasing specificity.\n    private static final ImmutableMap<Integer, Token> tokenMap =\n      ImmutableMap.<Integer, Token>builder()\n      .put(Token.NAME, Token.ASSIGN)\n      .put(Token.GETPROP, Token.ASSIGN)  // e.g. x.y = 2\n      .put(Token.GETELEM, Token.ASSIGN)  // e.g. x[y] = 2\n      .build();\n\n    public IRFactory(CompilerOptions options,\n                     ErrorReporter errorReporter,\n                     String sourceName,\n                     SourceReader sourceReader) {\n      super(options, errorReporter);\n      this.options = options;\n      this.errorReporter = errorReporter;\n      this.sourceName = sourceName;\n      this.sourceReader = sourceReader;\n    }\n\n    /**\n     * Creates a new node, preserving the relevant line number and char number\n     * information.\n     */\n    Node newNode(int type, int lineno) {\n      Node node = new Node(type);\n      node.setLineno(lineno);\n      return node;\n    }\n\n    Node newNode(int type, AstNode astNode) {\n      Node node = newNode(type, astNode.getLineno());\n      node.addChildToBack(astNode);\n      return node;\n    }\n\n    Node newNode(int type, AstNode left, AstNode right) {\n      Node node = newNode(type, left.getLineno());\n      node.addChildToBack(left);\n      node.addChildToBack(right);\n      return node;\n    }\n\n    Node newNode(int type, AstNode left, AstNode mid, AstNode right) {\n      Node node = newNode(type, left.getLineno());\n      node.addChildToBack(left);\n      node.addChildToBack(mid);\n      node.addChildToBack(right);\n      return node;\n    }\n\n    Node newNode(int type, String value) {\n      Node node = newNode(type);\n      node.setString(value);\n      return node;\n    }\n\n    private static final ImmutableSet<String> SIMPLE_OPS =\n      ImmutableSet.of(\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"!=\", \">\", \">=\", \"<\", \"<=\");\n\n    static {\n      checkState(SIMPLE_OPS.size() == Token.LAST_OPERATOR - Token.FIRST_OPERATOR);\n    }\n\n    Node newNode(Token token, AstNode left, AstNode right) {\n      int type = token.type;\n      if (SIMPLE_OPS.contains(token.getName())) {\n        type = Token.BITAND;\n      }\n      switch (token.getType()) {\n        case Token.ASSIGN:\n          if (left.getType() == Token.GETELEM) {\n            type = Token.SETELEM;\n          } else if (left.getType() == Token.GETPROP) {\n            type = Token.SETPROP;\n          }\n          break;\n        default:\n          if (tokenMap.containsKey(left.getType())) {\n            type = tokenMap.get(left.getType()).type;\n          }\n          break;\n      }\n\n      return newNode(type, left, right);\n    }\n\n    Node newString(String str) {\n      Node result = newNode(Token.STRING);\n      result.setString(str);\n      return result;\n    }\n\n    Node newName(String name) {\n      Node result = newNode(Token.NAME);\n      result.setString(name);\n      return result;\n    }\n\n    String getSourceString(int start, int end) {\n      return sourceReader.getString(start, end - start);\n    }\n\n    @Override\n    ErrorReporter getErrorReporter() {\n      return errorReporter;\n    }\n\n    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n      Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));\n      node.addChildToBack(transformBlock(loopNode.getBody()));\n      return node;\n    }\n\n    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node =\n          newNode(transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n      node.setLineno(callNode.getLineno());\n      node.setCharno(position2charno(leftParamPos));\n      return node;\n    }\n\n    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamedFunction = false;\n      if (name == null) {\n        isUnnamedFunction = true;\n        name = new Name(-1, \"\");\n      }\n      Node node = newNode(Token.FUNCTION, functionNode);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition()\n            + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.replaceChild(functionNode, newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp()\n          + functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;\n    }\n\n    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      return newNode(\n          Token.IF,\n          transform(statementNode.getCondition()),\n          transform(statementNode.getThenPart()),\n          transform(statementNode.getEls",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..658ae5c8 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,6 +385,122 @@ public class IRFactory {\n       }\n     }\n \n+public class IRFactory extends Parser {\n+    private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+        ImmutableSet.of(\"use strict\");\n+\n+    private final CompilerOptions options;\n+    private final ErrorReporter errorReporter;\n+    private final String sourceName;\n+    private final SourceReader sourceReader;\n+\n+    // In order of decreasing specificity.\n+    private static final ImmutableMap<Integer, Token> tokenMap =\n+      ImmutableMap.<Integer, Token>builder()\n+      .put(Token.NAME, Token.ASSIGN)\n+      .put(Token.GETPROP, Token.ASSIGN)  // e.g. x.y = 2\n+      .put(Token.GETELEM, Token.ASSIGN)  // e.g. x[y] = 2\n+      .build();\n+\n+    public IRFactory(CompilerOptions options,\n+                     ErrorReporter errorReporter,\n+                     String sourceName,\n+                     SourceReader sourceReader) {\n+      super(options, errorReporter);\n+      this.options = options;\n+      this.errorReporter = errorReporter;\n+      this.sourceName = sourceName;\n+      this.sourceReader = sourceReader;\n+    }\n+\n+    /**\n+     * Creates a new node, preserving the relevant line number and char number\n+     * information.\n+     */\n+    Node newNode(int type, int lineno) {\n+      Node node = new Node(type);\n+      node.setLineno(lineno);\n+      return node;\n+    }\n+\n+    Node newNode(int type, AstNode astNode) {\n+      Node node = newNode(type, astNode.getLineno());\n+      node.addChildToBack(astNode);\n+      return node;\n+    }\n+\n+    Node newNode(int type, AstNode left, AstNode right) {\n+      Node node = newNode(type, left.getLineno());\n+      node.addChildToBack(left);\n+      node.addChildToBack(right);\n+      return node;\n+    }\n+\n+    Node newNode(int type, AstNode left, AstNode mid, AstNode right) {\n+      Node node = newNode(type, left.getLineno());\n+      node.addChildToBack(left);\n+      node.addChildToBack(mid);\n+      node.addChildToBack(right);\n+      return node;\n+    }\n+\n+    Node newNode(int type, String value) {\n+      Node node = newNode(type);\n+      node.setString(value);\n+      return node;\n+    }\n+\n+    private static final ImmutableSet<String> SIMPLE_OPS =\n+      ImmutableSet.of(\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"!=\", \">\", \">=\", \"<\", \"<=\");\n+\n+    static {\n+      checkState(SIMPLE_OPS.size() == Token.LAST_OPERATOR - Token.FIRST_OPERATOR);\n+    }\n+\n+    Node newNode(Token token, AstNode left, AstNode right) {\n+      int type = token.type;\n+      if (SIMPLE_OPS.contains(token.getName())) {\n+        type = Token.BITAND;\n+      }\n+      switch (token.getType()) {\n+        case Token.ASSIGN:\n+          if (left.getType() == Token.GETELEM) {\n+            type = Token.SETELEM;\n+          } else if (left.getType() == Token.GETPROP) {\n+            type = Token.SETPROP;\n+          }\n+          break;\n+        default:\n+          if (tokenMap.containsKey(left.getType())) {\n+            type = tokenMap.get(left.getType()).type;\n+          }\n+          break;\n+      }\n+\n+      return newNode(type, left, right);\n+    }\n+\n+    Node newString(String str) {\n+      Node result = newNode(Token.STRING);\n+      result.setString(str);\n+      return result;\n+    }\n+\n+    Node newName(String name) {\n+      Node result = newNode(Token.NAME);\n+      result.setString(name);\n+      return result;\n+    }\n+\n+    String getSourceString(int start, int end) {\n+      return sourceReader.getString(start, end - start);\n+    }\n+\n+    @Override\n+    ErrorReporter getErrorReporter() {\n+      return errorReporter;\n+    }\n+\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -497,12 +613,11 @@ public class IRFactory {\n \n     @Override\n     Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n+      Node node =\n+          newNode(transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n       for (AstNode child : callNode.getArguments()) {\n         node.addChildToBack(transform(child));\n       }\n-\n       int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n       node.setLineno(callNode.getLineno());\n       node.setCharno(position2charno(leftParamPos));\n@@ -512,13 +627,12 @@ public class IRFactory {\n     @Override\n     Node processFunctionNode(FunctionNode functionNode) {\n       Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n+      boolean isUnnamedFunction = false;\n       if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n+        name = new Name(-1, \"\");\n       }\n-      Node node = newNode(Token.FUNCTION);\n+      Node node = newNode(Token.FUNCTION, functionNode);\n       Node newName = transform(name);\n       if (isUnnamedFunction) {\n         // Old Rhino tagged the empty name node with the line number of the\n@@ -527,12 +641,12 @@ public class IRFactory {\n         // TODO(bowdidge) Mark line number of paren correctly.\n         // Same problem as below - the left paren might not be on the\n         // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n+        int lpColumn = functionNode.getAbsolutePosition()\n+            + functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n       }\n \n-      node.addChildToBack(newName);\n+      node.replaceChild(functionNode, newName);\n       Node lp = newNode(Token.LP);\n       // The left paren's complicated because it's not represented by an\n       // AstNode, so there's nothing that has the actual line number that it\n@@ -546,8 +660,8 @@ public class IRFactory {\n       } else {\n         lp.setLineno(functionNode.getLineno());\n       }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+      int lparenCharno = functionNode.getLp()\n+          + functionNode.getAbsolutePosition();\n \n       lp.setCharno(position2charno(lparenCharno));\n       for (AstNode param : functionNode.getParams()) {\n@@ -558,9 +672,17 @@ public class IRFactory {\n       Node bodyNode = transform(functionNode.getBody());\n       parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n-     return node;\n+      return node;\n     }\n \n+    @Override\n+    Node processIfStatement(IfStatement statementNode) {\n+      return newNode(\n+          Token.IF,\n+          transform(statementNode.getCondition()),\n+          transform(statementNode.getThenPart()),\n+          transform(statementNode.getEls\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}