{
    "patch": "final Vector3D negatedDirection = direction.negate();\nVector3D newOrigin = Vector3D.ZERO;\nif (negatedDirection.getX() != 0) {\n    newOrigin = new Vector3D(-zero.getX() / negatedDirection.getX(), 0, 0);\n} else if (negatedDirection.getY() != 0) {\n    newOrigin = new Vector3D(0, -zero.getY() / negatedDirection.getY(), 0);\n} else if (negatedDirection.getZ() != 0) {\n    newOrigin = new Vector3D(0, 0, -zero.getZ() / negatedDirection.getZ());\n}\nfinal Line reverted = new Line(newOrigin, negatedDirection);\nreturn reverted;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..e961ba219 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,17 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+final Vector3D negatedDirection = direction.negate();\n+Vector3D newOrigin = Vector3D.ZERO;\n+if (negatedDirection.getX() != 0) {\n+    newOrigin = new Vector3D(-zero.getX() / negatedDirection.getX(), 0, 0);\n+} else if (negatedDirection.getY() != 0) {\n+    newOrigin = new Vector3D(0, -zero.getY() / negatedDirection.getY(), 0);\n+} else if (negatedDirection.getZ() != 0) {\n+    newOrigin = new Vector3D(0, 0, -zero.getZ() / negatedDirection.getZ());\n+}\n+final Line reverted = new Line(newOrigin, negatedDirection);\n+return reverted;\n         return reverted;\n     }\n ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}