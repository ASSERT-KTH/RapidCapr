{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, \n    FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Check if either endpoint is a root\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        ret = min;\n    } else if (yMax == 0.0) {\n        setResult(max, 0);\n        ret = max;\n    } else {\n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // Check if either value is close to a zero\n            if (Math.abs(yMin) < Math.abs(yMax)) {\n                ret = min;\n            } else {\n                ret = max;\n            }\n            setResult(ret, 0);\n        } else {\n            // Solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // Verify that the result is within the interval\n            if (ret < min || ret > max) {\n                throw new NonBracketedException(ret, min, max, yMin, yMax, \n                    \"Solver returned a value outside the bracketing interval.\");\n            }\n        }\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..48245a620 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,48 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n+public double solve(double min, double max) throws MaxIterationsExceededException, \n+    FunctionEvaluationException {\n+    \n+    clearResult();\n+    verifyInterval(min, max);\n+    \n+    double ret = Double.NaN;\n+    \n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    \n+    // Check if either endpoint is a root\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        ret = min;\n+    } else if (yMax == 0.0) {\n+        setResult(max, 0);\n+        ret = max;\n+    } else {\n         // Verify bracketing\n         double sign = yMin * yMax;\n         if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            // Check if either value is close to a zero\n+            if (Math.abs(yMin) < Math.abs(yMax)) {\n+                ret = min;\n+            } else {\n+                ret = max;\n+            }\n+            setResult(ret, 0);\n         } else {\n-            // solve using only the first endpoint as initial guess\n+            // Solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // Verify that the result is within the interval\n+            if (ret < min || ret > max) {\n+                throw new NonBracketedException(ret, min, max, yMin, yMax, \n+                    \"Solver returned a value outside the bracketing interval.\");\n+            }\n         }\n-\n-        return ret;\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}