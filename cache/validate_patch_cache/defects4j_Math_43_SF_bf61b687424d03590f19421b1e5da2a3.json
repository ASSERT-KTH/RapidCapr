{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (meanImpl instanceof Mean) {\n        meanImpl.increment(value);\n        if (varianceImpl instanceof Variance) {\n            varianceImpl.increment(value);\n        } else if (varianceImpl != null) {\n            double oldMean = meanImpl.getResult();\n            double oldVariance = varianceImpl.getResult();\n            double delta = value - oldMean;\n            double newMean = oldMean + delta / n;\n            double newVariance = (n - 1) * oldVariance / n + delta * delta / n / (n - 1);\n            varianceImpl.increment(newVariance);\n        }\n        if (geoMeanImpl instanceof GeometricMean) {\n            geoMeanImpl.increment(value > 0 ? Math.log(value) : Double.NaN);\n        } else if (geoMeanImpl != null) {\n            geoMeanImpl.increment(Math.log(value));\n        }\n    } else {\n        if (meanImpl == null) {\n            meanImpl = new Mean();\n        }\n        double oldMean = meanImpl.getResult();\n        double delta = value - oldMean;\n        meanImpl.increment(delta / n);\n        if (varianceImpl instanceof Variance) {\n            varianceImpl.increment(value);\n        } else if (varianceImpl != null) {\n            double oldVariance = varianceImpl.getResult();\n            double newMean = oldMean + delta / n;\n            double newVariance = (n - 2) * oldVariance / (n - 1) + delta * delta / n / (n - 2);\n            varianceImpl.increment(newVariance);\n        }\n        if (geoMeanImpl instanceof GeometricMean) {\n            geoMeanImpl.increment(value > 0 ? Math.log(value) : Double.NaN);\n        } else if (geoMeanImpl != null) {\n            geoMeanImpl.increment(Math.log(value));\n        }\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..7e2c86cb4 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,56 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (meanImpl instanceof Mean) {\n+        meanImpl.increment(value);\n+        if (varianceImpl instanceof Variance) {\n+            varianceImpl.increment(value);\n+        } else if (varianceImpl != null) {\n+            double oldMean = meanImpl.getResult();\n+            double oldVariance = varianceImpl.getResult();\n+            double delta = value - oldMean;\n+            double newMean = oldMean + delta / n;\n+            double newVariance = (n - 1) * oldVariance / n + delta * delta / n / (n - 1);\n+            varianceImpl.increment(newVariance);\n+        }\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            geoMeanImpl.increment(value > 0 ? Math.log(value) : Double.NaN);\n+        } else if (geoMeanImpl != null) {\n+            geoMeanImpl.increment(Math.log(value));\n+        }\n+    } else {\n+        if (meanImpl == null) {\n+            meanImpl = new Mean();\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+        double oldMean = meanImpl.getResult();\n+        double delta = value - oldMean;\n+        meanImpl.increment(delta / n);\n+        if (varianceImpl instanceof Variance) {\n             varianceImpl.increment(value);\n+        } else if (varianceImpl != null) {\n+            double oldVariance = varianceImpl.getResult();\n+            double newMean = oldMean + delta / n;\n+            double newVariance = (n - 2) * oldVariance / (n - 1) + delta * delta / n / (n - 2);\n+            varianceImpl.increment(newVariance);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            geoMeanImpl.increment(value > 0 ? Math.log(value) : Double.NaN);\n+        } else if (geoMeanImpl != null) {\n+            geoMeanImpl.increment(Math.log(value));\n         }\n-        n++;\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}