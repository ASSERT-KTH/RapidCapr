{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields || (savedFields != iSavedFields && Arrays.equals(savedFields, iSavedFields))) {\n                throw e;\n            }\n            iSavedFields = savedFields;\n            iSavedFieldsCount = count;\n            iSavedFieldsShared = false;\n            return computeMillis(true, text);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c08e4873 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields || (savedFields != iSavedFields && Arrays.equals(savedFields, iSavedFields))) {\n+                throw e;\n+            }\n+            iSavedFields = savedFields;\n+            iSavedFieldsCount = count;\n+            iSavedFieldsShared = false;\n+            return computeMillis(true, text);\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}