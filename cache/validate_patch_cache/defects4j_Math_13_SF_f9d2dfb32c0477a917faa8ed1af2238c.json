{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = d.getRowDimension();\n\n    // Compute the square root of the diagonal matrix\n    double[] sqrtDiagonal = new double[n];\n    boolean allPositive = true;\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        } else if (eigenvalue == 0) {\n            sqrtDiagonal[i] = 0;\n        } else {\n            sqrtDiagonal[i] = Math.sqrt(eigenvalue);\n            allPositive = false;\n        }\n    }\n\n    // If all eigenvalues are positive, simply compute the square root of the matrix\n    if (allPositive) {\n        RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtDiagonal);\n        return v.multiply(sqrtD).multiply(v.transpose());\n    }\n\n    // If there are non-positive eigenvalues, compute the absolute value of the matrix\n    RealMatrix absM = m.scalarMultiply(-1);\n    RealMatrix absSqrtM = squareRoot(absM);\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtDiagonal);\n    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n\n    // If the determinant of the matrix is positive, compute the square root of the absolute value\n    double det = m.getDeterminant();\n    if (det > 0) {\n        return sqrtSqrtM(absSqrtM, sqrtM);\n    }\n\n    // If the determinant of the matrix is negative, compute the square root of the negative absolute value\n    RealMatrix negSqrtM = absSqrtM.scalarMultiply(-1);\n    return sqrtSqrtM(negSqrtM, sqrtM);\n}\n\nprivate RealMatrix sqrtSqrtM(RealMatrix sqrtAbsM, RealMatrix sqrtM) {\n    EigenDecomposition dec = new EigenDecomposition(sqrtM);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n    RealMatrix eigenValuesSqrt = MatrixUtils.createRealDiagonalMatrix(sqrtDiagonal);\n    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectors.transpose()).multiply(sqrtAbsM)\n            .multiply(eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectors.transpose()));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ff5d03564 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,56 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = d.getRowDimension();\n+\n+    // Compute the square root of the diagonal matrix\n+    double[] sqrtDiagonal = new double[n];\n+    boolean allPositive = true;\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        } else if (eigenvalue == 0) {\n+            sqrtDiagonal[i] = 0;\n+        } else {\n+            sqrtDiagonal[i] = Math.sqrt(eigenvalue);\n+            allPositive = false;\n+        }\n+    }\n+\n+    // If all eigenvalues are positive, simply compute the square root of the matrix\n+    if (allPositive) {\n+        RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtDiagonal);\n+        return v.multiply(sqrtD).multiply(v.transpose());\n+    }\n+\n+    // If there are non-positive eigenvalues, compute the absolute value of the matrix\n+    RealMatrix absM = m.scalarMultiply(-1);\n+    RealMatrix absSqrtM = squareRoot(absM);\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtDiagonal);\n+    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+\n+    // If the determinant of the matrix is positive, compute the square root of the absolute value\n+    double det = m.getDeterminant();\n+    if (det > 0) {\n+        return sqrtSqrtM(absSqrtM, sqrtM);\n     }\n+\n+    // If the determinant of the matrix is negative, compute the square root of the negative absolute value\n+    RealMatrix negSqrtM = absSqrtM.scalarMultiply(-1);\n+    return sqrtSqrtM(negSqrtM, sqrtM);\n+}\n+\n+private RealMatrix sqrtSqrtM(RealMatrix sqrtAbsM, RealMatrix sqrtM) {\n+    EigenDecomposition dec = new EigenDecomposition(sqrtM);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+    RealMatrix eigenValuesSqrt = MatrixUtils.createRealDiagonalMatrix(sqrtDiagonal);\n+    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectors.transpose()).multiply(sqrtAbsM)\n+            .multiply(eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectors.transpose()));\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}