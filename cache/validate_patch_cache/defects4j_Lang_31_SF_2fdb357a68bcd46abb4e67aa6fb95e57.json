{
    "patch": "public class StringUtils {\n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        final int len = str.length;\n        final int searchLen = searchChars.length;\n        final int[] search = new int[Character.MAX_VALUE + 1];\n        for (int i = 0; i < searchLen; i++) {\n            search[searchChars[i]] = 1;\n        }\n        for (int i = 0; i < len; i++) {\n            if (search[str[i]] == 1) {\n                // Java uses UTF-16 encoding for strings, which means that Unicode code points\n                // outside the Basic Multilingual Plane (BMP) are represented as surrogate pairs.\n                // The following line checks if the current character is the first element\n                // of a surrogate pair, and if so, it checks if the next element matches the\n                // second element of the surrogate pair.\n                if (Character.isHighSurrogate(str[i]) && i + 1 < len\n                        && Character.isLowSurrogate(str[i + 1])\n                        && search[Character.toCodePoint(str[i], str[i + 1])] == 1) {\n                    return true;\n                } else if (!Character.isHighSurrogate(str[i])\n                        || i + 1 >= len\n                        || !Character.isLowSurrogate(str[i + 1])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..cbffc29a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,38 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        final int len = str.length;\n+        final int searchLen = searchChars.length;\n+        final int[] search = new int[Character.MAX_VALUE + 1];\n+        for (int i = 0; i < searchLen; i++) {\n+            search[searchChars[i]] = 1;\n+        }\n+        for (int i = 0; i < len; i++) {\n+            if (search[str[i]] == 1) {\n+                // Java uses UTF-16 encoding for strings, which means that Unicode code points\n+                // outside the Basic Multilingual Plane (BMP) are represented as surrogate pairs.\n+                // The following line checks if the current character is the first element\n+                // of a surrogate pair, and if so, it checks if the next element matches the\n+                // second element of the surrogate pair.\n+                if (Character.isHighSurrogate(str[i]) && i + 1 < len\n+                        && Character.isLowSurrogate(str[i + 1])\n+                        && search[Character.toCodePoint(str[i], str[i + 1])] == 1) {\n+                    return true;\n+                } else if (!Character.isHighSurrogate(str[i])\n+                        || i + 1 >= len\n+                        || !Character.isLowSurrogate(str[i + 1])) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}