{
    "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    if (f == null) {\n        throw new NullPointerException(\"The function f cannot be null.\");\n    }\n    if (min > max) {\n        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n    }\n    if (initial < min || initial > max) {\n        initial = UnivariateRealSolverUtils.midpoint(min, max);\n    }\n    double result;\n    try {\n        result = solve(f, min, max);\n    } catch (NullPointerException e) {\n        result = solve(f, min, max, initial);\n    }\n    if (Double.isNaN(result)) {\n        throw new FunctionEvaluationException(\"Could not find a solution within the given interval and initial value.\");\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..94fd6b94d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,10 +67,28 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    if (f == null) {\n+        throw new NullPointerException(\"The function f cannot be null.\");\n     }\n+    if (min > max) {\n+        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n+    }\n+    if (initial < min || initial > max) {\n+        initial = UnivariateRealSolverUtils.midpoint(min, max);\n+    }\n+    double result;\n+    try {\n+        result = solve(f, min, max);\n+    } catch (NullPointerException e) {\n+        result = solve(f, min, max, initial);\n+    }\n+    if (Double.isNaN(result)) {\n+        throw new FunctionEvaluationException(\"Could not find a solution within the given interval and initial value.\");\n+    }\n+    return result;\n+}\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)",
    "result_reason": "error: no suitable constructor found for FunctionEvaluationException(String)",
    "test_result": "ERROR"
}