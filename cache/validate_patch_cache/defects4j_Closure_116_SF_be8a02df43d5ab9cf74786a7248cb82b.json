{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    Node arg = callNode.getFirstChild().getNext();\n    Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (arg == null || !arg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        arg = arg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    while (param != null && arg != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (param.isName()) {\n        if (arg.isSpread()) {\n          // It is not possible to check for side effects of a spread expression.\n          return CanInlineResult.NO;\n        }\n        if (arg.isFunction()) {\n          return CanInlineResult.NO;\n        }\n        if (NodeUtil.mayEffectMutableState(arg, compiler)\n            && NodeUtil.getNameReferenceCount(\n                block, param.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        param = param.getNext();\n        arg = arg.getNext();\n      } else {\n        Preconditions.checkState(param.isRest());\n        Node name = param.getFirstChild();\n        if (NodeUtil.getNameReferenceCount(\n                block, name.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        param = param.getNext();\n        while (arg != null) {\n          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n            return CanInlineResult.NO;\n          }\n          arg = arg.getNext();\n        }\n      }\n    }\n\n    if (param == null && arg != null) {\n      if (NodeUtil.isImmutableValue(arg)) {\n        arg = arg.getNext();\n        while (arg != null) {\n          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n            return CanInlineResult.NO;\n          }\n          arg = arg.getNext();\n        }\n      } else {\n        return CanInlineResult.NO;\n      }\n    } else if (arg == null && param != null) {\n      // There are more parameters than arguments\n      while (param != null) {\n        if (param.isName()) {\n          if (NodeUtil.getNameReferenceCount(\n                  block, param.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          Preconditions.checkState(param.isRest());\n        }\n        param = param.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..1e80052b 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,7 +686,7 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n@@ -694,9 +694,8 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node arg = callNode.getFirstChild().getNext();\n+    Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n@@ -704,49 +703,79 @@ class FunctionInjector {\n     if (!callNode.getFirstChild().isName()) {\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n         // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+        if (arg == null || !arg.isThis()) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        arg = arg.getNext();\n       } else {\n         // \".apply\" call should be filtered before this.\n         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n+    while (param != null && arg != null) {\n       // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+      if (param.isName()) {\n+        if (arg.isSpread()) {\n+          // It is not possible to check for side effects of a spread expression.\n+          return CanInlineResult.NO;\n+        }\n+        if (arg.isFunction()) {\n+          return CanInlineResult.NO;\n+        }\n+        if (NodeUtil.mayEffectMutableState(arg, compiler)\n+            && NodeUtil.getNameReferenceCount(\n+                block, param.getString()) > 1) {\n+          return CanInlineResult.NO;\n+        }\n+        param = param.getNext();\n+        arg = arg.getNext();\n+      } else {\n+        Preconditions.checkState(param.isRest());\n+        Node name = param.getFirstChild();\n+        if (NodeUtil.getNameReferenceCount(\n+                block, name.getString()) > 1) {\n+          return CanInlineResult.NO;\n+        }\n+        param = param.getNext();\n+        while (arg != null) {\n+          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n             return CanInlineResult.NO;\n           }\n+          arg = arg.getNext();\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n       }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    if (param == null && arg != null) {\n+      if (NodeUtil.isImmutableValue(arg)) {\n+        arg = arg.getNext();\n+        while (arg != null) {\n+          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+            return CanInlineResult.NO;\n+          }\n+          arg = arg.getNext();\n+        }\n+      } else {\n+        return CanInlineResult.NO;\n+      }\n+    } else if (arg == null && param != null) {\n+      // There are more parameters than arguments\n+      while (param != null) {\n+        if (param.isName()) {\n+          if (NodeUtil.getNameReferenceCount(\n+                  block, param.getString()) > 1) {\n+            return CanInlineResult.NO;\n+          }\n+        } else {\n+          Preconditions.checkState(param.isRest());\n         }\n-        cArg = cArg.getNext();\n+        param = param.getNext();\n       }\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}