{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final long instantMillis = instantLocal + DateTimeZone.getDefault().getOffset(instantLocal);\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantMillis);\n    // get the previous transition\n    final long prevTransition = previousTransition(instantMillis);\n    // get the next transition\n    final long nextTransition = nextTransition(instantMillis);\n    final boolean inGap;\n    final boolean inOverlap;\n    if (prevTransition == nextTransition) {\n        // If the previous and next transition points are the same, we are not in a transition.\n        inGap = false;\n        inOverlap = false;\n    } else {\n        // Otherwise, we are in a transition.\n        inGap = initialOffset < getOffset(nextTransition);\n        inOverlap = initialOffset >= getOffset(nextTransition) &&\n                initialOffset < getOffset(prevTransition);\n    }\n    if (inGap) {\n        // We are in a gap.\n        // If we are in the gap, we need to use the previous offset.\n        return getOffset(prevTransition);\n    } else if (inOverlap) {\n        // We are in an overlap.\n        final int prevOffset = getOffset(prevTransition);\n        final int nextOffset = getOffset(nextTransition);\n        return initialOffset < ((prevOffset + nextOffset) / 2) ? prevOffset : nextOffset;\n    } else {\n        return initialOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..41805db9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final long instantMillis = instantLocal + DateTimeZone.getDefault().getOffset(instantLocal);\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantMillis);\n+    // get the previous transition\n+    final long prevTransition = previousTransition(instantMillis);\n+    // get the next transition\n+    final long nextTransition = nextTransition(instantMillis);\n+    final boolean inGap;\n+    final boolean inOverlap;\n+    if (prevTransition == nextTransition) {\n+        // If the previous and next transition points are the same, we are not in a transition.\n+        inGap = false;\n+        inOverlap = false;\n+    } else {\n+        // Otherwise, we are in a transition.\n+        inGap = initialOffset < getOffset(nextTransition);\n+        inOverlap = initialOffset >= getOffset(nextTransition) &&\n+                initialOffset < getOffset(prevTransition);\n     }\n+    if (inGap) {\n+        // We are in a gap.\n+        // If we are in the gap, we need to use the previous offset.\n+        return getOffset(prevTransition);\n+    } else if (inOverlap) {\n+        // We are in an overlap.\n+        final int prevOffset = getOffset(prevTransition);\n+        final int nextOffset = getOffset(nextTransition);\n+        return initialOffset < ((prevOffset + nextOffset) / 2) ? prevOffset : nextOffset;\n+    } else {\n+        return initialOffset;\n+    }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2010-01-01T23:00:00.000",
    "test_result": "FAIL"
}