{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double SMALL = 10e-15;\n    final double BIG   = 1.0 / SMALL;\n    final double UPPER = 100000;\n    final double LOWER = 1e-08;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0.0;\n    }\n    if (x >= UPPER) {\n        return 1.0;\n    }\n\n    if (x < a + 1) {\n        return regularizedGammaStep1(a, x);\n    }\n\n    return regularizedGammaStep2(a, x);\n\n}\n\nprivate static double regularizedGammaStep1(double a, double x) {\n\n    double r = a;\n    double c = 1.0 / a;\n    double d = 1.0 / (1 + a * (1 - x));\n    double h = d;\n\n    for (int n = 1; n <= 100; ++n) {\n        double an = n * (n - a);\n        r += 2;\n        c = -(r - 2) * c / an;\n        d = (1 + an / (r * (r - 1))) * d;\n        h = d * c;\n        if (Math.abs(h - 1) <= SMALL) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n        }\n    }\n    throw new RuntimeException(\"RG Step 1 didn't converge\");\n}\n\nprivate static double regularizedGammaStep2(double a, double x) {\n    double ln = Math.log(x);\n    double a1 = 1 / a;\n    double lna1 = Math.log(a1);\n    double b1 = (ln - lna1) * a + lnGamma(a);\n\n    double c1 = 1.0 / a;\n\n    double sum = 1.0;\n    double p = 0;\n\n    for (int i = 1; i <= 100; ++i) {\n        double b = b1 + p;\n        double c = c1;\n        double dao = i * a1;\n        double a2 = -dao + i + a;\n        double c2 = 1.0 / (dao * i);\n\n        p = b * c + 1;\n        double an = p * c2;\n        sum += an;\n\n        if (an / sum < SMALL) {\n            return Math.exp(-x + a * ln - logGamma(a)) * sum;\n        }\n    }\n\n    throw new RuntimeException(\"RG Step 2 didn't converge\");\n}\n\nprivate static double logGamma(double x) {\n    double ret;\n    double[] coeff = new double[] {\n            76.18009172947146,\n            -86.50532032941677,\n            24.01409824083091,\n            -1.231739572450155,\n            0.1208650973866179e-2,\n            -0.5395239384953e-5\n    };\n    double ser = 1.000000000190015;\n    double y = x;\n    double tmp = x + 5.5;\n    tmp -= (x + .5) * Math.log(tmp);\n    double tmp2 = 1.000000000190015;\n    for (int i = 0; i <= 5; ++i) {\n        tmp2 += coeff[i] / ++y;\n        ser *= tmp2;\n    }\n    ret = -tmp + Math.log(2.5066282746310005 * ser / x);\n    return ret;\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e0dbe081a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,103 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double SMALL = 10e-15;\n+    final double BIG   = 1.0 / SMALL;\n+    final double UPPER = 100000;\n+    final double LOWER = 1e-08;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0.0;\n+    }\n+    if (x >= UPPER) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1) {\n+        return regularizedGammaStep1(a, x);\n+    }\n+\n+    return regularizedGammaStep2(a, x);\n+\n+}\n+\n+private static double regularizedGammaStep1(double a, double x) {\n+\n+    double r = a;\n+    double c = 1.0 / a;\n+    double d = 1.0 / (1 + a * (1 - x));\n+    double h = d;\n+\n+    for (int n = 1; n <= 100; ++n) {\n+        double an = n * (n - a);\n+        r += 2;\n+        c = -(r - 2) * c / an;\n+        d = (1 + an / (r * (r - 1))) * d;\n+        h = d * c;\n+        if (Math.abs(h - 1) <= SMALL) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+        }\n+    }\n+    throw new RuntimeException(\"RG Step 1 didn't converge\");\n+}\n+\n+private static double regularizedGammaStep2(double a, double x) {\n+    double ln = Math.log(x);\n+    double a1 = 1 / a;\n+    double lna1 = Math.log(a1);\n+    double b1 = (ln - lna1) * a + lnGamma(a);\n+\n+    double c1 = 1.0 / a;\n+\n+    double sum = 1.0;\n+    double p = 0;\n+\n+    for (int i = 1; i <= 100; ++i) {\n+        double b = b1 + p;\n+        double c = c1;\n+        double dao = i * a1;\n+        double a2 = -dao + i + a;\n+        double c2 = 1.0 / (dao * i);\n+\n+        p = b * c + 1;\n+        double an = p * c2;\n+        sum += an;\n+\n+        if (an / sum < SMALL) {\n+            return Math.exp(-x + a * ln - logGamma(a)) * sum;\n+        }\n+    }\n+\n+    throw new RuntimeException(\"RG Step 2 didn't converge\");\n+}\n+\n+private static double logGamma(double x) {\n+    double ret;\n+    double[] coeff = new double[] {\n+            76.18009172947146,\n+            -86.50532032941677,\n+            24.01409824083091,\n+            -1.231739572450155,\n+            0.1208650973866179e-2,\n+            -0.5395239384953e-5\n+    };\n+    double ser = 1.000000000190015;\n+    double y = x;\n+    double tmp = x + 5.5;\n+    tmp -= (x + .5) * Math.log(tmp);\n+    double tmp2 = 1.000000000190015;\n+    for (int i = 0; i <= 5; ++i) {\n+        tmp2 += coeff[i] / ++y;\n+        ser *= tmp2;\n+    }\n+    ret = -tmp + Math.log(2.5066282746310005 * ser / x);\n+    return ret;\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}