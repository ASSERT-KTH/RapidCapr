{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.mayHaveSideEffects(n)) {\n      // if this function definition may have side-effects (such as code\n      // generation), then don't traverse it because traversing it now might\n      // interfere with codegen later. E.g., in\n      // var f = function() { return 1; };\n      // a(); f(); b();\n      // if we traverse f(), then we'll move its definition to the top\n      // level, and we'll end up with\n      // var f; a(); f(); b(); f=function(){return1};\n      // f will be invoked prematurely.\n      return false;\n    }\n    if (n.isFunction()) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node getTarget = parent.getFirstChild();\n        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        boolean isLhsGetProp = NodeUtil.isGet(lhs);\n        if (isLhsGetProp) {\n          Node llhs = lhs.getFirstChild();\n          isLhsGetProp = llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\");\n        }\n        if (isLhsGetProp) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..655b1e23 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,85 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (NodeUtil.mayHaveSideEffects(n)) {\n+      // if this function definition may have side-effects (such as code\n+      // generation), then don't traverse it because traversing it now might\n+      // interfere with codegen later. E.g., in\n+      // var f = function() { return 1; };\n+      // a(); f(); b();\n+      // if we traverse f(), then we'll move its definition to the top\n+      // level, and we'll end up with\n+      // var f; a(); f(); b(); f=function(){return1};\n+      // f will be invoked prematurely.\n+      return false;\n+    }\n+    if (n.isFunction()) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node getTarget = parent.getFirstChild();\n+        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+    }\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        boolean isLhsGetProp = NodeUtil.isGet(lhs);\n+        if (isLhsGetProp) {\n+          Node llhs = lhs.getFirstChild();\n+          isLhsGetProp = llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\");\n+        }\n+        if (isLhsGetProp) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}