{
    "patch": "public static boolean containsAny(final CharSequence cs, final char... searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    final int csLength = cs.length();\n    final int searchLength = searchChars.length;\n    if (csLength == 0 || searchLength == 0) {\n        return false;\n    }\n    final char[] charArray = cs.toString().toCharArray();\n    final int csEnd = charArray.length - 1;\n    final Set<Integer> supplementaryCodePoints = new HashSet<Integer>();\n    for (int i = 0; i < csLength; i++) {\n        final char ch = charArray[i];\n        if (Character.isHighSurrogate(ch) && i < csEnd) {\n            final char ch2 = charArray[i + 1];\n            if (Character.isSurrogatePair(ch, ch2)) {\n                final int codePoint = Character.toCodePoint(ch, ch2);\n                supplementaryCodePoints.add(codePoint);\n            }\n        }\n    }\n    for (int i = 0; i < searchLength; i++) {\n        final char ch = searchChars[i];\n        if (ch <= Character.MAX_VALUE) {\n            if (cs.toString().indexOf(ch) != -1) {\n                return true;\n            }\n        } else if (supplementaryCodePoints.contains((int)ch)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..4a186421 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence cs, final char... searchChars) {\n+    if (cs == null || searchChars == null) {\n+        return false;\n+    }\n+    final int csLength = cs.length();\n+    final int searchLength = searchChars.length;\n+    if (csLength == 0 || searchLength == 0) {\n+        return false;\n+    }\n+    final char[] charArray = cs.toString().toCharArray();\n+    final int csEnd = charArray.length - 1;\n+    final Set<Integer> supplementaryCodePoints = new HashSet<Integer>();\n+    for (int i = 0; i < csLength; i++) {\n+        final char ch = charArray[i];\n+        if (Character.isHighSurrogate(ch) && i < csEnd) {\n+            final char ch2 = charArray[i + 1];\n+            if (Character.isSurrogatePair(ch, ch2)) {\n+                final int codePoint = Character.toCodePoint(ch, ch2);\n+                supplementaryCodePoints.add(codePoint);\n+            }\n+        }\n+    }\n+    for (int i = 0; i < searchLength; i++) {\n+        final char ch = searchChars[i];\n+        if (ch <= Character.MAX_VALUE) {\n+            if (cs.toString().indexOf(ch) != -1) {\n+                return true;\n+            }\n+        } else if (supplementaryCodePoints.contains((int)ch)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}