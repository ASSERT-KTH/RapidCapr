{
    "patch": "    if (NodeUtil.isGetOrSetKey(function.getParent())){\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    boolean isGenerator = NodeUtil.isGeneratorFunction(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      int lastIndex = argList.getChildCount() - 1;\n      while ((lastArg = argList.getChildAt(lastIndex)) != null) {\n        // Generators need references to their .send, .throw, and .return methods.\n        if (!isGenerator && lastArg.isVarArgs() && canOptimizeArguments(objective)) {\n          return;\n        }\n\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          lastIndex--;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..89c21431 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (NodeUtil.isGetOrSetKey(function.getParent())){\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    boolean isGenerator = NodeUtil.isGeneratorFunction(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      int lastIndex = argList.getChildCount() - 1;\n+      while ((lastArg = argList.getChildAt(lastIndex)) != null) {\n+        // Generators need references to their .send, .throw, and .return methods.\n+        if (!isGenerator && lastArg.isVarArgs() && canOptimizeArguments(objective)) {\n+          return;\n+        }\n+\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          lastIndex--;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}