{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node root = t.getAstRoot();\n    if (root.hasChildren() && root.getFirstChild().isCall()) {\n        Node call = root.getFirstChild();\n        if (call.hasChildren() && call.getChildCount() == 1) {\n            Node function = call.getFirstChild();\n            if (function.isFunction() && function.hasChildren() && function.getChildCount() == 2) {\n                Node param = function.getFirstChild().getNext();\n                if (param.isParamList() && param.getChildCount() == 0) {\n                    for (Var v : scope.getVarIterable()) {\n                        Node n = v.getNode();\n                        Node parent = n.getParent();\n                        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                            String name = n.getString();\n                            Var aliasVar = scope.getVar(name);\n                            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                                aliases.put(name, aliasVar);\n                                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                                transformation.addAlias(name, qualifiedName);\n                            } else {\n                                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                            }\n                        } else if (!parent.isFunction() || parent.getFirstChild() != n || !parent.hasOneChild()) {\n                            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n    }\n    report(t, root, GOOG_SCOPE_MALFORMED, \"The call to goog.scope must take only a single parameter. It must be an anonymous function that itself takes no parameters.\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..74f9ec9e 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,40 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node root = t.getAstRoot();\n+    if (root.hasChildren() && root.getFirstChild().isCall()) {\n+        Node call = root.getFirstChild();\n+        if (call.hasChildren() && call.getChildCount() == 1) {\n+            Node function = call.getFirstChild();\n+            if (function.isFunction() && function.hasChildren() && function.getChildCount() == 2) {\n+                Node param = function.getFirstChild().getNext();\n+                if (param.isParamList() && param.getChildCount() == 0) {\n+                    for (Var v : scope.getVarIterable()) {\n+                        Node n = v.getNode();\n+                        Node parent = n.getParent();\n+                        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                            String name = n.getString();\n+                            Var aliasVar = scope.getVar(name);\n+                            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                                aliases.put(name, aliasVar);\n+                                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                                transformation.addAlias(name, qualifiedName);\n+                            } else {\n+                                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                            }\n+                        } else if (!parent.isFunction() || parent.getFirstChild() != n || !parent.hasOneChild()) {\n+                            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                        }\n+                    }\n+                    return;\n+                }\n+            }\n         }\n-      }\n     }\n+    report(t, root, GOOG_SCOPE_MALFORMED, \"The call to goog.scope must take only a single parameter. It must be an anonymous function that itself takes no parameters.\");\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}