{
    "patch": "  private boolean isLValueOfAssignToPrototype(Node n) {\n    if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node objNode = n.getFirstChild();\n    if (!objNode.isName() || !objNode.getString().equals(\"Object\")) {\n      return false;\n    }\n    Node propNode = objNode.getNext();\n    if (!propNode.isString() || !propNode.getString().equals(\"prototype\")) {\n      return false;\n    }\n    Node assignNode = n.getParent();\n    if (assignNode == null || assignNode.getType() != Token.ASSIGN) {\n      return false;\n    }\n    Node rhsNode = assignNode.getLastChild();\n    if (rhsNode != n) {\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..18ac2525 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  private boolean isLValueOfAssignToPrototype(Node n) {\n+    if (n.getType() != Token.GETPROP) {\n+      return false;\n+    }\n+    Node objNode = n.getFirstChild();\n+    if (!objNode.isName() || !objNode.getString().equals(\"Object\")) {\n+      return false;\n+    }\n+    Node propNode = objNode.getNext();\n+    if (!propNode.isString() || !propNode.getString().equals(\"prototype\")) {\n+      return false;\n+    }\n+    Node assignNode = n.getParent();\n+    if (assignNode == null || assignNode.getType() != Token.ASSIGN) {\n+      return false;\n+    }\n+    Node rhsNode = assignNode.getLastChild();\n+    if (rhsNode != n) {\n+      return false;\n+    }\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}