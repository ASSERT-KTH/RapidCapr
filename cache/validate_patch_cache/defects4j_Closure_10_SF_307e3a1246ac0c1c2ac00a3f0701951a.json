{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n        return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n        if (n instanceof StringLiteral) {\n            return true;\n        } else if (n instanceof BinaryExpression) {\n            BinaryExpression binaryExpression = (BinaryExpression) n;\n            if (binaryExpression.getOperator() == BinaryOperator.ADD) {\n                return mayBeStringHelper(binaryExpression.getLeft()) \n                     || mayBeStringHelper(binaryExpression.getRight());\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..b8a2afae 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1412,13 +1412,22 @@ public final class NodeUtil {\n     return mayBeString(n, true);\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n+static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+        return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+        if (n instanceof StringLiteral) {\n+            return true;\n+        } else if (n instanceof BinaryExpression) {\n+            BinaryExpression binaryExpression = (BinaryExpression) n;\n+            if (binaryExpression.getOperator() == BinaryOperator.ADD) {\n+                return mayBeStringHelper(binaryExpression.getLeft()) \n+                     || mayBeStringHelper(binaryExpression.getRight());\n+            }\n+        }\n+        return false;\n     }\n-  }\n+}\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}