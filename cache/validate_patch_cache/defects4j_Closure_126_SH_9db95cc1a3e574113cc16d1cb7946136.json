{
    "patch": "    // If there is code following the block, minimize its exits\n    Node nextNode = getNextNode(n);\n    if (nextNode != null) {\n      tryMinimizeExits(nextNode, exitType, labelName);\n    }\n\n    // Don't try to minimize the exits of finally blocks,\n    // as this can cause problems if it changes the completion type\n    // of the finally block. See ECMA 262 Sections 8.9 & 12.14\n    if (NodeUtil.hasFinally(n)) {\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..6d1a786e 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,17 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+    // If there is code following the block, minimize its exits\n+    Node nextNode = getNextNode(n);\n+    if (nextNode != null) {\n+      tryMinimizeExits(nextNode, exitType, labelName);\n+    }\n+\n+    // Don't try to minimize the exits of finally blocks,\n+    // as this can cause problems if it changes the completion type\n+    // of the finally block. See ECMA 262 Sections 8.9 & 12.14\n+    if (NodeUtil.hasFinally(n)) {\n+        return;\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}