{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is month or day\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    } else {\n        int year = iDefaultYear;\n        for (int i = 0; i < count; i++) {\n            DateTimeFieldType type = savedFields[i].iField.getType();\n            if (type == DateTimeFieldType.year() && savedFields[i].iValue > 0) {\n                year = savedFields[i].iValue;\n                break;\n            }\n        }\n        if (year != iDefaultYear) {\n            try {\n                millis = iChrono.year().set(millis, year);\n            } catch (IllegalFieldValueException e2) {\n                String message = \"Cannot parse \\\"\" + text + \"\\\": Invalid year value: \" + year;\n                throw new IllegalArgumentException(message, e2);\n            }\n            // parse remaining fields\n            for (int i = 0; i < count; i++) {\n                DateTimeFieldType type = savedFields[i].iField.getType();\n                if (type != DateTimeFieldType.year()) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            }\n        } else {\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f6d17d7a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,47 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is month or day\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    } else {\n+        int year = iDefaultYear;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeFieldType type = savedFields[i].iField.getType();\n+            if (type == DateTimeFieldType.year() && savedFields[i].iValue > 0) {\n+                year = savedFields[i].iValue;\n+                break;\n+            }\n+        }\n+        if (year != iDefaultYear) {\n+            try {\n+                millis = iChrono.year().set(millis, year);\n+            } catch (IllegalFieldValueException e2) {\n+                String message = \"Cannot parse \\\"\" + text + \"\\\": Invalid year value: \" + year;\n+                throw new IllegalArgumentException(message, e2);\n+            }\n+            // parse remaining fields\n+            for (int i = 0; i < count; i++) {\n+                DateTimeFieldType type = savedFields[i].iField.getType();\n+                if (type != DateTimeFieldType.year()) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            }\n+        } else {\n+            throw e;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}