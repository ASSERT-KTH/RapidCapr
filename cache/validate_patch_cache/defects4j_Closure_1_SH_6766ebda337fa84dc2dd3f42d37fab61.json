{
    "patch": "    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      // Remove unreferenced args in other parts of the function.\n      NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (!n.isParamList() && !n.isFunction()) {\n            Node lastArg;\n            while ((lastArg = n.getLastChild()) != null) {\n              Var var = fnScope.getVar(lastArg.getString());\n              if (!referenced.contains(var)) {\n                n.removeChild(lastArg);\n                compiler.reportCodeChange();\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4c53f5dc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      // Remove unreferenced args in other parts of the function.\n+      NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (!n.isParamList() && !n.isFunction()) {\n+            Node lastArg;\n+            while ((lastArg = n.getLastChild()) != null) {\n+              Var var = fnScope.getVar(lastArg.getString());\n+              if (!referenced.contains(var)) {\n+                n.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+              } else {\n+                break;\n+              }\n+            }\n+          }\n+        }\n+      });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}