{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the contracted simplex\n                simplex = evaluateNewSimplex(original, sigma, comparator);\n            }\n\n            // check convergence\n            final double deviation = FastMath.max(FastMath.abs(best.getPoint()[0] - simplex[simplex.length - 1].getPoint()[0]),\n                    FastMath.max(FastMath.abs(best.getPoint()[1] - simplex[simplex.length - 1].getPoint()[1]),\n                            FastMath.abs(best.getValue() - simplex[simplex.length - 1].getValue())));\n            if (deviation < simplexRelativeTolerance * (FastMath.max(FastMath.abs(best.getPoint()[0]),\n                    FastMath.max(FastMath.abs(best.getPoint()[1]), FastMath.abs(best.getValue()))))) {\n                return;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = evaluateNewSimplex(original, sigma, comparator);\n            } else {\n                // shrink the simplex\n                final RealPointValuePair[] shrunk = shrink(original, comparator);\n                simplex = shrunk;\n                if (comparator.compare(shrunk[0], original[0]) >= 0) {\n                    // check convergence\n                    final double deviation = FastMath.max(FastMath.abs(best.getPoint()[0] - simplex[simplex.length - 1].getPoint()[0]),\n                            FastMath.max(FastMath.abs(best.getPoint()[1] - simplex[simplex.length - 1].getPoint()[1]),\n                                    FastMath.abs(best.getValue() - simplex[simplex.length - 1].getValue())));\n                    if (deviation < simplexRelativeTolerance * (FastMath.max(FastMath.abs(best.getPoint()[0]),\n                            FastMath.max(FastMath.abs(best.getPoint()[1]), FastMath.abs(best.getValue()))))) {\n                        return;\n                    }\n                }\n            }\n\n        }\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e62778c9b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,70 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the contracted simplex\n+                simplex = evaluateNewSimplex(original, sigma, comparator);\n+            }\n \n+            // check convergence\n+            final double deviation = FastMath.max(FastMath.abs(best.getPoint()[0] - simplex[simplex.length - 1].getPoint()[0]),\n+                    FastMath.max(FastMath.abs(best.getPoint()[1] - simplex[simplex.length - 1].getPoint()[1]),\n+                            FastMath.abs(best.getValue() - simplex[simplex.length - 1].getValue())));\n+            if (deviation < simplexRelativeTolerance * (FastMath.max(FastMath.abs(best.getPoint()[0]),\n+                    FastMath.max(FastMath.abs(best.getPoint()[1]), FastMath.abs(best.getValue()))))) {\n                 return;\n-\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = evaluateNewSimplex(original, sigma, comparator);\n+            } else {\n+                // shrink the simplex\n+                final RealPointValuePair[] shrunk = shrink(original, comparator);\n+                simplex = shrunk;\n+                if (comparator.compare(shrunk[0], original[0]) >= 0) {\n+                    // check convergence\n+                    final double deviation = FastMath.max(FastMath.abs(best.getPoint()[0] - simplex[simplex.length - 1].getPoint()[0]),\n+                            FastMath.max(FastMath.abs(best.getPoint()[1] - simplex[simplex.length - 1].getPoint()[1]),\n+                                    FastMath.abs(best.getValue() - simplex[simplex.length - 1].getValue())));\n+                    if (deviation < simplexRelativeTolerance * (FastMath.max(FastMath.abs(best.getPoint()[0]),\n+                            FastMath.max(FastMath.abs(best.getPoint()[1]), FastMath.abs(best.getValue()))))) {\n+                        return;\n+                    }\n+                }\n             }\n \n         }\n \n     }\n \n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}