{
    "patch": "public ReturnValue run(CodeLocation location, Values values) {\n\n    // Creating a new list to add the integers that arrays to list returned\n    List<Integer> newList = new ArrayList<>();\n\n    // Getting the array as a list\n    List<Integer> originalList = Arrays.asList(values.forName(\"list\"));\n\n    // Iterating through the original list and adding the integers that meet the criteria to the new list\n    for (int num : originalList) {\n        if (num <= 10) {\n            newList.add(num);\n        }\n    }\n\n    // Creating a new array of the same size as the new list and adding the list's values\n    Integer[] newArray = new Integer[newList.size()];\n    newArray = newList.toArray(newArray);\n\n    // Returning the new array as object and iterable\n    ReturnValue returnValue = new ReturnValue(newArray);\n    returnValue.setIterable(newList);\n\n    return returnValue;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}