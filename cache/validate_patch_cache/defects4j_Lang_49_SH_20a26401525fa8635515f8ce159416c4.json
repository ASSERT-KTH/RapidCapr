{
    "patch": "public Fraction reduce() {\n    int numerator = this.numerator;\n    int denominator = this.denominator;\n    if (numerator == 0) {\n        return ZERO;\n    }\n    if (denominator < 0) {\n        numerator = -numerator;\n        denominator = -denominator;\n    }\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n    if (gcd == 1) {\n        return this;\n    }\n    return Fraction.getFraction(numerator / gcd, denominator / gcd);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..120ea76c 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,22 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+    int numerator = this.numerator;\n+    int denominator = this.denominator;\n+    if (numerator == 0) {\n+        return ZERO;\n+    }\n+    if (denominator < 0) {\n+        numerator = -numerator;\n+        denominator = -denominator;\n+    }\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+    if (gcd == 1) {\n+        return this;\n+    }\n+    return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}