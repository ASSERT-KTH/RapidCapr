{
    "patch": "            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n>>>(indent + 4)<<<  if (offsetLocal >= 0) {\n>>>(indent + 8)<<<  final long nextLocal = nextTransition(instantAdjusted);\n>>>(indent + 8)<<<  final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n>>>(indent + 8)<<<  if (nextLocal != nextAdjusted) {\n>>>(indent + 12)<<<      return offsetLocal;\n>>>(indent + 8)<<<  }\n                } else {\n>>>(indent + 12)<<<  final long nextLocal = previousTransition(instantAdjusted);\n>>>(indent + 12)<<<  final long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n>>>(indent + 12)<<<  if (nextLocal == instantAdjusted - offsetLocal) {\n>>>(indent + 16)<<<      return offsetLocal;\n>>>(indent + 12)<<<  }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b34bcc82 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+>>>(indent + 4)<<<  if (offsetLocal >= 0) {\n+>>>(indent + 8)<<<  final long nextLocal = nextTransition(instantAdjusted);\n+>>>(indent + 8)<<<  final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+>>>(indent + 8)<<<  if (nextLocal != nextAdjusted) {\n+>>>(indent + 12)<<<      return offsetLocal;\n+>>>(indent + 8)<<<  }\n+                } else {\n+>>>(indent + 12)<<<  final long nextLocal = previousTransition(instantAdjusted);\n+>>>(indent + 12)<<<  final long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+>>>(indent + 12)<<<  if (nextLocal == instantAdjusted - offsetLocal) {\n+>>>(indent + 16)<<<      return offsetLocal;\n+>>>(indent + 12)<<<  }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}