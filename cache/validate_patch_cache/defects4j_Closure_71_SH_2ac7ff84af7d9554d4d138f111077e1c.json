{
    "patch": "      boolean isOverride = parent != null && parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop &&\n          t.inGlobalScope();\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..f0b24a2f 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,24 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = parent != null && parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() == getprop &&\n+          t.inGlobalScope();\n+\n+      // Find the lowest property defined on a class with visibility\n+      // information.\n+      if (isOverride) {\n+        objectType = objectType.getImplicitPrototype();\n+      }\n+      JSDocInfo docInfo = null;\n+      for (; objectType != null;\n+           objectType = objectType.getImplicitPrototype()) {\n+        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+        if (docInfo != null &&\n+            docInfo.getVisibility() != Visibility.INHERITED) {\n+          break;\n+        }\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}