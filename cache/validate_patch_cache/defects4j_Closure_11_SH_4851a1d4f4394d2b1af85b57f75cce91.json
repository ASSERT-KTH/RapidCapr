{
    "patch": "  if (parent != null && parent.isAssign() && (n.getFirstChild() == parent.getFirstChild() || n.getLastChild() == parent.getFirstChild())) {\n    // just ignore it, it is an assignment to the prototype\n    // 'foo.prototype = ...'\n    if (n.getFirstChild().isGetProp() && \"prototype\".equals(n.getFirstChild().getLastChild().getString())) {\n      return;\n    }\n    // ignore it if it is NaN assignment (e.g. something.x = NaN)\n    // because JSHint also ignores it\n    if (NodeUtil.isNaN(n.getLastChild())) {\n      return;\n    }\n    n.setJSType(parent.getJSType());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}