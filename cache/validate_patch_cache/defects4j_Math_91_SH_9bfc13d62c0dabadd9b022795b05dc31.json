{
    "patch": "public int compareTo(Fraction other) {\n    int thisReducedNumerator = numerator / greatestCommonDivisor(numerator, denominator);\n    int otherReducedNumerator = other.numerator / greatestCommonDivisor(other.numerator, other.denominator);\n    int lcm = leastCommonMultiple(denominator, other.denominator);\n    int thisEquivalentNumerator = thisReducedNumerator * (lcm / denominator);\n    int otherEquivalentNumerator = otherReducedNumerator * (lcm / other.denominator);\n    return Integer.compare(thisEquivalentNumerator, otherEquivalentNumerator);\n}\n\nprivate int greatestCommonDivisor(int a, int b) {\n    return b == 0 ? a : greatestCommonDivisor(b, a % b);\n}\n\nprivate int leastCommonMultiple(int a, int b) {\n    return a / greatestCommonDivisor(a, b) * b;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..ab5857396 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -256,8 +256,22 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n     public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n+public int compareTo(Fraction other) {\n+    int thisReducedNumerator = numerator / greatestCommonDivisor(numerator, denominator);\n+    int otherReducedNumerator = other.numerator / greatestCommonDivisor(other.numerator, other.denominator);\n+    int lcm = leastCommonMultiple(denominator, other.denominator);\n+    int thisEquivalentNumerator = thisReducedNumerator * (lcm / denominator);\n+    int otherEquivalentNumerator = otherReducedNumerator * (lcm / other.denominator);\n+    return Integer.compare(thisEquivalentNumerator, otherEquivalentNumerator);\n+}\n+\n+private int greatestCommonDivisor(int a, int b) {\n+    return b == 0 ? a : greatestCommonDivisor(b, a % b);\n+}\n+\n+private int leastCommonMultiple(int a, int b) {\n+    return a / greatestCommonDivisor(a, b) * b;\n+}\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}