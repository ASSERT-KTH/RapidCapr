{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        setEquals(false);\n        return this;\n    }\n\n    Class<?> lhsClass = lhs.getClass();\n    Class<?> rhsClass = rhs.getClass();\n\n    // Array handling\n    if (lhsClass.isArray()) {\n        if (rhsClass.isArray()) {\n            compareArrays(lhs, rhs);\n        } else {\n            setEquals(false);\n        }\n    } else {\n        isEquals = lhs.equals(rhs);\n    }\n\n    return this;\n}\n\nprivate void compareArrays(Object lhsArray, Object rhsArray) {\n    Class<?> componentType = lhsArray.getClass().getComponentType();\n    if (Objects.equals(componentType, rhsArray.getClass().getComponentType())) {\n        // Arrays of primitives\n        if (componentType.isPrimitive()) {\n            comparePrimitiveArrays(lhsArray, rhsArray);\n        }\n        // Arrays of Objects\n        else {\n            compareObjectArrays((Object[]) lhsArray, (Object[]) rhsArray);\n        }\n    } else {\n        setEquals(false);\n    }\n}\n\nprivate void comparePrimitiveArrays(Object lhsArray, Object rhsArray) {\n    int lhsLength = Array.getLength(lhsArray);\n    if (lhsLength != Array.getLength(rhsArray)) {\n        setEquals(false);\n        return;\n    }\n    if (lhsArray instanceof long[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Array.getLong(lhsArray, i) != Array.getLong(rhsArray, i)) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof int[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Array.getInt(lhsArray, i) != Array.getInt(rhsArray, i)) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof short[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Array.getShort(lhsArray, i) != Array.getShort(rhsArray, i)) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof char[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Array.getChar(lhsArray, i) != Array.getChar(rhsArray, i)) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof byte[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Array.getByte(lhsArray, i) != Array.getByte(rhsArray, i)) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof double[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Double.doubleToLongBits(Array.getDouble(lhsArray, i)) != Double.doubleToLongBits(Array.getDouble(rhsArray, i))) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof float[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Float.floatToIntBits(Array.getFloat(lhsArray, i)) != Float.floatToIntBits(Array.getFloat(rhsArray, i))) {\n                setEquals(false);\n                return;\n            }\n        }\n    } else if (lhsArray instanceof boolean[]) {\n        for (int i = 0; i < lhsLength; i++) {\n            if (Array.getBoolean(lhsArray, i) != Array.getBoolean(rhsArray, i)) {\n                setEquals(false);\n                return;\n            }\n        }\n    }\n}\n\nprivate void compareObjectArrays(Object[] lhsArray, Object[] rhsArray) {\n    if (lhsArray.length != rhsArray.length) {\n        setEquals(false);\n        return;\n    }\n    for (int i = 0; i < lhsArray.length; i++) {\n        append(lhsArray[i], rhsArray[i]);\n        if (!isEquals) {\n            break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..43ad9fa7 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,125 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        setEquals(false);\n+        return this;\n+    }\n+\n+    Class<?> lhsClass = lhs.getClass();\n+    Class<?> rhsClass = rhs.getClass();\n+\n+    // Array handling\n+    if (lhsClass.isArray()) {\n+        if (rhsClass.isArray()) {\n+            compareArrays(lhs, rhs);\n+        } else {\n+            setEquals(false);\n         }\n-        if (lhs == rhs) {\n-            return this;\n+    } else {\n+        isEquals = lhs.equals(rhs);\n+    }\n+\n+    return this;\n+}\n+\n+private void compareArrays(Object lhsArray, Object rhsArray) {\n+    Class<?> componentType = lhsArray.getClass().getComponentType();\n+    if (Objects.equals(componentType, rhsArray.getClass().getComponentType())) {\n+        // Arrays of primitives\n+        if (componentType.isPrimitive()) {\n+            comparePrimitiveArrays(lhsArray, rhsArray);\n         }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n+        // Arrays of Objects\n+        else {\n+            compareObjectArrays((Object[]) lhsArray, (Object[]) rhsArray);\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n+    } else {\n+        setEquals(false);\n+    }\n+}\n+\n+private void comparePrimitiveArrays(Object lhsArray, Object rhsArray) {\n+    int lhsLength = Array.getLength(lhsArray);\n+    if (lhsLength != Array.getLength(rhsArray)) {\n+        setEquals(false);\n+        return;\n+    }\n+    if (lhsArray instanceof long[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Array.getLong(lhsArray, i) != Array.getLong(rhsArray, i)) {\n+                setEquals(false);\n+                return;\n+            }\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+    } else if (lhsArray instanceof int[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Array.getInt(lhsArray, i) != Array.getInt(rhsArray, i)) {\n+                setEquals(false);\n+                return;\n+            }\n+        }\n+    } else if (lhsArray instanceof short[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Array.getShort(lhsArray, i) != Array.getShort(rhsArray, i)) {\n+                setEquals(false);\n+                return;\n+            }\n+        }\n+    } else if (lhsArray instanceof char[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Array.getChar(lhsArray, i) != Array.getChar(rhsArray, i)) {\n+                setEquals(false);\n+                return;\n+            }\n+        }\n+    } else if (lhsArray instanceof byte[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Array.getByte(lhsArray, i) != Array.getByte(rhsArray, i)) {\n+                setEquals(false);\n+                return;\n+            }\n+        }\n+    } else if (lhsArray instanceof double[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Double.doubleToLongBits(Array.getDouble(lhsArray, i)) != Double.doubleToLongBits(Array.getDouble(rhsArray, i))) {\n+                setEquals(false);\n+                return;\n+            }\n+        }\n+    } else if (lhsArray instanceof float[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Float.floatToIntBits(Array.getFloat(lhsArray, i)) != Float.floatToIntBits(Array.getFloat(rhsArray, i))) {\n+                setEquals(false);\n+                return;\n+            }\n+        }\n+    } else if (lhsArray instanceof boolean[]) {\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (Array.getBoolean(lhsArray, i) != Array.getBoolean(rhsArray, i)) {\n+                setEquals(false);\n+                return;\n+            }\n         }\n-        return this;\n     }\n+}\n+\n+private void compareObjectArrays(Object[] lhsArray, Object[] rhsArray) {\n+    if (lhsArray.length != rhsArray.length) {\n+        setEquals(false);\n+        return;\n+    }\n+    for (int i = 0; i < lhsArray.length; i++) {\n+        append(lhsArray[i], rhsArray[i]);\n+        if (!isEquals) {\n+            break;\n+        }\n+    }\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}