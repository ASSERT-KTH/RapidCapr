{
    "patch": "public static double getTypedPercent(String js) {\n    double count = 0;\n    double typedCount = 0;\n\n    for (int i = 0; i < js.length(); i++) {\n        char c = js.charAt(i);\n        if (c == '{' || c == '}' || c == '\\'') {\n            continue;\n        }\n        count++;\n        if (c != '\\n' && c != '\\r' && c != ' ' && c != '\\t') {\n            typedCount++;\n        }\n    }\n\n    if (count == 0) {\n        return 0;\n    }\n    return (typedCount / count) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..db1f32e1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    double count = 0;\n+    double typedCount = 0;\n+\n+    for (int i = 0; i < js.length(); i++) {\n+        char c = js.charAt(i);\n+        if (c == '{' || c == '}' || c == '\\'') {\n+            continue;\n+        }\n+        count++;\n+        if (c != '\\n' && c != '\\r' && c != ' ' && c != '\\t') {\n+            typedCount++;\n+        }\n+    }\n+\n+    if (count == 0) {\n+        return 0;\n+    }\n+    return (typedCount / count) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}