{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  if (node == null) {\n    return true;\n  }\n\n  if (node.isName()) {\n    return true;\n  } else if (node.isGetProp()) {\n    node = node.getFirstChild();\n    while (node != null) {\n      if (!isSafeReplacement(node, replacement)) {\n        return false;\n      }\n      node = node.getNext();\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..c7637600 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,26 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n-    }\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if (node == null) {\n+    return true;\n+  }\n \n+  if (node.isName()) {\n     return true;\n+  } else if (node.isGetProp()) {\n+    node = node.getFirstChild();\n+    while (node != null) {\n+      if (!isSafeReplacement(node, replacement)) {\n+        return false;\n+      }\n+      node = node.getNext();\n+    }\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +245,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}