{
    "patch": "if (len >= 7 && len <= 11) {\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n    String country = str.substring(3, 5);\n    String variant = \"\";\n    int idx = 6;\n    if (len >= 9 && str.charAt(6) != '_' && str.charAt(7) != '_') {\n        variant = str.substring(6, 9);\n        idx = 9;\n    }\n    if (len >= 10 && str.charAt(idx) == '_' && Character.isLetterOrDigit(str.charAt(idx+1))) {\n        variant += \"_\" + str.charAt(idx+1);\n        idx += 2;\n    }\n    if (len == 11 && str.charAt(idx) == '_' && Character.isLetterOrDigit(str.charAt(idx+1))) {\n        variant += \"_\" + str.substring(idx+1);\n        idx = len;\n    }\n    if (idx != len) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (!language.matches(\"[a-zA-Z]{2}\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (!country.isEmpty() && !country.matches(\"[a-zA-Z]{2}\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (!variant.isEmpty() && !variant.matches(\"[0-9a-zA-Z]+([_-][0-9a-zA-Z]+)*\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(language, country, variant);\n} else {\n    return new Locale.Builder().setLanguageTag(str).build();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..396df90e 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,45 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+if (len >= 7 && len <= 11) {\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (str.charAt(5) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String language = str.substring(0, 2);\n+    String country = str.substring(3, 5);\n+    String variant = \"\";\n+    int idx = 6;\n+    if (len >= 9 && str.charAt(6) != '_' && str.charAt(7) != '_') {\n+        variant = str.substring(6, 9);\n+        idx = 9;\n+    }\n+    if (len >= 10 && str.charAt(idx) == '_' && Character.isLetterOrDigit(str.charAt(idx+1))) {\n+        variant += \"_\" + str.charAt(idx+1);\n+        idx += 2;\n+    }\n+    if (len == 11 && str.charAt(idx) == '_' && Character.isLetterOrDigit(str.charAt(idx+1))) {\n+        variant += \"_\" + str.substring(idx+1);\n+        idx = len;\n+    }\n+    if (idx != len) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (!language.matches(\"[a-zA-Z]{2}\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (!country.isEmpty() && !country.matches(\"[a-zA-Z]{2}\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (!variant.isEmpty() && !variant.matches(\"[0-9a-zA-Z]+([_-][0-9a-zA-Z]+)*\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return new Locale(language, country, variant);\n+} else {\n+    return new Locale.Builder().setLanguageTag(str).build();\n+}\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}