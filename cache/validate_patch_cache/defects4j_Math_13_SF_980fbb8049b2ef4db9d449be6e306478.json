{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        EigenDecomposition dec = new EigenDecomposition(m);\n        \n        double[] eigenValues = dec.getRealEigenvalues();\n        double[][] eigenVectors = dec.getV().getData();\n        \n        for (int i = 0; i < eigenValues.length; i++) {\n            if (eigenValues[i] < 0) {\n                eigenValues[i] = 0;\n            } else {\n                eigenValues[i] = Math.sqrt(eigenValues[i]);\n            }\n        }\n        \n        RealMatrix diagonal = MatrixUtils.createRealDiagonalMatrix(eigenValues);\n        RealMatrix inverseEigenVectors = MatrixUtils.inverse(new Array2DRowRealMatrix(eigenVectors));\n        \n        return dec.getV().multiply(diagonal).multiply(inverseEigenVectors);\n    } catch (OutOfMemoryError e) {\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..32361bf9b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        \n+        double[] eigenValues = dec.getRealEigenvalues();\n+        double[][] eigenVectors = dec.getV().getData();\n+        \n+        for (int i = 0; i < eigenValues.length; i++) {\n+            if (eigenValues[i] < 0) {\n+                eigenValues[i] = 0;\n+            } else {\n+                eigenValues[i] = Math.sqrt(eigenValues[i]);\n+            }\n+        }\n+        \n+        RealMatrix diagonal = MatrixUtils.createRealDiagonalMatrix(eigenValues);\n+        RealMatrix inverseEigenVectors = MatrixUtils.inverse(new Array2DRowRealMatrix(eigenVectors));\n+        \n+        return dec.getV().multiply(diagonal).multiply(inverseEigenVectors);\n+    } catch (OutOfMemoryError e) {\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}