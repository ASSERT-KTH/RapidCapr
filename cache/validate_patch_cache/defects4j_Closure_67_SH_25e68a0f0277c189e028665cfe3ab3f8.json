{
    "patch": "          ) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty = n.getParent().getType() == Token.GETPROP\n            || (n.getParent().getType() == Token.ASSIGN && NodeUtil.isObjectCallMethod(n.getParent()));\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..b2be0ae6 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -317,6 +317,22 @@ class AnalyzePrototypeProperties implements CompilerPass {\n           && n.getType() == Token.GETPROP\n           ) {\n         // We want to exclude the assignment itself from the usage list\n+        boolean isChainedProperty = n.getParent().getType() == Token.GETPROP\n+            || (n.getParent().getType() == Token.ASSIGN && NodeUtil.isObjectCallMethod(n.getParent()));\n+\n+        if (isChainedProperty) {\n+          Node child = n.getFirstChild().getFirstChild().getNext();\n+\n+          if (child.getType() == Token.STRING &&\n+              child.getString().equals(\"prototype\")) {\n+            return true;\n+          }\n+        }\n+      }\n+\n+      return false;\n+    }\n+        // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}