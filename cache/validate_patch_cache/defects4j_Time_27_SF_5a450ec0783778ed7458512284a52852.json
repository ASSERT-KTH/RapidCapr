{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    \n    if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    }\n    \n    if (!(elementPairs.get(elementPairs.size()-1) instanceof PeriodFormatterBuilder)) {\n        elementPairs = new ArrayList<Object>(elementPairs);\n        elementPairs.add(new PeriodFormatterBuilder());\n    }\n\n    PeriodFormatterBuilder pfb = null;\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    for (Object obj : elementPairs) {\n        if (obj instanceof Separator) {\n            if (pfb == null) {\n                pfb = new PeriodFormatterBuilder();\n            }\n            pfb.appendSeparator((Separator) obj);\n        } else if (obj instanceof PeriodFormatterBuilder) {\n            if (pfb != null) {\n                if (!notPrinter) {\n                    printer = pfb.toPrinter();\n                }\n                if (!notParser) {\n                    parser = pfb.toParser();\n                }\n                pfb = null;\n            }\n        } else if (pfb == null) {\n            Object[] comp = createComposite(Collections.singletonList(obj));\n            if (!notPrinter) {\n                printer = (PeriodPrinter) comp[0];\n            }\n            if (!notParser) {\n                parser = (PeriodParser) comp[1];\n            }\n        } else {\n            pfb.append0(obj);\n        }\n    }\n\n    if (pfb != null) {\n        if (!notPrinter) {\n            printer = pfb.toPrinter();\n        }\n        if (!notParser) {\n            parser = pfb.toParser();\n        }\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b392f333 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,65 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    \n+    if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    \n+    if (!(elementPairs.get(elementPairs.size()-1) instanceof PeriodFormatterBuilder)) {\n+        elementPairs = new ArrayList<Object>(elementPairs);\n+        elementPairs.add(new PeriodFormatterBuilder());\n+    }\n+\n+    PeriodFormatterBuilder pfb = null;\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof Separator) {\n+            if (pfb == null) {\n+                pfb = new PeriodFormatterBuilder();\n+            }\n+            pfb.appendSeparator((Separator) obj);\n+        } else if (obj instanceof PeriodFormatterBuilder) {\n+            if (pfb != null) {\n+                if (!notPrinter) {\n+                    printer = pfb.toPrinter();\n+                }\n+                if (!notParser) {\n+                    parser = pfb.toParser();\n+                }\n+                pfb = null;\n+            }\n+        } else if (pfb == null) {\n+            Object[] comp = createComposite(Collections.singletonList(obj));\n+            if (!notPrinter) {\n+                printer = (PeriodPrinter) comp[0];\n+            }\n+            if (!notParser) {\n+                parser = (PeriodParser) comp[1];\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            pfb.append0(obj);\n         }\n     }\n \n+    if (pfb != null) {\n+        if (!notPrinter) {\n+            printer = pfb.toPrinter();\n+        }\n+        if (!notParser) {\n+            parser = pfb.toParser();\n+        }\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: no suitable method found for appendSeparator(Separator)",
    "test_result": "ERROR"
}