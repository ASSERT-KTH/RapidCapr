{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Ensure visit is not at the root node.\n    if (n == scope.getRootNode()) {\n        return;\n    }\n    \n    // Handle function expressions and function declarations.\n    if (n.isFunction()) {\n        Node child = n.getFirstChild();\n        if (child == null || child.isName()) {\n            defineDeclaredFunction(n, parent);\n        } else {\n            Node grandparent = parent.getParent();\n            if (grandparent != null && grandparent.isScript()) {\n                handleFunctionInputs(parent);\n                defineDeclaredFunction(n, grandparent);\n            } else {\n                defineDeclaredFunction(n, parent);\n            }\n        }\n        return;\n    }\n\n    // Handle Var nodes.\n    if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n    }\n\n    // Handle Catch nodes\n    if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n    }\n\n    // Attach literal types.\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b522fb77 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,46 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Ensure visit is not at the root node.\n+    if (n == scope.getRootNode()) {\n+        return;\n+    }\n+    \n+    // Handle function expressions and function declarations.\n+    if (n.isFunction()) {\n+        Node child = n.getFirstChild();\n+        if (child == null || child.isName()) {\n+            defineDeclaredFunction(n, parent);\n+        } else {\n+            Node grandparent = parent.getParent();\n+            if (grandparent != null && grandparent.isScript()) {\n+                handleFunctionInputs(parent);\n+                defineDeclaredFunction(n, grandparent);\n+            } else {\n+                defineDeclaredFunction(n, parent);\n+            }\n+        }\n+        return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    // Handle Var nodes.\n+    if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    // Handle Catch nodes\n+    if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n     }\n \n+    // Attach literal types.\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}