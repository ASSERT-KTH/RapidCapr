{
    "patch": "        // Check for leap year before parsing February 29\n        if (bucket.getFraction() >= 1 && bucket.getPeriodType().equals(PeriodType.monthDay())) {\n            try {\n                int month = bucket.parseInto(DateTimeFieldType.monthOfYear(), text, newPos);\n                int dayOfMonth = bucket.parseInto(DateTimeFieldType.dayOfMonth(), text, newPos);\n                int year = defaultYear;\n                if (month == 2 && dayOfMonth == 29 && !chrono.isLeapYear(year)) {\n                    throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, 28);\n                }\n            } catch (NumberFormatException e) {\n                // ignore\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..b68717e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,18 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+        // Check for leap year before parsing February 29\n+        if (bucket.getFraction() >= 1 && bucket.getPeriodType().equals(PeriodType.monthDay())) {\n+            try {\n+                int month = bucket.parseInto(DateTimeFieldType.monthOfYear(), text, newPos);\n+                int dayOfMonth = bucket.parseInto(DateTimeFieldType.dayOfMonth(), text, newPos);\n+                int year = defaultYear;\n+                if (month == 2 && dayOfMonth == 29 && !chrono.isLeapYear(year)) {\n+                    throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, 28);\n+                }\n+            } catch (NumberFormatException e) {\n+                // ignore\n+            }\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}