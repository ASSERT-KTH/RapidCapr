{
    "patch": "      if (NodeUtil.isFunctionExpression(n)) {\n        JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsdoc != null) {\n          return !jsdoc.hasThisType() &&\n              !jsdoc.isConstructor() &&\n              !jsdoc.isInterface() &&\n              !jsdoc.isOverride();\n        }\n      }\n      return false;\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (NodeUtil.isGet(lhs) && !lhs.isQualifiedName()) {\n        // Ignore branches for properties of prototypes, but don't abort traversal.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n\n        if (rhs == n) {\n          // Don't remove the RHS of assignments.\n          return true;\n        }\n      }\n\n>>> [ INFILL ] <<<\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cac3d13d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,45 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsdoc != null) {\n+          return !jsdoc.hasThisType() &&\n+              !jsdoc.isConstructor() &&\n+              !jsdoc.isInterface() &&\n+              !jsdoc.isOverride();\n+        }\n+      }\n+      return false;\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (NodeUtil.isGet(lhs) && !lhs.isQualifiedName()) {\n+        // Ignore branches for properties of prototypes, but don't abort traversal.\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+\n+        if (rhs == n) {\n+          // Don't remove the RHS of assignments.\n+          return true;\n+        }\n+      }\n+\n+>>> [ INFILL ] <<<\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}