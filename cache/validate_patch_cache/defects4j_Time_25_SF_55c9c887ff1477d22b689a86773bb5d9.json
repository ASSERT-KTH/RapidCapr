{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetInitial = getOffset(instantLocal);\n    int offsetBefore = getOffset(instantLocal - 1);\n    int offsetAfter = getOffset(instantLocal + 1);\n\n    // current offset is same as the offset before and after\n    if (offsetInitial == offsetBefore && offsetInitial == offsetAfter) {\n        return offsetInitial;\n    }\n\n    // we have gone back in time (e.g. autumn DST transition)\n    if (offsetInitial < offsetBefore) {\n        long previousTransition = previousTransition(instantLocal);\n        int previousOffset = getOffset(previousTransition);\n\n        // the previous offset is less than the initial offset, so we have jumped over the gap\n        if (previousOffset < offsetInitial) {\n            return previousOffset;\n        }\n\n        // we are inside the gap - return the previous offset\n        return previousOffset;\n    }\n\n    // we have skipped ahead in time (e.g. spring DST transition)\n    if (offsetInitial > offsetAfter) {\n        long nextTransition = nextTransition(instantLocal);\n        int nextOffset = getOffset(nextTransition);\n\n        // the next offset is less than the initial offset, so we skipped over the overlap\n        if (nextOffset < offsetInitial) {\n            return nextOffset;\n        }\n\n        // we are inside the overlap - return the smallest offset\n        return Math.min(offsetInitial, nextOffset);\n    }\n\n    // we are not near a DST transition\n    return offsetInitial;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..04cf8f5f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,48 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetInitial = getOffset(instantLocal);\n+    int offsetBefore = getOffset(instantLocal - 1);\n+    int offsetAfter = getOffset(instantLocal + 1);\n+\n+    // current offset is same as the offset before and after\n+    if (offsetInitial == offsetBefore && offsetInitial == offsetAfter) {\n+        return offsetInitial;\n+    }\n+\n+    // we have gone back in time (e.g. autumn DST transition)\n+    if (offsetInitial < offsetBefore) {\n+        long previousTransition = previousTransition(instantLocal);\n+        int previousOffset = getOffset(previousTransition);\n+\n+        // the previous offset is less than the initial offset, so we have jumped over the gap\n+        if (previousOffset < offsetInitial) {\n+            return previousOffset;\n         }\n-        return offsetAdjusted;\n+\n+        // we are inside the gap - return the previous offset\n+        return previousOffset;\n+    }\n+\n+    // we have skipped ahead in time (e.g. spring DST transition)\n+    if (offsetInitial > offsetAfter) {\n+        long nextTransition = nextTransition(instantLocal);\n+        int nextOffset = getOffset(nextTransition);\n+\n+        // the next offset is less than the initial offset, so we skipped over the overlap\n+        if (nextOffset < offsetInitial) {\n+            return nextOffset;\n+        }\n+\n+        // we are inside the overlap - return the smallest offset\n+        return Math.min(offsetInitial, nextOffset);\n     }\n \n+    // we are not near a DST transition\n+    return offsetInitial;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}