{
    "patch": "private static String escapeRegex(String pattern, boolean unquote) {\n    StringBuilder regex = new StringBuilder();\n    StringBuilder eraRegex = null;\n\n    for (int i = 0; i < pattern.length(); i++) {\n        char c = pattern.charAt(i);\n        if (Character.getType(c) == Character.SPACE_SEPARATOR ||\n            Character.getType(c) == Character.LINE_SEPARATOR) {\n            regex.append(\"\\\\s*\");\n        } else {\n            switch (c) {\n                case '[':\n                case ']':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '|':\n                case '?':\n                case '*':\n                case '+':\n                case '^':\n                case '$':\n                case '.':\n                case '\\\\':\n                    regex.append('\\\\').append(c);\n                    break;\n\n                case 'G':\n                    if (i + 1 < pattern.length()) {\n                        char nextChar = pattern.charAt(i + 1);\n                        if (nextChar == 'G' || nextChar == 'y') {\n                            if (eraRegex == null) {\n                                eraRegex = new StringBuilder(\"(AD|BC|\u043f\u0440\\\\. \u043d\\\\. \u0435\\\\.|\u043d\\\\. \u0435\\\\.)\");\n                            }\n                            i++;\n                            if (nextChar == 'G') {\n                                i++;\n                            }\n                        } else {\n                            if (eraRegex == null) {\n                                eraRegex = new StringBuilder(\"(AD|BC)\");\n                            }\n                        }\n                    } else {\n                        if (eraRegex == null) {\n                            eraRegex = new StringBuilder(\"(AD|BC)\");\n                        }\n                    }\n                    break;\n                default:\n                    regex.append(c);\n                    break;\n            }\n        }\n    }\n\n    if (eraRegex != null) {\n        regex.insert(0, eraRegex);\n    }\n\n    return regex.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..e6735f79 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,70 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+private static String escapeRegex(String pattern, boolean unquote) {\n+    StringBuilder regex = new StringBuilder();\n+    StringBuilder eraRegex = null;\n+\n+    for (int i = 0; i < pattern.length(); i++) {\n+        char c = pattern.charAt(i);\n+        if (Character.getType(c) == Character.SPACE_SEPARATOR ||\n+            Character.getType(c) == Character.LINE_SEPARATOR) {\n+            regex.append(\"\\\\s*\");\n+        } else {\n+            switch (c) {\n+                case '[':\n+                case ']':\n+                case '(':\n+                case ')':\n+                case '{':\n+                case '}':\n+                case '|':\n+                case '?':\n+                case '*':\n+                case '+':\n+                case '^':\n+                case '$':\n+                case '.':\n+                case '\\\\':\n+                    regex.append('\\\\').append(c);\n+                    break;\n+\n+                case 'G':\n+                    if (i + 1 < pattern.length()) {\n+                        char nextChar = pattern.charAt(i + 1);\n+                        if (nextChar == 'G' || nextChar == 'y') {\n+                            if (eraRegex == null) {\n+                                eraRegex = new StringBuilder(\"(AD|BC|\u043f\u0440\\\\. \u043d\\\\. \u0435\\\\.|\u043d\\\\. \u0435\\\\.)\");\n+                            }\n+                            i++;\n+                            if (nextChar == 'G') {\n+                                i++;\n+                            }\n+                        } else {\n+                            if (eraRegex == null) {\n+                                eraRegex = new StringBuilder(\"(AD|BC)\");\n+                            }\n+                        }\n+                    } else {\n+                        if (eraRegex == null) {\n+                            eraRegex = new StringBuilder(\"(AD|BC)\");\n+                        }\n                     }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                    break;\n+                default:\n+                    regex.append(c);\n+                    break;\n             }\n-            regex.append(c);\n         }\n-        return regex;\n     }\n \n+    if (eraRegex != null) {\n+        regex.insert(0, eraRegex);\n+    }\n+\n+    return regex.toString();\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: method escapeRegex in class FastDateParser cannot be applied to given types;",
    "test_result": "ERROR"
}