{
    "patch": "char baseChar;\nString hex;\nif (i + 1 < len) {\n   baseChar = s.charAt(i+1);\n   if (baseChar == 'u') {\n      index = i+2;\n      try {\n         hex = s.substring(index, index+4);\n         out.write((char)Integer.parseInt(hex, 16));\n         i = i+5;\n      } catch (NumberFormatException e) {\n         throw new RuntimeException(\"Invalid Unicode sequence: \", e);\n      } \n   } else {\n      out.write(getISOControlChar(baseChar));\n      i++;\n   }\n} else {\n   out.write(getISOControlChar(c));\n   i++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}