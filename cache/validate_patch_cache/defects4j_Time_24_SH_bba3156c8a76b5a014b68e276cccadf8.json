{
    "patch": "            DateTimeFieldType eFieldType = e.getFieldType();\n            if (eFieldType != null && eFieldType.isSupported() &&\n                e.getIllegalNumberValue() == null) {\n                long[] validValues = e.getFieldType().getDurationType().getField(iChrono).set(e.getLowerBound(), 1);\n                if (validValues != null && validValues.length == 2 && validValues[0] == validValues[1]) {\n                    e = new IllegalFieldValueException(\n                        e.getFieldType(), e.getIllegalValue(), \"Value \" + e.getIllegalValue() +\n                        \" for \" + e.getFieldType() + \" is not supported: \" +\n                        \"maximum allowed value is \" + validValues[0], e);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f2972008 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DateTimeFieldType eFieldType = e.getFieldType();\n+            if (eFieldType != null && eFieldType.isSupported() &&\n+                e.getIllegalNumberValue() == null) {\n+                long[] validValues = e.getFieldType().getDurationType().getField(iChrono).set(e.getLowerBound(), 1);\n+                if (validValues != null && validValues.length == 2 && validValues[0] == validValues[1]) {\n+                    e = new IllegalFieldValueException(\n+                        e.getFieldType(), e.getIllegalValue(), \"Value \" + e.getIllegalValue() +\n+                        \" for \" + e.getFieldType() + \" is not supported: \" +\n+                        \"maximum allowed value is \" + validValues[0], e);\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}