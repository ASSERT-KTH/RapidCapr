{
    "patch": "public static double getTypedPercent(String js) {\n    int numCorrect = 0;\n    int numTotal = 0;\n    Scanner scan = new Scanner(js);\n    while (scan.hasNext()) {\n        String line = scan.nextLine().trim();\n        if (line.startsWith(\"//\")) {\n            continue;\n        }\n        int colonIndex = line.indexOf(\":\");\n        if (colonIndex == -1) {\n            continue;\n        }\n        String answer = line.substring(colonIndex + 1).trim();\n        if (answer.equals(\"true\") || answer.equals(\"false\")) {\n            numTotal++;\n            if (line.contains(\"===\")) {\n                if (line.contains(\"true === \" + answer) ||\n                        line.contains(answer + \" === true\")) {\n                    numCorrect++;\n                }\n            } else {\n                if (line.contains(\"true == \" + answer) ||\n                        line.contains(answer + \" == true\")) {\n                    numCorrect++;\n                }\n            }\n        }\n    }\n    return ((double) numCorrect / numTotal) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ca6fe6d5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int numCorrect = 0;\n+    int numTotal = 0;\n+    Scanner scan = new Scanner(js);\n+    while (scan.hasNext()) {\n+        String line = scan.nextLine().trim();\n+        if (line.startsWith(\"//\")) {\n+            continue;\n+        }\n+        int colonIndex = line.indexOf(\":\");\n+        if (colonIndex == -1) {\n+            continue;\n+        }\n+        String answer = line.substring(colonIndex + 1).trim();\n+        if (answer.equals(\"true\") || answer.equals(\"false\")) {\n+            numTotal++;\n+            if (line.contains(\"===\")) {\n+                if (line.contains(\"true === \" + answer) ||\n+                        line.contains(answer + \" === true\")) {\n+                    numCorrect++;\n+                }\n+            } else {\n+                if (line.contains(\"true == \" + answer) ||\n+                        line.contains(answer + \" == true\")) {\n+                    numCorrect++;\n+                }\n+            }\n+        }\n+    }\n+    return ((double) numCorrect / numTotal) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}