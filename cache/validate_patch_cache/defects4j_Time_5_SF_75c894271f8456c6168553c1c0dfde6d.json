{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Normalize all fields with the original period type and compute total millis.\n    Period normalizedPeriod = normalizedStandard();\n    long totalMillis = normalizedPeriod.toDurationFrom(Instant.now()).getMillis();\n\n    // Handle weeks.\n    int weeks = normalizedPeriod.getWeeks();\n    if (weeks != 0) {\n        totalMillis += ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n    }\n\n    // Compute total months.\n    int totalMonths = normalizedPeriod.getYears() * monthsPerYear() + normalizedPeriod.getMonths();\n\n    // Add months to millis (using original period type).\n    if (totalMonths != 0) {\n        MutablePeriod monthsPeriod = new MutablePeriod();\n        monthsPeriod.add(years(), normalizedPeriod.getYears());\n        monthsPeriod.add(months(), normalizedPeriod.getMonths());\n\n        totalMillis += monthsPeriod.toDurationFrom(Instant.now()).getMillis();\n\n        // Handle overflow into years.\n        int excessMonths = totalMonths % monthsPerYear();\n        if (excessMonths < 0) {\n            excessMonths += monthsPerYear();\n        }\n        int excessYears = (totalMonths - excessMonths) / monthsPerYear();\n        totalMonths = excessMonths;\n        // Add excess months and years back to the normalized period.\n        normalizedPeriod = normalizedPeriod.plusMonths(totalMonths).plusYears(excessYears);\n    }\n    // Construct the final result Period.\n    MutablePeriod result = new MutablePeriod(totalMillis);\n    result.add(normalizedPeriod);\n    return result.toPeriod(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5a69375f 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,44 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // Normalize all fields with the original period type and compute total millis.\n+    Period normalizedPeriod = normalizedStandard();\n+    long totalMillis = normalizedPeriod.toDurationFrom(Instant.now()).getMillis();\n+\n+    // Handle weeks.\n+    int weeks = normalizedPeriod.getWeeks();\n+    if (weeks != 0) {\n+        totalMillis += ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n     }\n \n+    // Compute total months.\n+    int totalMonths = normalizedPeriod.getYears() * monthsPerYear() + normalizedPeriod.getMonths();\n+\n+    // Add months to millis (using original period type).\n+    if (totalMonths != 0) {\n+        MutablePeriod monthsPeriod = new MutablePeriod();\n+        monthsPeriod.add(years(), normalizedPeriod.getYears());\n+        monthsPeriod.add(months(), normalizedPeriod.getMonths());\n+\n+        totalMillis += monthsPeriod.toDurationFrom(Instant.now()).getMillis();\n+\n+        // Handle overflow into years.\n+        int excessMonths = totalMonths % monthsPerYear();\n+        if (excessMonths < 0) {\n+            excessMonths += monthsPerYear();\n+        }\n+        int excessYears = (totalMonths - excessMonths) / monthsPerYear();\n+        totalMonths = excessMonths;\n+        // Add excess months and years back to the normalized period.\n+        normalizedPeriod = normalizedPeriod.plusMonths(totalMonths).plusYears(excessYears);\n+    }\n+    // Construct the final result Period.\n+    MutablePeriod result = new MutablePeriod(totalMillis);\n+    result.add(normalizedPeriod);\n+    return result.toPeriod(type);\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}