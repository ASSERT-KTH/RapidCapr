{
    "patch": "import org.apache.commons.math3.util.*;\n\npublic class MyClass {\n\n    private static final double DEFAULT_EPSILON = 1e-9; // fix\n\n    public static double regularizedGamma(double a, double x) {\n        double epsilon = DEFAULT_EPSILON;\n        int MAX_ITERATIONS = 10000;\n        double big = Double.MAX_VALUE * epsilon;\n        double bigInverse = 1.0 / big;\n        double increasingEpsilon = 2.0;\n        double aPlusOne = a + 1.0;\n        double b = x + a + 1.0;\n        double c = 1.0 / big;\n        double d = 1.0 / b;\n        double h = d;\n        double an = 1.0;\n        double del = 0.0;\n        for (int i = 1; i <= MAX_ITERATIONS; i++) {\n            an *= aPlusOne;\n            b += 2.0;\n            d = 1.0 / (b + a * d);\n            c = b + a / c;\n            del = c * d * del + an;\n            h = d * an * h;\n            if (Math.abs(an * d) < epsilon) {\n                return h * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n            }\n            if (i > 100) {\n                if (Math.abs(del) > big) {\n                    del *= bigInverse;\n                    an *= bigInverse;\n                    h *= bigInverse;\n                }\n                else if (Math.abs(del) < bigInverse) {\n                    del *= big;\n                    an *= big;\n                    h *= big;\n                }\n            }\n        }\n        return h * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}