{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        int endIndex = findEndSeparatorIndex(elementPairs);\n        if (endIndex < size - 1 && elementPairs.get(endIndex + 1) instanceof Separator) {\n            return toFormatter(elementPairs.subList(endIndex + 1, size), notPrinter, notParser);\n        } else {\n            return toFormatter(elementPairs.subList(0, endIndex + 1), notPrinter, notParser).finish(endIndex == size - 1);\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\nprivate static int findEndSeparatorIndex(List<Object> elementPairs) {\n    int endIndex = 0;\n    for (int i = 1; i < elementPairs.size(); i += 2) {\n        if (elementPairs.get(i) instanceof Separator) {\n            endIndex = i;\n        } else {\n            break;\n        }\n    }\n    return endIndex;\n}\n\nprivate PeriodFormatter finish(List<Object> tailElementPairs, boolean endIsSeparator) {\n    Object[] comp = createComposite(tailElementPairs);\n    Separator separator = endIsSeparator ? (Separator) tailElementPairs.get(tailElementPairs.size() - 1) : null;\n    if (this.getPrinter() != null) {\n        return new PeriodFormatter(this.getPrinter(), (PeriodParser) comp[1], separator);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], this.getParser(), separator);\n    }\n}\n\nprivate PeriodFormatter finish(boolean endIsSeparator) {\n    Separator separator = endIsSeparator ? (Separator) this.iElementPairs.get(this.iElementPairs.size() - 1) : null;\n    return new PeriodFormatter(this.getPrinter(), this.getParser(), separator);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e507c00c 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,55 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        int endIndex = findEndSeparatorIndex(elementPairs);\n+        if (endIndex < size - 1 && elementPairs.get(endIndex + 1) instanceof Separator) {\n+            return toFormatter(elementPairs.subList(endIndex + 1, size), notPrinter, notParser);\n+        } else {\n+            return toFormatter(elementPairs.subList(0, endIndex + 1), notPrinter, notParser).finish(endIndex == size - 1);\n+        }\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n+private static int findEndSeparatorIndex(List<Object> elementPairs) {\n+    int endIndex = 0;\n+    for (int i = 1; i < elementPairs.size(); i += 2) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            endIndex = i;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            break;\n         }\n     }\n+    return endIndex;\n+}\n+\n+private PeriodFormatter finish(List<Object> tailElementPairs, boolean endIsSeparator) {\n+    Object[] comp = createComposite(tailElementPairs);\n+    Separator separator = endIsSeparator ? (Separator) tailElementPairs.get(tailElementPairs.size() - 1) : null;\n+    if (this.getPrinter() != null) {\n+        return new PeriodFormatter(this.getPrinter(), (PeriodParser) comp[1], separator);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], this.getParser(), separator);\n+    }\n+}\n+\n+private PeriodFormatter finish(boolean endIsSeparator) {\n+    Separator separator = endIsSeparator ? (Separator) this.iElementPairs.get(this.iElementPairs.size() - 1) : null;\n+    return new PeriodFormatter(this.getPrinter(), this.getParser(), separator);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}