{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\nNode parent = n.getParent();\nif (parent == null) {\n  return false;\n}\nint parentType = parent.getType();\nif (parentType == Token.CALL || parentType == Token.NEW ||\n    NodeUtil.isExpressionNode(parent) || parentType == Token.OBJECTLIT) {\n  return false;\n} else if (parentType == Token.EXPR_RESULT || parentType == Token.IF ||\n           parentType == Token.ASSIGN || parentType == Token.VAR ||\n           parentType == Token.RETURN || parentType == Token.TYPEOF ||\n           parentType == Token.INSTANCEOF) {\n  return true;\n} else if (parentType == Token.BLOCK) {\n    Node grandParent = parent.getParent();\n    if (grandParent == null || grandParent.getType() != Token.FUNCTION) {\n        return false;\n    }\n    return true;\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..f7de3eb6 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,30 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null) {\n+  return false;\n+}\n+int parentType = parent.getType();\n+if (parentType == Token.CALL || parentType == Token.NEW ||\n+    NodeUtil.isExpressionNode(parent) || parentType == Token.OBJECTLIT) {\n+  return false;\n+} else if (parentType == Token.EXPR_RESULT || parentType == Token.IF ||\n+           parentType == Token.ASSIGN || parentType == Token.VAR ||\n+           parentType == Token.RETURN || parentType == Token.TYPEOF ||\n+           parentType == Token.INSTANCEOF) {\n+  return true;\n+} else if (parentType == Token.BLOCK) {\n+    Node grandParent = parent.getParent();\n+    if (grandParent == null || grandParent.getType() != Token.FUNCTION) {\n+        return false;\n+    }\n+    return true;\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}