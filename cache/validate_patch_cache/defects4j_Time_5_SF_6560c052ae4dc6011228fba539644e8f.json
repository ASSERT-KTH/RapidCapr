{
    "patch": "    protected BasePeriod(long duration) {\n        this(duration, PeriodType.standard());\n    }\n\n    protected BasePeriod(long duration, PeriodType periodType) {\n        super();\n        iType = periodType;\n        int years = 0;\n        int months = 0;\n        int weeks = 0; // add this\n        int days = 0;\n        int hours = 0;\n        int minutes = 0;\n        int seconds = 0;\n        long millis = duration;\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_YEAR) {\n            years = (int) (duration / DateTimeConstants.MILLIS_PER_YEAR);\n            millis -= ((long)years) * DateTimeConstants.MILLIS_PER_YEAR;\n        }\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_MONTH) {\n            months = (int) (duration / DateTimeConstants.MILLIS_PER_MONTH);\n            millis -= ((long)months) * DateTimeConstants.MILLIS_PER_MONTH;\n        }\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_WEEK) { // modify\n            weeks = (int) (duration / DateTimeConstants.MILLIS_PER_WEEK); // modify\n            millis -= ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK; // modify\n        }\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_DAY) {\n            days = (int) (duration / DateTimeConstants.MILLIS_PER_DAY);\n            millis -= ((long)days) * DateTimeConstants.MILLIS_PER_DAY;\n        }\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_HOUR) {\n            hours = (int) (duration / DateTimeConstants.MILLIS_PER_HOUR);\n            millis -= ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;\n        }\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_MINUTE) {\n            minutes = (int) (duration / DateTimeConstants.MILLIS_PER_MINUTE);\n            millis -= ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n        }\n        if (duration >= (long)DateTimeConstants.MILLIS_PER_SECOND) {\n            seconds = (int) (duration / DateTimeConstants.MILLIS_PER_SECOND);\n            millis -= ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n        }\n        iYears = years;\n        iMonths = months;\n        iWeeks = weeks; // modify\n        iDays = days;\n        iHours = hours;\n        iMinutes = minutes;\n        iSeconds = seconds;\n        iMillis = (int) millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..548097aa 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,56 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+    protected BasePeriod(long duration) {\n+        this(duration, PeriodType.standard());\n+    }\n+\n+    protected BasePeriod(long duration, PeriodType periodType) {\n+        super();\n+        iType = periodType;\n+        int years = 0;\n+        int months = 0;\n+        int weeks = 0; // add this\n+        int days = 0;\n+        int hours = 0;\n+        int minutes = 0;\n+        int seconds = 0;\n+        long millis = duration;\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_YEAR) {\n+            years = (int) (duration / DateTimeConstants.MILLIS_PER_YEAR);\n+            millis -= ((long)years) * DateTimeConstants.MILLIS_PER_YEAR;\n         }\n-        return result;\n-    }\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_MONTH) {\n+            months = (int) (duration / DateTimeConstants.MILLIS_PER_MONTH);\n+            millis -= ((long)months) * DateTimeConstants.MILLIS_PER_MONTH;\n+        }\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_WEEK) { // modify\n+            weeks = (int) (duration / DateTimeConstants.MILLIS_PER_WEEK); // modify\n+            millis -= ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK; // modify\n+        }\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_DAY) {\n+            days = (int) (duration / DateTimeConstants.MILLIS_PER_DAY);\n+            millis -= ((long)days) * DateTimeConstants.MILLIS_PER_DAY;\n+        }\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_HOUR) {\n+            hours = (int) (duration / DateTimeConstants.MILLIS_PER_HOUR);\n+            millis -= ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;\n+        }\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_MINUTE) {\n+            minutes = (int) (duration / DateTimeConstants.MILLIS_PER_MINUTE);\n+            millis -= ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n+        }\n+        if (duration >= (long)DateTimeConstants.MILLIS_PER_SECOND) {\n+            seconds = (int) (duration / DateTimeConstants.MILLIS_PER_SECOND);\n+            millis -= ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n+        }\n+        iYears = years;\n+        iMonths = months;\n+        iWeeks = weeks; // modify\n+        iDays = days;\n+        iHours = hours;\n+        iMinutes = minutes;\n+        iSeconds = seconds;\n+        iMillis = (int) millis;\n \n }",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}