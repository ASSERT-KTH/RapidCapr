{
    "patch": "private void readTypeVariables() {\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] typeArguments = typeVariable.getGenericDeclaration() instanceof Class\n            ? ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters() : new Type[0];\n    Type[] actualTypeArguments = null;\n    Type type = typeVariable;\n    while (type != null && type instanceof TypeVariable) {\n        TypeVariable<?> variable = (TypeVariable<?>) type;\n        if (actualTypeArguments == null) {\n            actualTypeArguments = variable.getGenericDeclaration() instanceof Class\n                    ? ((Class<?>) variable.getGenericDeclaration()).getTypeParameters() : new Type[0];\n        }\n        int index = Arrays.asList(actualTypeArguments).indexOf(variable);\n        if (index != -1) {\n            type = typeArguments[index];\n            actualTypeArguments = null;\n        } else {\n            type = null;\n        }\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7982776fe 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,38 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] typeArguments = typeVariable.getGenericDeclaration() instanceof Class\n+            ? ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters() : new Type[0];\n+    Type[] actualTypeArguments = null;\n+    Type type = typeVariable;\n+    while (type != null && type instanceof TypeVariable) {\n+        TypeVariable<?> variable = (TypeVariable<?>) type;\n+        if (actualTypeArguments == null) {\n+            actualTypeArguments = variable.getGenericDeclaration() instanceof Class\n+                    ? ((Class<?>) variable.getGenericDeclaration()).getTypeParameters() : new Type[0];\n+        }\n+        int index = Arrays.asList(actualTypeArguments).indexOf(variable);\n+        if (index != -1) {\n+            type = typeArguments[index];\n+            actualTypeArguments = null;\n+        } else {\n+            type = null;\n+        }\n+    }\n+    return type;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: name clash: getActualTypeArgumentFor(TypeVariable<?>) in TypeVariableReturnType and getActualTypeArgumentFor(TypeVariable) in GenericMetadataSupport have the same erasure, yet neither overrides the other",
    "test_result": "ERROR"
}