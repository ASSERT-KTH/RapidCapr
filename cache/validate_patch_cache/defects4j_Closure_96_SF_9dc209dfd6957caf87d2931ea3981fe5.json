{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean varArgs = functionType.getHasRestFormals();\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    List<Node> varArgsArguments = new ArrayList<>();\n\n    // Iterate over the parameter list and check each argument against its corresponding parameter.\n    // Store any varargs arguments and check them separately.\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (varArgs) {\n        varArgsArguments.add(argument);\n        break;\n      } else if (parameter.isOptionalArg()) {\n        if (arguments.hasNext()) {\n          argument = arguments.next();\n          validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n        } else {\n          break;\n        }\n      } else {\n        // if this is not a vararg function and not optional\uff0cthen expect a required argument\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n      varArgs = functionType.getHasRestFormals() && !parameters.hasNext();\n    }\n\n    // Check for extra arguments\n    int numArgs = arguments.hasNext() ? call.getChildCount() - arguments.nextIndex() : ordinal;\n    if (varArgs) {\n      varArgsArguments.addAll(Lists.newArrayList(arguments));\n      minArgs = Math.max(minArgs, ordinal);\n    }\n    if (minArgs <= numArgs && numArgs <= maxArgs) {\n      return;\n    }\n    if (varArgs && numArgs > maxArgs) {\n      return;\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..21164bb8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,29 +1405,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n+    boolean varArgs = functionType.getHasRestFormals();\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    List<Node> varArgsArguments = new ArrayList<>();\n+\n+    // Iterate over the parameter list and check each argument against its corresponding parameter.\n+    // Store any varargs arguments and check them separately.\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (varArgs) {\n+        varArgsArguments.add(argument);\n+        break;\n+      } else if (parameter.isOptionalArg()) {\n+        if (arguments.hasNext()) {\n+          argument = arguments.next();\n+          validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else {\n+          break;\n+        }\n+      } else {\n+        // if this is not a vararg function and not optional\uff0cthen expect a required argument\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+      }\n+      varArgs = functionType.getHasRestFormals() && !parameters.hasNext();\n     }\n-  }\n+\n+    // Check for extra arguments\n+    int numArgs = arguments.hasNext() ? call.getChildCount() - arguments.nextIndex() : ordinal;\n+    if (varArgs) {\n+      varArgsArguments.addAll(Lists.newArrayList(arguments));\n+      minArgs = Math.max(minArgs, ordinal);\n+    }\n+    if (minArgs <= numArgs && numArgs <= maxArgs) {\n+      return;\n+    }\n+    if (varArgs && numArgs > maxArgs) {\n+      return;\n+    }\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}