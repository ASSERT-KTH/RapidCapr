{
    "patch": "// Check if the given byte represents a control character or a high byte character\nif ((b & 128) == 0) {\n    if (controlChars.contains(Character.valueOf((char) b))) {\n        stringBuilder.append('%');\n        stringBuilder.append(charToHex((char) b));\n    } else {\n        stringBuilder.append((char) b);\n    }\n} else if ((b & 224) == 192) {\n    if (i + 1 >= length) {\n        throw new IllegalArgumentException(\"Invalid encoded sequence: insufficient number of bytes\");\n    }\n\n    byte b2 = byteArray[++i];\n    if ((b2 & 192) != 128) {\n        throw new IllegalArgumentException(\"Invalid encoded sequence: bad continuation byte\");\n    }\n\n    char c = (char) ((b & 31) << 6 | b2 & 63);\n    stringBuilder.append(c);\n} else if ((b & 240) == 224) {\n    if (i + 2 >= length) {\n        throw new IllegalArgumentException(\"Invalid encoded sequence: insufficient number of bytes\");\n    }\n\n    byte b2 = byteArray[++i];\n    byte b3 = byteArray[++i];\n    if ((b2 & 192) != 128 || (b3 & 192) != 128) {\n        throw new IllegalArgumentException(\"Invalid encoded sequence: bad continuation byte\");\n    }\n\n    char c = (char) ((b & 15) << 12 | (b2 & 63) << 6 | b3 & 63);\n    stringBuilder.append(c);\n} else if ((b & 248) == 240) {\n    if (i + 3 >= length) {\n        throw new IllegalArgumentException(\"Invalid encoded sequence: insufficient number of bytes\");\n    }\n\n    byte b2 = byteArray[++i];\n    byte b3 = byteArray[++i];\n    byte b4 = byteArray[++i];\n    if ((b2 & 192) != 128 || (b3 & 192) != 128 || (b4 & 192) != 128) {\n        throw new IllegalArgumentException(\"Invalid encoded sequence: bad continuation byte\");\n    }\n\n    int uc = ((b & 7) << 18 | (b2 & 63) << 12 | (b3 & 63) << 6 | b4 & 63) - 65536;\n    stringBuilder.append(Character.highSurrogate(uc));\n    stringBuilder.append(Character.lowSurrogate(uc));\n} else {\n    throw new IllegalArgumentException(\"Invalid UTF-8 byte sequence: malformed leading byte\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}