{
    "patch": "      boolean isPrototypeAssignment = false;\n      Node grandparent = parent.getParent();\n      if (grandparent != null) {\n        if (grandparent.getType() == Token.CALL &&\n            grandparent.getFirstChild().getType() == Token.GETPROP) {\n          Node getProp = grandparent.getFirstChild();\n          isPrototypeAssignment = getProp.getChildCount() == 2 &&\n              getProp.getLastChild().getString().equals(\"apply\");\n        }\n        else if (NodeUtil.isPrototypeProperty(grandparent)) {\n          isPrototypeAssignment = true;\n        }\n        else if (grandparent.getType() == Token.ASSIGN &&\n                 grandparent.getFirstChild().getType() == Token.GETPROP) {\n          Node lhs = grandparent.getFirstChild();\n          Node obj = lhs.getFirstChild();\n          if (obj != null && obj.getLastChild().getString().equals(\"prototype\"))\n            isPrototypeAssignment = true;\n        }\n      }\n      if (isPrototypeAssignment) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..36168648 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      boolean isPrototypeAssignment = false;\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null) {\n+        if (grandparent.getType() == Token.CALL &&\n+            grandparent.getFirstChild().getType() == Token.GETPROP) {\n+          Node getProp = grandparent.getFirstChild();\n+          isPrototypeAssignment = getProp.getChildCount() == 2 &&\n+              getProp.getLastChild().getString().equals(\"apply\");\n+        }\n+        else if (NodeUtil.isPrototypeProperty(grandparent)) {\n+          isPrototypeAssignment = true;\n+        }\n+        else if (grandparent.getType() == Token.ASSIGN &&\n+                 grandparent.getFirstChild().getType() == Token.GETPROP) {\n+          Node lhs = grandparent.getFirstChild();\n+          Node obj = lhs.getFirstChild();\n+          if (obj != null && obj.getLastChild().getString().equals(\"prototype\"))\n+            isPrototypeAssignment = true;\n+        }\n+      }\n+      if (isPrototypeAssignment) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}