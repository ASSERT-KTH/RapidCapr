{
    "patch": "    attachLiteralTypes(n);\n\n    if (n.getType() == Token.FUNCTION) {\n        if (parent.getType() != Token.ASSIGN && parent.getType() != Token.VAR &&\n                !NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n            return;\n        }\n    } else if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n    } else if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n    } else if (n.getType() == Token.LP &&\n            (parent.getType() == Token.EXPR_RESULT || parent == scope.getRootNode())) {\n        handleFunctionInputs(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c26541f6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,23 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    attachLiteralTypes(n);\n+\n+    if (n.getType() == Token.FUNCTION) {\n+        if (parent.getType() != Token.ASSIGN && parent.getType() != Token.VAR &&\n+                !NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+    } else if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+    } else if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+    } else if (n.getType() == Token.LP &&\n+            (parent.getType() == Token.EXPR_RESULT || parent == scope.getRootNode())) {\n+        handleFunctionInputs(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}