{
    "patch": "class Cyclic {\n    String encode_cyclic(String s) {\n        StringBuilder result = new StringBuilder(s.length());\n\n        for(int i = 0; i < s.length(); i += 3) {\n            String group = s.substring(i, Math.min(i + 3, s.length()));\n            result.append(group.charAt(1)).append(group.charAt(2)).append(group.charAt(0));\n        }\n\n        return result.toString();\n    }\n\n    String decode_cyclic(String s) {\n        StringBuilder result = new StringBuilder(s.length());\n\n        for(int i = 0; i < s.length(); i += 3) {\n            String group = s.substring(i, Math.min(i + 3, s.length()));\n            int len = group.length();\n            if(len == 1) {\n                result.append(group.charAt(0));\n                continue;\n            }\n            result.append(group.charAt(len - 1)).append(group.substring(0, len - 1));\n        }\n\n        return result.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/DECODE_CYCLIC.java b/src/main/java/humaneval/buggy/DECODE_CYCLIC.java\nindex 9ba739f..5e17387 100644\n--- a/src/main/java/humaneval/buggy/DECODE_CYCLIC.java\n+++ b/src/main/java/humaneval/buggy/DECODE_CYCLIC.java\n@@ -4,27 +4,34 @@ import java.util.ArrayList;\n \n public class DECODE_CYCLIC {\n     public static String decode_cyclic(String str) {\n-        class Cyclic {\n-            String encode_cyclic(String s) {\n-                ArrayList<String> groups = new ArrayList<String>();\n+class Cyclic {\n+    String encode_cyclic(String s) {\n+        StringBuilder result = new StringBuilder(s.length());\n \n-                for (int i = 0; i < s.length(); i += 3){\n-                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n-                }\n-                int remain = s.length() % 3;\n-                \n-                String result = \"\";\n-                for (String group : groups){\n-                    result += group.substring(1) + group.substring(0, 1);\n-                }\n+        for(int i = 0; i < s.length(); i += 3) {\n+            String group = s.substring(i, Math.min(i + 3, s.length()));\n+            result.append(group.charAt(1)).append(group.charAt(2)).append(group.charAt(0));\n+        }\n+\n+        return result.toString();\n+    }\n \n-                if (remain > 0){\n-                    result += s.substring(s.length() - remain);\n-                }\n+    String decode_cyclic(String s) {\n+        StringBuilder result = new StringBuilder(s.length());\n \n-                return result;\n+        for(int i = 0; i < s.length(); i += 3) {\n+            String group = s.substring(i, Math.min(i + 3, s.length()));\n+            int len = group.length();\n+            if(len == 1) {\n+                result.append(group.charAt(0));\n+                continue;\n             }\n+            result.append(group.charAt(len - 1)).append(group.substring(0, len - 1));\n         }\n+\n+        return result.toString();\n+    }\n+}\n         \n         final Cyclic cyclic = new Cyclic();\n         return cyclic.encode_cyclic(cyclic.encode_cyclic(str));",
    "result_reason": "",
    "test_result": "FAIL"
}