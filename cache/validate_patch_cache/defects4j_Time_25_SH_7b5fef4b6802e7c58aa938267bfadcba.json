{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    // If offsetLocal is greater than the offsetAdjusted, then it is expected \n    // that the instant may have jumped back to occur in the interval before \n    // the transition.\n    int diff = offsetLocal - offsetAdjusted;\n    long nextLocal = nextTransition(instantAdjusted + diff * 1000L);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + diff * 1000L);\n    if (nextLocal != nextAdjusted) {\n        // If nextLocal and nextAdjusted have different values, then we have\n        // an ambiguous time instant. Return the earlier offset (i.e., the\n        // offsetLocal).\n        return offsetLocal;\n    }\n} else if (offsetLocal < offsetAdjusted) {\n    // If offsetLocal is less than the offsetAdjusted, we may have skipped\n    // over a gap due to a transition. In this case, we need to check the \n    // previous transition to determine if the \"gap\" we are crossing would\n    // have caused the instant to occur in the future.\n    int diff = offsetAdjusted - offsetLocal;\n    long prevLocal = previousTransition(instantAdjusted + diff * 1000L);\n    long prevAdjusted = previousTransition(instantLocal - offsetLocal + diff * 1000L);\n    if (prevLocal == prevAdjusted) {\n        // If prevLocal is equal to prevAdjusted, then there is no gap in\n        // time. Return the adjusted offset.\n        return offsetAdjusted;\n    } else {\n        // If prevLocal and prevAdjusted are different, then we have \n        // transitioned over a gap in time. In this case, we need to check\n        // if the adjusted instant occurs before the gap or after the gap.\n        // If it occurs before the gap, we return the first (earlier) offset.\n        // If it occurs after the gap, we return the second (later) offset.\n        // If we cannot determine which side the adjusted instant is on\n        // (i.e., both transitions cross a gap), then we return the earlier offset.\n        final long nextLocal = nextTransition(prevLocal);\n        final long nextAdjusted = nextTransition(prevAdjusted);\n        if (nextAdjusted <= instantLocal - offsetLocal + diff * 1000L) {\n            if (nextLocal == nextAdjusted) {\n                return offsetAdjusted;\n            } else {\n                return offsetLocal;\n            }\n        } else {\n            if (prevLocal == prevAdjusted) {\n                return offsetLocal;\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }\n} else {\n    // If the offsets are equal, return the adjusted offset.\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7a506da5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,59 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    // If offsetLocal is greater than the offsetAdjusted, then it is expected \n+    // that the instant may have jumped back to occur in the interval before \n+    // the transition.\n+    int diff = offsetLocal - offsetAdjusted;\n+    long nextLocal = nextTransition(instantAdjusted + diff * 1000L);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + diff * 1000L);\n+    if (nextLocal != nextAdjusted) {\n+        // If nextLocal and nextAdjusted have different values, then we have\n+        // an ambiguous time instant. Return the earlier offset (i.e., the\n+        // offsetLocal).\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal < offsetAdjusted) {\n+    // If offsetLocal is less than the offsetAdjusted, we may have skipped\n+    // over a gap due to a transition. In this case, we need to check the \n+    // previous transition to determine if the \"gap\" we are crossing would\n+    // have caused the instant to occur in the future.\n+    int diff = offsetAdjusted - offsetLocal;\n+    long prevLocal = previousTransition(instantAdjusted + diff * 1000L);\n+    long prevAdjusted = previousTransition(instantLocal - offsetLocal + diff * 1000L);\n+    if (prevLocal == prevAdjusted) {\n+        // If prevLocal is equal to prevAdjusted, then there is no gap in\n+        // time. Return the adjusted offset.\n+        return offsetAdjusted;\n+    } else {\n+        // If prevLocal and prevAdjusted are different, then we have \n+        // transitioned over a gap in time. In this case, we need to check\n+        // if the adjusted instant occurs before the gap or after the gap.\n+        // If it occurs before the gap, we return the first (earlier) offset.\n+        // If it occurs after the gap, we return the second (later) offset.\n+        // If we cannot determine which side the adjusted instant is on\n+        // (i.e., both transitions cross a gap), then we return the earlier offset.\n+        final long nextLocal = nextTransition(prevLocal);\n+        final long nextAdjusted = nextTransition(prevAdjusted);\n+        if (nextAdjusted <= instantLocal - offsetLocal + diff * 1000L) {\n+            if (nextLocal == nextAdjusted) {\n+                return offsetAdjusted;\n+            } else {\n+                return offsetLocal;\n+            }\n+        } else {\n+            if (prevLocal == prevAdjusted) {\n+                return offsetLocal;\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+} else {\n+    // If the offsets are equal, return the adjusted offset.\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-10-01T07:00:00.000",
    "test_result": "FAIL"
}