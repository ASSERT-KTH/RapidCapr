{
    "patch": "public static double getTypedPercent(String input) {\n    int countTyped = 0;\n    int count = 0;\n    boolean isQuote = false;\n    for (char c : input.toCharArray()) {\n        if (c != ' ') {\n            count++;\n            if (c == '\"' && !isQuote) {\n                isQuote = true;\n            } else if (c == '\"' && isQuote) {\n                isQuote = false;\n                countTyped++;\n            } else if (isQuote) {\n                countTyped++;\n            }\n        }\n    }\n    return (double) countTyped / (double) count * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..dfb0351c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String input) {\n+    int countTyped = 0;\n+    int count = 0;\n+    boolean isQuote = false;\n+    for (char c : input.toCharArray()) {\n+        if (c != ' ') {\n+            count++;\n+            if (c == '\"' && !isQuote) {\n+                isQuote = true;\n+            } else if (c == '\"' && isQuote) {\n+                isQuote = false;\n+                countTyped++;\n+            } else if (isQuote) {\n+                countTyped++;\n+            }\n+        }\n+    }\n+    return (double) countTyped / (double) count * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}