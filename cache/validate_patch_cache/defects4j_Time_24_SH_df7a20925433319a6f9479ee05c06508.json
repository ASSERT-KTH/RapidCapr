{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year() && savedFields[i].iValue < 100) {\n                int year = iDefaultYear / 100 * 100 + savedFields[i].iValue;\n                if (year < iDefaultYear) {\n                    year += 100;\n                }\n                saveField(DateTimeFieldType.year(), year);\n            } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..72d513fb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,13 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year() && savedFields[i].iValue < 100) {\n+                int year = iDefaultYear / 100 * 100 + savedFields[i].iValue;\n+                if (year < iDefaultYear) {\n+                    year += 100;\n+                }\n+                saveField(DateTimeFieldType.year(), year);\n+            } else {\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}