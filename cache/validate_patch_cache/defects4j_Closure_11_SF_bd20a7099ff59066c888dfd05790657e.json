{
    "patch": "public String getProp(String propName, String defaultValue) {\n    String value = System.getProperty(propName);\n    if (value == null || value.isEmpty()) {\n        // add check for empty default value\n        if (defaultValue == null || defaultValue.isEmpty()) {\n            // log warning that both value and default value are empty\n            System.out.println(\"Warning: Both value and default value are empty for property \" + propName);\n            return \"\";\n        }\n        return defaultValue;\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b994705c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String propName, String defaultValue) {\n+    String value = System.getProperty(propName);\n+    if (value == null || value.isEmpty()) {\n+        // add check for empty default value\n+        if (defaultValue == null || defaultValue.isEmpty()) {\n+            // log warning that both value and default value are empty\n+            System.out.println(\"Warning: Both value and default value are empty for property \" + propName);\n+            return \"\";\n+        }\n+        return defaultValue;\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}