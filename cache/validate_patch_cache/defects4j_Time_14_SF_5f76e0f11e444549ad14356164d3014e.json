{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int newYear = iChronology.year().add(instant, valueToAdd);\n        int newMonthOfYear = iChronology.monthOfYear().add(instant, valueToAdd);\n        int newDayOfMonth = values[2];\n        \n        // If original month was Feb and a leap year, and new month is still Feb, with a day value of 29, return with the day being 29, or else return adjusted to the last day of the new month\n        if (values[1] == 2 && values[2] == 29 && iChronology.year().isLeap(values[0])) {\n            if (newMonthOfYear == 2) {\n                newDayOfMonth = 29;\n            } else {\n                newDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(instant, 1));\n            }\n        } else {\n            // Adjust the day to the last day of the new month if necessary\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(instant, 1));\n            int newMaxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.monthOfYear().set(iChronology.year().set(instant, newYear), newMonthOfYear));\n            if (newMaxDayOfMonth < values[2]) {\n                newDayOfMonth = newMaxDayOfMonth;\n            }\n        }\n        return new int[] {newYear, newMonthOfYear, newDayOfMonth};\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2fa69b07 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int newYear = iChronology.year().add(instant, valueToAdd);\n+        int newMonthOfYear = iChronology.monthOfYear().add(instant, valueToAdd);\n+        int newDayOfMonth = values[2];\n+        \n+        // If original month was Feb and a leap year, and new month is still Feb, with a day value of 29, return with the day being 29, or else return adjusted to the last day of the new month\n+        if (values[1] == 2 && values[2] == 29 && iChronology.year().isLeap(values[0])) {\n+            if (newMonthOfYear == 2) {\n+                newDayOfMonth = 29;\n+            } else {\n+                newDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(instant, 1));\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Adjust the day to the last day of the new month if necessary\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(instant, 1));\n+            int newMaxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.monthOfYear().set(iChronology.year().set(instant, newYear), newMonthOfYear));\n+            if (newMaxDayOfMonth < values[2]) {\n+                newDayOfMonth = newMaxDayOfMonth;\n+            }\n         }\n+        return new int[] {newYear, newMonthOfYear, newDayOfMonth};\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}