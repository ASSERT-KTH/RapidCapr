{
    "patch": "        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            // both offsets are zero or positive\n            long prevTransitionAdjusted = previousTransition(instantAdjusted);\n            if (prevTransitionAdjusted < instantAdjusted - SEVEN_DAYS_MILLIS) {\n                // try the second previous transition\n                prevTransitionAdjusted = previousTransition(prevTransitionAdjusted);\n            }\n            if (instantLocal - prevTransitionAdjusted >= getOffset(prevTransitionAdjusted) - offsetLocal) {\n                // the current time is in a transition zone\n                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n                long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n                if (nextTransitionAdjusted != nextTransitionLocal) {\n                    return offsetLocal;\n                }\n            }\n            return offsetAdjusted;\n        } else {\n            // done with current transition\n            long nextTransitionAdjusted = nextTransition(instantAdjusted);\n            long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n            if (nextTransitionAdjusted != nextTransitionLocal) {\n                // next transition is not at the same instant as current transition\n                int offsetNext = getOffset(nextTransitionAdjusted);\n                int diff = offsetNext - offsetLocal;\n                if (diff > 0) {\n                    // large gap\n                    long next = nextTransition(nextTransitionAdjusted);\n                    if (next <= instantLocal - offsetLocal) {\n                        // second large gap\n                        return offsetNext;\n                    }\n                } else if (diff < 0) {\n                    // overlap\n                    long overlap = nextTransitionLocal - SEVEN_DAYS_MILLIS;\n                    if (prevTransition(nextTransitionAdjusted) < overlap && prevTransitionLocal < overlap) {\n                        return offsetLocal;\n                    }\n                }\n            }\n            return offsetAdjusted;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..65c9194e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            // both offsets are zero or positive\n+            long prevTransitionAdjusted = previousTransition(instantAdjusted);\n+            if (prevTransitionAdjusted < instantAdjusted - SEVEN_DAYS_MILLIS) {\n+                // try the second previous transition\n+                prevTransitionAdjusted = previousTransition(prevTransitionAdjusted);\n+            }\n+            if (instantLocal - prevTransitionAdjusted >= getOffset(prevTransitionAdjusted) - offsetLocal) {\n+                // the current time is in a transition zone\n+                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+                long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n+                if (nextTransitionAdjusted != nextTransitionLocal) {\n+                    return offsetLocal;\n+                }\n+            }\n+            return offsetAdjusted;\n+        } else {\n+            // done with current transition\n+            long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+            long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n+            if (nextTransitionAdjusted != nextTransitionLocal) {\n+                // next transition is not at the same instant as current transition\n+                int offsetNext = getOffset(nextTransitionAdjusted);\n+                int diff = offsetNext - offsetLocal;\n+                if (diff > 0) {\n+                    // large gap\n+                    long next = nextTransition(nextTransitionAdjusted);\n+                    if (next <= instantLocal - offsetLocal) {\n+                        // second large gap\n+                        return offsetNext;\n+                    }\n+                } else if (diff < 0) {\n+                    // overlap\n+                    long overlap = nextTransitionLocal - SEVEN_DAYS_MILLIS;\n+                    if (prevTransition(nextTransitionAdjusted) < overlap && prevTransitionLocal < overlap) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n+            return offsetAdjusted;\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}