{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // For function sub-typing, both function types should have same number of\n  // required parameters and that should incude implicit \"this\" parameter\n  // for methods.\n  int thisArity = getArity(this.parameters);\n  int thatArity = getArity(that.parameters);\n  if (thisArity < thatArity) {\n    // This function is must have at least that many arguments.\n    return false;\n  }\n\n  // Note, we compare the constructor not the prototype.\n  JSType thisThisType = this.getTypeOfThis();\n  JSType thatThisType = that.getTypeOfThis();\n  if (!thisThisType.isSubtype(thatThisType)) {\n    return false;\n  }\n\n  // For parameters, we are contravariant. The spec has the contravariance\n  // backwards, so we flip the arguments here.\n  int i = 0;\n  Node thisParam = this.parameters;\n  Node thatParam = that.parameters;\n  while (thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (i++ < thisArity) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    } else if (thatParamType != null && !thatParamType.isUnknownType()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  JSType thisReturnType = this.getReturnType();\n  JSType thatReturnType = that.getReturnType();\n  if (!thatReturnType.isUnknownType() &&\n      !thisReturnType.isSubtype(thatReturnType)) {\n    return false;\n  }\n\n  return true;\n}\n\nprivate static int getArity(Node node) {\n  int arity = 0;\n  while (node != null) {\n    if (!node.isVarArgs()) {\n      arity++;\n    }\n    node = node.getNext();\n  }\n  return arity;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..e269a4f5 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,71 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n-\n-    ArrowType that = (ArrowType) other;\n-\n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+  ArrowType that = (ArrowType) other;\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+  // For function sub-typing, both function types should have same number of\n+  // required parameters and that should incude implicit \"this\" parameter\n+  // for methods.\n+  int thisArity = getArity(this.parameters);\n+  int thatArity = getArity(that.parameters);\n+  if (thisArity < thatArity) {\n+    // This function is must have at least that many arguments.\n+    return false;\n+  }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+  // Note, we compare the constructor not the prototype.\n+  JSType thisThisType = this.getTypeOfThis();\n+  JSType thatThisType = that.getTypeOfThis();\n+  if (!thisThisType.isSubtype(thatThisType)) {\n+    return false;\n+  }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+  // For parameters, we are contravariant. The spec has the contravariance\n+  // backwards, so we flip the arguments here.\n+  int i = 0;\n+  Node thisParam = this.parameters;\n+  Node thatParam = that.parameters;\n+  while (thatParam != null) {\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+    if (i++ < thisArity) {\n+      if (thatParamType == null ||\n+          !thatParamType.isSubtype(thisParamType)) {\n+        return false;\n       }\n+    } else if (thatParamType != null && !thatParamType.isUnknownType()) {\n+      return false;\n     }\n+    thisParam = thisParam.getNext();\n+    thatParam = thatParam.getNext();\n+  }\n+\n+  JSType thisReturnType = this.getReturnType();\n+  JSType thatReturnType = that.getReturnType();\n+  if (!thatReturnType.isUnknownType() &&\n+      !thisReturnType.isSubtype(thatReturnType)) {\n+    return false;\n+  }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+  return true;\n+}\n \n-    return true;\n+private static int getArity(Node node) {\n+  int arity = 0;\n+  while (node != null) {\n+    if (!node.isVarArgs()) {\n+      arity++;\n+    }\n+    node = node.getNext();\n   }\n+  return arity;\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}