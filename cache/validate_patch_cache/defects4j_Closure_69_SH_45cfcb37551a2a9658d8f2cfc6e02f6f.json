{
    "patch": "      if (functionType.getTypeOfThis().isStructuralInterface()) {\n        Node parent = n.getParent();\n        if (parent.isGetProp() || parent.isGetElem()) {\n          // OK - this is a call on a GETPROP/GETELEM chain.\n        } else if (NodeUtil.isAssignmentOp(parent) &&\n            parent.getParent().isExprResult() &&\n            parent.getFirstChild() == n) {\n          // OK - this is an assignment to a GETPROP/GETELEM chain.\n        } else {\n          report(t, n, EXPLICIT_THIS_WITHOUT_GET, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..fec89726 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis().isStructuralInterface()) {\n+        Node parent = n.getParent();\n+        if (parent.isGetProp() || parent.isGetElem()) {\n+          // OK - this is a call on a GETPROP/GETELEM chain.\n+        } else if (NodeUtil.isAssignmentOp(parent) &&\n+            parent.getParent().isExprResult() &&\n+            parent.getFirstChild() == n) {\n+          // OK - this is an assignment to a GETPROP/GETELEM chain.\n+        } else {\n+          report(t, n, EXPLICIT_THIS_WITHOUT_GET, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}