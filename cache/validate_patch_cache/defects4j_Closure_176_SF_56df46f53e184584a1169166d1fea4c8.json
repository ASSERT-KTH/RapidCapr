{
    "patch": "  void declareType(String name, Node node, JSType type) {\n    Node scopeRoot = SyntacticScopeCreator.getScopeRootNode(node);\n    Var var = scopes.get(scopeRoot).getVar(name);\n    if (name.contains(\".\") || name.contains(\"[\") ||\n        type == null || JSType.BOTTOM.equals(type)) {\n      return; // Nothing to declare.\n    }\n    if (!var.isTypeInferred()) {\n      // If the var has already been typed, we can only narrow its type.\n      JSType oldType = var.getType();\n      if (oldType == null) {\n        var.setType(type);\n        return;\n      }\n      type = oldType.getLeastSupertype(type);\n    }\n    var.setType(type);\n\n    if (type.hasNonScalar()) {\n      registry.registerImplicitInterface(type);\n      ObjectType objType = ObjectType.cast(type);\n      if (objType != null) {\n        if (objType.isStruct()) {\n          // Declare all properties as unknown to be defensive. This would normally result\n          // in a lot of warnings (property access on a struct) but those have been handled\n          // by the code that set `isStruct` to true.\n          for (String prop : objType.getOwnPropertyNames()) {\n            registry.registerPropertyOnType(prop, unknownType);\n          }\n        } else if (scopeRoot.isScript()) {\n          maybeWarnAboutInterfaceChanges(node, objType);\n        }\n      }\n    }\n  }\n\n  private void maybeWarnAboutInterfaceChanges(\n      Node node, ObjectType objectTypeToCheck) {\n    // Only warn in scripts, and not in global scope because global properties are uninteresting.\n    if (!node.isScript() || scope.isGlobal()) {\n      return;\n    }\n    if (currentFileOverview.markedExtern &&\n        !isAddTypeSummary()) {\n      return;\n    }\n    ObjectType currentObjectType =\n        ObjectType.cast(getJSType(node.getFirstChild()));\n    if (currentObjectType == null) {\n      return;\n    }\n    String ns = node.getFirstChild().getQualifiedName();\n    if (ns == null) {\n      return;\n    }\n    for (String interfaceName : currentObjectType.getAllImplementedInterfaces()) {\n      if (interfaceName.equals(objectTypeToCheck.toString())) {\n        return;\n      }\n    }\n    String changeDescription;\n    if (currentObjectType.getConstructor().getDisplayName().equals(ns)) {\n      changeDescription = \"Interface\";\n    } else {\n      changeDescription = \"Record type\";\n    }\n    warnings.add(JSError.make(\n        node, CHANGED_INTERFACE_OR_RECORD_TYPE,\n        changeDescription + \" \\\"\" + ns +\n        \"\\\" has been changed. \" +\n        \"Updated code might break in strange and unpredictable ways.\"));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex c43a7d1a..19b3b15f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -521,109 +521,78 @@ class TypeInference\n    * an assignment or a type cast.\n    */\n   private void updateScopeForTypeChange(\n-      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n-    Preconditions.checkNotNull(resultType);\n-    switch (left.getType()) {\n-      case Token.NAME:\n-        String varName = left.getString();\n-        Var var = syntacticScope.getVar(varName);\n-        boolean isVarDeclaration = left.hasChildren();\n-\n-        // When looking at VAR initializers for declared VARs, we tend\n-        // to use the declared type over the type it's being\n-        // initialized to in the global scope.\n-        //\n-        // For example,\n-        // /** @param {number} */ var f = goog.abstractMethod;\n-        // it's obvious that the programmer wants you to use\n-        // the declared function signature, not the inferred signature.\n-        //\n-        // Or,\n-        // /** @type {Object.<string>} */ var x = {};\n-        // the one-time anonymous object on the right side\n-        // is as narrow as it can possibly be, but we need to make\n-        // sure we back-infer the <string> element constraint on\n-        // the left hand side, so we use the left hand side.\n-\n-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n-            // Makes it easier to check for NPEs.\n-\n-        // TODO(nicksantos): This might be a better check once we have\n-        // back-inference of object/array constraints.  It will probably\n-        // introduce more type warnings.  It uses the result type iff it's\n-        // strictly narrower than the declared var type.\n-        //\n-        //boolean isVarTypeBetter = isVarDeclaration &&\n-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)\n-        //     || !resultType.isSubtype(varType));\n-\n-\n-        if (isVarTypeBetter) {\n-          redeclareSimpleVar(scope, left, resultType);\n-        }\n-        left.setJSType(isVarDeclaration || leftType == null ?\n-            resultType : null);\n-\n-        if (var != null && var.isTypeInferred()) {\n-          JSType oldType = var.getType();\n-          var.setType(oldType == null ?\n-              resultType : oldType.getLeastSupertype(resultType));\n-        }\n-        break;\n-      case Token.GETPROP:\n-        String qualifiedName = left.getQualifiedName();\n-        if (qualifiedName != null) {\n-          scope.inferQualifiedSlot(left, qualifiedName,\n-              leftType == null ? unknownType : leftType,\n-              resultType);\n+  void declareType(String name, Node node, JSType type) {\n+    Node scopeRoot = SyntacticScopeCreator.getScopeRootNode(node);\n+    Var var = scopes.get(scopeRoot).getVar(name);\n+    if (name.contains(\".\") || name.contains(\"[\") ||\n+        type == null || JSType.BOTTOM.equals(type)) {\n+      return; // Nothing to declare.\n+    }\n+    if (!var.isTypeInferred()) {\n+      // If the var has already been typed, we can only narrow its type.\n+      JSType oldType = var.getType();\n+      if (oldType == null) {\n+        var.setType(type);\n+        return;\n+      }\n+      type = oldType.getLeastSupertype(type);\n+    }\n+    var.setType(type);\n+\n+    if (type.hasNonScalar()) {\n+      registry.registerImplicitInterface(type);\n+      ObjectType objType = ObjectType.cast(type);\n+      if (objType != null) {\n+        if (objType.isStruct()) {\n+          // Declare all properties as unknown to be defensive. This would normally result\n+          // in a lot of warnings (property access on a struct) but those have been handled\n+          // by the code that set `isStruct` to true.\n+          for (String prop : objType.getOwnPropertyNames()) {\n+            registry.registerPropertyOnType(prop, unknownType);\n+          }\n+        } else if (scopeRoot.isScript()) {\n+          maybeWarnAboutInterfaceChanges(node, objType);\n         }\n-\n-        left.setJSType(resultType);\n-        ensurePropertyDefined(left, resultType);\n-        break;\n+      }\n     }\n   }\n \n-  /**\n-   * Defines a property if the property has not been defined yet.\n-   */\n-  private void ensurePropertyDefined(Node getprop, JSType rightType) {\n-    String propName = getprop.getLastChild().getString();\n-    Node obj = getprop.getFirstChild();\n-    JSType nodeType = getJSType(obj);\n-    ObjectType objectType = ObjectType.cast(\n-        nodeType.restrictByNotNullOrUndefined());\n-    boolean propCreationInConstructor = obj.isThis() &&\n-        getJSType(syntacticScope.getRootNode()).isConstructor();\n-\n-    if (objectType == null) {\n-      registry.registerPropertyOnType(propName, nodeType);\n-    } else {\n-      if (nodeType.isStruct() && !objectType.hasProperty(propName)) {\n-        // In general, we don't want to define a property on a struct object,\n-        // b/c TypeCheck will later check for improper property creation on\n-        // structs. There are two exceptions.\n-        // 1) If it's a property created inside the constructor, on the newly\n-        //    created instance, allow it.\n-        // 2) If it's a prototype property, allow it. For example:\n-        //    Foo.prototype.bar = baz;\n-        //    where Foo.prototype is a struct and the assignment happens at the\n-        //    top level and the constructor Foo is defined in the same file.\n-        boolean staticPropCreation = false;\n-        Node maybeAssignStm = getprop.getParent().getParent();\n-        if (syntacticScope.isGlobal() &&\n-            NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)) {\n-          String propCreationFilename = maybeAssignStm.getSourceFileName();\n-          Node ctor = objectType.getOwnerFunction().getSource();\n-          if (ctor != null &&\n-              ctor.getSourceFileName().equals(propCreationFilename)) {\n-            staticPropCreation = true;\n-          }\n-        }\n-        if (!propCreationInConstructor && !staticPropCreation) {\n-          return; // Early return to avoid creating the property below.\n-        }\n+  private void maybeWarnAboutInterfaceChanges(\n+      Node node, ObjectType objectTypeToCheck) {\n+    // Only warn in scripts, and not in global scope because global properties are uninteresting.\n+    if (!node.isScript() || scope.isGlobal()) {\n+      return;\n+    }\n+    if (currentFileOverview.markedExtern &&\n+        !isAddTypeSummary()) {\n+      return;\n+    }\n+    ObjectType currentObjectType =\n+        ObjectType.cast(getJSType(node.getFirstChild()));\n+    if (currentObjectType == null) {\n+      return;\n+    }\n+    String ns = node.getFirstChild().getQualifiedName();\n+    if (ns == null) {\n+      return;\n+    }\n+    for (String interfaceName : currentObjectType.getAllImplementedInterfaces()) {\n+      if (interfaceName.equals(objectTypeToCheck.toString())) {\n+        return;\n       }\n+    }\n+    String changeDescription;\n+    if (currentObjectType.getConstructor().getDisplayName().equals(ns)) {\n+      changeDescription = \"Interface\";\n+    } else {\n+      changeDescription = \"Record type\";\n+    }\n+    warnings.add(JSError.make(\n+        node, CHANGED_INTERFACE_OR_RECORD_TYPE,\n+        changeDescription + \" \\\"\" + ns +\n+        \"\\\" has been changed. \" +\n+        \"Updated code might break in strange and unpredictable ways.\"));\n+  }\n \n       if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n         return;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}