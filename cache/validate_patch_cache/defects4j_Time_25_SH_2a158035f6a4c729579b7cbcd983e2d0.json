{
    "patch": "                // try to see if the next transition is close enough to the\n                // estimated transition instant that they are probably the\n                // same transition. If they are the same, use the new offset.\n                // This will fail if a zone has more than two transitions at\n                // the same instant.\n                // The maximum limit is the switch of a non-lenient Gregorian\n                // calendar to a lenient Julian calendar, which occurred in\n                // the British Empire on 1752-09-14.\n                long nextLocal = nextTransition(instantLocal);\n                if (nextLocal == instantLocal) {\n                    return offsetAdjusted;\n                }\n                long nextAdjusted = nextTransition(instantAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    return offsetAdjusted;\n                }\n            }\n            // handle the case where the transition is right at the\n            // start of the interval being queried\n            long nextLocal = nextTransition(instantLocal);\n            if (nextLocal == instantLocal) {\n                return offsetAdjusted;\n            }\n            // we have a problem, so attempt to fix it\n            long nextAdjusted = nextTransition(instantAdjusted);\n            if (nextLocal == nextAdjusted) {\n                return offsetAdjusted;\n            }\n            // we need to fall back to the previous offset\n            return offset(getTransition(nextLocal - DateTimeConstants.MILLIS_PER_DAY)).getOffset();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a9b52cd4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // try to see if the next transition is close enough to the\n+                // estimated transition instant that they are probably the\n+                // same transition. If they are the same, use the new offset.\n+                // This will fail if a zone has more than two transitions at\n+                // the same instant.\n+                // The maximum limit is the switch of a non-lenient Gregorian\n+                // calendar to a lenient Julian calendar, which occurred in\n+                // the British Empire on 1752-09-14.\n+                long nextLocal = nextTransition(instantLocal);\n+                if (nextLocal == instantLocal) {\n+                    return offsetAdjusted;\n+                }\n+                long nextAdjusted = nextTransition(instantAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+            }\n+            // handle the case where the transition is right at the\n+            // start of the interval being queried\n+            long nextLocal = nextTransition(instantLocal);\n+            if (nextLocal == instantLocal) {\n+                return offsetAdjusted;\n+            }\n+            // we have a problem, so attempt to fix it\n+            long nextAdjusted = nextTransition(instantAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            // we need to fall back to the previous offset\n+            return offset(getTransition(nextLocal - DateTimeConstants.MILLIS_PER_DAY)).getOffset();\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}