{
    "patch": "  public boolean canBeCalled() {\n    return isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return toStringHelper(forAnnotations, new HashSet<ObjectType>());\n  }\n\n  private String toStringHelper(boolean forAnnotations, Set<ObjectType> seen) {\n    if (seen.contains(this)) {\n      return \"{...}\";\n    }\n    seen.add(this);\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n                   propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        if (seen.contains(getPropertyType(property))) {\n          sb.append(\"{...}\");\n        } else {\n          sb.append(getPropertyType(property).toStringHelper(forAnnotations, seen));\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..71b9709c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -351,6 +351,14 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   String toStringHelper(boolean forAnnotations) {\n+    return toStringHelper(forAnnotations, new HashSet<ObjectType>());\n+  }\n+\n+  private String toStringHelper(boolean forAnnotations, Set<ObjectType> seen) {\n+    if (seen.contains(this)) {\n+      return \"{...}\";\n+    }\n+    seen.add(this);\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n@@ -361,7 +369,7 @@ class PrototypeObjectType extends ObjectType {\n       Set<String> propertyNames = Sets.newTreeSet();\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+                   propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n@@ -377,7 +385,11 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        if (seen.contains(getPropertyType(property))) {\n+          sb.append(\"{...}\");\n+        } else {\n+          sb.append(getPropertyType(property).toStringHelper(forAnnotations, seen));\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}