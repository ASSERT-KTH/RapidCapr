{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n\n  if (isAssignmentTarget(n)) {\n    // The array literal is acting as a temporary and cannot be folded.\n    return n;\n  }\n\n  if (!right.isNumber() || !NodeUtil.isImmutableValue(left)) {\n    // Complex expressions are used to index into arrays, or strings are used to index into array methods.\n    return n;\n  }\n\n  int index = (int) right.getDouble();\n  if (left.isArrayLit()) {\n    // Optimization for array literals.\n    if (index < 0 || index >= left.getChildCount()) {\n      error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    Node elem = left.getChildAtIndex(index);\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(parent);\n    } else {\n      left.removeChild(elem);\n    }\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  } else if (left.isGetElems()) {\n    // Optimization for chained array accesses.\n    List<Node> chain = new ArrayList<>();\n    while (left.isGetElems()) {\n      chain.add(left.getLastChild());\n      left = left.getFirstChild();\n    }\n    chain.add(left);\n    // Follow the chain backwards to locate the target element.\n    Node elem = null;\n    for (int i = chain.size() - 1; i >= 0 && elem == null; i--) {\n      if (chain.get(i).isNumber()) {\n        int curIndex = (int) chain.get(i).getDouble();\n        if (curIndex < 0) {\n          error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n          return n;\n        }\n        if (curIndex >= chain.get(i - 1).getChildCount()) {\n          error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n          return n;\n        }\n        elem = chain.get(i - 1).getChildAtIndex(curIndex);\n        chain.get(i - 1).removeChild(elem);\n      }\n    }\n    if (elem == null) {\n      return n;\n    }\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(parent);\n    }\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  } else {\n    // General case.\n    for (Node cur = left.getFirstChild(); cur != null; cur = cur.getNext()) {\n      if (!cur.isBlock() && index-- == 0) {\n        if (cur.isEmpty()) {\n          cur = NodeUtil.newUndefinedNode(parent);\n        } else {\n          left.removeChild(cur);\n        }\n        parent.replaceChild(n, cur);\n        reportCodeChange();\n        return cur;\n      }\n    }\n    error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..dbf503ee 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,87 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  if (isAssignmentTarget(n)) {\n+    // The array literal is acting as a temporary and cannot be folded.\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  if (!right.isNumber() || !NodeUtil.isImmutableValue(left)) {\n+    // Complex expressions are used to index into arrays, or strings are used to index into array methods.\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  int index = (int) right.getDouble();\n+  if (left.isArrayLit()) {\n+    // Optimization for array literals.\n+    if (index < 0 || index >= left.getChildCount()) {\n+      error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n-    Node current = left.getFirstChild();\n+    Node elem = left.getChildAtIndex(index);\n+    if (elem.isEmpty()) {\n+      elem = NodeUtil.newUndefinedNode(parent);\n+    } else {\n+      left.removeChild(elem);\n+    }\n+    parent.replaceChild(n, elem);\n+    reportCodeChange();\n+    return elem;\n+  } else if (left.isGetElems()) {\n+    // Optimization for chained array accesses.\n+    List<Node> chain = new ArrayList<>();\n+    while (left.isGetElems()) {\n+      chain.add(left.getLastChild());\n+      left = left.getFirstChild();\n+    }\n+    chain.add(left);\n+    // Follow the chain backwards to locate the target element.\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    for (int i = chain.size() - 1; i >= 0 && elem == null; i--) {\n+      if (chain.get(i).isNumber()) {\n+        int curIndex = (int) chain.get(i).getDouble();\n+        if (curIndex < 0) {\n+          error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n+          return n;\n+        }\n+        if (curIndex >= chain.get(i - 1).getChildCount()) {\n+          error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n+          return n;\n+        }\n+        elem = chain.get(i - 1).getChildAtIndex(curIndex);\n+        chain.get(i - 1).removeChild(elem);\n+      }\n     }\n-\n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+      elem = NodeUtil.newUndefinedNode(parent);\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n+  } else {\n+    // General case.\n+    for (Node cur = left.getFirstChild(); cur != null; cur = cur.getNext()) {\n+      if (!cur.isBlock() && index-- == 0) {\n+        if (cur.isEmpty()) {\n+          cur = NodeUtil.newUndefinedNode(parent);\n+        } else {\n+          left.removeChild(cur);\n+        }\n+        parent.replaceChild(n, cur);\n+        reportCodeChange();\n+        return cur;\n+      }\n+    }\n+    error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n   }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}