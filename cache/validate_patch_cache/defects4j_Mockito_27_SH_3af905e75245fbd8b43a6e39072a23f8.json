{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        T result;\n        if (mock instanceof Factory) {\n            try {\n                ((Factory) mock).setCallback(0, newFilter);\n            } catch (IllegalArgumentException e) {\n                // ignore this exception, it can happen when attempting to reset a mock with\n                // a final method\n            }\n            result = mock;\n        } else {\n            Map<MockHandlerInterface<?>, Object> mocks = getThreadLocalMockHandlerToMockMap();\n            mocks.remove(oldMockHandler);\n            result = Mockito.mock(mock.getClass(), newFilter);\n            MockUtil.copyMocks(oldMockHandler, getMockHandler(result));\n            mocks.put(getMockHandler(result), result);\n        }\n        resetMockListeners(result);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..0f1d8a1a2 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        T result;\n+        if (mock instanceof Factory) {\n+            try {\n+                ((Factory) mock).setCallback(0, newFilter);\n+            } catch (IllegalArgumentException e) {\n+                // ignore this exception, it can happen when attempting to reset a mock with\n+                // a final method\n+            }\n+            result = mock;\n+        } else {\n+            Map<MockHandlerInterface<?>, Object> mocks = getThreadLocalMockHandlerToMockMap();\n+            mocks.remove(oldMockHandler);\n+            result = Mockito.mock(mock.getClass(), newFilter);\n+            MockUtil.copyMocks(oldMockHandler, getMockHandler(result));\n+            mocks.put(getMockHandler(result), result);\n+        }\n+        resetMockListeners(result);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}