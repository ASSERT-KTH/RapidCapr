{
    "patch": "      if (n.getJSDocInfo() != null &&\n          (n.getJSDocInfo().hasThisType() ||\n           n.getJSDocInfo().isOverride() ||\n           n.getJSDocInfo().isConstructor() ||\n           n.getJSDocInfo().isInterface())) {\n        return false;\n      }\n\n      Node current = parent;\n      while (current != null) {\n        if (NodeUtil.isGet(current)) {\n          Node getTarget = current.getFirstChild();\n          if (getTarget.getLastChild().getString().equals(\"prototype\") &&\n              getTarget.getFirstChild().matchesQualifiedName(\"Function.prototype.bind\")) {\n            return false;\n          }\n        } else if (NodeUtil.isName(current)) {\n          // don't traverse the right-hand side of an assign to a prototype\n          // property\n          if (current.getParent().getType() == Token.ASSIGN) {\n            Node leftChild = current.getParent().getFirstChild();\n            if (NodeUtil.isGet(leftChild) &&\n                leftChild.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n          break;\n        }\n        current = current.getParent();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..12119bee 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,36 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getJSDocInfo() != null &&\n+          (n.getJSDocInfo().hasThisType() ||\n+           n.getJSDocInfo().isOverride() ||\n+           n.getJSDocInfo().isConstructor() ||\n+           n.getJSDocInfo().isInterface())) {\n+        return false;\n+      }\n+\n+      Node current = parent;\n+      while (current != null) {\n+        if (NodeUtil.isGet(current)) {\n+          Node getTarget = current.getFirstChild();\n+          if (getTarget.getLastChild().getString().equals(\"prototype\") &&\n+              getTarget.getFirstChild().matchesQualifiedName(\"Function.prototype.bind\")) {\n+            return false;\n+          }\n+        } else if (NodeUtil.isName(current)) {\n+          // don't traverse the right-hand side of an assign to a prototype\n+          // property\n+          if (current.getParent().getType() == Token.ASSIGN) {\n+            Node leftChild = current.getParent().getFirstChild();\n+            if (NodeUtil.isGet(leftChild) &&\n+                leftChild.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n+        current = current.getParent();\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}