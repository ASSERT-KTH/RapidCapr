{
    "patch": "import org.mockito.cglib.proxy.Enhancer;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\n\nimport java.lang.reflect.Method;\n\npublic class MockResetter {\n\n    public static <T> void resetMock(T mock) {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                // Use default answer for any method invocation on the mock\n                return org.mockito.Mockito.RETURNS_DEFAULTS.answer(method);\n            }\n        });\n        T newMock = (T) enhancer.create();\n        /*\n         * If mock is an instance of a static inner class, set newMock as the callback for the static part of the proxy\n         * and copy the old callback array to the new mock.\n         * Otherwise, set newMock as the callback for the proxy.\n         */\n        if (mock.getClass().getName().contains(\"$\")) {\n            int index = mock.getClass().getDeclaredFields().length - 1;\n            org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug staticProxy =\n                    (org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug) mock;\n            staticProxy.setCallbacks(newMock, index);\n        } else {\n            ((org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug) mock).setCallback(0, newMock);\n        }\n    }\n    \n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..44340ead2 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,42 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Enhancer;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+\n+import java.lang.reflect.Method;\n+\n+public class MockResetter {\n+\n+    public static <T> void resetMock(T mock) {\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setCallback(new MethodInterceptor() {\n+            @Override\n+            public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+                // Use default answer for any method invocation on the mock\n+                return org.mockito.Mockito.RETURNS_DEFAULTS.answer(method);\n+            }\n+        });\n+        T newMock = (T) enhancer.create();\n+        /*\n+         * If mock is an instance of a static inner class, set newMock as the callback for the static part of the proxy\n+         * and copy the old callback array to the new mock.\n+         * Otherwise, set newMock as the callback for the proxy.\n+         */\n+        if (mock.getClass().getName().contains(\"$\")) {\n+            int index = mock.getClass().getDeclaredFields().length - 1;\n+            org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug staticProxy =\n+                    (org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug) mock;\n+            staticProxy.setCallbacks(newMock, index);\n+        } else {\n+            ((org.mockito.internal.creation.cglib.ClassImposterizer.ClassWithSuperclassToWorkAroundCglibBug) mock).setCallback(0, newMock);\n+        }\n+    }\n+    \n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}