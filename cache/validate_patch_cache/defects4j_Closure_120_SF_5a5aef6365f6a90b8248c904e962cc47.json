{
    "patch": "/**\n * @return Whether the variable is only assigned a value once for its lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n    Reference decl = getDeclarationOrNull();\n    if (decl == null) {\n        // This is a \"var\" somewhere that we don't track\n        // or a function parameter with no uses.\n        return false;\n    }\n\n    if (decl.isFromExterns()) {\n        // Externs variables are never assigned.\n        return false;\n    }\n\n    // A possible alternative implementation is to count the number\n    // of writes and ensure it is no larger than 1. That's probably\n    // slower than this implementation, though.\n    List<Reference> refs = getAssignmentsInLifetime();\n    if (refs.size() != 1) {\n        return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    Reference ref = refs.get(0);\n    for (BasicBlock block = ref.getBasicBlock();\n         block != null; block = block.getParent()) {\n        if (block.isFunction()) {\n            break;\n        }\n        if (block.isLoop()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate List<Reference> getAssignmentsInLifetime() {\n    List<Reference> assignments = new ArrayList<Reference>();\n    Set<Node> visited = new HashSet<Node>();\n    for (Reference ref : references) {\n        if (!ref.isLValue()) {\n            continue;\n        }\n        Node node = ref.getNode();\n        if (visited.contains(node)) {\n            continue;\n        }\n        visited.add(node);\n        if (ref.isVariableDeclaration() && ref.isInitializingDeclaration()) {\n            assignments.add(ref);\n        } else if (ref.isSimpleAssignmentToName() || ref.isInc()) {\n            assignments.add(ref);\n        }\n    }\n    return assignments;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..27956016 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,71 +371,64 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n-      }\n-      return false;\n-    }\n-\n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n-      }\n-      return null;\n+/**\n+ * @return Whether the variable is only assigned a value once for its lifetime.\n+ */\n+boolean isAssignedOnceInLifetime() {\n+    Reference decl = getDeclarationOrNull();\n+    if (decl == null) {\n+        // This is a \"var\" somewhere that we don't track\n+        // or a function parameter with no uses.\n+        return false;\n     }\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n-        }\n-      }\n-      return null;\n+    if (decl.isFromExterns()) {\n+        // Externs variables are never assigned.\n+        return false;\n     }\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n+    // A possible alternative implementation is to count the number\n+    // of writes and ensure it is no larger than 1. That's probably\n+    // slower than this implementation, though.\n+    List<Reference> refs = getAssignmentsInLifetime();\n+    if (refs.size() != 1) {\n         return false;\n-      }\n+    }\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n+    // Make sure this assignment is not in a loop.\n+    Reference ref = refs.get(0);\n+    for (BasicBlock block = ref.getBasicBlock();\n+         block != null; block = block.getParent()) {\n+        if (block.isFunction()) {\n+            break;\n         }\n-      }\n+        if (block.isLoop()) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n \n-      return true;\n+private List<Reference> getAssignmentsInLifetime() {\n+    List<Reference> assignments = new ArrayList<Reference>();\n+    Set<Node> visited = new HashSet<Node>();\n+    for (Reference ref : references) {\n+        if (!ref.isLValue()) {\n+            continue;\n+        }\n+        Node node = ref.getNode();\n+        if (visited.contains(node)) {\n+            continue;\n+        }\n+        visited.add(node);\n+        if (ref.isVariableDeclaration() && ref.isInitializingDeclaration()) {\n+            assignments.add(ref);\n+        } else if (ref.isSimpleAssignmentToName() || ref.isInc()) {\n+            assignments.add(ref);\n+        }\n     }\n+    return assignments;\n+}\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}