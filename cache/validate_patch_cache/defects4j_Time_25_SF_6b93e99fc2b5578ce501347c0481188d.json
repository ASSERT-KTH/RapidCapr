{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long prevTransitionLocal = previousTransition(instantLocal + initialOffset);\n    final long prevTransitionAdjusted = previousTransition(instantLocal) - initialOffset;\n\n    if (prevTransitionLocal <= prevTransitionAdjusted) {\n        return initialOffset;\n    }\n    final int offsetBeforeTransition = getOffset(prevTransitionLocal);\n    final int offsetAfterTransition = getOffset(prevTransitionAdjusted);\n\n    if (offsetBeforeTransition > offsetAfterTransition) {\n        return offsetBeforeTransition;\n    }\n    return offsetAfterTransition;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..21fd070e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,22 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long prevTransitionLocal = previousTransition(instantLocal + initialOffset);\n+    final long prevTransitionAdjusted = previousTransition(instantLocal) - initialOffset;\n+\n+    if (prevTransitionLocal <= prevTransitionAdjusted) {\n+        return initialOffset;\n     }\n+    final int offsetBeforeTransition = getOffset(prevTransitionLocal);\n+    final int offsetAfterTransition = getOffset(prevTransitionAdjusted);\n+\n+    if (offsetBeforeTransition > offsetAfterTransition) {\n+        return offsetBeforeTransition;\n+    }\n+    return offsetAfterTransition;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}