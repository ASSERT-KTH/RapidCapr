{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n\n        Chronology base = getBase();\n        if (base != null) {\n            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        if (year == 1582 && monthOfYear == 10) {\n            // Check if date is in cutover period\n            if (dayOfMonth >= 5 && dayOfMonth <= 14) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n\n            // Ambiguous date in cutover period, return Gregorian instant\n            if (dayOfMonth > 14) {\n                return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            }\n        }\n\n        if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 5)))) {\n            // Julian calendar before cutover\n            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n                throw new IllegalArgumentException(\"Invalid leap year day\");\n            }\n            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return instant;\n        }\n\n        if (year > 1582 || (year == 1582 && (monthOfYear > 10 || (monthOfYear == 10 && dayOfMonth >= 15)))) {\n            // Gregorian calendar after cutover\n            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return instant;\n        }\n\n        // Should never be reached\n        return 0;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..aafbc848 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,51 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        throws IllegalArgumentException {\n+\n+        Chronology base = getBase();\n+        if (base != null) {\n+            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (year == 1582 && monthOfYear == 10) {\n+            // Check if date is in cutover period\n+            if (dayOfMonth >= 5 && dayOfMonth <= 14) {\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            }\n+\n+            // Ambiguous date in cutover period, return Gregorian instant\n+            if (dayOfMonth > 14) {\n+                return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            }\n+        }\n+\n+        if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 5)))) {\n+            // Julian calendar before cutover\n+            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+                throw new IllegalArgumentException(\"Invalid leap year day\");\n+            }\n+            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n             if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n+            return instant;\n         }\n-        return instant;\n-    }\n+\n+        if (year > 1582 || (year == 1582 && (monthOfYear > 10 || (monthOfYear == 10 && dayOfMonth >= 15)))) {\n+            // Gregorian calendar after cutover\n+            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant < iCutoverMillis) {\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            }\n+            return instant;\n+        }\n+\n+        // Should never be reached\n+        return 0;\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}