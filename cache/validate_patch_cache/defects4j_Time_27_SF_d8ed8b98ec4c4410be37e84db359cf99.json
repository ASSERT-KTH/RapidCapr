{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    boolean hasPrinter = false;\n    boolean hasParser = false;\n\n    for (int i = 0; i < size; i++) {\n        Object element = elementPairs.get(i);\n\n        if (element instanceof Separator) {\n            continue;\n        }\n\n        Object[] comp = createComposite(elementPairs.subList(i, size));\n\n        if (!hasPrinter && !notPrinter && comp[0] != null) {\n            printer = (PeriodPrinter) comp[0];\n            hasPrinter = true;\n        }\n\n        if (!hasParser && !notParser && comp[1] != null) {\n            parser = (PeriodParser) comp[1];\n            hasParser = true;\n        }\n\n        if (hasPrinter && hasParser) {\n            break;\n        }\n    }\n\n    if ((notPrinter && !hasParser) || (notParser && !hasPrinter)) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    if (!hasPrinter && !notPrinter && hasParser) {\n        printer = new PeriodPrinter() {\n            public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n                return period.size();\n            }\n\n            public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n                buf.append(period.toString());\n            }\n        };\n    }\n\n    if (!hasParser && !notParser && hasPrinter) {\n        parser = new ISOPeriodFormat.Standard().getParser();\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8e37711e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,64 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    boolean hasPrinter = false;\n+    boolean hasParser = false;\n+\n+    for (int i = 0; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+\n+        if (element instanceof Separator) {\n+            continue;\n+        }\n+\n+        Object[] comp = createComposite(elementPairs.subList(i, size));\n+\n+        if (!hasPrinter && !notPrinter && comp[0] != null) {\n+            printer = (PeriodPrinter) comp[0];\n+            hasPrinter = true;\n+        }\n+\n+        if (!hasParser && !notParser && comp[1] != null) {\n+            parser = (PeriodParser) comp[1];\n+            hasParser = true;\n+        }\n+\n+        if (hasPrinter && hasParser) {\n+            break;\n         }\n     }\n \n+    if ((notPrinter && !hasParser) || (notParser && !hasPrinter)) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    if (!hasPrinter && !notPrinter && hasParser) {\n+        printer = new PeriodPrinter() {\n+            public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n+                return period.size();\n+            }\n+\n+            public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n+                buf.append(period.toString());\n+            }\n+        };\n+    }\n+\n+    if (!hasParser && !notParser && hasPrinter) {\n+        parser = new ISOPeriodFormat.Standard().getParser();\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: <anonymous org.joda.time.format.PeriodFormatterBuilder$1> is not abstract and does not override abstract method printTo(Writer,ReadablePeriod,Locale) in PeriodPrinter",
    "test_result": "ERROR"
}