{
    "patch": "public String fixCode(String code) {\n    if (code.contains(\"for\")) {\n        String[] lines = code.split(\"\\n\");\n        for (int i = 0; i < lines.length; i++) {\n            if (lines[i].contains(\"for\")) {\n                if (lines[i].contains(\"in\") && !lines[i].contains(\"()\")) {\n                    String[] tokens = lines[i].split(\" \");\n                    for (int j = 0; j < tokens.length; j++) {\n                        if (tokens[j].equals(\"in\")) {\n                            tokens[j + 1] = \"[\" + tokens[j + 1] + \"]\";\n                            lines[i] = String.join(\" \", tokens);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        code = String.join(\"\\n\", lines);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..bc6fe598 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    if (code.contains(\"for\")) {\n+        String[] lines = code.split(\"\\n\");\n+        for (int i = 0; i < lines.length; i++) {\n+            if (lines[i].contains(\"for\")) {\n+                if (lines[i].contains(\"in\") && !lines[i].contains(\"()\")) {\n+                    String[] tokens = lines[i].split(\" \");\n+                    for (int j = 0; j < tokens.length; j++) {\n+                        if (tokens[j].equals(\"in\")) {\n+                            tokens[j + 1] = \"[\" + tokens[j + 1] + \"]\";\n+                            lines[i] = String.join(\" \", tokens);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        code = String.join(\"\\n\", lines);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}