{
    "patch": "public String getPropValue(String propFileName, String propName) {\n    Properties prop = new Properties();\n    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n    try {\n        prop.load(inputStream);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    String propValue = prop.getProperty(propName);\n\n    if (propValue == null || propValue.trim().equals(\"\")) {\n        System.out.println(\"Property value not found in the \" + propFileName + \" file for the property \" + propName);\n        StringWriter errors = new StringWriter();\n        e.printStackTrace(new PrintWriter(errors));\n        String errorMsg = errors.toString();\n        fail(errorMsg);\n    }\n\n    return propValue.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3c84687e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getPropValue(String propFileName, String propName) {\n+    Properties prop = new Properties();\n+    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n+    try {\n+        prop.load(inputStream);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    String propValue = prop.getProperty(propName);\n+\n+    if (propValue == null || propValue.trim().equals(\"\")) {\n+        System.out.println(\"Property value not found in the \" + propFileName + \" file for the property \" + propName);\n+        StringWriter errors = new StringWriter();\n+        e.printStackTrace(new PrintWriter(errors));\n+        String errorMsg = errors.toString();\n+        fail(errorMsg);\n+    }\n+\n+    return propValue.trim();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}