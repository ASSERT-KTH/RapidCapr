{
    "patch": "public static String unescapeString(String str) {\n    StringBuilder sb = new StringBuilder(str.length());\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '\\\\') {\n            if (++i >= str.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence at the end of input: \" + str);\n            }\n            c = str.charAt(i);\n            if (c == 'n') {\n                sb.append('\\n');\n            } else if (c == 'r') {\n                sb.append('\\r');\n            } else if (c == 't') {\n                sb.append('\\t');\n            } else if (c == 'b') {\n                sb.append('\\b');\n            } else if (c == 'f') {\n                sb.append('\\f');\n            } else if (c == '\\'') {\n                sb.append('\\'');\n            } else if (c == '\\\"') {\n                sb.append('\\\"');\n            } else if (c == '\\\\') {\n                sb.append('\\\\');\n            } else if (c >= '0' && c <= '7') {\n                int octalValue = c - '0';\n                if (i + 1 < str.length() && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7') {\n                    octalValue = octalValue * 8 + (str.charAt(++i) - '0');\n                    if (i + 1 < str.length() && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7') {\n                        octalValue = octalValue * 8 + (str.charAt(++i) - '0');\n                    }\n                }\n                sb.append((char) octalValue);\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + c);\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..70b400ed 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,49 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeString(String str) {\n+    StringBuilder sb = new StringBuilder(str.length());\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        if (c == '\\\\') {\n+            if (++i >= str.length()) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence at the end of input: \" + str);\n+            }\n+            c = str.charAt(i);\n+            if (c == 'n') {\n+                sb.append('\\n');\n+            } else if (c == 'r') {\n+                sb.append('\\r');\n+            } else if (c == 't') {\n+                sb.append('\\t');\n+            } else if (c == 'b') {\n+                sb.append('\\b');\n+            } else if (c == 'f') {\n+                sb.append('\\f');\n+            } else if (c == '\\'') {\n+                sb.append('\\'');\n+            } else if (c == '\\\"') {\n+                sb.append('\\\"');\n+            } else if (c == '\\\\') {\n+                sb.append('\\\\');\n+            } else if (c >= '0' && c <= '7') {\n+                int octalValue = c - '0';\n+                if (i + 1 < str.length() && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7') {\n+                    octalValue = octalValue * 8 + (str.charAt(++i) - '0');\n+                    if (i + 1 < str.length() && str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '7') {\n+                        octalValue = octalValue * 8 + (str.charAt(++i) - '0');\n+                    }\n+                }\n+                sb.append((char) octalValue);\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + c);\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}