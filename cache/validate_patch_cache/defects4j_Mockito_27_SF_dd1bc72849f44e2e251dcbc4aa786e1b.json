{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof MockitoInternal.MockUtil.MockitoMock) {\n        MockitoInternal.MockUtil mockUtil = new MockitoInternal.MockUtil();\n        MockitoInvocationHandler invocationHandler = (MockitoInvocationHandler) mockUtil.getInvocationHandler(mock);\n        @SuppressWarnings(\"unchecked\")\n        Map<Object, MockHandlerInterface<?>> mockHandlers = (Map<Object, MockHandlerInterface<?>>) invocationHandler.getMockitoInterceptor().getMockHandler().getMockSettings().getImmutableInvocationContainer().getMocks();\n        mockHandlers.put(mockUtil.getMockName(mock), newMockHandler);\n        return;\n    }\n    ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..fa4cc6983 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof MockitoInternal.MockUtil.MockitoMock) {\n+        MockitoInternal.MockUtil mockUtil = new MockitoInternal.MockUtil();\n+        MockitoInvocationHandler invocationHandler = (MockitoInvocationHandler) mockUtil.getInvocationHandler(mock);\n+        @SuppressWarnings(\"unchecked\")\n+        Map<Object, MockHandlerInterface<?>> mockHandlers = (Map<Object, MockHandlerInterface<?>>) invocationHandler.getMockitoInterceptor().getMockHandler().getMockSettings().getImmutableInvocationContainer().getMocks();\n+        mockHandlers.put(mockUtil.getMockName(mock), newMockHandler);\n+        return;\n+    }\n+    ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: package MockitoInternal.MockUtil does not exist",
    "test_result": "ERROR"
}