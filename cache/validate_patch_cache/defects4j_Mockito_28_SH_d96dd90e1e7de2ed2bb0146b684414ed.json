{
    "patch": "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n    Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n    if (mockCandidate != null) {\n        field.setAccessible(true);\n        try {\n            Class<?> fieldType = field.getType();\n            Object candidate = fieldType.cast(mockCandidate);\n            field.set(fieldInstance, candidate);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..63e088fde 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+    Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+    if (mockCandidate != null) {\n+        field.setAccessible(true);\n+        try {\n+            Class<?> fieldType = field.getType();\n+            Object candidate = fieldType.cast(mockCandidate);\n+            field.set(fieldInstance, candidate);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: variable field is already defined in method injectMockCandidate(Class<?>,Set<Object>,Object)",
    "test_result": "ERROR"
}