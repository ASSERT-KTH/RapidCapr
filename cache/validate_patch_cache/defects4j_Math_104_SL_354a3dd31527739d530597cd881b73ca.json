{
    "patch": "private static final double DEFAULT_EPSILON = 1e-9; // infill location\npublic static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    double ret;\n    if (x >= a + 1) {\n        // use regularizedGammaQ because it should converge faster in this case.\n        ret = 1.0 - regularizedGammaQ(a, x);\n    } else {\n        // continued fraction expansion.\n        ContinuedFraction fraction = new ContinuedFraction() {\n            @Override\n            protected double getB(int n, double x) {\n                if (n % 2 == 0) {\n                    int m = n / 2;\n                    double a = (m - a) * (a + m - x);\n                    return -a / ((m + 1) * (1 + m - x));\n                }\n                int m = (n - 1) / 2;\n                double b = (x - 1 - m) * (a + m);\n                return b / ((m + 1) * (a + m + 1));\n            }\n\n            @Override\n            protected double getA(int n, double x) {\n                return 1.0;\n            }\n        };\n        ret = Math.exp(-x + a * Math.log(x) - logGamma(a)) / fraction.evaluate(x);\n    }\n    return Math.min(1.0, Math.max(0.0, ret));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}