{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    RealMatrix sqrt = new Array2DRowRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sqrt.setEntry(i, j, 0.0);\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            double sum = 0;\n            for (int k = 0; k < i; k++) {\n                sum += sqrt.getEntry(k, i) * sqrt.getEntry(k, j);\n            }\n            if (i == j) {\n                sqrt.setEntry(i, j, Math.sqrt(m.getEntry(i, i) - sum));\n            } else {\n                sqrt.setEntry(i, j, (m.getEntry(i, j) - sum) / sqrt.getEntry(i, i));\n            }\n        }\n    }\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..399233e99 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    RealMatrix sqrt = new Array2DRowRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            sqrt.setEntry(i, j, 0.0);\n+        }\n+    }\n+\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            double sum = 0;\n+            for (int k = 0; k < i; k++) {\n+                sum += sqrt.getEntry(k, i) * sqrt.getEntry(k, j);\n+            }\n+            if (i == j) {\n+                sqrt.setEntry(i, j, Math.sqrt(m.getEntry(i, i) - sum));\n+            } else {\n+                sqrt.setEntry(i, j, (m.getEntry(i, j) - sum) / sqrt.getEntry(i, i));\n+            }\n+        }\n     }\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}