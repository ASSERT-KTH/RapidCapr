{
    "patch": "public double getTypedPercent(String js) {\n    int totalChars = js.length();\n    int nonWhitespaceChars = 0;\n    int nonCommentChars = 0;\n    boolean inMultilineComment = false;\n    boolean inSinglelineComment = false;\n    for (int i = 0; i < totalChars - 1; ++i) {\n        char c = js.charAt(i);\n        char d = js.charAt(i+1);\n        if (inSinglelineComment) {\n            if (c == '\\n') {\n                inSinglelineComment = false;\n            }\n        } else if (inMultilineComment) {\n            if (c == '*' && d == '/') {\n                inMultilineComment = false;\n                ++i;\n            }\n        } else {\n            if (c == '/' && d == '/') {\n                inSinglelineComment = true;\n                ++i;\n            } else if (c == '/' && d == '*') {\n                inMultilineComment = true;\n                ++i;\n            } else if (!Character.isWhitespace(c)) {\n                ++nonWhitespaceChars;\n                ++nonCommentChars;\n            } else if (c == '\\n' || c == '\\r') {\n                ++nonCommentChars;\n            }\n        }\n    }\n    if (nonWhitespaceChars == 0) {\n        return 0.0;\n    } else {\n        return ((double) nonCommentChars) / ((double) nonWhitespaceChars) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4f40746b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    int totalChars = js.length();\n+    int nonWhitespaceChars = 0;\n+    int nonCommentChars = 0;\n+    boolean inMultilineComment = false;\n+    boolean inSinglelineComment = false;\n+    for (int i = 0; i < totalChars - 1; ++i) {\n+        char c = js.charAt(i);\n+        char d = js.charAt(i+1);\n+        if (inSinglelineComment) {\n+            if (c == '\\n') {\n+                inSinglelineComment = false;\n+            }\n+        } else if (inMultilineComment) {\n+            if (c == '*' && d == '/') {\n+                inMultilineComment = false;\n+                ++i;\n+            }\n+        } else {\n+            if (c == '/' && d == '/') {\n+                inSinglelineComment = true;\n+                ++i;\n+            } else if (c == '/' && d == '*') {\n+                inMultilineComment = true;\n+                ++i;\n+            } else if (!Character.isWhitespace(c)) {\n+                ++nonWhitespaceChars;\n+                ++nonCommentChars;\n+            } else if (c == '\\n' || c == '\\r') {\n+                ++nonCommentChars;\n+            }\n+        }\n+    }\n+    if (nonWhitespaceChars == 0) {\n+        return 0.0;\n+    } else {\n+        return ((double) nonCommentChars) / ((double) nonWhitespaceChars) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}