{
    "patch": "      if (block.isFunction ||\n          block.getTerminatingNode() != null && block.getTerminatingNode().getNext() != null &&\n              block.getTerminatingNode().getNext().getType() == Token.LOOP) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f86d4e02 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction ||\n+          block.getTerminatingNode() != null && block.getTerminatingNode().getNext() != null &&\n+              block.getTerminatingNode().getNext().getType() == Token.LOOP) {\n+        break;\n+      } else if (block.isLoop) {\n+        return false;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}