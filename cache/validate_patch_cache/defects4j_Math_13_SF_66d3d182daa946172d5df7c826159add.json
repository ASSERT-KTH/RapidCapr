{
    "patch": "private static RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenValues = dec.getRealEigenvalues();\n    final RealMatrix eigenVectors = dec.getV();\n    final int size = eigenValues.length;\n    double maxEigenValue = Double.MIN_VALUE;\n    for (double eigenValue : eigenValues) {\n        if (eigenValue > maxEigenValue) {\n            maxEigenValue = eigenValue;\n        }\n    }\n    maxEigenValue *= 1.0E-9;\n    RealMatrix sqrtEigenValuesDiagonal = new Array2DRowRealMatrix(size, size);\n    for (int i = 0; i < size; ++i) {\n        double sqrtEigenValue = Math.sqrt(Math.max(0.0, eigenValues[i] - maxEigenValue));\n        sqrtEigenValuesDiagonal.setEntry(i, i, sqrtEigenValue);\n    }\n    RealMatrix sqrtM = eigenVectors.multiply(sqrtEigenValuesDiagonal).multiply(eigenVectors.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a27a66ca0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenValues = dec.getRealEigenvalues();\n+    final RealMatrix eigenVectors = dec.getV();\n+    final int size = eigenValues.length;\n+    double maxEigenValue = Double.MIN_VALUE;\n+    for (double eigenValue : eigenValues) {\n+        if (eigenValue > maxEigenValue) {\n+            maxEigenValue = eigenValue;\n+        }\n+    }\n+    maxEigenValue *= 1.0E-9;\n+    RealMatrix sqrtEigenValuesDiagonal = new Array2DRowRealMatrix(size, size);\n+    for (int i = 0; i < size; ++i) {\n+        double sqrtEigenValue = Math.sqrt(Math.max(0.0, eigenValues[i] - maxEigenValue));\n+        sqrtEigenValuesDiagonal.setEntry(i, i, sqrtEigenValue);\n     }\n+    RealMatrix sqrtM = eigenVectors.multiply(sqrtEigenValuesDiagonal).multiply(eigenVectors.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}