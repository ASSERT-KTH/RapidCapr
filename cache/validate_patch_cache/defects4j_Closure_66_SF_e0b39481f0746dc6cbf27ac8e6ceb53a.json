{
    "patch": "public static double getTypedPercent(String json) {\n    JSONObject jsonObject = new JSONObject(json);\n    int totalCount = jsonObject.getInt(\"totalCount\");\n    JSONArray fields = jsonObject.getJSONArray(\"fields\");\n    int typedCount = 0;\n    for (int i = 0; i < fields.length(); i++) {\n        JSONObject field = fields.getJSONObject(i);\n        String fieldType = field.getString(\"type\");\n        if (fieldType.equals(\"typed\")) {\n            typedCount += field.getInt(\"count\");\n        }\n    }\n    return ((double) typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8f0d6592 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    JSONObject jsonObject = new JSONObject(json);\n+    int totalCount = jsonObject.getInt(\"totalCount\");\n+    JSONArray fields = jsonObject.getJSONArray(\"fields\");\n+    int typedCount = 0;\n+    for (int i = 0; i < fields.length(); i++) {\n+        JSONObject field = fields.getJSONObject(i);\n+        String fieldType = field.getString(\"type\");\n+        if (fieldType.equals(\"typed\")) {\n+            typedCount += field.getInt(\"count\");\n+        }\n+    }\n+    return ((double) typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}