{
    "patch": "if (escCh == '\\\\') {\n    switch (ch) {\n        case 'n':  ret.append('\\n'); break;\n        case 't':  ret.append('\\t'); break;\n        case 'r':  ret.append('\\r'); break;\n        case 'f':  ret.append('\\f'); break;\n        case '\\'': ret.append('\\''); break;\n        case '\\\"': ret.append('\\\"'); break;\n        case '\\\\': ret.append('\\\\'); break;\n        case '0':  ret.append('\\0'); break;      //octal representation\n        default: \n            if (ch >= '0' && ch <= '7') {         //octal representation\n                int i, val=0;\n                for (i=0; i<3 && ch>='0' && ch<='7' && pos<len; i++) {\n                    val = val*8 + (ch-'0');\n                    if (++pos < len) ch = str.charAt(pos);\n                }\n                --pos;\n                ret.append((char)val);\n            } else {\n                // \\uXXXX Unicode representation\n                if (ch == 'u') {\n                    int i, val=0;\n                    for (i=0; i<4 && pos<len; i++) {\n                        if (++pos < len) ch = str.charAt(pos);\n                        switch (ch) {\n                            case '0': case '1': case '2': case '3': case '4': \n                            case '5': case '6': case '7': case '8': case '9': \n                                val = val*16 + (ch-'0'); break;\n                            case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': \n                                val = val*16 + (ch-'a') + 10; break; \n                            case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': \n                                val = val*16 + (ch-'A') + 10; break;\n                            default: \n                                ret.append('\\\\');\n                                ret.append('u');\n                                ret.append((char)ch);\n                                continue;\n                        }\n                    }\n                    --pos;\n                    ret.append((char)val);\n                } else {\n                    ret.append('\\\\');\n                    ret.append((char)ch);\n                }\n            }\n            break;\n    }\n} else {\n    ret.append('\\\\');\n    ret.append(escCh);\n    ret.append((char)ch);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}