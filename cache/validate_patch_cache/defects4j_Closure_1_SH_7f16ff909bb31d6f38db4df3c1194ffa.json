{
    "patch": "    boolean shouldOptimizeCallSites = CompilerOptions.OptimizeCalls.DEFAULT_OPTIMIZE_CALLS_IF_ON\n        .equals(compiler.getOptions().optimizeCalls) && fnScope.getBody().hasChildren();\n    boolean shouldOptimizeParameters = CompilerOptions.OptimizeParameters.DEFAULT_OPTIMIZE_PARAMETERS_IF_ON\n        .equals(compiler.getOptions().optimizeParameters) && argList.hasChildren();\n\n    CallSiteInliner.CallSiteOptimizerMode callSiteMode = shouldOptimizeCallSites\n        ? CallSiteInliner.CallSiteOptimizerMode.BASELINE : CallSiteInliner.CallSiteOptimizerMode.NONE;\n    FunctionArgumentInjector.ArgUsageMode usageMode = shouldOptimizeParameters\n        ? FunctionArgumentInjector.ArgUsageMode.INLINE_IF_FIRST_USE : FunctionArgumentInjector.ArgUsageMode.NONE;\n\n    FunctionArgumentInjector.Result result =\n        FunctionArgumentInjector.inject(compiler, argList, usageMode, callSiteMode);\n    (new RemoveUnusedCode.Builder(compiler))\n        .removeGlobals(globalClobberage)\n        .removeLocalVars(fnScope, globalClobberage, result.usedArgs)\n        .removeDeadCode()\n        .build()\n        .apply(result.foundLiveCode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a2790a39 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean shouldOptimizeCallSites = CompilerOptions.OptimizeCalls.DEFAULT_OPTIMIZE_CALLS_IF_ON\n+        .equals(compiler.getOptions().optimizeCalls) && fnScope.getBody().hasChildren();\n+    boolean shouldOptimizeParameters = CompilerOptions.OptimizeParameters.DEFAULT_OPTIMIZE_PARAMETERS_IF_ON\n+        .equals(compiler.getOptions().optimizeParameters) && argList.hasChildren();\n+\n+    CallSiteInliner.CallSiteOptimizerMode callSiteMode = shouldOptimizeCallSites\n+        ? CallSiteInliner.CallSiteOptimizerMode.BASELINE : CallSiteInliner.CallSiteOptimizerMode.NONE;\n+    FunctionArgumentInjector.ArgUsageMode usageMode = shouldOptimizeParameters\n+        ? FunctionArgumentInjector.ArgUsageMode.INLINE_IF_FIRST_USE : FunctionArgumentInjector.ArgUsageMode.NONE;\n+\n+    FunctionArgumentInjector.Result result =\n+        FunctionArgumentInjector.inject(compiler, argList, usageMode, callSiteMode);\n+    (new RemoveUnusedCode.Builder(compiler))\n+        .removeGlobals(globalClobberage)\n+        .removeLocalVars(fnScope, globalClobberage, result.usedArgs)\n+        .removeDeadCode()\n+        .build()\n+        .apply(result.foundLiveCode);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}