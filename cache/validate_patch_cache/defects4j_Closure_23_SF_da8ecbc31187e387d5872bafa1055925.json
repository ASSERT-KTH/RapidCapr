{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (isAssignmentTarget(n)) {\n        // If GETPROP/GETELEM is used as assignment target the array literal is\n        // acting as a temporary we can't fold it here:\n        //    \"[][0] += 1\"\n        return n;\n    }\n\n    if (!right.isNumber() || Math.floor(right.getDouble()) != right.getDouble()) {\n        // If index is not a number or is a decimal, then it can't index into arrays\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    int index = (int) right.getDouble();\n    if (index < 0 || index >= left.getChildCount()) {\n        // If index is out-of-bounds, report an error and return original node n\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // get the node at the given index\n    Node elem = left.getChildAtIndex(index);\n    if (elem == null) {\n        // If the child node at the given index is null, return original node n\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    if (elem.isEmpty()) {\n        // If the node is empty, change it to an undefined node\n        elem = NodeUtil.newUndefinedNode(n);\n    } else {\n        // Otherwise, remove the node from its parent\n        elem.detach();\n    }\n\n    // Replace the entire GETELEM with the value\n    n.replaceWith(elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..f11f2230 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,48 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+        // If GETPROP/GETELEM is used as assignment target the array literal is\n+        // acting as a temporary we can't fold it here:\n+        //    \"[][0] += 1\"\n+        return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (!right.isNumber() || Math.floor(right.getDouble()) != right.getDouble()) {\n+        // If index is not a number or is a decimal, then it can't index into arrays\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    int index = (int) right.getDouble();\n+    if (index < 0 || index >= left.getChildCount()) {\n+        // If index is out-of-bounds, report an error and return original node n\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n+    // get the node at the given index\n+    Node elem = left.getChildAtIndex(index);\n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        // If the child node at the given index is null, return original node n\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+        // If the node is empty, change it to an undefined node\n+        elem = NodeUtil.newUndefinedNode(n);\n     } else {\n-      left.removeChild(elem);\n+        // Otherwise, remove the node from its parent\n+        elem.detach();\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    n.replaceWith(elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}