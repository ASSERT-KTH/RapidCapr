{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n    int diagonalSize = eigenValues.getColumnDimension();\n\n    for (int i = 0; i < diagonalSize; i++) {\n        if (eigenValues.getEntry(i, i) < 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n        }\n        eigenValues.setEntry(i, i, Math.sqrt(eigenValues.getEntry(i, i)));\n    }\n\n    RealMatrix eigenVectorsT = eigenVectors.transpose();\n\n    RealMatrix sqrtEigenValuesMat = eigenValues.scalarMultiply(0.0);\n    sqrtEigenValuesMat.setSubMatrix(eigenValues.getData(), 0, 0);\n\n    RealMatrix eigenVectorsTScaled = eigenVectorsT.scalarMultiply(1.0);\n    eigenVectorsTScaled.setSubMatrix(sqrtEigenValuesMat.getData(), 0, 0);\n\n    RealMatrix sqrtM = eigenVectorsTScaled.multiply(eigenVectors);\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..48e25329d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+    int diagonalSize = eigenValues.getColumnDimension();\n+\n+    for (int i = 0; i < diagonalSize; i++) {\n+        if (eigenValues.getEntry(i, i) < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n+        }\n+        eigenValues.setEntry(i, i, Math.sqrt(eigenValues.getEntry(i, i)));\n     }\n+\n+    RealMatrix eigenVectorsT = eigenVectors.transpose();\n+\n+    RealMatrix sqrtEigenValuesMat = eigenValues.scalarMultiply(0.0);\n+    sqrtEigenValuesMat.setSubMatrix(eigenValues.getData(), 0, 0);\n+\n+    RealMatrix eigenVectorsTScaled = eigenVectorsT.scalarMultiply(1.0);\n+    eigenVectorsTScaled.setSubMatrix(sqrtEigenValuesMat.getData(), 0, 0);\n+\n+    RealMatrix sqrtM = eigenVectorsTScaled.multiply(eigenVectors);\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}