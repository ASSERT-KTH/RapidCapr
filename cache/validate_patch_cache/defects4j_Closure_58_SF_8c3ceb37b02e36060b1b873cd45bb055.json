{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, \n                                 boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n        break;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          if (n.getChildCount() == 3) {\n            computeGenKill(n.getLastChild(), gen, kill, conditional);\n          } else {\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n          }\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          addToSetIfLocal(lhs, kill);\n          addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, true);\n        }\n        break;\n\n      case Token.VAR:\n        boolean lhsMatters = true;\n        for (Node c : n.children()) {\n          if (!c.hasChildren()) {\n            continue;\n          }\n\n          if (c.getFirstChild().getType() != Token.NAME) {\n            lhsMatters = false;\n          } else {\n            Node name = c.getFirstChild();\n            addToSetIfLocal(name, gen);\n            if (!lhsMatters && !conditional) {\n              addToSetIfLocal(name, kill);\n            }\n          }\n          computeGenKill(c.getLastChild(), gen, kill, conditional);\n        }\n        break;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        computeGenKill(n.getLastChild(), gen, kill, conditional);\n        if (!conditional) {\n          addToSetIfLocal(n, kill);\n        }\n        break;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n        computeGenKill(n.getLastChild(), gen, kill, conditional);\n        if (!conditional) {\n          addToSetIfLocal(n, kill);\n        }\n        break;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n          if (!conditional && !isVarInForIn(n)) {\n            addToSetIfLocal(n, kill);\n          }\n        }\n        break;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c : n.children()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        break;\n    }\n  }\n\n  private boolean isVarInForIn(Node n) {\n    return n.getParent() != null && n.getParent().getType() == Token.FOR && \n        NodeUtil.isForIn(n.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..a0687ec1 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,8 +175,8 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, \n+                                 boolean conditional) {\n \n     switch (n.getType()) {\n       case Token.SCRIPT:\n@@ -187,14 +187,16 @@ class LiveVariablesAnalysis extends\n       case Token.WHILE:\n       case Token.DO:\n       case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+        break;\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          if (n.getChildCount() == 3) {\n+            computeGenKill(n.getLastChild(), gen, kill, conditional);\n+          } else {\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+          }\n         } else {\n           // for(x in y) {...}\n           Node lhs = n.getFirstChild();\n@@ -203,44 +205,60 @@ class LiveVariablesAnalysis extends\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+          addToSetIfLocal(lhs, kill);\n+          addToSetIfLocal(lhs, gen);\n+          computeGenKill(rhs, gen, kill, true);\n         }\n-        return;\n+        break;\n \n       case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+        boolean lhsMatters = true;\n+        for (Node c : n.children()) {\n+          if (!c.hasChildren()) {\n+            continue;\n+          }\n+\n+          if (c.getFirstChild().getType() != Token.NAME) {\n+            lhsMatters = false;\n+          } else {\n+            Node name = c.getFirstChild();\n+            addToSetIfLocal(name, gen);\n+            if (!lhsMatters && !conditional) {\n+              addToSetIfLocal(name, kill);\n             }\n           }\n+          computeGenKill(c.getLastChild(), gen, kill, conditional);\n         }\n-        return;\n+        break;\n \n       case Token.AND:\n       case Token.OR:\n         computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n+        computeGenKill(n.getLastChild(), gen, kill, conditional);\n+        if (!conditional) {\n+          addToSetIfLocal(n, kill);\n+        }\n+        break;\n \n       case Token.HOOK:\n         computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n+        computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n+        computeGenKill(n.getLastChild(), gen, kill, conditional);\n+        if (!conditional) {\n+          addToSetIfLocal(n, kill);\n+        }\n+        break;\n \n       case Token.NAME:\n         if (isArgumentsName(n)) {\n           markAllParametersEscaped();\n         } else {\n           addToSetIfLocal(n, gen);\n+          if (!conditional && !isVarInForIn(n)) {\n+            addToSetIfLocal(n, kill);\n+          }\n         }\n-        return;\n+        break;\n \n       default:\n         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n@@ -254,14 +272,18 @@ class LiveVariablesAnalysis extends\n           }\n           computeGenKill(lhs.getNext(), gen, kill, conditional);\n         } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          for (Node c : n.children()) {\n             computeGenKill(c, gen, kill, conditional);\n           }\n         }\n-        return;\n+        break;\n     }\n   }\n \n+  private boolean isVarInForIn(Node n) {\n+    return n.getParent() != null && n.getParent().getType() == Token.FOR && \n+        NodeUtil.isForIn(n.getParent());\n+\n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));\n     String name = node.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}