{
    "patch": "import com.google.javascript.rhino.NodeUtil;\nimport com.google.javascript.rhino.jstype.ObjectType;\n\n// ...\n\nif (childType.isFunctionType()) {\n  FunctionType functionType = childType.toMaybeFunctionType();\n  ObjectType thisType = functionType.getTypeOfThis();\n  if (thisType != null && !NodeUtil.isGet(this.getParent())) {\n    report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());\n} else {\n  ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9be73971 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+import com.google.javascript.rhino.NodeUtil;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+// ...\n+\n+if (childType.isFunctionType()) {\n+  FunctionType functionType = childType.toMaybeFunctionType();\n+  ObjectType thisType = functionType.getTypeOfThis();\n+  if (thisType != null && !NodeUtil.isGet(this.getParent())) {\n+    report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n+} else {\n+  ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}