{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Handle hex numbers with negative sign\n    if (str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n        final String numberStr = '-' + str.substring(3);\n        return createBigInteger(numberStr);\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n        return createBigInteger(str);\n    }\n\n    // Determine if a BigDecimal or floating-point number is needed\n    if (str.indexOf('.') >= 0 || str.indexOf('e') >= 0 || str.indexOf('E') >= 0) {\n        if (str.endsWith(\"f\") || str.endsWith(\"F\")) {\n            return createFloat(str);\n        }\n        if (str.endsWith(\"d\") || str.endsWith(\"D\")) {\n            return createDouble(str);\n        }\n        final BigDecimal decimal = createBigDecimal(str);\n        if (decimal.scale() <= 0) {\n            try {\n                return decimal.intValueExact();\n            } catch (final ArithmeticException e) {\n                try {\n                    return decimal.longValue();\n                } catch (final ArithmeticException e2) {\n                    return decimal;\n                }\n            }\n        }\n        return decimal.floatValue();\n    }\n\n    // Use a Long, Integer or BigInteger as appropriate\n    final String[] radixes = {\"#\", \"0x\", \"0X\", \"-#\"};\n    for (final String radixPrefix : radixes) {\n        final int radix = getRadix(radixPrefix);\n        if (radixPrefix != null && str.startsWith(radixPrefix)) {\n            final String numberString = str.substring(radixPrefix.length());\n            final boolean isNegative = numberString.startsWith(\"-\");\n            if (isNegative) {\n                return createNumber(numberString.substring(1), -radix);\n            } else {\n                return createNumber(numberString, radix);\n            }\n        }\n    }\n    return parseNumber(str);\n}\n\nprivate static int getRadix(final String prefix) {\n    if (StringUtils.isBlank(prefix)) {\n        return 10;\n    }\n    switch (prefix.toLowerCase()) {\n        case \"#\":\n            return 10;\n        case \"0x\":\n        case \"-0x\":\n            return 16;\n        default:\n            throw new IllegalArgumentException(\"Invalid radix prefix: \" + prefix);\n    }\n}\n\nprivate static Number parseNumber(final String str) {\n    try {\n        return createInteger(str);\n    } catch (final NumberFormatException ex1) {\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException ex2) {\n            return createBigInteger(str);\n        }\n    }\n}\n\nprivate static Number createNumber(final String str, final int radix) throws NumberFormatException {\n    if (radix == 10) {\n        // optimized for decimal\n        return parseNumber(str);\n    }\n\n    // otherwise delegate to BigInteger, as Long doesn't have a radix constructor\n    final BigInteger bi = new BigInteger(str, radix);\n    final long longValue = bi.longValue();\n    if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {\n        return Integer.valueOf((int) longValue);\n    } else {\n        return bi;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..375319c4 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,172 +447,106 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n \n-            }\n+    // Handle hex numbers with negative sign\n+    if (str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n+        final String numberStr = '-' + str.substring(3);\n+        return createBigInteger(numberStr);\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n+        return createBigInteger(str);\n+    }\n+\n+    // Determine if a BigDecimal or floating-point number is needed\n+    if (str.indexOf('.') >= 0 || str.indexOf('e') >= 0 || str.indexOf('E') >= 0) {\n+        if (str.endsWith(\"f\") || str.endsWith(\"F\")) {\n+            return createFloat(str);\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n+        if (str.endsWith(\"d\") || str.endsWith(\"D\")) {\n+            return createDouble(str);\n         }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n+        final BigDecimal decimal = createBigDecimal(str);\n+        if (decimal.scale() <= 0) {\n             try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+                return decimal.intValueExact();\n+            } catch (final ArithmeticException e) {\n+                try {\n+                    return decimal.longValue();\n+                } catch (final ArithmeticException e2) {\n+                    return decimal;\n+                }\n             }\n-            return createBigInteger(str);\n         }\n+        return decimal.floatValue();\n+    }\n \n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n+    // Use a Long, Integer or BigInteger as appropriate\n+    final String[] radixes = {\"#\", \"0x\", \"0X\", \"-#\"};\n+    for (final String radixPrefix : radixes) {\n+        final int radix = getRadix(radixPrefix);\n+        if (radixPrefix != null && str.startsWith(radixPrefix)) {\n+            final String numberString = str.substring(radixPrefix.length());\n+            final boolean isNegative = numberString.startsWith(\"-\");\n+            if (isNegative) {\n+                return createNumber(numberString.substring(1), -radix);\n+            } else {\n+                return createNumber(numberString, radix);\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n         }\n+    }\n+    return parseNumber(str);\n+}\n+\n+private static int getRadix(final String prefix) {\n+    if (StringUtils.isBlank(prefix)) {\n+        return 10;\n+    }\n+    switch (prefix.toLowerCase()) {\n+        case \"#\":\n+            return 10;\n+        case \"0x\":\n+        case \"-0x\":\n+            return 16;\n+        default:\n+            throw new IllegalArgumentException(\"Invalid radix prefix: \" + prefix);\n+    }\n+}\n+\n+private static Number parseNumber(final String str) {\n+    try {\n+        return createInteger(str);\n+    } catch (final NumberFormatException ex1) {\n         try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-            }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            return createLong(str);\n+        } catch (final NumberFormatException ex2) {\n+            return createBigInteger(str);\n         }\n+    }\n+}\n \n-        return createBigDecimal(str);\n+private static Number createNumber(final String str, final int radix) throws NumberFormatException {\n+    if (radix == 10) {\n+        // optimized for decimal\n+        return parseNumber(str);\n     }\n \n+    // otherwise delegate to BigInteger, as Long doesn't have a radix constructor\n+    final BigInteger bi = new BigInteger(str, radix);\n+    final long longValue = bi.longValue();\n+    if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {\n+        return Integer.valueOf((int) longValue);\n+    } else {\n+        return bi;\n+    }\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "error: strings in switch are not supported in -source 1.5",
    "test_result": "ERROR"
}