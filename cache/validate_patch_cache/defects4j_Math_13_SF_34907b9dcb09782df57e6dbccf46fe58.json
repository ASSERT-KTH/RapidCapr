{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final BidiagonalDecomposition dec = new BidiagonalDecomposition(m);\n    final RealMatrix u = dec.getU();\n    final RealMatrix v = dec.getVT();\n    final RealMatrix s = dec.getB();\n    final int n = s.getColumnDimension();\n    final RealMatrix sqrtS = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrtS.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n    }\n    return u.multiply(sqrtS).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b66ee7f86 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final BidiagonalDecomposition dec = new BidiagonalDecomposition(m);\n+    final RealMatrix u = dec.getU();\n+    final RealMatrix v = dec.getVT();\n+    final RealMatrix s = dec.getB();\n+    final int n = s.getColumnDimension();\n+    final RealMatrix sqrtS = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrtS.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n     }\n+    return u.multiply(sqrtS).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}