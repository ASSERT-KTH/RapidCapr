{
    "patch": "public String getprop(String property) throws IOException {\n    Process p = Runtime.getRuntime().exec(\"getprop \" + property);\n    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\n    String line;\n    StringBuilder output = new StringBuilder();\n    while ((line = input.readLine()) != null) {\n        output.append(line).append(\"\\n\");\n    }\n    input.close();\n    return output.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..e8260cbd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String property) throws IOException {\n+    Process p = Runtime.getRuntime().exec(\"getprop \" + property);\n+    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+    String line;\n+    StringBuilder output = new StringBuilder();\n+    while ((line = input.readLine()) != null) {\n+        output.append(line).append(\"\\n\");\n+    }\n+    input.close();\n+    return output.toString().trim();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}