{
    "patch": "      if (NodeUtil.getEnclosingType(n, Token.OBJECTLIT) == null\n          && NodeUtil.getEnclosingType(n, Token.CATCH) == null) {\n        String className = NodeUtil.getClassNameNode(n);\n        if (className == null || NodeUtil.getRootOfQualifiedName(className).getType() != Token.THIS) {\n          // Don't traverse named functions that are getting lent to a prototype.\n          // Only traverse anonymous functions that are direct children of an ASSIGN node.\n          return parent != null && parent.getType() == Token.ASSIGN && n.isFunction() && !NodeUtil.isNameDeclared(n, t.getScope());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2fb30d70 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.getEnclosingType(n, Token.OBJECTLIT) == null\n+          && NodeUtil.getEnclosingType(n, Token.CATCH) == null) {\n+        String className = NodeUtil.getClassNameNode(n);\n+        if (className == null || NodeUtil.getRootOfQualifiedName(className).getType() != Token.THIS) {\n+          // Don't traverse named functions that are getting lent to a prototype.\n+          // Only traverse anonymous functions that are direct children of an ASSIGN node.\n+          return parent != null && parent.getType() == Token.ASSIGN && n.isFunction() && !NodeUtil.isNameDeclared(n, t.getScope());\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}