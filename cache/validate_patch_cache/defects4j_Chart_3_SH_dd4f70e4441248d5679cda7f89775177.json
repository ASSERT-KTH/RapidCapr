{
    "patch": "        if (this.data.isEmpty() || start >= this.data.size()) {\n            return copy;\n        }\n        copy.data = new java.util.ArrayList();\n        copy.maxY = Double.NEGATIVE_INFINITY;\n        copy.minY = Double.POSITIVE_INFINITY;\n        for (int index = start; index <= end && index < this.data.size(); index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n\n                double y = clone.getValue().doubleValue();\n                if (Double.isNaN(y)) {\n                    continue;\n                }\n                if (y > copy.maxY) {\n                    copy.maxY = y;\n                }\n                if (y < copy.minY) {\n                    copy.minY = y;\n                }\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..f73bf5f 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,32 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        if (this.data.isEmpty() || start >= this.data.size()) {\n+            return copy;\n+        }\n+        copy.data = new java.util.ArrayList();\n+        copy.maxY = Double.NEGATIVE_INFINITY;\n+        copy.minY = Double.POSITIVE_INFINITY;\n+        for (int index = start; index <= end && index < this.data.size(); index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+\n+                double y = clone.getValue().doubleValue();\n+                if (Double.isNaN(y)) {\n+                    continue;\n+                }\n+                if (y > copy.maxY) {\n+                    copy.maxY = y;\n+                }\n+                if (y < copy.minY) {\n+                    copy.minY = y;\n+                }\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}