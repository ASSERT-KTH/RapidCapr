{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n\n        // evaluate the simplex\n        Arrays.sort(simplex, comparator);\n\n        // check convergence\n        final double y0 = simplex[0].getValue();\n        final double[] x0 = simplex[0].getPoint();\n        final double[] x1 = simplex[simplex.length - 1].getPoint();\n        final double y1 = simplex[simplex.length - 1].getValue();\n        final double ym = evaluate(xmid).getValue();\n        final double delta = Math.abs(y0 - ym) + Math.abs(y1 - ym) + Math.abs(y1 - y0);\n\n        if (delta <= 0.5 * getRelativeThreshold() * (Math.abs(y0) + Math.abs(y1))) {\n            return;\n        }\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, simplex[0]) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex[simplex.length - 1] = expanded;\n            } else {\n                // accept the reflected simplex\n                simplex[simplex.length - 1] = reflected;\n            }\n\n        } else {\n\n            // perform an inside contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n            if (comparator.compare(contracted, simplex[0]) < 0) {\n                // accept the contracted simplex\n                simplex[simplex.length - 1] = contracted;\n            } else {\n\n                // perform an outside contraction step\n                final RealPointValuePair contractedOutside = evaluateNewSimplex(original, -beta, comparator);\n                if (comparator.compare(contractedOutside, simplex[simplex.length - 1]) < 0) {\n                    // accept the outside contracted simplex\n                    simplex[simplex.length - 1] = contractedOutside;\n                } else {\n                    // perform a shrinking step\n                    for (int i = 1; i < simplex.length; ++i) {\n                        simplex[i] = new RealPointValuePair(\n                            ArrayMath.add(x0, ArrayMath.scale(ArrayMath.subtract(simplex[i].getPoint(), x0), sigma)),\n                            Double.NaN);\n                    }\n                }\n            }\n\n        }\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..790ba8b17 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,75 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // evaluate the simplex\n+        Arrays.sort(simplex, comparator);\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+        // check convergence\n+        final double y0 = simplex[0].getValue();\n+        final double[] x0 = simplex[0].getPoint();\n+        final double[] x1 = simplex[simplex.length - 1].getPoint();\n+        final double y1 = simplex[simplex.length - 1].getValue();\n+        final double ym = evaluate(xmid).getValue();\n+        final double delta = Math.abs(y0 - ym) + Math.abs(y1 - ym) + Math.abs(y1 - y0);\n \n-                return;\n+        if (delta <= 0.5 * getRelativeThreshold() * (Math.abs(y0) + Math.abs(y1))) {\n+            return;\n+        }\n \n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, simplex[0]) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex[simplex.length - 1] = expanded;\n+            } else {\n+                // accept the reflected simplex\n+                simplex[simplex.length - 1] = reflected;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        } else {\n \n-            // check convergence\n-                return;\n+            // perform an inside contraction step\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n+            if (comparator.compare(contracted, simplex[0]) < 0) {\n+                // accept the contracted simplex\n+                simplex[simplex.length - 1] = contracted;\n+            } else {\n+\n+                // perform an outside contraction step\n+                final RealPointValuePair contractedOutside = evaluateNewSimplex(original, -beta, comparator);\n+                if (comparator.compare(contractedOutside, simplex[simplex.length - 1]) < 0) {\n+                    // accept the outside contracted simplex\n+                    simplex[simplex.length - 1] = contractedOutside;\n+                } else {\n+                    // perform a shrinking step\n+                    for (int i = 1; i < simplex.length; ++i) {\n+                        simplex[i] = new RealPointValuePair(\n+                            ArrayMath.add(x0, ArrayMath.scale(ArrayMath.subtract(simplex[i].getPoint(), x0), sigma)),\n+                            Double.NaN);\n+                    }\n+                }\n             }\n \n         }\n \n     }\n \n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}