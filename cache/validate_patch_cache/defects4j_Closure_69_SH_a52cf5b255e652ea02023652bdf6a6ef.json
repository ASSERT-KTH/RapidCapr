{
    "patch": "    if (childType.isFunctionType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      JSType typeOfThis = functionType.getTypeOfThis();\n      if (typeOfThis != null) {\n        Node parent = n.getParent();\n        \n        if (NodeUtil.isGetProp(parent) && \n            parent.getFirstChild() == child) {\n          // Get calls are okay.\n          return;\n        }\n        \n        if (NodeUtil.isGetElem(parent) && \n            parent.getFirstChild() == child && \n            parent.getLastChild() != null &&\n            parent.getLastChild().isString()) {\n          // Get calls are okay.\n          return;\n        }\n        \n        report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n      }                               \n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..53fe482a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,49 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+    if (childType.isFunctionType()) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n+\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      if(functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      JSType typeOfThis = functionType.getTypeOfThis();\n+      if (typeOfThis != null) {\n+        Node parent = n.getParent();\n+        \n+        if (NodeUtil.isGetProp(parent) && \n+            parent.getFirstChild() == child) {\n+          // Get calls are okay.\n+          return;\n+        }\n+        \n+        if (NodeUtil.isGetElem(parent) && \n+            parent.getFirstChild() == child && \n+            parent.getLastChild() != null &&\n+            parent.getLastChild().isString()) {\n+          // Get calls are okay.\n+          return;\n+        }\n+        \n+        report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+      }                               \n+      \n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}