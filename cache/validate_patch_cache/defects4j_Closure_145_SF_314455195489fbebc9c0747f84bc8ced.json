{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a labeled\n    // FUNCTION or DO isn't generated when extraneous BLOCKs are skipped.\n    // Either an empty statement or a block with exactly one child, makes\n    // it a FUNCTION or DO.\n    if (n.getType() == Token.BLOCK) {\n        List<Node> children = n.children();\n        if (children.size() == 1) {\n            Node onlyChild = children.get(0);\n            return (onlyChild.getType() == Token.FUNCTION || onlyChild.getType() == Token.DO);\n        }\n        return false;\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..50715058 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,21 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    // For labels with block children, we need to ensure that a labeled\n+    // FUNCTION or DO isn't generated when extraneous BLOCKs are skipped.\n+    // Either an empty statement or a block with exactly one child, makes\n+    // it a FUNCTION or DO.\n+    if (n.getType() == Token.BLOCK) {\n+        List<Node> children = n.children();\n+        if (children.size() == 1) {\n+            Node onlyChild = children.get(0);\n+            return (onlyChild.getType() == Token.FUNCTION || onlyChild.getType() == Token.DO);\n+        }\n+        return false;\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}