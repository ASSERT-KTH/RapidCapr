{
    "patch": "public double getTypedPercent(String json) {\n    Gson gson = new Gson(); \n    TypeToken<List<TypedValue>> token = new TypeToken<List<TypedValue>>() {}; \n    List<TypedValue> list = gson.fromJson(json, token.getType()); \n    int count = 0; \n    for (TypedValue tv : list) { \n        if (tv.getType() != null) {\n            count++; \n        }\n    }\n    return (double) count / list.size() * 100.0; \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..12a5e774 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    Gson gson = new Gson(); \n+    TypeToken<List<TypedValue>> token = new TypeToken<List<TypedValue>>() {}; \n+    List<TypedValue> list = gson.fromJson(json, token.getType()); \n+    int count = 0; \n+    for (TypedValue tv : list) { \n+        if (tv.getType() != null) {\n+            count++; \n+        }\n+    }\n+    return (double) count / list.size() * 100.0; \n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}