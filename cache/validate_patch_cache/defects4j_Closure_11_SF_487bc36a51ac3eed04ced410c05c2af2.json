{
    "patch": "public static String getprop(String propName) {\n    String propValue = null;\n    try {\n        Runtime rt = Runtime.getRuntime();\n        //use -DpropertyName to set system properties\n        Process proc = rt.exec(\"getprop \" + propName);\n        InputStream stdin = proc.getInputStream();\n        InputStreamReader isr = new InputStreamReader(stdin);\n        BufferedReader br = new BufferedReader(isr);\n        // stdout of the process is the value of the system property\n        int exitVal = proc.waitFor();\n        if (exitVal != 0) {\n            String error = br.readLine();\n            System.err.println(\"getprop error (\" + exitVal + \"): \" + error);\n        }\n        else {\n            propValue = br.readLine();\n            assertTrue(\"expected a non-empty property value\", propValue.length() > 0);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return propValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9b90832f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String propName) {\n+    String propValue = null;\n+    try {\n+        Runtime rt = Runtime.getRuntime();\n+        //use -DpropertyName to set system properties\n+        Process proc = rt.exec(\"getprop \" + propName);\n+        InputStream stdin = proc.getInputStream();\n+        InputStreamReader isr = new InputStreamReader(stdin);\n+        BufferedReader br = new BufferedReader(isr);\n+        // stdout of the process is the value of the system property\n+        int exitVal = proc.waitFor();\n+        if (exitVal != 0) {\n+            String error = br.readLine();\n+            System.err.println(\"getprop error (\" + exitVal + \"): \" + error);\n+        }\n+        else {\n+            propValue = br.readLine();\n+            assertTrue(\"expected a non-empty property value\", propValue.length() > 0);\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return propValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}