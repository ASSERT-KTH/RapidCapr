{
    "patch": "      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n          \n          // Do not inline if it's a singleton getter method call\n          if (isSingletonGetterMethodCall(callNode, convention)) {\n            return false;\n          }\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }\n\n    private boolean isSingletonGetterMethodCall(Node callNode, CodingConvention convention) {\n      if (!callNode.getFirstChild().isGetProp()) {\n        return false;\n      }\n\n      Node target = callNode.getFirstChild().getFirstChild();\n      if (!target.isQualifiedName()) {\n        return false;\n      }\n\n      String className =\n          convention.getSingletonGetterClassName(callNode.getFirstChild());\n      return className != null && className.equals(target.getQualifiedName());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..8c4e2891 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,43 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (value.isFunction()) {\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+          \n+          // Do not inline if it's a singleton getter method call\n+          if (isSingletonGetterMethodCall(callNode, convention)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return canMoveAggressively(value) ||\n+          canMoveModerately(initialization, reference);\n+    }\n+\n+    private boolean isSingletonGetterMethodCall(Node callNode, CodingConvention convention) {\n+      if (!callNode.getFirstChild().isGetProp()) {\n+        return false;\n+      }\n+\n+      Node target = callNode.getFirstChild().getFirstChild();\n+      if (!target.isQualifiedName()) {\n+        return false;\n+      }\n+\n+      String className =\n+          convention.getSingletonGetterClassName(callNode.getFirstChild());\n+      return className != null && className.equals(target.getQualifiedName());\n+    }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}