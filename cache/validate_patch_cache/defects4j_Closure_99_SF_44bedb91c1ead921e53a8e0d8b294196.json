{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n        // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN ||\n              pType == Token.OBJECTLIT ||\n              pType == Token.LP ||\n              pType == Token.IF ||\n              pType == Token.WHILE ||\n              pType == Token.DO ||\n              pType == Token.FOR ||\n              pType == Token.CATCH ||\n              pType == Token.EXPR_EVAL ||\n              pType == Token.NEW ||\n              pType == Token.RETURN ||\n              (parent.isForIn() && parent.getFirstChild() == n) ||\n              ((pType == Token.GETELEM || pType == Token.GETPROP) && parent.getLastChild() == n && !NodeUtil.isObjectCallMethod(n))) ||\n            (parent.isClass() && isClassFieldOrStaticMethod(n))) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle nested assignments properly\n            // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (lhs.getType() == Token.GETPROP) {\n                Node prop = lhs.getLastChild();\n                // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n                if (prop.getType() == Token.STRING &&\n                        prop.getString().equals(\"prototype\")) {\n                    return false;\n                } else if (lhs.getQualifiedName() != null &&\n                        (lhs.getQualifiedName().contains(\".prototype.\") ||\n                                (lhs.getNext() != null &&\n                                        (lhs.getNext().getType() == Token.GETELEM || lhs.getNext().getType() == Token.OBJECTLIT)) &&\n                                n.getType() != Token.VAR)) {\n                    return false;\n                }\n            } else if (lhs.getType() == Token.NAME) {\n                // Only traverse the right side of the assignment if the lhs is not a reference to the function\n                // that is currently being traversed.\n                if (n.getType() == Token.FUNCTION && lhs.getString().equals(n.getFirstChild().getString())) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isClassFieldOrStaticMethod(Node n) {\n    Node fn = NodeUtil.getEnclosingFunction(n);\n    if (fn == null) {\n        return false;\n    }\n    Node parent = fn.getParent();\n    return parent != null && (parent.isAssign() || NodeUtil.isClassMethod(parent))\n            && NodeUtil.isStaticCtorOrMethod(fn)\n            && (n.getParent().isShorthandProperty() || !NodeUtil.isCtor(n.getParent()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..a616416d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,84 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n+        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+        // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN ||\n+              pType == Token.OBJECTLIT ||\n+              pType == Token.LP ||\n+              pType == Token.IF ||\n+              pType == Token.WHILE ||\n+              pType == Token.DO ||\n+              pType == Token.FOR ||\n+              pType == Token.CATCH ||\n+              pType == Token.EXPR_EVAL ||\n+              pType == Token.NEW ||\n+              pType == Token.RETURN ||\n+              (parent.isForIn() && parent.getFirstChild() == n) ||\n+              ((pType == Token.GETELEM || pType == Token.GETPROP) && parent.getLastChild() == n && !NodeUtil.isObjectCallMethod(n))) ||\n+            (parent.isClass() && isClassFieldOrStaticMethod(n))) {\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle nested assignments properly\n+            // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            if (lhs.getType() == Token.GETPROP) {\n+                Node prop = lhs.getLastChild();\n+                // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+                if (prop.getType() == Token.STRING &&\n+                        prop.getString().equals(\"prototype\")) {\n+                    return false;\n+                } else if (lhs.getQualifiedName() != null &&\n+                        (lhs.getQualifiedName().contains(\".prototype.\") ||\n+                                (lhs.getNext() != null &&\n+                                        (lhs.getNext().getType() == Token.GETELEM || lhs.getNext().getType() == Token.OBJECTLIT)) &&\n+                                n.getType() != Token.VAR)) {\n+                    return false;\n+                }\n+            } else if (lhs.getType() == Token.NAME) {\n+                // Only traverse the right side of the assignment if the lhs is not a reference to the function\n+                // that is currently being traversed.\n+                if (n.getType() == Token.FUNCTION && lhs.getString().equals(n.getFirstChild().getString())) {\n+                    return false;\n+                }\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean isClassFieldOrStaticMethod(Node n) {\n+    Node fn = NodeUtil.getEnclosingFunction(n);\n+    if (fn == null) {\n+        return false;\n+    }\n+    Node parent = fn.getParent();\n+    return parent != null && (parent.isAssign() || NodeUtil.isClassMethod(parent))\n+            && NodeUtil.isStaticCtorOrMethod(fn)\n+            && (n.getParent().isShorthandProperty() || !NodeUtil.isCtor(n.getParent()));\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}