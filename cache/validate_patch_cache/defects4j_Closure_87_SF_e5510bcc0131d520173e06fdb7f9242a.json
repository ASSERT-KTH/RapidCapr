{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && !n.hasChildren()) {\n    Node parent = n.getParent();\n    if (parent != null) {\n      int parentType = parent.getType();\n      if (parentType == Token.IF) {\n        Node firstChild = parent.getFirstChild();\n        if (firstChild == n) {\n          // Check if the block contains a single expression\n          Node grandchild = n.getFirstChild();\n          boolean isSingleExpression = grandchild != null && grandchild.getNext() == null\n              && NodeUtil.isExpressionResult(grandchild);\n          // Do not fold the block if it contains a conditional statement\n          if (isSingleExpression && !hasConditional(grandchild)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean hasConditional(Node n) {\n  int type = n.getType();\n  if (type == Token.AND || type == Token.OR) {\n    return hasConditional(n.getFirstChild()) || hasConditional(n.getLastChild());\n  } else if (type == Token.HOOK || type == Token.IF) {\n    return true;\n  } else if (type == Token.NOT) {\n    return hasConditional(n.getFirstChild());\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..65bad95e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,40 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && !n.hasChildren()) {\n+    Node parent = n.getParent();\n+    if (parent != null) {\n+      int parentType = parent.getType();\n+      if (parentType == Token.IF) {\n+        Node firstChild = parent.getFirstChild();\n+        if (firstChild == n) {\n+          // Check if the block contains a single expression\n+          Node grandchild = n.getFirstChild();\n+          boolean isSingleExpression = grandchild != null && grandchild.getNext() == null\n+              && NodeUtil.isExpressionResult(grandchild);\n+          // Do not fold the block if it contains a conditional statement\n+          if (isSingleExpression && !hasConditional(grandchild)) {\n+            return true;\n+          }\n+        }\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean hasConditional(Node n) {\n+  int type = n.getType();\n+  if (type == Token.AND || type == Token.OR) {\n+    return hasConditional(n.getFirstChild()) || hasConditional(n.getLastChild());\n+  } else if (type == Token.HOOK || type == Token.IF) {\n+    return true;\n+  } else if (type == Token.NOT) {\n+    return hasConditional(n.getFirstChild());\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}