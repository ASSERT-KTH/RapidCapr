{
    "patch": "public class StringUtils {\n    public static boolean containsAny(char[] str, char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        int strLength = str.length;\n        int searchLength = searchChars.length;\n        int i, j;\n        for (i = 0; i < searchLength; i++) {\n            char searchChar = searchChars[i];\n            if (Character.isHighSurrogate(searchChar) && (i + 1) < searchLength) {\n                char nextSearchChar = searchChars[i + 1];\n                if (Character.isLowSurrogate(nextSearchChar)) {\n                    int codePoint = Character.toCodePoint(searchChar, nextSearchChar);\n                    for (j = 0; j < strLength; j++) {\n                        int index = Character.offsetByCodePoints(str, j, strLength, codePoint);\n                        if (index >= 0 && index < strLength) {\n                            return true;\n                        } else if (index < 0) {\n                            break;\n                        }\n                    }\n                    i++;\n                }\n            } else {\n                for (j = 0; j < strLength; j++) {\n                    if (searchChar == str[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..cde7cb40 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    public static boolean containsAny(char[] str, char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        int strLength = str.length;\n+        int searchLength = searchChars.length;\n+        int i, j;\n+        for (i = 0; i < searchLength; i++) {\n+            char searchChar = searchChars[i];\n+            if (Character.isHighSurrogate(searchChar) && (i + 1) < searchLength) {\n+                char nextSearchChar = searchChars[i + 1];\n+                if (Character.isLowSurrogate(nextSearchChar)) {\n+                    int codePoint = Character.toCodePoint(searchChar, nextSearchChar);\n+                    for (j = 0; j < strLength; j++) {\n+                        int index = Character.offsetByCodePoints(str, j, strLength, codePoint);\n+                        if (index >= 0 && index < strLength) {\n+                            return true;\n+                        } else if (index < 0) {\n+                            break;\n+                        }\n+                    }\n+                    i++;\n+                }\n+            } else {\n+                for (j = 0; j < strLength; j++) {\n+                    if (searchChar == str[j]) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}