{
    "patch": "      Set<BasicBlock> visited = new HashSet<>();\n      visited.add(ref.getBasicBlock());\n      List<Reference> queue = new LinkedList<>();\n      queue.add(ref);\n      int assignments = 1;\n      while (!queue.isEmpty()) {\n        Reference current = queue.remove(0);\n        for (Reference r : current.getNext()) {\n          assignments++;\n          if (!visited.contains(r.getBasicBlock())) {\n            visited.add(r.getBasicBlock());\n            queue.add(r);\n          }\n        }\n      }\n\n      return assignments == 1;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..36d1911d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Set<BasicBlock> visited = new HashSet<>();\n+      visited.add(ref.getBasicBlock());\n+      List<Reference> queue = new LinkedList<>();\n+      queue.add(ref);\n+      int assignments = 1;\n+      while (!queue.isEmpty()) {\n+        Reference current = queue.remove(0);\n+        for (Reference r : current.getNext()) {\n+          assignments++;\n+          if (!visited.contains(r.getBasicBlock())) {\n+            visited.add(r.getBasicBlock());\n+            queue.add(r);\n+          }\n+        }\n+      }\n+\n+      return assignments == 1;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}