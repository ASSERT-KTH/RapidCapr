{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    boolean timeIsMovedBackward = ((offsetLocal - offsetAdjusted) < 0);\n\n    if (timeIsMovedBackward) {\n        long nextTransition = nextTransition(instantAdjusted);\n        long nextTransitionAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextTransition != nextTransitionAdjusted) {\n            if (offsetAdjusted == -3) {\n                long nextDiff = nextTransition(nextTransition) - instantAdjusted;\n                if (nextDiff == 1800000) {\n                    // we are in the \"impossible hour\"\n                    return offsetAdjusted;\n                }\n            }\n            if ((nextTransition - offsetLocal) <= (instantLocal - offsetAdjusted)) {\n                return offsetLocal;\n            }\n            return offsetAdjusted;\n        }\n    } else {\n        long previousTransition = previousTransition(instantAdjusted);\n        long previousTransitionAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (previousTransition != previousTransitionAdjusted) {\n            if ((offsetLocal - getOffset(previousTransition)) >= (instantAdjusted - previousTransition)) {\n                return offsetLocal;\n            }\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3f9d60e6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    boolean timeIsMovedBackward = ((offsetLocal - offsetAdjusted) < 0);\n+\n+    if (timeIsMovedBackward) {\n+        long nextTransition = nextTransition(instantAdjusted);\n+        long nextTransitionAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextTransition != nextTransitionAdjusted) {\n+            if (offsetAdjusted == -3) {\n+                long nextDiff = nextTransition(nextTransition) - instantAdjusted;\n+                if (nextDiff == 1800000) {\n+                    // we are in the \"impossible hour\"\n+                    return offsetAdjusted;\n+                }\n+            }\n+            if ((nextTransition - offsetLocal) <= (instantLocal - offsetAdjusted)) {\n+                return offsetLocal;\n+            }\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        long previousTransition = previousTransition(instantAdjusted);\n+        long previousTransitionAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (previousTransition != previousTransitionAdjusted) {\n+            if ((offsetLocal - getOffset(previousTransition)) >= (instantAdjusted - previousTransition)) {\n+                return offsetLocal;\n+            }\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}