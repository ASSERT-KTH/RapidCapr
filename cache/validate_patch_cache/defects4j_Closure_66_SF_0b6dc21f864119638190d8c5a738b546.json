{
    "patch": "public double getTypedPercent(String jsonStr) {\n    double totalCount = 0;\n    double typedCount = 0;\n\n    try {\n        JSONObject jsonObj = new JSONObject(jsonStr);\n        JSONArray itemsArr = jsonObj.getJSONArray(\"items\");\n\n        for (int i = 0; i < itemsArr.length(); i++) {\n            JSONObject itemObj = itemsArr.getJSONObject(i);\n            String type = itemObj.optString(\"type\", null);\n\n            if (type != null) {\n                typedCount++;\n            }\n            totalCount++;\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n\n    if (totalCount > 0) {\n        return (typedCount / totalCount) * 100;\n    } else {\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f5845164 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String jsonStr) {\n+    double totalCount = 0;\n+    double typedCount = 0;\n+\n+    try {\n+        JSONObject jsonObj = new JSONObject(jsonStr);\n+        JSONArray itemsArr = jsonObj.getJSONArray(\"items\");\n+\n+        for (int i = 0; i < itemsArr.length(); i++) {\n+            JSONObject itemObj = itemsArr.getJSONObject(i);\n+            String type = itemObj.optString(\"type\", null);\n+\n+            if (type != null) {\n+                typedCount++;\n+            }\n+            totalCount++;\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (totalCount > 0) {\n+        return (typedCount / totalCount) * 100;\n+    } else {\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}