{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (!(constraintObj instanceof FunctionType)) {\n        return;\n    }\n\n    FunctionType functionType = (FunctionType) constraintObj;\n    // Ensure that the first parameter of the function is an object literal type.\n    if (functionType.getParameters().size() == 0) {\n        return;\n    }\n\n    JSType paramType = functionType.getParameters().get(0).getType();\n    if (!(paramType instanceof ObjectType)) {\n        return;\n    }\n\n    ObjectType paramObjType = (ObjectType) paramType;\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (paramObjType.isRecordType()) {\n        for (String prop : paramObjType.getOwnPropertyNames()) {\n        if (constraintObj.isGeneric()) {\n            // When a generic function is passed as constraintObj, there may be missing types.\n            JSType propType = constraintObj.getTemplateTypeMap().getResolvedTemplateType(prop)\n                .getBound();\n            if (propType == null) {\n                propType = constraintObj.getNativeType(JSTypeNative.NO_TYPE);\n            }\n            if (!isPropertyTypeDeclared(prop)) {\n                defineInferredProperty(prop, propType, null);\n            }\n        } else {\n            JSType propType = paramObjType.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f3616ea7 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,24 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match constraints on anonymous types.\n+    if (!(constraintObj instanceof FunctionType)) {\n+        return;\n+    }\n+\n+    FunctionType functionType = (FunctionType) constraintObj;\n+    // Ensure that the first parameter of the function is an object literal type.\n+    if (functionType.getParameters().size() == 0) {\n+        return;\n+    }\n+\n+    JSType paramType = functionType.getParameters().get(0).getType();\n+    if (!(paramType instanceof ObjectType)) {\n+        return;\n+    }\n+\n+    ObjectType paramObjType = (ObjectType) paramType;\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -564,18 +580,30 @@ class PrototypeObjectType extends ObjectType {\n     // We want to modify the object literal to match the constraint, by\n     // taking any each property on the record and trying to match\n     // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+    if (paramObjType.isRecordType()) {\n+        for (String prop : paramObjType.getOwnPropertyNames()) {\n+        if (constraintObj.isGeneric()) {\n+            // When a generic function is passed as constraintObj, there may be missing types.\n+            JSType propType = constraintObj.getTemplateTypeMap().getResolvedTemplateType(prop)\n+                .getBound();\n+            if (propType == null) {\n+                propType = constraintObj.getNativeType(JSTypeNative.NO_TYPE);\n+            }\n+            if (!isPropertyTypeDeclared(prop)) {\n+                defineInferredProperty(prop, propType, null);\n+            }\n+        } else {\n+            JSType propType = paramObjType.getPropertyType(prop);\n+            if (!isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer = propType;\n+                if (!hasProperty(prop)) {\n+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+                }\n+                defineInferredProperty(prop, typeToInfer, null);\n+            }\n+        }\n         }\n-      }\n     }\n-  }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}