{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      }\n      // Make sure this assignment is not in a catch clause.\n      for (BastNode stmt : block.statements) {\n        if (stmt.getTag() == BastCatch.TAG) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d5fa0773 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        return false;\n+      }\n+      // Make sure this assignment is not in a catch clause.\n+      for (BastNode stmt : block.statements) {\n+        if (stmt.getTag() == BastCatch.TAG) {\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}