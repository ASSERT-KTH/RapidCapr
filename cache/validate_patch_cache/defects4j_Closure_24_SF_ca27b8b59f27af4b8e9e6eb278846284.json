{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null) {\n      continue; // Ignore inferred variables.\n    }\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar()) {\n      Node varChild = parent.getFirstChild();\n      if (n.hasChildren() && varChild.isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        Node initialValue = aliasVar.getInitialValue();\n        // Check if the variable is an alias and has a qualified name (i.e., not a local variable).\n        if (aliasVar != null && initialValue != null && initialValue.isQualifiedName()) {\n          aliases.put(name, aliasVar);\n          String qualifiedName = initialValue.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else if (n.hasOneChild() && n.getFirstChild().isName()\n            && isPrivateName(n.getFirstChild().getString())) {\n          // TODO(robbyw): Support using locals for private variables.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n        }\n      } else if (n.isFunction()) {\n        Node fnNameNode = n.getFirstChild();\n        String fnName = fnNameNode.getString();\n        if (isPrivateName(fnName)) {\n          report(t, n, GOOG_SCOPE_FUNCTION_NAME_NOT_ALIASED, fnName);\n        }\n      } else {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..97b95b55 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,42 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null) {\n+      continue; // Ignore inferred variables.\n+    }\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar()) {\n+      Node varChild = parent.getFirstChild();\n+      if (n.hasChildren() && varChild.isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        Node initialValue = aliasVar.getInitialValue();\n+        // Check if the variable is an alias and has a qualified name (i.e., not a local variable).\n+        if (aliasVar != null && initialValue != null && initialValue.isQualifiedName()) {\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = initialValue.getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n+        } else if (n.hasOneChild() && n.getFirstChild().isName()\n+            && isPrivateName(n.getFirstChild().getString())) {\n           // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n         }\n+      } else if (n.isFunction()) {\n+        Node fnNameNode = n.getFirstChild();\n+        String fnName = fnNameNode.getString();\n+        if (isPrivateName(fnName)) {\n+          report(t, n, GOOG_SCOPE_FUNCTION_NAME_NOT_ALIASED, fnName);\n         }\n+      } else {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}