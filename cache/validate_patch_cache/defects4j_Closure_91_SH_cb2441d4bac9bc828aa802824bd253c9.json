{
    "patch": "      if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n        Node grandParent = parent.getParent();\n        if (grandParent != null && grandParent.getType() == Token.ASSIGN) {\n          Node lhs = grandParent.getFirstChild();\n          Node rhs = lhs.getNext();\n          if ((parent.getFirstChild().getType() == Token.NAME && rhs.getType() == Token.FUNCTION) ||\n              (lhs.getFirstChild().getType() == Token.THIS && \n                  NodeUtil.isObjectLitKey(parent, grandParent))) {\n            return true;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..91948e3e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null && grandParent.getType() == Token.ASSIGN) {\n+          Node lhs = grandParent.getFirstChild();\n+          Node rhs = lhs.getNext();\n+          if ((parent.getFirstChild().getType() == Token.NAME && rhs.getType() == Token.FUNCTION) ||\n+              (lhs.getFirstChild().getType() == Token.THIS && \n+                  NodeUtil.isObjectLitKey(parent, grandParent))) {\n+            return true;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}