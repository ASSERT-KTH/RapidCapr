{
    "patch": "      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                if (n.getFirstChild() == null){\n                  return;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (!isSet && parent != null && parent.getType() == Token.CALL &&\n          n == parent.getFirstChild() &&\n          name.equals(\"goog.module\")) {\n        processCommonJsModule(module, scope, parent);\n        return;\n      }\n\n      if (!isSet && \"exports\".equals(name) && parent != null &&\n          parent.getType() == Token.GETPROP) {\n        parent = parent.getParent();\n        if (parent != null && parent.getType() == Token.ASSIGN) {\n          handleExports(module, scope, parent.getParent());\n          return;\n        }\n      }\n\n      if (!isSet && \"module\".equals(name) && parent != null &&\n          parent.getType() == Token.GETPROP &&\n          parent.getParent() != null &&\n          parent.getParent().getType() == Token.EXPR_RESULT) {\n        handleModule(module, parent.getParent());\n        return;\n      }\n\n      if (isSet && parent != null && parent.getType() == Token.VAR) {\n        // Variable declaration.\n        Node nextSibling = n.getNext();\n        if (nextSibling != null &&\n            NodeUtil.isObjectLitKey(nextSibling)) {\n          // Simple object literal declaration.\n          type = Name.Type.OBJECTLIT;\n        } else if (nextSibling != null &&\n            nextSibling.getType() == Token.FUNCTION) {\n          type = Name.Type.FUNCTION;\n        } else if (nextSibling != null &&\n            nextSibling.getNext() != null &&\n            nextSibling.getNext().getType() == Token.FUNCTION) {\n          type = Name.Type.FUNCTION;\n        } else {\n          // Anything else is considered an \"OTHER\" write.\n          type = Name.Type.OTHER;\n        }\n      }\n\n      if (!isSet && isBannedName(name)) {\n        warnings.add(JSError.make(n, BANNED_VAR_MSG, name));\n        return;\n      }\n\n      staticReferences.addAll(collectReferences(n, type, module));\n\n      if (!isSet) {\n        handleGet(module, scope, n, parent, name);\n\n        // Record a reference in all enclosing scopes.\n        Scope s = scope;\n        while (s != null) {\n          s.addReference(name, type, module);\n          s = s.getParent();\n        }\n\n        // Record a reference to the name in the module.\n        referenceName(name, type, module);\n      } else if (!isGlobalScope(scope) || isParamOrLocalVar(name, scope)) {\n        referenceName(name, type, module);\n      } else {\n        declareVar(name, type, module);\n        referenceName(name, type, module);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..122eafb7 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,185 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+      switch (n.getType()) {\n+        case Token.GETTER_DEF:\n+        case Token.SETTER_DEF:\n+        case Token.STRING_KEY:\n+          // This may be a key in an object literal declaration.\n+          name = null;\n+          if (parent != null && parent.isObjectLit()) {\n+            name = getNameForObjLitKey(n);\n+          }\n+          if (name == null) {\n+            return;\n+          }\n+          isSet = true;\n+          switch (n.getType()) {\n+            case Token.STRING_KEY:\n+              type = getValueType(n.getFirstChild());\n+              break;\n+            case Token.GETTER_DEF:\n+              type = Name.Type.GET;\n+              break;\n+            case Token.SETTER_DEF:\n+              type = Name.Type.SET;\n+              break;\n+            default:\n+              throw new IllegalStateException(\"unexpected:\" + n);\n+          }\n+          break;\n+        case Token.NAME:\n+          // This may be a variable get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.VAR:\n+                isSet = true;\n+                Node rvalue = n.getFirstChild();\n+                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+                break;\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                }\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              case Token.FUNCTION:\n+                Node gramps = parent.getParent();\n+                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                  return;\n+                }\n+                isSet = true;\n+                type = Name.Type.FUNCTION;\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+                if (n.getFirstChild() == null){\n+                  return;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+            return;\n+          }\n+          break;\n+        default:\n+          return;\n+      }\n+\n+      // We are only interested in global names.\n+      if (!isGlobalNameReference(name, scope)) {\n+        return;\n+      }\n+\n+      if (!isSet && parent != null && parent.getType() == Token.CALL &&\n+          n == parent.getFirstChild() &&\n+          name.equals(\"goog.module\")) {\n+        processCommonJsModule(module, scope, parent);\n+        return;\n+      }\n+\n+      if (!isSet && \"exports\".equals(name) && parent != null &&\n+          parent.getType() == Token.GETPROP) {\n+        parent = parent.getParent();\n+        if (parent != null && parent.getType() == Token.ASSIGN) {\n+          handleExports(module, scope, parent.getParent());\n+          return;\n+        }\n+      }\n+\n+      if (!isSet && \"module\".equals(name) && parent != null &&\n+          parent.getType() == Token.GETPROP &&\n+          parent.getParent() != null &&\n+          parent.getParent().getType() == Token.EXPR_RESULT) {\n+        handleModule(module, parent.getParent());\n+        return;\n+      }\n+\n+      if (isSet && parent != null && parent.getType() == Token.VAR) {\n+        // Variable declaration.\n+        Node nextSibling = n.getNext();\n+        if (nextSibling != null &&\n+            NodeUtil.isObjectLitKey(nextSibling)) {\n+          // Simple object literal declaration.\n+          type = Name.Type.OBJECTLIT;\n+        } else if (nextSibling != null &&\n+            nextSibling.getType() == Token.FUNCTION) {\n+          type = Name.Type.FUNCTION;\n+        } else if (nextSibling != null &&\n+            nextSibling.getNext() != null &&\n+            nextSibling.getNext().getType() == Token.FUNCTION) {\n+          type = Name.Type.FUNCTION;\n+        } else {\n+          // Anything else is considered an \"OTHER\" write.\n+          type = Name.Type.OTHER;\n+        }\n+      }\n+\n+      if (!isSet && isBannedName(name)) {\n+        warnings.add(JSError.make(n, BANNED_VAR_MSG, name));\n+        return;\n+      }\n+\n+      staticReferences.addAll(collectReferences(n, type, module));\n+\n+      if (!isSet) {\n+        handleGet(module, scope, n, parent, name);\n+\n+        // Record a reference in all enclosing scopes.\n+        Scope s = scope;\n+        while (s != null) {\n+          s.addReference(name, type, module);\n+          s = s.getParent();\n+        }\n+\n+        // Record a reference to the name in the module.\n+        referenceName(name, type, module);\n+      } else if (!isGlobalScope(scope) || isParamOrLocalVar(name, scope)) {\n+        referenceName(name, type, module);\n+      } else {\n+        declareVar(name, type, module);\n+        referenceName(name, type, module);\n+      }\n+    }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}