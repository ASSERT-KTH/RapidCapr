{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class Utils {\n    \n    public static double regularizedGammaP(double a, double x) {\n        final double epsilon = 10e-15;\n        final int maxIterations = 10000;\n\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0)\n            return Double.NaN;\n        if (x == 0.0)\n            return 0.0;\n        if (x >= a + 1) // use regularizedGammaQ instead\n            return 1.0 - regularizedGammaQ(a, x);\n\n        double term = 1 / a;\n        double sum = term;\n        int n = 1;\n        while (FastMath.abs(term) > epsilon && n < maxIterations) {\n            term *= x / (a + n);\n            sum += term;\n            n++;\n        }\n        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        final double epsilon = 10e-15;\n        final int maxIterations = 10000;\n\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0)\n            return Double.NaN;\n        if (x == 0.0)\n            return 1.0;\n        if (x < a + 1) // use regularizedGammaP instead\n            return 1.0 - regularizedGammaP(a, x);\n\n        double c = 0.0;\n        double d = 1.0 / (1.0 - a);\n        double f = d;\n        double h;\n        int i;\n        for (i = 1; i <= maxIterations; i++) {\n            h = -i * (i - a);\n            c = d + h * c;\n            if (FastMath.abs(c) > Double.MAX_VALUE / 10e10)\n                // rescale\n                d = d / Double.MAX_VALUE / 10e10;\n            d = 1.0 + h * d;\n            if (FastMath.abs(d) > Double.MAX_VALUE / 10e10)\n                // rescale\n                c = c / Double.MAX_VALUE / 10e10;\n            if (FastMath.abs(d) > 0)\n                f = c / d;\n            if (FastMath.abs(f - 1.0) <= epsilon)\n                break;\n        }\n        if (i > maxIterations) {\n            throw new RuntimeException(\"Maximum number of iterations exceeded\");\n        }\n        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * f;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..68499963f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,70 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class Utils {\n+    \n+    public static double regularizedGammaP(double a, double x) {\n+        final double epsilon = 10e-15;\n+        final int maxIterations = 10000;\n+\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0)\n+            return Double.NaN;\n+        if (x == 0.0)\n+            return 0.0;\n+        if (x >= a + 1) // use regularizedGammaQ instead\n+            return 1.0 - regularizedGammaQ(a, x);\n+\n+        double term = 1 / a;\n+        double sum = term;\n+        int n = 1;\n+        while (FastMath.abs(term) > epsilon && n < maxIterations) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n++;\n+        }\n+        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        final double epsilon = 10e-15;\n+        final int maxIterations = 10000;\n+\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0)\n+            return Double.NaN;\n+        if (x == 0.0)\n+            return 1.0;\n+        if (x < a + 1) // use regularizedGammaP instead\n+            return 1.0 - regularizedGammaP(a, x);\n+\n+        double c = 0.0;\n+        double d = 1.0 / (1.0 - a);\n+        double f = d;\n+        double h;\n+        int i;\n+        for (i = 1; i <= maxIterations; i++) {\n+            h = -i * (i - a);\n+            c = d + h * c;\n+            if (FastMath.abs(c) > Double.MAX_VALUE / 10e10)\n+                // rescale\n+                d = d / Double.MAX_VALUE / 10e10;\n+            d = 1.0 + h * d;\n+            if (FastMath.abs(d) > Double.MAX_VALUE / 10e10)\n+                // rescale\n+                c = c / Double.MAX_VALUE / 10e10;\n+            if (FastMath.abs(d) > 0)\n+                f = c / d;\n+            if (FastMath.abs(f - 1.0) <= epsilon)\n+                break;\n+        }\n+        if (i > maxIterations) {\n+            throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+        }\n+        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * f;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}