{
    "patch": "public static boolean containsAny(final char[] chars, final char[] searchChars) {\n    if (isEmpty(chars) || isEmpty(searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < chars.length; i++) {\n        final char ch = chars[i];\n        for (int j = 0; j < searchChars.length; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchChars.length - 1) {\n                        // missing low surrogate, fine, like indexOf():\n                        return true;\n                    }\n                    if (i < chars.length - 1 && searchChars[j + 1] == chars[i + 1]) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..654cfeff 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final char[] chars, final char[] searchChars) {\n+    if (isEmpty(chars) || isEmpty(searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < chars.length; i++) {\n+        final char ch = chars[i];\n+        for (int j = 0; j < searchChars.length; j++) {\n+            if (searchChars[j] == ch) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchChars.length - 1) {\n+                        // missing low surrogate, fine, like indexOf():\n+                        return true;\n+                    }\n+                    if (i < chars.length - 1 && searchChars[j + 1] == chars[i + 1]) {\n+                        return true;\n+                    }\n+                } else {\n+                    // ch is in the Basic Multilingual Plane\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}