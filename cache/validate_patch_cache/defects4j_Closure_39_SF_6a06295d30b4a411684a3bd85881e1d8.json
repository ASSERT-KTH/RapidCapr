{
    "patch": "  private static final int MAX_ITERATION_COUNT = 1000; // Prevent infinite recursion\n  \n  public boolean canBeCalled() {\n    return !isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n      \n      Set<ObjectType> visitedTypes = new HashSet<>();\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        Object propertyType = getPropertyType(property);\n        if (propertyType instanceof ObjectType) {\n          ObjectType objectType = (ObjectType) propertyType;\n          if (visitedTypes.contains(objectType)) {\n            sb.append(\"{...}\");\n          } else {\n            visitedTypes.add(objectType);\n            sb.append(objectType.toStringHelper(false));\n          }\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      visitedTypes.clear(); // Clear visited types set\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..2931c0ac 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,8 +345,10 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n+  private static final int MAX_ITERATION_COUNT = 1000; // Prevent infinite recursion\n+  \n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n   @Override\n@@ -365,7 +367,8 @@ class PrototypeObjectType extends ObjectType {\n            current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n-\n+      \n+      Set<ObjectType> visitedTypes = new HashSet<>();\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n@@ -377,7 +380,19 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+\n+        Object propertyType = getPropertyType(property);\n+        if (propertyType instanceof ObjectType) {\n+          ObjectType objectType = (ObjectType) propertyType;\n+          if (visitedTypes.contains(objectType)) {\n+            sb.append(\"{...}\");\n+          } else {\n+            visitedTypes.add(objectType);\n+            sb.append(objectType.toStringHelper(false));\n+          }\n+        } else {\n+          sb.append(propertyType.toString());\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -389,6 +404,7 @@ class PrototypeObjectType extends ObjectType {\n       sb.append(\"}\");\n \n       prettyPrint = true;\n+      visitedTypes.clear(); // Clear visited types set\n       return sb.toString();\n     } else {\n       return \"{...}\";",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}