{
    "patch": "        final ParametricUnivariateSolver solver = new BrentSolver();\n        final MaxEval maxEval = new MaxEval(1000);\n        final double ftol = 1e-15;\n        final double argil = 1.0;\n        final double arghi = 100.0;\n        final UnivariateObjectiveFunction function = new Gaussian.Parametric();\n        final double[] range = {argil, arghi};\n        final double optimum = solver.solve(maxEval, function, range, ftol);\n        guess[0] = optimum;\n        return fit(new Gaussian.Parametric(), guess);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..0e536541d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,6 +118,15 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+        final ParametricUnivariateSolver solver = new BrentSolver();\n+        final MaxEval maxEval = new MaxEval(1000);\n+        final double ftol = 1e-15;\n+        final double argil = 1.0;\n+        final double arghi = 100.0;\n+        final UnivariateObjectiveFunction function = new Gaussian.Parametric();\n+        final double[] range = {argil, arghi};\n+        final double optimum = solver.solve(maxEval, function, range, ftol);\n+        guess[0] = optimum;\n         return fit(new Gaussian.Parametric(), guess);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}