{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          // Forwards type inference for return types, which only ever happens\n          // if we already have a name for the resulting object type and\n          // this object type inherits from a type with declared @template types.\n          if (scope.getDeclarationScope().getVar(ct.getInstanceType().getReferenceName()) != null) {\n            JSTypeArray templateTypes = ct.getTypeOfThis().getTemplateTypes();\n            if (templateTypes != null) {\n              ObjectType objType = ct.getInstanceType();\n              ObjectType inferredType = null;\n              JSType[] typeList = new JSType[templateTypes.length()];\n              for (int i = 0; i < typeList.length; i++) {\n                JSType argType = i < n.getChildCount() - 1 ? n.getChildAt(i + 1).getJSType() : null;\n                if (argType == null) {\n                  argType = getNativeType(UNKNOWN_TYPE);\n                }\n                if (inferredType == null) {\n                  inferredType = objType.instantiateGenerics(templateTypes, ImmutableList.of(argType));\n                } else {\n                  inferredType = inferredType.instantiateGenerics(templateTypes, ImmutableList.of(argType));\n                }\n                typeList[i] = argType;\n              }\n              type = inferredType;\n              String typeName = objType.getReferenceName() + INSTANTIATED_LONG_NAME + Arrays.toString(typeList);\n              ObjectType namedObject = JSType.toMaybeObjectType(scope.getVar(typeName).getJSType());\n              if (namedObject != null) {\n                type = namedObject;\n              } else {\n                scope = scope.withType(createNamedType(typeName, inferredType));\n              }\n            } else {\n              type = ct.getInstanceType();\n            }\n          } else {\n            type = ct.getInstanceType();\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..d4a0ecb6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1051,7 +1051,41 @@ class TypeInference\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          // Forwards type inference for return types, which only ever happens\n+          // if we already have a name for the resulting object type and\n+          // this object type inherits from a type with declared @template types.\n+          if (scope.getDeclarationScope().getVar(ct.getInstanceType().getReferenceName()) != null) {\n+            JSTypeArray templateTypes = ct.getTypeOfThis().getTemplateTypes();\n+            if (templateTypes != null) {\n+              ObjectType objType = ct.getInstanceType();\n+              ObjectType inferredType = null;\n+              JSType[] typeList = new JSType[templateTypes.length()];\n+              for (int i = 0; i < typeList.length; i++) {\n+                JSType argType = i < n.getChildCount() - 1 ? n.getChildAt(i + 1).getJSType() : null;\n+                if (argType == null) {\n+                  argType = getNativeType(UNKNOWN_TYPE);\n+                }\n+                if (inferredType == null) {\n+                  inferredType = objType.instantiateGenerics(templateTypes, ImmutableList.of(argType));\n+                } else {\n+                  inferredType = inferredType.instantiateGenerics(templateTypes, ImmutableList.of(argType));\n+                }\n+                typeList[i] = argType;\n+              }\n+              type = inferredType;\n+              String typeName = objType.getReferenceName() + INSTANTIATED_LONG_NAME + Arrays.toString(typeList);\n+              ObjectType namedObject = JSType.toMaybeObjectType(scope.getVar(typeName).getJSType());\n+              if (namedObject != null) {\n+                type = namedObject;\n+              } else {\n+                scope = scope.withType(createNamedType(typeName, inferredType));\n+              }\n+            } else {\n+              type = ct.getInstanceType();\n+            }\n+          } else {\n+            type = ct.getInstanceType();\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}