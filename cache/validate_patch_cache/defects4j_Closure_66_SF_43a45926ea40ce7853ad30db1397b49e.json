{
    "patch": "public static double getTypedPercent(JsonObject js) {\n    double typedCount = 0.0;\n    double totalCount = 0.0;\n\n    for (Entry<String, JsonElement> entry : js.entrySet()) {\n        if (entry.getValue().isJsonPrimitive()) {\n            typedCount += 1.0;\n        } else if (entry.getValue().isJsonArray()) {\n            JsonArray arr = entry.getValue().getAsJsonArray();\n            for (JsonElement el : arr) {\n                if (el.isJsonPrimitive()) {\n                    typedCount += 1.0;\n                }\n            }\n        }\n        totalCount += 1.0;\n    }\n\n    return (typedCount / totalCount) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..164021e2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject js) {\n+    double typedCount = 0.0;\n+    double totalCount = 0.0;\n+\n+    for (Entry<String, JsonElement> entry : js.entrySet()) {\n+        if (entry.getValue().isJsonPrimitive()) {\n+            typedCount += 1.0;\n+        } else if (entry.getValue().isJsonArray()) {\n+            JsonArray arr = entry.getValue().getAsJsonArray();\n+            for (JsonElement el : arr) {\n+                if (el.isJsonPrimitive()) {\n+                    typedCount += 1.0;\n+                }\n+            }\n+        }\n+        totalCount += 1.0;\n+    }\n+\n+    return (typedCount / totalCount) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}