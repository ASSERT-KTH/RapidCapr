{
    "patch": "class TransformDispatcher extends IRFactory.TypeSafeDispatcher {\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final Set<String> allowedDirectives = new HashSet<String>();\n  private Node currentScriptNode;\n\n  TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n\n    // Populate the set of allowed directives.\n    allowedDirectives.addAll(Config.get().getDirectives());\n  }\n\n  private Node newNode(int type, AstNode child) {\n    Node node = new Node(type);\n    node.addChildToBack(transform(child));\n    return node;\n  }\n\n  private Node newNode(int type, List<? extends AstNode> children) {\n    Node node = new Node(type);\n    for (AstNode child : children) {\n      node.addChildToBack(transform(child));\n    }\n    return node;\n  }\n\n  private Node newNode(int type, AstNode... children) {\n    Node node = new Node(type);\n    for (AstNode child : children) {\n      node.addChildToBack(transform(child));\n    }\n    return node;\n  }\n\n  private Node processGeneric(AstRoot node) {\n    Node jsNode = new Node(Token.BLOCK);\n    for (Node child : transformList(node)) {\n      jsNode.addChildToBack(child);\n    }\n    return jsNode;\n  }\n\n  private Node processGeneric(Scope scope) {\n    Node jsNode = new Node(Token.SCRIPT);\n    for (Node child : transformList(scope)) {\n      jsNode.addChildToBack(child);\n    }\n    return jsNode;\n  }\n\n  /**\n   * Produces an AST node representing the given source tree.\n   *\n   * <p>The returned node is generally a block node, except in the specific\n   * cases where the root of the AST is a script, function, or other\n   * type, in which case the returned node will have that type.\n   *\n   * @param tree The tree to transform.\n   * @return An AST node representing the given source tree.\n   */\n  Node transform(AstRoot tree) {\n    return processGeneric(tree);\n  }\n\n  /**\n   * Produces an AST node representing the given node in the source tree.\n   *\n   * @param node The node to transform.\n   * @return An AST node representing the given source tree node.\n   */\n  private Node transform(AstNode node) {\n    return node.accept(this);\n  }\n\n  /**\n   * Produces a list of AST nodes representing the given nodes in the source\n   * tree.\n   *\n   * @param nodes The nodes to transform.\n   * @return A list of AST nodes representing the given source tree nodes.\n   */\n  private List<Node> transformList(List<? extends AstNode> nodes) {\n    List<Node> result = new ArrayList<Node>(nodes.size());\n    for (AstNode node : nodes) {\n      result.add(transform(node));\n    }\n    return result;\n  }\n\n  private Node transformLiteral(Name name) {\n    return newNode(Token.NAME, name);\n  }\n\n  private Node transformString(StringLiteral stringLiteral) {\n    return newNode(Token.STRING, stringLiteral);\n  }\n\n  private Node transformNumber(NumberLiteral numberLiteral) {\n    return newNode(Token.NUMBER, numberLiteral);\n  }\n\n  private Node transformNull(NullLiteral nullLiteral) {\n    return newNode(Token.NULL, nullLiteral);\n  }\n\n  private Node transformThis(AstNode thisNode) {\n    return newNode(Token.THIS, thisNode);\n  }\n\n  private Node transformArrayLiteral(ArrayLiteral arrayLiteral) {\n    return newNode(Token.ARRAYLIT, arrayLiteral.getElements());\n  }\n\n  private Node transformObjectLiteral(ObjectLiteral objectLiteral) {\n    ArrayList<AstNode> children = new ArrayList<AstNode>();\n    for (ObjectProperty property : objectLiteral.getElements()) {\n      children.add(property.getLeft());\n      children.add(property.getRight());\n    }\n    return newNode(Token.OBJECTLIT, children);\n  }\n\n  private Node transformNewExpression(NewExpression newExpression) {\n    return newNode(Token.NEW, newExpression.getTarget(),\n                    newExpression.getArguments());\n  }\n\n  private Node transformCall(FunctionCall callNode) {\n    return newNode(Token.CALL, callNode.getTarget(),\n                    callNode.getArguments());\n  }\n\n  private Node transformPropAccess(PropertyGet propertyGet) {\n    return newNode(Token.GETPROP, propertyGet.getTarget(),\n                    transformLiteral(propertyGet.getProperty()));\n  }\n\n  private Node transformColON(AstNode node) {\n    // Colons for object literals.\n    return newNode(Token.COLON, node);\n  }\n\n  private Node transformUnary(UnaryExpression unaryExpression) {\n    // Optimization.\n    // !0 => true, !1 => false, and !'' => true, but !'x' => false\n    int opType = unaryExpression.getType();\n    AstNode op = unaryExpression.getOperand();\n    if (op instanceof NumberLiteral || op instanceof StringLiteral) {\n      if (opType == Token.NOT) {\n        return newNode(Token.BOOLEAN, !NodeUtil.booleanEquivalent(op));\n      } else if (opType == Token.POS || opType == Token.NEG) {\n        // For + and -, we need the original node so the code generator\n        // knows not to parenthesize if there is no side-effect.\n        return new Node(opType, op);\n      }\n    }\n    return newNode(opType, op);\n  }\n\n  private Node transformIncDec(IncDecExpression incDecExpression) {\n    return newNode(incDecExpression.getType(),\n                   transformLiteral(incDecExpression.getOperand()));\n  }\n\n  private Node transformBinary(BinaryOperator binaryOperator) {\n    return newNode(binaryOperator.getType(),\n                   binaryOperator.getLeft(),\n                   binaryOperator.getRight());\n  }\n\n  private Node transformTrinary(TrinaryExpression trinaryExpression) {\n    return newNode(Token.HOOK,\n                   transform(trinaryExpression.getTestExpression()),\n                   transform(trinaryExpression.getTrueExpression()),\n                   transform(trinaryExpression.getFalseExpression()));\n  }\n\n  private Node transformAssign(Assignment assign) {\n    return newNode(assign.getType(),\n                   assign.getLeft(),\n                   transform(assign.getRight()));\n  }\n\n  private Node processReturnStatement(ReturnStatement statementNode) {\n    Node node = newNode(Token.RETURN);\n    if (statementNode.getReturnValue() != null",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..36ba0155 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,194 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class TransformDispatcher extends IRFactory.TypeSafeDispatcher {\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final Set<String> allowedDirectives = new HashSet<String>();\n+  private Node currentScriptNode;\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+    // Populate the set of allowed directives.\n+    allowedDirectives.addAll(Config.get().getDirectives());\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  private Node newNode(int type, AstNode child) {\n+    Node node = new Node(type);\n+    node.addChildToBack(transform(child));\n+    return node;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+  private Node newNode(int type, List<? extends AstNode> children) {\n+    Node node = new Node(type);\n+    for (AstNode child : children) {\n+      node.addChildToBack(transform(child));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  private Node newNode(int type, AstNode... children) {\n+    Node node = new Node(type);\n+    for (AstNode child : children) {\n+      node.addChildToBack(transform(child));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  private Node processGeneric(AstRoot node) {\n+    Node jsNode = new Node(Token.BLOCK);\n+    for (Node child : transformList(node)) {\n+      jsNode.addChildToBack(child);\n     }\n+    return jsNode;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  private Node processGeneric(Scope scope) {\n+    Node jsNode = new Node(Token.SCRIPT);\n+    for (Node child : transformList(scope)) {\n+      jsNode.addChildToBack(child);\n     }\n+    return jsNode;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  /**\n+   * Produces an AST node representing the given source tree.\n+   *\n+   * <p>The returned node is generally a block node, except in the specific\n+   * cases where the root of the AST is a script, function, or other\n+   * type, in which case the returned node will have that type.\n+   *\n+   * @param tree The tree to transform.\n+   * @return An AST node representing the given source tree.\n+   */\n+  Node transform(AstRoot tree) {\n+    return processGeneric(tree);\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  /**\n+   * Produces an AST node representing the given node in the source tree.\n+   *\n+   * @param node The node to transform.\n+   * @return An AST node representing the given source tree node.\n+   */\n+  private Node transform(AstNode node) {\n+    return node.accept(this);\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  /**\n+   * Produces a list of AST nodes representing the given nodes in the source\n+   * tree.\n+   *\n+   * @param nodes The nodes to transform.\n+   * @return A list of AST nodes representing the given source tree nodes.\n+   */\n+  private List<Node> transformList(List<? extends AstNode> nodes) {\n+    List<Node> result = new ArrayList<Node>(nodes.size());\n+    for (AstNode node : nodes) {\n+      result.add(transform(node));\n     }\n+    return result;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  private Node transformLiteral(Name name) {\n+    return newNode(Token.NAME, name);\n+  }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n+  private Node transformString(StringLiteral stringLiteral) {\n+    return newNode(Token.STRING, stringLiteral);\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  private Node transformNumber(NumberLiteral numberLiteral) {\n+    return newNode(Token.NUMBER, numberLiteral);\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+  private Node transformNull(NullLiteral nullLiteral) {\n+    return newNode(Token.NULL, nullLiteral);\n+  }\n+\n+  private Node transformThis(AstNode thisNode) {\n+    return newNode(Token.THIS, thisNode);\n+  }\n+\n+  private Node transformArrayLiteral(ArrayLiteral arrayLiteral) {\n+    return newNode(Token.ARRAYLIT, arrayLiteral.getElements());\n+  }\n+\n+  private Node transformObjectLiteral(ObjectLiteral objectLiteral) {\n+    ArrayList<AstNode> children = new ArrayList<AstNode>();\n+    for (ObjectProperty property : objectLiteral.getElements()) {\n+      children.add(property.getLeft());\n+      children.add(property.getRight());\n     }\n+    return newNode(Token.OBJECTLIT, children);\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  private Node transformNewExpression(NewExpression newExpression) {\n+    return newNode(Token.NEW, newExpression.getTarget(),\n+                    newExpression.getArguments());\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  private Node transformCall(FunctionCall callNode) {\n+    return newNode(Token.CALL, callNode.getTarget(),\n+                    callNode.getArguments());\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  private Node transformPropAccess(PropertyGet propertyGet) {\n+    return newNode(Token.GETPROP, propertyGet.getTarget(),\n+                    transformLiteral(propertyGet.getProperty()));\n+  }\n+\n+  private Node transformColON(AstNode node) {\n+    // Colons for object literals.\n+    return newNode(Token.COLON, node);\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  private Node transformUnary(UnaryExpression unaryExpression) {\n+    // Optimization.\n+    // !0 => true, !1 => false, and !'' => true, but !'x' => false\n+    int opType = unaryExpression.getType();\n+    AstNode op = unaryExpression.getOperand();\n+    if (op instanceof NumberLiteral || op instanceof StringLiteral) {\n+      if (opType == Token.NOT) {\n+        return newNode(Token.BOOLEAN, !NodeUtil.booleanEquivalent(op));\n+      } else if (opType == Token.POS || opType == Token.NEG) {\n+        // For + and -, we need the original node so the code generator\n+        // knows not to parenthesize if there is no side-effect.\n+        return new Node(opType, op);\n+      }\n     }\n+    return newNode(opType, op);\n+  }\n+\n+  private Node transformIncDec(IncDecExpression incDecExpression) {\n+    return newNode(incDecExpression.getType(),\n+                   transformLiteral(incDecExpression.getOperand()));\n+  }\n+\n+  private Node transformBinary(BinaryOperator binaryOperator) {\n+    return newNode(binaryOperator.getType(),\n+                   binaryOperator.getLeft(),\n+                   binaryOperator.getRight());\n+  }\n+\n+  private Node transformTrinary(TrinaryExpression trinaryExpression) {\n+    return newNode(Token.HOOK,\n+                   transform(trinaryExpression.getTestExpression()),\n+                   transform(trinaryExpression.getTrueExpression()),\n+                   transform(trinaryExpression.getFalseExpression()));\n+  }\n+\n+  private Node transformAssign(Assignment assign) {\n+    return newNode(assign.getType(),\n+                   assign.getLeft(),\n+                   transform(assign.getRight()));\n+  }\n+\n+  private Node processReturnStatement(ReturnStatement statementNode) {\n+    Node node = newNode(Token.RETURN);\n+    if (statementNode.getReturnValue() != null\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}