{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    int lastSeparatorIndex = -1;\n    for (int i = 0; i < size; i++) {\n        Object element = elementPairs.get(i);\n        boolean isSeparator = element instanceof Separator;\n        boolean isPrinter = element instanceof PeriodPrinter;\n        boolean isParser = element instanceof PeriodParser;\n        if (isSeparator) {\n            lastSeparatorIndex = i;\n        }\n        if (isPrinter) {\n            if (printer == null) {\n                printer = (PeriodPrinter) element;\n            } else {\n                printer = new CompositePrinter(printer, (PeriodPrinter) element);\n            }\n        }\n        if (isParser) {\n            if (parser == null) {\n                parser = (PeriodParser) element;\n            } else {\n                parser = new CompositeParser(parser, (PeriodParser) element);\n            }\n        }\n        if (isSeparator && (i == size - 1 ||\n                i < size - 1 && elementPairs.get(i+1) instanceof Separator)) {\n            Separator sep = (Separator) element;\n            if (printer != null && parser != null) {\n                sep = sep.finish(printer, parser);\n            }\n            List<Object> sublist = elementPairs.subList(lastSeparatorIndex + 1, i + 1);\n            PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n            return new PeriodFormatter(sep, f.getSeparator() == null ? sep : f.getSeparator());\n        } else if (isSeparator && i < size - 1) {\n            List<Object> sublist = elementPairs.subList(lastSeparatorIndex + 1, i);\n            PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n            return new PeriodFormatter(null, f.getSeparator() == null ? (Separator)element : f.getSeparator());\n        } else if (i == size - 1) {\n            return new PeriodFormatter(printer, parser);\n        }\n    }\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..4b29de0c 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,58 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    int lastSeparatorIndex = -1;\n+    for (int i = 0; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+        boolean isSeparator = element instanceof Separator;\n+        boolean isPrinter = element instanceof PeriodPrinter;\n+        boolean isParser = element instanceof PeriodParser;\n+        if (isSeparator) {\n+            lastSeparatorIndex = i;\n+        }\n+        if (isPrinter) {\n+            if (printer == null) {\n+                printer = (PeriodPrinter) element;\n+            } else {\n+                printer = new CompositePrinter(printer, (PeriodPrinter) element);\n+            }\n+        }\n+        if (isParser) {\n+            if (parser == null) {\n+                parser = (PeriodParser) element;\n+            } else {\n+                parser = new CompositeParser(parser, (PeriodParser) element);\n+            }\n+        }\n+        if (isSeparator && (i == size - 1 ||\n+                i < size - 1 && elementPairs.get(i+1) instanceof Separator)) {\n+            Separator sep = (Separator) element;\n+            if (printer != null && parser != null) {\n+                sep = sep.finish(printer, parser);\n+            }\n+            List<Object> sublist = elementPairs.subList(lastSeparatorIndex + 1, i + 1);\n+            PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n+            return new PeriodFormatter(sep, f.getSeparator() == null ? sep : f.getSeparator());\n+        } else if (isSeparator && i < size - 1) {\n+            List<Object> sublist = elementPairs.subList(lastSeparatorIndex + 1, i);\n+            PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n+            return new PeriodFormatter(null, f.getSeparator() == null ? (Separator)element : f.getSeparator());\n+        } else if (i == size - 1) {\n+            return new PeriodFormatter(printer, parser);\n         }\n     }\n+    return new PeriodFormatter(printer, parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}