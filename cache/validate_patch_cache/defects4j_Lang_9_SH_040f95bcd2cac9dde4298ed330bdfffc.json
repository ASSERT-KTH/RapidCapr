{
    "patch": "    private void init() {\n        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n        nameValues = new ConcurrentHashMap<>();\n        StringBuilder regex = new StringBuilder();\n        List<Strategy> collector = new ArrayList<>();\n\n        Matcher patternMatcher = formatPattern.matcher(pattern);\n        if (!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField = patternMatcher.group();\n        Strategy currentStrategy = getStrategy(currentFormatField);\n        do {\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if (!patternMatcher.find()) {\n                nextStrategy = null;\n            } else {\n                nextFormatField = patternMatcher.group();\n                nextStrategy = getStrategy(nextFormatField);\n                if (currentStrategy == null || !currentStrategy.equals(nextStrategy)) {\n                    if (currentStrategy == null) {\n                        throw new IllegalArgumentException(\"Invalid pattern\");\n                    }\n                    currentStrategy.nextStrategy = nextStrategy;\n                    currentStrategy = nextStrategy;\n                }\n            }\n        } while (nextStrategy != null);\n\n        if (collector.isEmpty()) {\n            throw new IllegalArgumentException(\"Empty pattern\");\n        }\n        currentFormatField = null;\n        strategies = collector.toArray(new Strategy[0]);\n        parsePattern = Pattern.compile(regex.toString());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..a0604f32 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,46 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+    private void init() {\n+        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+        nameValues = new ConcurrentHashMap<>();\n+        StringBuilder regex = new StringBuilder();\n+        List<Strategy> collector = new ArrayList<>();\n+\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n+        if (!patternMatcher.lookingAt()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+\n+        currentFormatField = patternMatcher.group();\n+        Strategy currentStrategy = getStrategy(currentFormatField);\n+        do {\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+            if (!patternMatcher.find()) {\n+                nextStrategy = null;\n+            } else {\n+                nextFormatField = patternMatcher.group();\n+                nextStrategy = getStrategy(nextFormatField);\n+                if (currentStrategy == null || !currentStrategy.equals(nextStrategy)) {\n+                    if (currentStrategy == null) {\n+                        throw new IllegalArgumentException(\"Invalid pattern\");\n+                    }\n+                    currentStrategy.nextStrategy = nextStrategy;\n+                    currentStrategy = nextStrategy;\n+                }\n+            }\n+        } while (nextStrategy != null);\n+\n+        if (collector.isEmpty()) {\n+            throw new IllegalArgumentException(\"Empty pattern\");\n+        }\n+        currentFormatField = null;\n+        strategies = collector.toArray(new Strategy[0]);\n+        parsePattern = Pattern.compile(regex.toString());\n+    }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}