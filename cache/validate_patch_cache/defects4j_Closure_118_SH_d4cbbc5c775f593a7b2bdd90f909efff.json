{
    "patch": "NodeTraversal.traverse(compiler, child, new NodeTraversal.Callback() {\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isFunction()) {\n      processFunction(t, n);\n    }\n  }\n});",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..39c35d40 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,14 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+NodeTraversal.traverse(compiler, child, new NodeTraversal.Callback() {\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isFunction()) {\n+      processFunction(t, n);\n+    }\n+  }\n+});\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: <anonymous com.google.javascript.jscomp.DisambiguateProperties$FindRenameableProperties$1> is not abstract and does not override abstract method shouldTraverse(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}