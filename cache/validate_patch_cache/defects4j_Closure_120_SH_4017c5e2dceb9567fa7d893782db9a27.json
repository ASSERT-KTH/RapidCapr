{
    "patch": "      if (block.isFunction) {\n        // check if variable is assigned a value in the function itself\n        for (Reference reference : block.getReferences()) {\n          if (reference != ref && reference.canAssign()) {\n            if (reference.getNameNode().matchesName(nameNode)) {\n              return false;\n            }\n          }\n        }\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..059ccd84 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // check if variable is assigned a value in the function itself\n+        for (Reference reference : block.getReferences()) {\n+          if (reference != ref && reference.canAssign()) {\n+            if (reference.getNameNode().matchesName(nameNode)) {\n+              return false;\n+            }\n+          }\n+        }\n+        break;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}