{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        throw new IllegalArgumentException(\"mock object must be an instance of cglib's Factory class\");\n    }\n    try {\n        Field mockHandlerField = Factory.class.getDeclaredField(\"callbacks\");\n        mockHandlerField.setAccessible(true);\n        Object callbacks = mockHandlerField.get(mock);\n        MethodInterceptorFilter methodInterceptorFilter = null;\n        if (callbacks instanceof Callback[]) {\n            Callback[] callbackArray = (Callback[]) callbacks;\n            if (callbackArray.length > 0) {\n                for (Callback cb : callbackArray) {\n                    if (cb instanceof MethodInterceptorFilter) {\n                        methodInterceptorFilter = (MethodInterceptorFilter) cb;\n                        break;\n                    }\n                }\n            }\n        }\n        if (methodInterceptorFilter == null) {\n            throw new MockitoException(\"Mockito was unable to find the MethodInterceptorFilter for the mock object\");\n        }\n        MockHandler<T> oldMockHandler = (MockHandler<T>) methodInterceptorFilter.getMockHandler();\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        throw new MockitoException(\"Mockito was unable to reset the mock object\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ee1069c9d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,38 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        throw new IllegalArgumentException(\"mock object must be an instance of cglib's Factory class\");\n+    }\n+    try {\n+        Field mockHandlerField = Factory.class.getDeclaredField(\"callbacks\");\n+        mockHandlerField.setAccessible(true);\n+        Object callbacks = mockHandlerField.get(mock);\n+        MethodInterceptorFilter methodInterceptorFilter = null;\n+        if (callbacks instanceof Callback[]) {\n+            Callback[] callbackArray = (Callback[]) callbacks;\n+            if (callbackArray.length > 0) {\n+                for (Callback cb : callbackArray) {\n+                    if (cb instanceof MethodInterceptorFilter) {\n+                        methodInterceptorFilter = (MethodInterceptorFilter) cb;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        if (methodInterceptorFilter == null) {\n+            throw new MockitoException(\"Mockito was unable to find the MethodInterceptorFilter for the mock object\");\n+        }\n+        MockHandler<T> oldMockHandler = (MockHandler<T>) methodInterceptorFilter.getMockHandler();\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+        throw new MockitoException(\"Mockito was unable to reset the mock object\", e);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}