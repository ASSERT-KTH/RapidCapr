{
    "patch": "Boolean isUnnamedFunction = false;\nName name = functionNode.getFunctionName();\nif (name == null) {\n  name = new Name();\n  name.setIdentifier(\"\");\n  name.setLineno(functionNode.getLineno());\n  name.setParent(functionNode);\n  isUnnamedFunction = true;\n}\nNode node = newNode(Token.FUNCTION);\n\nNode newName = transform(name);\nif (isUnnamedFunction) {\n  int nameTokenPos = functionNode.getBody().getPosition() -\n                      \"(function() {})\".length();\n  newName.setCharno(position2charno(nameTokenPos));\n}\nnode.addChildToBack(newName);\n\nNode lp = newNode(Token.LP);\nfor (AstNode param : functionNode.getParamIds()) {\n  lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..327b4c89 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,35 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Boolean isUnnamedFunction = false;\n+Name name = functionNode.getFunctionName();\n+if (name == null) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+  name.setLineno(functionNode.getLineno());\n+  name.setParent(functionNode);\n+  isUnnamedFunction = true;\n+}\n+Node node = newNode(Token.FUNCTION);\n+\n+Node newName = transform(name);\n+if (isUnnamedFunction) {\n+  int nameTokenPos = functionNode.getBody().getPosition() -\n+                      \"(function() {})\".length();\n+  newName.setCharno(position2charno(nameTokenPos));\n+}\n+node.addChildToBack(newName);\n+\n+Node lp = newNode(Token.LP);\n+for (AstNode param : functionNode.getParamIds()) {\n+  lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}