{
    "patch": "                    // If the gap in local time between instantAdjusted and\n                    // nextAdjusted is less than the length of the gap\n                    // in local time between instantLocal and nextAdjusted then\n                    // we must have gone into DST before instantAdjusted and the\n                    // original offsetLocal is correct.\n                    long diff = nextAdjusted - instantAdjusted;\n                    long next = nextTransition(nextAdjusted);\n                    long nextDiff = next - nextAdjusted;\n                    if (diff < nextDiff) {\n                        return offsetLocal;\n                    }\n                }\n                // the time must be between nextAdjusted and\n                // (nextAdjusted + dstOffsetAdjusted)\n                return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9e7b0184 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                    // If the gap in local time between instantAdjusted and\n+                    // nextAdjusted is less than the length of the gap\n+                    // in local time between instantLocal and nextAdjusted then\n+                    // we must have gone into DST before instantAdjusted and the\n+                    // original offsetLocal is correct.\n+                    long diff = nextAdjusted - instantAdjusted;\n+                    long next = nextTransition(nextAdjusted);\n+                    long nextDiff = next - nextAdjusted;\n+                    if (diff < nextDiff) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                // the time must be between nextAdjusted and\n+                // (nextAdjusted + dstOffsetAdjusted)\n+                return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}