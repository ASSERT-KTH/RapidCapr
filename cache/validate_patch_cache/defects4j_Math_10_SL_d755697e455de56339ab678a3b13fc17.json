{
    "patch": "double px = x[xOffset];\ndouble py = y[yOffset];\n\nif (Double.isNaN(px) || Double.isNaN(py)) {\n    for (int i = resultOffset; i < resultOffset + getSize(); i++) {\n        result[i] = Double.NaN;\n    }\n} else if (Double.isInfinite(px) && Double.isInfinite(py)) {\n    result[resultOffset] = FastMath.atan2(py, px);\n    if (result[0] < 0) {\n        result[resultOffset] += 2 * FastMath.PI;\n    }\n    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n        result[i] = 0;\n    }\n} else if (Double.isInfinite(py)) {\n    result[resultOffset] = FastMath.copySign(FastMath.PI / 2, py);\n    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n        result[i] = 0;\n    }\n} else if (py == 0.0 && !Double.isInfinite(px) && !Double.isInfinite(py)) {\n    result[resultOffset] = FastMath.copySign(0.0, px);\n    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n        result[i] = 0;\n    }\n} else if (Double.isInfinite(px) && py != 0.0) {\n    result[resultOffset] = FastMath.copySign(FastMath.PI, py) / 2.0;\n    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n        result[i] = 0;\n    }\n} else {\n    // original code\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..2a1594804 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,39 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+double px = x[xOffset];\n+double py = y[yOffset];\n+\n+if (Double.isNaN(px) || Double.isNaN(py)) {\n+    for (int i = resultOffset; i < resultOffset + getSize(); i++) {\n+        result[i] = Double.NaN;\n+    }\n+} else if (Double.isInfinite(px) && Double.isInfinite(py)) {\n+    result[resultOffset] = FastMath.atan2(py, px);\n+    if (result[0] < 0) {\n+        result[resultOffset] += 2 * FastMath.PI;\n+    }\n+    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n+        result[i] = 0;\n+    }\n+} else if (Double.isInfinite(py)) {\n+    result[resultOffset] = FastMath.copySign(FastMath.PI / 2, py);\n+    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n+        result[i] = 0;\n+    }\n+} else if (py == 0.0 && !Double.isInfinite(px) && !Double.isInfinite(py)) {\n+    result[resultOffset] = FastMath.copySign(0.0, px);\n+    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n+        result[i] = 0;\n+    }\n+} else if (Double.isInfinite(px) && py != 0.0) {\n+    result[resultOffset] = FastMath.copySign(FastMath.PI, py) / 2.0;\n+    for (int i = resultOffset + 1; i < resultOffset + getSize(); i++) {\n+        result[i] = 0;\n+    }\n+} else {\n+    // original code\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<-0.0>",
    "test_result": "FAIL"
}