{
    "patch": "    private void computeGenKill(Node n, BitSet gen, BitSet kill,\n                                boolean conditional, List<Node> loopLHS) {\n\n        switch (n.getType()) {\n            case Token.SCRIPT:\n            case Token.BLOCK:\n            case Token.FUNCTION:\n                return;\n\n            case Token.WHILE:\n            case Token.DO:\n            case Token.IF:\n                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n                        conditional, loopLHS);\n                break;\n\n            case Token.FOR:\n                if (!NodeUtil.isForIn(n)) {\n                    Node forNode = NodeUtil.getConditionExpression(n);\n                    if (forNode != null) {\n                        computeGenKill(forNode.getFirstChild(), gen, kill,\n                                       conditional, loopLHS);\n                    }\n                    Node increment = NodeUtil.getForIncrement(n);\n                    if (increment != null) {\n                        computeGenKill(increment, gen, kill, conditional, loopLHS);\n                    }\n                    Node body = NodeUtil.getLoopCodeBlock(n);\n                    if (body != null) {\n                        computeGenKill(body, gen, kill, conditional, loopLHS);\n                    }\n                } else {\n                    // for(x in y) {...}\n                    Node lhs = n.getFirstChild();\n                    Node rhs = lhs.getNext();\n                    if (NodeUtil.isVar(lhs) || NodeUtil.isDestructuring(lhs)) {\n                        // for(var x in y) {...}\n                        int destructuringType = NodeUtil.getDestructuringType(lhs);\n                        if (destructuringType == Token.ARRAY_PATTERN\n                                || destructuringType == Token.OBJECT_PATTERN) {\n                            // [x, ...] = arr or {p1: x, ...} = obj\n                            Iterator<Node> it = NodeUtil.findAllLhsNodes(lhs);\n                            while (it.hasNext()) {\n                                Node lhsNode = it.next();\n                                addToSetIfLocal(lhsNode, kill, loopLHS);\n                                addToSetIfLocal(lhsNode, gen, loopLHS);\n                            }\n                        } else {\n                            lhs = lhs.getLastChild();\n                            addToSetIfLocal(lhs, kill, loopLHS);\n                            addToSetIfLocal(lhs, gen, loopLHS);\n                        }\n                    } else {\n                        addToSetIfLocal(lhs, kill, loopLHS);\n                        addToSetIfLocal(lhs, gen, loopLHS);\n                    }\n                    /* When using \"for (foo in bar)\" without brackets, the first child of the for node\n                    is an identifier (\"foo\") and not a code block. We should thus extract the loop body\n                    by iterating the nodes until we find the loop variable. */\n\n                    while (rhs.getType() != Token.BLOCK) {\n                        rhs = rhs.getNext();\n                    }\n                    // NOTE: condition is true so that we can conclude that\n                    // the first argument to for-in is evaluated.\n                    computeGenKill(rhs, gen, kill, true, loopLHS);\n                }\n                break;\n\n            case Token.VAR:\n                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                    if (c.hasChildren()) {\n                        computeGenKill(c.getFirstChild(), gen, kill, conditional, loopLHS);\n                        if (!conditional) {\n                            addToSetIfLocal(c.getFirstChild(), kill, loopLHS);\n                        }\n                    }\n                }\n                break;\n\n            case Token.AND:\n            case Token.OR:\n                computeGenKill(n.getFirstChild(), gen, kill, conditional, loopLHS);\n                computeGenKill(n.getLastChild(), gen, kill, true, loopLHS);\n                if (!conditional) {\n                    addToSetIfLocal(n, kill, loopLHS);\n                }\n                break;\n\n            case Token.HOOK:\n                computeGenKill(n.getFirstChild(), gen, kill, conditional, loopLHS);\n                computeGenKill(n.getFirstChild().getNext(), gen, kill, true, loopLHS);\n                computeGenKill(n.getLastChild(), gen, kill, true, loopLHS);\n                if (!conditional) {\n                    addToSetIfLocal(n, kill, loopLHS);\n                }\n                break;\n\n            case Token.NAME:\n                if (isArgumentsName(n)) {\n                    markAllParametersEscaped();\n                } else {\n                    addToSetIfLocal(n, gen, loopLHS);\n                    if (!conditional) {\n                        addToSetIfLocal(n, kill, loopLHS);\n                    }\n                }\n                break;\n\n            default:\n                if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n                    Node lhs = n.getFirstChild();\n                    if (!conditional) {\n                        addToSetIfLocal(lhs, kill, loopLHS);\n                    }\n                    if (!NodeUtil.isAssign(n)) {\n                        // assignments such as a += 1 read a.\n                        addToSetIfLocal(lhs, gen, loopLHS);\n                    }\n                    computeGenKill(lhs.getNext(), gen, kill, conditional, loopLHS);\n                } else {\n                    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                        computeGenKill(c, gen, kill, conditional, loopLHS);\n                    }\n                }\n                break;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..b6264c8f 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,134 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+    private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+                                boolean conditional, List<Node> loopLHS) {\n+\n+        switch (n.getType()) {\n+            case Token.SCRIPT:\n+            case Token.BLOCK:\n+            case Token.FUNCTION:\n+                return;\n+\n+            case Token.WHILE:\n+            case Token.DO:\n+            case Token.IF:\n+                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n+                        conditional, loopLHS);\n+                break;\n+\n+            case Token.FOR:\n+                if (!NodeUtil.isForIn(n)) {\n+                    Node forNode = NodeUtil.getConditionExpression(n);\n+                    if (forNode != null) {\n+                        computeGenKill(forNode.getFirstChild(), gen, kill,\n+                                       conditional, loopLHS);\n+                    }\n+                    Node increment = NodeUtil.getForIncrement(n);\n+                    if (increment != null) {\n+                        computeGenKill(increment, gen, kill, conditional, loopLHS);\n+                    }\n+                    Node body = NodeUtil.getLoopCodeBlock(n);\n+                    if (body != null) {\n+                        computeGenKill(body, gen, kill, conditional, loopLHS);\n+                    }\n+                } else {\n+                    // for(x in y) {...}\n+                    Node lhs = n.getFirstChild();\n+                    Node rhs = lhs.getNext();\n+                    if (NodeUtil.isVar(lhs) || NodeUtil.isDestructuring(lhs)) {\n+                        // for(var x in y) {...}\n+                        int destructuringType = NodeUtil.getDestructuringType(lhs);\n+                        if (destructuringType == Token.ARRAY_PATTERN\n+                                || destructuringType == Token.OBJECT_PATTERN) {\n+                            // [x, ...] = arr or {p1: x, ...} = obj\n+                            Iterator<Node> it = NodeUtil.findAllLhsNodes(lhs);\n+                            while (it.hasNext()) {\n+                                Node lhsNode = it.next();\n+                                addToSetIfLocal(lhsNode, kill, loopLHS);\n+                                addToSetIfLocal(lhsNode, gen, loopLHS);\n+                            }\n+                        } else {\n+                            lhs = lhs.getLastChild();\n+                            addToSetIfLocal(lhs, kill, loopLHS);\n+                            addToSetIfLocal(lhs, gen, loopLHS);\n+                        }\n+                    } else {\n+                        addToSetIfLocal(lhs, kill, loopLHS);\n+                        addToSetIfLocal(lhs, gen, loopLHS);\n+                    }\n+                    /* When using \"for (foo in bar)\" without brackets, the first child of the for node\n+                    is an identifier (\"foo\") and not a code block. We should thus extract the loop body\n+                    by iterating the nodes until we find the loop variable. */\n+\n+                    while (rhs.getType() != Token.BLOCK) {\n+                        rhs = rhs.getNext();\n+                    }\n+                    // NOTE: condition is true so that we can conclude that\n+                    // the first argument to for-in is evaluated.\n+                    computeGenKill(rhs, gen, kill, true, loopLHS);\n+                }\n+                break;\n+\n+            case Token.VAR:\n+                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                    if (c.hasChildren()) {\n+                        computeGenKill(c.getFirstChild(), gen, kill, conditional, loopLHS);\n+                        if (!conditional) {\n+                            addToSetIfLocal(c.getFirstChild(), kill, loopLHS);\n+                        }\n+                    }\n+                }\n+                break;\n+\n+            case Token.AND:\n+            case Token.OR:\n+                computeGenKill(n.getFirstChild(), gen, kill, conditional, loopLHS);\n+                computeGenKill(n.getLastChild(), gen, kill, true, loopLHS);\n+                if (!conditional) {\n+                    addToSetIfLocal(n, kill, loopLHS);\n+                }\n+                break;\n+\n+            case Token.HOOK:\n+                computeGenKill(n.getFirstChild(), gen, kill, conditional, loopLHS);\n+                computeGenKill(n.getFirstChild().getNext(), gen, kill, true, loopLHS);\n+                computeGenKill(n.getLastChild(), gen, kill, true, loopLHS);\n+                if (!conditional) {\n+                    addToSetIfLocal(n, kill, loopLHS);\n+                }\n+                break;\n+\n+            case Token.NAME:\n+                if (isArgumentsName(n)) {\n+                    markAllParametersEscaped();\n+                } else {\n+                    addToSetIfLocal(n, gen, loopLHS);\n+                    if (!conditional) {\n+                        addToSetIfLocal(n, kill, loopLHS);\n+                    }\n+                }\n+                break;\n+\n+            default:\n+                if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+                    Node lhs = n.getFirstChild();\n+                    if (!conditional) {\n+                        addToSetIfLocal(lhs, kill, loopLHS);\n+                    }\n+                    if (!NodeUtil.isAssign(n)) {\n+                        // assignments such as a += 1 read a.\n+                        addToSetIfLocal(lhs, gen, loopLHS);\n+                    }\n+                    computeGenKill(lhs.getNext(), gen, kill, conditional, loopLHS);\n+                } else {\n+                    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                        computeGenKill(c, gen, kill, conditional, loopLHS);\n+                    }\n+                }\n+                break;\n         }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n-            }\n-          }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n-        }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n-        }\n-        return;\n     }\n-  }\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: method computeGenKill in class LiveVariablesAnalysis cannot be applied to given types;",
    "test_result": "ERROR"
}