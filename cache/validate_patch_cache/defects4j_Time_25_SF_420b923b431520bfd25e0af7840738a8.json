{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at instantLocal in order to estimate the true offset.\n    int offsetLocal = getOffset(instantLocal);\n\n    // Adjust instantLocal using the estimate and recalculate the offset.\n    long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    // If the offsets differ, we must be near a DST boundary.\n    if (offsetLocal != offsetAdjusted) {\n        // Check if we are going forward over a DST boundary.\n        if (offsetAdjusted > offsetLocal) {\n            // Check if we need to skip a transition. If so, return the offset before the skipped transition.\n            long nextTransitionLocal = nextTransition(instantLocal);\n            long nextTransitionAdjusted = nextTransition(instantAdjusted);\n            if (nextTransitionLocal != nextTransitionAdjusted) {\n                return getOffset(previousTransition(nextTransitionAdjusted - 1));\n            }\n        } else {\n            // Check if we need to go back over a DST boundary. If so, return the offset before the transition.\n            long previousTransitionLocal = previousTransition(instantLocal);\n            long previousTransitionAdjusted = previousTransition(instantAdjusted);\n            if (previousTransitionLocal != previousTransitionAdjusted) {\n                return getOffset(previousTransitionAdjusted);\n            }\n        }\n    }\n\n    // Return the true offset.\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5bf7fb27 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the offset at instantLocal in order to estimate the true offset.\n+    int offsetLocal = getOffset(instantLocal);\n+\n+    // Adjust instantLocal using the estimate and recalculate the offset.\n+    long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // If the offsets differ, we must be near a DST boundary.\n+    if (offsetLocal != offsetAdjusted) {\n+        // Check if we are going forward over a DST boundary.\n+        if (offsetAdjusted > offsetLocal) {\n+            // Check if we need to skip a transition. If so, return the offset before the skipped transition.\n+            long nextTransitionLocal = nextTransition(instantLocal);\n+            long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+            if (nextTransitionLocal != nextTransitionAdjusted) {\n+                return getOffset(previousTransition(nextTransitionAdjusted - 1));\n+            }\n+        } else {\n+            // Check if we need to go back over a DST boundary. If so, return the offset before the transition.\n+            long previousTransitionLocal = previousTransition(instantLocal);\n+            long previousTransitionAdjusted = previousTransition(instantAdjusted);\n+            if (previousTransitionLocal != previousTransitionAdjusted) {\n+                return getOffset(previousTransitionAdjusted);\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    // Return the true offset.\n+    return offsetAdjusted;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}