{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if ((nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted)) {\n            // Ambiguous local time around transition\n            return offsetLocal;\n        } else if (offsetLocal > offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            if (prevLocal != prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if ((offsetLocal - offsetAdjusted) > 0) {\n        // Positive offset change implies a gap in spring\n        // which clocks in local time move forward\n        long next = nextTransition(instantAdjusted);\n        if (next <= instantLocal) {\n            next = nextTransition(next);\n        }\n        return getOffset(next);\n    } else {\n        // if the offsets differ but the time didn't move, we're near a DST boundary\n        // we need to handle this case so that we don't return an incorrect offset\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        int beforeDiff = Math.abs(offsetLocal - getOffset(nextLocal - 1));\n        int afterDiff = Math.abs(getOffset(nextAdjusted) - offsetAdjusted);\n        if (beforeDiff < afterDiff) {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bc8c7566 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if ((nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted)) {\n+            // Ambiguous local time around transition\n+            return offsetLocal;\n+        } else if (offsetLocal > offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            if (prevLocal != prevAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+    } else if ((offsetLocal - offsetAdjusted) > 0) {\n+        // Positive offset change implies a gap in spring\n+        // which clocks in local time move forward\n+        long next = nextTransition(instantAdjusted);\n+        if (next <= instantLocal) {\n+            next = nextTransition(next);\n+        }\n+        return getOffset(next);\n+    } else {\n+        // if the offsets differ but the time didn't move, we're near a DST boundary\n+        // we need to handle this case so that we don't return an incorrect offset\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        int beforeDiff = Math.abs(offsetLocal - getOffset(nextLocal - 1));\n+        int afterDiff = Math.abs(getOffset(nextAdjusted) - offsetAdjusted);\n+        if (beforeDiff < afterDiff) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}