{
    "patch": "public double getTypedPercent(String json) {\n    try {\n        ObjectMapper objectMapper = new ObjectMapper();\n        Map<String, Integer> map = objectMapper.readValue(json, new TypeReference<Map<String, Integer>>() {});\n        int total = 0;\n        int typed = 0;\n        for(Map.Entry<String, Integer> entry : map.entrySet()) {\n            total += entry.getValue();\n            if(entry.getKey().startsWith(\"Typed\")) {\n                typed += entry.getValue();\n            }\n        }\n        return ((double)typed / total) * 100;\n    } catch(IOException e) {\n        e.printStackTrace();\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d2c640c6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    try {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        Map<String, Integer> map = objectMapper.readValue(json, new TypeReference<Map<String, Integer>>() {});\n+        int total = 0;\n+        int typed = 0;\n+        for(Map.Entry<String, Integer> entry : map.entrySet()) {\n+            total += entry.getValue();\n+            if(entry.getKey().startsWith(\"Typed\")) {\n+                typed += entry.getValue();\n+            }\n+        }\n+        return ((double)typed / total) * 100;\n+    } catch(IOException e) {\n+        e.printStackTrace();\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}