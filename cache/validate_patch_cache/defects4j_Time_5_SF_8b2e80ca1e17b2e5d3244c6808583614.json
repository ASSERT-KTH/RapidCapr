{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n\n    // Normalize weeks and days to days only\n    if (weeks != 0 || days != 0) {\n        int totalDays = (weeks * 7) + days;\n        weeks = totalDays / 7;\n        days = totalDays % 7;\n    }\n\n    // Get the total number of months\n    int totalMonths = (years * 12) + months;\n\n    // Normalize years, months, weeks, and days\n    if (totalMonths != 0 || weeks != 0 || days != 0) {\n        if (weeks != 0 || days != 0) {\n            int totalWeeks = totalMonths * 4 + weeks;\n            totalMonths = totalWeeks / 4;\n            weeks = totalWeeks % 4;\n        }\n\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n\n        // Add the normalized years and months to the result\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC()).withYears(normalizedYears).withMonths(normalizedMonths);\n\n        // Add the normalized weeks and days to the result\n        if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n            result = result.withWeeks(weeks);\n        }\n        if (days != 0 && type.isSupported(DurationFieldType.days())) {\n            result = result.withDays(days);\n        }\n\n        return result;\n    } else {\n        // No normalization necessary\n        return new Period(millis, type, ISOChronology.getInstanceUTC());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..30b4456e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,55 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    // Normalize weeks and days to days only\n+    if (weeks != 0 || days != 0) {\n+        int totalDays = (weeks * 7) + days;\n+        weeks = totalDays / 7;\n+        days = totalDays % 7;\n+    }\n+\n+    // Get the total number of months\n+    int totalMonths = (years * 12) + months;\n+\n+    // Normalize years, months, weeks, and days\n+    if (totalMonths != 0 || weeks != 0 || days != 0) {\n+        if (weeks != 0 || days != 0) {\n+            int totalWeeks = totalMonths * 4 + weeks;\n+            totalMonths = totalWeeks / 4;\n+            weeks = totalWeeks % 4;\n+        }\n+\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+\n+        // Add the normalized years and months to the result\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC()).withYears(normalizedYears).withMonths(normalizedMonths);\n+\n+        // Add the normalized weeks and days to the result\n+        if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n+            result = result.withWeeks(weeks);\n+        }\n+        if (days != 0 && type.isSupported(DurationFieldType.days())) {\n+            result = result.withDays(days);\n         }\n+\n         return result;\n+    } else {\n+        // No normalization necessary\n+        return new Period(millis, type, ISOChronology.getInstanceUTC());\n     }\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}