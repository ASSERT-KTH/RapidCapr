{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 50; // adjust the block size as needed\n    final int numRows = m.getRowDimension();\n    final int numBlocks = (numRows + blockSize - 1) / blockSize;\n    RealMatrix result = MatrixUtils.createRealMatrix(numRows, numRows);\n    for (int i = 0; i < numBlocks; i++) {\n        int start = i * blockSize;\n        int end = Math.min((i + 1) * blockSize, numRows);\n        RealMatrix block = m.getSubMatrix(start, end - 1, start, end - 1);\n        final EigenDecomposition dec = new EigenDecomposition(block);\n        RealMatrix sqrtBlock = dec.getSquareRoot();\n        result.setSubMatrix(sqrtBlock.getData(), start, start);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d729c4e73 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 50; // adjust the block size as needed\n+    final int numRows = m.getRowDimension();\n+    final int numBlocks = (numRows + blockSize - 1) / blockSize;\n+    RealMatrix result = MatrixUtils.createRealMatrix(numRows, numRows);\n+    for (int i = 0; i < numBlocks; i++) {\n+        int start = i * blockSize;\n+        int end = Math.min((i + 1) * blockSize, numRows);\n+        RealMatrix block = m.getSubMatrix(start, end - 1, start, end - 1);\n+        final EigenDecomposition dec = new EigenDecomposition(block);\n+        RealMatrix sqrtBlock = dec.getSquareRoot();\n+        result.setSubMatrix(sqrtBlock.getData(), start, start);\n     }\n+    return result;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}