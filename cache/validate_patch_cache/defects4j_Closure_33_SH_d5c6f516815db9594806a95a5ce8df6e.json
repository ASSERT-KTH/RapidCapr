{
    "patch": "            ObjectType inferredType = ObjectType.makeObjectType(\n                getCommonTypes(),\n                getCommonTypes().getRegExpType(),\n                ImmutableList.<String>of(),\n                ImmutableMap.of(\n                    prop,\n                    getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType)));\n            typeToInfer = registry.getBuilder().getDeclaredTypeRegistry().getFunctionType(inferredType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..8555d6bc 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,19 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+            ObjectType inferredType = ObjectType.makeObjectType(\n+                getCommonTypes(),\n+                getCommonTypes().getRegExpType(),\n+                ImmutableList.<String>of(),\n+                ImmutableMap.of(\n+                    prop,\n+                    getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType)));\n+            typeToInfer = registry.getBuilder().getDeclaredTypeRegistry().getFunctionType(inferredType);\n+          }\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}