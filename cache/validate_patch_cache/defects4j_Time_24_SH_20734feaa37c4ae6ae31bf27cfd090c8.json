{
    "patch": "        } catch (IllegalFieldValueException e) {\n            boolean retry = false;\n            if (savedFields != iSavedFields) {\n                iSavedFields = savedFields;\n                retry = true;\n            } else {\n                for (int i = 0; i < count; i++) {\n                    int conflict = savedFields[i].getField().getConflictIndex();\n                    if (conflict >= 0) {\n                        for (int j = 0; j < i; j++) {\n                            if (savedFields[j].getField().getConflictIndex() == conflict) {\n                                try {\n                                    savedFields[j].set(millis, resetFields);\n                                } catch (IllegalFieldValueException e2) {\n                                    // ignore\n                                }\n                                retry = true;\n                                break;\n                            }\n                        }\n                        if (retry) {\n                            break;\n                        }\n                        try {\n                            DateTimeField conflictField = savedFields[i].getField().getConflictingField();\n                            if (conflictField != null) {\n                                int newValue = conflictField.get(getMillis());\n                                savedFields[i].set(newValue, resetFields);\n                                continue;\n                            }\n                        } catch (IllegalFieldValueException e2) {\n                            // ignore\n                        }\n                    }\n                }\n            }\n            if (retry) {\n                return computeMillis(resetFields, text);\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..06da971c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,50 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            boolean retry = false;\n+            if (savedFields != iSavedFields) {\n+                iSavedFields = savedFields;\n+                retry = true;\n+            } else {\n+                for (int i = 0; i < count; i++) {\n+                    int conflict = savedFields[i].getField().getConflictIndex();\n+                    if (conflict >= 0) {\n+                        for (int j = 0; j < i; j++) {\n+                            if (savedFields[j].getField().getConflictIndex() == conflict) {\n+                                try {\n+                                    savedFields[j].set(millis, resetFields);\n+                                } catch (IllegalFieldValueException e2) {\n+                                    // ignore\n+                                }\n+                                retry = true;\n+                                break;\n+                            }\n+                        }\n+                        if (retry) {\n+                            break;\n+                        }\n+                        try {\n+                            DateTimeField conflictField = savedFields[i].getField().getConflictingField();\n+                            if (conflictField != null) {\n+                                int newValue = conflictField.get(getMillis());\n+                                savedFields[i].set(newValue, resetFields);\n+                                continue;\n+                            }\n+                        } catch (IllegalFieldValueException e2) {\n+                            // ignore\n+                        }\n+                    }\n+                }\n+            }\n+            if (retry) {\n+                return computeMillis(resetFields, text);\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}