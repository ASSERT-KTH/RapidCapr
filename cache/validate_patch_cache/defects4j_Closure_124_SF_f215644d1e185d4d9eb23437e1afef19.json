{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  LinkedList<Node> queue = new LinkedList<Node>();\n  queue.add(node.getFirstChild());\n\n  while (!queue.isEmpty()) {\n     Node temp = queue.poll();\n     if (temp.isName() && isNameAssignedTo(temp.getString(), replacement)) {\n       return false;\n     } else if (temp.isGetProp()) {\n       queue.add(temp.getFirstChild());\n     }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..2e72b5e6 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,26 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n-    }\n-\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if (node.isName()) {\n     return true;\n   }\n+  Preconditions.checkArgument(node.isGetProp());\n+\n+  LinkedList<Node> queue = new LinkedList<Node>();\n+  queue.add(node.getFirstChild());\n+\n+  while (!queue.isEmpty()) {\n+     Node temp = queue.poll();\n+     if (temp.isName() && isNameAssignedTo(temp.getString(), replacement)) {\n+       return false;\n+     } else if (temp.isGetProp()) {\n+       queue.add(temp.getFirstChild());\n+     }\n+  }\n+\n+  return true;\n+}\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +246,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}