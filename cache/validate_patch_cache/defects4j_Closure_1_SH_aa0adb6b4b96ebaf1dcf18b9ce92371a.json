{
    "patch": "    ControlFlowGraph<Node> cfg = (new ControlFlowAnalysis(compiler, false, false))\n        .getCfg(fnScope.getRootNode());\n    setWellKnownVars(fnScope, referenced);\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (lastArg.isDefaultValue() || lastArg.isRest() || lastArg.isDestructuringLhs()) {\n          NodeUtil.markFunctionsDeleted(lastArg, compiler);\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          continue;\n        }\n\n        Var var = fnScope.getVar(lastArg.getString());\n        // detect unreferenced non-this parameters only\n        if (var != null && !referenced.contains(var) && !var.getName().equals(\"this\")) {\n          boolean sideEffect = false;\n          FindSideEffectCalls visits = null;\n          if (compiler.getClasses() != null) {\n            visits = callAnalyzer.findSideEffectCalls(lastArg);\n          }\n          if (visits != null) {\n            sideEffect = visits.getHasSideEffect()\n                && !callSiteOptimizer.canModifyCallSites(lastArg, visits, argList);\n            if (sideEffect) {\n              if (visits.getFunctionCalls().size() > 1) {\n                sideEffect = false;\n              } else {\n                Node call = visits.getFunctionCalls().get(0);\n                Preconditions.checkState(call.isCall(), call);\n                boolean isFunctionExpressionCall =\n                    NodeUtil.isFunctionExpression(call.getFirstChild());\n                boolean isSimpleCall = !isFunctionExpressionCall && call.getChildCount() == 2;\n                if (isSimpleCall && call.getLastChild().isString()) {\n                  String callName = call.getLastChild().getString();\n                  sideEffect = !uglify ||\n                      !compiler.getSymbols().getDeclaredVariables().containsKey(callName) ||\n                      compiler.getCurrentScriptOrFn().equals(\n                          compiler.getSymbols().getDeclaredVariables().get(callName).inputName);\n                } else if (isFunctionExpressionCall) {\n                  Node assignedValue = NodeUtil.getRValueOfLValue(var.getInitialValue());\n                  sideEffect = !callSiteOptimizer.canOptimizeCall(\n                      fnScope.getRootNode(), referenceMap, assignedValue.getQualifier());\n                }\n              }\n              if (!sideEffect) {\n                NodeUtil.markFunctionsDeleted(lastArg, compiler);\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n              }\n            }\n          }\n          if (!sideEffect) {\n            maybeMarkReferenced(lastArg, var.isGlobal(), scope);\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9161a0ee 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,82 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    ControlFlowGraph<Node> cfg = (new ControlFlowAnalysis(compiler, false, false))\n+        .getCfg(fnScope.getRootNode());\n+    setWellKnownVars(fnScope, referenced);\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (lastArg.isDefaultValue() || lastArg.isRest() || lastArg.isDestructuringLhs()) {\n+          NodeUtil.markFunctionsDeleted(lastArg, compiler);\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          continue;\n+        }\n+\n+        Var var = fnScope.getVar(lastArg.getString());\n+        // detect unreferenced non-this parameters only\n+        if (var != null && !referenced.contains(var) && !var.getName().equals(\"this\")) {\n+          boolean sideEffect = false;\n+          FindSideEffectCalls visits = null;\n+          if (compiler.getClasses() != null) {\n+            visits = callAnalyzer.findSideEffectCalls(lastArg);\n+          }\n+          if (visits != null) {\n+            sideEffect = visits.getHasSideEffect()\n+                && !callSiteOptimizer.canModifyCallSites(lastArg, visits, argList);\n+            if (sideEffect) {\n+              if (visits.getFunctionCalls().size() > 1) {\n+                sideEffect = false;\n+              } else {\n+                Node call = visits.getFunctionCalls().get(0);\n+                Preconditions.checkState(call.isCall(), call);\n+                boolean isFunctionExpressionCall =\n+                    NodeUtil.isFunctionExpression(call.getFirstChild());\n+                boolean isSimpleCall = !isFunctionExpressionCall && call.getChildCount() == 2;\n+                if (isSimpleCall && call.getLastChild().isString()) {\n+                  String callName = call.getLastChild().getString();\n+                  sideEffect = !uglify ||\n+                      !compiler.getSymbols().getDeclaredVariables().containsKey(callName) ||\n+                      compiler.getCurrentScriptOrFn().equals(\n+                          compiler.getSymbols().getDeclaredVariables().get(callName).inputName);\n+                } else if (isFunctionExpressionCall) {\n+                  Node assignedValue = NodeUtil.getRValueOfLValue(var.getInitialValue());\n+                  sideEffect = !callSiteOptimizer.canOptimizeCall(\n+                      fnScope.getRootNode(), referenceMap, assignedValue.getQualifier());\n+                }\n+              }\n+              if (!sideEffect) {\n+                NodeUtil.markFunctionsDeleted(lastArg, compiler);\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+              }\n+            }\n+          }\n+          if (!sideEffect) {\n+            maybeMarkReferenced(lastArg, var.isGlobal(), scope);\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: method getCfg in class ControlFlowAnalysis cannot be applied to given types;",
    "test_result": "ERROR"
}