{
    "patch": "    // isEmptyType should only return true if the type is explicitly 'empty', not just unresolved\n    if (isNoType() || isNoResolvedType()) {\n        return true;\n    } else if (isNullType() || isArrayType() || isVoidType() || isEnumType()) {\n        return true;\n    } else if (isUnionType() || isUnknownType()) {\n        return true;\n    } else if (isNoObjectType()) {\n        return true;\n    } else {\n        return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..6258ed37 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -160,7 +160,18 @@ public abstract class JSType implements Serializable {\n   }\n \n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+    // isEmptyType should only return true if the type is explicitly 'empty', not just unresolved\n+    if (isNoType() || isNoResolvedType()) {\n+        return true;\n+    } else if (isNullType() || isArrayType() || isVoidType() || isEnumType()) {\n+        return true;\n+    } else if (isUnionType() || isUnknownType()) {\n+        return true;\n+    } else if (isNoObjectType()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "junit.framework.ComparisonFailure: expected:</**",
    "test_result": "FAIL"
}