{
    "patch": "          } else if (maybeInit.isFunctionExpression()) {\n            return maybeInit;\n          }\n        }\n      }\n      return null;\n    }\n\n    /**\n     * @return The reference that provides the value for the variable at the\n     * time of the first read, if known, otherwise null.\n     *\n     * This is either the variable declaration (\"var a = ...\") or first\n     * reference following the declaration if it is an assignment or function.\n     */\n    Reference getInitializingReference() {\n      if (isInitializingDeclarationAt(0)) {\n        return references.get(0);\n      } else if (isInitializingAssignmentAt(1)) {\n        return references.get(1);\n      } else if (isInitializingFunctionAt(1)) {\n        return references.get(1);\n      }\n      return null;\n    }\n\n    /**\n     * Constants are allowed to be defined after their first use.\n     */\n    Reference getInitializingReferenceForConstants() {\n      int size = references.size();\n      for (int i = 0; i < size; i++) {\n        if (isInitializingDeclarationAt(i)\n            || isInitializingAssignmentAt(i)\n            || isInitializingFunctionAt(i)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7817af17 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,41 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          } else if (maybeInit.isFunctionExpression()) {\n+            return maybeInit;\n+          }\n+        }\n+      }\n+      return null;\n+    }\n+\n+    /**\n+     * @return The reference that provides the value for the variable at the\n+     * time of the first read, if known, otherwise null.\n+     *\n+     * This is either the variable declaration (\"var a = ...\") or first\n+     * reference following the declaration if it is an assignment or function.\n+     */\n+    Reference getInitializingReference() {\n+      if (isInitializingDeclarationAt(0)) {\n+        return references.get(0);\n+      } else if (isInitializingAssignmentAt(1)) {\n+        return references.get(1);\n+      } else if (isInitializingFunctionAt(1)) {\n+        return references.get(1);\n+      }\n+      return null;\n+    }\n+\n+    /**\n+     * Constants are allowed to be defined after their first use.\n+     */\n+    Reference getInitializingReferenceForConstants() {\n+      int size = references.size();\n+      for (int i = 0; i < size; i++) {\n+        if (isInitializingDeclarationAt(i)\n+            || isInitializingAssignmentAt(i)\n+            || isInitializingFunctionAt(i)) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}