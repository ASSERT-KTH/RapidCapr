{
    "patch": "import org.mockito.internal.matchers.CapturesArguments;\n\npublic void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (Matcher<?> matcher : matchers) {\n                if (matcher instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n                    Object vararg = Array.get(invocation.getRawArguments(), indexOfVararg);\n                    if (vararg instanceof Object[]) {\n                        for (Object arg : (Object[]) vararg) {\n                            ((CapturesArguments) matcher).captureFrom(arg);\n                        }\n                    } else {\n                        ((CapturesArguments) matcher).captureFrom(vararg);\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher<?> m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..6df9e2881 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,32 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+import org.mockito.internal.matchers.CapturesArguments;\n+\n+public void captureArgumentsFrom(Invocation invocation) {\n+        if (invocation.getMethod().isVarArgs()) {\n+            int indexOfVararg = invocation.getRawArguments().length - 1;\n+            for (Matcher<?> matcher : matchers) {\n+                if (matcher instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n+                    Object vararg = Array.get(invocation.getRawArguments(), indexOfVararg);\n+                    if (vararg instanceof Object[]) {\n+                        for (Object arg : (Object[]) vararg) {\n+                            ((CapturesArguments) matcher).captureFrom(arg);\n+                        }\n+                    } else {\n+                        ((CapturesArguments) matcher).captureFrom(vararg);\n+                    }\n+                }\n+            }\n+        } else {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher<?> m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}