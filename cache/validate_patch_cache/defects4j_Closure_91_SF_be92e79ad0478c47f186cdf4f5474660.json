{
    "patch": "           jsDoc.isOverride() ||\n           jsDoc.hasThisType())) {\n        return false;\n      }\n\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.RETURN ||\n            pType == Token.ASSIGN) &&\n           // Functional interface syntax like this: `function f(/** string */ arg) => {}`\n          !(pType == Token.PARAM_LIST && isFunctionalInterface(n:\n              n))) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node valueNode = parent.getLastChild();\n      if (NodeUtil.isGet(parent) && NodeUtil.isGet(valueNode)) {\n        Node prototypeNode = valueNode.getLastChild();\n        if (prototypeNode != null &&\n            \"prototype\".equals(prototypeNode.getString())) {\n          return false;\n        }\n      }\n    } else if (n.getType() == Token.ASSIGN) {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(n.getFirstChild())) {\n        Node prototypeNode = n.getFirstChild().getLastChild();\n        if (prototypeNode != null &&\n            \"prototype\".equals(prototypeNode.getString())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isFunctionalInterface(Node n) {\n    Preconditions.checkArgument(n.getType() == Token.FUNCTION);\n\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null && jsDoc.isFunctionalInterface()) {\n      return true;\n    }\n\n    Node returnNode = NodeUtil.getFunctionBody(n).getFirstChild();\n    return (returnNode != null && returnNode.getType() == Token.NAME);\n  }\n\n  private JSDocInfo getFunctionJsDocInfo(Node n) {\n    return NodeUtil.getBestJSDocInfo(n.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4915ba3a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,65 +79,40 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+           jsDoc.isOverride() ||\n+           jsDoc.hasThisType())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+            pType == Token.RETURN ||\n+            pType == Token.ASSIGN) &&\n+           // Functional interface syntax like this: `function f(/** string */ arg) => {}`\n+          !(pType == Token.PARAM_LIST && isFunctionalInterface(n:\n+              n))) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      Node valueNode = parent.getLastChild();\n+      if (NodeUtil.isGet(parent) && NodeUtil.isGet(valueNode)) {\n+        Node prototypeNode = valueNode.getLastChild();\n+        if (prototypeNode != null &&\n+            \"prototype\".equals(prototypeNode.getString())) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+      }\n+    } else if (n.getType() == Token.ASSIGN) {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(n.getFirstChild())) {\n+        Node prototypeNode = n.getFirstChild().getLastChild();\n+        if (prototypeNode != null &&\n+            \"prototype\".equals(prototypeNode.getString())) {\n+          return false;\n         }\n       }\n     }\n@@ -145,6 +120,21 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  private boolean isFunctionalInterface(Node n) {\n+    Preconditions.checkArgument(n.getType() == Token.FUNCTION);\n+\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null && jsDoc.isFunctionalInterface()) {\n+      return true;\n+    }\n+\n+    Node returnNode = NodeUtil.getFunctionBody(n).getFirstChild();\n+    return (returnNode != null && returnNode.getType() == Token.NAME);\n+  }\n+\n+  private JSDocInfo getFunctionJsDocInfo(Node n) {\n+    return NodeUtil.getBestJSDocInfo(n.getParent());\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}