{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow == null) {\n            coefficients[i] = 0.0;\n            continue;\n        }\n        // if multiple variables can take a given value then we choose only one\n        double val = getEntry(basicRow, getRhsOffset());\n        int index = -1;\n        for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n            if (tableau.getEntry(basicRow, j) > 0) {\n                if (index == -1 || proposed.get(j) < proposed.get(index)) {\n                    index = j;\n                }\n            }\n        }\n        if (index == -1 || proposed.get(index) != val) {\n            // We didn't find a basic feasible solution\n            if (tableau.getEntry(basicRow, tableau.getNumVariables() - 1) != -1) {\n                // The problem is infeasible. Return any solution.\n                Arrays.fill(coefficients, 0, coefficients.length, Double.NaN);\n                return new RealPointValuePair(coefficients, Double.NaN, false);\n            }\n            // The problem is unbounded.\n            Arrays.fill(coefficients, 0, coefficients.length, Double.POSITIVE_INFINITY);\n            return new RealPointValuePair(coefficients, Double.POSITIVE_INFINITY);\n        }\n        coefficients[i] = val;\n        proposed.put(index, val);\n        for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n            if (tableau.getEntry(basicRow, j) > 0) {\n                coefficients[i] -= coefficients[j - getNumObjectiveFunctions()] * tableau.getEntry(basicRow, j);\n            }\n        }\n    }\n    if (!restrictToNonNegative) {\n        for (int i = 0; i < coefficients.length; i++) {\n            coefficients[i] -= mostNegative;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..0074a4036 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,52 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+    for (int i = 0; i < coefficients.length; i++) {\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+        if (basicRow == null) {\n+            coefficients[i] = 0.0;\n+            continue;\n+        }\n+        // if multiple variables can take a given value then we choose only one\n+        double val = getEntry(basicRow, getRhsOffset());\n+        int index = -1;\n+        for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+            if (tableau.getEntry(basicRow, j) > 0) {\n+                if (index == -1 || proposed.get(j) < proposed.get(index)) {\n+                    index = j;\n                 }\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        if (index == -1 || proposed.get(index) != val) {\n+            // We didn't find a basic feasible solution\n+            if (tableau.getEntry(basicRow, tableau.getNumVariables() - 1) != -1) {\n+                // The problem is infeasible. Return any solution.\n+                Arrays.fill(coefficients, 0, coefficients.length, Double.NaN);\n+                return new RealPointValuePair(coefficients, Double.NaN, false);\n+            }\n+            // The problem is unbounded.\n+            Arrays.fill(coefficients, 0, coefficients.length, Double.POSITIVE_INFINITY);\n+            return new RealPointValuePair(coefficients, Double.POSITIVE_INFINITY);\n+        }\n+        coefficients[i] = val;\n+        proposed.put(index, val);\n+        for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+            if (tableau.getEntry(basicRow, j) > 0) {\n+                coefficients[i] -= coefficients[j - getNumObjectiveFunctions()] * tableau.getEntry(basicRow, j);\n+            }\n+        }\n     }\n+    if (!restrictToNonNegative) {\n+        for (int i = 0; i < coefficients.length; i++) {\n+            coefficients[i] -= mostNegative;\n+        }\n+    }\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}