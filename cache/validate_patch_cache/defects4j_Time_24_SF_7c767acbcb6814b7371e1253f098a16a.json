{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    Arrays.sort(savedFields, 0, count);\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n    if (count > 0 && compareReverse(savedFields[0].iField.getDurationField(), months) >= 0 &&\n            compareReverse(savedFields[0].iField.getDurationField(), days) <= 0) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    }\n    long millis = iMillis;\n    boolean changesMade = false;\n    IllegalFieldValueException illegalFieldValueException = null;\n    for (int i = 0; i < count && !changesMade; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n            changesMade = true;\n        } catch (IllegalFieldValueException e) {\n            illegalFieldValueException = e;\n        }\n    }\n    if (!changesMade && illegalFieldValueException != null) {\n        if (text != null) {\n            illegalFieldValueException.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n        }\n        throw illegalFieldValueException;\n    }\n    if (changesMade) {\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        return millis;\n    }\n    if (count == 0) {\n        if (text != null && text.length() > 0) {\n            char c = text.charAt(0);\n            if (c == '-' || c == '+') {\n                return parseMillis(text);\n            }\n        }\n    }\n    if (text != null) {\n        illegalFieldValueException = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\"\", text);\n    } else {\n        illegalFieldValueException = new IllegalFieldValueException(\"Illegal instant due to incompatible fields\", Long.valueOf(iMillis), null);\n    }\n    throw illegalFieldValueException;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7deb1c19 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,69 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n-\n-        long millis = iMillis;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    Arrays.sort(savedFields, 0, count);\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+    if (count > 0 && compareReverse(savedFields[0].iField.getDurationField(), months) >= 0 &&\n+            compareReverse(savedFields[0].iField.getDurationField(), days) <= 0) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    }\n+    long millis = iMillis;\n+    boolean changesMade = false;\n+    IllegalFieldValueException illegalFieldValueException = null;\n+    for (int i = 0; i < count && !changesMade; i++) {\n         try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n+            millis = savedFields[i].set(millis, resetFields);\n+            changesMade = true;\n         } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+            illegalFieldValueException = e;\n         }\n-        \n+    }\n+    if (!changesMade && illegalFieldValueException != null) {\n+        if (text != null) {\n+            illegalFieldValueException.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+        }\n+        throw illegalFieldValueException;\n+    }\n+    if (changesMade) {\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n         return millis;\n     }\n+    if (count == 0) {\n+        if (text != null && text.length() > 0) {\n+            char c = text.charAt(0);\n+            if (c == '-' || c == '+') {\n+                return parseMillis(text);\n+            }\n+        }\n+    }\n+    if (text != null) {\n+        illegalFieldValueException = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\"\", text);\n+    } else {\n+        illegalFieldValueException = new IllegalFieldValueException(\"Illegal instant due to incompatible fields\", Long.valueOf(iMillis), null);\n+    }\n+    throw illegalFieldValueException;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}