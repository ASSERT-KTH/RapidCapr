{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else if (constructorType.isObjectType() || constructorType.isEnumType()) {\n        // Handle object types and enum types.\n        // We extract the constructor function and create an instance type.\n        ObjectType objType = constructorType.toObjectType();\n        FunctionType ctorFn = objType.getConstructor();\n        if (ctorFn != null && ctorFn.isConstructor()) {\n          type = ctorFn.getInstanceType();\n        } else {\n          type = getNativeType(UNKNOWN_TYPE);\n        }\n      } else if (constructorType.isFunctionType()) {\n        // Handle function types.\n        FunctionType fnType = constructorType.toMaybeFunctionType();\n        if (fnType != null && fnType.isConstructor()) {\n          type = fnType.getInstanceType();\n        } else {\n          type = getNativeType(UNKNOWN_TYPE);\n        }\n      }\n    } else {\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..b5a45890 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,8 +1032,7 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1042,18 +1041,27 @@ class TypeInference\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+      } else if (constructorType.isObjectType() || constructorType.isEnumType()) {\n+        // Handle object types and enum types.\n+        // We extract the constructor function and create an instance type.\n+        ObjectType objType = constructorType.toObjectType();\n+        FunctionType ctorFn = objType.getConstructor();\n+        if (ctorFn != null && ctorFn.isConstructor()) {\n+          type = ctorFn.getInstanceType();\n+        } else {\n+          type = getNativeType(UNKNOWN_TYPE);\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+      } else if (constructorType.isFunctionType()) {\n+        // Handle function types.\n+        FunctionType fnType = constructorType.toMaybeFunctionType();\n+        if (fnType != null && fnType.isConstructor()) {\n+          type = fnType.getInstanceType();\n+        } else {\n+          type = getNativeType(UNKNOWN_TYPE);\n         }\n       }\n+    } else {\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}