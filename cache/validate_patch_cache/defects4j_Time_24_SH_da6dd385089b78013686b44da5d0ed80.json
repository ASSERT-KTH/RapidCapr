{
    "patch": "            try {\n                boolean set;\n                do {\n                    set = false;\n                    for (int i = 0; i < k; i++) {\n                        final DateTimeField field = fields[i];\n                        int value = field.get(instant);\n                        final DateTimeField rangeField = ranges[i];\n                        if (i == 0 && rangeField.getDurationField().getType() == DurationFieldType.weekyears()) {\n                            // In lenient mode, make year a multiple of 4 if necessary\n                            if (isLenient() && DateTimeUtils.isContiguous(future[i])) {\n                                int weekyear = future[i];\n                                int year = GJWeekyearChronology.getInstanceUTC().year().get(0L, weekyear);\n                                setInputYear(future, i + 1, year);\n                                value = GJWeekyearChronology.getInstanceUTC().weekOfWeekyear().get(weekyear);\n                            }\n                            field.set(instant, value); // safe after contiguity checked\n                        } else {\n                            final int max = getMaximumValue(instant, value);\n                            final int min = getMinimumValue(instant, value);\n                            if (future[i] < min) {\n                                future[i] = min;\n                                set = true;\n                            } else if (future[i] > max) {\n                                future[i] = max;\n                                set = true;\n                            }\n                        }\n                    }\n                } while (set);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a1a0827a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            try {\n+                boolean set;\n+                do {\n+                    set = false;\n+                    for (int i = 0; i < k; i++) {\n+                        final DateTimeField field = fields[i];\n+                        int value = field.get(instant);\n+                        final DateTimeField rangeField = ranges[i];\n+                        if (i == 0 && rangeField.getDurationField().getType() == DurationFieldType.weekyears()) {\n+                            // In lenient mode, make year a multiple of 4 if necessary\n+                            if (isLenient() && DateTimeUtils.isContiguous(future[i])) {\n+                                int weekyear = future[i];\n+                                int year = GJWeekyearChronology.getInstanceUTC().year().get(0L, weekyear);\n+                                setInputYear(future, i + 1, year);\n+                                value = GJWeekyearChronology.getInstanceUTC().weekOfWeekyear().get(weekyear);\n+                            }\n+                            field.set(instant, value); // safe after contiguity checked\n+                        } else {\n+                            final int max = getMaximumValue(instant, value);\n+                            final int min = getMinimumValue(instant, value);\n+                            if (future[i] < min) {\n+                                future[i] = min;\n+                                set = true;\n+                            } else if (future[i] > max) {\n+                                future[i] = max;\n+                                set = true;\n+                            }\n+                        }\n+                    }\n+                } while (set);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}