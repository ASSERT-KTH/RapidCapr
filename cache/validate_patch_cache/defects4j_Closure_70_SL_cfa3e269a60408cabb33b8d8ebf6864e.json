{
    "patch": "TypeExpression parameterType = null;\nif (jsDocParameter != null) {\n  JSTypeExpression expression = jsDocParameter.getJSTypeExpression();\n  if (expression != null) {\n    parameterType = new TypeExpressionProxy(expression);\n  }\n}\ndefineSlot(astParameter, functionNode, parameterType, true);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..bc4d0420 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,14 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+TypeExpression parameterType = null;\n+if (jsDocParameter != null) {\n+  JSTypeExpression expression = jsDocParameter.getJSTypeExpression();\n+  if (expression != null) {\n+    parameterType = new TypeExpressionProxy(expression);\n+  }\n+}\n+defineSlot(astParameter, functionNode, parameterType, true);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}