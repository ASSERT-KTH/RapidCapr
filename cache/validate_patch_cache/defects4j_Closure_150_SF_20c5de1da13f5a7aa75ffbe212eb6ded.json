{
    "patch": "@Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      int type = n.getType();\n      if (type == Token.SCRIPT) {\n        if (isFirstScript()) {\n          isFirstScript = false;\n          scope = new Scope(scope, n, null, null);\n          handleFunctionInputs(n);\n          return true;\n        }\n      }\n      else if (type == Token.CATCH) {\n        scope = new Scope(scope, null, n, null);\n        defineCatch(n, parent);\n        return true;\n      }\n      else if (!isScopeRoot(n)) {\n        return false;\n      }\n      else if (type == Token.FUNCTION && NodeUtil.isFunctionExpression(n)) {\n        handleFunctionInputs(n);\n      }\n\n      scope = new Scope(scope, null, null, n);\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c857795f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,31 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+@Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      int type = n.getType();\n+      if (type == Token.SCRIPT) {\n+        if (isFirstScript()) {\n+          isFirstScript = false;\n+          scope = new Scope(scope, n, null, null);\n+          handleFunctionInputs(n);\n+          return true;\n+        }\n       }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      else if (type == Token.CATCH) {\n+        scope = new Scope(scope, null, n, null);\n+        defineCatch(n, parent);\n+        return true;\n       }\n-    }\n+      else if (!isScopeRoot(n)) {\n+        return false;\n+      }\n+      else if (type == Token.FUNCTION && NodeUtil.isFunctionExpression(n)) {\n+        handleFunctionInputs(n);\n+      }\n+\n+      scope = new Scope(scope, null, null, n);\n+\n+      return true;\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}