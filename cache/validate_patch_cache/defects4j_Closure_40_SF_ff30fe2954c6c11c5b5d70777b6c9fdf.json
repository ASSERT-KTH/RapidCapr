{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    try {\n        if (!t.inGlobalScope()) {\n            if (n.isAssign()) {\n                Node nameNode = n.getFirstChild();\n                if (nameNode != null && NodeUtil.isGet(nameNode)) {\n                    NameInformation ns = createNameInformation(t, nameNode.getFirstChild(),\n                            nameNode);\n                    if (ns != null) {\n                        if (ns.isPrototype) {\n                            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n.getNext());\n                        } else {\n                            recordSet(ns.name, nameNode.getFirstChild());\n                        }\n                    }\n                }\n            } else if (n.isCall()) {\n                Node nameNode = n.getFirstChild();\n                if (nameNode != null) {\n                    NameInformation ns = createNameInformation(t, nameNode, n);\n                    if (ns != null && ns.onlyAffectsClassDef) {\n                        JsName name = getName(ns.name, false);\n                        if (name != null) {\n                            refNodes.add(new ClassDefiningFunctionNode(\n                                    name, n, parent, parent.getParent()));\n                        }\n                    }\n                }\n            }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n            Node nameNode = n.getFirstChild();\n            if (nameNode != null) {\n                NameInformation ns = createNameInformation(t, nameNode, n);\n                if (ns != null) {\n                    JsName nameInfo = getName(nameNode.getString(), true);\n                    if (nameInfo != null) {\n                        recordSet(nameInfo.name, nameNode);\n                    }\n                }\n            }\n        } else if (NodeUtil.isVarDeclaration(n)) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            if (ns != null) {\n                recordSet(ns.name, n);\n            }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            if (ns != null) {\n                recordSet(ns.name, n);\n            }\n        }\n    } catch (Exception e) {\n        // Handle any unexpected errors gracefully.\n        System.err.println(\"Internal error: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..345bad9b 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,63 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    try {\n+        if (!t.inGlobalScope()) {\n+            if (n.isAssign()) {\n+                Node nameNode = n.getFirstChild();\n+                if (nameNode != null && NodeUtil.isGet(nameNode)) {\n+                    NameInformation ns = createNameInformation(t, nameNode.getFirstChild(),\n+                            nameNode);\n+                    if (ns != null) {\n+                        if (ns.isPrototype) {\n+                            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n.getNext());\n+                        } else {\n+                            recordSet(ns.name, nameNode.getFirstChild());\n+                        }\n+                    }\n+                }\n+            } else if (n.isCall()) {\n+                Node nameNode = n.getFirstChild();\n+                if (nameNode != null) {\n+                    NameInformation ns = createNameInformation(t, nameNode, n);\n+                    if (ns != null && ns.onlyAffectsClassDef) {\n+                        JsName name = getName(ns.name, false);\n+                        if (name != null) {\n+                            refNodes.add(new ClassDefiningFunctionNode(\n+                                    name, n, parent, parent.getParent()));\n+                        }\n+                    }\n+                }\n+            }\n         } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n+            Node nameNode = n.getFirstChild();\n+            if (nameNode != null) {\n+                NameInformation ns = createNameInformation(t, nameNode, n);\n+                if (ns != null) {\n+                    JsName nameInfo = getName(nameNode.getString(), true);\n+                    if (nameInfo != null) {\n+                        recordSet(nameInfo.name, nameNode);\n+                    }\n+                }\n+            }\n+        } else if (NodeUtil.isVarDeclaration(n)) {\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            if (ns != null) {\n+                recordSet(ns.name, n);\n+            }\n         } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n-      }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+            NameInformation ns = createNameInformation(t, n, parent);\n+            if (ns != null) {\n+                recordSet(ns.name, n);\n+            }\n         }\n-      }\n+    } catch (Exception e) {\n+        // Handle any unexpected errors gracefully.\n+        System.err.println(\"Internal error: \" + e.getMessage());\n+        e.printStackTrace();\n     }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}