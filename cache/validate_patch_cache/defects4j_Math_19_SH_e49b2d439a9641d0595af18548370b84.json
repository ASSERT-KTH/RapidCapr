{
    "patch": "                for (int i = 0; i < init.length; i++) {\n                    final double diffLB = init[i] - boundaries[0][i];\n                    if (diffLB < Double.MIN_NORMAL) {\n                        throw new NumberIsTooSmallException(diffLB, Double.MIN_NORMAL, true);\n                    }\n                    final double diffUB = boundaries[1][i] - init[i];\n                    if (diffUB < Double.MIN_NORMAL) {\n                        throw new NumberIsTooSmallException(diffUB, Double.MIN_NORMAL, true);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..696f063a8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,14 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < init.length; i++) {\n+                    final double diffLB = init[i] - boundaries[0][i];\n+                    if (diffLB < Double.MIN_NORMAL) {\n+                        throw new NumberIsTooSmallException(diffLB, Double.MIN_NORMAL, true);\n+                    }\n+                    final double diffUB = boundaries[1][i] - init[i];\n+                    if (diffUB < Double.MIN_NORMAL) {\n+                        throw new NumberIsTooSmallException(diffUB, Double.MIN_NORMAL, true);\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}