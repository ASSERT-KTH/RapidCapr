{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    int numArgs = argList.getChildCount();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node curArg = argList.getFirstChild();\n      for (int i = 0; i < numArgs; i++) {\n        Node arg = curArg;\n        curArg = curArg.getNext();\n\n        Var var = fnScope.getVar(arg.getString());\n        if (var == null || !referenced.contains(var)) {\n          arg.detach();\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..22a09671 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -386,18 +386,19 @@ class RemoveUnusedVars\n     }\n \n     Node argList = getFunctionArgList(function);\n+    int numArgs = argList.getChildCount();\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+      Node curArg = argList.getFirstChild();\n+      for (int i = 0; i < numArgs; i++) {\n+        Node arg = curArg;\n+        curArg = curArg.getNext();\n+\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var == null || !referenced.contains(var)) {\n+          arg.detach();\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n         }\n       }\n     } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}