{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n\n    int paramCount = 0;\n    for (Node param : argList.children()) {\n      if (!referenced.contains(fnScope.getVar(param.getString()))) {\n        // Mark the unreferenced arguments with an unique sentinel value,\n        // so that we can remove them in the next step, which can be part\n        // of another traversal of the AST (if calling with --inline or --collapse)\n        // and running through all functions inlining all function calls\n        // in the call graph.\n        param.setString(Compiler.REMOVE_PARAM_MARKER + paramCount++ + \"_\");\n        compiler.reportCodeChange();\n      }\n    }\n    if (paramCount == 0) {\n      return;\n    }\n\n    // Step 2: Remove the unreferenced parameters that were marked during\n    // traversal of the call graph. Build a new argument list with\n    // the remaining arguments.\n    Node newArgList = new Node(Token.LP);\n    boolean isFirst = true;\n    for (Node param : argList.children()) {\n      if (!param.hasProp(Node.REMOVE_PARAM_MARKER)) {\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          newArgList.addChildToBack(new Node(Token.COMMA));\n        }\n        newArgList.addChildToBack(param.cloneNode());\n      }\n    }\n    argList.replaceWith(newArgList);\n    compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6cb362b1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+\n+    int paramCount = 0;\n+    for (Node param : argList.children()) {\n+      if (!referenced.contains(fnScope.getVar(param.getString()))) {\n+        // Mark the unreferenced arguments with an unique sentinel value,\n+        // so that we can remove them in the next step, which can be part\n+        // of another traversal of the AST (if calling with --inline or --collapse)\n+        // and running through all functions inlining all function calls\n+        // in the call graph.\n+        param.setString(Compiler.REMOVE_PARAM_MARKER + paramCount++ + \"_\");\n+        compiler.reportCodeChange();\n+      }\n+    }\n+    if (paramCount == 0) {\n+      return;\n+    }\n+\n+    // Step 2: Remove the unreferenced parameters that were marked during\n+    // traversal of the call graph. Build a new argument list with\n+    // the remaining arguments.\n+    Node newArgList = new Node(Token.LP);\n+    boolean isFirst = true;\n+    for (Node param : argList.children()) {\n+      if (!param.hasProp(Node.REMOVE_PARAM_MARKER)) {\n+        if (isFirst) {\n+          isFirst = false;\n+        } else {\n+          newArgList.addChildToBack(new Node(Token.COMMA));\n+        }\n+        newArgList.addChildToBack(param.cloneNode());\n+      }\n+    }\n+    argList.replaceWith(newArgList);\n+    compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}