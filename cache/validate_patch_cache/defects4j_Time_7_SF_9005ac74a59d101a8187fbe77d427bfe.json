{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n\n        int defaultYear = chrono.year().get(instantLocal);\n        int defaultMonth = chrono.monthOfYear().get(instantLocal);\n        int defaultDay = chrono.dayOfMonth().get(instantLocal);\n\n        long instantLocalWithoutTime = instantMillis + chrono.getZone().getOffset(0);\n        DateTimeField leapYearField = chrono.dayOfYear();\n        int leapYear = leapYearField.getMaximumValue(instantLocalWithoutTime) + 1;\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocalWithoutTime, chrono, iLocale, iPivotYear, defaultYear);\n        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos < 0) {\n            instant.setMillis(instantLocalWithoutTime);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            } else if (!iOffsetParsed) {\n                instant.setZone(chrono.getZone());\n            }\n            return newPos;\n        }\n\n        int year = bucket.computeLocalYear(defaultYear);\n        int month = bucket.computeLocalMonth(defaultMonth);\n        int day = bucket.computeLocalDayOfMonth(defaultDay);\n\n        if (iResolveTwoDigitsYear) {\n            // Use supplied century and assume it includes the year.\n            year = bucket.getTwoDigitYear(year);\n        }\n\n        if (bucket.getPivotYear() != null) {\n            year = bucket.getPivotYear().intValue() + year - defaultYear;\n        }\n\n        if (iParseWithOffset != null) {\n            // this is a kludge to avoid duplicating the code from parseLocalState\n            bucket.saveField(DateTimeFieldType.year(), year);\n            bucket.saveField(DateTimeFieldType.monthOfYear(), month);\n            bucket.saveField(DateTimeFieldType.dayOfMonth(), day);\n\n            iParseWithOffset.parseInto(bucket, text.substring(position));\n\n            bucket.restoreField(DateTimeFieldType.year());\n            bucket.restoreField(DateTimeFieldType.monthOfYear());\n            bucket.restoreField(DateTimeFieldType.dayOfMonth());\n        }\n\n        try {\n            long instantAfter = computeMillis(instantLocalWithoutTime, bucket.computeOffset(true), year, month, day);\n\n            instant.setMillis(instantAfter);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            } else if (!iOffsetParsed) {\n                instant.setZone(chrono.getZone());\n            }\n        } catch (IllegalArgumentException e) {\n            newPos = ~newPos;\n            instant.setMillis(instantLocalWithoutTime);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            } else if (!iOffsetParsed) {\n                instant.setZone(chrono.getZone());\n            }\n        }\n\n        return newPos;\n    }\n\n    private long computeMillis(long localMillis, int offset, int year, int monthOfYear, int dayOfMonth) {\n        Chronology chrono = getChronology().withUTC();\n        long instantMillis = localMillis + offset;\n        long resolved = chrono.year().set(0, year);\n        resolved = chrono.monthOfYear().set(resolved, monthOfYear);\n        resolved = chrono.dayOfMonth().set(resolved, dayOfMonth);\n        return resolved + instantMillis % DateTimeConstants.MILLIS_PER_DAY;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..68494c0e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,31 +702,92 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n+\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+        int defaultMonth = chrono.monthOfYear().get(instantLocal);\n+        int defaultDay = chrono.dayOfMonth().get(instantLocal);\n+\n+        long instantLocalWithoutTime = instantMillis + chrono.getZone().getOffset(0);\n+        DateTimeField leapYearField = chrono.dayOfYear();\n+        int leapYear = leapYearField.getMaximumValue(instantLocalWithoutTime) + 1;\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocalWithoutTime, chrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setOffset(iOffsetParsed ? 0 : instant.getZone().getOffset(instantMillis));\n+\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        if (newPos < 0) {\n+            instant.setMillis(instantLocalWithoutTime);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            } else if (!iOffsetParsed) {\n+                instant.setZone(chrono.getZone());\n+            }\n+            return newPos;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        int year = bucket.computeLocalYear(defaultYear);\n+        int month = bucket.computeLocalMonth(defaultMonth);\n+        int day = bucket.computeLocalDayOfMonth(defaultDay);\n+\n+        if (iResolveTwoDigitsYear) {\n+            // Use supplied century and assume it includes the year.\n+            year = bucket.getTwoDigitYear(year);\n+        }\n+\n+        if (bucket.getPivotYear() != null) {\n+            year = bucket.getPivotYear().intValue() + year - defaultYear;\n         }\n+\n+        if (iParseWithOffset != null) {\n+            // this is a kludge to avoid duplicating the code from parseLocalState\n+            bucket.saveField(DateTimeFieldType.year(), year);\n+            bucket.saveField(DateTimeFieldType.monthOfYear(), month);\n+            bucket.saveField(DateTimeFieldType.dayOfMonth(), day);\n+\n+            iParseWithOffset.parseInto(bucket, text.substring(position));\n+\n+            bucket.restoreField(DateTimeFieldType.year());\n+            bucket.restoreField(DateTimeFieldType.monthOfYear());\n+            bucket.restoreField(DateTimeFieldType.dayOfMonth());\n+        }\n+\n+        try {\n+            long instantAfter = computeMillis(instantLocalWithoutTime, bucket.computeOffset(true), year, month, day);\n+\n+            instant.setMillis(instantAfter);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            } else if (!iOffsetParsed) {\n+                instant.setZone(chrono.getZone());\n+            }\n+        } catch (IllegalArgumentException e) {\n+            newPos = ~newPos;\n+            instant.setMillis(instantLocalWithoutTime);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            } else if (!iOffsetParsed) {\n+                instant.setZone(chrono.getZone());\n+            }\n+        }\n+\n         return newPos;\n     }\n \n+    private long computeMillis(long localMillis, int offset, int year, int monthOfYear, int dayOfMonth) {\n+        Chronology chrono = getChronology().withUTC();\n+        long instantMillis = localMillis + offset;\n+        long resolved = chrono.year().set(0, year);\n+        resolved = chrono.monthOfYear().set(resolved, monthOfYear);\n+        resolved = chrono.dayOfMonth().set(resolved, dayOfMonth);\n+        return resolved + instantMillis % DateTimeConstants.MILLIS_PER_DAY;\n+    }\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}