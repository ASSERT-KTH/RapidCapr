{
    "patch": "\tif ((offsetLocal - offsetAdjusted) < 0) {\n\t\t// if we just return offsetAdjusted then the time is pushed\n\t\t// back before the transition, whereas it should be\n\t\t// on or after the transition\n\t\tlong nextLocal = nextTransition(instantAdjusted);\n\t\tlong nextAdjusted = nextTransition(instantLocal - offsetLocal);\n\t\tif (nextLocal != nextAdjusted) {\n\t\t\treturn offsetLocal;\n\t\t}\n\t}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9c384ed1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+\tif ((offsetLocal - offsetAdjusted) < 0) {\n+\t\t// if we just return offsetAdjusted then the time is pushed\n+\t\t// back before the transition, whereas it should be\n+\t\t// on or after the transition\n+\t\tlong nextLocal = nextTransition(instantAdjusted);\n+\t\tlong nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+\t\tif (nextLocal != nextAdjusted) {\n+\t\t\treturn offsetLocal;\n+\t\t}\n+\t}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}