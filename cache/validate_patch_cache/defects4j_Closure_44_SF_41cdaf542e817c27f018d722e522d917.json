{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX || edge.getValue() == Branch.ON_EX_TOUCHED) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.isEmpty()) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        !getLastChar().isEmpty() && isWordChar(getLastChar().charAt(0))) {\n      append(\" \");\n    }\n\n    append(newcode);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..62f2c9ad 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,24 +178,27 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX || edge.getValue() == Branch.ON_EX_TOUCHED) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+  \n   void add(String newcode) {\n     maybeEndStatement();\n \n-    if (newcode.length() == 0) {\n+    if (newcode.isEmpty()) {\n       return;\n     }\n \n     char c = newcode.charAt(0);\n     if ((isWordChar(c) || c == '\\\\') &&\n-        isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n-      // For example: \"return foo;\"\n+        !getLastChar().isEmpty() && isWordChar(getLastChar().charAt(0))) {\n       append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n     }\n \n     append(newcode);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}