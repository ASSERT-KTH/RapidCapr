{
    "patch": "    if (parent == null) {\n      return;\n    }\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() == Token.LP) {\n                handleFunctionInputs(parent);\n                return;\n            }\n            if (parent.getType() == Token.NAME) {\n                if (parent.getFirstChild() == n) {\n                    defineDeclaredFunction(n, parent);\n                }\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        default:\n            break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..3a3fc709 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,33 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    if (parent == null) {\n+      return;\n+    }\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent.getType() == Token.LP) {\n+                handleFunctionInputs(parent);\n+                return;\n+            }\n+            if (parent.getType() == Token.NAME) {\n+                if (parent.getFirstChild() == n) {\n+                    defineDeclaredFunction(n, parent);\n+                }\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        default:\n+            break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}