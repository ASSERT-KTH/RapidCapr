{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          return true;\n        }\n\n        boolean isLhsPrototype = NodeUtil.isGet(lhs)\n            && lhs.getType() == Token.GETPROP\n            && \"prototype\".equals(lhs.getLastChild().getString());\n        boolean isRhsFunctionExpression = NodeUtil.isFunctionExpression(rhs);\n        boolean isRhsObjectLiteralWithFunctionProperty = rhs.getType() == Token.OBJECTLIT\n            && NodeUtil.hasOneChildOfType(rhs, Token.STRING)\n            && NodeUtil.hasOneChildOfType(rhs, Token.FUNCTION);\n\n        if (isLhsPrototype && (isRhsFunctionExpression || isRhsObjectLiteralWithFunctionProperty)) {\n          // Traverse prototype property assignments only when the call site\n          // is actually assigning a function.\n          return true;\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2a1c4e9d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,36 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+          return true;\n+        }\n+\n+        boolean isLhsPrototype = NodeUtil.isGet(lhs)\n+            && lhs.getType() == Token.GETPROP\n+            && \"prototype\".equals(lhs.getLastChild().getString());\n+        boolean isRhsFunctionExpression = NodeUtil.isFunctionExpression(rhs);\n+        boolean isRhsObjectLiteralWithFunctionProperty = rhs.getType() == Token.OBJECTLIT\n+            && NodeUtil.hasOneChildOfType(rhs, Token.STRING)\n+            && NodeUtil.hasOneChildOfType(rhs, Token.FUNCTION);\n+\n+        if (isLhsPrototype && (isRhsFunctionExpression || isRhsObjectLiteralWithFunctionProperty)) {\n+          // Traverse prototype property assignments only when the call site\n+          // is actually assigning a function.\n+          return true;\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}