{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.LP:\n          if (parent != null && NodeUtil.isFunctionExpression(parent.getFirstChild())) {\n            defineDeclaredFunction(parent.getFirstChild(), parent);\n          } else if (parent != null && NodeUtil.isFunctionDeclaration(parent)) {\n            defineDeclaredFunction(parent, parent.getParent());\n          } else if (parent == null || NodeUtil.isFunctionDeclaration(parent)\n              || parent.isForIn() || parent.isFor() || parent.isVanillaFor()) {\n            handleFunctionInputs(n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e68907f0 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1456,12 +1456,24 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.LP:\n+          if (parent != null && NodeUtil.isFunctionExpression(parent.getFirstChild())) {\n+            defineDeclaredFunction(parent.getFirstChild(), parent);\n+          } else if (parent != null && NodeUtil.isFunctionDeclaration(parent)) {\n+            defineDeclaredFunction(parent, parent.getParent());\n+          } else if (parent == null || NodeUtil.isFunctionDeclaration(parent)\n+              || parent.isForIn() || parent.isFor() || parent.isVanillaFor()) {\n+            handleFunctionInputs(n);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}