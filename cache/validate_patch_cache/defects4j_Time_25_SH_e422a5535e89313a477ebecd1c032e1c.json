{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    long next = (offsetLocal > offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    long nextLocal = (offsetLocal > offsetAdjusted) ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == next) {\n        // if the next transition is the same in both zones, return the new (adjusted) offset\n        return offsetAdjusted;\n    }\n    if (offsetLocal > offsetAdjusted) {\n        // we are currently in a DST gap (time does not exist)\n        // return the offset of the previous transition\n        return getOffset(previousTransition(instantAdjusted));\n    } else {\n        // we are at the end of a DST interval (time exists twice)\n        // return the offset of the later transition\n        return getOffset(next);\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..83b43bdd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    long next = (offsetLocal > offsetAdjusted) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    long nextLocal = (offsetLocal > offsetAdjusted) ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == next) {\n+        // if the next transition is the same in both zones, return the new (adjusted) offset\n+        return offsetAdjusted;\n+    }\n+    if (offsetLocal > offsetAdjusted) {\n+        // we are currently in a DST gap (time does not exist)\n+        // return the offset of the previous transition\n+        return getOffset(previousTransition(instantAdjusted));\n+    } else {\n+        // we are at the end of a DST interval (time exists twice)\n+        // return the offset of the later transition\n+        return getOffset(next);\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}