{
    "patch": "    if (right.getDouble() < 0 || left.isArrayLit() && intIndex >= left.getChildCount()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    \n    Node elem = left;\n    if (!left.isArrayLit()) {\n      elem = left.getFirstChild();\n    }\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n    \n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    \n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else if (left.isArrayLit()) {\n      left.removeChild(elem);\n      Node exprResult = parent.isExprResult() ? parent : IR.exprResult(parent);\n      parent.replaceWith(exprResult);\n      Node block = IR.block(IR.returnNode(elem));\n      exprResult.replaceChild(parent, block);\n    } else {\n      left.removeChild(elem);\n    }\n    \n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..b425b4ba 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,40 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (right.getDouble() < 0 || left.isArrayLit() && intIndex >= left.getChildCount()) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+    \n+    Node elem = left;\n+    if (!left.isArrayLit()) {\n+      elem = left.getFirstChild();\n+    }\n+    for (int i = 0; elem != null && i < intIndex; i++) {\n+      elem = elem.getNext();\n+    }\n+    \n+    if (elem == null) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+    \n+    if (elem.getType() == Token.EMPTY) {\n+      elem = NodeUtil.newUndefinedNode(elem);\n+    } else if (left.isArrayLit()) {\n+      left.removeChild(elem);\n+      Node exprResult = parent.isExprResult() ? parent : IR.exprResult(parent);\n+      parent.replaceWith(exprResult);\n+      Node block = IR.block(IR.returnNode(elem));\n+      exprResult.replaceChild(parent, block);\n+    } else {\n+      left.removeChild(elem);\n+    }\n+    \n+    // Replace the entire GETELEM with the value\n+    n.getParent().replaceChild(n, elem);\n+    reportCodeChange();\n+    return elem;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}