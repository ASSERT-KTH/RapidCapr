{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codePoint = Character.codePointAt(input, pos);\n            if (codePoint > 0xFFFF) {\n                // This is a supplementary character\n                char[] chars = Character.toChars(codePoint);\n                String encoded = String.format(\"\\\\u%04X\\\\u%04X\", (int)chars[0], (int)chars[1]);\n                out.write(encoded);\n            } else {\n                out.write(StringEscapeUtils.escapeCsv(Character.toString(codePoint)));\n            }\n            pos += Character.charCount(codePoint);\n            continue;\n        }\n        // The translator has already taken care of the characters\n        pos += consumed;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..3f1f6601 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,34 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            int codePoint = Character.codePointAt(input, pos);\n+            if (codePoint > 0xFFFF) {\n+                // This is a supplementary character\n+                char[] chars = Character.toChars(codePoint);\n+                String encoded = String.format(\"\\\\u%04X\\\\u%04X\", (int)chars[0], (int)chars[1]);\n+                out.write(encoded);\n+            } else {\n+                out.write(StringEscapeUtils.escapeCsv(Character.toString(codePoint)));\n             }\n+            pos += Character.charCount(codePoint);\n+            continue;\n         }\n+        // The translator has already taken care of the characters\n+        pos += consumed;\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for toString(int)",
    "test_result": "ERROR"
}