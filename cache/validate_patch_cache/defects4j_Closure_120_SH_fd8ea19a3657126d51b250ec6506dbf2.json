{
    "patch": "      boolean isAssignedOnceInLifetime() {\n        Reference ref = getOneAndOnlyAssignment();\n        if (ref == null) {\n          return false;\n        }\n\n        // Make sure this assignment is not in a loop.\n        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            // Only consider an assignment within a function block as an initializing\n            // assignment if it is the first assignment or declaration of the\n            // variable's lifetime.\n            Reference initRef = getInitializingReferenceForConstants();\n            if (initRef == null) {\n              initRef = getInitializingReference();\n            }\n            if (initRef == null || initRef.getParent() == ref.getParent()) {\n              return true;\n            }\n            return false;\n          } else if (block.isLoop && block != ref.getBasicBlock()) {\n            // Assignment is in a loop, cannot be assigned only once.\n            return false;\n          }\n        }\n\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..04f74a24 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,34 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      boolean isAssignedOnceInLifetime() {\n+        Reference ref = getOneAndOnlyAssignment();\n+        if (ref == null) {\n+          return false;\n+        }\n+\n+        // Make sure this assignment is not in a loop.\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            // Only consider an assignment within a function block as an initializing\n+            // assignment if it is the first assignment or declaration of the\n+            // variable's lifetime.\n+            Reference initRef = getInitializingReferenceForConstants();\n+            if (initRef == null) {\n+              initRef = getInitializingReference();\n+            }\n+            if (initRef == null || initRef.getParent() == ref.getParent()) {\n+              return true;\n+            }\n+            return false;\n+          } else if (block.isLoop && block != ref.getBasicBlock()) {\n+            // Assignment is in a loop, cannot be assigned only once.\n+            return false;\n+          }\n+        }\n+\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}