{
    "patch": "      Node fnNameNode = NodeUtil.getFunctionNameNode(n);\n      if (fnNameNode != null) {\n        // Check if function is getting lent to a prototype.\n        Node maybeAssign = parent.getParent();\n        if (maybeAssign != null) {\n          Node lhs = maybeAssign.getFirstChild();\n          if (lhs != null && lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..45295b95 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = NodeUtil.getFunctionNameNode(n);\n+      if (fnNameNode != null) {\n+        // Check if function is getting lent to a prototype.\n+        Node maybeAssign = parent.getParent();\n+        if (maybeAssign != null) {\n+          Node lhs = maybeAssign.getFirstChild();\n+          if (lhs != null && lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}