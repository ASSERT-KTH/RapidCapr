{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    // Check if there's only one global set and no local set, and at least one\n    // aliasing get or non-global reference to name.\n    if (name.isSimpleSingleton() && name.getAliasingGets().size() > 0) {\n      // Get the set of references to name, excluding the solitary global set.\n      Set<Ref> refsToName = new HashSet<Ref>(name.getRefs());\n      refsToName.remove(name.getDeclaration());\n      // Inline aliases for each reference to name.\n      for (Ref ref : name.getAliasingGets()) {\n        refsToName.add(ref);\n      }\n      for (Ref ref : refsToName) {\n        if (ref.scope.isLocal() &&\n            inlineAliasIfPossible(ref, namespace)) {\n          name.removeRef(ref);\n          // Check if the current name has any aliases left after the\n          // local-alias-inlining above.\n          if ((name.type == Name.Type.OBJECTLIT ||\n              name.type == Name.Type.FUNCTION) &&\n              name.aliasingGets == 0 && name.props != null) {\n            // All of {@code name}'s children meet condition (a), so they can be\n            // added to the worklist.\n            workList.addAll(name.props);\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..b0d361c8 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,45 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    // Check if there's only one global set and no local set, and at least one\n+    // aliasing get or non-global reference to name.\n+    if (name.isSimpleSingleton() && name.getAliasingGets().size() > 0) {\n+      // Get the set of references to name, excluding the solitary global set.\n+      Set<Ref> refsToName = new HashSet<Ref>(name.getRefs());\n+      refsToName.remove(name.getDeclaration());\n+      // Inline aliases for each reference to name.\n+      for (Ref ref : name.getAliasingGets()) {\n+        refsToName.add(ref);\n       }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+      for (Ref ref : refsToName) {\n+        if (ref.scope.isLocal() &&\n+            inlineAliasIfPossible(ref, namespace)) {\n+          name.removeRef(ref);\n+          // Check if the current name has any aliases left after the\n+          // local-alias-inlining above.\n+          if ((name.type == Name.Type.OBJECTLIT ||\n+              name.type == Name.Type.FUNCTION) &&\n+              name.aliasingGets == 0 && name.props != null) {\n+            // All of {@code name}'s children meet condition (a), so they can be\n+            // added to the worklist.\n+            workList.addAll(name.props);\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}