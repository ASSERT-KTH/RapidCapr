{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        boolean xPositive = (x[xOffset] >= 0);\n        boolean yPositive = (y[yOffset] >= 0);\n        double[] atanResult = new double[getSize()];\n        \n        if (xPositive) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            \n            for (int i = 0; i < getSize(); ++i) {\n                atanResult[i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            \n            if (yPositive) {\n                divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n                atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n\n                double atan2 = FastMath.PI - 2 * tmp2[0];    // pi - 2 * atan(y / (r - x))\n               \n                for (int i = 0; i < getSize(); ++i) {\n                    if(i == 0) {\n                        atanResult[i] = atan2;\n                    } else {\n                        atanResult[i] = -2 * tmp2[i];   // pi - 2 * atan(y / (r - x))\n                    }\n                }\n                \n            } else {\n                negate(y, yOffset, tmp2, 0);\n                divide(tmp2, 0, tmp2, 0, tmp1, 0);\n                atan(tmp1, 0, tmp2, 0);\n                \n                double atan2 = -FastMath.PI + 2 * tmp2[0];    // -pi + 2 * atan(y / (r - x))\n               \n                for (int i = 0; i < getSize(); ++i) {\n                    if(i == 0) {\n                        atanResult[i] = atan2;\n                    } else {\n                        atanResult[i] = 2 * tmp2[i] - FastMath.PI;   // -pi + 2 * atan(y / (r - x))\n                    }\n                }\n            }\n        }\n\n        // copy the result to the output array\n        System.arraycopy(atanResult, 0, result, resultOffset, getSize());\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..446511218 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1391,30 +1391,60 @@ public class DSCompiler {\n         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n \n-        if (x[xOffset] >= 0) {\n+        boolean xPositive = (x[xOffset] >= 0);\n+        boolean yPositive = (y[yOffset] >= 0);\n+        double[] atanResult = new double[getSize()];\n+        \n+        if (xPositive) {\n \n             // compute atan2(y, x) = 2 atan(y / (r + x))\n             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+            \n+            for (int i = 0; i < getSize(); ++i) {\n+                atanResult[i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n             }\n \n         } else {\n \n             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            \n+            if (yPositive) {\n+                divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+                atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+\n+                double atan2 = FastMath.PI - 2 * tmp2[0];    // pi - 2 * atan(y / (r - x))\n+               \n+                for (int i = 0; i < getSize(); ++i) {\n+                    if(i == 0) {\n+                        atanResult[i] = atan2;\n+                    } else {\n+                        atanResult[i] = -2 * tmp2[i];   // pi - 2 * atan(y / (r - x))\n+                    }\n+                }\n+                \n+            } else {\n+                negate(y, yOffset, tmp2, 0);\n+                divide(tmp2, 0, tmp2, 0, tmp1, 0);\n+                atan(tmp1, 0, tmp2, 0);\n+                \n+                double atan2 = -FastMath.PI + 2 * tmp2[0];    // -pi + 2 * atan(y / (r - x))\n+               \n+                for (int i = 0; i < getSize(); ++i) {\n+                    if(i == 0) {\n+                        atanResult[i] = atan2;\n+                    } else {\n+                        atanResult[i] = 2 * tmp2[i] - FastMath.PI;   // -pi + 2 * atan(y / (r - x))\n+                    }\n+                }\n             }\n-\n         }\n \n+        // copy the result to the output array\n+        System.arraycopy(atanResult, 0, result, resultOffset, getSize());\n+\n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n \n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}