{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr) &&\n                !NodeUtil.isFunctionExpression(maybeExpr) &&\n                maybeExpr.getType() != Token.OBJECTLIT &&\n                maybeExpr.getType() != Token.FUNCTION &&\n                maybeExpr.getType() != Token.REGEXP) {\n            // Check if the parent node is an expression statement\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n                // Check if the grandparent node is a loop or a condition\n                Node grandparent = parent.getParent();\n                if (grandparent != null && (grandparent.getType() == Token.FOR ||\n                        grandparent.getType() == Token.WHILE ||\n                        grandparent.getType() == Token.DO ||\n                        grandparent.getType() == Token.IF)) {\n                    return false;\n                } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n                    Node grandChild = maybeExpr.getFirstChild();\n                    if (grandChild.getType() == Token.CALL) {\n                        Node target = grandChild.getFirstChild();\n                        if (target.getType() == Token.GETPROP) {\n                            // Check if call is used to invoke functions like apply and call\n                            if (isFunctionInvoked(target.getLastChild())) {\n                                return false;\n                            }\n                            Node maybeThis = target.getFirstChild();\n                            if (maybeThis.getType() == Token.THIS) {\n                                return false;\n                            }\n                        } else {\n                            Node obj = target.getFirstChild();\n                            if (obj.isQualifiedName() &&\n                                    obj.getQualifiedName().equals(\"Event\")) {\n                                return false;\n                            }\n                        }\n                    }\n                    return true;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate boolean isFunctionInvoked(Node n) {\n    return n != null &&\n           (n.getString().equals(\"apply\") || n.getString().equals(\"call\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..3dd7fd92 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,58 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (NodeUtil.isExpressionNode(maybeExpr) &&\n+                !NodeUtil.isFunctionExpression(maybeExpr) &&\n+                maybeExpr.getType() != Token.OBJECTLIT &&\n+                maybeExpr.getType() != Token.FUNCTION &&\n+                maybeExpr.getType() != Token.REGEXP) {\n+            // Check if the parent node is an expression statement\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+                // Check if the grandparent node is a loop or a condition\n+                Node grandparent = parent.getParent();\n+                if (grandparent != null && (grandparent.getType() == Token.FOR ||\n+                        grandparent.getType() == Token.WHILE ||\n+                        grandparent.getType() == Token.DO ||\n+                        grandparent.getType() == Token.IF)) {\n+                    return false;\n+                } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+                    Node grandChild = maybeExpr.getFirstChild();\n+                    if (grandChild.getType() == Token.CALL) {\n+                        Node target = grandChild.getFirstChild();\n+                        if (target.getType() == Token.GETPROP) {\n+                            // Check if call is used to invoke functions like apply and call\n+                            if (isFunctionInvoked(target.getLastChild())) {\n+                                return false;\n+                            }\n+                            Node maybeThis = target.getFirstChild();\n+                            if (maybeThis.getType() == Token.THIS) {\n+                                return false;\n+                            }\n+                        } else {\n+                            Node obj = target.getFirstChild();\n+                            if (obj.isQualifiedName() &&\n+                                    obj.getQualifiedName().equals(\"Event\")) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                }\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n+\n+private boolean isFunctionInvoked(Node n) {\n+    return n != null &&\n+           (n.getString().equals(\"apply\") || n.getString().equals(\"call\"));\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}