{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isFunctionExpression = false, isIIFE = false;\n      if (name == null || name.getIdentifier().isEmpty()) {\n        // Check if the function node was created by a function expression or a Function constructor\n        if (functionNode.getParent() != null) {\n          if (functionNode.getParent() instanceof FunctionCall) {\n            isFunctionExpression = true;\n          }\n          else if (functionNode.getParent() instanceof Assignment) {\n            AstNode left = ((Assignment) functionNode.getParent()).getLeft();\n            if (left instanceof Name && ((Name) left).getIdentifier().equals(\"Function\")) {\n              isFunctionExpression = true;\n            }\n          }\n          else if (functionNode.getParent() instanceof ExpressionStatement) {\n            isIIFE = true;\n          }\n        }\n      }\n\n      Node node = newNode(isFunctionExpression ? Token.FUNCTION_RESULT : Token.FUNCTION);\n      if (!isFunctionExpression) {\n        Node newName = transform(name);\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO: Check for IIFE, and use its start position charno\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp() + 1;\n        newName.setCharno(position2charno(lpColumn));\n        node.addChildToBack(newName);\n      }\n\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on. We know the paren has to appear on the same line as the function name\n      // if it's not an IIFE.\n      Name fnName = functionNode.getFunctionName();\n      if (!isIIFE && fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      lp.setCharno(position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n\n      return isFunctionExpression ? node.getFirstChild() : node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..138092da 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,63 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      boolean isFunctionExpression = false, isIIFE = false;\n+      if (name == null || name.getIdentifier().isEmpty()) {\n+        // Check if the function node was created by a function expression or a Function constructor\n+        if (functionNode.getParent() != null) {\n+          if (functionNode.getParent() instanceof FunctionCall) {\n+            isFunctionExpression = true;\n+          }\n+          else if (functionNode.getParent() instanceof Assignment) {\n+            AstNode left = ((Assignment) functionNode.getParent()).getLeft();\n+            if (left instanceof Name && ((Name) left).getIdentifier().equals(\"Function\")) {\n+              isFunctionExpression = true;\n+            }\n+          }\n+          else if (functionNode.getParent() instanceof ExpressionStatement) {\n+            isIIFE = true;\n+          }\n+        }\n+      }\n+\n+      Node node = newNode(isFunctionExpression ? Token.FUNCTION_RESULT : Token.FUNCTION);\n+      if (!isFunctionExpression) {\n+        Node newName = transform(name);\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+        // TODO: Check for IIFE, and use its start position charno\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp() + 1;\n+        newName.setCharno(position2charno(lpColumn));\n+        node.addChildToBack(newName);\n+      }\n+\n+      Node lp = newNode(Token.LP);\n+      // The left paren's complicated because it's not represented by an\n+      // AstNode, so there's nothing that has the actual line number that it\n+      // appeared on. We know the paren has to appear on the same line as the function name\n+      // if it's not an IIFE.\n+      Name fnName = functionNode.getFunctionName();\n+      if (!isIIFE && fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      lp.setCharno(position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+\n+      return isFunctionExpression ? node.getFirstChild() : node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}