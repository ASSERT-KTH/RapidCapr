{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;    \n    for (int i = 0; current != null && i <= intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n\n    if (elem == null || elem.isEmpty() && intIndex != 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    } else if (elem.isEmpty() && intIndex == 0) {\n      return NodeUtil.newUndefinedNode(elem);\n    }\n\n    left.removeChild(elem);\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..61169f4c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1447,26 +1447,23 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n+    Node elem = null;    \n+    for (int i = 0; current != null && i <= intIndex; i++) {\n         elem = current;\n-\n-      current = current.getNext();\n+        current = current.getNext();\n     }\n \n-    if (elem == null) {\n+    if (elem == null || elem.isEmpty() && intIndex != 0) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n+    } else if (elem.isEmpty() && intIndex == 0) {\n+      return NodeUtil.newUndefinedNode(elem);\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+    left.removeChild(elem);\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n   }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}