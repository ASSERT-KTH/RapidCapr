{
    "patch": "        // get an instant value from the partial\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        // add the value to the instant while adjusting for any illegal values\n        DurationField field = partial.getField(fieldIndex).getField(iChronology);\n        long value = field.add(instant, valueToAdd);\n        Partial original = new Partial(partial);\n\n        // adjust for any illegal values\n        while (!partial.isSupported(fieldIndex, value)) {\n            value = field.add(value, -1);\n        }\n\n        // if the instant value has changed, get a new set of values\n        if (value != instant) {\n            partial = iChronology.get(original, value);\n        }\n\n        // return the new set of values\n        int[] newValues = new int[partial.size()];\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            newValues[i] = partial.getValue(i);\n        }\n        return newValues;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a425c88c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+        // get an instant value from the partial\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+        // add the value to the instant while adjusting for any illegal values\n+        DurationField field = partial.getField(fieldIndex).getField(iChronology);\n+        long value = field.add(instant, valueToAdd);\n+        Partial original = new Partial(partial);\n+\n+        // adjust for any illegal values\n+        while (!partial.isSupported(fieldIndex, value)) {\n+            value = field.add(value, -1);\n         }\n-    }\n+\n+        // if the instant value has changed, get a new set of values\n+        if (value != instant) {\n+            partial = iChronology.get(original, value);\n+        }\n+\n+        // return the new set of values\n+        int[] newValues = new int[partial.size()];\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            newValues[i] = partial.getValue(i);\n+        }\n+        return newValues;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}