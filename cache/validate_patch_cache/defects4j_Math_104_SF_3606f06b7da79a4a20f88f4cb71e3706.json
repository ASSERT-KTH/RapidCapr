{
    "patch": "public static double regularizedGammaP(double a, double x, double accuracy) {\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x, accuracy);\n    }\n\n    double prod = 1.0 / a;\n    double sum = prod;\n    double term = prod;\n    while (Math.abs(term) > accuracy * Math.abs(sum)) {\n        prod *= x / (a + sum + 1.0);\n        term = prod;\n        sum += term;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n\n}\n\npublic static double regularizedGammaQ(double a, double x, double accuracy) {\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x, accuracy);\n    }\n\n    double w = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    double z = 1.0 / (x - a + 1.0);\n    double prod = z;\n    double sum = z;\n    double term = z;\n    int i = 1;\n    while (Math.abs(term) > accuracy * Math.abs(sum)) {\n        z = -(x - a + i) * z / i;\n        prod *= z;\n        term = prod / (i + 1);\n        sum += term;\n        i++;\n    }\n    return sum * w;\n\n}\n\npublic static double logGamma(double x) {\n\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009172947146 / (x + 0) - 86.50532032941677 / (x + 1)\n            + 24.01409824083091 / (x + 2) - 1.231739572450155 / (x + 3)\n            + 0.001208650973866179 / (x + 4) - 0.000005395239384953 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b4785d576 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,68 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double accuracy) {\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x, accuracy);\n+    }\n+\n+    double prod = 1.0 / a;\n+    double sum = prod;\n+    double term = prod;\n+    while (Math.abs(term) > accuracy * Math.abs(sum)) {\n+        prod *= x / (a + sum + 1.0);\n+        term = prod;\n+        sum += term;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double accuracy) {\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x, accuracy);\n+    }\n+\n+    double w = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    double z = 1.0 / (x - a + 1.0);\n+    double prod = z;\n+    double sum = z;\n+    double term = z;\n+    int i = 1;\n+    while (Math.abs(term) > accuracy * Math.abs(sum)) {\n+        z = -(x - a + i) * z / i;\n+        prod *= z;\n+        term = prod / (i + 1);\n+        sum += term;\n+        i++;\n+    }\n+    return sum * w;\n+\n+}\n+\n+public static double logGamma(double x) {\n+\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009172947146 / (x + 0) - 86.50532032941677 / (x + 1)\n+            + 24.01409824083091 / (x + 2) - 1.231739572450155 / (x + 3)\n+            + 0.001208650973866179 / (x + 4) - 0.000005395239384953 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}