{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for the regularized gamma function.\");\n    }\n\n    if (x < a + 1) {\n        return regularizedGammaPSeries(a, x, epsilon);\n    } else {\n        return 1 - regularizedGammaQSeries(a, x, epsilon);\n    }\n}\n\nprivate static double regularizedGammaPSeries(double a, double x, double epsilon) {\n    double n = 0;\n    double an = 1 / a;\n    double sum = an;\n\n    while (Math.abs(an / sum) > epsilon && n < MAX_ITERATIONS) {\n        n++;\n        an *= x / (a + n);\n        sum += an;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\nprivate static double regularizedGammaQSeries(double a, double x, double epsilon) {\n    double n = 0;\n    double an = 1;\n    double b = x + 1 - a;\n    double c = 1 / epsilon;\n    double d = 1 / b;\n    double h = d;\n\n    while (Math.abs(d - 1) > EPSILON && Math.abs(an / h) > epsilon && n < MAX_ITERATIONS) {\n        n++;\n        an = -n * (n - a);\n        b += 2;\n        d = an * d + b;\n        if (Math.abs(d) < MIN_VALUE) {\n            d = MIN_VALUE;\n        }\n        d = 1 / d;\n        h *= d;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..636e2fc14 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,63 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for the regularized gamma function.\");\n+    }\n+\n+    if (x < a + 1) {\n+        return regularizedGammaPSeries(a, x, epsilon);\n+    } else {\n+        return 1 - regularizedGammaQSeries(a, x, epsilon);\n+    }\n+}\n+\n+private static double regularizedGammaPSeries(double a, double x, double epsilon) {\n+    double n = 0;\n+    double an = 1 / a;\n+    double sum = an;\n+\n+    while (Math.abs(an / sum) > epsilon && n < MAX_ITERATIONS) {\n+        n++;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+private static double regularizedGammaQSeries(double a, double x, double epsilon) {\n+    double n = 0;\n+    double an = 1;\n+    double b = x + 1 - a;\n+    double c = 1 / epsilon;\n+    double d = 1 / b;\n+    double h = d;\n+\n+    while (Math.abs(d - 1) > EPSILON && Math.abs(an / h) > epsilon && n < MAX_ITERATIONS) {\n+        n++;\n+        an = -n * (n - a);\n+        b += 2;\n+        d = an * d + b;\n+        if (Math.abs(d) < MIN_VALUE) {\n+            d = MIN_VALUE;\n+        }\n+        d = 1 / d;\n+        h *= d;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * h;\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}