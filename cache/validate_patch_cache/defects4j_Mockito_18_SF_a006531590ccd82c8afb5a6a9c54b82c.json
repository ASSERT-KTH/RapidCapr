{
    "patch": "public static Map<String, Integer> wordCount(String[] strings) {\n    Map<String, Integer> map = new HashMap<>();\n    \n    if (strings != null) {\n        for (String s : strings) {\n            if (s != null) {\n                  if (map.containsKey(s)) {\n                    map.put(s, map.get(s) + 1);\n                } else {\n                    map.put(s, 1);\n                }\n            }\n        }\n    }\n    \n    return map;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fc6e0cedf 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> wordCount(String[] strings) {\n+    Map<String, Integer> map = new HashMap<>();\n+    \n+    if (strings != null) {\n+        for (String s : strings) {\n+            if (s != null) {\n+                  if (map.containsKey(s)) {\n+                    map.put(s, map.get(s) + 1);\n+                } else {\n+                    map.put(s, 1);\n+                }\n+            }\n+        }\n+    }\n+    \n+    return map;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}