{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedByProperties = false;\n\n    // Try resolving via properties first to handle cases where types are defined as declared variables.\n    resolveViaProperties(t, enclosing);\n    if (isResolved()) {\n        resolvedByProperties = true;\n    }\n\n    if (!resolvedByProperties && isNamedType()) {\n        // If resolution via properties failed and the type is a named type, try resolving via registry.\n        boolean resolvedByRegistry = resolveViaRegistry(t, enclosing);\n        if (resolvedByRegistry) {\n            // If we were able to resolve the type via registry, handle any implicit prototype cycle,\n            // resolve the supertype, and set up the property continuations.\n            if (detectImplicitPrototypeCycle()) {\n                handleTypeCycle(t);\n            }\n            super.resolveInternal(t, enclosing);\n            finishPropertyContinuations();\n            return registry.isLastGeneration() ? getReferencedType() : this;\n        }\n    }\n\n    // If both resolution approaches failed, try resolving the type by treating it as a function.\n    if (!resolvedByProperties) {\n        super.resolveInternal(t, enclosing);\n        if (isResolved()) {\n            finishPropertyContinuations();\n        }\n        return this;\n    }\n\n    // We were able to resolve the type via properties, so handle any implicit prototype cycle,\n    // resolve the supertype, and set up the property continuations.\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..07e94801 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,48 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolvedByProperties = false;\n+\n+    // Try resolving via properties first to handle cases where types are defined as declared variables.\n+    resolveViaProperties(t, enclosing);\n+    if (isResolved()) {\n+        resolvedByProperties = true;\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (!resolvedByProperties && isNamedType()) {\n+        // If resolution via properties failed and the type is a named type, try resolving via registry.\n+        boolean resolvedByRegistry = resolveViaRegistry(t, enclosing);\n+        if (resolvedByRegistry) {\n+            // If we were able to resolve the type via registry, handle any implicit prototype cycle,\n+            // resolve the supertype, and set up the property continuations.\n+            if (detectImplicitPrototypeCycle()) {\n+                handleTypeCycle(t);\n+            }\n+            super.resolveInternal(t, enclosing);\n+            finishPropertyContinuations();\n+            return registry.isLastGeneration() ? getReferencedType() : this;\n+        }\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // If both resolution approaches failed, try resolving the type by treating it as a function.\n+    if (!resolvedByProperties) {\n+        super.resolveInternal(t, enclosing);\n+        if (isResolved()) {\n+            finishPropertyContinuations();\n+        }\n+        return this;\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    // We were able to resolve the type via properties, so handle any implicit prototype cycle,\n+    // resolve the supertype, and set up the property continuations.\n+    if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}