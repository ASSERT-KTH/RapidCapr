{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final int m = m.getColumnDimension();\n\n    // Check if matrix is not square or not positive semidefinite\n    if (n != m || !isPositiveSemidefinite(m)) {\n        return null;\n    }\n\n    // Compute the eigendecomposition of the matrix\n    final EigenDecomposition dec = new EigenDecomposition(m);\n\n    // Compute the square root matrix using the eigendecomposition\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n    final RealMatrix d_sqrt = MatrixUtils.createRealMatrix(n, m);\n    for (int i = 0; i < n; i++) {\n        d_sqrt.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n    }\n    RealMatrix sqrt = v.multiply(d_sqrt).multiply(v.transpose());\n\n    // Round small values to zero to reduce memory usage\n    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n            if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n                sqrt.setEntry(i, j, 0.0);\n            }\n        }\n    }\n    return sqrt;\n}\n\nprivate boolean isPositiveSemidefinite(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        if (dec.getRealEigenvalue(i) < 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e73d879d7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,45 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final int m = m.getColumnDimension();\n+\n+    // Check if matrix is not square or not positive semidefinite\n+    if (n != m || !isPositiveSemidefinite(m)) {\n+        return null;\n+    }\n+\n+    // Compute the eigendecomposition of the matrix\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    // Compute the square root matrix using the eigendecomposition\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d_sqrt = MatrixUtils.createRealMatrix(n, m);\n+    for (int i = 0; i < n; i++) {\n+        d_sqrt.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n     }\n+    RealMatrix sqrt = v.multiply(d_sqrt).multiply(v.transpose());\n+\n+    // Round small values to zero to reduce memory usage\n+    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n+        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n+            if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n+                sqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n+    }\n+    return sqrt;\n+}\n+\n+private boolean isPositiveSemidefinite(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        if (dec.getRealEigenvalue(i) < 0) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n }",
    "result_reason": "error: variable m is already defined in method squareRoot(RealMatrix)",
    "test_result": "ERROR"
}