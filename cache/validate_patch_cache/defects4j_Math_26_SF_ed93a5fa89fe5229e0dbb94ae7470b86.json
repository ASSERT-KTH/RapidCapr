{
    "patch": "private static class RationalApproximation {\n\n    private int numerator;\n    private int denominator;\n\n    private RationalApproximation(int numerator, int denominator) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n}\n\nprivate static RationalApproximation getRationalApproximation(double value, int maxDenominator, double epsilon) {\n    double error = Double.POSITIVE_INFINITY;\n    int numerator = 0;\n    int denominator = 0;\n\n    double integerPart = FastMath.floor(value);\n    double fractionalPart = value - integerPart;\n\n    if (fractionalPart == 0) {\n        // Value is already an integer, return directly\n        return new RationalApproximation((int) integerPart, 1);\n    }\n\n    double sign = FastMath.signum(value);\n    double absValue = FastMath.abs(value);\n\n    for (int currentDenominator = 1; currentDenominator <= maxDenominator && error >= epsilon; currentDenominator++) {\n        double currentNumerator = sign * absValue * currentDenominator + 0.5;\n        double currentError = FastMath.abs(currentNumerator / currentDenominator - value);\n\n        if (currentError < error) {\n            numerator = (int) currentNumerator;\n            denominator = currentDenominator;\n            error = currentError;\n        }\n    }\n\n    // Return simplest representation\n    return new RationalApproximation(numerator / FastMathUtils.gcd(numerator, denominator),\n                                      denominator / FastMathUtils.gcd(numerator, denominator));\n}\n\nprivate Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n    RationalApproximation ra = getRationalApproximation(value, maxDenominator, epsilon);\n    this.numerator = ra.getNumerator();\n    this.denominator = ra.getDenominator();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..5abc84715 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,71 +172,63 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n+private static class RationalApproximation {\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n-        }\n+    private int numerator;\n+    private int denominator;\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n+    private RationalApproximation(int numerator, int denominator) {\n+        this.numerator = numerator;\n+        this.denominator = denominator;\n+    }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n+    public int getNumerator() {\n+        return numerator;\n+    }\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n+    public int getDenominator() {\n+        return denominator;\n+    }\n+}\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n-        }\n+private static RationalApproximation getRationalApproximation(double value, int maxDenominator, double epsilon) {\n+    double error = Double.POSITIVE_INFINITY;\n+    int numerator = 0;\n+    int denominator = 0;\n+\n+    double integerPart = FastMath.floor(value);\n+    double fractionalPart = value - integerPart;\n \n+    if (fractionalPart == 0) {\n+        // Value is already an integer, return directly\n+        return new RationalApproximation((int) integerPart, 1);\n     }\n \n+    double sign = FastMath.signum(value);\n+    double absValue = FastMath.abs(value);\n+\n+    for (int currentDenominator = 1; currentDenominator <= maxDenominator && error >= epsilon; currentDenominator++) {\n+        double currentNumerator = sign * absValue * currentDenominator + 0.5;\n+        double currentError = FastMath.abs(currentNumerator / currentDenominator - value);\n+\n+        if (currentError < error) {\n+            numerator = (int) currentNumerator;\n+            denominator = currentDenominator;\n+            error = currentError;\n+        }\n+    }\n+\n+    // Return simplest representation\n+    return new RationalApproximation(numerator / FastMathUtils.gcd(numerator, denominator),\n+                                      denominator / FastMathUtils.gcd(numerator, denominator));\n+}\n+\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+    RationalApproximation ra = getRationalApproximation(value, maxDenominator, epsilon);\n+    this.numerator = ra.getNumerator();\n+    this.denominator = ra.getDenominator();\n+}\n+\n     /**\n      * Create a fraction from an int.\n      * The fraction is num / 1.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}