{
    "patch": "FunctionType functionType = (FunctionType) childType;\nboolean isExtern = false;\n\nJSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\nif(functionJSDocInfo != null) {\n  String sourceName = functionJSDocInfo.getSourceName();\n  CompilerInput functionSource = compiler.getInput(sourceName);\n  isExtern = functionSource.isExtern();\n}\n\n// Non-native constructors should not be called directly\n// unless they specify a return type and are defined\n// in an extern.\nif (functionType.isConstructor() &&\n    !functionType.isNativeObjectType() &&\n    (functionType.getReturnType().isUnknownType() ||\n     functionType.getReturnType().isVoidType() ||\n     !isExtern)) {\n  report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n}\n\n// Functions with explicit 'this' types must be called in a GETPROP\n// or GETELEM.\nObjectType thisType = null;\nif (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n  thisType = (ObjectType) functionType.getTypeOfThis();\n}\nif (thisType != null) {\n  if (child.isGetProp()) {\n    Node getPropFirstChild = child.getFirstChild();\n    JSType getPropFirstChildType = getJSType(getPropFirstChild);\n    if (!getPropFirstChildType.isSubtypeOf(thisType)) {\n      // Only warn if the actual type being provided for 'this' is a\n      // proper supertype of the declared type, since a subtype would be\n      // acceptable here.\n      if (JSType.compare(getPropFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n        warnings.add(\n            JSError.make(\n                n,\n                THIS_TYPE_MISMATCH,\n                \"'this' used in method call is not a subtype of the method's 'this' type\"));\n      }\n    }\n  } else if (child.isGetElem()) {\n    Node getElemFirstChild = child.getFirstChild();\n    JSType getElemFirstChildType = getJSType(getElemFirstChild);\n    if (!getElemFirstChildType.isSubtypeOf(thisType)) {\n      // Only warn if the actual type being provided for 'this' is a\n      // proper supertype of the declared type, since a subtype would be\n      // acceptable here.\n      if (JSType.compare(getElemFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n        warnings.add(\n            JSError.make(\n                n,\n                THIS_TYPE_MISMATCH,\n                \"'this' used in method call is not a subtype of the method's 'this' type\"));\n      }\n    }\n  } else {\n    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n  }\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..6619ecd7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,71 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+FunctionType functionType = (FunctionType) childType;\n+boolean isExtern = false;\n+\n+JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+if(functionJSDocInfo != null) {\n+  String sourceName = functionJSDocInfo.getSourceName();\n+  CompilerInput functionSource = compiler.getInput(sourceName);\n+  isExtern = functionSource.isExtern();\n+}\n+\n+// Non-native constructors should not be called directly\n+// unless they specify a return type and are defined\n+// in an extern.\n+if (functionType.isConstructor() &&\n+    !functionType.isNativeObjectType() &&\n+    (functionType.getReturnType().isUnknownType() ||\n+     functionType.getReturnType().isVoidType() ||\n+     !isExtern)) {\n+  report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+}\n+\n+// Functions with explicit 'this' types must be called in a GETPROP\n+// or GETELEM.\n+ObjectType thisType = null;\n+if (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n+  thisType = (ObjectType) functionType.getTypeOfThis();\n+}\n+if (thisType != null) {\n+  if (child.isGetProp()) {\n+    Node getPropFirstChild = child.getFirstChild();\n+    JSType getPropFirstChildType = getJSType(getPropFirstChild);\n+    if (!getPropFirstChildType.isSubtypeOf(thisType)) {\n+      // Only warn if the actual type being provided for 'this' is a\n+      // proper supertype of the declared type, since a subtype would be\n+      // acceptable here.\n+      if (JSType.compare(getPropFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+        warnings.add(\n+            JSError.make(\n+                n,\n+                THIS_TYPE_MISMATCH,\n+                \"'this' used in method call is not a subtype of the method's 'this' type\"));\n+      }\n+    }\n+  } else if (child.isGetElem()) {\n+    Node getElemFirstChild = child.getFirstChild();\n+    JSType getElemFirstChildType = getJSType(getElemFirstChild);\n+    if (!getElemFirstChildType.isSubtypeOf(thisType)) {\n+      // Only warn if the actual type being provided for 'this' is a\n+      // proper supertype of the declared type, since a subtype would be\n+      // acceptable here.\n+      if (JSType.compare(getElemFirstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+        warnings.add(\n+            JSError.make(\n+                n,\n+                THIS_TYPE_MISMATCH,\n+                \"'this' used in method call is not a subtype of the method's 'this' type\"));\n+      }\n+    }\n+  } else {\n+    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n+  }\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}