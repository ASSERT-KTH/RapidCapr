{
    "patch": "      Node gparent = parent.getParent();\n      if (gparent != null && gparent.getType() == Token.EXPR_RESULT) {\n        Node ggparent = gparent.getParent();\n        if (ggparent != null && ggparent.getType() == Token.BLOCK) {\n          Node gggparent = ggparent.getParent();\n          if (gggparent != null && gggparent.getType() == Token.FUNCTION) {\n            JSDocInfo gggparentJsDoc = getFunctionJsDocInfo(gggparent);\n            if (gggparentJsDoc != null && gggparentJsDoc.isConstructor()) {\n              // ignore the anonymous constructor function\n              if (gggparent.getFirstChild() != null && gggparent.getFirstChild().isQualifiedName()) {\n                return false;\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2da037de 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,19 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node gparent = parent.getParent();\n+      if (gparent != null && gparent.getType() == Token.EXPR_RESULT) {\n+        Node ggparent = gparent.getParent();\n+        if (ggparent != null && ggparent.getType() == Token.BLOCK) {\n+          Node gggparent = ggparent.getParent();\n+          if (gggparent != null && gggparent.getType() == Token.FUNCTION) {\n+            JSDocInfo gggparentJsDoc = getFunctionJsDocInfo(gggparent);\n+            if (gggparentJsDoc != null && gggparentJsDoc.isConstructor()) {\n+              // ignore the anonymous constructor function\n+              if (gggparent.getFirstChild() != null && gggparent.getFirstChild().isQualifiedName()) {\n+                return false;\n+              }\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}