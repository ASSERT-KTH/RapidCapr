{
    "patch": "    if (constraintObj.isRecordType() && type != null && type.isObject()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        Set<String> existingProps = new HashSet<>();\n        for (String prop : objType.getOwnPropertyNames()) {\n          ObjectKind.Kind objKind = objType.getOwnPropertyJSDocInfo(prop).getObjectKind();\n          if (objKind == null || objKind == ObjectKind.Kind.UNRESTRICTED) {\n            existingProps.add(prop);\n          }\n        }\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (!existingProps.contains(prop)) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            objType.defineInferredProperty(prop, propType, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ca59da98 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,25 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (constraintObj.isRecordType() && type != null && type.isObject()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+        Set<String> existingProps = new HashSet<>();\n+        for (String prop : objType.getOwnPropertyNames()) {\n+          ObjectKind.Kind objKind = objType.getOwnPropertyJSDocInfo(prop).getObjectKind();\n+          if (objKind == null || objKind == ObjectKind.Kind.UNRESTRICTED) {\n+            existingProps.add(prop);\n+          }\n+        }\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          if (!existingProps.contains(prop)) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            objType.defineInferredProperty(prop, propType, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}