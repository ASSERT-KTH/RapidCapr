{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenvalues = dec.getD();\n    RealMatrix eigenvectors = dec.getV();\n    RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues.getEntry(i, i) < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigenvalues.setEntry(i, i, Math.sqrt(eigenvalues.getEntry(i, i)));\n    }\n    RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8a0348098 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenvalues = dec.getD();\n+    RealMatrix eigenvectors = dec.getV();\n+    RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues.getEntry(i, i) < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigenvalues.setEntry(i, i, Math.sqrt(eigenvalues.getEntry(i, i)));\n     }\n+    RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+    return sqrt;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}