{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n\n        switch (n.getToken()) {\n            case FUNCTION:\n                // parent must not be NAME node\n                if (parent == null || parent.getToken() == Token.NAME) {\n                    return;\n                }\n                defineDeclaredFunction(n, parent);\n                break;\n\n            case CATCH:\n                defineCatch(n, parent);\n                break;\n\n            case VAR:\n                defineVar(n, parent);\n                break;\n\n            case LP:\n                Node grandparent = parent.getParent();\n                if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n                    Node varOrProp = grandparent.getFirstChild();\n                    if (varOrProp.getType() == Token.VAR || varOrProp.getType() == Token.GETPROP) {\n                        String stubName = \"stub\";\n                        Node lastChild = varOrProp.getLastChild();\n                        if (lastChild != null)\n                            stubName = lastChild.getString();\n                        if (varOrProp.getFirstChild().getString().equals(\"goog\") &&\n                                stubName.equals(\"stub\")) {\n                            // found stub call\n                            handleFunctionInputs(parent.getNext());\n                        }\n                    }\n                }\n                break;\n\n            // for all other nodes, attach literal types\n            default:\n                attachLiteralTypes(n);\n                break;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..402c7356 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,52 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        switch (n.getToken()) {\n+            case FUNCTION:\n+                // parent must not be NAME node\n+                if (parent == null || parent.getToken() == Token.NAME) {\n+                    return;\n+                }\n+                defineDeclaredFunction(n, parent);\n+                break;\n+\n+            case CATCH:\n+                defineCatch(n, parent);\n+                break;\n+\n+            case VAR:\n+                defineVar(n, parent);\n+                break;\n+\n+            case LP:\n+                Node grandparent = parent.getParent();\n+                if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+                    Node varOrProp = grandparent.getFirstChild();\n+                    if (varOrProp.getType() == Token.VAR || varOrProp.getType() == Token.GETPROP) {\n+                        String stubName = \"stub\";\n+                        Node lastChild = varOrProp.getLastChild();\n+                        if (lastChild != null)\n+                            stubName = lastChild.getString();\n+                        if (varOrProp.getFirstChild().getString().equals(\"goog\") &&\n+                                stubName.equals(\"stub\")) {\n+                            // found stub call\n+                            handleFunctionInputs(parent.getNext());\n+                        }\n+                    }\n+                }\n+                break;\n+\n+            // for all other nodes, attach literal types\n+            default:\n+                attachLiteralTypes(n);\n+                break;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}