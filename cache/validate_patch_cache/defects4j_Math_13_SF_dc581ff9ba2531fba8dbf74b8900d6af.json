{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double threshold = 1e-8;\n    RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix y = new Array2DRowRealMatrix(m.getData());\n    while (true) {\n        RealMatrix prevX = x;\n        x = y.add(x.scalarMultiply(-1).multiply(y).multiply(x)).scalarMultiply(0.5);\n        y = y.add(prevX.scalarMultiply(-1).multiply(y).multiply(prevX)).scalarMultiply(0.5);\n        double norm = x.subtract(prevX).getFrobeniusNorm();\n        if (norm < threshold) {\n            break;\n        }\n    }\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2a6fb4da9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double threshold = 1e-8;\n+    RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix y = new Array2DRowRealMatrix(m.getData());\n+    while (true) {\n+        RealMatrix prevX = x;\n+        x = y.add(x.scalarMultiply(-1).multiply(y).multiply(x)).scalarMultiply(0.5);\n+        y = y.add(prevX.scalarMultiply(-1).multiply(y).multiply(prevX)).scalarMultiply(0.5);\n+        double norm = x.subtract(prevX).getFrobeniusNorm();\n+        if (norm < threshold) {\n+            break;\n+        }\n     }\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}