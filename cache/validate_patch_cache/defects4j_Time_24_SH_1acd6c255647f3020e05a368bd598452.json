{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n\n        // Check that all fields are consistent with each other\n        for (int j = i + 1; j < count; j++) {\n            DateTimeField field1 = savedFields[i].iField;\n            DateTimeField field2 = savedFields[j].iField;\n            if (field1.getType() != field2.getType()) {\n                continue;\n            }\n            int value1 = savedFields[i].iField.get(newMillis);\n            int value2 = savedFields[j].iField.get(newMillis);\n            if (value1 != value2) {\n                throw new IllegalArgumentException(\"Conflict found: \" + \n                     field1.getName() + \" \" + value1 + \" and \" + field2.getName() + \" \" + value2);\n            }\n        }\n\n        // Validate newMillis value\n        DateTimeField field = savedFields[i].iField;\n        if (!field.isSupported(newMillis)) {\n            throw new IllegalArgumentException(\"The date is out of range\");\n        } else {\n            millis = newMillis;\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9fb4c3ae 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+\n+        // Check that all fields are consistent with each other\n+        for (int j = i + 1; j < count; j++) {\n+            DateTimeField field1 = savedFields[i].iField;\n+            DateTimeField field2 = savedFields[j].iField;\n+            if (field1.getType() != field2.getType()) {\n+                continue;\n+            }\n+            int value1 = savedFields[i].iField.get(newMillis);\n+            int value2 = savedFields[j].iField.get(newMillis);\n+            if (value1 != value2) {\n+                throw new IllegalArgumentException(\"Conflict found: \" + \n+                     field1.getName() + \" \" + value1 + \" and \" + field2.getName() + \" \" + value2);\n+            }\n+        }\n+\n+        // Validate newMillis value\n+        DateTimeField field = savedFields[i].iField;\n+        if (!field.isSupported(newMillis)) {\n+            throw new IllegalArgumentException(\"The date is out of range\");\n+        } else {\n+            millis = newMillis;\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: method isSupported in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}