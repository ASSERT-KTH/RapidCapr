{
    "patch": "public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n\n        if (!Double.isNaN(value)) {\n            if (meanImpl instanceof UnivariateStatistic) {\n                meanImpl.increment(value);\n            }\n            if (varianceImpl instanceof StorelessUnivariateStatistic) {\n                varianceImpl.increment(value);\n            }\n            if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n                geoMeanImpl.increment(value);\n            }\n            n++;\n        }\n\n        if (!(meanImpl instanceof Mean) && meanImpl instanceof UnivariateStatistic && n > 1) {\n            double currentMean = meanImpl.getResult();\n            double newMean = currentMean + (value - currentMean) / n;\n            meanImpl.increment((newMean - currentMean) * (n / (n + 1.0)));\n        }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..727a9e4b8 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,33 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n+public void addValue(double value) {\n         sumImpl.increment(value);\n         sumsqImpl.increment(value);\n         minImpl.increment(value);\n         maxImpl.increment(value);\n         sumLogImpl.increment(value);\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+\n+        if (!Double.isNaN(value)) {\n+            if (meanImpl instanceof UnivariateStatistic) {\n+                meanImpl.increment(value);\n+            }\n+            if (varianceImpl instanceof StorelessUnivariateStatistic) {\n+                varianceImpl.increment(value);\n+            }\n+            if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n+                geoMeanImpl.increment(value);\n+            }\n+            n++;\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+\n+        if (!(meanImpl instanceof Mean) && meanImpl instanceof UnivariateStatistic && n > 1) {\n+            double currentMean = meanImpl.getResult();\n+            double newMean = currentMean + (value - currentMean) / n;\n+            meanImpl.increment((newMean - currentMean) * (n / (n + 1.0)));\n         }\n-        n++;\n-    }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<4.0> but was:<3.6666666666666665>",
    "test_result": "FAIL"
}