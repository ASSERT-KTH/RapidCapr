{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.LP:\n        if (parent.getParent() != null) {\n            Node grandparent = parent.getParent();\n            if (grandparent.getType() == Token.EXPR_RESULT) {\n                grandparent = grandparent.getParent();\n            }\n            if (grandparent.getType() == Token.ASSIGN || grandparent.getType() == Token.VAR ||\n                    grandparent.getType() == Token.EXPR_RESULT) {\n                handleFunctionInputs(parent);\n            }\n        }\n        break;\n    case Token.NAME:\n        if (parent.getType() == Token.VAR) {\n            Node grandparent = parent.getParent();\n            if (grandparent.getType() != Token.FOR && grandparent.getType() != Token.EXPR_RESULT) {\n                defineVar(n, grandparent);\n            }\n        }\n        if (parent.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n        }\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b03de2b4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,46 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.LP:\n+        if (parent.getParent() != null) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent.getType() == Token.EXPR_RESULT) {\n+                grandparent = grandparent.getParent();\n+            }\n+            if (grandparent.getType() == Token.ASSIGN || grandparent.getType() == Token.VAR ||\n+                    grandparent.getType() == Token.EXPR_RESULT) {\n+                handleFunctionInputs(parent);\n+            }\n+        }\n+        break;\n+    case Token.NAME:\n+        if (parent.getType() == Token.VAR) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent.getType() != Token.FOR && grandparent.getType() != Token.EXPR_RESULT) {\n+                defineVar(n, grandparent);\n+            }\n+        }\n+        if (parent.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+        }\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}