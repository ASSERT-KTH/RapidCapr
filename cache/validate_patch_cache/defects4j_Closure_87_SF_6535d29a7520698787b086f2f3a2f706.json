{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    Node parent = n.getParent();\n\n    // This block contains only one expression\n    if (NodeUtil.isExpressionNode(maybeExpr)) {\n      Node expressionParent = maybeExpr.getParent();\n\n      // The expression node should either be the direct child of a block, or an\n      // argument of an expression node. We don't fold if the expression node is in\n      // a position where it can have side effects (e.g. as the first argument to\n      // a COMMA node).\n      return parent.getType() == Token.BLOCK\n          || (expressionParent != null\n              && NodeUtil.isExpressionNode(expressionParent)\n              && expressionParent.getType() != Token.COMMA\n              && expressionParent.getType() != Token.ASSIGN\n              && expressionParent.getType() != Token.CALL\n              && expressionParent.getType() != Token.NEW);\n\n    // This block contains only one return statement\n    } else if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasOneChild()\n        && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n      Node grandparent = n.getParent().getParent();\n\n      // The return statement should not have side effects\n      boolean sideEffectFree = !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n\n      // The return statement should not be inside an \"if\", \"for\" or \"while\"\n      boolean notInFlowStructure =\n          grandparent == null || !NodeUtil.isControlStructure(grandparent.getType());\n\n      // The return statement should not be the last statement in the block\n      boolean notLastStatement = n.getNext() != null;\n\n      return sideEffectFree && notInFlowStructure && notLastStatement;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..50da34c0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    Node parent = n.getParent();\n \n-    return false;\n+    // This block contains only one expression\n+    if (NodeUtil.isExpressionNode(maybeExpr)) {\n+      Node expressionParent = maybeExpr.getParent();\n+\n+      // The expression node should either be the direct child of a block, or an\n+      // argument of an expression node. We don't fold if the expression node is in\n+      // a position where it can have side effects (e.g. as the first argument to\n+      // a COMMA node).\n+      return parent.getType() == Token.BLOCK\n+          || (expressionParent != null\n+              && NodeUtil.isExpressionNode(expressionParent)\n+              && expressionParent.getType() != Token.COMMA\n+              && expressionParent.getType() != Token.ASSIGN\n+              && expressionParent.getType() != Token.CALL\n+              && expressionParent.getType() != Token.NEW);\n+\n+    // This block contains only one return statement\n+    } else if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasOneChild()\n+        && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+      Node grandparent = n.getParent().getParent();\n+\n+      // The return statement should not have side effects\n+      boolean sideEffectFree = !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n+\n+      // The return statement should not be inside an \"if\", \"for\" or \"while\"\n+      boolean notInFlowStructure =\n+          grandparent == null || !NodeUtil.isControlStructure(grandparent.getType());\n+\n+      // The return statement should not be the last statement in the block\n+      boolean notLastStatement = n.getNext() != null;\n+\n+      return sideEffectFree && notInFlowStructure && notLastStatement;\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: method isControlStructure in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}