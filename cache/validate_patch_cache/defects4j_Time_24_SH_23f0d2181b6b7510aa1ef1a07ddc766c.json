{
    "patch": "        boolean retry;\n        do {\n            retry = false;\n            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                if (savedFields.length > 0 && e.getIllegalFieldValueResult() == null) {\n                    SaveFieldResult result = savedFields[0].getSaveFieldResult(e);\n                    if (result != null) {\n                        // modify savedFields\n                        for (int i = 0; i < count; i++) {\n                            DateTimeField field = savedFields[i].iField;\n                            DurationField savedDuration;\n                            if (field != result.iField && compareReverse(field.getDurationField(), savedDuration = result.iField.getDurationField()) > 0 &&\n                                    compareReverse(field.getDurationField(), result.durationField) < 0) {\n                                SavedField saveField = savedFields[i];\n                                try {\n                                    int newValue;\n                                    if (saveField.iValue == null) {\n                                        newValue = saveField.iField.get(saveField.iLowerBound);\n                                    } else {\n                                        newValue = saveField.iValue + saveField.iField.getDurationField().getType().getField(result.durationFieldType).getField(chrono)\n                                                .getField(getLocale()).getDifference(result.value, saveField.iValue);\n                                    }\n                                    savedFields[i] = new SavedField(saveField.iField, newValue, savedDuration);\n                                } catch (RuntimeException ex) {\n                                    // ignore exception\n                                }\n                            }\n                        }\n                        retry = true;\n                    }\n                }\n                if (!retry) {\n                    throw e;\n                }\n            }\n        } while (retry);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5840477a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,49 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean retry;\n+        do {\n+            retry = false;\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                if (savedFields.length > 0 && e.getIllegalFieldValueResult() == null) {\n+                    SaveFieldResult result = savedFields[0].getSaveFieldResult(e);\n+                    if (result != null) {\n+                        // modify savedFields\n+                        for (int i = 0; i < count; i++) {\n+                            DateTimeField field = savedFields[i].iField;\n+                            DurationField savedDuration;\n+                            if (field != result.iField && compareReverse(field.getDurationField(), savedDuration = result.iField.getDurationField()) > 0 &&\n+                                    compareReverse(field.getDurationField(), result.durationField) < 0) {\n+                                SavedField saveField = savedFields[i];\n+                                try {\n+                                    int newValue;\n+                                    if (saveField.iValue == null) {\n+                                        newValue = saveField.iField.get(saveField.iLowerBound);\n+                                    } else {\n+                                        newValue = saveField.iValue + saveField.iField.getDurationField().getType().getField(result.durationFieldType).getField(chrono)\n+                                                .getField(getLocale()).getDifference(result.value, saveField.iValue);\n+                                    }\n+                                    savedFields[i] = new SavedField(saveField.iField, newValue, savedDuration);\n+                                } catch (RuntimeException ex) {\n+                                    // ignore exception\n+                                }\n+                            }\n+                        }\n+                        retry = true;\n+                    }\n+                }\n+                if (!retry) {\n+                    throw e;\n+                }\n+            }\n+        } while (retry);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}