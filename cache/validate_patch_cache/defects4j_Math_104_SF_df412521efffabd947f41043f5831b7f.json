{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n\n  /**\n   * Computes the regularized gamma function.\n   * \n   * @param x <code>x >= 0</code>.\n   * @param a <code>a > 0</code>.\n   * @param maxIterations maximum number of iterations.\n   * @return the regularized gamma function: <code>gamma(x, a) = 1 / Gamma(a) * integral(t=0 to\n   *         t=x){e(-t) * t^(a-1) dt}</code>.\n   */\n  public static double gamma(double x, double a, int maxIterations) {\n    double ret;\n    if (Double.isNaN(x) || Double.isNaN(a) || x < 0.0 || a <= 0.0) {\n      ret = Double.NaN;\n    } else if (x == 0.0) {\n      ret = 0.0;\n    } else if (x < a + 1.0) {\n      // use the series representation and take its truncated sum\n      double apn = a;\n      double del = 1.0 / a;\n      double sum = del;\n      for (int n = 1; n < maxIterations; n++) {\n        apn += 1.0;\n        del *= x / apn;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * 10e-15) {\n          ret = sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n          return ret;\n        }\n      }\n      throw new ArithmeticException(\"gamma: convergence failed\");\n    } else {\n      // use the continued fraction representation\n      double b = x + 1.0 - a;\n      double c = 1.0 / 10e-15;\n      double d = 1.0 / b;\n      double h = d;\n      for (int n = 1; n < maxIterations; n++) {\n        double an = -n * (n - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < 10e-15) {\n          d = 10e-15;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < 10e-15) {\n          c = 10e-15;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h = h * del;\n        if (Math.abs(del - 1.0) < 10e-15) {\n          ret = 1.0 - Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a) - Math.log(h));\n          return ret;\n        }\n      }\n      throw new ArithmeticException(\"gamma: convergence failed\");\n    }\n    return ret;\n  }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a5f0dbaac 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,70 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+\n+  /**\n+   * Computes the regularized gamma function.\n+   * \n+   * @param x <code>x >= 0</code>.\n+   * @param a <code>a > 0</code>.\n+   * @param maxIterations maximum number of iterations.\n+   * @return the regularized gamma function: <code>gamma(x, a) = 1 / Gamma(a) * integral(t=0 to\n+   *         t=x){e(-t) * t^(a-1) dt}</code>.\n+   */\n+  public static double gamma(double x, double a, int maxIterations) {\n+    double ret;\n+    if (Double.isNaN(x) || Double.isNaN(a) || x < 0.0 || a <= 0.0) {\n+      ret = Double.NaN;\n+    } else if (x == 0.0) {\n+      ret = 0.0;\n+    } else if (x < a + 1.0) {\n+      // use the series representation and take its truncated sum\n+      double apn = a;\n+      double del = 1.0 / a;\n+      double sum = del;\n+      for (int n = 1; n < maxIterations; n++) {\n+        apn += 1.0;\n+        del *= x / apn;\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * 10e-15) {\n+          ret = sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+          return ret;\n+        }\n+      }\n+      throw new ArithmeticException(\"gamma: convergence failed\");\n+    } else {\n+      // use the continued fraction representation\n+      double b = x + 1.0 - a;\n+      double c = 1.0 / 10e-15;\n+      double d = 1.0 / b;\n+      double h = d;\n+      for (int n = 1; n < maxIterations; n++) {\n+        double an = -n * (n - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < 10e-15) {\n+          d = 10e-15;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < 10e-15) {\n+          c = 10e-15;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h = h * del;\n+        if (Math.abs(del - 1.0) < 10e-15) {\n+          ret = 1.0 - Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a) - Math.log(h));\n+          return ret;\n+        }\n+      }\n+      throw new ArithmeticException(\"gamma: convergence failed\");\n+    }\n+    return ret;\n+  }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}