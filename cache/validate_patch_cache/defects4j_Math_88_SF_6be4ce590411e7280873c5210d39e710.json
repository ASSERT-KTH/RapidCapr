{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double coefficientValue =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);\n            boolean isVarBasic = false;\n            if (basicRow != null) {\n                int column = getNumObjectiveFunctions() + i;\n                for (int j = 0; j < tableau.getHeight(); j++) {\n                    if (j != basicRow && Math.abs(tableau.getEntry(j, column)) > 1e-10) {\n                        // Column i is non-zero in row j.\n                        // Column i corresponds to a basic variable,\n                        // so the corresponding coefficient in the solution is zero.\n                        isVarBasic = true;\n                        break;\n                    }\n                }\n            }\n            if (isVarBasic) {\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] = coefficientValue;\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..cb59bff59 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -328,18 +328,27 @@ class SimplexTableau implements Serializable {\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n+            double coefficientValue =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n+            boolean isVarBasic = false;\n             if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                int column = getNumObjectiveFunctions() + i;\n+                for (int j = 0; j < tableau.getHeight(); j++) {\n+                    if (j != basicRow && Math.abs(tableau.getEntry(j, column)) > 1e-10) {\n+                        // Column i is non-zero in row j.\n+                        // Column i corresponds to a basic variable,\n+                        // so the corresponding coefficient in the solution is zero.\n+                        isVarBasic = true;\n+                        break;\n                     }\n                 }\n             }\n+            if (isVarBasic) {\n+                coefficients[i] = 0;\n+            } else {\n+                coefficients[i] = coefficientValue;\n+            }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}