{
    "patch": "public static String iso8859_1_ESCAPE(String str) {\n    int len = str.length();\n    StringBuffer out = new StringBuffer(len * 2);\n\n    for (int i = 0; i < len; i++) {\n        char ch = str.charAt(i);\n\n        if (ch >= '\\u00FF') {\n            out.append(\"%u\");\n            out.append(hex(ch));\n        } else {\n            if (specials[ch] != 0)\n                out.append(specials[ch]);\n            else\n                out.append(ch);\n        }\n    }\n    return out.toString();\n}\n\nprivate static String hex(char ch) {\n    return Integer.toHexString(ch).toUpperCase();\n}\n\nprivate static char[] specials = {\n    '\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007',\n    '\\b', '\\t', '\\n', '\\013', '\\f', '\\r', '\\016', '\\017',\n    '\\020', '\\021', '\\022', '\\023', '\\024', '\\025', '\\026', '\\027',\n    '\\030', '\\031', '\\032', '\\033', '\\034', '\\035', '\\036', '\\037',\n    '\\u0022', '\\u0027', '\\\\', '\\u007F'\n};",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..f9121621 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,37 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String iso8859_1_ESCAPE(String str) {\n+    int len = str.length();\n+    StringBuffer out = new StringBuffer(len * 2);\n+\n+    for (int i = 0; i < len; i++) {\n+        char ch = str.charAt(i);\n+\n+        if (ch >= '\\u00FF') {\n+            out.append(\"%u\");\n+            out.append(hex(ch));\n+        } else {\n+            if (specials[ch] != 0)\n+                out.append(specials[ch]);\n+            else\n+                out.append(ch);\n+        }\n+    }\n+    return out.toString();\n+}\n+\n+private static String hex(char ch) {\n+    return Integer.toHexString(ch).toUpperCase();\n+}\n+\n+private static char[] specials = {\n+    '\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007',\n+    '\\b', '\\t', '\\n', '\\013', '\\f', '\\r', '\\016', '\\017',\n+    '\\020', '\\021', '\\022', '\\023', '\\024', '\\025', '\\026', '\\027',\n+    '\\030', '\\031', '\\032', '\\033', '\\034', '\\035', '\\036', '\\037',\n+    '\\u0022', '\\u0027', '\\\\', '\\u007F'\n+};\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}