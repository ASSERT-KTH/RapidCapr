{
    "patch": "if (Character.charCount(Character.codePointAt(input, pos)) == 2) {\n    out.write(\"&#\" + Integer.toString(Character.codePointAt(input, pos), 10) + \";\");\n    pos += 2;\n} else {\n    out.write(Character.toString(input.charAt(pos)));\n    pos++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..8d6934ae 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,13 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+if (Character.charCount(Character.codePointAt(input, pos)) == 2) {\n+    out.write(\"&#\" + Integer.toString(Character.codePointAt(input, pos), 10) + \";\");\n+    pos += 2;\n+} else {\n+    out.write(Character.toString(input.charAt(pos)));\n+    pos++;\n+}\n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: unescape(String) failed: expected '\\n",
    "test_result": "FAIL"
}