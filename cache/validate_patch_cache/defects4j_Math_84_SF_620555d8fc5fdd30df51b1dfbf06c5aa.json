{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() != reflected.getPoint() ?\n                             replaceWorstPoint(reflectedSimplex, expanded, comparator) :\n                             replaceWorstPoint(reflectedSimplex,\n                                               evaluateNewPoint(reflectedSimplex,\n                                                                worst,\n                                                                sigma, comparator),\n                                               comparator);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                continue;\n\n            }\n\n            // try to perform an outside contraction\n            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorstPoint(original, contracted, comparator);\n                continue;\n            }\n\n            // perform an inside contraction\n            final RealPointValuePair contractedInside = evaluateNewSimplex(original, -gamma * psi, comparator);\n            if (comparator.compare(contractedInside, worst) < 0) {\n                simplex = replaceWorstPoint(original, contractedInside, comparator);\n                continue;\n            }\n\n            // perform a shrink\n            final RealPointValuePair[] shrinked = shrinkSimplex(original, comparator);\n            if (shrinked != original) {\n                simplex = shrinked;\n            }\n\n            // check convergence\n            return;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..115df1b20 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,46 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() != reflected.getPoint() ?\n+                             replaceWorstPoint(reflectedSimplex, expanded, comparator) :\n+                             replaceWorstPoint(reflectedSimplex,\n+                                               evaluateNewPoint(reflectedSimplex,\n+                                                                worst,\n+                                                                sigma, comparator),\n+                                               comparator);\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n-                return;\n+                continue;\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            // try to perform an outside contraction\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                simplex = replaceWorstPoint(original, contracted, comparator);\n+                continue;\n+            }\n \n-            // check convergence\n-                return;\n+            // perform an inside contraction\n+            final RealPointValuePair contractedInside = evaluateNewSimplex(original, -gamma * psi, comparator);\n+            if (comparator.compare(contractedInside, worst) < 0) {\n+                simplex = replaceWorstPoint(original, contractedInside, comparator);\n+                continue;\n             }\n \n-        }\n+            // perform a shrink\n+            final RealPointValuePair[] shrinked = shrinkSimplex(original, comparator);\n+            if (shrinked != original) {\n+                simplex = shrinked;\n+            }\n \n-    }\n+            // check convergence\n+            return;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}