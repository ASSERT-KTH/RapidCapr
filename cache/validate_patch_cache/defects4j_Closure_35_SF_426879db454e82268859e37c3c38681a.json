{
    "patch": "  /**\n   * Infers missing properties on an object type using a constraint type.\n   *\n   * @param type the object type to infer properties on\n   * @param constraint the constraint type used to infer properties\n   */\n  void inferPropertiesOnObjectType(ObjectType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj = constraint.restrictByNotNullOrUndefined().autobox().toObjectType();\n    if (constraintObj.isRecordType() && type.isStructuralInterface()) {\n      ObjectType objType = type.autobox().toObjectType();\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop) && getNativeType(VOID_TYPE) != null) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Narrow the scope for a given node.\n   *\n   * @param scope The current scope.\n   * @param n The node we want to narrow a scope for.\n   * @param narrowedType The narrowed type inferred from data flow analysis.\n   * @return A new scope with the type of {@code n} narrowed according to the data flow analysis.\n   */\n  private FlowScope narrowScope(FlowScope scope, Node n, JSType narrowedType) {\n    if (n.isGetProp() || n.isQualifiedName()) {\n      ObjectType inferredObjType = narrowedType.autobox().toObjectType();\n      if (inferredObjType != null) {\n        String propName = NodeUtil.getBestLValueName(n);\n        // If the key is a string literal, use its value to define the inferred property.\n        // Otherwise (e.g. computed property access), leave the property name undefined.\n        StringLiteral key = NodeUtil.getBestLValueStringLiteral(n);\n        propName = key != null ? key.getValue() : propName;\n        inferredObjType.defineInferredProperty(propName, narrowedType, null);\n      }\n    }\n    return scope.inferSlotType(n, narrowedType);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..8ab5687e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,23 +1111,27 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+  /**\n+   * Infers missing properties on an object type using a constraint type.\n+   *\n+   * @param type the object type to infer properties on\n+   * @param constraint the constraint type used to infer properties\n+   */\n+  void inferPropertiesOnObjectType(ObjectType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    ObjectType constraintObj = constraint.restrictByNotNullOrUndefined().autobox().toObjectType();\n+    if (constraintObj.isRecordType() && type.isStructuralInterface()) {\n+      ObjectType objType = type.autobox().toObjectType();\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (!objType.hasProperty(prop) && getNativeType(VOID_TYPE) != null) {\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1137,17 +1141,28 @@ class TypeInference\n   }\n \n   /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n+   * Narrow the scope for a given node.\n+   *\n+   * @param scope The current scope.\n+   * @param n The node we want to narrow a scope for.\n+   * @param narrowedType The narrowed type inferred from data flow analysis.\n+   * @return A new scope with the type of {@code n} narrowed according to the data flow analysis.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+  private FlowScope narrowScope(FlowScope scope, Node n, JSType narrowedType) {\n+    if (n.isGetProp() || n.isQualifiedName()) {\n+      ObjectType inferredObjType = narrowedType.autobox().toObjectType();\n+      if (inferredObjType != null) {\n+        String propName = NodeUtil.getBestLValueName(n);\n+        // If the key is a string literal, use its value to define the inferred property.\n+        // Otherwise (e.g. computed property access), leave the property name undefined.\n+        StringLiteral key = NodeUtil.getBestLValueStringLiteral(n);\n+        propName = key != null ? key.getValue() : propName;\n+        inferredObjType.defineInferredProperty(propName, narrowedType, null);\n       }\n     }\n+    return scope.inferSlotType(n, narrowedType);\n+  }\n+    }\n     return scope;\n   }\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}