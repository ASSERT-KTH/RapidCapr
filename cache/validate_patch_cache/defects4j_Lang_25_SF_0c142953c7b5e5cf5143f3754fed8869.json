{
    "patch": "public String unescape(String str) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '\\\\') {\n            if (i + 5 < str.length() && str.charAt(i + 1) == 'u' &&\n                    isHexDigit(str.charAt(i + 2)) && isHexDigit(str.charAt(i + 3)) &&\n                    isHexDigit(str.charAt(i + 4)) && isHexDigit(str.charAt(i + 5))) {\n                char ch = (char) Integer.parseInt(str.substring(i + 1, i + 6), 16);\n                sb.append(ch);\n                i += 5;\n            } else if (i + 1 < str.length()) {\n                c = str.charAt(i + 1);\n                sb.append(ESCAPE_MAP.getOrDefault(c, c));\n                i++;\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\nprivate boolean isHexDigit(char c) {\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..af71bc92 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,32 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String str) {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        if (c == '\\\\') {\n+            if (i + 5 < str.length() && str.charAt(i + 1) == 'u' &&\n+                    isHexDigit(str.charAt(i + 2)) && isHexDigit(str.charAt(i + 3)) &&\n+                    isHexDigit(str.charAt(i + 4)) && isHexDigit(str.charAt(i + 5))) {\n+                char ch = (char) Integer.parseInt(str.substring(i + 1, i + 6), 16);\n+                sb.append(ch);\n+                i += 5;\n+            } else if (i + 1 < str.length()) {\n+                c = str.charAt(i + 1);\n+                sb.append(ESCAPE_MAP.getOrDefault(c, c));\n+                i++;\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+    }\n+    return sb.toString();\n+}\n+\n+private boolean isHexDigit(char c) {\n+    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}