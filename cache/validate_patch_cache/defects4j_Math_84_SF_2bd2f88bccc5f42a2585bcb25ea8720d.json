{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // check convergence\n            final double[] xSmallest = getPoint(0);\n            final double[] xReflected = reflected.getPoint();\n            final double[] contractiveDirection = new double[getParameterSize()];\n\n            double[] xSecond-largest = getPoint(1); // will be assigned along the way\n            for (int i = 0; i < getDimension(); i++) {\n               contractiveDirection[i] =\n                   (xSmallest[i] + xSecond-largest[i]) * contractionCoeff;\n            }\n            final RealPointValuePair contracted = new RealPointValuePair(\n                computeObjectiveValue(contractiveDirection),\n                contractiveDirection, false);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n            } else {\n                simplex = replaceWorst(original, reflected, comparator);\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, contractionCoeff, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n            } else {\n                contract(original, comparator);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b431bcdb2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,50 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    while (true) {\n+        incrementIterationsCounter();\n \n-        while (true) {\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n \n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // check convergence\n+            final double[] xSmallest = getPoint(0);\n+            final double[] xReflected = reflected.getPoint();\n+            final double[] contractiveDirection = new double[getParameterSize()];\n+\n+            double[] xSecond-largest = getPoint(1); // will be assigned along the way\n+            for (int i = 0; i < getDimension(); i++) {\n+               contractiveDirection[i] =\n+                   (xSmallest[i] + xSecond-largest[i]) * contractionCoeff;\n+            }\n+            final RealPointValuePair contracted = new RealPointValuePair(\n+                computeObjectiveValue(contractiveDirection),\n+                contractiveDirection, false);\n+            if (comparator.compare(contracted, best) < 0) {\n+                simplex = replaceWorst(original, contracted, comparator);\n+            } else {\n+                simplex = replaceWorst(original, reflected, comparator);\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, contractionCoeff, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = replaceWorst(original, contracted, comparator);\n+            } else {\n+                contract(original, comparator);\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}