{
    "patch": "    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n      if (outEdge.getValue() == Branch.ON_EX || outEdge.getValue() == Branch.ON_UND) {\n        return true;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..9b3ffb05 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,13 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+      if (outEdge.getValue() == Branch.ON_EX || outEdge.getValue() == Branch.ON_UND) {\n+        return true;\n+      }\n+    }\n+    return false;\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}