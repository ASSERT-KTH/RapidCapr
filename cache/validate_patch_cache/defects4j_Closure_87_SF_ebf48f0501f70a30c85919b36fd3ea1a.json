{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK) {\n      return false;\n  }\n  Node firstChild = n.getFirstChild();\n  if (firstChild == null || firstChild.getNext() != null) {\n      return false;\n  }\n  if (NodeUtil.isFunctionExpression(firstChild)) {\n      return false;\n  }\n  int type = firstChild.getType();\n  \n  if (type == Token.OBJECTLIT ||\n      type == Token.ARRAYLIT ||\n      type == Token.FUNCTION ||\n      type == Token.REGEXP) {\n    return false;\n  }\n  Node parent = n.getParent();\n  if (parent == null) {\n    return true;\n  }\n  int parentType = n.getParent().getType();\n  if (parentType == Token.EXPR_RESULT) {\n    Node tempParent = parent.getParent();\n    // If parent is the first child of the grandparent, we still want to fold the block.\n    if (tempParent != null && tempParent.getType() == Token.BLOCK && tempParent.getFirstChild() == parent) {\n      return true;\n    }\n    if (parent.getFirstChild() != n) {\n      return false;\n    }\n    if (tempParent != null) {\n      switch (tempParent.getType()) {\n        case Token.IF:\n          Node tempGrandParent = tempParent.getParent();\n          Node tempElseBlock = tempParent.getNext();\n          if (tempElseBlock == null) {\n            return true;\n          }\n          if (tempElseBlock.getType() != Token.BLOCK) {\n            return false;\n          }\n          Node firstChildOfElseBlock = tempElseBlock.getFirstChild();\n          if (firstChildOfElseBlock == null || firstChildOfElseBlock.getNext() != null) {\n            return false;\n          }\n          if (firstChildOfElseBlock.getType() != Token.RETURN) {\n            return false;\n          }\n          Node returnValue = firstChildOfElseBlock.getFirstChild();\n          if (returnValue == null || returnValue.getType() != Token.FALSE) {\n            return false;\n          }\n          if (tempGrandParent != null && tempGrandParent.getType() == Token.IF) {\n            return false;\n          }\n          return true;\n        case Token.VAR:\n        case Token.EXPR_RESULT:\n          return true;\n        case Token.FOR:\n          if (tempParent.getFirstChild().getNext() != parent || tempParent.getFirstChild().getType() != Token.INIT) {\n            return false;\n          }\n          Node grandParent = tempParent.getParent();\n          if (grandParent == null || grandParent.getType() != Token.FOR) {\n            return false;\n          }\n          if (grandParent.getFirstChild().getNext() != tempParent || grandParent.getFirstChild().getType() != Token.INIT) {\n            return false;\n          }\n          Node greatGrandParent = grandParent.getParent();\n          if (greatGrandParent == null || greatGrandParent.getType() != Token.IF) {\n            return false;\n          }\n          Node elseBlock = grandParent.getNext();\n          if (elseBlock == null || elseBlock.getType() != Token.BLOCK) {\n            return false;\n          }\n          Node firstChildOfElseBlock = elseBlock.getFirstChild();\n          if (firstChildOfElseBlock == null || firstChildOfElseBlock.getNext() != null) {\n            return false;\n          }\n          if (firstChildOfElseBlock.getType() != Token.RETURN) {\n            return false;\n          }\n          Node returnValue = firstChildOfElseBlock.getFirstChild();\n          if (returnValue == null || returnValue.getType() != Token.FALSE) {\n            return false;\n          }\n          return true;\n        default:\n          return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1ced8841 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,107 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK) {\n+      return false;\n+  }\n+  Node firstChild = n.getFirstChild();\n+  if (firstChild == null || firstChild.getNext() != null) {\n+      return false;\n+  }\n+  if (NodeUtil.isFunctionExpression(firstChild)) {\n+      return false;\n+  }\n+  int type = firstChild.getType();\n+  \n+  if (type == Token.OBJECTLIT ||\n+      type == Token.ARRAYLIT ||\n+      type == Token.FUNCTION ||\n+      type == Token.REGEXP) {\n+    return false;\n+  }\n+  Node parent = n.getParent();\n+  if (parent == null) {\n+    return true;\n+  }\n+  int parentType = n.getParent().getType();\n+  if (parentType == Token.EXPR_RESULT) {\n+    Node tempParent = parent.getParent();\n+    // If parent is the first child of the grandparent, we still want to fold the block.\n+    if (tempParent != null && tempParent.getType() == Token.BLOCK && tempParent.getFirstChild() == parent) {\n+      return true;\n+    }\n+    if (parent.getFirstChild() != n) {\n+      return false;\n+    }\n+    if (tempParent != null) {\n+      switch (tempParent.getType()) {\n+        case Token.IF:\n+          Node tempGrandParent = tempParent.getParent();\n+          Node tempElseBlock = tempParent.getNext();\n+          if (tempElseBlock == null) {\n+            return true;\n+          }\n+          if (tempElseBlock.getType() != Token.BLOCK) {\n+            return false;\n+          }\n+          Node firstChildOfElseBlock = tempElseBlock.getFirstChild();\n+          if (firstChildOfElseBlock == null || firstChildOfElseBlock.getNext() != null) {\n+            return false;\n+          }\n+          if (firstChildOfElseBlock.getType() != Token.RETURN) {\n+            return false;\n+          }\n+          Node returnValue = firstChildOfElseBlock.getFirstChild();\n+          if (returnValue == null || returnValue.getType() != Token.FALSE) {\n+            return false;\n+          }\n+          if (tempGrandParent != null && tempGrandParent.getType() == Token.IF) {\n+            return false;\n+          }\n+          return true;\n+        case Token.VAR:\n+        case Token.EXPR_RESULT:\n+          return true;\n+        case Token.FOR:\n+          if (tempParent.getFirstChild().getNext() != parent || tempParent.getFirstChild().getType() != Token.INIT) {\n+            return false;\n+          }\n+          Node grandParent = tempParent.getParent();\n+          if (grandParent == null || grandParent.getType() != Token.FOR) {\n+            return false;\n+          }\n+          if (grandParent.getFirstChild().getNext() != tempParent || grandParent.getFirstChild().getType() != Token.INIT) {\n+            return false;\n+          }\n+          Node greatGrandParent = grandParent.getParent();\n+          if (greatGrandParent == null || greatGrandParent.getType() != Token.IF) {\n+            return false;\n+          }\n+          Node elseBlock = grandParent.getNext();\n+          if (elseBlock == null || elseBlock.getType() != Token.BLOCK) {\n+            return false;\n+          }\n+          Node firstChildOfElseBlock = elseBlock.getFirstChild();\n+          if (firstChildOfElseBlock == null || firstChildOfElseBlock.getNext() != null) {\n+            return false;\n+          }\n+          if (firstChildOfElseBlock.getType() != Token.RETURN) {\n+            return false;\n+          }\n+          Node returnValue = firstChildOfElseBlock.getFirstChild();\n+          if (returnValue == null || returnValue.getType() != Token.FALSE) {\n+            return false;\n+          }\n+          return true;\n+        default:\n+          return false;\n       }\n     }\n-\n-    return false;\n+    return true;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}