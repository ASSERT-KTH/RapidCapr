{
    "patch": "    @Override\n    Node getNodeForCodeInsertion(JSModule module) {\n      if (module == null) {\n        if (inputs.length == 0) {\n          throw new IllegalStateException(\"No inputs\");\n        }\n\n        // Return the first non-empty input's AST root.\n        for (CompilerInput input : inputs) {\n          if (!input.isExtern()) {\n            return input.getAstRoot(this);\n          }\n        }\n\n        throw new IllegalStateException(\"No source inputs\");\n      }\n\n      // Return the first non-empty input's AST root for the given module.\n      for (CompilerInput input : module.getInputs()) {\n        if (!input.isExtern()) {\n          return input.getAstRoot(this);\n        }\n      }\n\n      for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n        for (CompilerInput input : m.getInputs()) {\n          if (!input.isExtern()) {\n            return input.getAstRoot(this);\n          }\n        }\n      }\n\n      throw new IllegalStateException(\"Root module has no source inputs\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..5b5bcd08 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,39 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n+    @Override\n+    Node getNodeForCodeInsertion(JSModule module) {\n+      if (module == null) {\n+        if (inputs.length == 0) {\n+          throw new IllegalStateException(\"No inputs\");\n+        }\n \n-    checkFirstModule(modules);\n+        // Return the first non-empty input's AST root.\n+        for (CompilerInput input : inputs) {\n+          if (!input.isExtern()) {\n+            return input.getAstRoot(this);\n+          }\n+        }\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n-    }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n+        throw new IllegalStateException(\"No source inputs\");\n+      }\n \n-    initInputsByNameMap();\n-  }\n+      // Return the first non-empty input's AST root for the given module.\n+      for (CompilerInput input : module.getInputs()) {\n+        if (!input.isExtern()) {\n+          return input.getAstRoot(this);\n+        }\n+      }\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n-    }\n-  }\n+      for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n+        for (CompilerInput input : m.getInputs()) {\n+          if (!input.isExtern()) {\n+            return input.getAstRoot(this);\n+          }\n+        }\n+      }\n \n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+      throw new IllegalStateException(\"Root module has no source inputs\");\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: method getNodeForCodeInsertion(JSModule) is already defined in class Compiler",
    "test_result": "ERROR"
}