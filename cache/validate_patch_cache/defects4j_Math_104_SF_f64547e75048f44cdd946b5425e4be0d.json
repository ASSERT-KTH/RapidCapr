{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double b = x + 1.0 - a;\n    double c = 1.0 / DEFAULT_EPSILON;\n    double d = 1.0 / b;\n    double h = d;\n    double an = -a;\n    double sum = an * d;\n\n    while (Math.abs(d - an) > Math.max(DEFAULT_EPSILON * d, DEFAULT_EPSILON)) {\n        an += 1.0;\n        d *= (b / an);\n        sum += (an * d);\n        if (Math.abs(d) < DEFAULT_EPSILON && Math.abs(an + a) > DEFAULT_EPSILON) {\n            return 1.0;\n        }\n        if (Math.abs(an - a) < DEFAULT_EPSILON) {\n            c = 1.0 + sum * c;\n            return (h / c);\n        }\n    }\n\n    c = 1.0 + sum * c;\n    return (h * Math.exp(-x + a * Math.log(x) - logGamma(a)) / c);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    double b = x + 1.0 - a;\n    double c = 1.0 / DEFAULT_EPSILON;\n    double d = 1.0 / b;\n    double h = d;\n    double an = a;\n    double sum = an * d;\n\n    while (Math.abs(d - an) > Math.max(DEFAULT_EPSILON * d, DEFAULT_EPSILON)) {\n        an -= 1.0;\n        d *= (an / b);\n        sum += (an * d);\n        if (Math.abs(d) < DEFAULT_EPSILON && Math.abs(an - a) > DEFAULT_EPSILON) {\n            return 1.0;\n        }\n        if (Math.abs(an - a) < DEFAULT_EPSILON) {\n            c = 1.0 + sum * c;\n            return (h * c);\n        }\n    }\n\n    c = 1.0 + sum * c;\n    return (1.0 - h * Math.exp(-x + a * Math.log(x) - logGamma(a)) / c);\n}\n\npublic static double logGamma(double x) {\n    if (Double.isNaN(x) || x <= 0.0) {\n        return Double.NaN;\n    }\n\n    double d;\n    double s = 1.0;\n    double z = 0.0;\n    double v = 0.0;\n    double j = 0.0;\n    double q = 0.0;\n    double k = 0.0;\n    double nk = 0.0;\n\n    while (x < Crusher.GAMMA_LANCZOS_G + 0.5) {\n        s *= x;\n        x++;\n    }\n\n    z = 1.0 / (x * x);\n    v = Crusher.GAMMA_COEF[0];\n    for (int i = 1; i < Crusher.GAMMA_COEF.length; i++) {\n        v += (Crusher.GAMMA_COEF[i] / (x + i));\n    }\n    q = z * v;\n    q += Crusher.GAMMA_LANCZOS_G + 0.5 * Math.log(2 * Math.PI);\n    q -= Math.log(s);\n\n    return q;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4aac1af7d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,118 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / DEFAULT_EPSILON;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an = -a;\n+    double sum = an * d;\n+\n+    while (Math.abs(d - an) > Math.max(DEFAULT_EPSILON * d, DEFAULT_EPSILON)) {\n+        an += 1.0;\n+        d *= (b / an);\n+        sum += (an * d);\n+        if (Math.abs(d) < DEFAULT_EPSILON && Math.abs(an + a) > DEFAULT_EPSILON) {\n+            return 1.0;\n+        }\n+        if (Math.abs(an - a) < DEFAULT_EPSILON) {\n+            c = 1.0 + sum * c;\n+            return (h / c);\n+        }\n+    }\n+\n+    c = 1.0 + sum * c;\n+    return (h * Math.exp(-x + a * Math.log(x) - logGamma(a)) / c);\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / DEFAULT_EPSILON;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an = a;\n+    double sum = an * d;\n+\n+    while (Math.abs(d - an) > Math.max(DEFAULT_EPSILON * d, DEFAULT_EPSILON)) {\n+        an -= 1.0;\n+        d *= (an / b);\n+        sum += (an * d);\n+        if (Math.abs(d) < DEFAULT_EPSILON && Math.abs(an - a) > DEFAULT_EPSILON) {\n+            return 1.0;\n+        }\n+        if (Math.abs(an - a) < DEFAULT_EPSILON) {\n+            c = 1.0 + sum * c;\n+            return (h * c);\n+        }\n+    }\n+\n+    c = 1.0 + sum * c;\n+    return (1.0 - h * Math.exp(-x + a * Math.log(x) - logGamma(a)) / c);\n+}\n+\n+public static double logGamma(double x) {\n+    if (Double.isNaN(x) || x <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    double d;\n+    double s = 1.0;\n+    double z = 0.0;\n+    double v = 0.0;\n+    double j = 0.0;\n+    double q = 0.0;\n+    double k = 0.0;\n+    double nk = 0.0;\n+\n+    while (x < Crusher.GAMMA_LANCZOS_G + 0.5) {\n+        s *= x;\n+        x++;\n+    }\n+\n+    z = 1.0 / (x * x);\n+    v = Crusher.GAMMA_COEF[0];\n+    for (int i = 1; i < Crusher.GAMMA_COEF.length; i++) {\n+        v += (Crusher.GAMMA_COEF[i] / (x + i));\n+    }\n+    q = z * v;\n+    q += Crusher.GAMMA_LANCZOS_G + 0.5 * Math.log(2 * Math.PI);\n+    q -= Math.log(s);\n+\n+    return q;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}