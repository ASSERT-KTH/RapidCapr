{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean shouldOptimizeCallSites = CompilerOptions.OptimizeCalls.DEFAULT_OPTIMIZE_CALLS_IF_ON\n        .equals(compiler.getOptions().optimizeCalls) && fnScope.getBody().hasChildren();\n    boolean shouldOptimizeParameters = CompilerOptions.OptimizeParameters.DEFAULT_OPTIMIZE_PARAMETERS_IF_ON\n        .equals(compiler.getOptions().optimizeParameters) && argList.hasChildren();\n\n    CallSiteInliner.CallSiteOptimizerMode callSiteMode = shouldOptimizeCallSites\n        ? CallSiteInliner.CallSiteOptimizerMode.BASELINE : CallSiteInliner.CallSiteOptimizerMode.NONE;\n    FunctionArgumentInjector.ArgUsageMode usageMode = shouldOptimizeParameters\n        ? FunctionArgumentInjector.ArgUsageMode.INLINE_IF_FIRST_USE : FunctionArgumentInjector.ArgUsageMode.NONE;\n\n    FunctionArgumentInjector.Result result =\n        FunctionArgumentInjector.inject(compiler, argList, usageMode, callSiteMode);\n    (new RemoveUnusedCode.Builder(compiler))\n        .removeGlobals(globalClobberage)\n        .removeLocalVars(fnScope, globalClobberage, result.usedArgs)\n        .removeDeadCode()\n        .build()\n        .apply(result.foundLiveCode);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..92e002fe 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,33 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n+\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n+\n+    boolean shouldOptimizeCallSites = CompilerOptions.OptimizeCalls.DEFAULT_OPTIMIZE_CALLS_IF_ON\n+        .equals(compiler.getOptions().optimizeCalls) && fnScope.getBody().hasChildren();\n+    boolean shouldOptimizeParameters = CompilerOptions.OptimizeParameters.DEFAULT_OPTIMIZE_PARAMETERS_IF_ON\n+        .equals(compiler.getOptions().optimizeParameters) && argList.hasChildren();\n+\n+    CallSiteInliner.CallSiteOptimizerMode callSiteMode = shouldOptimizeCallSites\n+        ? CallSiteInliner.CallSiteOptimizerMode.BASELINE : CallSiteInliner.CallSiteOptimizerMode.NONE;\n+    FunctionArgumentInjector.ArgUsageMode usageMode = shouldOptimizeParameters\n+        ? FunctionArgumentInjector.ArgUsageMode.INLINE_IF_FIRST_USE : FunctionArgumentInjector.ArgUsageMode.NONE;\n+\n+    FunctionArgumentInjector.Result result =\n+        FunctionArgumentInjector.inject(compiler, argList, usageMode, callSiteMode);\n+    (new RemoveUnusedCode.Builder(compiler))\n+        .removeGlobals(globalClobberage)\n+        .removeLocalVars(fnScope, globalClobberage, result.usedArgs)\n+        .removeDeadCode()\n+        .build()\n+        .apply(result.foundLiveCode);\n   }\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}