{
    "patch": "if (child.isString()) {\n  // handle STRING nodes\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                             processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n} else if (child.isGetProp() || child.isSetProp()) {\n  // handle GET and SET nodes\n  Node nameNode = child.getLastChild();\n  String name = nameNode.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (child.isGetProp()) {\n    if (!prop.scheduleGetterRenaming(nameNode,\n                                      processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  } else if (child.isSetProp()) {\n    if (!prop.scheduleSetterRenaming(nameNode,\n                                      processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..5ff047f5 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,52 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isString()) {\n+  // handle STRING nodes\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                             processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+} else if (child.isGetProp() || child.isSetProp()) {\n+  // handle GET and SET nodes\n+  Node nameNode = child.getLastChild();\n+  String name = nameNode.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (child.isGetProp()) {\n+    if (!prop.scheduleGetterRenaming(nameNode,\n+                                      processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+  } else if (child.isSetProp()) {\n+    if (!prop.scheduleSetterRenaming(nameNode,\n+                                      processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}