{
    "patch": "      JSDocInfo functionJSDocInfo = childType.getJSDocInfo();\n      if (functionJSDocInfo != null\n          && functionJSDocInfo.getTypeOfThis() != null\n          && n.getParent().isGetProp()) {\n        Node parent = n.getParent();\n        JSType objectType = getJSType(parent.getFirstChild());\n        JSType expectedThisType = functionJSDocInfo.getTypeOfThis().evaluate(objectType);\n        if (!getJSType(parent).hasType(expectedThisType)) {\n          report(t, n, INVALID_THIS_TYPE, expectedThisType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9339e738 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo functionJSDocInfo = childType.getJSDocInfo();\n+      if (functionJSDocInfo != null\n+          && functionJSDocInfo.getTypeOfThis() != null\n+          && n.getParent().isGetProp()) {\n+        Node parent = n.getParent();\n+        JSType objectType = getJSType(parent.getFirstChild());\n+        JSType expectedThisType = functionJSDocInfo.getTypeOfThis().evaluate(objectType);\n+        if (!getJSType(parent).hasType(expectedThisType)) {\n+          report(t, n, INVALID_THIS_TYPE, expectedThisType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}