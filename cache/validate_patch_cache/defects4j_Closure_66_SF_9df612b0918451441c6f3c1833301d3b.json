{
    "patch": "public static double getTypedPercent(JsonObject object) {\n    int count = 0;\n    int types = 0;\n    for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n        JsonElement value = entry.getValue();\n        if (value.isJsonPrimitive()) {\n            types++;\n            if (value.getAsJsonPrimitive().isBoolean() || value.getAsJsonPrimitive().isString() || value.getAsJsonPrimitive().isNumber()) {\n                count++;\n            }\n        }\n    }\n    if (types == 0) {\n        return 0.0;\n    }\n    return ((double) count / types) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..71a27fc9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject object) {\n+    int count = 0;\n+    int types = 0;\n+    for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n+        JsonElement value = entry.getValue();\n+        if (value.isJsonPrimitive()) {\n+            types++;\n+            if (value.getAsJsonPrimitive().isBoolean() || value.getAsJsonPrimitive().isString() || value.getAsJsonPrimitive().isNumber()) {\n+                count++;\n+            }\n+        }\n+    }\n+    if (types == 0) {\n+        return 0.0;\n+    }\n+    return ((double) count / types) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}