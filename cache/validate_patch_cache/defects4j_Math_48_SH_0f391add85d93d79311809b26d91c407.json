{
    "patch": "                    // Detect early that algorithm is stuck, instead of waiting\n                    // for the maximum number of iterations to be exceeded.\n                    if (Double.isNaN(fx)) {\n                        throw new ConvergenceException(\n                            \"f(x) is NaN at \" + x + \", iteration \" + getIterations());\n                    }\n                    if (++iter >= maximalIterationCount) {\n                        throw new ConvergenceException(maximalIterationCount,\n                            x, ftol, rtol);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..92bd22c37 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,16 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    if (Double.isNaN(fx)) {\n+                        throw new ConvergenceException(\n+                            \"f(x) is NaN at \" + x + \", iteration \" + getIterations());\n+                    }\n+                    if (++iter >= maximalIterationCount) {\n+                        throw new ConvergenceException(maximalIterationCount,\n+                            x, ftol, rtol);\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}