{
    "patch": "public static double calculateAverage(List<Integer> numbers) {\n    if (numbers == null || numbers.isEmpty()) {\n        return 0.0;\n    } else {\n        int sum = 0;\n        for (Integer number : numbers) {\n            sum += number;\n        }\n        return ((double) sum) / numbers.size();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..0e61627a4 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static double calculateAverage(List<Integer> numbers) {\n+    if (numbers == null || numbers.isEmpty()) {\n+        return 0.0;\n+    } else {\n+        int sum = 0;\n+        for (Integer number : numbers) {\n+            sum += number;\n+        }\n+        return ((double) sum) / numbers.size();\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}