{
    "patch": "public String getProp(String name, String key) {\n    String value = null;\n    List<Properties> propList = new ArrayList<Properties>();\n    try {\n        Properties prop = new Properties();\n        InputStream input = new FileInputStream(name);\n\n        // load a properties file\n        prop.load(input);\n        propList.add(prop);\n\n        // get the property value and print it out\n        value = prop.getProperty(key);\n        for (Properties p : propList) {\n            Enumeration<?> e = p.propertyNames();\n            while (e.hasMoreElements()) {\n                String k = (String) e.nextElement();\n                if (k.endsWith(\".ref\")) {\n                    String v = p.getProperty(k);\n                    value = getProp(v, key);\n                    if (value != null) {\n                        return value;\n                    }\n                }\n            }\n        }\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    } catch (SecurityException ex) {\n        ex.printStackTrace();\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..33d4ce37 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String name, String key) {\n+    String value = null;\n+    List<Properties> propList = new ArrayList<Properties>();\n+    try {\n+        Properties prop = new Properties();\n+        InputStream input = new FileInputStream(name);\n+\n+        // load a properties file\n+        prop.load(input);\n+        propList.add(prop);\n+\n+        // get the property value and print it out\n+        value = prop.getProperty(key);\n+        for (Properties p : propList) {\n+            Enumeration<?> e = p.propertyNames();\n+            while (e.hasMoreElements()) {\n+                String k = (String) e.nextElement();\n+                if (k.endsWith(\".ref\")) {\n+                    String v = p.getProperty(k);\n+                    value = getProp(v, key);\n+                    if (value != null) {\n+                        return value;\n+                    }\n+                }\n+            }\n+        }\n+    } catch (IOException ex) {\n+        ex.printStackTrace();\n+    } catch (SecurityException ex) {\n+        ex.printStackTrace();\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}