{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix D = dec.getD();\n    RealMatrix V = dec.getV();\n    int n = D.getColumnDimension();\n\n    /* Compute the square root of the eigenvalues */\n    for (int i = 0; i < n; i++) {\n        double root = FastMath.sqrt(FastMath.max(D.getEntry(i, i), 0.0));\n        D.setEntry(i, i, root);\n    }\n\n    /* Compute the square root of the matrix */\n    RealMatrix sqrtM = V.multiply(D).multiply(V.transpose());\n\n    return sqrtM.scalarMultiply(1.0 / FastMath.sqrt(2.0));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c5b9ad664 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix D = dec.getD();\n+    RealMatrix V = dec.getV();\n+    int n = D.getColumnDimension();\n+\n+    /* Compute the square root of the eigenvalues */\n+    for (int i = 0; i < n; i++) {\n+        double root = FastMath.sqrt(FastMath.max(D.getEntry(i, i), 0.0));\n+        D.setEntry(i, i, root);\n     }\n+\n+    /* Compute the square root of the matrix */\n+    RealMatrix sqrtM = V.multiply(D).multiply(V.transpose());\n+\n+    return sqrtM.scalarMultiply(1.0 / FastMath.sqrt(2.0));\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.5> but was:<1.499999806745808>",
    "test_result": "FAIL"
}