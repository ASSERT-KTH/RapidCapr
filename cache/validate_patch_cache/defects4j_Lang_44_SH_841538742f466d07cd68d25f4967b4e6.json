{
    "patch": "        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if ((dec == null)\n                    && (exp == null)\n                    && ((numeric.charAt(0) == '-') ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        //Too big for a long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && !allZeros))) {\n                        //If it's too big for a float or the float value = 0 and the string\n                        //has non-zeros in it, then float does not have the precision we want\n                        return f;\n                    }\n\n                } catch (NumberFormatException e) {\n                    // ignore the bad number\n                }\n                //Fall through\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0D) && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // empty catch\n                }\n                //Fall through\n            default:\n                throw new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..f9edae77 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,53 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        switch (lastChar) {\n+            case 'l':\n+            case 'L':\n+                if ((dec == null)\n+                    && (exp == null)\n+                    && ((numeric.charAt(0) == '-') ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n+                    try {\n+                        return createLong(numeric);\n+                    } catch (NumberFormatException nfe) {\n+                        //Too big for a long\n+                    }\n+                    return createBigInteger(numeric);\n+                }\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            case 'f':\n+            case 'F':\n+                try {\n+                    Float f = createFloat(numeric);\n+                    if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && !allZeros))) {\n+                        //If it's too big for a float or the float value = 0 and the string\n+                        //has non-zeros in it, then float does not have the precision we want\n+                        return f;\n+                    }\n+\n+                } catch (NumberFormatException e) {\n+                    // ignore the bad number\n+                }\n+                //Fall through\n+            case 'd':\n+            case 'D':\n+                try {\n+                    Double d = createDouble(numeric);\n+                    if (!(d.isInfinite() || ((d.doubleValue() == 0.0D) && !allZeros))) {\n+                        return d;\n+                    }\n+                } catch (NumberFormatException nfe) {\n+                    // empty catch\n+                }\n+                try {\n+                    return createBigDecimal(numeric);\n+                } catch (NumberFormatException e) {\n+                    // empty catch\n+                }\n+                //Fall through\n+            default:\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}