{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                int offsetBeforeNext = getOffset(nextLocal - 1);\n                int offsetAfterNext = getOffset(nextLocal);\n                if (offsetAfterNext == offsetAdjusted && offsetAdjusted == offsetBeforeNext) {\n                    // We are ambiguous - go with the standard offset\n                    return offsetAdjusted;\n                }\n                return (offsetAfterNext == offsetAdjusted ? offsetBeforeNext : offsetAfterNext);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a11aa96a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                int offsetBeforeNext = getOffset(nextLocal - 1);\n+                int offsetAfterNext = getOffset(nextLocal);\n+                if (offsetAfterNext == offsetAdjusted && offsetAdjusted == offsetBeforeNext) {\n+                    // We are ambiguous - go with the standard offset\n+                    return offsetAdjusted;\n+                }\n+                return (offsetAfterNext == offsetAdjusted ? offsetBeforeNext : offsetAfterNext);\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}