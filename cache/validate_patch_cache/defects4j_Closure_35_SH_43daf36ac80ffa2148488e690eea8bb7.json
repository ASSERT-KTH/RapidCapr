{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String propName : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(propName);\n          ObjectType recordPropType = ObjectType.cast(propType.restrictByNotNullOrUndefined());\n          JSType narrowedPropType;\n          if (recordPropType != null && recordPropType.isRecordType()) {\n            narrowedPropType = getNativeType(VOID_TYPE);\n          } else {\n            narrowedPropType = getNativeType(NULL_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(propName, narrowedPropType, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..0927d098 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,19 +1121,20 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+        for (String propName : constraintObj.getOwnPropertyNames()) {\n+          JSType propType = constraintObj.getPropertyType(propName);\n+          ObjectType recordPropType = ObjectType.cast(propType.restrictByNotNullOrUndefined());\n+          JSType narrowedPropType;\n+          if (recordPropType != null && recordPropType.isRecordType()) {\n+            narrowedPropType = getNativeType(VOID_TYPE);\n+          } else {\n+            narrowedPropType = getNativeType(NULL_TYPE).getLeastSupertype(propType);\n           }\n+          objType.defineInferredProperty(propName, narrowedPropType, null);\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}