{
    "patch": "        // Make sure this assignment is not in a loop.\n        // The loop detection algorithm takes advantage of dominators to handle\n        // nested loops in O(1) time complexity.\n        Set<BasicBlock> visited = Sets.newHashSet();\n        BasicBlock block = ref.getBasicBlock();\n        while (block != null && !visited.contains(block)) {\n          visited.add(block);\n          if (block.isLoop) {\n            return false;\n          }\n          block = block.getImmediateDominator();\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..416e0b26 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Make sure this assignment is not in a loop.\n+        // The loop detection algorithm takes advantage of dominators to handle\n+        // nested loops in O(1) time complexity.\n+        Set<BasicBlock> visited = Sets.newHashSet();\n+        BasicBlock block = ref.getBasicBlock();\n+        while (block != null && !visited.contains(block)) {\n+          visited.add(block);\n+          if (block.isLoop) {\n+            return false;\n+          }\n+          block = block.getImmediateDominator();\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}