{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    int i = 0;\n    while (i < size) {\n        Object currentElement = elementPairs.get(i);\n\n        if (currentElement instanceof Separator) {\n            // Check if the separator is the first or last element\n            if (i == 0 || i == size - 1) {\n                throw new IllegalArgumentException(\"Separators can't appear first or last in the builder\");\n            }\n\n            int start = i + 1;\n            i = start;\n\n            while (i < size && !(elementPairs.get(i) instanceof Separator)) {\n                i++;\n            }\n\n            List<Object> subList = elementPairs.subList(start, i);\n            PeriodFormatter subFormatter = toFormatter(subList, notPrinter, notParser);\n\n            Separator separator = (Separator) currentElement;\n            separator = separator.finish(subFormatter.getPrinter(), subFormatter.getParser());\n\n            if (printer == null && !notPrinter) {\n                printer = separator;\n            }\n\n            if (parser == null && !notParser) {\n                parser = separator;\n            }\n        } else {\n            Object[] comp = createComposite(Arrays.asList(currentElement));\n            if (printer == null && !notPrinter) {\n                printer = (PeriodPrinter) comp[0];\n            }\n\n            if (parser == null && !notParser) {\n                parser = (PeriodParser) comp[1];\n            }\n            i++;\n        }\n    }\n\n    if (printer == null && parser == null) {\n        return new PeriodFormatter(null, null);\n    } else if (printer == null) {\n        return new PeriodFormatter(null, parser);\n    } else if (parser == null) {\n        return new PeriodFormatter(printer, null);\n    } else {\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b9e7fef3 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,73 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    int i = 0;\n+    while (i < size) {\n+        Object currentElement = elementPairs.get(i);\n+\n+        if (currentElement instanceof Separator) {\n+            // Check if the separator is the first or last element\n+            if (i == 0 || i == size - 1) {\n+                throw new IllegalArgumentException(\"Separators can't appear first or last in the builder\");\n+            }\n+\n+            int start = i + 1;\n+            i = start;\n+\n+            while (i < size && !(elementPairs.get(i) instanceof Separator)) {\n+                i++;\n+            }\n+\n+            List<Object> subList = elementPairs.subList(start, i);\n+            PeriodFormatter subFormatter = toFormatter(subList, notPrinter, notParser);\n+\n+            Separator separator = (Separator) currentElement;\n+            separator = separator.finish(subFormatter.getPrinter(), subFormatter.getParser());\n+\n+            if (printer == null && !notPrinter) {\n+                printer = separator;\n+            }\n+\n+            if (parser == null && !notParser) {\n+                parser = separator;\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(Arrays.asList(currentElement));\n+            if (printer == null && !notPrinter) {\n+                printer = (PeriodPrinter) comp[0];\n+            }\n+\n+            if (parser == null && !notParser) {\n+                parser = (PeriodParser) comp[1];\n+            }\n+            i++;\n         }\n     }\n \n+    if (printer == null && parser == null) {\n+        return new PeriodFormatter(null, null);\n+    } else if (printer == null) {\n+        return new PeriodFormatter(null, parser);\n+    } else if (parser == null) {\n+        return new PeriodFormatter(printer, null);\n+    } else {\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}