{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    // Create a new object type based on the constructor type\n    ObjectType instanceType = ObjectType.cast(constructor.getJSType().restrictByNotNullOrUndefined());\n    if (instanceType == null || !instanceType.isFunctionType() || !((FunctionType) instanceType).isConstructor()) {\n      // The constructor type is unknown, not a constructor, or not a function type\n      instanceType = ObjectType.cast(getNativeType(OBJECT_TYPE).restrictByNotNullOrUndefined());\n    } else {\n      FunctionType ct = (FunctionType) instanceType;\n      instanceType = ct.getInstanceType();\n    }\n\n    n.setJSType(instanceType);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c382ab78 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,29 +1033,20 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n+\n+    // Create a new object type based on the constructor type\n+    ObjectType instanceType = ObjectType.cast(constructor.getJSType().restrictByNotNullOrUndefined());\n+    if (instanceType == null || !instanceType.isFunctionType() || !((FunctionType) instanceType).isConstructor()) {\n+      // The constructor type is unknown, not a constructor, or not a function type\n+      instanceType = ObjectType.cast(getNativeType(OBJECT_TYPE).restrictByNotNullOrUndefined());\n+    } else {\n+      FunctionType ct = (FunctionType) instanceType;\n+      instanceType = ct.getInstanceType();\n     }\n-    n.setJSType(type);\n+\n+    n.setJSType(instanceType);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}