{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    // Extract type information from the constructor function and traverse it with the scope\n    JSType constructorType = constructor.getJSType();\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType == null || constructorType.isUnknownType()) {\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        JSType type = ct.getTypeOfThis();\n        n.setJSType(type);\n        scope = traverse(constructor, scope);\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          scope = traverse(arg, scope);\n        }\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..fab481b7 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1035,30 +1035,25 @@ class TypeInference\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n+    // Extract type information from the constructor function and traverse it with the scope\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType == null || constructorType.isUnknownType()) {\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType instanceof FunctionType) {\n+        ct = (FunctionType) constructorType;\n+      }\n+      if (ct != null && ct.isConstructor()) {\n+        JSType type = ct.getTypeOfThis();\n+        n.setJSType(type);\n+        scope = traverse(constructor, scope);\n+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+          scope = traverse(arg, scope);\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n     return scope;\n   }\n ",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}