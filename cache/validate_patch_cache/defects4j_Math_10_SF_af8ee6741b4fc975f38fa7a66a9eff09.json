{
    "patch": "public void atan2(final double[] y, final int yOffset, final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);              // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);           // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                         // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i];     // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);         // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);           // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                         // atan(y / (r - x))\n            if (y[yOffset] >= 0) {\n                result[resultOffset] = FastMath.PI + 2 * tmp2[0]; // pi + 2 * atan(y / (r - x))\n            } else {\n                result[resultOffset] = -FastMath.PI + 2 * tmp2[0]; // -pi + 2 * atan(y / (r - x))\n            }\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i];     // +/-pi + 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        double px = x[xOffset];\n        double py = y[yOffset];\n        if (Double.isNaN(px) || Double.isNaN(py)) {\n            result[resultOffset] = Double.NaN;\n        } else if (px == 0.0 && py == 0.0) {\n            result[resultOffset] = 0.0;\n        } else if (px == 0.0) {\n            result[resultOffset] = py > 0 ? FastMath.PI * 0.5 : -FastMath.PI * 0.5;\n        } else if (Double.isInfinite(px)) {\n            if (px > 0) {\n                result[resultOffset] = py > 0 ? FastMath.PI * 0.5 : -FastMath.PI * 0.5;\n            } else {\n                result[resultOffset] = py > 0 ? -FastMath.PI * 0.5 : FastMath.PI * 0.5;\n            }\n        } else if (Double.isInfinite(py)) {\n            result[resultOffset] = py > 0 ? FastMath.PI * 0.5 : -FastMath.PI * 0.5;\n        } else {\n            result[resultOffset] = result[resultOffset] + 0; // just to keep the result array unchanged.\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..10673288b 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,8 +1379,7 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n+public void atan2(final double[] y, final int yOffset, final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n         // compute r = sqrt(x^2+y^2)\n@@ -1394,28 +1393,50 @@ public class DSCompiler {\n         if (x[xOffset] >= 0) {\n \n             // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+            add(tmp1, 0, x, xOffset, tmp2, 0);              // r + x\n+            divide(y, yOffset, tmp2, 0, tmp1, 0);           // y /(r + x)\n+            atan(tmp1, 0, tmp2, 0);                         // atan(y / (r + x))\n             for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+                result[resultOffset + i] = 2 * tmp2[i];     // 2 * atan(y / (r + x))\n             }\n \n         } else {\n \n             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+            subtract(tmp1, 0, x, xOffset, tmp2, 0);         // r - x\n+            divide(y, yOffset, tmp2, 0, tmp1, 0);           // y /(r - x)\n+            atan(tmp1, 0, tmp2, 0);                         // atan(y / (r - x))\n+            if (y[yOffset] >= 0) {\n+                result[resultOffset] = FastMath.PI + 2 * tmp2[0]; // pi + 2 * atan(y / (r - x))\n+            } else {\n+                result[resultOffset] = -FastMath.PI + 2 * tmp2[0]; // -pi + 2 * atan(y / (r - x))\n+            }\n             for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+                result[resultOffset + i] = 2 * tmp2[i];     // +/-pi + 2 * atan(y / (r - x))\n             }\n \n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        double px = x[xOffset];\n+        double py = y[yOffset];\n+        if (Double.isNaN(px) || Double.isNaN(py)) {\n+            result[resultOffset] = Double.NaN;\n+        } else if (px == 0.0 && py == 0.0) {\n+            result[resultOffset] = 0.0;\n+        } else if (px == 0.0) {\n+            result[resultOffset] = py > 0 ? FastMath.PI * 0.5 : -FastMath.PI * 0.5;\n+        } else if (Double.isInfinite(px)) {\n+            if (px > 0) {\n+                result[resultOffset] = py > 0 ? FastMath.PI * 0.5 : -FastMath.PI * 0.5;\n+            } else {\n+                result[resultOffset] = py > 0 ? -FastMath.PI * 0.5 : FastMath.PI * 0.5;\n+            }\n+        } else if (Double.isInfinite(py)) {\n+            result[resultOffset] = py > 0 ? FastMath.PI * 0.5 : -FastMath.PI * 0.5;\n+        } else {\n+            result[resultOffset] = result[resultOffset] + 0; // just to keep the result array unchanged.\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}