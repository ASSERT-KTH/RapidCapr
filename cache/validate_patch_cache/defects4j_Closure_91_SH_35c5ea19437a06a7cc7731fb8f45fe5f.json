{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node property = parent.getLastChild();\n        if (NodeUtil.isGet(property)) {\n          Node object = property.getFirstChild();\n          String propName = property.getLastChild().getString();\n          if (propName.equals(\"prototype\")) {\n            return false;\n          }\n          if (object.isName()) {\n            Var var = t.getScope().getVar(object.getString());\n            if (var != null &&\n                isPrototype(var.getName(), t.getScopeRoot())) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..23547c87 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node property = parent.getLastChild();\n+        if (NodeUtil.isGet(property)) {\n+          Node object = property.getFirstChild();\n+          String propName = property.getLastChild().getString();\n+          if (propName.equals(\"prototype\")) {\n+            return false;\n+          }\n+          if (object.isName()) {\n+            Var var = t.getScope().getVar(object.getString());\n+            if (var != null &&\n+                isPrototype(var.getName(), t.getScopeRoot())) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}