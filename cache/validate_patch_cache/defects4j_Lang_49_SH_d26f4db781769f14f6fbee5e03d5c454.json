{
    "patch": "public Fraction reduce() {\n   int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n   if (gcd == 0) {\n      return Fraction.ZERO; // avoid divide by zero below\n   }\n   int reducedNumerator = numerator / gcd;\n   int reducedDenominator = denominator / gcd;\n   if (reducedDenominator < 0) {\n      reducedNumerator = -reducedNumerator;\n      reducedDenominator = -reducedDenominator;\n   }\n   if (gcd == 1) {\n      return this;\n   } else {\n      return new Fraction(reducedNumerator, reducedDenominator);\n   }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..3c50f35f 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,23 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+   int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+   if (gcd == 0) {\n+      return Fraction.ZERO; // avoid divide by zero below\n+   }\n+   int reducedNumerator = numerator / gcd;\n+   int reducedDenominator = denominator / gcd;\n+   if (reducedDenominator < 0) {\n+      reducedNumerator = -reducedNumerator;\n+      reducedDenominator = -reducedDenominator;\n+   }\n+   if (gcd == 1) {\n+      return this;\n+   } else {\n+      return new Fraction(reducedNumerator, reducedDenominator);\n+   }\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}