{
    "patch": "final boolean dstBound = offsetLocal != offsetAdjusted;\n\nif (dstBound) {\n    if (offsetLocal < offsetAdjusted) {\n        long nextAdjusted = nextTransition(instantAdjusted);\n        if (instantLocal >= nextAdjusted - offsetAdjusted) {\n            return offsetAdjusted;\n        } else {\n            long nextLocal = nextTransition(instantLocal - offsetLocal);\n            if (nextAdjusted != nextLocal + (offsetLocal - offsetAdjusted)) {\n                return offsetLocal;\n            }\n        }\n    } else {\n        long prevAdjusted = previousTransition(instantAdjusted);\n        if (instantLocal < prevAdjusted - offsetLocal) {\n            return offsetLocal;\n        } else {\n            long prevLocal = previousTransition(instantLocal - offsetLocal);\n            if (prevAdjusted != prevLocal + (offsetLocal - offsetAdjusted)) {\n                return offsetAdjusted;\n            }\n        }\n    }\n} else if (offsetLocal != 0 && getOffset(instantLocal - offsetLocal) < 0) {\n    long prevAdjusted = previousTransition(instantAdjusted);\n    long prevLocal = previousTransition(instantLocal - offsetLocal);\n    if (prevAdjusted <= prevLocal) {\n        long nextAdjusted = nextTransition(instantAdjusted);\n        long nextLocal = nextTransition(instantLocal - offsetLocal);\n        if (nextAdjusted > nextLocal) {\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..834ea145 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final boolean dstBound = offsetLocal != offsetAdjusted;\n+\n+if (dstBound) {\n+    if (offsetLocal < offsetAdjusted) {\n+        long nextAdjusted = nextTransition(instantAdjusted);\n+        if (instantLocal >= nextAdjusted - offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            long nextLocal = nextTransition(instantLocal - offsetLocal);\n+            if (nextAdjusted != nextLocal + (offsetLocal - offsetAdjusted)) {\n+                return offsetLocal;\n+            }\n+        }\n+    } else {\n+        long prevAdjusted = previousTransition(instantAdjusted);\n+        if (instantLocal < prevAdjusted - offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            long prevLocal = previousTransition(instantLocal - offsetLocal);\n+            if (prevAdjusted != prevLocal + (offsetLocal - offsetAdjusted)) {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+} else if (offsetLocal != 0 && getOffset(instantLocal - offsetLocal) < 0) {\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    long prevLocal = previousTransition(instantLocal - offsetLocal);\n+    if (prevAdjusted <= prevLocal) {\n+        long nextAdjusted = nextTransition(instantAdjusted);\n+        long nextLocal = nextTransition(instantLocal - offsetLocal);\n+        if (nextAdjusted > nextLocal) {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}