{
    "patch": "public class MyClass {\n    private Object value;\n    \n    public MyClass(Object value) {\n        this.value = value;\n    }\n    \n    public Object getValue() {\n        return value;\n    }\n    \n    public Object returnValueFor(Class<?> returnType) {\n        if (returnType.equals(int.class)) {\n            return (int) value;\n        } else if (returnType.equals(String.class)) {\n            return (String) value;\n        } else if (returnType.equals(Iterable.class)) {\n            return (Iterable<Object>) value;\n        } else {\n            return null;\n        }\n    }\n    \n    public static void main(String[] args) {\n        Iterable iterable = Arrays.asList(1, 2, 3);\n        MyClass values = new MyClass(iterable);\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext()); // this should pass now\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}