{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    boolean isCallArgument = parent.isCall() && nameNode == parent.getFirstChild();\n    boolean isAssignmentTarget =\n        parent.isAssign() && nameNode == parent.getFirstChild() && parent.getParent().isExprResult();\n    if (isCallArgument) {\n      // The caller expression is read and all arguments are flushed.\n      // Therefore, associate the RHS with the caller expression, regardless of\n      // whether the variable was already declared or not.\n      recordDepScope(parent.getFirstChild(), ns);\n    } else if (isAssignmentTarget || parent.isExprResult()) {\n      recordDepScope(recordNode, ns);\n    } else if (parent.isReturn()) {\n      // Propagate to function scope.\n      Node functionNode = NodeUtil.getEnclosingFunction(n);\n      if (functionNode != null) {\n        SymtabAccessor fnSymtabAccessor = getSymtabAccessor().getEnclosing(functionNode);\n        if (fnSymtabAccessor != null) {\n          fnSymtabAccessor.getDepScope().addReferencedName(ns.getName());\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..06cb54b7 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,33 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+  Node nameNode = n.getFirstChild();\n+  Node parent = n.getParent();\n+  NameInformation ns = createNameInformation(t, nameNode);\n+  if (ns != null) {\n+    boolean isCallArgument = parent.isCall() && nameNode == parent.getFirstChild();\n+    boolean isAssignmentTarget =\n+        parent.isAssign() && nameNode == parent.getFirstChild() && parent.getParent().isExprResult();\n+    if (isCallArgument) {\n+      // The caller expression is read and all arguments are flushed.\n+      // Therefore, associate the RHS with the caller expression, regardless of\n+      // whether the variable was already declared or not.\n+      recordDepScope(parent.getFirstChild(), ns);\n+    } else if (isAssignmentTarget || parent.isExprResult()) {\n+      recordDepScope(recordNode, ns);\n+    } else if (parent.isReturn()) {\n+      // Propagate to function scope.\n+      Node functionNode = NodeUtil.getEnclosingFunction(n);\n+      if (functionNode != null) {\n+        SymtabAccessor fnSymtabAccessor = getSymtabAccessor().getEnclosing(functionNode);\n+        if (fnSymtabAccessor != null) {\n+          fnSymtabAccessor.getDepScope().addReferencedName(ns.getName());\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}