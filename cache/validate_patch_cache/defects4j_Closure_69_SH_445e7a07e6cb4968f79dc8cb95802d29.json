{
    "patch": "if (thisType != null) {\n  if (child.isGetProp() || child.isGetElem()) {\n    Node getFirstChild = child.getFirstChild();\n    JSType firstChildType = getJSType(getFirstChild);\n    if (!firstChildType.isSubtypeOf(thisType)) {\n      // Only warn if the actual type being provided for 'this' is a\n      // proper supertype of the declared type, since a subtype would be\n      // acceptable here.\n      if (JSType.compare(firstChildType, thisType, compiler.getCommonTypes()) > 0) {\n        warnings.add(\n            JSError.make(\n                n,\n                THIS_TYPE_MISMATCH,\n                \"'this' used in method call is not a subtype of the method's 'this' type\"));\n      }\n    }\n  } else {\n    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..501c9358 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (thisType != null) {\n+  if (child.isGetProp() || child.isGetElem()) {\n+    Node getFirstChild = child.getFirstChild();\n+    JSType firstChildType = getJSType(getFirstChild);\n+    if (!firstChildType.isSubtypeOf(thisType)) {\n+      // Only warn if the actual type being provided for 'this' is a\n+      // proper supertype of the declared type, since a subtype would be\n+      // acceptable here.\n+      if (JSType.compare(firstChildType, thisType, compiler.getCommonTypes()) > 0) {\n+        warnings.add(\n+            JSError.make(\n+                n,\n+                THIS_TYPE_MISMATCH,\n+                \"'this' used in method call is not a subtype of the method's 'this' type\"));\n+      }\n+    }\n+  } else {\n+    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}