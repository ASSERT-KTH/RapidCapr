{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n            !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    Node array = arrayNode.getFirstChild();\n    if (array == null) {\n        parent.replaceChild(n, Node.newString(\"\"));\n        t.getCompiler().reportCodeChange();\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    if (joinString == null) {\n        return;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    Node elem = array;\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            String value = NodeUtil.getStringValue(elem).replace(\"\\\\\\\"\", \"\\\"\");\n            sb.append(value);\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(newStringNode(sb.toString()));\n                sb = new StringBuilder();\n            }\n            arrayFoldedChildren.add(elem);\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        arrayFoldedChildren.add(newStringNode(sb.toString()));\n    }\n\n    Node joined;\n    if (arrayFoldedChildren.size() == 1) {\n        joined = arrayFoldedChildren.get(0);\n    } else {\n        Node joinExpr = new Node(Token.STRINGLIT, new Node(Token.STRING, Node.newString(joinString)));\n        joinExpr = new Node(Token.ADD, joinExpr);\n        joined = arrayFoldedChildren.get(0);\n        elem = arrayFoldedChildren.get(1);\n        for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n            joined = new Node(Token.ADD, joined, joinExpr.cloneNode(), elem);\n            if (i + 1 < arrayFoldedChildren.size()) {\n                elem = arrayFoldedChildren.get(i + 1);\n            }\n        }\n    }\n\n    parent.replaceChild(n, joined);\n    t.getCompiler().reportCodeChange();\n}\n\nprivate Node newStringNode(String val) {\n    Node stringNode = Node.newString(val);\n    return new Node(Token.STRING, stringNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..35ae9d26 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,78 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n-\n     if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+            !functionName.getString().equals(\"join\")) {\n+        return;\n+    }\n+\n+    Node array = arrayNode.getFirstChild();\n+    if (array == null) {\n+        parent.replaceChild(n, Node.newString(\"\"));\n+        t.getCompiler().reportCodeChange();\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n+    if (joinString == null) {\n+        return;\n+    }\n+\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+    Node elem = array;\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (NodeUtil.isImmutableValue(elem)) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            String value = NodeUtil.getStringValue(elem).replace(\"\\\\\\\"\", \"\\\"\");\n+            sb.append(value);\n+        } else {\n+            if (sb.length() > 0) {\n+                arrayFoldedChildren.add(newStringNode(sb.toString()));\n+                sb = new StringBuilder();\n+            }\n+            arrayFoldedChildren.add(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+        elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+        arrayFoldedChildren.add(newStringNode(sb.toString()));\n+    }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+    Node joined;\n+    if (arrayFoldedChildren.size() == 1) {\n+        joined = arrayFoldedChildren.get(0);\n+    } else {\n+        Node joinExpr = new Node(Token.STRINGLIT, new Node(Token.STRING, Node.newString(joinString)));\n+        joinExpr = new Node(Token.ADD, joinExpr);\n+        joined = arrayFoldedChildren.get(0);\n+        elem = arrayFoldedChildren.get(1);\n+        for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n+            joined = new Node(Token.ADD, joined, joinExpr.cloneNode(), elem);\n+            if (i + 1 < arrayFoldedChildren.size()) {\n+                elem = arrayFoldedChildren.get(i + 1);\n+            }\n         }\n-        break;\n     }\n+\n+    parent.replaceChild(n, joined);\n     t.getCompiler().reportCodeChange();\n-  }\n+}\n+\n+private Node newStringNode(String val) {\n+    Node stringNode = Node.newString(val);\n+    return new Node(Token.STRING, stringNode);\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}