{
    "patch": "      Arrays.fill(coefficients, 0); // initialize all coefficients to 0\n      for (int i = 0; i < columnLabels.size(); i++) {\n          String columnLabel = columnLabels.get(i); // get column label\n          if (columnLabel.equals(RHS_COLUMN_LABEL)) {\n              // ignore RHS column\n              continue;\n          }\n          if (columnLabel.equals(NEGATIVE_VAR_COLUMN_LABEL)) {\n              // ignore negative variables column\n              continue;\n          }\n          int variableIndex = extractVariableIndex(columnLabel);\n          if (variableIndex >= 0) {\n              // column represents a decision variable\n              Integer basicRow = getBasicRow(i);\n              if (basicRow == null) {\n                  coefficients[variableIndex] = restrictToNonNegative ? 0 : -mostNegative;\n              } else {\n                  basicRows.add(basicRow);\n                  coefficients[variableIndex] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n              }\n          }\n      }\n\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n    \n    /**\n     * Helper function to extract variable index from column label.\n     * Returns -1 if label does not represent a variable.\n     */\n    private int extractVariableIndex(String columnLabel) {\n        try {\n            return Integer.parseInt(columnLabel.substring(1));\n        } catch (NumberFormatException e) {\n            return -1;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..88edf703f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,36 +393,43 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n+      Arrays.fill(coefficients, 0); // initialize all coefficients to 0\n+      for (int i = 0; i < columnLabels.size(); i++) {\n+          String columnLabel = columnLabels.get(i); // get column label\n+          if (columnLabel.equals(RHS_COLUMN_LABEL)) {\n+              // ignore RHS column\n+              continue;\n           }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+          if (columnLabel.equals(NEGATIVE_VAR_COLUMN_LABEL)) {\n+              // ignore negative variables column\n+              continue;\n+          }\n+          int variableIndex = extractVariableIndex(columnLabel);\n+          if (variableIndex >= 0) {\n+              // column represents a decision variable\n+              Integer basicRow = getBasicRow(i);\n+              if (basicRow == null) {\n+                  coefficients[variableIndex] = restrictToNonNegative ? 0 : -mostNegative;\n+              } else {\n+                  basicRows.add(basicRow);\n+                  coefficients[variableIndex] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n+              }\n           }\n       }\n+\n       return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n+    \n+    /**\n+     * Helper function to extract variable index from column label.\n+     * Returns -1 if label does not represent a variable.\n+     */\n+    private int extractVariableIndex(String columnLabel) {\n+        try {\n+            return Integer.parseInt(columnLabel.substring(1));\n+        } catch (NumberFormatException e) {\n+            return -1;\n+        }\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}