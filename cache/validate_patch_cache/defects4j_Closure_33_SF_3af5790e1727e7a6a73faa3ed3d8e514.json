{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  if (constraintObj instanceof NamedType && !((NamedType) constraintObj).getReferenceName().isEmpty()) {\n    return; // Skip named types\n  }\n\n  if (constraintObj.isRecordType() || constraintObj.isEnumType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = null;\n        if (hasProperty(prop)) {\n          typeToInfer = getPropertyType(prop);\n        } else if (!propType.isUnknownType() && !propType.isVoidType()) {\n          // If the object doesn't have a property with the same name,\n          // and the property type is not unknown or void, then we can\n          // safely infer its type based on the property type in the constraint.\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        }\n        if (typeToInfer != null) {\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a257e719 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,29 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n+public void matchConstraint(ObjectType constraintObj) {\n+  if (constraintObj instanceof NamedType && !((NamedType) constraintObj).getReferenceName().isEmpty()) {\n+    return; // Skip named types\n+  }\n+\n+  if (constraintObj.isRecordType() || constraintObj.isEnumType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = null;\n+        if (hasProperty(prop)) {\n+          typeToInfer = getPropertyType(prop);\n+        } else if (!propType.isUnknownType() && !propType.isVoidType()) {\n+          // If the object doesn't have a property with the same name,\n+          // and the property type is not unknown or void, then we can\n+          // safely infer its type based on the property type in the constraint.\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        if (typeToInfer != null) {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n }\n+}",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...er",
    "test_result": "FAIL"
}