{
    "patch": "public class StringCombiner {\n\n    private StringBuilder builder;\n    private String prefix;\n    private String suffix;\n    private String delimiter;\n\n    public StringCombiner(String delimiter, String prefix, String suffix) {\n        this.delimiter = delimiter;\n        this.prefix = prefix;\n        this.suffix = suffix;\n        this.builder = new StringBuilder();\n    }\n\n    public StringCombiner add(String element) {\n        if (builder.length() > 0) {\n            builder.append(delimiter);\n        }\n        builder.append(element);\n        return this;\n    }\n\n    public StringCombiner merge(StringCombiner other) {\n        if (other.builder.length() > 0) {\n            other.builder.insert(0, prefix);\n            other.builder.append(suffix);\n            if (builder.length() == 0) {\n                builder.append(other.builder);\n            } else {\n                builder.append(delimiter).append(other.builder);\n            }\n        }\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        return prefix + builder + suffix;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fb9a62258 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,46 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class StringCombiner {\n+\n+    private StringBuilder builder;\n+    private String prefix;\n+    private String suffix;\n+    private String delimiter;\n+\n+    public StringCombiner(String delimiter, String prefix, String suffix) {\n+        this.delimiter = delimiter;\n+        this.prefix = prefix;\n+        this.suffix = suffix;\n+        this.builder = new StringBuilder();\n+    }\n+\n+    public StringCombiner add(String element) {\n+        if (builder.length() > 0) {\n+            builder.append(delimiter);\n+        }\n+        builder.append(element);\n+        return this;\n+    }\n+\n+    public StringCombiner merge(StringCombiner other) {\n+        if (other.builder.length() > 0) {\n+            other.builder.insert(0, prefix);\n+            other.builder.append(suffix);\n+            if (builder.length() == 0) {\n+                builder.append(other.builder);\n+            } else {\n+                builder.append(delimiter).append(other.builder);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return prefix + builder + suffix;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}