{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType instanceType = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        instanceType = getNativeType(UNKNOWN_TYPE);\n      } else if (constructorType.isFunctionType()) {\n        instanceType = constructorType.toMaybeFunctionType().getPrototype();\n      } else if (constructorType.isNominalConstructor()) {\n        instanceType = constructorType.toMaybeObjectType().getConstructor();\n      }\n    }\n    if (instanceType == null) {\n      instanceType = getNativeType(OBJECT_TYPE);\n    }\n    n.setJSType(instanceType);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..b6e40c26 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,29 +1033,24 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n+    JSType instanceType = null;\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        instanceType = getNativeType(UNKNOWN_TYPE);\n+      } else if (constructorType.isFunctionType()) {\n+        instanceType = constructorType.toMaybeFunctionType().getPrototype();\n+      } else if (constructorType.isNominalConstructor()) {\n+        instanceType = constructorType.toMaybeObjectType().getConstructor();\n       }\n     }\n-    n.setJSType(type);\n+    if (instanceType == null) {\n+      instanceType = getNativeType(OBJECT_TYPE);\n+    }\n+    n.setJSType(instanceType);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}