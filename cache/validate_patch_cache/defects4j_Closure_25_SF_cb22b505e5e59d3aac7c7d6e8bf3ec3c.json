{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n\n  // Check if the constructor has a type\n  if (constructorType != null) {\n\n    // If the constructor has a function type, get the instance type of the constructor\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isFunctionType()) {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n\n    // If the constructor is called as a function, get the return type of the function\n    else if (constructor.isCall() && !constructor.isNew() && constructorType instanceof FunctionType) {\n      FunctionType ct = (FunctionType) constructorType;\n      type = ct.getReturnType();\n    }\n\n    // If the constructor is an enum, set the type as the enum type\n    else if (constructorType.isEnumType()) {\n      type = constructorType;\n    }\n  }\n\n  // If the type is still null, set it as the unknown type\n  if (type == null) {\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n\n  // Set the type of the node to the constructor's instance type\n  n.setJSType(type);\n\n  // Traverse the constructor's arguments\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..b71e43cf 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,50 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+\n+  // Check if the constructor has a type\n+  if (constructorType != null) {\n+\n+    // If the constructor has a function type, get the instance type of the constructor\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isFunctionType()) {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    // If the constructor is called as a function, get the return type of the function\n+    else if (constructor.isCall() && !constructor.isNew() && constructorType instanceof FunctionType) {\n+      FunctionType ct = (FunctionType) constructorType;\n+      type = ct.getReturnType();\n     }\n-    return scope;\n+\n+    // If the constructor is an enum, set the type as the enum type\n+    else if (constructorType.isEnumType()) {\n+      type = constructorType;\n+    }\n+  }\n+\n+  // If the type is still null, set it as the unknown type\n+  if (type == null) {\n+    type = getNativeType(UNKNOWN_TYPE);\n   }\n \n+  // Set the type of the node to the constructor's instance type\n+  n.setJSType(type);\n+\n+  // Traverse the constructor's arguments\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}