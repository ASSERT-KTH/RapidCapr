{
    "patch": "public <T> void resetMock(T mock) {\n    Class<?> mockClass = mock.getClass();\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    if (mockClass.getName().contains(\"EnhancerByMockitoWithCGLIB\")) {\n        try {\n            Field field = oldHandler.getClass().getDeclaredField(\"mockUtils\");\n            field.setAccessible(true);\n            Object value = field.get(oldHandler);\n            if (value instanceof Class) {\n                mockClass = (Class<?>) value;\n            }\n        } catch (NoSuchFieldException | IllegalAccessException ignored) {}\n    }\n    MockSettingsImpl mockSettings = new MockSettingsImpl();\n    mockSettings.defaultAnswer(RETURNS_DEFAULTS);\n    mockSettings.extraInterfaces(mockClass);\n    T resetMock = Mockito.mock(mockClass, mockSettings);\n    setMockHandler(resetMock, oldHandler);\n    setField(resetMock, \"mockitoInterceptor\", ((MockAccess) mock).getMockitoInterceptor());\n    setField(resetMock, \"$$delegator\", ((MockAccess) mock).getMockitoInterceptor().getDelegate());\n    setField(resetMock, \"$$dispatcher\", ((MockAccess) mock).getMockitoInterceptor().getInvocationDispatcher());\n    setField(resetMock, \"existingMockFields\", mockSettings.getExtraInterfaces());\n    setField(resetMock, \"mockSettings\", mockSettings);\n    setCallRealMethod(resetMock, mock);\n    BDDMockito.BDDMockitoReset.resetMockitoState();\n    ((MockAccess) mock).getMockSettings().getInvocationListeners().forEach(mockitoCore::addListener);\n    ((MockAccess) resetMock).setMockSettings(mockitoCore.getMockSettings(resetMock));\n    ((MockAccess) resetMock).setMockitoInterceptor(Mockito.framework().getInvocationHandler(resetMock));\n    ((MockAccess) resetMock).getMockitoInterceptor().setMock((MockAccess) resetMock);\n    ((MockAccess) resetMock).getMockitoInterceptor().setAdditionalInterceptors(Arrays.asList(new MockMethodInterceptor()));\n    ((MockAccess) resetMock).getMockitoInterceptor().setInvocationDispatcher(new MockMethodDispatcher());\n    ((MockAccess) resetMock).getMockitoInterceptor().validateInterceptionPlan();\n    setMockHandler(mock, getMockHandler(resetMock));\n    setField(mock, \"mockitoInterceptor\", ((MockAccess) resetMock).getMockitoInterceptor());\n    setField(mock, \"$$delegator\", ((MockAccess) resetMock).getMockitoInterceptor().getDelegate());\n    setField(mock, \"$$dispatcher\", ((MockAccess) resetMock).getMockitoInterceptor().getInvocationDispatcher());\n    setField(mock, \"existingMockFields\", mockSettings.getExtraInterfaces());\n    setField(mock, \"mockSettings\", mockSettings);\n    ((MockAccess) mock).setMockitoInterceptor(Mockito.framework().getInvocationHandler(mock));\n    ((MockAccess) mock).getMockitoInterceptor().setMock((MockAccess) mock);\n    ((MockAccess) mock).getMockitoInterceptor().setAdditionalInterceptors(Arrays.asList(new MockMethodInterceptor()));\n    ((MockAccess) mock).getMockitoInterceptor().setInvocationDispatcher(new MockMethodDispatcher());\n    ((MockAccess) mock).getMockitoInterceptor().validateInterceptionPlan();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e3ef9b3ab 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,51 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    Class<?> mockClass = mock.getClass();\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    if (mockClass.getName().contains(\"EnhancerByMockitoWithCGLIB\")) {\n+        try {\n+            Field field = oldHandler.getClass().getDeclaredField(\"mockUtils\");\n+            field.setAccessible(true);\n+            Object value = field.get(oldHandler);\n+            if (value instanceof Class) {\n+                mockClass = (Class<?>) value;\n+            }\n+        } catch (NoSuchFieldException | IllegalAccessException ignored) {}\n+    }\n+    MockSettingsImpl mockSettings = new MockSettingsImpl();\n+    mockSettings.defaultAnswer(RETURNS_DEFAULTS);\n+    mockSettings.extraInterfaces(mockClass);\n+    T resetMock = Mockito.mock(mockClass, mockSettings);\n+    setMockHandler(resetMock, oldHandler);\n+    setField(resetMock, \"mockitoInterceptor\", ((MockAccess) mock).getMockitoInterceptor());\n+    setField(resetMock, \"$$delegator\", ((MockAccess) mock).getMockitoInterceptor().getDelegate());\n+    setField(resetMock, \"$$dispatcher\", ((MockAccess) mock).getMockitoInterceptor().getInvocationDispatcher());\n+    setField(resetMock, \"existingMockFields\", mockSettings.getExtraInterfaces());\n+    setField(resetMock, \"mockSettings\", mockSettings);\n+    setCallRealMethod(resetMock, mock);\n+    BDDMockito.BDDMockitoReset.resetMockitoState();\n+    ((MockAccess) mock).getMockSettings().getInvocationListeners().forEach(mockitoCore::addListener);\n+    ((MockAccess) resetMock).setMockSettings(mockitoCore.getMockSettings(resetMock));\n+    ((MockAccess) resetMock).setMockitoInterceptor(Mockito.framework().getInvocationHandler(resetMock));\n+    ((MockAccess) resetMock).getMockitoInterceptor().setMock((MockAccess) resetMock);\n+    ((MockAccess) resetMock).getMockitoInterceptor().setAdditionalInterceptors(Arrays.asList(new MockMethodInterceptor()));\n+    ((MockAccess) resetMock).getMockitoInterceptor().setInvocationDispatcher(new MockMethodDispatcher());\n+    ((MockAccess) resetMock).getMockitoInterceptor().validateInterceptionPlan();\n+    setMockHandler(mock, getMockHandler(resetMock));\n+    setField(mock, \"mockitoInterceptor\", ((MockAccess) resetMock).getMockitoInterceptor());\n+    setField(mock, \"$$delegator\", ((MockAccess) resetMock).getMockitoInterceptor().getDelegate());\n+    setField(mock, \"$$dispatcher\", ((MockAccess) resetMock).getMockitoInterceptor().getInvocationDispatcher());\n+    setField(mock, \"existingMockFields\", mockSettings.getExtraInterfaces());\n+    setField(mock, \"mockSettings\", mockSettings);\n+    ((MockAccess) mock).setMockitoInterceptor(Mockito.framework().getInvocationHandler(mock));\n+    ((MockAccess) mock).getMockitoInterceptor().setMock((MockAccess) mock);\n+    ((MockAccess) mock).getMockitoInterceptor().setAdditionalInterceptors(Arrays.asList(new MockMethodInterceptor()));\n+    ((MockAccess) mock).getMockitoInterceptor().setInvocationDispatcher(new MockMethodDispatcher());\n+    ((MockAccess) mock).getMockitoInterceptor().validateInterceptionPlan();\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}