{
    "patch": "        boolean tryFirstOfYear = false;\n        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                // try parsing again, possibly in the next year\n                if (savedFields[i].iField.getType().equals(DateTimeFieldType.monthOfYear())\n                        && tryFirstOfYear == false) {\n                    tryFirstOfYear = true;\n                    // month is out-of-range\n                    // if it's the first field, try parsing in the next year\n                    SortingBucket bucket = new SortingBucket();\n                    bucket.count = count;\n                    System.arraycopy(savedFields, 0, bucket.elements, 0, count);\n                    bucket.year = iDefaultYear + 1;\n                    try {\n                        millis = bucket.setMillis(millis, resetFields);\n                        iDefaultYear = bucket.year;\n                        savedFields = bucket.elements;\n                        count = bucket.count;\n                    } catch (IllegalFieldValueException nextE) {\n                        // if we cannot parse next, throw first\n                        if (text != null) {\n                            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                        }\n                        throw e;\n                    }\n                } else {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2d0cf1b0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,41 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean tryFirstOfYear = false;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                // try parsing again, possibly in the next year\n+                if (savedFields[i].iField.getType().equals(DateTimeFieldType.monthOfYear())\n+                        && tryFirstOfYear == false) {\n+                    tryFirstOfYear = true;\n+                    // month is out-of-range\n+                    // if it's the first field, try parsing in the next year\n+                    SortingBucket bucket = new SortingBucket();\n+                    bucket.count = count;\n+                    System.arraycopy(savedFields, 0, bucket.elements, 0, count);\n+                    bucket.year = iDefaultYear + 1;\n+                    try {\n+                        millis = bucket.setMillis(millis, resetFields);\n+                        iDefaultYear = bucket.year;\n+                        savedFields = bucket.elements;\n+                        count = bucket.count;\n+                    } catch (IllegalFieldValueException nextE) {\n+                        // if we cannot parse next, throw first\n+                        if (text != null) {\n+                            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                        }\n+                        throw e;\n+                    }\n+                } else {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}