{
    "patch": "    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable or if the name has a declaration\n      if (name.type != Name.Type.OBJECTLIT && name.type != Name.Type.FUNCTION || name.getDeclaration() != null) {\n        continue;\n      }\n\n      // Skip names whose properties have been declared in a shorter scope\n      if (name.getAliasingGets() > 0 || name.getLocalSets() > 0 || name.getGlobalSets() > 1) {\n        continue;\n      }\n\n      if (name.getGlobalSets() == 1) {\n        // If the name is set only once in a global scope, find all its local\n        // references and try to inline them.\n        for (Ref ref : name.getRefs()) {\n          if (ref.getType() != Ref.Type.ALIASING_GET || !ref.getScope().isLocal()) {\n            continue;\n          }\n          \n          Name pname = ref.getName();\n          checkState(name.getAliasingGets() == 0); // We skip such names above\n\n          // If pname has an alias we can't inline inlineable's references\n          if (pname.getAliasingGets() > 0 || pname.getGlobalSets() > 0) {\n            continue;\n          }\n\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n\n      // Check if the name has any properties left.\n      if (name.getProps() != null && name.getProps().size() > 0) {\n        workList.addAll(name.getProps());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..0a5eb435 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,46 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      // Don't attempt to inline a getter or setter property as a variable or if the name has a declaration\n+      if (name.type != Name.Type.OBJECTLIT && name.type != Name.Type.FUNCTION || name.getDeclaration() != null) {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+      // Skip names whose properties have been declared in a shorter scope\n+      if (name.getAliasingGets() > 0 || name.getLocalSets() > 0 || name.getGlobalSets() > 1) {\n+        continue;\n+      }\n+\n+      if (name.getGlobalSets() == 1) {\n+        // If the name is set only once in a global scope, find all its local\n+        // references and try to inline them.\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.getType() != Ref.Type.ALIASING_GET || !ref.getScope().isLocal()) {\n+            continue;\n+          }\n+          \n+          Name pname = ref.getName();\n+          checkState(name.getAliasingGets() == 0); // We skip such names above\n+\n+          // If pname has an alias we can't inline inlineable's references\n+          if (pname.getAliasingGets() > 0 || pname.getGlobalSets() > 0) {\n+            continue;\n+          }\n+\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n           }\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n-    }\n-  }\n+      // Check if the name has any properties left.\n+      if (name.getProps() != null && name.getProps().size() > 0) {\n+        workList.addAll(name.getProps());\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}