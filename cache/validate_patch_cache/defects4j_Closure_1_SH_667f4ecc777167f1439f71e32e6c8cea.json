{
    "patch": "      // Remove unreferenced parameters from all CALL sites.\n      // i.e. not globalCalls, as we do not optimize them for such a large area.\n      for (Node callNode : callSites) {\n        if (NodeUtil.getFunctionType(callNode)\n            == Token.FUNCTION) {\n          // Ignore function expressions and arrow functions.\n          continue;\n        }\n\n        Node callerArgs = NodeUtil.getArgumentList(callNode);\n        int numArgsToRemove = callerArgs.getChildCount() - argList.getChildCount();\n        while (numArgsToRemove > 0) {\n          callerArgs.removeChild(callerArgs.getLastChild());\n          numArgsToRemove--;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0f370f20 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Remove unreferenced parameters from all CALL sites.\n+      // i.e. not globalCalls, as we do not optimize them for such a large area.\n+      for (Node callNode : callSites) {\n+        if (NodeUtil.getFunctionType(callNode)\n+            == Token.FUNCTION) {\n+          // Ignore function expressions and arrow functions.\n+          continue;\n+        }\n+\n+        Node callerArgs = NodeUtil.getArgumentList(callNode);\n+        int numArgsToRemove = callerArgs.getChildCount() - argList.getChildCount();\n+        while (numArgsToRemove > 0) {\n+          callerArgs.removeChild(callerArgs.getLastChild());\n+          numArgsToRemove--;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}