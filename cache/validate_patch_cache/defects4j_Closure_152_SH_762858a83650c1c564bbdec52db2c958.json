{
    "patch": "    JSType resolved = safeResolve(typeOfThis, t, scope);\n    if (resolved != null) {\n      if (resolved instanceof ObjectType) {\n        typeOfThis = (ObjectType) resolved;\n      } else {\n        t.report(JSError.make(n, TYPE_ALIAS_CYCLE,\n            \"typedef cycle involving type \" + resolved.toString()));\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..e37a2920 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,14 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolved = safeResolve(typeOfThis, t, scope);\n+    if (resolved != null) {\n+      if (resolved instanceof ObjectType) {\n+        typeOfThis = (ObjectType) resolved;\n+      } else {\n+        t.report(JSError.make(n, TYPE_ALIAS_CYCLE,\n+            \"typedef cycle involving type \" + resolved.toString()));\n+      }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}