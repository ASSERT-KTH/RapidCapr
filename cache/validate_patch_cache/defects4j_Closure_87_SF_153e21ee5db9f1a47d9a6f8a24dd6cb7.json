{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || n.getChildCount() != 1) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n\n  // Check if child node is an expression node or EXPR_RESULT\n  if (!NodeUtil.isExpressionNode(child) && \n      !(child.getType() == Token.EXPR_RESULT && NodeUtil.isExpressionNode(child.getFirstChild()))) {\n    return false;\n  }\n\n  // Traverse up the parent tree and check if the expression is inside a conditional, loop, or hook\n  Node parent = n.getParent();\n  while (parent != null && parent.getType() != Token.SCRIPT) {\n    int type = parent.getType();\n    if (type == Token.AND || type == Token.OR || type == Token.HOOK) {\n      return false;\n    }\n    if (NodeUtil.isLoopStructure(parent)) {\n      Node condition = NodeUtil.getConditionExpression(parent);\n      if (condition != null && NodeUtil.isExpressionNode(condition)) {\n        return false;\n      }\n      break;\n    }\n    if (type == Token.IF) {\n      Node condition = NodeUtil.getConditionExpression(parent);\n      if (condition != null && NodeUtil.isExpressionNode(condition)) {\n        return false;\n      }\n    }\n    parent = parent.getParent();\n  }\n\n  // Check for side effects and determine whether the block can be folded\n  if (child.getType() == Token.EXPR_RESULT) {\n    return !NodeUtil.mayHaveSideEffects(child.getFirstChild());\n  } else {\n    return !NodeUtil.mayHaveSideEffects(child);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..66b103fb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,49 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || n.getChildCount() != 1) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+\n+  // Check if child node is an expression node or EXPR_RESULT\n+  if (!NodeUtil.isExpressionNode(child) && \n+      !(child.getType() == Token.EXPR_RESULT && NodeUtil.isExpressionNode(child.getFirstChild()))) {\n+    return false;\n+  }\n+\n+  // Traverse up the parent tree and check if the expression is inside a conditional, loop, or hook\n+  Node parent = n.getParent();\n+  while (parent != null && parent.getType() != Token.SCRIPT) {\n+    int type = parent.getType();\n+    if (type == Token.AND || type == Token.OR || type == Token.HOOK) {\n+      return false;\n+    }\n+    if (NodeUtil.isLoopStructure(parent)) {\n+      Node condition = NodeUtil.getConditionExpression(parent);\n+      if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+        return false;\n+      }\n+      break;\n+    }\n+    if (type == Token.IF) {\n+      Node condition = NodeUtil.getConditionExpression(parent);\n+      if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+        return false;\n       }\n     }\n+    parent = parent.getParent();\n+  }\n \n-    return false;\n+  // Check for side effects and determine whether the block can be folded\n+  if (child.getType() == Token.EXPR_RESULT) {\n+    return !NodeUtil.mayHaveSideEffects(child.getFirstChild());\n+  } else {\n+    return !NodeUtil.mayHaveSideEffects(child);\n   }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}