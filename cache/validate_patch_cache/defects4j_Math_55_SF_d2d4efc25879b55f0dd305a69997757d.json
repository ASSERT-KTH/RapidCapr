{
    "patch": "    public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n        final double v1x = v1.getX();\n        final double v1y = v1.getY();\n        final double v1z = v1.getZ();\n        final double v2x = v2.getX();\n        final double v2y = v2.getY();\n        final double v2z = v2.getZ();\n\n        // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n        final double inv2 = 1.0 / (v2x * v2x + v2y * v2y + v2z * v2z);\n        final double rho = ((v1x * v2x + v1y * v2y + v1z * v2z) * inv2) * (1 << 24);\n\n        // compute v3 = v1 - rho v2 with high precision\n        final double v3x = MathUtils.reduce2pi(v1x - rho * v2x);\n        final double v3y = MathUtils.reduce2pi(v1y - rho * v2y);\n        final double v3z = MathUtils.reduce2pi(v1z - rho * v2z);\n\n        // compute cross product from v3 and v2 instead of v1 and v2\n        final double x = v3y * v2z - v3z * v2y;\n        final double y = v3z * v2x - v3x * v2z;\n        final double z = v3x * v2y - v3y * v2x;\n        return new Vector3D(x, y, z);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..6ef6376b6 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,23 +454,29 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+        final double v1x = v1.getX();\n+        final double v1y = v1.getY();\n+        final double v1z = v1.getZ();\n+        final double v2x = v2.getX();\n+        final double v2y = v2.getY();\n+        final double v2z = v2.getZ();\n+\n+        // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+        final double inv2 = 1.0 / (v2x * v2x + v2y * v2y + v2z * v2z);\n+        final double rho = ((v1x * v2x + v1y * v2y + v1z * v2z) * inv2) * (1 << 24);\n+\n+        // compute v3 = v1 - rho v2 with high precision\n+        final double v3x = MathUtils.reduce2pi(v1x - rho * v2x);\n+        final double v3y = MathUtils.reduce2pi(v1y - rho * v2y);\n+        final double v3z = MathUtils.reduce2pi(v1z - rho * v2z);\n+\n+        // compute cross product from v3 and v2 instead of v1 and v2\n+        final double x = v3y * v2z - v3z * v2y;\n+        final double y = v3z * v2x - v3x * v2z;\n+        final double z = v3x * v2y - v3y * v2x;\n+        return new Vector3D(x, y, z);\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}