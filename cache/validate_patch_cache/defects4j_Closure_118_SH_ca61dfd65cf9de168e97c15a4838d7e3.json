{
    "patch": "if (!prop.scheduleRenaming(child,\n                                processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n            else if (!firstPass || !prop.mayChangeName()) {\n              // If renaming fails on the first pass, or if the first pass is not\n              // used (in which case all properties may appear to change), then\n              // this is an error.\n              // In any case, mark the property as ineligible for renaming.\n              prop.markNameIneligible();\n              codeChanged = true;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..7bc0c1a9 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,23 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (!prop.scheduleRenaming(child,\n+                                processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+            else if (!firstPass || !prop.mayChangeName()) {\n+              // If renaming fails on the first pass, or if the first pass is not\n+              // used (in which case all properties may appear to change), then\n+              // this is an error.\n+              // In any case, mark the property as ineligible for renaming.\n+              prop.markNameIneligible();\n+              codeChanged = true;\n+            }\n+          }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}