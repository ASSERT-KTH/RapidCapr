{
    "patch": "public final String escapeCsv(String input) {\n    if (input == null || input.isEmpty()) {\n        return \"\";\n    }\n    StringBuilder result = new StringBuilder();\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, result, pos);\n        if (consumed == 0) {\n            int codePoint = input.codePointAt(pos);\n            if (Character.isSupplementaryCodePoint(codePoint)) {\n                String escaped = String.format(\"\\\\u%04X\\\\u%04X\", Character.highSurrogate(codePoint),\n                        Character.lowSurrogate(codePoint));\n                result.append(escaped);\n            } else {\n                result.append((char) codePoint);\n            }\n            pos += Character.charCount(codePoint);\n        } else {\n            pos += consumed;\n        }\n    }\n    return result.toString();\n}\n\npublic final int translate(CharSequence input, StringBuilder out, int index) {\n    // contract with translators is that they have to understand codepoints \n    int ch = Character.codePointAt(input, index);\n    if (ch > 0xffff) {\n        // write the surrogate pair as a single escape sequence\n        out.append(\"&#x\" + Integer.toHexString(ch) + \";\");\n        return 1;\n    }\n    switch (ch) {\n        case CSV_DELIMITER:\n            out.append(CSV_DELIMITER_ESCAPE);\n            return 1;\n        case CSV_CR:\n            out.append(CSV_CR_ESCAPE);\n            return 1;\n        case CSV_LF:\n            out.append(CSV_LF_ESCAPE);\n            return 1;\n        case DOUBLE_QUOTE:\n            out.append(DOUBLE_QUOTE_ESCAPE);\n            return 1;\n        case '\\'':\n            out.append(APOS_ESCAPE);\n            return 1;\n        default:\n            return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..60259fb5 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,60 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final String escapeCsv(String input) {\n+    if (input == null || input.isEmpty()) {\n+        return \"\";\n+    }\n+    StringBuilder result = new StringBuilder();\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, result, pos);\n+        if (consumed == 0) {\n+            int codePoint = input.codePointAt(pos);\n+            if (Character.isSupplementaryCodePoint(codePoint)) {\n+                String escaped = String.format(\"\\\\u%04X\\\\u%04X\", Character.highSurrogate(codePoint),\n+                        Character.lowSurrogate(codePoint));\n+                result.append(escaped);\n+            } else {\n+                result.append((char) codePoint);\n             }\n+            pos += Character.charCount(codePoint);\n+        } else {\n+            pos += consumed;\n         }\n     }\n+    return result.toString();\n+}\n+\n+public final int translate(CharSequence input, StringBuilder out, int index) {\n+    // contract with translators is that they have to understand codepoints \n+    int ch = Character.codePointAt(input, index);\n+    if (ch > 0xffff) {\n+        // write the surrogate pair as a single escape sequence\n+        out.append(\"&#x\" + Integer.toHexString(ch) + \";\");\n+        return 1;\n+    }\n+    switch (ch) {\n+        case CSV_DELIMITER:\n+            out.append(CSV_DELIMITER_ESCAPE);\n+            return 1;\n+        case CSV_CR:\n+            out.append(CSV_CR_ESCAPE);\n+            return 1;\n+        case CSV_LF:\n+            out.append(CSV_LF_ESCAPE);\n+            return 1;\n+        case DOUBLE_QUOTE:\n+            out.append(DOUBLE_QUOTE_ESCAPE);\n+            return 1;\n+        case '\\'':\n+            out.append(APOS_ESCAPE);\n+            return 1;\n+        default:\n+            return 0;\n+    }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}