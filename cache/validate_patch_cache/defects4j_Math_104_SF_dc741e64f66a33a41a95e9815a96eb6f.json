{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    double gcfVal = gcf(a, x);\n    double gserVal = gser(a, x);\n    return gcfVal * Math.exp(Math.log(x) * a - x - LogGamma.logGamma(a)) + gserVal;\n}\n\nprivate static double gcf(double a, double x) {\n    final int MAX_ITER = 1000;\n    final double EPSILON = 10e-15;\n    double g = 0.0;\n    double gp = 1.0;\n    double gOld = g;\n    double a0 = 1.0;\n    double a1 = x;\n    double b0 = 0.0;\n    double b1 = 1.0;\n    int m = 1;\n    while ((Math.abs((g - gOld) / g) > EPSILON) && (m <= MAX_ITER)) {\n        gOld = g;\n        double a2 = x * a1 + m * a0;\n        double b2 = x * b1 + m * b0;\n        if (b2 != 0.0) {\n            double tmp = b1 / b2;\n            g = tmp * a2 + a1 / b2;\n            a0 = a1;\n            a1 = a2;\n            b0 = b1;\n            b1 = b2;\n            m++;\n            gp = tmp;\n        } else {\n            g = a1 / b1;\n            a0 = a1;\n            a1 = a2;\n            b0 = b1;\n            b1 = b2;\n            m++;\n            gp = 1.0;\n        }\n    }\n    return g;\n}\n\nprivate static double gser(double a, double x) {\n    final int MAX_ITER = 1000;\n    final double EPSILON = 10e-15;\n    double g = 0.0;\n    double gOld = g;\n    int n = 1;\n    double a0 = 1.0 / a;\n    double a1 = a0;\n    double fac = a;\n    boolean continueIteration = true;\n    while (continueIteration && (n <= MAX_ITER)) {\n        gOld = g;\n        double an = n;\n        a1 *= x / an;\n        fac *= (a + n);\n        g += a1 / fac;\n        if (Math.abs((g - gOld) / g) < EPSILON) {\n            continueIteration = false;\n        }\n        n++;\n    }\n    return g * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..cb958f843 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,78 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    double gcfVal = gcf(a, x);\n+    double gserVal = gser(a, x);\n+    return gcfVal * Math.exp(Math.log(x) * a - x - LogGamma.logGamma(a)) + gserVal;\n+}\n+\n+private static double gcf(double a, double x) {\n+    final int MAX_ITER = 1000;\n+    final double EPSILON = 10e-15;\n+    double g = 0.0;\n+    double gp = 1.0;\n+    double gOld = g;\n+    double a0 = 1.0;\n+    double a1 = x;\n+    double b0 = 0.0;\n+    double b1 = 1.0;\n+    int m = 1;\n+    while ((Math.abs((g - gOld) / g) > EPSILON) && (m <= MAX_ITER)) {\n+        gOld = g;\n+        double a2 = x * a1 + m * a0;\n+        double b2 = x * b1 + m * b0;\n+        if (b2 != 0.0) {\n+            double tmp = b1 / b2;\n+            g = tmp * a2 + a1 / b2;\n+            a0 = a1;\n+            a1 = a2;\n+            b0 = b1;\n+            b1 = b2;\n+            m++;\n+            gp = tmp;\n+        } else {\n+            g = a1 / b1;\n+            a0 = a1;\n+            a1 = a2;\n+            b0 = b1;\n+            b1 = b2;\n+            m++;\n+            gp = 1.0;\n+        }\n+    }\n+    return g;\n+}\n+\n+private static double gser(double a, double x) {\n+    final int MAX_ITER = 1000;\n+    final double EPSILON = 10e-15;\n+    double g = 0.0;\n+    double gOld = g;\n+    int n = 1;\n+    double a0 = 1.0 / a;\n+    double a1 = a0;\n+    double fac = a;\n+    boolean continueIteration = true;\n+    while (continueIteration && (n <= MAX_ITER)) {\n+        gOld = g;\n+        double an = n;\n+        a1 *= x / an;\n+        fac *= (a + n);\n+        g += a1 / fac;\n+        if (Math.abs((g - gOld) / g) < EPSILON) {\n+            continueIteration = false;\n+        }\n+        n++;\n+    }\n+    return g * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}