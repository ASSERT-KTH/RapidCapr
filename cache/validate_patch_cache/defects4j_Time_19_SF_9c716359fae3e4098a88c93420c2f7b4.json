{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition.\n            // to fix this, we need to check for the possibility that\n            // there is an earlier transition which could affect the\n            // correct local offset at instantLocal.\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                // look for most recent transition that affects the correct local time for instantLocal\n                long prevTransition = previousTransition(instantAdjusted);\n                while (prevTransition > nextLocal) {\n                    int prevOffset = getOffset(prevTransition);\n                    int localOffset = getOffset(Math.max(instantAdjusted, prevTransition - prevOffset));\n                    if (localOffset == offsetLocal) {\n                        // we found the previous transition that affects the correct local time\n                        // so return its offset\n                        return prevOffset;\n                    }\n                    prevTransition = previousTransition(prevTransition);\n                }\n                // if we haven't found a previous transition that affects the correct local time,\n                // return the most recent offsetLocal\n                return offsetLocal;\n            }\n        } else if (offsetLocal > 0) {\n            // In some cases (e.g., when transitioning to DST from Standard time), the difference between\n            // the previous transition and the current instant could be greater than the difference\n            // between the current offsetLocal and the offset at the previous transition. In this\n            // case, we need to make sure we return the offset at the previous transition.\n            long prevTransition = previousTransition(instantAdjusted);\n            if (prevTransition < instantAdjusted) {\n                int offsetPrev = getOffset(prevTransition);\n                int diff = offsetPrev - offsetLocal;\n                if (instantAdjusted - prevTransition <= diff) {\n                    return offsetPrev;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..5ca511c6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -885,24 +885,41 @@ public abstract class DateTimeZone implements Serializable {\n         final int offsetAdjusted = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+            // if we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition.\n+            // to fix this, we need to check for the possibility that\n+            // there is an earlier transition which could affect the\n+            // correct local offset at instantLocal.\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                // look for most recent transition that affects the correct local time for instantLocal\n+                long prevTransition = previousTransition(instantAdjusted);\n+                while (prevTransition > nextLocal) {\n+                    int prevOffset = getOffset(prevTransition);\n+                    int localOffset = getOffset(Math.max(instantAdjusted, prevTransition - prevOffset));\n+                    if (localOffset == offsetLocal) {\n+                        // we found the previous transition that affects the correct local time\n+                        // so return its offset\n+                        return prevOffset;\n+                    }\n+                    prevTransition = previousTransition(prevTransition);\n                 }\n+                // if we haven't found a previous transition that affects the correct local time,\n+                // return the most recent offsetLocal\n+                return offsetLocal;\n             }\n         } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n+            // In some cases (e.g., when transitioning to DST from Standard time), the difference between\n+            // the previous transition and the current instant could be greater than the difference\n+            // between the current offsetLocal and the offset at the previous transition. In this\n+            // case, we need to make sure we return the offset at the previous transition.\n+            long prevTransition = previousTransition(instantAdjusted);\n+            if (prevTransition < instantAdjusted) {\n+                int offsetPrev = getOffset(prevTransition);\n                 int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n+                if (instantAdjusted - prevTransition <= diff) {\n                     return offsetPrev;\n                 }\n             }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}