{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class MathUtils {\n    public static double regularizedGammaP(double a, double x) {\n        final double epsilon = 1e-15;\n        final int maxIterations = 1000;\n        int iteration = 0;\n        double term = 1 / a;\n        double sum = term;\n        while (Math.abs(term) > epsilon && iteration < maxIterations) {\n            iteration++;\n            term *= x / (a + iteration);\n            sum += term;\n        }\n        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..16bcd2a67 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class MathUtils {\n+    public static double regularizedGammaP(double a, double x) {\n+        final double epsilon = 1e-15;\n+        final int maxIterations = 1000;\n+        int iteration = 0;\n+        double term = 1 / a;\n+        double sum = term;\n+        while (Math.abs(term) > epsilon && iteration < maxIterations) {\n+            iteration++;\n+            term *= x / (a + iteration);\n+            sum += term;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}