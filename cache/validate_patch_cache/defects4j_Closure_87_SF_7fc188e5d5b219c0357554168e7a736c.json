{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  Node parent = n.getParent();\n  if (n.getType() == Token.BLOCK\n      && parent != null\n      && (parent.getType() == Token.BLOCK\n          || parent.getType() == Token.SCRIPT\n          || parent.getType() == Token.LOOP)) {\n    if (n.getChildCount() == 1) {\n      Node child = n.getFirstChild();\n      switch (child.getType()) {\n        case Token.EXPR_VOID:\n          return false;\n        case Token.RETURN:\n          return isFoldable(child.getFirstChild());\n        case Token.EXPR_RESULT:\n          Node expr = child.getFirstChild();\n          return !(NodeUtil.isExpressionNode(expr) && NodeUtil.mayHaveSideEffects(expr))\n              && isFoldable(expr);\n        case Token.DO:\n        case Token.WHILE:\n        case Token.FOR:\n        case Token.IF:\n          return isControlStructureFoldable(child);\n        case Token.BLOCK:\n          return false;\n        default:\n          return isFoldable(child);\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isControlStructureFoldable(Node n) {\n  if (n.getType() == Token.IF\n      && n.getChildCount() == 2\n      && isFoldable(n.getFirstChild())\n      && isFoldable(n.getLastChild())) {\n    return true;\n  }\n  if (n.getType() == Token.WHILE && isFoldable(n.getLastChild())) {\n    return true;\n  }\n  if (n.getType() == Token.DO && isFoldable(n.getFirstChild())) {\n    return true;\n  }\n  if (n.getType() == Token.FOR) {\n    if (n.getLastChild() != null && isFoldable(n.getLastChild())) {\n      return true;\n    } else if (n.getChildCount() == 4) {\n      Node init = n.getFirstChild();\n      Node cond = init.getNext();\n      Node incr = cond.getNext();\n      Node body = incr.getNext();\n      return (isFoldable(cond) || cond.isEmpty())\n          && (isFoldable(body) || body.isBlock())\n          && (incr.isEmpty() || isFoldable(incr))\n          && (init.isEmpty() || isFoldable(init));\n    }\n  }\n  return false;\n}\n\nprivate boolean isFoldable(Node n) {\n  if (n == null) {\n    return true;\n  }\n  if (n.getType() == Token.TRUE) {\n    return true;\n  }\n  if (n.getType() == Token.NAME && \"undefined\".equals(n.getString())) {\n    return true;\n  }\n  if (n.getType() == Token.NOT && isFoldable(n.getFirstChild())) {\n    return true;\n  }\n  if (n.getType() == Token.AND || n.getType() == Token.OR) {\n    return isFoldable(n.getFirstChild()) && isFoldable(n.getLastChild());\n  }\n  if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n    return false;\n  }\n  if (n.getType() == Token.HOOK) {\n    return isFoldable(n.getSecondChild()) && isFoldable(n.getLastChild());\n  }\n  if (n.getType() == Token.ASSIGN) {\n    return isFoldable(n.getLastChild());\n  }\n  if (n.isCall() || n.isNew()) {\n    if (n.getFirstChild().getType() == Token.GETPROP) {\n      if (n.getFirstChild().getFirstChild().getType() == Token.NAME) {\n        if (n.getFirstChild().getFirstChild().getString().equals(\"Math\")) {\n          return n.getFirstChild().getLastChild().getType() == Token.NUMBER;\n        }\n      }\n    }\n  }\n  return NodeUtil.isExpressionNode(n) && !NodeUtil.mayHaveSideEffects(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..dad124b4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,105 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  Node parent = n.getParent();\n+  if (n.getType() == Token.BLOCK\n+      && parent != null\n+      && (parent.getType() == Token.BLOCK\n+          || parent.getType() == Token.SCRIPT\n+          || parent.getType() == Token.LOOP)) {\n+    if (n.getChildCount() == 1) {\n+      Node child = n.getFirstChild();\n+      switch (child.getType()) {\n+        case Token.EXPR_VOID:\n+          return false;\n+        case Token.RETURN:\n+          return isFoldable(child.getFirstChild());\n+        case Token.EXPR_RESULT:\n+          Node expr = child.getFirstChild();\n+          return !(NodeUtil.isExpressionNode(expr) && NodeUtil.mayHaveSideEffects(expr))\n+              && isFoldable(expr);\n+        case Token.DO:\n+        case Token.WHILE:\n+        case Token.FOR:\n+        case Token.IF:\n+          return isControlStructureFoldable(child);\n+        case Token.BLOCK:\n+          return false;\n+        default:\n+          return isFoldable(child);\n       }\n     }\n+  }\n+  return false;\n+}\n \n+private boolean isControlStructureFoldable(Node n) {\n+  if (n.getType() == Token.IF\n+      && n.getChildCount() == 2\n+      && isFoldable(n.getFirstChild())\n+      && isFoldable(n.getLastChild())) {\n+    return true;\n+  }\n+  if (n.getType() == Token.WHILE && isFoldable(n.getLastChild())) {\n+    return true;\n+  }\n+  if (n.getType() == Token.DO && isFoldable(n.getFirstChild())) {\n+    return true;\n+  }\n+  if (n.getType() == Token.FOR) {\n+    if (n.getLastChild() != null && isFoldable(n.getLastChild())) {\n+      return true;\n+    } else if (n.getChildCount() == 4) {\n+      Node init = n.getFirstChild();\n+      Node cond = init.getNext();\n+      Node incr = cond.getNext();\n+      Node body = incr.getNext();\n+      return (isFoldable(cond) || cond.isEmpty())\n+          && (isFoldable(body) || body.isBlock())\n+          && (incr.isEmpty() || isFoldable(incr))\n+          && (init.isEmpty() || isFoldable(init));\n+    }\n+  }\n+  return false;\n+}\n+\n+private boolean isFoldable(Node n) {\n+  if (n == null) {\n+    return true;\n+  }\n+  if (n.getType() == Token.TRUE) {\n+    return true;\n+  }\n+  if (n.getType() == Token.NAME && \"undefined\".equals(n.getString())) {\n+    return true;\n+  }\n+  if (n.getType() == Token.NOT && isFoldable(n.getFirstChild())) {\n+    return true;\n+  }\n+  if (n.getType() == Token.AND || n.getType() == Token.OR) {\n+    return isFoldable(n.getFirstChild()) && isFoldable(n.getLastChild());\n+  }\n+  if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n     return false;\n   }\n+  if (n.getType() == Token.HOOK) {\n+    return isFoldable(n.getSecondChild()) && isFoldable(n.getLastChild());\n+  }\n+  if (n.getType() == Token.ASSIGN) {\n+    return isFoldable(n.getLastChild());\n+  }\n+  if (n.isCall() || n.isNew()) {\n+    if (n.getFirstChild().getType() == Token.GETPROP) {\n+      if (n.getFirstChild().getFirstChild().getType() == Token.NAME) {\n+        if (n.getFirstChild().getFirstChild().getString().equals(\"Math\")) {\n+          return n.getFirstChild().getLastChild().getType() == Token.NUMBER;\n+        }\n+      }\n+    }\n+  }\n+  return NodeUtil.isExpressionNode(n) && !NodeUtil.mayHaveSideEffects(n);\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}