{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockitoFramework mockitoFramework = Mockito.framework();\n        MockHandlerFactory mockHandlerFactory = mockitoFramework.getClassicMockHandlerFactory();\n        MockMethodInterceptor mockMethodInterceptor = new MockMethodInterceptor(newMockHandler);\n        Class<T> mockClass = (Class<T>) mock.getClass();\n        MockMethodInterceptorFilter mockMethodInterceptorFilter = new MockMethodInterceptorFilter(\n            mockMethodInterceptor,\n            mockitoFramework.getSessionHandler(),\n            oldMockHandler,\n            mockitoFramework.getClassicAnswerFactory());\n        Object newMock = MockAccess.getMock(mockitoFramework, mockHandlerFactory, mockMethodInterceptorFilter, mockClass, mockitoFramework.getSessionHandler());\n        mockitoFramework.getMockSettings(newMock).copyDefaults(mock).build();\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..276dd5ee6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockitoFramework mockitoFramework = Mockito.framework();\n+        MockHandlerFactory mockHandlerFactory = mockitoFramework.getClassicMockHandlerFactory();\n+        MockMethodInterceptor mockMethodInterceptor = new MockMethodInterceptor(newMockHandler);\n+        Class<T> mockClass = (Class<T>) mock.getClass();\n+        MockMethodInterceptorFilter mockMethodInterceptorFilter = new MockMethodInterceptorFilter(\n+            mockMethodInterceptor,\n+            mockitoFramework.getSessionHandler(),\n+            oldMockHandler,\n+            mockitoFramework.getClassicAnswerFactory());\n+        Object newMock = MockAccess.getMock(mockitoFramework, mockHandlerFactory, mockMethodInterceptorFilter, mockClass, mockitoFramework.getSessionHandler());\n+        mockitoFramework.getMockSettings(newMock).copyDefaults(mock).build();\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}