{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalculate the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                if (offsetLocal > offsetAdjusted) {\n                    // we are in a gap\n                    long prevLocal = previousTransition(nextLocal - 1);\n                    long prevAdjusted = previousTransition(instantAdjusted);\n                    if (prevAdjusted < prevLocal) {\n                        return offsetLocal;\n                    } else {\n                        return offsetAdjusted;\n                    }\n                } else {\n                    // we are in an overlap\n                    long nextOverlap = nextTransition(nextLocal - 1);\n                    if (nextOverlap == instantLocal - offsetLocal) {\n                        // we are near the end of the overlap\n                        return offsetAdjusted;\n                    } else {\n                        // we are near the start of the overlap\n                        long prevOverlap = previousTransition(nextOverlap);\n                        if (instantLocal - offsetLocal >= nextOverlap + (nextAdjusted - offsetAdjusted)\n                                || instantLocal - offsetLocal < prevOverlap + (offsetLocal - getOffset(prevOverlap))) {\n                            return offsetLocal;\n                        } else {\n                            return offsetAdjusted;\n                        }\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1e408d06 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -879,21 +879,42 @@ public abstract class DateTimeZone implements Serializable {\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n+        // adjust instantLocal using the estimate and recalculate the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+            // if we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                if (offsetLocal > offsetAdjusted) {\n+                    // we are in a gap\n+                    long prevLocal = previousTransition(nextLocal - 1);\n+                    long prevAdjusted = previousTransition(instantAdjusted);\n+                    if (prevAdjusted < prevLocal) {\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                } else {\n+                    // we are in an overlap\n+                    long nextOverlap = nextTransition(nextLocal - 1);\n+                    if (nextOverlap == instantLocal - offsetLocal) {\n+                        // we are near the end of the overlap\n+                        return offsetAdjusted;\n+                    } else {\n+                        // we are near the start of the overlap\n+                        long prevOverlap = previousTransition(nextOverlap);\n+                        if (instantLocal - offsetLocal >= nextOverlap + (nextAdjusted - offsetAdjusted)\n+                                || instantLocal - offsetLocal < prevOverlap + (offsetLocal - getOffset(prevOverlap))) {\n+                            return offsetLocal;\n+                        } else {\n+                            return offsetAdjusted;\n+                        }\n+                    }\n                 }\n             }\n         }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}