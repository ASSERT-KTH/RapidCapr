{
    "patch": "public void testIssue701() {\n    String jscode = \"/**\\n\" +\n                    \" * @constructor\\n\" +\n                    \" * @extends {A}\\n\" +\n                    \" */\\n\" +\n                    \"function B() {\\n\" +\n                    \"  A.call(this);\\n\" +\n                    \"  this.bar_ = 0;\\n\" +\n                    \"}\\n\" +\n                    \"goog.inherits(B, A);\\n\" +\n                    \"/**\\n\" +\n                    \" * property bar already defined on superclass Foo; \" +\n                    \"use @override to override it\\n\" +\n                    \" */\\n\" + // Add @override annotation for the bar method in B class\n                    \"Foo.prototype.bar = function() {\\n\" +\n                    \"  return this.bar_;\\n\" +\n                    \"};\\n\" +\n                    \"/**\\n\" +\n                    \" * @return {?} Whatever\\n\" +\n                    \" */\\n\" +\n                    \"B.prototype.bar = function() {\\n\" +\n                    \"  return this.bar_;\\n\" +\n                    \"};\\n\";\n    Compiler lastCompiler = compile(jscode, false, WarningLevel.VERBOSE, ImmutableList.of(JSC_HIDDEN_SUPERCLASS_PROPERTY));\n    String result = lastCompiler.toSource();\n    assertEquals(jscode, result);\n    assertEquals(0, lastCompiler.getWarnings().size());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..2bf039b6 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,34 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n-\n-            return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+public void testIssue701() {\n+    String jscode = \"/**\\n\" +\n+                    \" * @constructor\\n\" +\n+                    \" * @extends {A}\\n\" +\n+                    \" */\\n\" +\n+                    \"function B() {\\n\" +\n+                    \"  A.call(this);\\n\" +\n+                    \"  this.bar_ = 0;\\n\" +\n+                    \"}\\n\" +\n+                    \"goog.inherits(B, A);\\n\" +\n+                    \"/**\\n\" +\n+                    \" * property bar already defined on superclass Foo; \" +\n+                    \"use @override to override it\\n\" +\n+                    \" */\\n\" + // Add @override annotation for the bar method in B class\n+                    \"Foo.prototype.bar = function() {\\n\" +\n+                    \"  return this.bar_;\\n\" +\n+                    \"};\\n\" +\n+                    \"/**\\n\" +\n+                    \" * @return {?} Whatever\\n\" +\n+                    \" */\\n\" +\n+                    \"B.prototype.bar = function() {\\n\" +\n+                    \"  return this.bar_;\\n\" +\n+                    \"};\\n\";\n+    Compiler lastCompiler = compile(jscode, false, WarningLevel.VERBOSE, ImmutableList.of(JSC_HIDDEN_SUPERCLASS_PROPERTY));\n+    String result = lastCompiler.toSource();\n+    assertEquals(jscode, result);\n+    assertEquals(0, lastCompiler.getWarnings().size());\n+}\n \n \n   /**",
    "result_reason": "error: method extractMultilineTextualBlock in class JsDocInfoParser cannot be applied to given types;",
    "test_result": "ERROR"
}