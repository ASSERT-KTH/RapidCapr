{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, VariableDeclaration decl) {\n    if (NodeUtil.isName(n)) {\n      boolean isRead = isVariableRead(n, decl);\n      boolean isKill = isVariableKill(n, decl);\n      if (isRead && isKill) {\n        return VariableLiveness.KILL;\n      } else if (isRead) {\n        return VariableLiveness.READ;\n      } else if (isKill) {\n        return VariableLiveness.KILL;\n      }\n    }\n\n    // Traverse the AST.\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) { // Not a FUNCTION node.\n        VariableLiveness state = isVariableReadBeforeKill(c, decl);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  private boolean isVariableRead(Node n, VariableDeclaration decl) {\n    // A variable is considered read if it is a use and not an assignment.\n    if (NodeUtil.isReferenceName(n) && !NodeUtil.isAssignedName(n)) {\n      return decl.hasSameName(n.getString());\n    }\n    return false;\n  }\n\n  private boolean isVariableKill(Node n, VariableDeclaration decl) {\n    // A variable is killed if it is directly assigned a new value, or if\n    // it is used as a reference in a compound assignment or increment.\n    if (NodeUtil.isLhs(n) && !NodeUtil.isAssignmentOp(n.getParent())) {\n      // The variable is being assigned a new value.\n      return decl.hasSameName(n.getString());\n    } else if (NodeUtil.isPostfixOrPrefixOp(n)) {\n      Node child = n.getFirstChild();\n      if (NodeUtil.isName(child)) {\n        // The variable is being incremented.\n        return decl.hasSameName(child.getString());\n      }\n    } else if (NodeUtil.isCompoundAssignmentOp(n)) {\n      Node lhs = n.getFirstChild();\n      if (NodeUtil.isName(lhs)) {\n        // The variable is being modified.\n        return decl.hasSameName(lhs.getString());\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..fc71fff3 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,60 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n+private VariableLiveness isVariableReadBeforeKill(\n+      Node n, VariableDeclaration decl) {\n+    if (NodeUtil.isName(n)) {\n+      boolean isRead = isVariableRead(n, decl);\n+      boolean isKill = isVariableKill(n, decl);\n+      if (isRead && isKill) {\n         return VariableLiveness.KILL;\n-      } else {\n+      } else if (isRead) {\n         return VariableLiveness.READ;\n+      } else if (isKill) {\n+        return VariableLiveness.KILL;\n       }\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+    // Traverse the AST.\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) { // Not a FUNCTION node.\n+        VariableLiveness state = isVariableReadBeforeKill(c, decl);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }\n       }\n     }\n+\n     return VariableLiveness.MAYBE_LIVE;\n   }\n+\n+  private boolean isVariableRead(Node n, VariableDeclaration decl) {\n+    // A variable is considered read if it is a use and not an assignment.\n+    if (NodeUtil.isReferenceName(n) && !NodeUtil.isAssignedName(n)) {\n+      return decl.hasSameName(n.getString());\n+    }\n+    return false;\n+  }\n+\n+  private boolean isVariableKill(Node n, VariableDeclaration decl) {\n+    // A variable is killed if it is directly assigned a new value, or if\n+    // it is used as a reference in a compound assignment or increment.\n+    if (NodeUtil.isLhs(n) && !NodeUtil.isAssignmentOp(n.getParent())) {\n+      // The variable is being assigned a new value.\n+      return decl.hasSameName(n.getString());\n+    } else if (NodeUtil.isPostfixOrPrefixOp(n)) {\n+      Node child = n.getFirstChild();\n+      if (NodeUtil.isName(child)) {\n+        // The variable is being incremented.\n+        return decl.hasSameName(child.getString());\n+      }\n+    } else if (NodeUtil.isCompoundAssignmentOp(n)) {\n+      Node lhs = n.getFirstChild();\n+      if (NodeUtil.isName(lhs)) {\n+        // The variable is being modified.\n+        return decl.hasSameName(lhs.getString());\n+      }\n+    }\n+    return false;\n+  }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}