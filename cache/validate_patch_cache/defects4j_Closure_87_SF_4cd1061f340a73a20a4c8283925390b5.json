{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr) &&\n                !NodeUtil.isFunctionExpression(maybeExpr) &&\n                maybeExpr.getType() != Token.OBJECTLIT &&\n                maybeExpr.getType() != Token.FUNCTION &&\n                maybeExpr.getType() != Token.REGEXP) {\n            Node grandparent = n.getParent().getParent();\n            if ((grandparent != null && grandparent.getType() == Token.EXPR_RESULT) ||\n                (grandparent.getType() == Token.IF && !NodeUtil.mayBeObjectLitProperty(n)) ||\n                (grandparent.getType() == Token.RETURN && maybeExpr.getType() != Token.ASSIGN)) {\n                return false;\n            }\n            Node parent = maybeExpr.getParent();\n            if (parent.getType() == Token.IF) {\n                return NodeUtil.mayBeObjectLitProperty(n);\n            }\n            if (parent.getType() == Token.EXPR_RESULT) {\n                Node grandparentExpr = parent.getParent();\n                if (grandparentExpr != null && grandparentExpr.getType() == Token.IF) {\n                    return false;\n                }\n                return true;\n            }\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..07ab8592 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,36 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (NodeUtil.isExpressionNode(maybeExpr) &&\n+                !NodeUtil.isFunctionExpression(maybeExpr) &&\n+                maybeExpr.getType() != Token.OBJECTLIT &&\n+                maybeExpr.getType() != Token.FUNCTION &&\n+                maybeExpr.getType() != Token.REGEXP) {\n+            Node grandparent = n.getParent().getParent();\n+            if ((grandparent != null && grandparent.getType() == Token.EXPR_RESULT) ||\n+                (grandparent.getType() == Token.IF && !NodeUtil.mayBeObjectLitProperty(n)) ||\n+                (grandparent.getType() == Token.RETURN && maybeExpr.getType() != Token.ASSIGN)) {\n+                return false;\n+            }\n+            Node parent = maybeExpr.getParent();\n+            if (parent.getType() == Token.IF) {\n+                return NodeUtil.mayBeObjectLitProperty(n);\n+            }\n+            if (parent.getType() == Token.EXPR_RESULT) {\n+                Node grandparentExpr = parent.getParent();\n+                if (grandparentExpr != null && grandparentExpr.getType() == Token.IF) {\n+                    return false;\n+                }\n+                return true;\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}