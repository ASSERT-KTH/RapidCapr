{
    "patch": "      int numArgs = argList.getChildCount();\n      Node lastArg;\n      do {\n        lastArg = argList.getLastChild();\n        if (lastArg == null) {\n          return;\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          checkState(lastArg.isName(), lastArg);\n          argList.removeChild(lastArg);\n          --numArgs;\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      } while (numArgs > 0);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cf3b5579 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int numArgs = argList.getChildCount();\n+      Node lastArg;\n+      do {\n+        lastArg = argList.getLastChild();\n+        if (lastArg == null) {\n+          return;\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          checkState(lastArg.isName(), lastArg);\n+          argList.removeChild(lastArg);\n+          --numArgs;\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      } while (numArgs > 0);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}