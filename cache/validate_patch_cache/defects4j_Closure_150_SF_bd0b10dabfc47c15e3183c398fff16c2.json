{
    "patch": "    @Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n        return ! (NodeUtil.isFunctionDeclaration(n) && parent != null && parent.isExport());\n    }\n\n    @Override public final void visit(NodeTraversal t, Node n, Node parent) {\n        switch (n.getToken()) {\n            case FUNCTION:\n                Node nameNode = n.getFirstChild();\n                if (nameNode.isQualifiedName()) {\n                    String functionName = nameNode.getQualifiedName();\n                    t.getScope().declareFunction(functionName, nameNode, n, getMetadata(t, n));\n                }\n                break;\n            case VAR:\n            case CONST:\n            case LET:\n                for (Node child : n.children()) {\n                    if (child.hasChildren()) {\n                        Node value = child.getFirstChild();\n                        if (value != null && value.isFunction()) {\n                            t.getScope().declareFunction(child.getString(), value.getFirstChild(), value, getMetadata(t, value));\n                        }\n                    }\n                } \n                break;\n            default:\n                break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f0bd3552 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,35 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    @Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+        return ! (NodeUtil.isFunctionDeclaration(n) && parent != null && parent.isExport());\n     }\n \n+    @Override public final void visit(NodeTraversal t, Node n, Node parent) {\n+        switch (n.getToken()) {\n+            case FUNCTION:\n+                Node nameNode = n.getFirstChild();\n+                if (nameNode.isQualifiedName()) {\n+                    String functionName = nameNode.getQualifiedName();\n+                    t.getScope().declareFunction(functionName, nameNode, n, getMetadata(t, n));\n+                }\n+                break;\n+            case VAR:\n+            case CONST:\n+            case LET:\n+                for (Node child : n.children()) {\n+                    if (child.hasChildren()) {\n+                        Node value = child.getFirstChild();\n+                        if (value != null && value.isFunction()) {\n+                            t.getScope().declareFunction(child.getString(), value.getFirstChild(), value, getMetadata(t, value));\n+                        }\n+                    }\n+                } \n+                break;\n+            default:\n+                break;\n+        }\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}