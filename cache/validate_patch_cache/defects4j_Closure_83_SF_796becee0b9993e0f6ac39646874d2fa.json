{
    "patch": "import org.kohsuke.args4j.CmdLineException;\nimport org.kohsuke.args4j.Localizable;\nimport org.kohsuke.args4j.Parameter;\nimport org.kohsuke.args4j.Parameters;\n\npublic class MyClass {\n    private boolean owner;\n  \n    @Parameter\n    private BooleanSetter setter = new BooleanSetter();\n\n    private final static String[] TRUES = {\"true\", \"yes\", \"on\", \"1\"};\n    private final static String[] FALSES = {\"false\", \"no\", \"off\", \"0\"};\n    \n    public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n\n        if (param == null) {\n            setter.addValue(true);\n            return 1;\n        } else {\n            String lowerParam = param.toLowerCase();\n            if (TRUES.contains(lowerParam)) {\n                setter.addValue(true);\n            } else if (FALSES.contains(lowerParam)) {\n                setter.addValue(false);\n            } else {\n                throw new CmdLineException(owner, new Localizable() {\n                    public String format(Object... args) {\n                        return \"Illegal value: \" + params.getParameter(0);\n                    }\n                });\n            }\n        }\n        return 1;\n    }\n}\n\nclass BooleanSetter {\n    public void addValue(Boolean value) {}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex f146b0e4..76e43d5e 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -330,25 +330,47 @@ public class CommandLineRunner extends\n       }\n \n       @Override\n-      public int parseArguments(Parameters params) throws CmdLineException {\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.Localizable;\n+import org.kohsuke.args4j.Parameter;\n+import org.kohsuke.args4j.Parameters;\n+\n+public class MyClass {\n+    private boolean owner;\n+  \n+    @Parameter\n+    private BooleanSetter setter = new BooleanSetter();\n+\n+    private final static String[] TRUES = {\"true\", \"yes\", \"on\", \"1\"};\n+    private final static String[] FALSES = {\"false\", \"no\", \"off\", \"0\"};\n+    \n+    public int parseArguments(Parameters params) throws CmdLineException {\n         String param = params.getParameter(0);\n \n         if (param == null) {\n-          setter.addValue(true);\n-          return 0;\n-        } else {\n-          String lowerParam = param.toLowerCase();\n-          if (TRUES.contains(lowerParam)) {\n-            setter.addValue(true);\n-          } else if (FALSES.contains(lowerParam)) {\n-            setter.addValue(false);\n-          } else {\n             setter.addValue(true);\n-            return 0;\n-          }\n-          return 1;\n+            return 1;\n+        } else {\n+            String lowerParam = param.toLowerCase();\n+            if (TRUES.contains(lowerParam)) {\n+                setter.addValue(true);\n+            } else if (FALSES.contains(lowerParam)) {\n+                setter.addValue(false);\n+            } else {\n+                throw new CmdLineException(owner, new Localizable() {\n+                    public String format(Object... args) {\n+                        return \"Illegal value: \" + params.getParameter(0);\n+                    }\n+                });\n+            }\n         }\n-      }\n+        return 1;\n+    }\n+}\n+\n+class BooleanSetter {\n+    public void addValue(Boolean value) {}\n+}\n \n       @Override\n       public String getDefaultMetaVariable() {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}