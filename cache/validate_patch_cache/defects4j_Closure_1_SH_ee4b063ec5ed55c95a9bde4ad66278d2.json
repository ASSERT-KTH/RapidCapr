{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argumentsNode = NodeUtil.getFunctionParameters(fnNode);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnNode);\n    if (!modifyCallers) {\n      Node lastArg = argumentsNode.getLastChild();\n      while (lastArg != null) {\n        Node prevArg = lastArg.getPrevious();\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var != null && !referenced.contains(var)) {\n          argumentsNode.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastArg = prevArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1ca3022b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argumentsNode = NodeUtil.getFunctionParameters(fnNode);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(fnNode);\n+    if (!modifyCallers) {\n+      Node lastArg = argumentsNode.getLastChild();\n+      while (lastArg != null) {\n+        Node prevArg = lastArg.getPrevious();\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var != null && !referenced.contains(var)) {\n+          argumentsNode.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+        lastArg = prevArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}