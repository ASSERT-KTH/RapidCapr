{
    "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '[') {\n            opening_brackets.add(i);\n        } else {\n            closing_brackets.add(i);\n        }\n    }\n    if (closing_brackets.size() < 2) {\n        return false;\n    }\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, j = opening_brackets.size() - 1;\n    boolean mismatch = false;\n    for (int idx : closing_brackets) {\n        if (i <= j && idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        } else {\n            mismatch = true;\n        }\n    }\n    if (cnt < 2 || mismatch || i != j + 1) {\n        return false;\n    }\n    int last_open = opening_brackets.get(j);\n    int first_close = closing_brackets.get(closing_brackets.size() - 1);\n    return last_open < first_close && !brackets.substring(last_open + 1, first_close).contains(\"[\");\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/IS_NESTED.java b/src/main/java/humaneval/buggy/IS_NESTED.java\nindex 28b9704..556b5ed 100644\n--- a/src/main/java/humaneval/buggy/IS_NESTED.java\n+++ b/src/main/java/humaneval/buggy/IS_NESTED.java\n@@ -18,21 +18,35 @@ import java.util.Collections;\n  */\n \n public class IS_NESTED {\n-    public static boolean is_nested(String brackets) {\n-        ArrayList<Integer> opening_brackets = new ArrayList<>();\n-        ArrayList<Integer> closing_brackets = new ArrayList<>();\n-        for(int i = 0; i < brackets.length(); i++) {\n-            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n-            else closing_brackets.add(i);\n+public static boolean is_nested(String brackets) {\n+    ArrayList<Integer> opening_brackets = new ArrayList<>();\n+    ArrayList<Integer> closing_brackets = new ArrayList<>();\n+    for (int i = 0; i < brackets.length(); i++) {\n+        if (brackets.charAt(i) == '[') {\n+            opening_brackets.add(i);\n+        } else {\n+            closing_brackets.add(i);\n         }\n-        Collections.reverse(opening_brackets);\n-        int cnt = 0, i = 0, l = opening_brackets.size();\n-        for(int idx : closing_brackets) {\n-            if(i < l || idx >= opening_brackets.get(i)) {\n-                i++;\n-                cnt++;\n-            }\n+    }\n+    if (closing_brackets.size() < 2) {\n+        return false;\n+    }\n+    Collections.reverse(opening_brackets);\n+    int cnt = 0, i = 0, j = opening_brackets.size() - 1;\n+    boolean mismatch = false;\n+    for (int idx : closing_brackets) {\n+        if (i <= j && idx >= opening_brackets.get(i)) {\n+            i++;\n+            cnt++;\n+        } else {\n+            mismatch = true;\n         }\n-        return cnt >= 2;\n     }\n+    if (cnt < 2 || mismatch || i != j + 1) {\n+        return false;\n+    }\n+    int last_open = opening_brackets.get(j);\n+    int first_close = closing_brackets.get(closing_brackets.size() - 1);\n+    return last_open < first_close && !brackets.substring(last_open + 1, first_close).contains(\"[\");\n+}\n }",
    "result_reason": "   TEST_IS_NESTED.test_0:6 expected:<true> but was:<false>",
    "test_result": "FAIL"
}