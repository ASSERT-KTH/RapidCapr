{
    "patch": "MockHandler<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMockSettingsImpl settings = new MockSettingsImpl();\nsettings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\nsettings.spiedInstance(mock);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\nMockitoEngine engine = ((MockitoContextImpl)Mockito.framework().mockitoContext()).getEngine();\nEngineInfo engineInfo = engine.getInfo();\n\n// Retrieve the correct stack depth to find the caller of the resetMock method\nStackTrace trace = new RuntimeException().getStackTrace();\nint resetMockDepth = -1;\nfor (int i = 0; i < trace.length; i++) {\n  if (trace[i].getMethodName().equals(\"resetMock\")) {\n    resetMockDepth = i;\n    break;\n  }\n}\n\nif (resetMockDepth == -1) {\n  throw new RuntimeException(\"resetMockDepth not found\");\n}\n\nMockitoCore mockitoCore = (MockitoCore)engineInfo.getCore();\nMockInvocationHandler<?> invocationHandler = MockitoCore.ANNOTATION_ENGINE.process(mock, mockitoCore.getDefaultAnswer(), settings.lenient());\nMockCreationSettings<?> newMockSettings = mockitoCore.getMockSettingsBuilder().createMockSettings(settings.build()).build(invocationHandler);\nmockitoCore.getMockHandlerFactory().resetMock(mock, newMockHandler, newFilter, newMockSettings, resetMockDepth + 1);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..34da03e60 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,36 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MockSettingsImpl settings = new MockSettingsImpl();\n+settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+settings.spiedInstance(mock);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+MockitoEngine engine = ((MockitoContextImpl)Mockito.framework().mockitoContext()).getEngine();\n+EngineInfo engineInfo = engine.getInfo();\n+\n+// Retrieve the correct stack depth to find the caller of the resetMock method\n+StackTrace trace = new RuntimeException().getStackTrace();\n+int resetMockDepth = -1;\n+for (int i = 0; i < trace.length; i++) {\n+  if (trace[i].getMethodName().equals(\"resetMock\")) {\n+    resetMockDepth = i;\n+    break;\n+  }\n+}\n+\n+if (resetMockDepth == -1) {\n+  throw new RuntimeException(\"resetMockDepth not found\");\n+}\n+\n+MockitoCore mockitoCore = (MockitoCore)engineInfo.getCore();\n+MockInvocationHandler<?> invocationHandler = MockitoCore.ANNOTATION_ENGINE.process(mock, mockitoCore.getDefaultAnswer(), settings.lenient());\n+MockCreationSettings<?> newMockSettings = mockitoCore.getMockSettingsBuilder().createMockSettings(settings.build()).build(invocationHandler);\n+mockitoCore.getMockHandlerFactory().resetMock(mock, newMockHandler, newFilter, newMockSettings, resetMockDepth + 1);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: variable oldMockHandler is already defined in method <T>resetMock(T)",
    "test_result": "ERROR"
}