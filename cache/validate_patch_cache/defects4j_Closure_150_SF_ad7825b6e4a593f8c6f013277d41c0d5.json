{
    "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  attachLiteralTypes(n);\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      if (parent.getType() == Token.ASSIGN\n          && parent.getFirstChild().getType() == Token.GETPROP\n          && NodeUtil.getBestLValueName(parent.getFirstChild().getLastChild()).equals(n.getFirstChild().getString())) {\n        // A function expression that is assigned to a property of an object will\n        // be visited as a node with a parent of ASSIGN. In this case, do not define the\n        // function as a variable.\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n    case Token.CONST:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..297d824f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,35 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+\n+  attachLiteralTypes(n);\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.NAME) {\n         return;\n       }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      if (parent.getType() == Token.ASSIGN\n+          && parent.getFirstChild().getType() == Token.GETPROP\n+          && NodeUtil.getBestLValueName(parent.getFirstChild().getLastChild()).equals(n.getFirstChild().getString())) {\n+        // A function expression that is assigned to a property of an object will\n+        // be visited as a node with a parent of ASSIGN. In this case, do not define the\n+        // function as a variable.\n+        return;\n       }\n-    }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+    case Token.CONST:\n+      defineVar(n, parent);\n+      break;\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}