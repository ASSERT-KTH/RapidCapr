{
    "patch": "attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.NAME:\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.FUNCTION:\n        if (parent != null && parent.getType() == Token.NAME) return;\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.FUNCTION) {\n          if (parent.getType() != Token.EXPR_RESULT) {\n            handleFunctionInputs(n.getFirstChild());\n          } else {\n            Node gparent = parent.getParent();\n            if (gparent.getType() == Token.BLOCK) {\n              handleFunctionInputs(n.getFirstChild());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7d584048 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionExpression(n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.FUNCTION:\n+        if (parent != null && parent.getType() == Token.NAME) return;\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.FUNCTION) {\n+          if (parent.getType() != Token.EXPR_RESULT) {\n+            handleFunctionInputs(n.getFirstChild());\n+          } else {\n+            Node gparent = parent.getParent();\n+            if (gparent.getType() == Token.BLOCK) {\n+              handleFunctionInputs(n.getFirstChild());\n+            }\n+          }\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}