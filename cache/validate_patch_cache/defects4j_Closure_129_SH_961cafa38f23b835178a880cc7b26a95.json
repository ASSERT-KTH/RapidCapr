{
    "patch": "      if (NodeUtil.isGet(first) && NodeUtil.isName(first.getFirstChild())) {\n        Node target = NodeUtil.getBestLValue(first);\n        if (target.getBooleanProp(Node.IS_NAMESPACE)) {\n          JSError error = JSError.make(first, CheckLevel.ERROR,\n              VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n          compiler.report(error);\n        }\n      } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..1ea32a3c 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,14 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      if (NodeUtil.isGet(first) && NodeUtil.isName(first.getFirstChild())) {\n+        Node target = NodeUtil.getBestLValue(first);\n+        if (target.getBooleanProp(Node.IS_NAMESPACE)) {\n+          JSError error = JSError.make(first, CheckLevel.ERROR,\n+              VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n+          compiler.report(error);\n+        }\n+      } else {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}