{
    "patch": "import com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CompilerInput;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.jscomp.TypedScope;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.TypeI;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nprivate void declareArguments(Node functionNode, TypedScope scope, AbstractCompiler compiler) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      Set<String> usedNames = new HashSet<String>();\n      for (Node astParameter : astParameters.children()) {\n        String paramName = astParameter.getString();\n        if (usedNames.contains(paramName)) {\n          throw new RuntimeException(\"Duplicate parameter name: \" + paramName);\n        }\n        usedNames.add(paramName);\n        if (jsDocParameter != null) {\n          defineSlot(astParameter, scope.getRootNode(),\n              jsDocParameter.getJSType(), true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, scope.getRootNode(), null, true);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..3f46ee32 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,43 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n-            }\n-          }\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CompilerInput;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.jscomp.TypedScope;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.TypeI;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+private void declareArguments(Node functionNode, TypedScope scope, AbstractCompiler compiler) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Node jsDocParameter = jsDocParameters.getFirstChild();\n+      Set<String> usedNames = new HashSet<String>();\n+      for (Node astParameter : astParameters.children()) {\n+        String paramName = astParameter.getString();\n+        if (usedNames.contains(paramName)) {\n+          throw new RuntimeException(\"Duplicate parameter name: \" + paramName);\n+        }\n+        usedNames.add(paramName);\n+        if (jsDocParameter != null) {\n+          defineSlot(astParameter, scope.getRootNode(),\n+              jsDocParameter.getJSType(), true);\n+          jsDocParameter = jsDocParameter.getNext();\n+        } else {\n+          defineSlot(astParameter, scope.getRootNode(), null, true);\n         }\n       }\n-    } // end declareArguments\n+    }\n+  }\n+}\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}