{
    "patch": "if (!constraintObj.hasReferenceName() && constraintObj.isRecordType()) {\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n            .getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n} else if (constraintObj.isFunctionType() && !constraintObj.hasReferenceName()) {\n  // Infer the types for the parameters of the function.\n  int paramCount = constraintObj.getParameterCount();\n  for (int i = 0; i < paramCount; i++) {\n    String paramName = constraintObj.getParameterName(i);\n    JSType paramType = constraintObj.getParameterType(i);\n    if (!isPropertyTypeDeclared(paramName)) {\n      defineInferredProperty(paramName, paramType, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..629d56bf 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,29 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.hasReferenceName() && constraintObj.isRecordType()) {\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(prop);\n+    if (!isPropertyTypeDeclared(prop)) {\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+            .getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+} else if (constraintObj.isFunctionType() && !constraintObj.hasReferenceName()) {\n+  // Infer the types for the parameters of the function.\n+  int paramCount = constraintObj.getParameterCount();\n+  for (int i = 0; i < paramCount; i++) {\n+    String paramName = constraintObj.getParameterName(i);\n+    JSType paramType = constraintObj.getParameterType(i);\n+    if (!isPropertyTypeDeclared(paramName)) {\n+      defineInferredProperty(paramName, paramType, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}