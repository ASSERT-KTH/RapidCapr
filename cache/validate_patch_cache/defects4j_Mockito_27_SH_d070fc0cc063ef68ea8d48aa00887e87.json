{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        InvocationHandler oldHandler = ((MockImpl) mock).getInvocationHandler();\n        ((MockImpl) mock).__setMockitoInterceptor(newFilter);\n        // Call to the oldHandler may trigger the finalization of the mock. For example, if the mock is\n        // being hold by a UI view which gets destroyed, then there is a high chance that this mock object\n        // gets garbage collected. By setting the new filters before we call the old handler we avoid any issues.\n        oldMockHandler.setHandler(newFilter);\n        newMockHandler.setHandler(oldHandler);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..97ea3b7b5 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        InvocationHandler oldHandler = ((MockImpl) mock).getInvocationHandler();\n+        ((MockImpl) mock).__setMockitoInterceptor(newFilter);\n+        // Call to the oldHandler may trigger the finalization of the mock. For example, if the mock is\n+        // being hold by a UI view which gets destroyed, then there is a high chance that this mock object\n+        // gets garbage collected. By setting the new filters before we call the old handler we avoid any issues.\n+        oldMockHandler.setHandler(newFilter);\n+        newMockHandler.setHandler(oldHandler);\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}