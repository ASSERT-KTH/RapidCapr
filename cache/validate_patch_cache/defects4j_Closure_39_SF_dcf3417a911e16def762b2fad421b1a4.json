{
    "patch": "  public boolean canBeCalled() {\n    return !isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      int i = 0;\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        Object propertyType = getPropertyType(property);\n        if (propertyType instanceof ObjectType) {\n          ObjectType objectType = (ObjectType) propertyType;\n          if (objectType.equals(this)) {\n            sb.append(\"{...}\");\n          } else {\n            sb.append(handleRecursiveTypes(objectType, new HashSet<>()));\n          }\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n\n  private String handleRecursiveTypes(ObjectType objectType, Set<ObjectType> seenTypes) {\n    if (seenTypes.contains(objectType)) {\n      return \"{...}\";\n    } else {\n      seenTypes.add(objectType);\n      String result = objectType.toStringHelper(false);\n      seenTypes.remove(objectType);\n      return result;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..777e39a9 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,7 +346,7 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n   @Override\n@@ -366,10 +366,10 @@ class PrototypeObjectType extends ObjectType {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n+      int i = 0;\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n-      int i = 0;\n       for (String property : propertyNames) {\n         if (i > 0) {\n           sb.append(\", \");\n@@ -377,7 +377,18 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+\n+        Object propertyType = getPropertyType(property);\n+        if (propertyType instanceof ObjectType) {\n+          ObjectType objectType = (ObjectType) propertyType;\n+          if (objectType.equals(this)) {\n+            sb.append(\"{...}\");\n+          } else {\n+            sb.append(handleRecursiveTypes(objectType, new HashSet<>()));\n+          }\n+        } else {\n+          sb.append(propertyType.toString());\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -395,6 +406,17 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n \n+  private String handleRecursiveTypes(ObjectType objectType, Set<ObjectType> seenTypes) {\n+    if (seenTypes.contains(objectType)) {\n+      return \"{...}\";\n+    } else {\n+      seenTypes.add(objectType);\n+      String result = objectType.toStringHelper(false);\n+      seenTypes.remove(objectType);\n+      return result;\n+    }\n+  }\n+\n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}