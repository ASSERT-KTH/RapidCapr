{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] expandedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = expandedSimplex;\n            } else {\n                simplex = replaceWorst(original, reflected, comparator);\n            }\n\n        } else {\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n            } else {\n                final RealPointValuePair[] contractedSimplex = contractInside(original, best, comparator);\n                if (comparator.compare(contractedSimplex[0], best) < 0) {\n                    simplex = contractedSimplex;\n                } else {\n                    simplex = shrinkSimplex(original, comparator);\n                }\n            }\n        }\n\n        // check convergence\n        if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n            return;\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] replaceWorst(final RealPointValuePair[] original,\n        final RealPointValuePair replacement,\n        final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] reflectedSimplex = Arrays.copyOf(original, original.length);\n    reflectedSimplex[original.length - 1] = replacement;\n\n    Arrays.sort(reflectedSimplex, comparator);\n    return reflectedSimplex;\n\n}\n\nprivate RealPointValuePair[] contractInside(final RealPointValuePair[] simplex, \n        final RealPointValuePair best, \n        final Comparator<RealPointValuePair> comparator) {\n\n    final double[] xSmallest = simplex[0].getPoint();\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n    contractedSimplex[0] = simplex[0];\n\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] x = simplex[i].getPoint();\n        final double[] contracted = new double[x.length];\n        for (int j = 0; j < x.length; j++) {\n            contracted[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n        }\n\n        final double v = evaluateObjective(contracted);\n        contractedSimplex[i] = new RealPointValuePair(contracted, v);\n    }\n\n    Arrays.sort(contractedSimplex, comparator);\n    return contractedSimplex;\n\n}\n\nprivate RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original, \n        final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[original.length];\n    final double[] xSmallest = original[0].getPoint();\n    reflectedSimplex[0] = original[0];\n\n    for (int i = 1; i < original.length; i++) {\n        final double[] x = original[i].getPoint();\n        final double[] shrunken = new double[x.length];\n        for (int j = 0; j < x.length; j++) {\n            shrunken[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n        }\n        final double value = evaluateObjective(shrunken);\n        reflectedSimplex[i] = new RealPointValuePair(shrunken, value);\n    }\n\n    Arrays.sort(reflectedSimplex, comparator);\n    return reflectedSimplex;\n\n}\n\nprivate boolean isConverged(final RealPointValuePair best, final RealPointValuePair worst) {\n    return getConvergenceChecker().converged(getIterations(), best, worst);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6f8eaf96c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,115 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            // compute the expanded simplex\n+            final RealPointValuePair[] expandedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = expandedSimplex;\n+            } else {\n+                simplex = replaceWorst(original, reflected, comparator);\n+            }\n+\n+        } else {\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(contracted, best) < 0) {\n+                simplex = replaceWorst(original, contracted, comparator);\n+            } else {\n+                final RealPointValuePair[] contractedSimplex = contractInside(original, best, comparator);\n+                if (comparator.compare(contractedSimplex[0], best) < 0) {\n+                    simplex = contractedSimplex;\n+                } else {\n+                    simplex = shrinkSimplex(original, comparator);\n                 }\n+            }\n+        }\n \n-                return;\n+        // check convergence\n+        if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n+            return;\n+        }\n \n-            }\n+    }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+}\n \n-            // check convergence\n-                return;\n-            }\n+private RealPointValuePair[] replaceWorst(final RealPointValuePair[] original,\n+        final RealPointValuePair replacement,\n+        final Comparator<RealPointValuePair> comparator) {\n+\n+    final RealPointValuePair[] reflectedSimplex = Arrays.copyOf(original, original.length);\n+    reflectedSimplex[original.length - 1] = replacement;\n+\n+    Arrays.sort(reflectedSimplex, comparator);\n+    return reflectedSimplex;\n+\n+}\n \n+private RealPointValuePair[] contractInside(final RealPointValuePair[] simplex, \n+        final RealPointValuePair best, \n+        final Comparator<RealPointValuePair> comparator) {\n+\n+    final double[] xSmallest = simplex[0].getPoint();\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n+    contractedSimplex[0] = simplex[0];\n+\n+    for (int i = 1; i < simplex.length; i++) {\n+        final double[] x = simplex[i].getPoint();\n+        final double[] contracted = new double[x.length];\n+        for (int j = 0; j < x.length; j++) {\n+            contracted[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n         }\n \n+        final double v = evaluateObjective(contracted);\n+        contractedSimplex[i] = new RealPointValuePair(contracted, v);\n     }\n \n+    Arrays.sort(contractedSimplex, comparator);\n+    return contractedSimplex;\n+\n+}\n+\n+private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original, \n+        final Comparator<RealPointValuePair> comparator) {\n+\n+    final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[original.length];\n+    final double[] xSmallest = original[0].getPoint();\n+    reflectedSimplex[0] = original[0];\n+\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] x = original[i].getPoint();\n+        final double[] shrunken = new double[x.length];\n+        for (int j = 0; j < x.length; j++) {\n+            shrunken[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n+        }\n+        final double value = evaluateObjective(shrunken);\n+        reflectedSimplex[i] = new RealPointValuePair(shrunken, value);\n+    }\n+\n+    Arrays.sort(reflectedSimplex, comparator);\n+    return reflectedSimplex;\n+\n+}\n+\n+private boolean isConverged(final RealPointValuePair best, final RealPointValuePair worst) {\n+    return getConvergenceChecker().converged(getIterations(), best, worst);\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}