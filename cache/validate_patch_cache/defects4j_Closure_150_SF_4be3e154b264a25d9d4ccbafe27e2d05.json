{
    "patch": "      \n      attachLiteralTypes(n);\n      \n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n) || \n              (NodeUtil.isFunctionExpression(n) && !NodeUtil.isAssignmentTarget(n)))  {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n  \n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        \n        case Token.LP:\n          if (parent.getType() == Token.FUNCTION && \n              n.getNext().getType() == Token.BLOCK &&\n              NodeUtil.isFunctionExpression(parent) &&\n              parent.getParent().getType() != Token.ASSIGN) {\n            handleFunctionInputs(n.getNext().getFirstChild());\n          }\n          break;\n        \n        case Token.VAR:\n          defineVar(n, parent);\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9b56af47 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,33 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n+      \n       attachLiteralTypes(n);\n+      \n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionDeclaration(n) || \n+              (NodeUtil.isFunctionExpression(n) && !NodeUtil.isAssignmentTarget(n)))  {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n+  \n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n+        \n+        case Token.LP:\n+          if (parent.getType() == Token.FUNCTION && \n+              n.getNext().getType() == Token.BLOCK &&\n+              NodeUtil.isFunctionExpression(parent) &&\n+              parent.getParent().getType() != Token.ASSIGN) {\n+            handleFunctionInputs(n.getNext().getFirstChild());\n+          }\n+          break;\n+        \n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n-    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}