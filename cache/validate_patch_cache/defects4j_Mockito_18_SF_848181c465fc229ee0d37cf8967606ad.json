{
    "patch": "public class MyClass {\n    \n    public static String myFunc(String s) {\n        if (s == null) {\n            return null;\n        }\n        String result = \"\";\n        int length = Math.min(30, s.length());\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                result += Character.toUpperCase(c);\n            } else if (Character.isDigit(c)) {\n                result += c;\n            } else {\n                result += \"-\";\n            }\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..6a148d183 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    \n+    public static String myFunc(String s) {\n+        if (s == null) {\n+            return null;\n+        }\n+        String result = \"\";\n+        int length = Math.min(30, s.length());\n+        for (int i = 0; i < length; i++) {\n+            char c = s.charAt(i);\n+            if (Character.isLetter(c)) {\n+                result += Character.toUpperCase(c);\n+            } else if (Character.isDigit(c)) {\n+                result += c;\n+            } else {\n+                result += \"-\";\n+            }\n+        }\n+        return result;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}