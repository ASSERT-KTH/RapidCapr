{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n                simplex = contractedSimplex;\n                return;\n            }\n\n            // perform a shrink step\n            final RealPointValuePair[] shrinkedSimplex = simplex;\n            for (int i = 1; i < simplex.length; i++) {\n                final double[] contractedPoint = simplex[i].getPointRef();\n                for (int j = 0; j < contractedPoint.length; j++) {\n                    contractedPoint[j] = best.getPoint()[j] + delta * (contractedPoint[j] - best.getPoint()[j]);\n                }\n                simplex[i] = new RealPointValuePair(contractedPoint,\n                                                    Double.NaN,\n                                                    false);\n            }\n            evaluateSimplex(comparator);\n\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..1b4dfa96a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,27 +75,42 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n                 return;\n-\n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n-            // check convergence\n+                simplex = contractedSimplex;\n                 return;\n             }\n \n-        }\n+            // perform a shrink step\n+            final RealPointValuePair[] shrinkedSimplex = simplex;\n+            for (int i = 1; i < simplex.length; i++) {\n+                final double[] contractedPoint = simplex[i].getPointRef();\n+                for (int j = 0; j < contractedPoint.length; j++) {\n+                    contractedPoint[j] = best.getPoint()[j] + delta * (contractedPoint[j] - best.getPoint()[j]);\n+                }\n+                simplex[i] = new RealPointValuePair(contractedPoint,\n+                                                    Double.NaN,\n+                                                    false);\n+            }\n+            evaluateSimplex(comparator);\n \n+        }\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}