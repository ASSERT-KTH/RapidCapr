{
    "patch": "// Retrieve date values\nKeyValue[] values= new KeyValue[strategies.length];\nint i = 0;\nfor (Strategy strategy : strategies) {\n    values[i] = strategy.extractFrom(this, parsePattern, dateStrs, cal);\n    i++;\n}\n// Create the date\ncal.clear();\nfor (KeyValue value : values) {\n    value.decrementStrategyAmount(cal);\n}\nreturn cal.getTime();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..ae988348 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,19 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+// Retrieve date values\n+KeyValue[] values= new KeyValue[strategies.length];\n+int i = 0;\n+for (Strategy strategy : strategies) {\n+    values[i] = strategy.extractFrom(this, parsePattern, dateStrs, cal);\n+    i++;\n+}\n+// Create the date\n+cal.clear();\n+for (KeyValue value : values) {\n+    value.decrementStrategyAmount(cal);\n+}\n+return cal.getTime();\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}