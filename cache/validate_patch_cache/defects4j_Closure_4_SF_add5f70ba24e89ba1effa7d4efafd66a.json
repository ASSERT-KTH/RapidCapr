{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n  boolean implicitPrototypeCycle = detectImplicitPrototypeCycle();\n  boolean resolved = resolveViaRegistry(errorReporter, enclosingScope);\n\n  // Check if the type is resolved\n  if (!resolved) {\n    // Try resolving the type via properties\n    resolveViaProperties(errorReporter, enclosingScope);\n    resolved = isResolved();\n  }\n\n  if (resolved && implicitPrototypeCycle) {\n    handleTypeCycle(errorReporter);\n  }\n\n  // Call super.resolveInternal only if the type is resolved\n  if (resolved) {\n    super.resolveInternal(errorReporter, enclosingScope);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    return super.resolveInternal(errorReporter, enclosingScope);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..ddb8751f 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,30 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n+  boolean implicitPrototypeCycle = detectImplicitPrototypeCycle();\n+  boolean resolved = resolveViaRegistry(errorReporter, enclosingScope);\n+\n+  // Check if the type is resolved\n+  if (!resolved) {\n+    // Try resolving the type via properties\n+    resolveViaProperties(errorReporter, enclosingScope);\n+    resolved = isResolved();\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  if (resolved && implicitPrototypeCycle) {\n+    handleTypeCycle(errorReporter);\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+  // Call super.resolveInternal only if the type is resolved\n+  if (resolved) {\n+    super.resolveInternal(errorReporter, enclosingScope);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    return super.resolveInternal(errorReporter, enclosingScope);\n   }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}