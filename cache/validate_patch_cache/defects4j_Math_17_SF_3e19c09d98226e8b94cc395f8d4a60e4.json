{
    "patch": "    public Dfp multiply(final int x) {\n        if(isNaN()) {\n            return newInstance(getField(), signalNaN());\n        }\n        Dfp result = newInstance(this);\n        result.exp = exp + FastMath.log(x);\n        result = result.round(0);\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..57dfd003c 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,13 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if(isNaN()) {\n+            return newInstance(getField(), signalNaN());\n+        }\n+        Dfp result = newInstance(this);\n+        result.exp = exp + FastMath.log(x);\n+        result = result.round(0);\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}