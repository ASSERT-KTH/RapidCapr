{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type genericType = field.getGenericType();\n\n    // If generic type is not a parameterized type, return Object.class\n    if (!(genericType instanceof ParameterizedType)) {\n        return Object.class;\n    }\n\n    ParameterizedType parameterizedType = (ParameterizedType) genericType;\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n    // If the actual type arguments are empty, return Object.class\n    if (actualTypeArguments.length == 0) {\n        return Object.class;\n    }\n\n    // Recursively get the raw type of the parameterized type\n    Type actualType = actualTypeArguments[0];\n    while (actualType instanceof ParameterizedType) {\n        actualType = ((ParameterizedType) actualType).getRawType();\n    }\n\n    // If the actual type is a class, return it\n    if (actualType instanceof Class<?>) {\n        return (Class<?>) actualType;\n    }\n\n    // Otherwise, return Object.class\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..69acc819e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,34 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type genericType = field.getGenericType();\n+\n+    // If generic type is not a parameterized type, return Object.class\n+    if (!(genericType instanceof ParameterizedType)) {\n+        return Object.class;\n+    }\n+\n+    ParameterizedType parameterizedType = (ParameterizedType) genericType;\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+\n+    // If the actual type arguments are empty, return Object.class\n+    if (actualTypeArguments.length == 0) {\n+        return Object.class;\n+    }\n+\n+    // Recursively get the raw type of the parameterized type\n+    Type actualType = actualTypeArguments[0];\n+    while (actualType instanceof ParameterizedType) {\n+        actualType = ((ParameterizedType) actualType).getRawType();\n+    }\n+\n+    // If the actual type is a class, return it\n+    if (actualType instanceof Class<?>) {\n+        return (Class<?>) actualType;\n+    }\n+\n+    // Otherwise, return Object.class\n+    return Object.class;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}