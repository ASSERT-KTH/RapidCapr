{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the initial offset at the instantLocal\n    int initialOffset = getOffset(instantLocal);\n\n    // calculate the adjusted instantLocal by subtracting the initial offset\n    long adjustedInstant = instantLocal - initialOffset;\n\n    // get the offset at the adjusted instantLocal\n    int adjustedOffset = getOffset(adjustedInstant);\n\n    if (initialOffset != adjustedOffset) {\n        long nextTransitionLocal = nextTransition(instantLocal);\n        long nextTransitionAdjusted = nextTransition(adjustedInstant);\n\n        if (nextTransitionLocal == nextTransitionAdjusted) {\n            // we are on a transition boundary, return initial offset\n            return initialOffset;\n        } else {\n            // we need to check if the difference in offsets is due to a DST transition\n            long previousTransitionLocal = previousTransition(nextTransitionLocal - 1);\n            long previousTransitionAdjusted = previousTransition(nextTransitionAdjusted - 1);\n\n            if (previousTransitionLocal != previousTransitionAdjusted) {\n                // we have a DST transition and need to determine which side of the transition we are on\n                int previousOffsetLocal = getOffset(previousTransitionLocal);\n                boolean isPositiveShift = adjustedInstant >= previousTransitionAdjusted;\n                long nextTransition = isPositiveShift ? nextTransitionAdjusted : previousTransitionAdjusted;\n                int offsetAtTransition = getOffset(nextTransition - (isPositiveShift ? 1 : -1));\n\n                if (initialOffset == previousOffsetLocal || initialOffset == offsetAtTransition) {\n                    return isPositiveShift ? offsetAtTransition : previousOffsetLocal;\n                }\n            }\n        }\n    }\n\n    return adjustedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..682aec63 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the initial offset at the instantLocal\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // calculate the adjusted instantLocal by subtracting the initial offset\n+    long adjustedInstant = instantLocal - initialOffset;\n+\n+    // get the offset at the adjusted instantLocal\n+    int adjustedOffset = getOffset(adjustedInstant);\n+\n+    if (initialOffset != adjustedOffset) {\n+        long nextTransitionLocal = nextTransition(instantLocal);\n+        long nextTransitionAdjusted = nextTransition(adjustedInstant);\n+\n+        if (nextTransitionLocal == nextTransitionAdjusted) {\n+            // we are on a transition boundary, return initial offset\n+            return initialOffset;\n+        } else {\n+            // we need to check if the difference in offsets is due to a DST transition\n+            long previousTransitionLocal = previousTransition(nextTransitionLocal - 1);\n+            long previousTransitionAdjusted = previousTransition(nextTransitionAdjusted - 1);\n+\n+            if (previousTransitionLocal != previousTransitionAdjusted) {\n+                // we have a DST transition and need to determine which side of the transition we are on\n+                int previousOffsetLocal = getOffset(previousTransitionLocal);\n+                boolean isPositiveShift = adjustedInstant >= previousTransitionAdjusted;\n+                long nextTransition = isPositiveShift ? nextTransitionAdjusted : previousTransitionAdjusted;\n+                int offsetAtTransition = getOffset(nextTransition - (isPositiveShift ? 1 : -1));\n+\n+                if (initialOffset == previousOffsetLocal || initialOffset == offsetAtTransition) {\n+                    return isPositiveShift ? offsetAtTransition : previousOffsetLocal;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    return adjustedOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}