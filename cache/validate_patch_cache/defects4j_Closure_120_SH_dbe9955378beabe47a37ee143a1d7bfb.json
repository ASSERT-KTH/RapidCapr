{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          if (ref.getBasicBlock() == block.getHeader()) {\n            // If the single assignment is at the start of the loop header then it should work.\n            if (!isInitializingAssignmentAt(ref.getIndex())) {\n              return false;\n            }\n          } else {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..fe301da5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          if (ref.getBasicBlock() == block.getHeader()) {\n+            // If the single assignment is at the start of the loop header then it should work.\n+            if (!isInitializingAssignmentAt(ref.getIndex())) {\n+              return false;\n+            }\n+          } else {\n+            return false;\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}