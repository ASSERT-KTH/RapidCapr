{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Node node = newNode(Token.FUNCTION);\n\n    Name functionName = functionNode.getFunctionName();\n    if (functionName != null) {\n        node.addChildToBack(transform(functionName));\n    } else {\n        // set line number to be the same as the declaration\n        // so that later adjustments for the leftParen are accurate\n        node.setLineno(functionNode.getLineno());\n        node.addChildToBack(newNode(Token.NAME));\n    }\n\n    Node parameters = newNode(Token.PARAM_LIST);\n\n    for (AstNode param : functionNode.getParams()) {\n        parameters.addChildToBack(transform(param));\n    }\n    node.addChildToBack(parameters);\n\n    Node body = transform(functionNode.getBody());\n    parseDirectives(body);\n\n    node.addChildToBack(body);\n\n    int functionPos = functionNode.getPosition();\n    int functionLength = functionNode.getLength();\n\n    int leftParenPos = functionNode.getLp() - functionPos;\n    int functionBodyPos = functionNode.getBody().getPosition() - functionPos;\n\n    node.setSourceName(functionNode.getSourceName());\n    node.setSourceFileName(functionNode.getSourceFileName());\n\n    node.setIsArrowFunction(functionNode.isArrowFunction());\n    node.putProp(Node.FUNCTION_PROP, functionNode);\n\n    node.setLength(functionLength);\n    node.setEncodedSourceBounds(leftParenPos, functionBodyPos,\n                functionLength - functionBodyPos - 1);\n    node.setLineno(functionNode.getLineno());\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..d0257b60 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,50 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Node node = newNode(Token.FUNCTION);\n+\n+    Name functionName = functionNode.getFunctionName();\n+    if (functionName != null) {\n+        node.addChildToBack(transform(functionName));\n+    } else {\n+        // set line number to be the same as the declaration\n+        // so that later adjustments for the leftParen are accurate\n+        node.setLineno(functionNode.getLineno());\n+        node.addChildToBack(newNode(Token.NAME));\n+    }\n+\n+    Node parameters = newNode(Token.PARAM_LIST);\n+\n+    for (AstNode param : functionNode.getParams()) {\n+        parameters.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(parameters);\n+\n+    Node body = transform(functionNode.getBody());\n+    parseDirectives(body);\n+\n+    node.addChildToBack(body);\n+\n+    int functionPos = functionNode.getPosition();\n+    int functionLength = functionNode.getLength();\n+\n+    int leftParenPos = functionNode.getLp() - functionPos;\n+    int functionBodyPos = functionNode.getBody().getPosition() - functionPos;\n+\n+    node.setSourceName(functionNode.getSourceName());\n+    node.setSourceFileName(functionNode.getSourceFileName());\n+\n+    node.setIsArrowFunction(functionNode.isArrowFunction());\n+    node.putProp(Node.FUNCTION_PROP, functionNode);\n+\n+    node.setLength(functionLength);\n+    node.setEncodedSourceBounds(leftParenPos, functionBodyPos,\n+                functionLength - functionBodyPos - 1);\n+    node.setLineno(functionNode.getLineno());\n+    return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}