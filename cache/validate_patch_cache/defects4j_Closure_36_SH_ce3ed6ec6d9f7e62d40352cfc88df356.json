{
    "patch": "          if (value.isQualifiedName()) {\n            // Note: This is not a visibility check.\n            String className = value.getFirstChild().getQualifiedName();\n            String methodName = value.getLastChild().getString();\n            if (convention.isSingletonGetter(className, methodName)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..9f5baec1 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,13 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          if (value.isQualifiedName()) {\n+            // Note: This is not a visibility check.\n+            String className = value.getFirstChild().getQualifiedName();\n+            String methodName = value.getLastChild().getString();\n+            if (convention.isSingletonGetter(className, methodName)) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}