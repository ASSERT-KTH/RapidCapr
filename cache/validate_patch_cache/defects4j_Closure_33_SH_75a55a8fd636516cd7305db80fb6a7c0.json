{
    "patch": "if (constraintObj instanceof FunctionType) {\n      return;\n    }\n\n    if (!(constraintObj instanceof NamedType)) {\n      if (!isNominalConstructor()) {\n        return;\n      }\n      // Handle the case where the constraint object is a record type.\n      //\n      // param constraintObj {{prop: (number|undefined)}}\n      // function f(constraintObj) {}\n      // f({});\n      //\n      // We want to modify the object literal to match the constraint, by\n      // taking each property on the record and trying to match\n      // properties on this object.\n      if (constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                  .getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n      return;\n    }\n\n    NamedType namedType = (NamedType) constraintObj;\n    if (namedType.isNominalConstructor()) {\n      return;\n    }\n\n    ObjectType referencedType = namedType.getReferencedType();\n    if (!(referencedType instanceof RecordType)) {\n      return;\n    }\n\n    // We only want to match constraints on anonymous types.\n    if (!isNominalConstructor()) {\n      return;\n    }\n\n    RecordType recordType = (RecordType) referencedType;\n    for (String prop : recordType.getOwnPropertyNames()) {\n      JSType propType = recordType.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.UNDEFINED_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..6c2a9e89 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,64 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (constraintObj instanceof FunctionType) {\n+      return;\n+    }\n+\n+    if (!(constraintObj instanceof NamedType)) {\n+      if (!isNominalConstructor()) {\n+        return;\n+      }\n+      // Handle the case where the constraint object is a record type.\n+      //\n+      // param constraintObj {{prop: (number|undefined)}}\n+      // function f(constraintObj) {}\n+      // f({});\n+      //\n+      // We want to modify the object literal to match the constraint, by\n+      // taking each property on the record and trying to match\n+      // properties on this object.\n+      if (constraintObj.isRecordType()) {\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                  .getLeastSupertype(propType);\n+            }\n+            defineInferredProperty(prop, typeToInfer, null);\n+          }\n+        }\n+      }\n+      return;\n+    }\n+\n+    NamedType namedType = (NamedType) constraintObj;\n+    if (namedType.isNominalConstructor()) {\n+      return;\n+    }\n+\n+    ObjectType referencedType = namedType.getReferencedType();\n+    if (!(referencedType instanceof RecordType)) {\n+      return;\n+    }\n+\n+    // We only want to match constraints on anonymous types.\n+    if (!isNominalConstructor()) {\n+      return;\n+    }\n+\n+    RecordType recordType = (RecordType) referencedType;\n+    for (String prop : recordType.getOwnPropertyNames()) {\n+      JSType propType = recordType.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.UNDEFINED_TYPE)\n+              .getLeastSupertype(propType);\n+        }\n+        defineInferredProperty(prop, typeToInfer, null);\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}