{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    // The parameters object literal setters can not be removed.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n        Node curParam = argList.getFirstChild();\n        Set<String> referencedArgs = new HashSet<>();\n        \n        // Collect all referenced function arguments\n        while (curParam != null) {\n            String argName = curParam.getString();\n            Var argVar = fnScope.getVar(argName);\n            if (referenced.contains(argVar)) {\n                referencedArgs.add(argName);\n            }\n            curParam = curParam.getNext();\n        }\n        \n        // Strip any unreferenced function arguments\n        curParam = argList.getFirstChild();\n        boolean remove = false;\n        while (curParam != null) {\n            if (!referencedArgs.contains(curParam.getString())) {\n                argList.removeChild(curParam);\n                compiler.reportCodeChange();\n                remove = true;\n            }\n            curParam = curParam.getNext();\n        }\n\n        // If we removed any arguments, update the function node info\n        if (remove) {\n            NodeUtil.rebuildFunctionNodeParams(fnScope, function);\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..855a1370 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,51 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    // The parameters object literal setters can not be removed.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+        Node curParam = argList.getFirstChild();\n+        Set<String> referencedArgs = new HashSet<>();\n+        \n+        // Collect all referenced function arguments\n+        while (curParam != null) {\n+            String argName = curParam.getString();\n+            Var argVar = fnScope.getVar(argName);\n+            if (referenced.contains(argVar)) {\n+                referencedArgs.add(argName);\n+            }\n+            curParam = curParam.getNext();\n+        }\n+        \n+        // Strip any unreferenced function arguments\n+        curParam = argList.getFirstChild();\n+        boolean remove = false;\n+        while (curParam != null) {\n+            if (!referencedArgs.contains(curParam.getString())) {\n+                argList.removeChild(curParam);\n+                compiler.reportCodeChange();\n+                remove = true;\n+            }\n+            curParam = curParam.getNext();\n+        }\n+\n+        // If we removed any arguments, update the function node info\n+        if (remove) {\n+            NodeUtil.rebuildFunctionNodeParams(fnScope, function);\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}