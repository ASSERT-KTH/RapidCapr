{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    \n    if (size == 1) {\n        Object single = elementPairs.get(0);\n        if (single instanceof Separator) {\n            Separator sep = (Separator) single;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(i);\n            List<Object> beforeList = (i == 0) ? Collections.emptyList() : elementPairs.subList(0, i);\n            List<Object> afterList = (i == size - 1) ? Collections.emptyList() : elementPairs.subList(i + 1, size);\n            PeriodFormatter beforeFormat = toFormatter(beforeList, notPrinter, false);\n            PeriodFormatter afterFormat = toFormatter(afterList, false, notParser);\n            sep = sep.finish(beforeFormat.getPrinter(), afterFormat.getParser());\n            return new PeriodFormatter(beforeFormat.getPrinter(), sep);\n        }\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..d0e12324 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,46 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    \n+    if (size == 1) {\n+        Object single = elementPairs.get(0);\n+        if (single instanceof Separator) {\n+            Separator sep = (Separator) single;\n+            return new PeriodFormatter(sep, sep);\n         } else {\n+            Object[] comp = createComposite(elementPairs);\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n \n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            Separator sep = (Separator) elementPairs.get(i);\n+            List<Object> beforeList = (i == 0) ? Collections.emptyList() : elementPairs.subList(0, i);\n+            List<Object> afterList = (i == size - 1) ? Collections.emptyList() : elementPairs.subList(i + 1, size);\n+            PeriodFormatter beforeFormat = toFormatter(beforeList, notPrinter, false);\n+            PeriodFormatter afterFormat = toFormatter(afterList, false, notParser);\n+            sep = sep.finish(beforeFormat.getPrinter(), afterFormat.getParser());\n+            return new PeriodFormatter(beforeFormat.getPrinter(), sep);\n+        }\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"P0D\" is too short",
    "test_result": "FAIL"
}