{
    "patch": "if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n        CodingConvention convention = compiler.getCodingConvention();\n        // Bug 2388531: Don't inline subclass definitions into class defining\n        // calls as this confused class removing logic.\n        SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n            return false;\n        }\n\n        // issue 668: Don't inline singleton getter methods calls as this\n        // confused class removing logic.\n        Node callTarget = callNode.getFirstChild();\n        if (convention.isPropertyGet(callTarget)) {\n            String className = convention.getSingletonGetterClassName(value);\n            if (className != null && relationship == null) {\n                if (!compiler.getCodingConvention().isDirectlyCallableFunction(value)) {\n                    // The singleton getter is never actually used\n                    return false;\n                } else {\n                    // Make sure there is not already a call to the function\n                    // before the current one\n                    Node n = callTarget.getNext();\n                    while (n != null && n != callNode.getFirstChild()) {\n                        if (n.isCall()) {\n                            if (n.getFirstChild().isGetProp()) {\n                                String s = convention.getSingletonGetterClassName(n.getFirstChild().getLastChild());\n                                if (s != null && s.equals(className)) {\n                                    return false;\n                                }\n                            }\n                        }\n                        n = n.getNext();\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..931be947 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,46 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (reference.getParent().isCall()) {\n+        CodingConvention convention = compiler.getCodingConvention();\n+        // Bug 2388531: Don't inline subclass definitions into class defining\n+        // calls as this confused class removing logic.\n+        SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+            return false;\n+        }\n+\n+        // issue 668: Don't inline singleton getter methods calls as this\n+        // confused class removing logic.\n+        Node callTarget = callNode.getFirstChild();\n+        if (convention.isPropertyGet(callTarget)) {\n+            String className = convention.getSingletonGetterClassName(value);\n+            if (className != null && relationship == null) {\n+                if (!compiler.getCodingConvention().isDirectlyCallableFunction(value)) {\n+                    // The singleton getter is never actually used\n+                    return false;\n+                } else {\n+                    // Make sure there is not already a call to the function\n+                    // before the current one\n+                    Node n = callTarget.getNext();\n+                    while (n != null && n != callNode.getFirstChild()) {\n+                        if (n.isCall()) {\n+                            if (n.getFirstChild().isGetProp()) {\n+                                String s = convention.getSingletonGetterClassName(n.getFirstChild().getLastChild());\n+                                if (s != null && s.equals(className)) {\n+                                    return false;\n+                                }\n+                            }\n+                        }\n+                        n = n.getNext();\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}