{
    "patch": "      if (ref.isVarDeclaration() || ref.isSimpleAssignmentToName()) {\n        // If the variable is reassigned, then it is NOT only assigned\n        // once for its lifetime.\n        for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n          if (references.get(i).isAssignmentToName()) {\n            return false;\n          }\n        }\n        return true;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2a143460 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref.isVarDeclaration() || ref.isSimpleAssignmentToName()) {\n+        // If the variable is reassigned, then it is NOT only assigned\n+        // once for its lifetime.\n+        for (int i = references.indexOf(ref) + 1; i < references.size(); i++) {\n+          if (references.get(i).isAssignmentToName()) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}