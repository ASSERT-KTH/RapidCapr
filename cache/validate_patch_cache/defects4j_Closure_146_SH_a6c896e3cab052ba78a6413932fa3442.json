{
    "patch": "        JSType thisNotNullOrUndefined = this.restrictByNotNullOrUndefined();\n        JSType thatNotNullOrUndefined = that.restrictByNotNullOrUndefined();\n        if (thisNotNullOrUndefined.isUnknown() || thatNotNullOrUndefined.isUnknown()) {\n            return new TypePair(thisNotNullOrUndefined, thatNotNullOrUndefined);\n        }\n        if (thisNotNullOrUndefined.isBottom() || thatNotNullOrUndefined.isBottom()) {\n            return new TypePair(null, null);\n        }\n        return new TypePair(thisNotNullOrUndefined, thatNotNullOrUndefined);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..79add8e0 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,15 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        JSType thisNotNullOrUndefined = this.restrictByNotNullOrUndefined();\n+        JSType thatNotNullOrUndefined = that.restrictByNotNullOrUndefined();\n+        if (thisNotNullOrUndefined.isUnknown() || thatNotNullOrUndefined.isUnknown()) {\n+            return new TypePair(thisNotNullOrUndefined, thatNotNullOrUndefined);\n+        }\n+        if (thisNotNullOrUndefined.isBottom() || thatNotNullOrUndefined.isBottom()) {\n+            return new TypePair(null, null);\n+        }\n+        return new TypePair(thisNotNullOrUndefined, thatNotNullOrUndefined);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}