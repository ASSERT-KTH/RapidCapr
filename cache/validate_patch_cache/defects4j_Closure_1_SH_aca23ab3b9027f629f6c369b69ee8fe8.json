{
    "patch": "int removedCount = 0;\n\nNode function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nint numArgsBeforeRemoval = argList.getChildCount();\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      removedCount++;\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}\n\nif (removedCount > 0 && !function.isArrowFunction()) {\n  // If we're modifying a normal function, it no longer has an inferred 'this'\n  // and '@this' parameter.\n  if (!fnScope.isFunction(\"this\")) {\n    Var thisVar = new Var(-1, \"this\", function, null);\n    fnScope.addVar(thisVar);\n  }\n  if (!fnScope.isFunction(\"@this\")) {\n    Var thisVar = new Var(-1, \"@this\", function, null);\n    fnScope.addVar(thisVar);\n  }\n}\n\nif (numArgsBeforeRemoval - removedCount < function.getMaxChildren()) {\n  reportFunctionLength(fnScope, function, argList.getChildCount(), numArgsBeforeRemoval);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e8e36345 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,53 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+int removedCount = 0;\n+\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+int numArgsBeforeRemoval = argList.getChildCount();\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      removedCount++;\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n+\n+if (removedCount > 0 && !function.isArrowFunction()) {\n+  // If we're modifying a normal function, it no longer has an inferred 'this'\n+  // and '@this' parameter.\n+  if (!fnScope.isFunction(\"this\")) {\n+    Var thisVar = new Var(-1, \"this\", function, null);\n+    fnScope.addVar(thisVar);\n+  }\n+  if (!fnScope.isFunction(\"@this\")) {\n+    Var thisVar = new Var(-1, \"@this\", function, null);\n+    fnScope.addVar(thisVar);\n+  }\n+}\n+\n+if (numArgsBeforeRemoval - removedCount < function.getMaxChildren()) {\n+  reportFunctionLength(fnScope, function, argList.getChildCount(), numArgsBeforeRemoval);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}