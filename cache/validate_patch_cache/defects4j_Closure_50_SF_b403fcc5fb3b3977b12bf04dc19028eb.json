{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // \",\" is the default, it doesn't need to be explicit\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  int nodeCount = 0;\n  boolean foldingPossible = false;\n\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (!NodeUtil.mayHaveSideEffects(elem)) {\n      if (elem.getType() == Token.STRING) {\n        String value = NodeUtil.getStringValue(elem);\n        if (sb != null) {\n          Preconditions.checkNotNull(elem.getPrevious());\n          sb.append(joinString).append(value);\n        } else if (!value.isEmpty()) {\n          sb = new StringBuilder(value);\n          foldingPossible = true;\n        }\n      } else if (sb != null) {\n        nodeCount++;\n        arrayFoldedChildren.add(getCopyStringNode(sb, elem.getPrevious()));\n        sb = null;\n        nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n        foldingPossible = true;\n      } else {\n        nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n      }\n    } else if (sb != null) {\n      nodeCount++;\n      arrayFoldedChildren.add(getCopyStringNode(sb, elem.getPrevious()));\n      sb = null;\n      nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n      foldingPossible = true;\n    } else {\n      nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n    }\n  }\n\n  if (sb != null) {\n    nodeCount++;\n    arrayFoldedChildren.add(getCopyStringNode(sb, arrayNode.getLastChild()));\n    foldingPossible = true;\n  } else if (nodeCount > 0) {\n    nodeCount--;\n  }\n\n  if (!foldingPossible) {\n    return n;\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  final int kJoinOverhead = \"[].join()\".length() + (right != null ? InlineCostEstimator.getCost(right) : 0);\n\n  if (nodeCount == 0) {\n    Node newNode = Node.newString(\"\").srcref(arrayNode);\n    n.getParent().replaceChild(n, newNode);\n    reportCodeChange();\n    return newNode;\n  } else if (nodeCount == 1 && arrayFoldedChildren.size() == 1 && !rightIsNull(right)) {\n    Node newJoin = Node.newCallNode(arrayNode.cloneNode(), right.cloneNode());\n    newJoin.useSourceInfoIfMissingFrom(n);\n    n.getParent().replaceChild(n, newJoin);\n    reportCodeChange();\n    return newJoin;\n  } else {\n    Node newJoin = Node.newCallNode(arrayNode.cloneNode(), right == null ? null : right.cloneNode());\n    arrayNode.detachChildren();\n\n    if (arrayFoldedChildren.size() == 1 && arrayFoldedChildren.get(0).getType() == Token.STRING) {\n      String joinedValue = NodeUtil.getStringValue(arrayFoldedChildren.get(0));\n      if (joinedValue.length() + kJoinOverhead <= originalSize) {\n        newJoin.getFirstChild().addChildToBack(arrayFoldedChildren.remove(0));\n      }\n    }\n\n    if (newJoin.getFirstChild().hasChildren()) {\n      n.getParent().replaceChild(n, newJoin);\n      reportCodeChange();\n      return newJoin;\n    }\n\n    for (Node elem : arrayFoldedChildren) {\n      arrayNode.addChildToBack(elem);\n    }\n    reportCodeChange();\n  }\n\n  return n;\n}\n\nprivate static int addNodeToArray(Node elem, List<Node> arrayFoldedChildren) {\n  arrayFoldedChildren.add(elem);\n  return 1;\n}\n\nprivate static boolean rightIsNull(Node right) {\n  return right == null || right.getType() == Token.NULL;\n}\n\nprivate static Node getCopyStringNode(StringBuilder sb, Node previous) {\n  Node node = Node.newString(sb.toString());\n  node.copyInformationFrom(previous);\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..b679d373 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,132 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = callTarget.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n+  // \",\" is the default, it doesn't need to be explicit\n+  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = null;\n+  int foldedSize = 0;\n+  int nodeCount = 0;\n+  boolean foldingPossible = false;\n+\n+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+    if (!NodeUtil.mayHaveSideEffects(elem)) {\n+      if (elem.getType() == Token.STRING) {\n+        String value = NodeUtil.getStringValue(elem);\n         if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+          Preconditions.checkNotNull(elem.getPrevious());\n+          sb.append(joinString).append(value);\n+        } else if (!value.isEmpty()) {\n+          sb = new StringBuilder(value);\n+          foldingPossible = true;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+      } else if (sb != null) {\n+        nodeCount++;\n+        arrayFoldedChildren.add(getCopyStringNode(sb, elem.getPrevious()));\n+        sb = null;\n+        nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n+        foldingPossible = true;\n+      } else {\n+        nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+    } else if (sb != null) {\n+      nodeCount++;\n+      arrayFoldedChildren.add(getCopyStringNode(sb, elem.getPrevious()));\n+      sb = null;\n+      nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n+      foldingPossible = true;\n+    } else {\n+      nodeCount += addNodeToArray(elem, arrayFoldedChildren);\n     }\n+  }\n+\n+  if (sb != null) {\n+    nodeCount++;\n+    arrayFoldedChildren.add(getCopyStringNode(sb, arrayNode.getLastChild()));\n+    foldingPossible = true;\n+  } else if (nodeCount > 0) {\n+    nodeCount--;\n+  }\n+\n+  if (!foldingPossible) {\n+    return n;\n+  }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  final int kJoinOverhead = \"[].join()\".length() + (right != null ? InlineCostEstimator.getCost(right) : 0);\n+\n+  if (nodeCount == 0) {\n+    Node newNode = Node.newString(\"\").srcref(arrayNode);\n+    n.getParent().replaceChild(n, newNode);\n+    reportCodeChange();\n+    return newNode;\n+  } else if (nodeCount == 1 && arrayFoldedChildren.size() == 1 && !rightIsNull(right)) {\n+    Node newJoin = Node.newCallNode(arrayNode.cloneNode(), right.cloneNode());\n+    newJoin.useSourceInfoIfMissingFrom(n);\n+    n.getParent().replaceChild(n, newJoin);\n+    reportCodeChange();\n+    return newJoin;\n+  } else {\n+    Node newJoin = Node.newCallNode(arrayNode.cloneNode(), right == null ? null : right.cloneNode());\n+    arrayNode.detachChildren();\n+\n+    if (arrayFoldedChildren.size() == 1 && arrayFoldedChildren.get(0).getType() == Token.STRING) {\n+      String joinedValue = NodeUtil.getStringValue(arrayFoldedChildren.get(0));\n+      if (joinedValue.length() + kJoinOverhead <= originalSize) {\n+        newJoin.getFirstChild().addChildToBack(arrayFoldedChildren.remove(0));\n+      }\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+\n+    if (newJoin.getFirstChild().hasChildren()) {\n+      n.getParent().replaceChild(n, newJoin);\n+      reportCodeChange();\n+      return newJoin;\n     }\n \n-    return n;\n+    for (Node elem : arrayFoldedChildren) {\n+      arrayNode.addChildToBack(elem);\n+    }\n+    reportCodeChange();\n   }\n \n+  return n;\n+}\n+\n+private static int addNodeToArray(Node elem, List<Node> arrayFoldedChildren) {\n+  arrayFoldedChildren.add(elem);\n+  return 1;\n+}\n+\n+private static boolean rightIsNull(Node right) {\n+  return right == null || right.getType() == Token.NULL;\n+}\n+\n+private static Node getCopyStringNode(StringBuilder sb, Node previous) {\n+  Node node = Node.newString(sb.toString());\n+  node.copyInformationFrom(previous);\n+  return node;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +657,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}