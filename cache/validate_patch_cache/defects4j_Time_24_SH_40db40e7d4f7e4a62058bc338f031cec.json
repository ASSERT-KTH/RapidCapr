{
    "patch": "        } catch (IllegalFieldValueException e) {\n            SavedField field = e.getSavedField();\n            if (field != null) {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i] == field) {\n                        for (int j = i + 1; j <count; j++) {\n                            savedFields[j].iField.add(savedFields[j].iValue, savedFields[j - 1].iValue);\n                        }\n                        savedFields[count - 1].set(Math.min(Math.max(millis, getMinMillis()), getMaxMillis()), false);\n                        count--;\n                        iSavedFieldsCount = count;\n                        continue;\n                    }\n                }\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a96e8a14 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            SavedField field = e.getSavedField();\n+            if (field != null) {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i] == field) {\n+                        for (int j = i + 1; j <count; j++) {\n+                            savedFields[j].iField.add(savedFields[j].iValue, savedFields[j - 1].iValue);\n+                        }\n+                        savedFields[count - 1].set(Math.min(Math.max(millis, getMinMillis()), getMaxMillis()), false);\n+                        count--;\n+                        iSavedFieldsCount = count;\n+                        continue;\n+                    }\n+                }\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}