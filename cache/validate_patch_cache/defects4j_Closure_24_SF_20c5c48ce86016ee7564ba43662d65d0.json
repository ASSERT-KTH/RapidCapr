{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      Node functionNode = NodeUtil.getEnclosingFunction(t.getScopeRoot());\n      if (functionNode == null || !NodeUtil.isImmediatelyInvokedFunctionExpression(functionNode)) {\n        report(t, null, GOOG_SCOPE_ONE_ANON_FUNCTION, \"\");\n        return;\n      }\n      Node functionParamList = functionNode.getFirstChild().getNext();\n      checkState(functionParamList.isParamList(), \"Function parameters are not a param list\");\n\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        if (parent.isVar()) {\n          Node value = n.getFirstChild();\n          if (value != null && value.isQualifiedName() && !value.matchesQualifiedName(functionNode.getLastChild().getString())) {\n            String name = n.getString();\n            if (v.getInitialValue() != null) {\n              String qualifiedName = v.getInitialValue().getQualifiedName();\n              aliases.put(name, v);\n              transformation.addAlias(name, qualifiedName);\n            } else {\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..00389280 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -271,27 +271,29 @@ class ScopedAliases implements HotSwapCompilerPass {\n \n     private void findAliases(NodeTraversal t) {\n       Scope scope = t.getScope();\n+      Node functionNode = NodeUtil.getEnclosingFunction(t.getScopeRoot());\n+      if (functionNode == null || !NodeUtil.isImmediatelyInvokedFunctionExpression(functionNode)) {\n+        report(t, null, GOOG_SCOPE_ONE_ANON_FUNCTION, \"\");\n+        return;\n+      }\n+      Node functionParamList = functionNode.getFirstChild().getNext();\n+      checkState(functionParamList.isParamList(), \"Function parameters are not a param list\");\n+\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n         Node parent = n.getParent();\n         if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          Node value = n.getFirstChild();\n+          if (value != null && value.isQualifiedName() && !value.matchesQualifiedName(functionNode.getLastChild().getString())) {\n+            String name = n.getString();\n+            if (v.getInitialValue() != null) {\n+              String qualifiedName = v.getInitialValue().getQualifiedName();\n+              aliases.put(name, v);\n+              transformation.addAlias(name, qualifiedName);\n+            } else {\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            }\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}