{
    "patch": "            boolean leapSecondMatched = false;\n            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException ex) {\n                    if (resetFields\n                            && savedFields[i].iField.getType().equals(DateTimeFieldType.secondOfMinute())\n                            && savedFields[i].iValue == 60\n                            && ex.getMessage().startsWith(\"Illegal instant due to time zone offset transition\")) {\n                        leapSecondMatched = true;\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n            if (leapSecondMatched) {\n                // try again with leap second adjustment\n                millis = computeMillis(resetFields, text);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..14f6dd6c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean leapSecondMatched = false;\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException ex) {\n+                    if (resetFields\n+                            && savedFields[i].iField.getType().equals(DateTimeFieldType.secondOfMinute())\n+                            && savedFields[i].iValue == 60\n+                            && ex.getMessage().startsWith(\"Illegal instant due to time zone offset transition\")) {\n+                        leapSecondMatched = true;\n+                    } else {\n+                        throw ex;\n+                    }\n+                }\n+            }\n+            if (leapSecondMatched) {\n+                // try again with leap second adjustment\n+                millis = computeMillis(resetFields, text);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}