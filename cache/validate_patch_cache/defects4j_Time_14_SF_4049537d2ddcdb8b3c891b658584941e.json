{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    DateTimeField field = partial.getField(fieldIndex);\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n    }\n    int[] newValues = iChronology.get(partial, add(field, instant, valueToAdd));\n    // Special case. When adding/subtracting months (or years), leap years need to be treated in a special way.\n    if (field.getDurationField().getUnitMillis() >= DurationFieldType.days().getField(iChronology).getUnitMillis()) {\n        if (field.getDurationField().getUnitMillis() >= DurationFieldType.years().getField(iChronology).getUnitMillis()\n                && iChronology.year().isLeap(newValues[0]) && newValues[1] == 2 && newValues[2] > 29) {\n            newValues[2] = 29;\n        }\n        try {\n            return iChronology.get(partial, add(field, instant, valueToAdd));\n        } catch (IllegalArgumentException ex) {\n            if (!iChronology.year().isLeap(newValues[0]) || newValues[1] != 2 || newValues[2] != 29) {\n                throw ex;\n            }\n            newValues[2] = 28;\n            return iChronology.get(partial, add(field, instant, valueToAdd));\n        }\n    } else {\n        return newValues;\n    }\n}\n\nprivate long add(DateTimeField field, long instant, int valueToAdd) {\n    return field.add(instant, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..09e47aed 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    DateTimeField field = partial.getField(fieldIndex);\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+    }\n+    int[] newValues = iChronology.get(partial, add(field, instant, valueToAdd));\n+    // Special case. When adding/subtracting months (or years), leap years need to be treated in a special way.\n+    if (field.getDurationField().getUnitMillis() >= DurationFieldType.days().getField(iChronology).getUnitMillis()) {\n+        if (field.getDurationField().getUnitMillis() >= DurationFieldType.years().getField(iChronology).getUnitMillis()\n+                && iChronology.year().isLeap(newValues[0]) && newValues[1] == 2 && newValues[2] > 29) {\n+            newValues[2] = 29;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        try {\n+            return iChronology.get(partial, add(field, instant, valueToAdd));\n+        } catch (IllegalArgumentException ex) {\n+            if (!iChronology.year().isLeap(newValues[0]) || newValues[1] != 2 || newValues[2] != 29) {\n+                throw ex;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newValues[2] = 28;\n+            return iChronology.get(partial, add(field, instant, valueToAdd));\n         }\n+    } else {\n+        return newValues;\n     }\n+}\n+\n+private long add(DateTimeField field, long instant, int valueToAdd) {\n+    return field.add(instant, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}