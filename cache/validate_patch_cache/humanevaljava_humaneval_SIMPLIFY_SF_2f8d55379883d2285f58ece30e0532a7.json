{
    "patch": "public static boolean simplify(String x, String n) {\n    String[] xParts = x.split(\"/\");\n    String[] nParts = n.split(\"/\");\n    if (xParts.length != 2 || nParts.length != 2 || Integer.parseInt(xParts[1]) == 0 || Integer.parseInt(nParts[1]) == 0) {\n        return false;\n    }\n    int a = Integer.parseInt(xParts[0]);\n    int b = Integer.parseInt(xParts[1]);\n    int c = Integer.parseInt(nParts[0]);\n    int d = Integer.parseInt(nParts[1]);\n    int gcd1 = gcd(a, b);\n    int gcd2 = gcd(c, d);\n    a /= gcd1;\n    b /= gcd1;\n    c /= gcd2;\n    d /= gcd2;\n\n    return a * c % b * d == 0;\n}\n\nprivate static int gcd(int a, int b) {\n    if(b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/SIMPLIFY.java b/src/main/java/humaneval/buggy/SIMPLIFY.java\nindex a55ee2e..0c753d8 100644\n--- a/src/main/java/humaneval/buggy/SIMPLIFY.java\n+++ b/src/main/java/humaneval/buggy/SIMPLIFY.java\n@@ -12,16 +12,30 @@ simplify(\"1/6\", \"2/1\") = False\n simplify(\"7/10\", \"10/2\") = False */\n \n public class SIMPLIFY {\n-    public static boolean simplify(String x, String n) {\n-        int a = Integer.parseInt(x.split(\"/\")[0]);\n-        int b = Integer.parseInt(x.split(\"/\")[1]);\n-        int c = Integer.parseInt(n.split(\"/\")[0]);\n-        int d = Integer.parseInt(n.split(\"/\")[1]);\n-\n-        int numerator = a * c;\n-        int denom = b * d;\n-        if (numerator / denom == (int) (numerator / denom))\n-            return true;\n+public static boolean simplify(String x, String n) {\n+    String[] xParts = x.split(\"/\");\n+    String[] nParts = n.split(\"/\");\n+    if (xParts.length != 2 || nParts.length != 2 || Integer.parseInt(xParts[1]) == 0 || Integer.parseInt(nParts[1]) == 0) {\n         return false;\n     }\n+    int a = Integer.parseInt(xParts[0]);\n+    int b = Integer.parseInt(xParts[1]);\n+    int c = Integer.parseInt(nParts[0]);\n+    int d = Integer.parseInt(nParts[1]);\n+    int gcd1 = gcd(a, b);\n+    int gcd2 = gcd(c, d);\n+    a /= gcd1;\n+    b /= gcd1;\n+    c /= gcd2;\n+    d /= gcd2;\n+\n+    return a * c % b * d == 0;\n+}\n+\n+private static int gcd(int a, int b) {\n+    if(b == 0) {\n+        return a;\n+    }\n+    return gcd(b, a % b);\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}