{
    "patch": "public Fraction reduce() {\n    if (numerator == 0) {\n        // return zero if numerator is zero\n        return Fraction.ZERO;\n    } else {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        int reducedNumerator = numerator / gcd;\n        int reducedDenominator = denominator / gcd;\n        // check if the reduced numerator and denominator have the same sign\n        if (reducedNumerator * reducedDenominator < 0) {\n            reducedNumerator = -Math.abs(reducedNumerator);\n            reducedDenominator = Math.abs(reducedDenominator);\n        } else {\n            reducedNumerator = Math.abs(reducedNumerator);\n            reducedDenominator = Math.abs(reducedDenominator);\n        }\n        return new Fraction(reducedNumerator, reducedDenominator);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..62346296 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,25 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+public Fraction reduce() {\n+    if (numerator == 0) {\n+        // return zero if numerator is zero\n+        return Fraction.ZERO;\n+    } else {\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        int reducedNumerator = numerator / gcd;\n+        int reducedDenominator = denominator / gcd;\n+        // check if the reduced numerator and denominator have the same sign\n+        if (reducedNumerator * reducedDenominator < 0) {\n+            reducedNumerator = -Math.abs(reducedNumerator);\n+            reducedDenominator = Math.abs(reducedDenominator);\n+        } else {\n+            reducedNumerator = Math.abs(reducedNumerator);\n+            reducedDenominator = Math.abs(reducedDenominator);\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        return new Fraction(reducedNumerator, reducedDenominator);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}