{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double eps = 10e-15;\n    final double gln = Gamma.logGamma(a);\n    if (x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        final double a9 = 1.0 / a;\n        final double e = Math.exp(a9 * Math.log(x) - x - gln);\n        final double p = 1.0 - e;\n        return p;\n    }\n    double sum = a;\n    double del = sum;\n    for (int n = 1; n <= 100; n++) {\n        del *= x / (a + n);\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * eps) {\n            final double p = sum * Math.exp(-x + a * Math.log(x) - gln);\n            return p;\n        }\n    }\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ad9e7b55b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,33 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double eps = 10e-15;\n+    final double gln = Gamma.logGamma(a);\n+    if (x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        final double a9 = 1.0 / a;\n+        final double e = Math.exp(a9 * Math.log(x) - x - gln);\n+        final double p = 1.0 - e;\n+        return p;\n+    }\n+    double sum = a;\n+    double del = sum;\n+    for (int n = 1; n <= 100; n++) {\n+        del *= x / (a + n);\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * eps) {\n+            final double p = sum * Math.exp(-x + a * Math.log(x) - gln);\n+            return p;\n+        }\n+    }\n+    return Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}