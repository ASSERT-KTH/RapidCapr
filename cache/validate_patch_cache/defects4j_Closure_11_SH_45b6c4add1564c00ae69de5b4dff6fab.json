{
    "patch": "  private void warnAboutAST(Node n, Node parent, Node grandparent, String message) {\n    if (n == null) {\n      return;\n    } else if (n.isScript()) {\n      for (Node child : n.children()) {\n        warnAboutAST(child, n, parent, message);\n      }\n    } else if (n.isBlock()) {\n      for (Node child : n.children()) {\n        warnAboutAST(child, n, parent, message);\n      }\n    } else if (n.isExprResult()) {\n      warnAboutAST(n.getFirstChild(), n, parent, message);\n    } else if (n.isCall()) {\n      warnAboutAST(n.getFirstChild(), n, parent, message);\n      for (Node arg : n.children().skip(1)) {\n        warnAboutAST(arg, n, parent, message);\n      }\n    } else if (n.isNew()) {\n      warnAboutAST(n.getFirstChild(), n, parent, message);\n      for (Node arg : n.children().skip(1)) {\n        warnAboutAST(arg, n, parent, message);\n      }\n    } else if (parent != null && parent.isAssign()) {\n    // property assignments are checked elsewhere, but the assign itself might be using\n    // undefined or null\n      if (n.matchesQualifiedName(\"undefined\") || n.matchesQualifiedName(\"null\")) {\n        warnings.add(JSError.make(n, message));\n      } else if (n.isQualifiedName() && !n.getJSType().isEnumType()) {\n        warnAboutAST(n.getFirstChild(), n, parent, message);\n      } else if (grandparent != null && grandparent.isCall() && grandparent.getFirstChild() == parent && n == parent.getFirstChild()) {\n        warnAboutAST(n.getFirstChild(), n, parent, message);\n      }\n    } else if (n.isQualifiedName() && !n.getJSType().isFunctionType()) {\n      warnAboutAST(n.getFirstChild(), n, parent, message);\n    } else if (n.isGetProp()) {\n      warnAboutAST(n.getFirstChild(), n, parent, message);\n    } else if (n.isString()) {\n    // If the input string looks like an int literal, assert that the int parse of the string\n    // matches the original string; otherwise, consider suggesting to switch to Number() parse.\n      String inputString = n.getString();\n      Integer maybeNumber;\n      try {\n        maybeNumber = Integer.parseInt(inputString);\n      } catch (NumberFormatException nfe) {\n        return;\n      }\n      if (maybeNumber != null) {\n        String maybeNumberString = Integer.toString(maybeNumber);\n        if (inputString.equals(maybeNumberString)) {\n          return;\n        }\n        warnings.add(JSError.make(n, INTEGER_STRING_PARSE_WARNING));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}