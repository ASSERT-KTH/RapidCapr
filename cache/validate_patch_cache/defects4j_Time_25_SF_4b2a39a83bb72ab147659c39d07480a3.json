{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjust = instantLocal - offsetLocal;\n    final int initialOffset = getOffset(instantAdjust);\n    long instantAdjustPrev = previousTransition(instantAdjust);\n    if (instantAdjustPrev == instantLocal - offsetLocal) {\n        return initialOffset;\n    }\n    long instantPrev = adjustForGap(instantAdjustPrev, offsetLocal);\n    int offsetPrev = getOffset(instantPrev);\n    if (initialOffset > offsetPrev) {\n        instantAdjust = instantPrev + (instantAdjust - instantPrev) / 2;\n        instantPrev = adjustForGap(previousTransition(instantAdjust), offsetLocal);\n        offsetPrev = getOffset(instantPrev);\n        while (initialOffset > offsetPrev) {\n            instantAdjust = instantPrev + (instantAdjust - instantPrev) / 2;\n            instantPrev = adjustForGap(previousTransition(instantAdjust), offsetLocal);\n            offsetPrev = getOffset(instantPrev);\n        }\n    } else if (initialOffset < offsetPrev) {\n        long instantNext = adjustForOverlap(nextTransition(instantPrev), offsetPrev);\n        int offsetNext = getOffset(instantNext);\n        while (initialOffset < offsetNext) {\n            instantPrev = instantNext;\n            offsetPrev = offsetNext;\n            instantNext = adjustForOverlap(nextTransition(instantPrev), offsetPrev);\n            offsetNext = getOffset(instantNext);\n        }\n        instantAdjustPrev = instantPrev + (instantAdjust - instantPrev) / 2;\n    }\n    return getOffset(adjustForGap(instantAdjustPrev, offsetLocal));\n}\n\nprivate long adjustForGap(long instant, int offset) {\n    int instantOffset = getOffset(instant);\n    if (instantOffset > offset) {\n        return instant + (instantOffset - offset) * DateTimeConstants.MILLIS_PER_HOUR;\n    }\n    return instant;\n}\n\nprivate long adjustForOverlap(long instant, int offset) {\n    long nextInstant = instant + DateTimeConstants.MILLIS_PER_HOUR;\n    int nextOffset = getOffset(nextInstant);\n    if (nextOffset <= offset) {\n        return instant;\n    }\n    return nextInstant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b5dafbf4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,55 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+    final long instantAdjust = instantLocal - offsetLocal;\n+    final int initialOffset = getOffset(instantAdjust);\n+    long instantAdjustPrev = previousTransition(instantAdjust);\n+    if (instantAdjustPrev == instantLocal - offsetLocal) {\n+        return initialOffset;\n+    }\n+    long instantPrev = adjustForGap(instantAdjustPrev, offsetLocal);\n+    int offsetPrev = getOffset(instantPrev);\n+    if (initialOffset > offsetPrev) {\n+        instantAdjust = instantPrev + (instantAdjust - instantPrev) / 2;\n+        instantPrev = adjustForGap(previousTransition(instantAdjust), offsetLocal);\n+        offsetPrev = getOffset(instantPrev);\n+        while (initialOffset > offsetPrev) {\n+            instantAdjust = instantPrev + (instantAdjust - instantPrev) / 2;\n+            instantPrev = adjustForGap(previousTransition(instantAdjust), offsetLocal);\n+            offsetPrev = getOffset(instantPrev);\n+        }\n+    } else if (initialOffset < offsetPrev) {\n+        long instantNext = adjustForOverlap(nextTransition(instantPrev), offsetPrev);\n+        int offsetNext = getOffset(instantNext);\n+        while (initialOffset < offsetNext) {\n+            instantPrev = instantNext;\n+            offsetPrev = offsetNext;\n+            instantNext = adjustForOverlap(nextTransition(instantPrev), offsetPrev);\n+            offsetNext = getOffset(instantNext);\n         }\n-        return offsetAdjusted;\n+        instantAdjustPrev = instantPrev + (instantAdjust - instantPrev) / 2;\n     }\n+    return getOffset(adjustForGap(instantAdjustPrev, offsetLocal));\n+}\n+\n+private long adjustForGap(long instant, int offset) {\n+    int instantOffset = getOffset(instant);\n+    if (instantOffset > offset) {\n+        return instant + (instantOffset - offset) * DateTimeConstants.MILLIS_PER_HOUR;\n+    }\n+    return instant;\n+}\n+\n+private long adjustForOverlap(long instant, int offset) {\n+    long nextInstant = instant + DateTimeConstants.MILLIS_PER_HOUR;\n+    int nextOffset = getOffset(nextInstant);\n+    if (nextOffset <= offset) {\n+        return instant;\n+    }\n+    return nextInstant;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot assign a value to final variable instantAdjust",
    "test_result": "ERROR"
}