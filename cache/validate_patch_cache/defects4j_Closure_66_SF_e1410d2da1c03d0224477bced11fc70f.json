{
    "patch": "public double getTypedPercent(JSONObject object) {\n    double count = 0;\n    double typed = 0;\n\n    for (String key : object.keySet()) { //Iterate through all keys in the JSONObject\n        count++; //increment the count for each key\n\n        if (object.get(key) instanceof String) { //If the value of the key is of type String\n            typed++; //increment the typed variable\n        }\n    }\n\n    return (typed/count)*100; //calculate the percentage of typed keys and return the value\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0d7a48e7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject object) {\n+    double count = 0;\n+    double typed = 0;\n+\n+    for (String key : object.keySet()) { //Iterate through all keys in the JSONObject\n+        count++; //increment the count for each key\n+\n+        if (object.get(key) instanceof String) { //If the value of the key is of type String\n+            typed++; //increment the typed variable\n+        }\n+    }\n+\n+    return (typed/count)*100; //calculate the percentage of typed keys and return the value\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}