{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n\n    if (bounds != null && bounds.length > 0) {\n        for (Type boundType : bounds) {\n            if (boundType instanceof TypeVariable<?>) {\n                TypeVariable<?> typeVar = (TypeVariable<?>) boundType;\n                Type[] innerBounds = typeVar.getBounds();\n                for (Type innerType : innerBounds) {\n                    registerTypeVariablesOn(innerType);\n                }\n            } else {\n                registerTypeVariablesOn(boundType);\n            }\n        }\n    } else {\n        // The type variable has no bounds, which means it can be any type.\n        // Registering the Object class as the default type as done in previous versions\n        // causes tests to fail. Instead, we do not register anything in this case.\n        return;\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        if (actualTypeArgument instanceof TypeVariable<?>) {\n            readInnerBounds((TypeVariable<?>) actualTypeArgument);\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readInnerBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n\n    if (bounds != null && bounds.length > 0) {\n        for (Type boundType : bounds) {\n            if (boundType instanceof TypeVariable<?>) {\n                readInnerBounds((TypeVariable<?>) boundType);\n            } else {\n                registerTypeVariablesOn(boundType);\n            }\n        }\n    } else {\n        // The inner type variable has no bounds, which means it can be any type.\n        // Registering the Object class as the default type as done in previous versions\n        // causes tests to fail. Instead, we do not register anything in this case.\n        return;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1be6d349b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,57 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    if (bounds != null && bounds.length > 0) {\n+        for (Type boundType : bounds) {\n+            if (boundType instanceof TypeVariable<?>) {\n+                TypeVariable<?> typeVar = (TypeVariable<?>) boundType;\n+                Type[] innerBounds = typeVar.getBounds();\n+                for (Type innerType : innerBounds) {\n+                    registerTypeVariablesOn(innerType);\n+                }\n+            } else {\n+                registerTypeVariablesOn(boundType);\n+            }\n+        }\n+    } else {\n+        // The type variable has no bounds, which means it can be any type.\n+        // Registering the Object class as the default type as done in previous versions\n+        // causes tests to fail. Instead, we do not register anything in this case.\n+        return;\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        if (actualTypeArgument instanceof TypeVariable<?>) {\n+            readInnerBounds((TypeVariable<?>) actualTypeArgument);\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readInnerBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    if (bounds != null && bounds.length > 0) {\n+        for (Type boundType : bounds) {\n+            if (boundType instanceof TypeVariable<?>) {\n+                readInnerBounds((TypeVariable<?>) boundType);\n+            } else {\n+                registerTypeVariablesOn(boundType);\n+            }\n+        }\n+    } else {\n+        // The inner type variable has no bounds, which means it can be any type.\n+        // Registering the Object class as the default type as done in previous versions\n+        // causes tests to fail. Instead, we do not register anything in this case.\n+        return;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}