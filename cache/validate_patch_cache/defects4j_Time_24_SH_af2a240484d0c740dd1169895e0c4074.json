{
    "patch": "        int failureIndex = -1;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            failureIndex = e.getIllegalFieldValueIndex();\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        } catch (RuntimeException e) {\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                    failureIndex = i;\n                    break;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9ec91243 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        int failureIndex = -1;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            failureIndex = e.getIllegalFieldValueIndex();\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        } catch (RuntimeException e) {\n+            for (int i = 0; i < count; i++) {\n+                if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                    failureIndex = i;\n+                    break;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}