{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i <= intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n\n    if (elem == null || !elem.isFirstChildOf(left)) {\n        // If elem is null, the left-hand side must be empty or not a list.\n        // Generate a new undefined node.\n        elem = NodeUtil.newUndefinedNode(n);\n        n.getParent().replaceChild(n, elem);\n    } else {\n        // elem is the node at the specified index.\n        // If elem is empty, replace it with a new undefined node.\n        if (elem.isEmpty()) {\n            Node newUndefined = NodeUtil.newUndefinedNode(n);\n            n.getParent().replaceChild(n, newUndefined);\n            elem = newUndefined;\n        } else {\n            // Clone the child node and replace the GETELEM with that node\n            Node replacement = elem.getFirstChild().cloneTree();\n            n.getParent().replaceChild(n, replacement);\n            elem = replacement;\n        }\n    }\n\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..5f6e591c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,57 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (intIndex != index || intIndex < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n+    for (int i = 0; current != null && i <= intIndex; i++) {\n         elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        current = current.getNext();\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    if (elem == null || !elem.isFirstChildOf(left)) {\n+        // If elem is null, the left-hand side must be empty or not a list.\n+        // Generate a new undefined node.\n+        elem = NodeUtil.newUndefinedNode(n);\n+        n.getParent().replaceChild(n, elem);\n     } else {\n-      left.removeChild(elem);\n+        // elem is the node at the specified index.\n+        // If elem is empty, replace it with a new undefined node.\n+        if (elem.isEmpty()) {\n+            Node newUndefined = NodeUtil.newUndefinedNode(n);\n+            n.getParent().replaceChild(n, newUndefined);\n+            elem = newUndefined;\n+        } else {\n+            // Clone the child node and replace the GETELEM with that node\n+            Node replacement = elem.getFirstChild().cloneTree();\n+            n.getParent().replaceChild(n, replacement);\n+            elem = replacement;\n+        }\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}