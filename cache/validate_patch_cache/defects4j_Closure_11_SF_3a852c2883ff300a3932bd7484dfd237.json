{
    "patch": "public boolean getprop(String key, String def) {\n    Runtime rt = Runtime.getRuntime();\n    Process proc = null;\n    InputStream stdout = null;\n    boolean result = false;\n    StringBuilder output = new StringBuilder();\n\n    try {\n        String[] args = new String[]{\"getprop\", key};\n        proc = rt.exec(args);\n        stdout = proc.getInputStream();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));\n        String line = \"\";\n        while ((line = reader.readLine()) != null) {\n            output.append(line);\n        }\n\n        int exitVal = proc.waitFor();\n        if (exitVal == 0) {\n            result = true;\n        }\n\n    } catch (IOException e) {\n        // handle exception\n    } catch (InterruptedException e) {\n        // handle exception\n    } finally {\n        if (proc != null) {\n            proc.destroy();\n        }\n    }\n\n    if (!result) {\n        Logger.warning(\"Failed to get property: \" + key);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..fb4f7427 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String key, String def) {\n+    Runtime rt = Runtime.getRuntime();\n+    Process proc = null;\n+    InputStream stdout = null;\n+    boolean result = false;\n+    StringBuilder output = new StringBuilder();\n+\n+    try {\n+        String[] args = new String[]{\"getprop\", key};\n+        proc = rt.exec(args);\n+        stdout = proc.getInputStream();\n+\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));\n+        String line = \"\";\n+        while ((line = reader.readLine()) != null) {\n+            output.append(line);\n+        }\n+\n+        int exitVal = proc.waitFor();\n+        if (exitVal == 0) {\n+            result = true;\n+        }\n+\n+    } catch (IOException e) {\n+        // handle exception\n+    } catch (InterruptedException e) {\n+        // handle exception\n+    } finally {\n+        if (proc != null) {\n+            proc.destroy();\n+        }\n+    }\n+\n+    if (!result) {\n+        Logger.warning(\"Failed to get property: \" + key);\n+    }\n+\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}