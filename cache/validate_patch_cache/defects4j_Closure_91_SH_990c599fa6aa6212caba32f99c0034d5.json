{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n\n        if (rhs != null && NodeUtil.isGet(rhs) &&\n            (rhs.getType() == Token.GETPROP || rhs.getType() == Token.NAME)) {\n          Node grandparent = parent.getParent();\n          if (grandparent != null && (grandparent.getType() == Token.ASSIGN ||\n              grandparent.getType() == Token.VAR ||\n              grandparent.getType() == Token.LET ||\n              grandparent.getType() == Token.CONST ||\n              grandparent.getType() == Token.CATCH ||\n              // nested top-level object literal\n              (NodeUtil.isObjectLit(parent) &&\n                  parent.getParent().getType() == Token.OBJECTLIT))) {\n            return false;\n          }\n        }\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g.: (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n\n        return true;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b61614ba 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,38 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+\n+        if (rhs != null && NodeUtil.isGet(rhs) &&\n+            (rhs.getType() == Token.GETPROP || rhs.getType() == Token.NAME)) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && (grandparent.getType() == Token.ASSIGN ||\n+              grandparent.getType() == Token.VAR ||\n+              grandparent.getType() == Token.LET ||\n+              grandparent.getType() == Token.CONST ||\n+              grandparent.getType() == Token.CATCH ||\n+              // nested top-level object literal\n+              (NodeUtil.isObjectLit(parent) &&\n+                  parent.getParent().getType() == Token.OBJECTLIT))) {\n+            return false;\n+          }\n+        }\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g.: (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+\n+        return true;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}