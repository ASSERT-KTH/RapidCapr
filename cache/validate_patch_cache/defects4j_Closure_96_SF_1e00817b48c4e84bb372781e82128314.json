{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); //skip the function name\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int argumentOrdinal = 0, parameterOrdinal = 0;\n  boolean hasVarArgs = functionType.hasRestFormals();\n  while (arguments.hasNext() && parameters.hasNext()) {\n    Node argument = arguments.next();\n    ++argumentOrdinal;\n    Node parameter = parameters.next();\n    ++parameterOrdinal;\n    if (!parameters.hasNext() && hasVarArgs) {\n      parameter = functionType.getRestFormals();\n      parameterOrdinal = argumentOrdinal;\n    }\n    validator.expectArgumentMatchesParameter(t,\n      argument, getJSType(argument), getJSType(parameter), call, parameterOrdinal);\n  }\n  if (arguments.hasNext() || !parameters.hasNext()) {\n    int extraArgumentsCount = countRemainingArguments(arguments);\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    String warningMessage = getMessageForWrongNumberArgs(call, minArgs, maxArgs, extraArgumentsCount);\n    this.report(t, call, WRONG_ARGUMENT_COUNT, warningMessage);\n  }\n}\n\nprivate int countRemainingArguments(Iterator<Node> arguments) {\n  int count = 0;\n  while (arguments.hasNext()) {\n    arguments.next();\n    ++count;\n  }\n  return count;\n}\n\nprivate String getMessageForWrongNumberArgs(Node call, int minArgs, int maxArgs, int extraArgumentsCount) {\n      int numArgs = call.getChildCount() - 1 + extraArgumentsCount;\n      String message = validator.getReadableJSTypeName(call.getFirstChild(), false).trim() +\n        \" has wrong number of arguments; expected \" + minArgs;\n      if (minArgs != maxArgs) {\n        message += maxArgs >= 0 ? \" to \" + maxArgs : \" or more\";\n      }\n      message += \" but got \" + numArgs;\n      if (extraArgumentsCount > 0) {\n        message += \" (\" + extraArgumentsCount + \" extra argument\" +\n          (extraArgumentsCount > 1 ? \"s\" : \"\") + \")\";\n      }\n    return message;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..a5621a0b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); //skip the function name\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int argumentOrdinal = 0, parameterOrdinal = 0;\n+  boolean hasVarArgs = functionType.hasRestFormals();\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    Node argument = arguments.next();\n+    ++argumentOrdinal;\n+    Node parameter = parameters.next();\n+    ++parameterOrdinal;\n+    if (!parameters.hasNext() && hasVarArgs) {\n+      parameter = functionType.getRestFormals();\n+      parameterOrdinal = argumentOrdinal;\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n+    validator.expectArgumentMatchesParameter(t,\n+      argument, getJSType(argument), getJSType(parameter), call, parameterOrdinal);\n+  }\n+  if (arguments.hasNext() || !parameters.hasNext()) {\n+    int extraArgumentsCount = countRemainingArguments(arguments);\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n+    String warningMessage = getMessageForWrongNumberArgs(call, minArgs, maxArgs, extraArgumentsCount);\n+    this.report(t, call, WRONG_ARGUMENT_COUNT, warningMessage);\n+  }\n+}\n+\n+private int countRemainingArguments(Iterator<Node> arguments) {\n+  int count = 0;\n+  while (arguments.hasNext()) {\n+    arguments.next();\n+    ++count;\n   }\n+  return count;\n+}\n+\n+private String getMessageForWrongNumberArgs(Node call, int minArgs, int maxArgs, int extraArgumentsCount) {\n+      int numArgs = call.getChildCount() - 1 + extraArgumentsCount;\n+      String message = validator.getReadableJSTypeName(call.getFirstChild(), false).trim() +\n+        \" has wrong number of arguments; expected \" + minArgs;\n+      if (minArgs != maxArgs) {\n+        message += maxArgs >= 0 ? \" to \" + maxArgs : \" or more\";\n+      }\n+      message += \" but got \" + numArgs;\n+      if (extraArgumentsCount > 0) {\n+        message += \" (\" + extraArgumentsCount + \" extra argument\" +\n+          (extraArgumentsCount > 1 ? \"s\" : \"\") + \")\";\n+      }\n+    return message;\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}