{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // Only handle anonymous types (e.g. `function({x: string}) {}`) and record types (e.g. `{x: string}`).\n    if (!constraintObj.isRecordType() && !constraintObj.isFunctionType()) {\n      return;\n    }\n\n    // We want to modify the object literal to match the constraint, by taking each property on the record\n    // and trying to match properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String propName : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(propName);\n        if (!isPropertyTypeDeclared(propName)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(propName)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(propName, typeToInfer, null);\n        }\n      }\n    } else if (constraintObj.isFunctionType()) {\n      // Handle anonymous types like `function({x: string}) {}`.\n      if (!constraintObj.hasReferenceName()) {\n        for (String paramName : constraintObj.getParameterNames()) {\n          JSType paramType = constraintObj.getParameterType(paramName);\n          defineInferredProperty(paramName, paramType, null);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..9d0848f2 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,36 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+  public void matchConstraint(ObjectType constraintObj) {\n+    // Only handle anonymous types (e.g. `function({x: string}) {}`) and record types (e.g. `{x: string}`).\n+    if (!constraintObj.isRecordType() && !constraintObj.isFunctionType()) {\n+      return;\n+    }\n+\n+    // We want to modify the object literal to match the constraint, by taking each property on the record\n+    // and trying to match properties on this object.\n+    if (constraintObj.isRecordType()) {\n+      for (String propName : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(propName);\n+        if (!isPropertyTypeDeclared(propName)) {\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(propName)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          }\n+          defineInferredProperty(propName, typeToInfer, null);\n+        }\n+      }\n+    } else if (constraintObj.isFunctionType()) {\n+      // Handle anonymous types like `function({x: string}) {}`.\n+      if (!constraintObj.hasReferenceName()) {\n+        for (String paramName : constraintObj.getParameterNames()) {\n+          JSType paramType = constraintObj.getParameterType(paramName);\n+          defineInferredProperty(paramName, paramType, null);\n+        }\n+      }\n+    }\n+  }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}