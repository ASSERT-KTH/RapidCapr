{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node firstChild = n.getFirstChild();\n    if (firstChild != null && firstChild.getNext() == null) {\n      Node maybeExpr = firstChild.isExprResult() ? firstChild.getFirstChild() : firstChild;\n      if (!NodeUtil.isCallOrNew(maybeExpr)) {\n        boolean containsIf = false;\n        boolean containsNonIf = false;\n        for (Node child : maybeExpr.children()) {\n          if (child.getType() == Token.IF) {\n            if (child.getLastChild().getType() != Token.BLOCK) {\n              // If the \"if\" statement doesn't have a block body, then we can't fold\n              return false;\n            }\n            containsIf = true;\n          } else if (!NodeUtil.isExpressionNode(child)) {\n            // If there's any node besides an IF or an expression, we can't fold\n            return false;\n          } else if (child.getType() != Token.NUMBER && child.getType() != Token.STRING\n              && child.getType() != Token.NULL && child.getType() != Token.FALSE\n              && child.getType() != Token.TRUE && child.getType() != Token.REGEXP) {\n            containsNonIf = true;\n          }\n        }\n        // We can fold if we only have expressions (excluding literal expressions) and at least one \"if\" statement,\n        // and all of those \"if\" statements have block bodies\n        return containsIf && !containsNonIf;\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..293b6bb4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,40 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node firstChild = n.getFirstChild();\n+    if (firstChild != null && firstChild.getNext() == null) {\n+      Node maybeExpr = firstChild.isExprResult() ? firstChild.getFirstChild() : firstChild;\n+      if (!NodeUtil.isCallOrNew(maybeExpr)) {\n+        boolean containsIf = false;\n+        boolean containsNonIf = false;\n+        for (Node child : maybeExpr.children()) {\n+          if (child.getType() == Token.IF) {\n+            if (child.getLastChild().getType() != Token.BLOCK) {\n+              // If the \"if\" statement doesn't have a block body, then we can't fold\n+              return false;\n+            }\n+            containsIf = true;\n+          } else if (!NodeUtil.isExpressionNode(child)) {\n+            // If there's any node besides an IF or an expression, we can't fold\n+            return false;\n+          } else if (child.getType() != Token.NUMBER && child.getType() != Token.STRING\n+              && child.getType() != Token.NULL && child.getType() != Token.FALSE\n+              && child.getType() != Token.TRUE && child.getType() != Token.REGEXP) {\n+            containsNonIf = true;\n+          }\n+        }\n+        // We can fold if we only have expressions (excluding literal expressions) and at least one \"if\" statement,\n+        // and all of those \"if\" statements have block bodies\n+        return containsIf && !containsNonIf;\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}