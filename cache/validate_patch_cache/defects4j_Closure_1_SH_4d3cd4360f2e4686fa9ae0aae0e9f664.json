{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    // Check if there are arguments that are actually referenced.\n    MarkUnreferencedVars markRefd = new MarkUnreferencedVars(fnScope);\n    markRefd.process(compiler.getNodeTraversal());\n\n    int numUnusedArgs = 0;\n    // Count unused parameters and create mapping.\n    Node parameters = function.getSecondChild();\n    for (Node param = parameters.getFirstChild(); param != null; param = param.getNext()) {\n      String name = param.getString();\n      Var var = fnScope.getVar(name);\n      if (!markRefd.isVarReferenced(var)) {\n        numUnusedArgs++;\n      }\n    }\n\n    if (numUnusedArgs <= 0) {\n      // All arguments are used.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args from the end of the function.\n      for (int i = 0; i < numUnusedArgs; i++) {\n        argList.removeChild(argList.getLastChild());\n      }\n      compiler.reportCodeChange();\n    } else {\n      callSiteOptimizer.optimize(fnScope, markRefd.getReferenced());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a8d24c16 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    // Check if there are arguments that are actually referenced.\n+    MarkUnreferencedVars markRefd = new MarkUnreferencedVars(fnScope);\n+    markRefd.process(compiler.getNodeTraversal());\n+\n+    int numUnusedArgs = 0;\n+    // Count unused parameters and create mapping.\n+    Node parameters = function.getSecondChild();\n+    for (Node param = parameters.getFirstChild(); param != null; param = param.getNext()) {\n+      String name = param.getString();\n+      Var var = fnScope.getVar(name);\n+      if (!markRefd.isVarReferenced(var)) {\n+        numUnusedArgs++;\n+      }\n+    }\n+\n+    if (numUnusedArgs <= 0) {\n+      // All arguments are used.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args from the end of the function.\n+      for (int i = 0; i < numUnusedArgs; i++) {\n+        argList.removeChild(argList.getLastChild());\n+      }\n+      compiler.reportCodeChange();\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, markRefd.getReferenced());\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}