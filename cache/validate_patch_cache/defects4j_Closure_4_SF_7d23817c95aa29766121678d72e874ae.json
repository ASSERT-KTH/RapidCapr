{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  if (resolvedViaRegistry) {\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return isResolved() ? registry.isLastGeneration() ? getReferencedType() : this : null;\n  }\n\n  JSType resolvedType = null;\n\n  Collection<ObjectType> storedTypes = registry.getAllCachedTypes();\n  if (!storedTypes.isEmpty()) {\n    // type has been stored, but was not found.\n    resolvedType = getRegistryType(storedTypes.iterator().next());\n  } else {\n    // if the above fix did not work, try resolving via properties.\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    resolvedType = isResolved() ? registry.isLastGeneration() ? getReferencedType() : this : null;\n  }\n\n  if (resolvedType == null) {\n    handleTypeCycle(t);\n  }\n\n  return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..4eba8f11 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,41 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  if (resolvedViaRegistry) {\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return isResolved() ? registry.isLastGeneration() ? getReferencedType() : this : null;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  JSType resolvedType = null;\n \n+  Collection<ObjectType> storedTypes = registry.getAllCachedTypes();\n+  if (!storedTypes.isEmpty()) {\n+    // type has been stored, but was not found.\n+    resolvedType = getRegistryType(storedTypes.iterator().next());\n+  } else {\n+    // if the above fix did not work, try resolving via properties.\n     resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    resolvedType = isResolved() ? registry.isLastGeneration() ? getReferencedType() : this : null;\n   }\n \n+  if (resolvedType == null) {\n+    handleTypeCycle(t);\n+  }\n+\n+  return resolvedType;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}