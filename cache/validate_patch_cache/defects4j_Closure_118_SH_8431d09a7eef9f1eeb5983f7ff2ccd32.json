{
    "patch": " private Property getProperty(String name) {\n     Property prop = properties.get(name);\n     if (prop == null) {\n         return new Property() {\n             @Override\n             boolean scheduleRenaming(Node node, String newName) {\n                 return true; // Do nothing\n             }\n         };\n     }\n     return prop;\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..c8801edc 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,18 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+ private Property getProperty(String name) {\n+     Property prop = properties.get(name);\n+     if (prop == null) {\n+         return new Property() {\n+             @Override\n+             boolean scheduleRenaming(Node node, String newName) {\n+                 return true; // Do nothing\n+             }\n+         };\n+     }\n+     return prop;\n+ }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}