{
    "patch": "            boolean isLocalOffsetAhead = (offsetLocal - offsetAdjusted) < 0;\n            \n            long transitionLocal = isLocalOffsetAhead ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n            long transitionAdjusted = isLocalOffsetAhead ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n            \n            boolean isSameTransition = (transitionLocal == transitionAdjusted);\n            \n            if (isSameTransition) {\n                return isLocalOffsetAhead ? offsetAdjusted : offsetLocal;\n            }\n            \n            int higherOffset = isLocalOffsetAhead ? offsetAdjusted : offsetLocal;\n            int lowerOffset = isLocalOffsetAhead ? offsetLocal : offsetAdjusted;\n            \n            long timeDiff = isLocalOffsetAhead ? instantLocal - offsetAdjusted - transitionAdjusted : transitionAdjusted - (instantLocal - offsetLocal);\n            boolean isAfterTransitionStart = isLocalOffsetAhead ? (instantLocal >= transitionAdjusted) : (instantLocal < transitionLocal);\n\n            if (timeDiff >= getMinimumDurationMillis() && (isAfterTransitionStart || timeDiff >= getDurationField().getUnitMillis())) {\n                return higherOffset;\n            } else {\n                return lowerOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1447222b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            boolean isLocalOffsetAhead = (offsetLocal - offsetAdjusted) < 0;\n+            \n+            long transitionLocal = isLocalOffsetAhead ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+            long transitionAdjusted = isLocalOffsetAhead ? nextTransition(instantLocal - offsetAdjusted) : previousTransition(instantLocal - offsetAdjusted);\n+            \n+            boolean isSameTransition = (transitionLocal == transitionAdjusted);\n+            \n+            if (isSameTransition) {\n+                return isLocalOffsetAhead ? offsetAdjusted : offsetLocal;\n+            }\n+            \n+            int higherOffset = isLocalOffsetAhead ? offsetAdjusted : offsetLocal;\n+            int lowerOffset = isLocalOffsetAhead ? offsetLocal : offsetAdjusted;\n+            \n+            long timeDiff = isLocalOffsetAhead ? instantLocal - offsetAdjusted - transitionAdjusted : transitionAdjusted - (instantLocal - offsetLocal);\n+            boolean isAfterTransitionStart = isLocalOffsetAhead ? (instantLocal >= transitionAdjusted) : (instantLocal < transitionLocal);\n+\n+            if (timeDiff >= getMinimumDurationMillis() && (isAfterTransitionStart || timeDiff >= getDurationField().getUnitMillis())) {\n+                return higherOffset;\n+            } else {\n+                return lowerOffset;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}