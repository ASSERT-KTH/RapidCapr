{
    "patch": "        if (block == ref.getBasicBlock()) {\n          // Check that there are no other assignments in the same block.\n          int count = 0;\n          for (int i = ref.getIndex() + 1; i < references.size(); ++i) {\n            Reference r = references.get(i);\n            if (r.isAssignmentToName()) {\n              if (r.getBasicBlock() == block) {\n                count++;\n                if (count > 1) {\n                  return false;\n                }\n              } else {\n                break;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ed8811ad 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block == ref.getBasicBlock()) {\n+          // Check that there are no other assignments in the same block.\n+          int count = 0;\n+          for (int i = ref.getIndex() + 1; i < references.size(); ++i) {\n+            Reference r = references.get(i);\n+            if (r.isAssignmentToName()) {\n+              if (r.getBasicBlock() == block) {\n+                count++;\n+                if (count > 1) {\n+                  return false;\n+                }\n+              } else {\n+                break;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}