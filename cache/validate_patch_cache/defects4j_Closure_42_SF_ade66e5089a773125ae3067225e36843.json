{
    "patch": "public class IRFactory extends Parser {\n\n    private ErrorReporter errorReporter;\n    private String sourceName;\n    private static final Set<String> ALLOWED_DIRECTIVES =\n        ImmutableSet.of(\"use strict\", \"use asm\");\n\n    public IRFactory(CompilerEnvirons env, ErrorReporter er) {\n        super(env, er);\n        errorReporter = er;\n    }\n\n    public void setSourceName(String sourceName) {\n        this.sourceName = sourceName;\n    }\n\n    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n        AstNode iteratedObject = loopNode.getIteratedObject();\n        if (isDirective(iteratedObject)) {\n            errorReporter.error(\n                \"For-in statement may not have an initializer\",\n                sourceName,\n                iteratedObject.getLineno(), \"\", 0);\n        }\n\n        Node object = transform(iteratedObject);\n        Node lhs;\n        if (loopNode.isForEach()) {\n            // lhs is the VarDecl\n            lhs = newNode(Token.VAR);\n            lhs.addChildToBack(transform(loopNode.getIterator()));\n            // For each, don't add TARGETs.\n        } else {\n            // lhs is the target\n            lhs = transform(loopNode.getIterator());\n        }\n\n        Node body = transformBlock(loopNode.getBody());\n        // The FOR node has up to four children:\n        // 1) The label (if present)\n        // 2) The initializer statement\n        // 3) The condition expression\n        // 4) The body statement\n        Node forNode = newNode(Token.FOR);\n        if (loopNode.getLabel() != null) {\n            forNode.addChildToBack(transform(loopNode.getLabel()));\n        }\n        forNode.addChildToBack(lhs);\n        forNode.addChildToBack(object);\n        forNode.addChildToBack(body);\n\n        return forNode;\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n        Node body = transformBlock(loopNode.getBody());\n        Node forNode = newNode(Token.FOR);\n\n        if (loopNode.getInitializer() != null) {\n            forNode.addChildToBack(transform(loopNode.getInitializer()));\n        } else {\n            forNode.addChildToBack(newNode(Token.EMPTY));\n        }\n\n        if (loopNode.getCondition() == null) {\n            forNode.addChildToBack(newNode(Token.EMPTY));\n        } else {\n            forNode.addChildToBack(transform(loopNode.getCondition()));\n        }\n\n        if (loopNode.getIncrement() == null) {\n            forNode.addChildToBack(newNode(Token.EMPTY));\n        } else {\n            forNode.addChildToBack(transform(loopNode.getIncrement()));\n        }\n        \n        forNode.addChildToBack(body);\n        return forNode;\n    }\n\n    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node callTarget = transform(callNode.getTarget());\n      Node callNodeNode = newNode(Token.CALL, callTarget);\n      for (AstNode n : callNode.getArguments()) {\n        callNodeNode.addChildToBack(transform(n));\n      }\n      return callNodeNode;\n    }\n\n    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n        Node functionName = null;\n        if (functionNode.getFunctionName() != null) {\n            functionName = transform(functionNode.getFunctionName());\n            // Change the NAME to FUNCTION_NAME\n            functionName.setType(Token.FUNCTION_NAME);\n        }\n\n        Node functionParams = newNode(Token.PARAM_LIST);\n        for (int i = 0; i < functionNode.getParams().size(); i++) {\n            Name paramName = functionNode.getParams().get(i);\n            Node param = newNode(Token.NAME, paramName.getIdentifier());\n            param.putProp(Node.SYMBOL_PROP, paramName.getSymbol());\n            functionParams.addChildToBack(param);\n        }\n\n        Node functionBody = newNode(Token.BLOCK, transform(functionNode.getBody()));\n\n        Node functionNodeNode = newNode(Token.FUNCTION, functionBody);\n        if (functionName != null) {\n            functionNodeNode.addChildToBack(functionName);\n        }\n        functionNodeNode.addChildToBack(functionParams);\n\n        return functionNodeNode;\n    }\n\n    @Override\n    Node processIfStatement(IfStatement statementNode) {\n        Node conditionExpr = transform(statementNode.getCondition());\n        Node trueStmts = transform(statementNode.getThenPart());\n        Node falseStmts = null;\n        if (statementNode.getElsePart() != null) {\n            falseStmts = transform(statementNode.getElsePart());\n        }\n\n        if (!trueStmts.hasChildren()) {\n            trueStmts = new Node(Token.BLOCK);\n        }\n        if (falseStmts != null && !falseStmts.hasChildren()) {\n            falseStmts = new Node(Token.BLOCK);\n        }\n\n        if (falseStmts != null) {\n            return newNode(Token.IF, conditionExpr, trueStmts, falseStmts);\n        } else {\n            return newNode(Token.IF, conditionExpr, trueStmts);\n        }\n    }\n\n    @Override\n    Node processLabeledStatement(LabeledStatement statementNode) {\n      Node labeledStatement = transform(statementNode.getStatement());\n      Node labelNode = transform(statementNode.getLabels().get(0));\n      // Change the NAME to LABEL_NAME\n      labelNode.setType(Token.LABEL_NAME);\n      return newNode(Token.LABEL, labelNode, labeledStatement);\n    }\n\n    @Override\n    Node processName(Name name) {\n      Node nameNode = newNode(Token.NAME, name.getIdentifier());\n      nameNode.putProp(Node.SYMBOL_PROP, name.getSymbol());\n      return nameNode;\n    }\n\n    @Override\n    Node processNewExpression(NewExpression newExprNode) {\n      Node constructor = transform(newExprNode.getTarget());\n      Node newNodeNode = newNode(Token.NEW, constructor);\n      for (AstNode n : newExprNode.getArguments()) {\n        newNodeNode.addChildToBack(transform(n));\n      }\n      return newNodeNode;\n    }\n\n    @Override\n    Node processNumber(NumberLiteral numberNode) {\n      return newNode(Token.NUMBER, numberNode.getNumber());\n    }\n\n    @Override\n    Node processObjectLiteral(ObjectLiteral objectNode) {\n      Node objectNodeNode = newNode(Token.OBJECTLIT);\n      for (ObjectProperty prop : objectNode.getElements()) {\n        Node keyNode = transform(prop.getLeft());\n        Node valueNode = transform(prop.getRight());\n        Node propNode = newNode(Token.OBJECT_PROP, keyNode, valueNode);\n        if (prop.isGetter()) {\n          propNode.putIntProp(Node.IS_GETTER_PROP, 1);\n        } else if (prop.isSetter()) {\n          propNode.putIntProp(Node.IS_SETTER_PROP, 1);\n        }\n        objectNodeNode.addChildToBack(propNode);\n      }\n      return objectNodeNode;\n    }\n\n    @Override\n    Node processParenthesizedExpression(ParenthesizedExpression node) {\n        return transform(node.getExpression());\n    }\n\n    @Override\n    Node processPropertyGet(PropertyGet propertyGetNode) {\n      Node targetNode = transform(propertyGetNode.getTarget());\n      Node propertyName = newNode(Token.STRING, propertyGetNode.getProperty().getIdentifier());\n      Node propAccessNodeNode = newNode(Token.GETPROP, targetNode, propertyName);\n      return propAccessNodeNode;\n    }\n\n    @Override\n    Node processRegExpLiteral(RegExpLiteral regexpNode) {\n      return newNode(Token.REGEXP, regexpNode.getValue(), regexpNode.getFlags());\n    }\n\n    @Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n      Node returnNodeNode = newNode(Token.RETURN);\n      if (statementNode.getReturnValue() != null) {\n        returnNodeNode.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return returnNodeNode;\n    }\n\n    @Override\n    Node processString(StringLiteral stringNode) {\n      return newNode(Token.STRING, stringNode.getValue());\n    }\n\n    @Override\n    Node processSwitchCase(SwitchCase caseNode) {\n        Node caseExpr = null;\n        AstNode exprNode = caseNode.getExpression();\n        if (exprNode != null) {\n            caseExpr = transform(exprNode);\n        } else {\n            caseExpr = new Node(Token.DEFAULT);\n        }\n        Node caseBody = transform(caseNode.getStatements());\n        return newNode(Token.CASE, caseExpr, caseBody);\n    }\n\n    @Override\n    Node processSwitchStatement(SwitchStatement statementNode) {\n        Node expr = transform(statementNode.getExpression());\n        Node cases = transformArrayLiteral(statementNode.getCases().toArray());\n        return newNode(Token.SWITCH, expr, cases);\n    }\n\n    @Override\n    Node processThrowStatement(ThrowStatement statementNode) {\n        return newNode(Token.THROW, transform(statementNode.getExpression()));\n    }\n\n    @Override\n    Node processTryStatement(TryStatement statementNode) {\n        Node tryBlock = transformBlock(statementNode.getTryBlock());\n        Node catchBlock = null;\n        AstNode catchVar = statementNode.getCatchClauses().get(0).getVarName();\n        if (catchVar != null) {\n            Node var = transform(catchVar);\n            // Change the NAME to CATCH_NAME\n            var.setType(Token.CATCH_NAME);\n            Node catchBody = transform(statementNode.getCatchClauses().get(0).getBody());\n            catchBlock = newNode(Token.CATCH, var, catchBody);\n        }\n        Node finallyBlock = null;\n        if (statementNode.getFinallyBlock() != null) {\n            finallyBlock = transformBlock(statementNode.getFinallyBlock());\n        }\n        if (catchBlock != null && finallyBlock != null) {\n            return newNode(Token.TRY, tryBlock, catchBlock, finallyBlock);\n        } else if (catchBlock != null) {\n            return newNode(Token.TRY, tryBlock, catchBlock);\n        } else if (finallyBlock != null) {\n            return newNode(Token.TRY, tryBlock, finallyBlock);\n        } else {\n            return newNode(Token.TRY, tryBlock);\n        }\n    }\n\n    @Override\n    Node processUnaryExpression(UnaryExpression node) {\n        Node child = transform(node.getOperand());\n        switch (node.getType()) {\n            case Token.TYPEOF:\n                return newNode(Token.TYPEOF, child);\n            case Token.POS:\n                return newNode(Token.POS, child);\n            case Token.NEG:\n                return newNode(Token.NEG, child);\n            case Token.NOT:\n                return newNode(Token.NOT, child);\n            case Token.BITNOT:\n                return newNode(Token.BITNOT, child);\n            case Token.VOID:\n                return newNode(Token.VOID, child);\n            case Token.DELPROP:\n                return newNode(Token.DELPROP, child);\n            default:\n                throw new RuntimeException(\"Unexpected token: \" + node.getType() + \" \" + Token.name(node.getType()));\n        }\n    }\n\n    @Override\n    Node processVariableDeclaration(VariableDeclaration statementNode) {\n        Node varNode = newNode(Token.VAR);\n        for (VariableInitializer initializer : statementNode.getVariables()) {\n            Node initNode = null;\n            if (initializer.getInitializer() != null) {\n                initNode = transform(initializer.getInitializer());\n            } else {\n                initNode = new Node(Token.EMPTY);\n            }\n            Node nameNode = transform(initializer.getTarget());\n            varNode.addChildToBack(newNode(Token.NAME, nameNode.getString(), initNode));\n        }\n        return varNode;\n    }\n\n    @Override\n    Node processWhileLoop(WhileLoop loopNode) {\n        return newNode(Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    Node processWithStatement(WithStatement statementNode) {\n        Node obj = transform(statementNode.getExpressio",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..f182c653 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,6 +473,22 @@ class IRFactory {\n       }\n     }\n \n+public class IRFactory extends Parser {\n+\n+    private ErrorReporter errorReporter;\n+    private String sourceName;\n+    private static final Set<String> ALLOWED_DIRECTIVES =\n+        ImmutableSet.of(\"use strict\", \"use asm\");\n+\n+    public IRFactory(CompilerEnvirons env, ErrorReporter er) {\n+        super(env, er);\n+        errorReporter = er;\n+    }\n+\n+    public void setSourceName(String sourceName) {\n+        this.sourceName = sourceName;\n+    }\n+\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -565,15 +581,311 @@ class IRFactory {\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n+        AstNode iteratedObject = loopNode.getIteratedObject();\n+        if (isDirective(iteratedObject)) {\n+            errorReporter.error(\n+                \"For-in statement may not have an initializer\",\n+                sourceName,\n+                iteratedObject.getLineno(), \"\", 0);\n+        }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+        Node object = transform(iteratedObject);\n+        Node lhs;\n+        if (loopNode.isForEach()) {\n+            // lhs is the VarDecl\n+            lhs = newNode(Token.VAR);\n+            lhs.addChildToBack(transform(loopNode.getIterator()));\n+            // For each, don't add TARGETs.\n+        } else {\n+            // lhs is the target\n+            lhs = transform(loopNode.getIterator());\n+        }\n+\n+        Node body = transformBlock(loopNode.getBody());\n+        // The FOR node has up to four children:\n+        // 1) The label (if present)\n+        // 2) The initializer statement\n+        // 3) The condition expression\n+        // 4) The body statement\n+        Node forNode = newNode(Token.FOR);\n+        if (loopNode.getLabel() != null) {\n+            forNode.addChildToBack(transform(loopNode.getLabel()));\n+        }\n+        forNode.addChildToBack(lhs);\n+        forNode.addChildToBack(object);\n+        forNode.addChildToBack(body);\n+\n+        return forNode;\n+    }\n+\n+    @Override\n+    Node processForLoop(ForLoop loopNode) {\n+        Node body = transformBlock(loopNode.getBody());\n+        Node forNode = newNode(Token.FOR);\n+\n+        if (loopNode.getInitializer() != null) {\n+            forNode.addChildToBack(transform(loopNode.getInitializer()));\n+        } else {\n+            forNode.addChildToBack(newNode(Token.EMPTY));\n+        }\n+\n+        if (loopNode.getCondition() == null) {\n+            forNode.addChildToBack(newNode(Token.EMPTY));\n+        } else {\n+            forNode.addChildToBack(transform(loopNode.getCondition()));\n+        }\n+\n+        if (loopNode.getIncrement() == null) {\n+            forNode.addChildToBack(newNode(Token.EMPTY));\n+        } else {\n+            forNode.addChildToBack(transform(loopNode.getIncrement()));\n+        }\n+        \n+        forNode.addChildToBack(body);\n+        return forNode;\n+    }\n+\n+    @Override\n+    Node processFunctionCall(FunctionCall callNode) {\n+      Node callTarget = transform(callNode.getTarget());\n+      Node callNodeNode = newNode(Token.CALL, callTarget);\n+      for (AstNode n : callNode.getArguments()) {\n+        callNodeNode.addChildToBack(transform(n));\n+      }\n+      return callNodeNode;\n     }\n \n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+        Node functionName = null;\n+        if (functionNode.getFunctionName() != null) {\n+            functionName = transform(functionNode.getFunctionName());\n+            // Change the NAME to FUNCTION_NAME\n+            functionName.setType(Token.FUNCTION_NAME);\n+        }\n+\n+        Node functionParams = newNode(Token.PARAM_LIST);\n+        for (int i = 0; i < functionNode.getParams().size(); i++) {\n+            Name paramName = functionNode.getParams().get(i);\n+            Node param = newNode(Token.NAME, paramName.getIdentifier());\n+            param.putProp(Node.SYMBOL_PROP, paramName.getSymbol());\n+            functionParams.addChildToBack(param);\n+        }\n+\n+        Node functionBody = newNode(Token.BLOCK, transform(functionNode.getBody()));\n+\n+        Node functionNodeNode = newNode(Token.FUNCTION, functionBody);\n+        if (functionName != null) {\n+            functionNodeNode.addChildToBack(functionName);\n+        }\n+        functionNodeNode.addChildToBack(functionParams);\n+\n+        return functionNodeNode;\n+    }\n+\n+    @Override\n+    Node processIfStatement(IfStatement statementNode) {\n+        Node conditionExpr = transform(statementNode.getCondition());\n+        Node trueStmts = transform(statementNode.getThenPart());\n+        Node falseStmts = null;\n+        if (statementNode.getElsePart() != null) {\n+            falseStmts = transform(statementNode.getElsePart());\n+        }\n+\n+        if (!trueStmts.hasChildren()) {\n+            trueStmts = new Node(Token.BLOCK);\n+        }\n+        if (falseStmts != null && !falseStmts.hasChildren()) {\n+            falseStmts = new Node(Token.BLOCK);\n+        }\n+\n+        if (falseStmts != null) {\n+            return newNode(Token.IF, conditionExpr, trueStmts, falseStmts);\n+        } else {\n+            return newNode(Token.IF, conditionExpr, trueStmts);\n+        }\n+    }\n+\n+    @Override\n+    Node processLabeledStatement(LabeledStatement statementNode) {\n+      Node labeledStatement = transform(statementNode.getStatement());\n+      Node labelNode = transform(statementNode.getLabels().get(0));\n+      // Change the NAME to LABEL_NAME\n+      labelNode.setType(Token.LABEL_NAME);\n+      return newNode(Token.LABEL, labelNode, labeledStatement);\n+    }\n+\n+    @Override\n+    Node processName(Name name) {\n+      Node nameNode = newNode(Token.NAME, name.getIdentifier());\n+      nameNode.putProp(Node.SYMBOL_PROP, name.getSymbol());\n+      return nameNode;\n+    }\n+\n+    @Override\n+    Node processNewExpression(NewExpression newExprNode) {\n+      Node constructor = transform(newExprNode.getTarget());\n+      Node newNodeNode = newNode(Token.NEW, constructor);\n+      for (AstNode n : newExprNode.getArguments()) {\n+        newNodeNode.addChildToBack(transform(n));\n+      }\n+      return newNodeNode;\n+    }\n+\n+    @Override\n+    Node processNumber(NumberLiteral numberNode) {\n+      return newNode(Token.NUMBER, numberNode.getNumber());\n+    }\n+\n+    @Override\n+    Node processObjectLiteral(ObjectLiteral objectNode) {\n+      Node objectNodeNode = newNode(Token.OBJECTLIT);\n+      for (ObjectProperty prop : objectNode.getElements()) {\n+        Node keyNode = transform(prop.getLeft());\n+        Node valueNode = transform(prop.getRight());\n+        Node propNode = newNode(Token.OBJECT_PROP, keyNode, valueNode);\n+        if (prop.isGetter()) {\n+          propNode.putIntProp(Node.IS_GETTER_PROP, 1);\n+        } else if (prop.isSetter()) {\n+          propNode.putIntProp(Node.IS_SETTER_PROP, 1);\n+        }\n+        objectNodeNode.addChildToBack(propNode);\n+      }\n+      return objectNodeNode;\n+    }\n+\n+    @Override\n+    Node processParenthesizedExpression(ParenthesizedExpression node) {\n+        return transform(node.getExpression());\n+    }\n+\n+    @Override\n+    Node processPropertyGet(PropertyGet propertyGetNode) {\n+      Node targetNode = transform(propertyGetNode.getTarget());\n+      Node propertyName = newNode(Token.STRING, propertyGetNode.getProperty().getIdentifier());\n+      Node propAccessNodeNode = newNode(Token.GETPROP, targetNode, propertyName);\n+      return propAccessNodeNode;\n+    }\n+\n+    @Override\n+    Node processRegExpLiteral(RegExpLiteral regexpNode) {\n+      return newNode(Token.REGEXP, regexpNode.getValue(), regexpNode.getFlags());\n+    }\n+\n+    @Override\n+    Node processReturnStatement(ReturnStatement statementNode) {\n+      Node returnNodeNode = newNode(Token.RETURN);\n+      if (statementNode.getReturnValue() != null) {\n+        returnNodeNode.addChildToBack(transform(statementNode.getReturnValue()));\n+      }\n+      return returnNodeNode;\n+    }\n+\n+    @Override\n+    Node processString(StringLiteral stringNode) {\n+      return newNode(Token.STRING, stringNode.getValue());\n+    }\n+\n+    @Override\n+    Node processSwitchCase(SwitchCase caseNode) {\n+        Node caseExpr = null;\n+        AstNode exprNode = caseNode.getExpression();\n+        if (exprNode != null) {\n+            caseExpr = transform(exprNode);\n+        } else {\n+            caseExpr = new Node(Token.DEFAULT);\n+        }\n+        Node caseBody = transform(caseNode.getStatements());\n+        return newNode(Token.CASE, caseExpr, caseBody);\n+    }\n+\n+    @Override\n+    Node processSwitchStatement(SwitchStatement statementNode) {\n+        Node expr = transform(statementNode.getExpression());\n+        Node cases = transformArrayLiteral(statementNode.getCases().toArray());\n+        return newNode(Token.SWITCH, expr, cases);\n+    }\n+\n+    @Override\n+    Node processThrowStatement(ThrowStatement statementNode) {\n+        return newNode(Token.THROW, transform(statementNode.getExpression()));\n+    }\n+\n+    @Override\n+    Node processTryStatement(TryStatement statementNode) {\n+        Node tryBlock = transformBlock(statementNode.getTryBlock());\n+        Node catchBlock = null;\n+        AstNode catchVar = statementNode.getCatchClauses().get(0).getVarName();\n+        if (catchVar != null) {\n+            Node var = transform(catchVar);\n+            // Change the NAME to CATCH_NAME\n+            var.setType(Token.CATCH_NAME);\n+            Node catchBody = transform(statementNode.getCatchClauses().get(0).getBody());\n+            catchBlock = newNode(Token.CATCH, var, catchBody);\n+        }\n+        Node finallyBlock = null;\n+        if (statementNode.getFinallyBlock() != null) {\n+            finallyBlock = transformBlock(statementNode.getFinallyBlock());\n+        }\n+        if (catchBlock != null && finallyBlock != null) {\n+            return newNode(Token.TRY, tryBlock, catchBlock, finallyBlock);\n+        } else if (catchBlock != null) {\n+            return newNode(Token.TRY, tryBlock, catchBlock);\n+        } else if (finallyBlock != null) {\n+            return newNode(Token.TRY, tryBlock, finallyBlock);\n+        } else {\n+            return newNode(Token.TRY, tryBlock);\n+        }\n+    }\n+\n+    @Override\n+    Node processUnaryExpression(UnaryExpression node) {\n+        Node child = transform(node.getOperand());\n+        switch (node.getType()) {\n+            case Token.TYPEOF:\n+                return newNode(Token.TYPEOF, child);\n+            case Token.POS:\n+                return newNode(Token.POS, child);\n+            case Token.NEG:\n+                return newNode(Token.NEG, child);\n+            case Token.NOT:\n+                return newNode(Token.NOT, child);\n+            case Token.BITNOT:\n+                return newNode(Token.BITNOT, child);\n+            case Token.VOID:\n+                return newNode(Token.VOID, child);\n+            case Token.DELPROP:\n+                return newNode(Token.DELPROP, child);\n+            default:\n+                throw new RuntimeException(\"Unexpected token: \" + node.getType() + \" \" + Token.name(node.getType()));\n+        }\n+    }\n+\n+    @Override\n+    Node processVariableDeclaration(VariableDeclaration statementNode) {\n+        Node varNode = newNode(Token.VAR);\n+        for (VariableInitializer initializer : statementNode.getVariables()) {\n+            Node initNode = null;\n+            if (initializer.getInitializer() != null) {\n+                initNode = transform(initializer.getInitializer());\n+            } else {\n+                initNode = new Node(Token.EMPTY);\n+            }\n+            Node nameNode = transform(initializer.getTarget());\n+            varNode.addChildToBack(newNode(Token.NAME, nameNode.getString(), initNode));\n+        }\n+        return varNode;\n+    }\n+\n+    @Override\n+    Node processWhileLoop(WhileLoop loopNode) {\n+        return newNode(Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));\n+    }\n+\n+    @Override\n+    Node processWithStatement(WithStatement statementNode) {\n+        Node obj = transform(statementNode.getExpressio\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}