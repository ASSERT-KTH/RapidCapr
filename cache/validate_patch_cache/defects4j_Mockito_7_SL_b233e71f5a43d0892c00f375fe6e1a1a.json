{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    if (typeVariable.getName().equals(\"T\") && typeVariable.getGenericDeclaration() instanceof Class) {\n        int index = Arrays.asList(((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters()).indexOf(typeVariable);\n        if (index >= 0) {\n            Type type = getClassGenericType(getClass(), index);\n            if (type != null) {\n                return type;\n            }\n        }\n    } else if (typeVariable.getGenericDeclaration() instanceof ParameterizedType) {\n        int index = Arrays.asList(((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments()).indexOf(typeVariable);\n        if (index >= 0) {\n            Type type = getClassGenericType(getClass(), index);\n            if (type != null) {\n                return type;\n            }\n        }\n    }\n    return Object.class; // handle case of null return value\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7234062e4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    if (typeVariable.getName().equals(\"T\") && typeVariable.getGenericDeclaration() instanceof Class) {\n+        int index = Arrays.asList(((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters()).indexOf(typeVariable);\n+        if (index >= 0) {\n+            Type type = getClassGenericType(getClass(), index);\n+            if (type != null) {\n+                return type;\n+            }\n+        }\n+    } else if (typeVariable.getGenericDeclaration() instanceof ParameterizedType) {\n+        int index = Arrays.asList(((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments()).indexOf(typeVariable);\n+        if (index >= 0) {\n+            Type type = getClassGenericType(getClass(), index);\n+            if (type != null) {\n+                return type;\n+            }\n+        }\n+    }\n+    return Object.class; // handle case of null return value\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}