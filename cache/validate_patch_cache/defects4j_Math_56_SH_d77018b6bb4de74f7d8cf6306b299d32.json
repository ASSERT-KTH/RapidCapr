{
    "patch": "        int idx = 1;\n        int countBefore = 0;\n        while (countBefore + idx <= index){\n            countBefore += idx;\n            ++idx;\n        }\n\n        int remainingIndex = index - countBefore;\n        indices[last - 1] = remainingIndex;\n        for (int i = last - 2; i >= 0; --i) {\n            final int offset = uniCounterOffset[i + 1];\n            indices[i] = remainingIndex / offset; \n            remainingIndex = remainingIndex % offset;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..1ef5808be 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,19 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n-            count += idx;\n+        int countBefore = 0;\n+        while (countBefore + idx <= index){\n+            countBefore += idx;\n             ++idx;\n         }\n-        --idx;\n-        indices[last] = idx;\n+\n+        int remainingIndex = index - countBefore;\n+        indices[last - 1] = remainingIndex;\n+        for (int i = last - 2; i >= 0; --i) {\n+            final int offset = uniCounterOffset[i + 1];\n+            indices[i] = remainingIndex / offset; \n+            remainingIndex = remainingIndex % offset;\n+        }\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][2] expected:<1> but was:<0>",
    "test_result": "FAIL"
}