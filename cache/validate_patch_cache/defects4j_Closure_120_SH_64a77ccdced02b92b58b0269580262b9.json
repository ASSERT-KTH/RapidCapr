{
    "patch": "if (block.isFunction) {\n  // check if the scope of initialization and assignment is within that function\n  if (references.indexOf(ref) < references.indexOf(getInitializingReference())) {\n    // if not, then the values could have changed before the assignment\n    return false;\n  }\n  break;\n} else if (block.isLoop) {\n  // Inside a loop, the assignment may happen multiple times\n  return false;\n} else if (block.isExceptionHandler()) {\n  // If the block is an exception handler, the assignment may happen multiple times\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..aab3b966 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+  // check if the scope of initialization and assignment is within that function\n+  if (references.indexOf(ref) < references.indexOf(getInitializingReference())) {\n+    // if not, then the values could have changed before the assignment\n+    return false;\n+  }\n+  break;\n+} else if (block.isLoop) {\n+  // Inside a loop, the assignment may happen multiple times\n+  return false;\n+} else if (block.isExceptionHandler()) {\n+  // If the block is an exception handler, the assignment may happen multiple times\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}