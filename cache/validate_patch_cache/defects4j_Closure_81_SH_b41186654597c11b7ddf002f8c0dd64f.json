{
    "patch": "    ...\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n      // Use a dummy name for unnamed functions, so processing continues.\n      // Using a null name causes the Node hierarchy to differ between named\n      // and unnamed functions, which reduces test coverage.\n      name = new Name();\n      name.setIdentifier(\"\");\n      isUnnamedFunction = true;\n    }\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n      int functionKeywordCharno = functionNode.getAbsolutePosition();\n      int lpColumn = functionNode.getLp() + functionKeywordCharno;\n      newName.setLineno(functionNode.getLineno());\n      newName.setCharno(position2charno(functionKeywordCharno));\n      Node emptyStringNode = newNode(Token.STRING);\n      emptyStringNode.setString(\"\");\n      emptyStringNode.setLineno(newName.getLineno());\n      emptyStringNode.setCharno(position2charno(lpColumn));\n      node.addChildToBack(emptyStringNode);\n    } else {\n      node.addChildToBack(newName);\n    }\n    Node lp = newNode(Token.LP);\n    lp.setLineno(functionNode.getLineno());\n    lp.setCharno(position2charno(functionNode.getLp() + functionNode.getAbsolutePosition()));\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    ...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..fc0bb888 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,40 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    ...\n+    Name name = functionNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+    if (name == null) {\n+      // Use a dummy name for unnamed functions, so processing continues.\n+      // Using a null name causes the Node hierarchy to differ between named\n+      // and unnamed functions, which reduces test coverage.\n+      name = new Name();\n+      name.setIdentifier(\"\");\n+      isUnnamedFunction = true;\n+    }\n+    Node node = newNode(Token.FUNCTION);\n+    Node newName = transform(name);\n+    if (isUnnamedFunction) {\n+      int functionKeywordCharno = functionNode.getAbsolutePosition();\n+      int lpColumn = functionNode.getLp() + functionKeywordCharno;\n+      newName.setLineno(functionNode.getLineno());\n+      newName.setCharno(position2charno(functionKeywordCharno));\n+      Node emptyStringNode = newNode(Token.STRING);\n+      emptyStringNode.setString(\"\");\n+      emptyStringNode.setLineno(newName.getLineno());\n+      emptyStringNode.setCharno(position2charno(lpColumn));\n+      node.addChildToBack(emptyStringNode);\n+    } else {\n+      node.addChildToBack(newName);\n+    }\n+    Node lp = newNode(Token.LP);\n+    lp.setLineno(functionNode.getLineno());\n+    lp.setCharno(position2charno(functionNode.getLp() + functionNode.getAbsolutePosition()));\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+    ...\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}