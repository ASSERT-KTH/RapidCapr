{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        int parentType = parent.getType();\n        if (parentType == Token.BLOCK ||\n                parentType == Token.SCRIPT ||\n                parentType == Token.NAME ||\n                parentType == Token.ASSIGN) {\n            // Only traverse functions that would normally be able to have a @this annotation associated with them.\n            // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n            boolean canHaveThis = true;\n            if (parentType == Token.ASSIGN && !NodeUtil.isLhsByDestructuring(parent)) {\n                Node grandparent = parent.getParent();\n                if (grandparent.getType() == Token.EXPR_RESULT) {\n                    Node callee = grandparent.getFirstChild();\n                    if (callee.getType() == Token.GETPROP && callee.getLastChild().getString().equals(\"prototype\")) {\n                        // Don't traverse the right side of assignments to prototype properties.\n                        if (n == parent.getLastChild()) {\n                            canHaveThis = false;\n                        }\n                    } else if (grandparent.getParent().getType() == Token.EXPR_RESULT &&\n                            grandparent.getParent().getParent().getType() == Token.FUNCTION) {\n                        // Only traverse the left side of assignments to handle assignments to prototype properties.\n                        if (n != parent.getFirstChild()) {\n                            canHaveThis = false;\n                        }\n                    } else {\n                        // Don't traverse the left side of assignment operations like 'Foo.prototype.bar = ...'.\n                        if (parent.getFirstChild().getType() == Token.GETPROP &&\n                                parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n                            canHaveThis = false;\n                        }\n                    }\n                } else {\n                    canHaveThis = false;\n                }\n            }\n            return canHaveThis;\n        } else {\n            return false;\n        }\n    } else {\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..d30c4766 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,56 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+\n+        int parentType = parent.getType();\n+        if (parentType == Token.BLOCK ||\n+                parentType == Token.SCRIPT ||\n+                parentType == Token.NAME ||\n+                parentType == Token.ASSIGN) {\n+            // Only traverse functions that would normally be able to have a @this annotation associated with them.\n+            // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n+            boolean canHaveThis = true;\n+            if (parentType == Token.ASSIGN && !NodeUtil.isLhsByDestructuring(parent)) {\n+                Node grandparent = parent.getParent();\n+                if (grandparent.getType() == Token.EXPR_RESULT) {\n+                    Node callee = grandparent.getFirstChild();\n+                    if (callee.getType() == Token.GETPROP && callee.getLastChild().getString().equals(\"prototype\")) {\n+                        // Don't traverse the right side of assignments to prototype properties.\n+                        if (n == parent.getLastChild()) {\n+                            canHaveThis = false;\n+                        }\n+                    } else if (grandparent.getParent().getType() == Token.EXPR_RESULT &&\n+                            grandparent.getParent().getParent().getType() == Token.FUNCTION) {\n+                        // Only traverse the left side of assignments to handle assignments to prototype properties.\n+                        if (n != parent.getFirstChild()) {\n+                            canHaveThis = false;\n+                        }\n+                    } else {\n+                        // Don't traverse the left side of assignment operations like 'Foo.prototype.bar = ...'.\n+                        if (parent.getFirstChild().getType() == Token.GETPROP &&\n+                                parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+                            canHaveThis = false;\n+                        }\n+                    }\n+                } else {\n+                    canHaveThis = false;\n+                }\n+            }\n+            return canHaveThis;\n+        } else {\n             return false;\n-          }\n-      }\n+        }\n+    } else {\n+        return true;\n     }\n-\n-    return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}