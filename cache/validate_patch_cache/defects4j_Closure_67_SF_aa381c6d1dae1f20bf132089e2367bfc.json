{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n        Node n = assign.getFirstChild();\n        boolean isNotAssignmentOp = !NodeUtil.isAssignmentOp(assign.getParent());\n        boolean hasNextSibling = assign.getNext() == null;\n        boolean isInForIn = NodeUtil.isForIn(assign.getParent());\n\n        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP &&\n                n.getFirstChild().getType() == Token.GETPROP && isNotAssignmentOp && hasNextSibling && !isInForIn) {\n            Node child = n.getFirstChild().getFirstChild().getNext();\n            if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) {\n                return true;\n            }\n        }\n\n        return false;\n    }  ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..6880ae0d 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -312,26 +312,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n     }\n \n     private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n+        Node n = assign.getFirstChild();\n+        boolean isNotAssignmentOp = !NodeUtil.isAssignmentOp(assign.getParent());\n+        boolean hasNextSibling = assign.getNext() == null;\n+        boolean isInForIn = NodeUtil.isForIn(assign.getParent());\n+\n+        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP &&\n+                n.getFirstChild().getType() == Token.GETPROP && isNotAssignmentOp && hasNextSibling && !isInForIn) {\n+            Node child = n.getFirstChild().getFirstChild().getNext();\n+            if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) {\n+                return true;\n+            }\n         }\n-      }\n \n-      return false;\n-    }\n+        return false;\n+    }  \n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}