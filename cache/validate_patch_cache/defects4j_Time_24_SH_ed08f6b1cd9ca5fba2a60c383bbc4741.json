{
    "patch": "catch (IllegalFieldValueException e) {\n    if (!resetFields) {\n        throw e;\n    }\n    boolean extended = savedFields != null &&\n              ((iSavedFieldsCount > 0 && savedFields[0].isSavedField(DateTimeFieldType.year())) ||\n              (iSavedFieldsCount > 1 && savedFields[1].isSavedField(DateTimeFieldType.year())));\n    if (extended) {\n        int year = iDefaultYear;\n        DurationField type;\n        for (int i = 0; i < count; i++) {\n            type = savedFields[i].iField.getDurationField();\n            if (type.equals(DurationFieldType.months().getField(iChrono))) {\n                year = savedFields[i].set(year, savedFields[i].value + 1);\n            }\n        }\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                iChrono.millisOfDay().set(0L, iChrono),\n                iChrono.withUTC()\n        ).withSavedFields(savedFields).withZone(DateTimeZone.UTC);\n        // parseMillis will resolve both against savedFields with year resolved\n        // and against current parse position with unresolved year\n        millis = bucket.parseMillis(text);\n    } else {\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..273f674b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+catch (IllegalFieldValueException e) {\n+    if (!resetFields) {\n+        throw e;\n+    }\n+    boolean extended = savedFields != null &&\n+              ((iSavedFieldsCount > 0 && savedFields[0].isSavedField(DateTimeFieldType.year())) ||\n+              (iSavedFieldsCount > 1 && savedFields[1].isSavedField(DateTimeFieldType.year())));\n+    if (extended) {\n+        int year = iDefaultYear;\n+        DurationField type;\n+        for (int i = 0; i < count; i++) {\n+            type = savedFields[i].iField.getDurationField();\n+            if (type.equals(DurationFieldType.months().getField(iChrono))) {\n+                year = savedFields[i].set(year, savedFields[i].value + 1);\n+            }\n+        }\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                iChrono.millisOfDay().set(0L, iChrono),\n+                iChrono.withUTC()\n+        ).withSavedFields(savedFields).withZone(DateTimeZone.UTC);\n+        // parseMillis will resolve both against savedFields with year resolved\n+        // and against current parse position with unresolved year\n+        millis = bucket.parseMillis(text);\n+    } else {\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}