{
    "patch": "double invm = Double.POSITIVE_INFINITY;\nif (x[xOffset] == 0) {\n    if (y[yOffset] == 0) {\n        result[resultOffset] = Double.NaN;\n    } else if (y[yOffset] > 0) {\n        result[resultOffset] = FastMath.PI / 2;\n    } else {\n        result[resultOffset] = -FastMath.PI / 2;\n    }\n} else if (x[xOffset] == Double.POSITIVE_INFINITY) {\n    if (y[yOffset] == Double.POSITIVE_INFINITY || y[yOffset] == Double.NEGATIVE_INFINITY) {\n        result[resultOffset] = invm;\n    } else {\n        result[resultOffset] = FastMath.PI / 4;\n    }\n} else if (x[xOffset] == Double.NEGATIVE_INFINITY) {\n    if (y[yOffset] == Double.POSITIVE_INFINITY) {\n        result[resultOffset] = -FastMath.PI / 4;\n    } else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n        result[resultOffset] = -FastMath.PI * 3 / 4;\n    } else {\n        result[resultOffset] = -FastMath.PI;\n    }\n} else if (y[yOffset] == Double.POSITIVE_INFINITY) {\n    if (x[xOffset] > 0) {\n        result[resultOffset] = 0;\n    } else {\n        result[resultOffset] = FastMath.PI;\n    }\n} else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n    if (x[xOffset] > 0) {\n        result[resultOffset] = -0.0;\n    } else {\n        result[resultOffset] = -FastMath.PI;\n    }\n} ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..f2b083620 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,42 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+double invm = Double.POSITIVE_INFINITY;\n+if (x[xOffset] == 0) {\n+    if (y[yOffset] == 0) {\n+        result[resultOffset] = Double.NaN;\n+    } else if (y[yOffset] > 0) {\n+        result[resultOffset] = FastMath.PI / 2;\n+    } else {\n+        result[resultOffset] = -FastMath.PI / 2;\n+    }\n+} else if (x[xOffset] == Double.POSITIVE_INFINITY) {\n+    if (y[yOffset] == Double.POSITIVE_INFINITY || y[yOffset] == Double.NEGATIVE_INFINITY) {\n+        result[resultOffset] = invm;\n+    } else {\n+        result[resultOffset] = FastMath.PI / 4;\n+    }\n+} else if (x[xOffset] == Double.NEGATIVE_INFINITY) {\n+    if (y[yOffset] == Double.POSITIVE_INFINITY) {\n+        result[resultOffset] = -FastMath.PI / 4;\n+    } else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n+        result[resultOffset] = -FastMath.PI * 3 / 4;\n+    } else {\n+        result[resultOffset] = -FastMath.PI;\n+    }\n+} else if (y[yOffset] == Double.POSITIVE_INFINITY) {\n+    if (x[xOffset] > 0) {\n+        result[resultOffset] = 0;\n+    } else {\n+        result[resultOffset] = FastMath.PI;\n+    }\n+} else if (y[yOffset] == Double.NEGATIVE_INFINITY) {\n+    if (x[xOffset] > 0) {\n+        result[resultOffset] = -0.0;\n+    } else {\n+        result[resultOffset] = -FastMath.PI;\n+    }\n+} \n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}