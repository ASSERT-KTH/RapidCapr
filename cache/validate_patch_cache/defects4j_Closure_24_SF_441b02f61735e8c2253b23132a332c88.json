{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  // Store already processed alias names to avoid duplicates\n  Set<String> processedAliases = new HashSet<>();\n  for (Var v : scope.getVarIterable()) {\n    if (!v.isAlias()) {\n      continue;\n    }\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent == null || !parent.isVar()) {\n      continue;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null || !grandparent.isScript()) {\n      continue;\n    }\n    Node initializer = n.getFirstChild();\n    if (initializer == null || !initializer.isQualifiedName()) {\n      if (!v.isBleedingFunction()) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n      continue;\n    }\n    String aliasName = n.getString();\n    // Only process the alias once\n    if (processedAliases.contains(aliasName)) {\n      continue;\n    }\n    Var aliasVar = scope.getVar(initializer.getQualifiedName());\n    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n      continue;\n    }\n    aliases.put(aliasName, aliasVar);\n    transformation.addAlias(aliasName, aliasVar.getInitialValue().getQualifiedName());\n    processedAliases.add(aliasName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..165c6260 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,44 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  // Store already processed alias names to avoid duplicates\n+  Set<String> processedAliases = new HashSet<>();\n+  for (Var v : scope.getVarIterable()) {\n+    if (!v.isAlias()) {\n+      continue;\n+    }\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent == null || !parent.isVar()) {\n+      continue;\n+    }\n+    Node grandparent = parent.getParent();\n+    if (grandparent == null || !grandparent.isScript()) {\n+      continue;\n+    }\n+    Node initializer = n.getFirstChild();\n+    if (initializer == null || !initializer.isQualifiedName()) {\n+      if (!v.isBleedingFunction()) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n+      continue;\n+    }\n+    String aliasName = n.getString();\n+    // Only process the alias once\n+    if (processedAliases.contains(aliasName)) {\n+      continue;\n+    }\n+    Var aliasVar = scope.getVar(initializer.getQualifiedName());\n+    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+      continue;\n     }\n+    aliases.put(aliasName, aliasVar);\n+    transformation.addAlias(aliasName, aliasVar.getInitialValue().getQualifiedName());\n+    processedAliases.add(aliasName);\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}