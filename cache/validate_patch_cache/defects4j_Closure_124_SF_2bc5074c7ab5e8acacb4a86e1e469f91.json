{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n\n  // Handle getprop accesses.\n  if (node.isGetProp()) {\n    Node leftChild = node.getFirstChild();\n    while (leftChild.isGetProp()) {\n      leftChild = leftChild.getFirstChild();\n    }\n\n    if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {\n      return false;\n    }\n\n    if (leftChild.isString()) {\n      String computedPropName = leftChild.getString();\n      if (isNameAssignedTo(computedPropName, replacement)) {\n        return false;\n      }\n    }\n  }\n\n  // Handle call or new expressions.\n  if (node.isCall() || node.isNew()) {\n    Node callee = node.getFirstChild();\n    if (callee.isGetProp() && isNameAssignedTo(callee.getLastChild().getString(), replacement)) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..7fd800e7 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,42 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  // No checks are needed for simple names.\n+  if (node.isName()) {\n+    return true;\n+  }\n+\n+  // Handle getprop accesses.\n+  if (node.isGetProp()) {\n+    Node leftChild = node.getFirstChild();\n+    while (leftChild.isGetProp()) {\n+      leftChild = leftChild.getFirstChild();\n     }\n-    Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {\n       return false;\n     }\n \n-    return true;\n+    if (leftChild.isString()) {\n+      String computedPropName = leftChild.getString();\n+      if (isNameAssignedTo(computedPropName, replacement)) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  // Handle call or new expressions.\n+  if (node.isCall() || node.isNew()) {\n+    Node callee = node.getFirstChild();\n+    if (callee.isGetProp() && isNameAssignedTo(callee.getLastChild().getString(), replacement)) {\n+      return false;\n+    }\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +261,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}