{
    "patch": "      ArrayList<Node> unreferenced = Lists.newArrayList();\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          unreferenced.add(lastArg);\n        } else {\n          break;\n        }\n      }\n\n      // Preserve all formal parameter names.\n      Set<String> allParams = Sets.newHashSet();\n      for (Var param : fnScope.getParameters()) {\n        allParams.add(param.getName());\n      }\n\n      // Determine if \"arguments\" is used in the body of the function.\n      boolean argumentsUsed = NodeUtil.detectEvalArgumentUsage(function.getLastChild());\n\n      // Record the removal of the formal parameter.\n     Iterator<Node> it = unreferenced.iterator();\n     while (it.hasNext()) {\n       Node removedParam = it.next();\n       String paramName = removedParam.getString();\n       if (argumentsUsed || !allParams.contains(paramName)) {\n         // Do not remove unused parameters if arguments are used, or if this\n         // function declaration doesn't list all formal parameters.\n         continue;\n       }\n       fnScope.undeclare(removedParam.getString());\n       compiler.reportCodeChange();\n     }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..833b4473 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      ArrayList<Node> unreferenced = Lists.newArrayList();\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          unreferenced.add(lastArg);\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // Preserve all formal parameter names.\n+      Set<String> allParams = Sets.newHashSet();\n+      for (Var param : fnScope.getParameters()) {\n+        allParams.add(param.getName());\n+      }\n+\n+      // Determine if \"arguments\" is used in the body of the function.\n+      boolean argumentsUsed = NodeUtil.detectEvalArgumentUsage(function.getLastChild());\n+\n+      // Record the removal of the formal parameter.\n+     Iterator<Node> it = unreferenced.iterator();\n+     while (it.hasNext()) {\n+       Node removedParam = it.next();\n+       String paramName = removedParam.getString();\n+       if (argumentsUsed || !allParams.contains(paramName)) {\n+         // Do not remove unused parameters if arguments are used, or if this\n+         // function declaration doesn't list all formal parameters.\n+         continue;\n+       }\n+       fnScope.undeclare(removedParam.getString());\n+       compiler.reportCodeChange();\n+     }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}