{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n    Node lastArg = argList.getLastChild();\n    boolean removeArgs = true;\n    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n      removeArgs = removeArgs && NodeUtil.isName(lastArg);\n      argList.removeChild(lastArg);\n      lastArg = argList.getLastChild();\n      compiler.reportCodeChange();\n    }\n    if (removeArgs) {\n      // We removed some or all of the arguments.\n      // If we're in an inner scope, pull them all out and make them locals.\n      Node block = NodeUtil.getEnclosingHoistScope(function);\n      Node newVars = IR.var();\n      newVars.addChildrenToFront(argList.removeChildren());\n      for (Node c : newVars.children()) {\n        Node name = c.cloneNode();\n        name.addChildToFront(IR.name(c.getString()));\n        name.getFirstChild().setJSDocInfo(c.getJSDocInfo());\n        Preconditions.checkState(name.hasOneChild());\n        Node assign = IR.assign(name, IR.name(name.getString()));\n        assign.useSourceInfoIfMissingFrom(newVars);\n        newVars.replaceChild(c, assign);\n        NodeUtil.addFeatureToScript(compiler, Feature.CONST_DECLARATIONS);\n      }\n      if (block.isFunction()) {\n        NodeUtil.addFeatureToScript(compiler, Feature.LET_DECLARATIONS);\n      }\n      newVars.insertAfter(function);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a22c4d87 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+    Node lastArg = argList.getLastChild();\n+    boolean removeArgs = true;\n+    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+      removeArgs = removeArgs && NodeUtil.isName(lastArg);\n+      argList.removeChild(lastArg);\n+      lastArg = argList.getLastChild();\n+      compiler.reportCodeChange();\n+    }\n+    if (removeArgs) {\n+      // We removed some or all of the arguments.\n+      // If we're in an inner scope, pull them all out and make them locals.\n+      Node block = NodeUtil.getEnclosingHoistScope(function);\n+      Node newVars = IR.var();\n+      newVars.addChildrenToFront(argList.removeChildren());\n+      for (Node c : newVars.children()) {\n+        Node name = c.cloneNode();\n+        name.addChildToFront(IR.name(c.getString()));\n+        name.getFirstChild().setJSDocInfo(c.getJSDocInfo());\n+        Preconditions.checkState(name.hasOneChild());\n+        Node assign = IR.assign(name, IR.name(name.getString()));\n+        assign.useSourceInfoIfMissingFrom(newVars);\n+        newVars.replaceChild(c, assign);\n+        NodeUtil.addFeatureToScript(compiler, Feature.CONST_DECLARATIONS);\n+      }\n+      if (block.isFunction()) {\n+        NodeUtil.addFeatureToScript(compiler, Feature.LET_DECLARATIONS);\n+      }\n+      newVars.insertAfter(function);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}