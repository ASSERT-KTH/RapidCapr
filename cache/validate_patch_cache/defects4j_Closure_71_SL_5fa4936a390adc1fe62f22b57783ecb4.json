{
    "patch": "boolean isOverride = false;\nNode ancestor = parent.getParent();\nwhile (ancestor != null) {\n  if (NodeUtil.isAssignmentOp(ancestor)) {\n    Node assignTarget = ancestor.getFirstChild();\n    if (assignTarget.isQualifiedName()) {\n      isOverride = assignTarget.getQualifiedName().equals(getprop.getQualifiedName());\n      break;\n    }\n  }\n  ancestor = ancestor.getParent();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..a9bc3acd 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,18 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false;\n+Node ancestor = parent.getParent();\n+while (ancestor != null) {\n+  if (NodeUtil.isAssignmentOp(ancestor)) {\n+    Node assignTarget = ancestor.getFirstChild();\n+    if (assignTarget.isQualifiedName()) {\n+      isOverride = assignTarget.getQualifiedName().equals(getprop.getQualifiedName());\n+      break;\n+    }\n+  }\n+  ancestor = ancestor.getParent();\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}