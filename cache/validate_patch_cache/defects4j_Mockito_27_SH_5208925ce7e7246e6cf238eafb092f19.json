{
    "patch": "        if (mock instanceof Factory) {\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n            Callback[] callbacks = ((Factory) mock).getCallbacks();\n            if (callbacks == null) {\n                ((Factory) mock).setCallback(0, newFilter);\n            } else {\n                for (int i = 0; i < callbacks.length; i++) {\n                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n                        ((Factory) mock).setCallback(i, newFilter);\n                        return;\n                    }\n                }\n                Callback[] newCallbacks = new Callback[callbacks.length + 1];\n                System.arraycopy(callbacks, 0, newCallbacks, 0, callbacks.length);\n                newCallbacks[callbacks.length] = newFilter;\n                ((Factory) mock).setCallbacks(newCallbacks);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..31d448de3 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Factory) {\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+            Callback[] callbacks = ((Factory) mock).getCallbacks();\n+            if (callbacks == null) {\n+                ((Factory) mock).setCallback(0, newFilter);\n+            } else {\n+                for (int i = 0; i < callbacks.length; i++) {\n+                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                        ((Factory) mock).setCallback(i, newFilter);\n+                        return;\n+                    }\n+                }\n+                Callback[] newCallbacks = new Callback[callbacks.length + 1];\n+                System.arraycopy(callbacks, 0, newCallbacks, 0, callbacks.length);\n+                newCallbacks[callbacks.length] = newFilter;\n+                ((Factory) mock).setCallbacks(newCallbacks);\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}