{
    "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\nif (cfa != null) {\n  if (cfa.catchMap.containsKey(parent)) {\n    for (Node catchNode : cfa.catchMap.get(parent)) {\n      cfa.createEdge(finallyNode, Branch.ON_EX, catchNode);\n    }\n  } else if (cfa.finallyMap.containsKey(parent)) {\n    for (Node finallyCatchNode : cfa.finallyMap.get(parent)) {\n      cfa.createEdge(finallyNode, Branch.ON_EX, finallyCatchNode);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..8a51b637 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  if (cfa.catchMap.containsKey(parent)) {\n+    for (Node catchNode : cfa.catchMap.get(parent)) {\n+      cfa.createEdge(finallyNode, Branch.ON_EX, catchNode);\n+    }\n+  } else if (cfa.finallyMap.containsKey(parent)) {\n+    for (Node finallyCatchNode : cfa.finallyMap.get(parent)) {\n+      cfa.createEdge(finallyNode, Branch.ON_EX, finallyCatchNode);\n+    }\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}