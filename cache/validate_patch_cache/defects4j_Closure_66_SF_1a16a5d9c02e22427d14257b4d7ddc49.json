{
    "patch": "import com.google.gson.Gson;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Map<String, Object> map = gson.fromJson(json, Map.class);\n    double total = (Double) map.get(\"total\");\n    List<Map<String, Object>> list = (List<Map<String, Object>>) map.get(\"list\");\n    int count = 0;\n    for (Map<String, Object> item : list) {\n        String type = (String) item.get(\"type\");\n        if (\"T\".equals(type)) {\n            count++;\n        }\n    }\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6174226c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import com.google.gson.Gson;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Map<String, Object> map = gson.fromJson(json, Map.class);\n+    double total = (Double) map.get(\"total\");\n+    List<Map<String, Object>> list = (List<Map<String, Object>>) map.get(\"list\");\n+    int count = 0;\n+    for (Map<String, Object> item : list) {\n+        String type = (String) item.get(\"type\");\n+        if (\"T\".equals(type)) {\n+            count++;\n+        }\n+    }\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}