{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int matrixSizeThreshold = 1000; // maximum size allowed for the matrix\n    final double memoryFactor = 0.9; // fraction of available memory to use\n    final double usableMemory = Runtime.getRuntime().maxMemory() * memoryFactor; // total usable memory\n    final double requiredMemory = (long) m.getRowDimension() * (long) m.getColumnDimension() * 16; // total memory required for matrix\n\n    if (requiredMemory > usableMemory || m.getRowDimension() > matrixSizeThreshold || m.getColumnDimension() > matrixSizeThreshold) {\n        throw new IllegalArgumentException(\"Matrix size exceeds memory or size limit. Please use a smaller matrix.\");\n    } else {\n        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(getSqrtArray(dec.getRealEigenvalues()));\n            final RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n            return sqrtM;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n        }\n    }\n}\n\nprivate double[] getSqrtArray(double[] ar) {\n    double[] result = new double[ar.length];\n    for (int i = 0; i < ar.length; i++) {\n        result[i] = Math.sqrt(Math.abs(ar[i]));\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..886825160 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int matrixSizeThreshold = 1000; // maximum size allowed for the matrix\n+    final double memoryFactor = 0.9; // fraction of available memory to use\n+    final double usableMemory = Runtime.getRuntime().maxMemory() * memoryFactor; // total usable memory\n+    final double requiredMemory = (long) m.getRowDimension() * (long) m.getColumnDimension() * 16; // total memory required for matrix\n+\n+    if (requiredMemory > usableMemory || m.getRowDimension() > matrixSizeThreshold || m.getColumnDimension() > matrixSizeThreshold) {\n+        throw new IllegalArgumentException(\"Matrix size exceeds memory or size limit. Please use a smaller matrix.\");\n+    } else {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(getSqrtArray(dec.getRealEigenvalues()));\n+            final RealMatrix sqrtM = dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+            return sqrtM;\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n+        }\n     }\n }\n+\n+private double[] getSqrtArray(double[] ar) {\n+    double[] result = new double[ar.length];\n+    for (int i = 0; i < ar.length; i++) {\n+        result[i] = Math.sqrt(Math.abs(ar[i]));\n+    }\n+    return result;\n+}\n+}",
    "result_reason": "java.lang.IllegalArgumentException: Matrix size exceeds memory or size limit. Please use a smaller matrix.",
    "test_result": "FAIL"
}