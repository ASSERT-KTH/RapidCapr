{
    "patch": "public double getTypedPercent(String jsonString){\n    Gson gson = new Gson();\n    Map<String, Object> map = gson.fromJson(jsonString, new TypeToken<Map<String, Object>>(){}.getType());\n    double total = 0;\n    double typed = 0;\n    for(Map.Entry<String, Object> entry: map.entrySet()){\n        total++;\n        if(entry.getValue() instanceof String){\n            String value = (String) entry.getValue();\n            if(value.length() > 0){\n                typed++;\n            }\n        }\n    }\n    if(total == 0) return 0;\n    return (typed/total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5d419304 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String jsonString){\n+    Gson gson = new Gson();\n+    Map<String, Object> map = gson.fromJson(jsonString, new TypeToken<Map<String, Object>>(){}.getType());\n+    double total = 0;\n+    double typed = 0;\n+    for(Map.Entry<String, Object> entry: map.entrySet()){\n+        total++;\n+        if(entry.getValue() instanceof String){\n+            String value = (String) entry.getValue();\n+            if(value.length() > 0){\n+                typed++;\n+            }\n+        }\n+    }\n+    if(total == 0) return 0;\n+    return (typed/total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}