{
    "patch": "public static Number createNumber(String val) {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n\n    char lastChar = val.charAt(val.length() - 1);\n\n    // Check for scientific notation\n    int sciPos = val.indexOf('e') + val.indexOf('E') + 1;\n    boolean scientificNotation = sciPos > 0 && sciPos < val.length() && !(val.charAt(sciPos) == '+' || \n            val.charAt(sciPos) == '-' && sciPos < val.length() - 1 && Character.isDigit(val.charAt(sciPos + 1)));\n\n    int decPos = val.indexOf('.');\n    boolean negative = false;\n    if (val.startsWith(\"-\")) {\n        negative = true;\n        val = val.substring(1);\n    }\n\n    String intVal;\n    String decVal = null;\n    String expVal = null;\n\n    // Extract integer, decimal, and exponent parts\n    if (decPos == -1 && sciPos == 0) {\n        intVal = val;\n    } else if (decPos == -1 && sciPos > 0) {\n        intVal = val.substring(0, sciPos-1);\n        expVal = val.substring(sciPos);\n    } else if (decPos > 0 && sciPos == 0) {\n        intVal = val.substring(0, decPos);\n        decVal = val.substring(decPos+1);\n    } else if (decPos > 0 && sciPos > 0) {\n        if (decPos < sciPos) {\n            intVal = val.substring(0, decPos);\n            decVal = val.substring(decPos + 1, sciPos - 1);\n            expVal = val.substring(sciPos);\n        } else {\n            intVal = val.substring(0, sciPos - 1);\n            expVal = val.substring(sciPos);\n        }\n    } else {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n\n    // If the last character is 'D', 'd', 'F', or 'f' remove it\n    if (lastChar == 'D' || lastChar == 'd' || lastChar == 'F' || lastChar == 'f') {\n        val = val.substring(0, val.length() - 1);\n    }\n\n    try {\n        if (decVal != null || scientificNotation) {\n            // Use BigDecimal for decimal and scientific notation numbers\n            BigDecimal bd;\n            if (scientificNotation) {\n                bd = new BigDecimal(val);\n            } else {\n                bd = new BigDecimal(val);\n            }\n            if (negative) {\n                bd = bd.negate();\n            }\n            if (expVal !",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..467eb148 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,155 +135,78 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+public static Number createNumber(String val) {\n+    if (val == null) {\n+        return null;\n+    }\n+    if (val.length() == 0) {\n+        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+    }\n+    if (val.startsWith(\"--\")) {\n+        return null;\n+    }\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        return createInteger(val);\n+    }\n \n-        if (decPos > -1) {\n+    char lastChar = val.charAt(val.length() - 1);\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n-            }\n-            mant = val.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+    // Check for scientific notation\n+    int sciPos = val.indexOf('e') + val.indexOf('E') + 1;\n+    boolean scientificNotation = sciPos > 0 && sciPos < val.length() && !(val.charAt(sciPos) == '+' || \n+            val.charAt(sciPos) == '-' && sciPos < val.length() - 1 && Character.isDigit(val.charAt(sciPos + 1)));\n \n-                    }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+    int decPos = val.indexOf('.');\n+    boolean negative = false;\n+    if (val.startsWith(\"-\")) {\n+        negative = true;\n+        val = val.substring(1);\n+    }\n \n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n-                    }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+    String intVal;\n+    String decVal = null;\n+    String expVal = null;\n \n-            }\n+    // Extract integer, decimal, and exponent parts\n+    if (decPos == -1 && sciPos == 0) {\n+        intVal = val;\n+    } else if (decPos == -1 && sciPos > 0) {\n+        intVal = val.substring(0, sciPos-1);\n+        expVal = val.substring(sciPos);\n+    } else if (decPos > 0 && sciPos == 0) {\n+        intVal = val.substring(0, decPos);\n+        decVal = val.substring(decPos+1);\n+    } else if (decPos > 0 && sciPos > 0) {\n+        if (decPos < sciPos) {\n+            intVal = val.substring(0, decPos);\n+            decVal = val.substring(decPos + 1, sciPos - 1);\n+            expVal = val.substring(sciPos);\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                return createBigInteger(val);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n+            intVal = val.substring(0, sciPos - 1);\n+            expVal = val.substring(sciPos);\n+        }\n+    } else {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n \n-                return createBigDecimal(val);\n+    // If the last character is 'D', 'd', 'F', or 'f' remove it\n+    if (lastChar == 'D' || lastChar == 'd' || lastChar == 'F' || lastChar == 'f') {\n+        val = val.substring(0, val.length() - 1);\n+    }\n \n+    try {\n+        if (decVal != null || scientificNotation) {\n+            // Use BigDecimal for decimal and scientific notation numbers\n+            BigDecimal bd;\n+            if (scientificNotation) {\n+                bd = new BigDecimal(val);\n+            } else {\n+                bd = new BigDecimal(val);\n             }\n-\n-        }\n-    }\n+            if (negative) {\n+                bd = bd.negate();\n+            }\n+            if (expVal !\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}