{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    JSONArray jsonArray = jsonObject.getJSONArray(\"stats\");\n    for (int i = 0; i < jsonArray.length(); i++) {\n        JSONObject stats = jsonArray.getJSONObject(i);\n        if (stats.getString(\"name\").equals(\"Messages\")) {\n            count = stats.getDouble(\"count\");\n        } else if (stats.getString(\"name\").equals(\"Typed\")) {\n            typedCount = stats.getDouble(\"count\");\n        }\n    }\n    return (typedCount / count) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8907a729 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    JSONArray jsonArray = jsonObject.getJSONArray(\"stats\");\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        JSONObject stats = jsonArray.getJSONObject(i);\n+        if (stats.getString(\"name\").equals(\"Messages\")) {\n+            count = stats.getDouble(\"count\");\n+        } else if (stats.getString(\"name\").equals(\"Typed\")) {\n+            typedCount = stats.getDouble(\"count\");\n+        }\n+    }\n+    return (typedCount / count) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}