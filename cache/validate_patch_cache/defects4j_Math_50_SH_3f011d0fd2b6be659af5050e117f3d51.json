{
    "patch": "if (x == x1) {\n    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n    if (inverted) {\n        // If inverted, move x0 to the left by delta\n        final double newx0 = x0 - delta;\n        if (newx0 <= getMin()) {\n            // If x0 goes below the limit, set it to the limit and move x1 by the same amount\n            x0 = getMin();\n            x1 = FastMath.max(x1 - delta - (x0 - newx0), getMin());\n        } else {\n            x0 = newx0;\n        }\n    } else {\n        // If not inverted, move x1 to the right by delta\n        final double newx1 = x1 + delta;\n        if (newx1 >= getMax()) {\n            // If x1 goes above the limit, set it to the limit and move x0 by the same amount\n            x1 = getMax();\n            x0 = FastMath.min(x0 + delta - (newx1 - x1), getMax());\n        } else {\n            x1 = newx1;\n        }\n    }\n} else {\n    // The new approximation is different from the previous one.\n    // We can safely update the bounds as usual.\n    if (f1 * fx < 0) {\n        x0 = x1;\n        f0 = f1;\n        inverted = !inverted;\n    } else {\n        switch (method) {\n        case ILLINOIS:\n            f0 *= 0.5;\n            break;\n        case PEGASUS:\n            f0 *= f1 / (f1 + fx);\n            break;\n        case REGULA_FALSI:\n            // Nothing.\n            break;\n        default:\n            throw new MathInternalError();\n        }\n    }\n    x1 = x;\n    f1 = fx;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..f16dad32c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,54 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (x == x1) {\n+    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+    if (inverted) {\n+        // If inverted, move x0 to the left by delta\n+        final double newx0 = x0 - delta;\n+        if (newx0 <= getMin()) {\n+            // If x0 goes below the limit, set it to the limit and move x1 by the same amount\n+            x0 = getMin();\n+            x1 = FastMath.max(x1 - delta - (x0 - newx0), getMin());\n+        } else {\n+            x0 = newx0;\n+        }\n+    } else {\n+        // If not inverted, move x1 to the right by delta\n+        final double newx1 = x1 + delta;\n+        if (newx1 >= getMax()) {\n+            // If x1 goes above the limit, set it to the limit and move x0 by the same amount\n+            x1 = getMax();\n+            x0 = FastMath.min(x0 + delta - (newx1 - x1), getMax());\n+        } else {\n+            x1 = newx1;\n+        }\n+    }\n+} else {\n+    // The new approximation is different from the previous one.\n+    // We can safely update the bounds as usual.\n+    if (f1 * fx < 0) {\n+        x0 = x1;\n+        f0 = f1;\n+        inverted = !inverted;\n+    } else {\n+        switch (method) {\n+        case ILLINOIS:\n+            f0 *= 0.5;\n+            break;\n+        case PEGASUS:\n+            f0 *= f1 / (f1 + fx);\n+            break;\n+        case REGULA_FALSI:\n+            // Nothing.\n+            break;\n+        default:\n+            throw new MathInternalError();\n+        }\n+    }\n+    x1 = x;\n+    f1 = fx;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}