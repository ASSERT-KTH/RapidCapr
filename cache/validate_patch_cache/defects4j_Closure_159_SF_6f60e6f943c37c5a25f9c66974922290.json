{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Objects.requireNonNull(changed, \"Set of changed functions cannot be null\");\n\n    if (node == null) {\n        return;\n    }\n\n    for (Node child : node.children()) {\n        int type = child.getType();\n        if (type == Token.CALL || type == Token.FUNCTION) {\n            Node functionNameNode = child.getFirstChild();\n            if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n                changed.add(functionNameNode.getString());\n            }\n        }\n        findCalledFunctions(child, changed);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..e6554af2 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,24 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Objects.requireNonNull(changed, \"Set of changed functions cannot be null\");\n+\n+    if (node == null) {\n+        return;\n     }\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    for (Node child : node.children()) {\n+        int type = child.getType();\n+        if (type == Token.CALL || type == Token.FUNCTION) {\n+            Node functionNameNode = child.getFirstChild();\n+            if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n+                changed.add(functionNameNode.getString());\n+            }\n+        }\n+        findCalledFunctions(child, changed);\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}