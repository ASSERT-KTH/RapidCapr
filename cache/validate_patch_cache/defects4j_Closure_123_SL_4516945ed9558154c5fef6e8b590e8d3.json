{
    "patch": "String operatorSymbol = inOperatorExpr.getOperator().asString();\nExpression rhsNode = inOperatorExpr.getRight();\nString lhsName = inOperatorExpr.getLeft().toString();\n\nboolean isArray = false;\nObject rhs = null;\nif (rhsNode instanceof ArrayAccessExpr) {\n    ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode;\n    rhs = new Object() {\n        int rhsArrayIndex = -1;\n        {\n            isArray = true;\n            arrayAccessExpr.getIndex().accept(this);\n            rhs = arrayAccessExpr.getName().toString();\n        }\n        public void visit(IntegerLiteralExpr n, Void arg) {\n            rhsArrayIndex = n.asInt();\n        }\n    };\n} else {\n    rhs = rhsNode.toString();\n}\n\nString infixExpr;\nif (isArray) {\n    infixExpr = String.format(\"%s[%d] %s %s\", rhs.toString(), rhsArrayIndex, operatorSymbol, lhsName);\n} else {\n    infixExpr = String.format(\"%s %s %s\", rhs.toString(), operatorSymbol, lhsName);\n}\n\nString prefixExpr = \"for(\" + lhsName + \"=\" + rhs.toString() + \".length; --\" + lhsName + \">=0;) \";\nString postfixExpr = \"\";\nif (isArray) {\n    postfixExpr = \"; \" + infixExpr + \";\";\n} else {\n    postfixExpr = \"if(\" + rhs.toString() + \".hasOwnProperty(\" + lhsName + \")){\" + infixExpr + \";}\";\n}\n\ninfixToPrefixExpr.put(infixExpr, prefixExpr + postfixExpr);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}