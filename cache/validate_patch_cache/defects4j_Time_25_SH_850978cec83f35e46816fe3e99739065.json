{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be\n    // on or after the transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n    // corner case: if the local time is within a transition gap,\n    // then nextTransition will return the start of the gap,\n    // and nextTransition(+gap) will also return the start of the gap,\n    // so we need to adjust the returned ntf to be strictly after\n    long ntf = nextTransition(nextAdjusted);\n    if (instantAdjusted + offsetLocal >= ntf) {\n        nextAdjusted = ntf;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..70533fe5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be\n+    // on or after the transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+    // corner case: if the local time is within a transition gap,\n+    // then nextTransition will return the start of the gap,\n+    // and nextTransition(+gap) will also return the start of the gap,\n+    // so we need to adjust the returned ntf to be strictly after\n+    long ntf = nextTransition(nextAdjusted);\n+    if (instantAdjusted + offsetLocal >= ntf) {\n+        nextAdjusted = ntf;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}