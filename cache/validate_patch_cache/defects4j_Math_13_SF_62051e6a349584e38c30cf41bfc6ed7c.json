{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        if (eigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n        }\n        double sqrtEigenvalue = Math.sqrt(eigenvalues[i]);\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            sqrtEigenvalues.setEntry(i, j, (j == i) ? sqrtEigenvalue : 0);\n        }\n    }\n    RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..332ae7c10 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        if (eigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n+        }\n+        double sqrtEigenvalue = Math.sqrt(eigenvalues[i]);\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            sqrtEigenvalues.setEntry(i, j, (j == i) ? sqrtEigenvalue : 0);\n+        }\n     }\n+    RealMatrix sqrt = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+    return sqrt;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}