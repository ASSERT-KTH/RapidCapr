{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            int offsetBefore = getOffset(instantAdjusted - 1);\n            int offsetAfter = getOffset(instantAdjusted + 1);\n            if (offsetBefore == offsetAfter) {\n                return offsetBefore;\n            }\n            if (offsetLocal < offsetAdjusted) {\n                long nextTransitionTime = nextTransition(instantAdjusted);\n                if (nextTransitionTime == instantLocal - offsetLocal) {\n                    return offsetLocal;\n                } else {\n                    return offsetAfter;\n                }\n            } else {\n                long prevTransitionTime = previousTransition(instantAdjusted);\n                if (prevTransitionTime == instantLocal - offsetAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetBefore;\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d97a4c3b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            int offsetBefore = getOffset(instantAdjusted - 1);\n+            int offsetAfter = getOffset(instantAdjusted + 1);\n+            if (offsetBefore == offsetAfter) {\n+                return offsetBefore;\n+            }\n+            if (offsetLocal < offsetAdjusted) {\n+                long nextTransitionTime = nextTransition(instantAdjusted);\n+                if (nextTransitionTime == instantLocal - offsetLocal) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAfter;\n+                }\n+            } else {\n+                long prevTransitionTime = previousTransition(instantAdjusted);\n+                if (prevTransitionTime == instantLocal - offsetAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetBefore;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-11-04T01:00:00.000-05:00 expected:<2007-11-04T0[2]:00:00.000-05:00> but was:<2007-11-04T0[1]:00:00.000-05:00>",
    "test_result": "FAIL"
}