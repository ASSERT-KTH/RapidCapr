{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } else if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        if (size == 1) {\n            return new PeriodFormatter(sep, sep);\n        } else {\n            List<Object> tail = elementPairs.subList(1, size);\n            while (!tail.isEmpty() && tail.get(0) instanceof Separator) {\n                tail = tail.subList(1, tail.size());\n            }\n            if (tail.isEmpty()) {\n                return new PeriodFormatter(sep, sep);\n            } else {\n                Object[] comp = createComposite(tail);\n                PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                Separator combinedSep = sep.finish(f.getPrinter(), f.getParser());\n                if (!tail.get(0).getClass().equals(Separator.class)) {\n                    // tail has no separator, so return f as is\n                    return f;\n                } else {\n                    // append combined separator and remaining tail elements (if any) to f and return\n                    List<Object> newList = new ArrayList<>(1 + tail.size());\n                    newList.add(combinedSep);\n                    newList.addAll(tail);\n                    return toFormatter(newList, false, false);\n                }\n            }\n        }\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2db59b50 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,41 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } else if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        if (size == 1) {\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            List<Object> tail = elementPairs.subList(1, size);\n+            while (!tail.isEmpty() && tail.get(0) instanceof Separator) {\n+                tail = tail.subList(1, tail.size());\n+            }\n+            if (tail.isEmpty()) {\n                 return new PeriodFormatter(sep, sep);\n+            } else {\n+                Object[] comp = createComposite(tail);\n+                PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                Separator combinedSep = sep.finish(f.getPrinter(), f.getParser());\n+                if (!tail.get(0).getClass().equals(Separator.class)) {\n+                    // tail has no separator, so return f as is\n+                    return f;\n+                } else {\n+                    // append combined separator and remaining tail elements (if any) to f and return\n+                    List<Object> newList = new ArrayList<>(1 + tail.size());\n+                    newList.add(combinedSep);\n+                    newList.addAll(tail);\n+                    return toFormatter(newList, false, false);\n+                }\n+            }\n         }\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +835,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}