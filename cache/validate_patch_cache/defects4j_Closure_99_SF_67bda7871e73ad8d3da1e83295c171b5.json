{
    "patch": "public boolean shouldTraverse(final NodeTraversal t, final Node n, final Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        final JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        if (!isFunctionInValidParent(parent)) {\n            return false;\n        }\n    }\n\n    if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR)) {\n        final Node lhs = parent.getFirstChild();\n        final Node rhs = lhs.getNext();\n        if (n == lhs) {\n            // Always traverse the left side of the assignment.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n            if (isDirectPropertyAssignmentToPrototype(lhs)) {\n                return false;\n            }\n        }\n    }\n\n    if (n.getType() == Token.THIS) {\n        // Avoid the use of global `this` object.\n        final Scope.Var var = t.getScope().getVar(\"this\");\n        if (var == null || var.isGlobal()) {\n            t.report(n, CheckGlobalThis.GLOBAL_THIS, \"dangerous use of the global this object\");\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate static boolean isFunctionInValidParent(Node parent) {\n    if (parent == null) {\n        return false;\n    }\n    final int parentType = parent.getType();\n    return parentType == Token.BLOCK || parentType == Token.SCRIPT || isFunctionDeclaration(parent);\n}\n\nprivate static boolean isFunctionDeclaration(Node node) {\n    return (node.getType() == Token.FUNCTION && (\n            node.getParent().getType() == Token.SCRIPT || (node.getParent().getType() == Token.BLOCK && node.getNext() == null)));\n}\n\nprivate static boolean isDirectPropertyAssignmentToPrototype(Node lhs) {\n    if (lhs.getType() != Token.GETPROP) {\n        return false;\n    }\n\n    final Node propNameNode = lhs.getLastChild();\n    if (propNameNode == null || propNameNode.getType() != Token.STRING) {\n        return false;\n    }\n\n    final String propertyName = propNameNode.getString();\n    return propertyName.equals(\"prototype\") ||\n            propertyName.startsWith(\"prototype.\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..d0bee2a8 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,80 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(final NodeTraversal t, final Node n, final Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        final JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        if (!isFunctionInValidParent(parent)) {\n+            return false;\n+        }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR)) {\n+        final Node lhs = parent.getFirstChild();\n+        final Node rhs = lhs.getNext();\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+            if (isDirectPropertyAssignmentToPrototype(lhs)) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+    }\n+\n+    if (n.getType() == Token.THIS) {\n+        // Avoid the use of global `this` object.\n+        final Scope.Var var = t.getScope().getVar(\"this\");\n+        if (var == null || var.isGlobal()) {\n+            t.report(n, CheckGlobalThis.GLOBAL_THIS, \"dangerous use of the global this object\");\n             return false;\n-          }\n-      }\n+        }\n     }\n \n     return true;\n-  }\n+}\n+\n+private static boolean isFunctionInValidParent(Node parent) {\n+    if (parent == null) {\n+        return false;\n+    }\n+    final int parentType = parent.getType();\n+    return parentType == Token.BLOCK || parentType == Token.SCRIPT || isFunctionDeclaration(parent);\n+}\n+\n+private static boolean isFunctionDeclaration(Node node) {\n+    return (node.getType() == Token.FUNCTION && (\n+            node.getParent().getType() == Token.SCRIPT || (node.getParent().getType() == Token.BLOCK && node.getNext() == null)));\n+}\n+\n+private static boolean isDirectPropertyAssignmentToPrototype(Node lhs) {\n+    if (lhs.getType() != Token.GETPROP) {\n+        return false;\n+    }\n+\n+    final Node propNameNode = lhs.getLastChild();\n+    if (propNameNode == null || propNameNode.getType() != Token.STRING) {\n+        return false;\n+    }\n+\n+    final String propertyName = propNameNode.getString();\n+    return propertyName.equals(\"prototype\") ||\n+            propertyName.startsWith(\"prototype.\");\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 22",
    "test_result": "FAIL"
}