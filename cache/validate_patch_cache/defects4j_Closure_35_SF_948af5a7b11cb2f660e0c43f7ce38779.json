{
    "patch": "   * Infers properties on the provided object type based on a given constraint.\n   *\n   * @param type       the object type to infer properties on\n   * @param constraint the constraint to base the inference on\n   */\n  public void inferPropertiesOnTypeFromConstraint(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop) && !propType.isUnknownType()) {\n            JSType typeToInfer = propType.isUnknownType()\n                ? objType.getImplicitPrototype()\n                : propType;\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..901bb9f6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,12 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+   * Infers properties on the provided object type based on a given constraint.\n+   *\n+   * @param type       the object type to infer properties on\n+   * @param constraint the constraint to base the inference on\n+   */\n+  public void inferPropertiesOnTypeFromConstraint(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1123,30 +1129,13 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+          if (!objType.hasProperty(prop) && !propType.isUnknownType()) {\n+            JSType typeToInfer = propType.isUnknownType()\n+                ? objType.getImplicitPrototype()\n+                : propType;\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n-    }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}