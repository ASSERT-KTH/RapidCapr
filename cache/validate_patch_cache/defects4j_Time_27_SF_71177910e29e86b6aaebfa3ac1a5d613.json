{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    }\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        List<Object> remainingPairs = elementPairs.subList(1, size);\n        Separator sep = (Separator) elementPairs.get(0);\n\n        List<Object> literalsBeforeNextSep = new ArrayList<>();\n        int indexNextSep = -1;\n\n        // Find the index of the next Separator and collect any literals between this and the current Separator\n        for (int i = 0; i < remainingPairs.size(); i++) {\n            if (remainingPairs.get(i) instanceof Separator) {\n                indexNextSep = i;\n                break;\n            }\n\n            literalsBeforeNextSep.add(remainingPairs.get(i));\n        }\n\n        PeriodFormatter formatterBeforeNextSep = toFormatter(literalsBeforeNextSep, notPrinter, notParser);\n        PeriodFormatter formatterAfterNextSep;\n\n        if (indexNextSep != -1) {\n            formatterAfterNextSep = toFormatter(remainingPairs.subList(indexNextSep, remainingPairs.size()), notPrinter, notParser);\n        } else {\n            formatterAfterNextSep = toFormatter(Collections.emptyList(), notPrinter, notParser);\n        }\n\n        PeriodPrinter printerBeforeNextSep = formatterBeforeNextSep.getPrinter();\n        PeriodParser parserAfterNextSep = formatterAfterNextSep.getParser();\n\n        if (printerBeforeNextSep == null || parserAfterNextSep == null) {\n            throw new IllegalArgumentException(\"Invalid format: \" + sep + \" is misplaced\");\n        }\n\n        sep = sep.finish(printerBeforeNextSep, parserAfterNextSep);\n\n        return new PeriodFormatter(sep, sep);\n\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..63009dd5 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,64 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        List<Object> remainingPairs = elementPairs.subList(1, size);\n+        Separator sep = (Separator) elementPairs.get(0);\n+\n+        List<Object> literalsBeforeNextSep = new ArrayList<>();\n+        int indexNextSep = -1;\n+\n+        // Find the index of the next Separator and collect any literals between this and the current Separator\n+        for (int i = 0; i < remainingPairs.size(); i++) {\n+            if (remainingPairs.get(i) instanceof Separator) {\n+                indexNextSep = i;\n+                break;\n+            }\n+\n+            literalsBeforeNextSep.add(remainingPairs.get(i));\n+        }\n+\n+        PeriodFormatter formatterBeforeNextSep = toFormatter(literalsBeforeNextSep, notPrinter, notParser);\n+        PeriodFormatter formatterAfterNextSep;\n+\n+        if (indexNextSep != -1) {\n+            formatterAfterNextSep = toFormatter(remainingPairs.subList(indexNextSep, remainingPairs.size()), notPrinter, notParser);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            formatterAfterNextSep = toFormatter(Collections.emptyList(), notPrinter, notParser);\n         }\n+\n+        PeriodPrinter printerBeforeNextSep = formatterBeforeNextSep.getPrinter();\n+        PeriodParser parserAfterNextSep = formatterAfterNextSep.getParser();\n+\n+        if (printerBeforeNextSep == null || parserAfterNextSep == null) {\n+            throw new IllegalArgumentException(\"Invalid format: \" + sep + \" is misplaced\");\n+        }\n+\n+        sep = sep.finish(printerBeforeNextSep, parserAfterNextSep);\n+\n+        return new PeriodFormatter(sep, sep);\n+\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}