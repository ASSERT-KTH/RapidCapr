{
    "patch": "public double getTypedPercent(String[] typed, String[] target) {\n    int i = 0, j = 0, typedChars = 0, targetChars = target.length;\n    while (i < typed.length && j < target.length) {\n        if (typed[i].equals(target[j])) {\n            typedChars++;\n            i++;\n            j++;\n        } else if (i > 0 && typed[i - 1].equals(typed[i])) {\n            i++;\n        } else {\n            return 0.0;\n        }\n    }\n    while (i < typed.length && typed[i - 1].equals(typed[i])) {\n        typedChars++;\n        i++;\n    }\n    return (double)typedChars / targetChars * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a388230b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String[] typed, String[] target) {\n+    int i = 0, j = 0, typedChars = 0, targetChars = target.length;\n+    while (i < typed.length && j < target.length) {\n+        if (typed[i].equals(target[j])) {\n+            typedChars++;\n+            i++;\n+            j++;\n+        } else if (i > 0 && typed[i - 1].equals(typed[i])) {\n+            i++;\n+        } else {\n+            return 0.0;\n+        }\n+    }\n+    while (i < typed.length && typed[i - 1].equals(typed[i])) {\n+        typedChars++;\n+        i++;\n+    }\n+    return (double)typedChars / targetChars * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}