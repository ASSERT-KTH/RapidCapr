{
    "patch": "/**\n * Marks a variable or type reference as a JSDoc token.\n * @return Whether the given token was a type reference.\n */\nprivate boolean markVariableOrTypeReference(String varName, JsDocToken token) {\n  // Assume that there is only one word in varName.\n  if (jsdocBuilder.containsType(token)) {\n    final int varNameLen = varName.length();\n    boolean prevWasUpperCase = true; // Initialize to true to handle the case of starting with an uppercase letter.\n    for (int i = 0; i < varNameLen; i++) {\n      char c = varName.charAt(i);\n      boolean isLetter = Character.isLetter(c);\n      boolean isUpperCase = Character.isUpperCase(c);\n      boolean needSpace;\n      if (i == 0) {\n        needSpace = false;\n      } else if (prevWasUpperCase && !isUpperCase) {\n        needSpace = true;\n      } else if (!prevWasUpperCase && isUpperCase && (i + 1 < varNameLen)\n                 && !Character.isUpperCase(varName.charAt(i + 1))) {\n        needSpace = true;\n      } else {\n        needSpace = false;\n      }\n\n      if ((needSpace || isLetter) && (!isUpperCase || prevWasUpperCase)) {\n        // Mark any space character that comes before this character as whitespace.\n        int startCharno = stream.getCharno() - varNameLen + i;\n        int endCharno = startCharno + (needSpace ? 1 : 0);\n        jsdocBuilder.markWhitespace(startCharno, endCharno, stream.getLineno());\n      } else if (i > 0 && prevWasUpperCase && isLetter) {\n        // We are transitioning to a lowercase letter, so consider the previous character as a type.\n        jsdocBuilder.markType(stream.getCharno() - varNameLen + i - 1, stream.getLineno());\n      }\n      prevWasUpperCase = isUpperCase;\n    }\n\n    // Mark the last character as a type.\n    if (prevWasUpperCase) {\n      jsdocBuilder.markType(stream.getCharno() - 1, stream.getLineno());\n    }\n    return true;\n  } else if (token == JsDocToken.VARIABLE) {\n    jsdocBuilder.markVariable(stream.getCharno() - varName.length(), varName, stream.getLineno());\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..2802c995 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,53 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+/**\n+ * Marks a variable or type reference as a JSDoc token.\n+ * @return Whether the given token was a type reference.\n+ */\n+private boolean markVariableOrTypeReference(String varName, JsDocToken token) {\n+  // Assume that there is only one word in varName.\n+  if (jsdocBuilder.containsType(token)) {\n+    final int varNameLen = varName.length();\n+    boolean prevWasUpperCase = true; // Initialize to true to handle the case of starting with an uppercase letter.\n+    for (int i = 0; i < varNameLen; i++) {\n+      char c = varName.charAt(i);\n+      boolean isLetter = Character.isLetter(c);\n+      boolean isUpperCase = Character.isUpperCase(c);\n+      boolean needSpace;\n+      if (i == 0) {\n+        needSpace = false;\n+      } else if (prevWasUpperCase && !isUpperCase) {\n+        needSpace = true;\n+      } else if (!prevWasUpperCase && isUpperCase && (i + 1 < varNameLen)\n+                 && !Character.isUpperCase(varName.charAt(i + 1))) {\n+        needSpace = true;\n+      } else {\n+        needSpace = false;\n+      }\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+      if ((needSpace || isLetter) && (!isUpperCase || prevWasUpperCase)) {\n+        // Mark any space character that comes before this character as whitespace.\n+        int startCharno = stream.getCharno() - varNameLen + i;\n+        int endCharno = startCharno + (needSpace ? 1 : 0);\n+        jsdocBuilder.markWhitespace(startCharno, endCharno, stream.getLineno());\n+      } else if (i > 0 && prevWasUpperCase && isLetter) {\n+        // We are transitioning to a lowercase letter, so consider the previous character as a type.\n+        jsdocBuilder.markType(stream.getCharno() - varNameLen + i - 1, stream.getLineno());\n+      }\n+      prevWasUpperCase = isUpperCase;\n     }\n \n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+    // Mark the last character as a type.\n+    if (prevWasUpperCase) {\n+      jsdocBuilder.markType(stream.getCharno() - 1, stream.getLineno());\n     }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n-\n-            return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+    return true;\n+  } else if (token == JsDocToken.VARIABLE) {\n+    jsdocBuilder.markVariable(stream.getCharno() - varName.length(), varName, stream.getLineno());\n   }\n+  return false;\n+}\n \n \n   /**",
    "result_reason": "error: method extractMultilineTextualBlock in class JsDocInfoParser cannot be applied to given types;",
    "test_result": "ERROR"
}