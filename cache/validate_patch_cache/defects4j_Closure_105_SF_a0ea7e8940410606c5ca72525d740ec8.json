{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n\n  Node elem = arrayNode.getFirstChild();\n  boolean metString = false;\n  boolean nonStringParent = false;\n  boolean containsEmptyString = false;\n\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      metString = true;\n      if (sb.length() > 0) {\n        sb.append(joinString);\n        foldedSize += joinString.length();\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (metString) {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          foldedSize += sb.length() + 2;\n          sb.setLength(0);\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      } else {\n        nonStringParent = true;\n        arrayFoldedChildren.add(elem);\n        foldedSize += InlineCostEstimator.getCost(elem);\n      }\n      metString = false;\n      containsEmptyString |= elem.getType() == Token.STRING && elem.getString().isEmpty();\n    }\n    elem = elem.getNext();\n  }\n\n  if (metString) {\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n      foldedSize += sb.length() + 2;\n    }\n  } else if (nonStringParent && containsEmptyString) {\n    // If the array contains an empty string, fold it to \"\".\n    arrayFoldedChildren.clear();\n    Node emptyStringNode = Node.newString(\"\");\n    parent.replaceChild(n, emptyStringNode);\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  foldedSize += arrayFoldedChildren.size() - 1;\n  foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n\n  // If found only empty strings we can just replace the join call with empty string\n  if (arrayFoldedChildren.isEmpty() && !containsEmptyString) {\n    Node emptyStringNode = Node.newString(\"\");\n    parent.replaceChild(n, emptyStringNode);\n  } else if (arrayFoldedChildren.size() == 1 && !containsEmptyString) {\n    Node foldedStringNode = arrayFoldedChildren.remove(0);\n    if (foldedSize <= InlineCostEstimator.getCost(n)) {\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n                                     Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n    }\n  } else if (!containsEmptyString) {\n    if ((InlineCostEstimator.getCost(n) < foldedSize || !nonStringParent) &&\n        arrayFoldedChildren.size() != arrayNode.getChildCount()) {\n      arrayNode.detachChildren();\n      arrayNode.addChildToFront(Node.newString(\"\"));\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      parent.replaceChild(left, arrayNode);\n    }\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..ec1d5e60 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,106 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+\n+  Node elem = arrayNode.getFirstChild();\n+  boolean metString = false;\n+  boolean nonStringParent = false;\n+  boolean containsEmptyString = false;\n+\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      metString = true;\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n+        foldedSize += joinString.length();\n+      }\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n+      if (metString) {\n         if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+          foldedSize += sb.length() + 2;\n+          sb.setLength(0);\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n+      } else {\n+        nonStringParent = true;\n+        arrayFoldedChildren.add(elem);\n+        foldedSize += InlineCostEstimator.getCost(elem);\n       }\n-      elem = elem.getNext();\n+      metString = false;\n+      containsEmptyString |= elem.getType() == Token.STRING && elem.getString().isEmpty();\n     }\n+    elem = elem.getNext();\n+  }\n \n+  if (metString) {\n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n+      foldedSize += sb.length() + 2;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  } else if (nonStringParent && containsEmptyString) {\n+    // If the array contains an empty string, fold it to \"\".\n+    arrayFoldedChildren.clear();\n+    Node emptyStringNode = Node.newString(\"\");\n+    parent.replaceChild(n, emptyStringNode);\n+    t.getCompiler().reportCodeChange();\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  foldedSize += arrayFoldedChildren.size() - 1;\n+  foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n+\n+  // If found only empty strings we can just replace the join call with empty string\n+  if (arrayFoldedChildren.isEmpty() && !containsEmptyString) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    parent.replaceChild(n, emptyStringNode);\n+  } else if (arrayFoldedChildren.size() == 1 && !containsEmptyString) {\n+    Node foldedStringNode = arrayFoldedChildren.remove(0);\n+    if (foldedSize <= InlineCostEstimator.getCost(n)) {\n+      arrayNode.detachChildren();\n+      if (foldedStringNode.getType() != Token.STRING) {\n+        // If the Node is not a string literal, ensure that\n+        // it is coerced to a string.\n+        Node replacement = new Node(Token.ADD,\n+                                     Node.newString(\"\"), foldedStringNode);\n+        foldedStringNode = replacement;\n+      }\n+      parent.replaceChild(n, foldedStringNode);\n+    }\n+  } else if (!containsEmptyString) {\n+    if ((InlineCostEstimator.getCost(n) < foldedSize || !nonStringParent) &&\n+        arrayFoldedChildren.size() != arrayNode.getChildCount()) {\n+      arrayNode.detachChildren();\n+      arrayNode.addChildToFront(Node.newString(\"\"));\n+      for (Node node : arrayFoldedChildren) {\n+        arrayNode.addChildToBack(node);\n+      }\n+      parent.replaceChild(left, arrayNode);\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n \n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}