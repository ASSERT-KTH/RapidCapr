{
    "patch": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  boolean variableInlined = false;\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // if the variable is referenced more than once, we can only\n    // inline it if it's immutable and never defined before referenced.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n    variableInlined = true;\n  } else if (refCount == firstRefAfterInit) {\n    // The variable likely only read once, try some more\n    // complex inlining heuristics.\n    Reference reference = referenceInfo.references.get(\n        firstRefAfterInit - 1);\n    if (canInline(declaration, init, reference)) {\n      inline(v, declaration, init, reference);\n      staleVars.add(v);\n      variableInlined = true;\n    }\n  } else if (declaration != init && refCount == 2) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      // The only reference is the initialization, remove the assignment and\n      // the variable declaration.\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n      variableInlined = true;\n    }\n  }\n\n  if (variableInlined) {\n    // If the variable was inlined, we need to update the references\n    // so that they point to the new value of the inlined variable.\n    for (int i = 1; i < refCount; i++) {\n      Reference ref = referenceInfo.references.get(i);\n      Node refNode = ref.getNode();\n      Node valueNode = ref.getAssignedValue();\n      if (valueNode != null) {\n        // This is a Mutation -- the old value is not in use anymore.\n        removeStaleMutations(refNode);\n        continue;\n      }\n      Node inlineNode = nameMap.get(v.getName());\n      // Insert an 'if' statement that checks whether the inlined\n      // variable holds a value.\n      Node ifNode = IR.ifNode(\n          IR.not(IR.isNull(inlineNode)),\n          IR.block(IR.exprResult(IR.assign(refNode.cloneNode(), inlineNode))));\n      refNode.getParent().replaceChild(refNode, ifNode);\n    }\n    staleVars.add(v);\n    return;\n  }\n\n  // If this variable was not inlined normally, check if we can\n  // inline an alias of it. (If the variable was inlined, then the\n  // reference data is out of sync. We're better off just waiting for\n  // the next pass.)\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n      // Inlining the variable based solely on well-defined and assigned\n      // once is *NOT* correct. We relax the correctness requirement if\n      // the variable is declared constant.\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit;\n          aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(candidate.alias,\n              value,\n              candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n          // Update references to point to the inlined alias instead of this variable.\n          updateReferencesToAlias(candidate.alias, v);\n        }\n      }\n    }\n  }\n}\n\nprivate void updateReferencesToAlias(Var alias, Var original) {\n  List<Reference> refsToUpdate = new ArrayList<>();\n  for (Reference ref : referenceMap.getReferences(alias)) {\n    if (ref.getAssignedValue() != null) {\n      // This is a Mutation -- the old value is not in use anymore.\n      removeStaleMutations(ref.getNode());\n      continue;\n    }\n    if (ref.getNode().getInput(0) != nameMap.get(alias.getName())) {\n      continue;\n    }\n    refsToUpdate.add(ref);\n  }\n  for (Reference ref : refsToUpdate) {\n    if (alias.isParam()) {\n      ref.getNode().replaceChild(nameMap.get(original.getName()),\n          nameMap.get(alias.getName()));\n    } else {\n      ref.getNode().replaceChild(nameMap.get(alias.getName()),\n          nameMap.get(original.getName()));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..d53ab5d9 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,134 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n+private void inlineNonConstants(\n+    Var v, ReferenceCollection referenceInfo,\n+    boolean maybeModifiedArguments) {\n+  int refCount = referenceInfo.references.size();\n+  Reference declaration = referenceInfo.references.get(0);\n+  Reference init = referenceInfo.getInitializingReference();\n+  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n+\n+  boolean variableInlined = false;\n+  if (refCount > 1 &&\n+      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+    // if the variable is referenced more than once, we can only\n+    // inline it if it's immutable and never defined before referenced.\n+    Node value;\n+    if (init != null) {\n+      value = init.getAssignedValue();\n+    } else {\n+      // Create a new node for variable that is never initialized.\n+      Node srcLocation = declaration.getNode();\n+      value = NodeUtil.newUndefinedNode(srcLocation);\n+    }\n+    Preconditions.checkNotNull(value);\n+    inlineWellDefinedVariable(v, value, referenceInfo.references);\n+    staleVars.add(v);\n+    variableInlined = true;\n+  } else if (refCount == firstRefAfterInit) {\n+    // The variable likely only read once, try some more\n+    // complex inlining heuristics.\n+    Reference reference = referenceInfo.references.get(\n+        firstRefAfterInit - 1);\n+    if (canInline(declaration, init, reference)) {\n+      inline(v, declaration, init, reference);\n+      staleVars.add(v);\n+      variableInlined = true;\n+    }\n+  } else if (declaration != init && refCount == 2) {\n+    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n+      // The only reference is the initialization, remove the assignment and\n+      // the variable declaration.\n+      Node value = init.getAssignedValue();\n+      Preconditions.checkNotNull(value);\n+      inlineWellDefinedVariable(v, value, referenceInfo.references);\n+      staleVars.add(v);\n+      variableInlined = true;\n+    }\n+  }\n+\n+  if (variableInlined) {\n+    // If the variable was inlined, we need to update the references\n+    // so that they point to the new value of the inlined variable.\n+    for (int i = 1; i < refCount; i++) {\n+      Reference ref = referenceInfo.references.get(i);\n+      Node refNode = ref.getNode();\n+      Node valueNode = ref.getAssignedValue();\n+      if (valueNode != null) {\n+        // This is a Mutation -- the old value is not in use anymore.\n+        removeStaleMutations(refNode);\n+        continue;\n       }\n+      Node inlineNode = nameMap.get(v.getName());\n+      // Insert an 'if' statement that checks whether the inlined\n+      // variable holds a value.\n+      Node ifNode = IR.ifNode(\n+          IR.not(IR.isNull(inlineNode)),\n+          IR.block(IR.exprResult(IR.assign(refNode.cloneNode(), inlineNode))));\n+      refNode.getParent().replaceChild(refNode, ifNode);\n+    }\n+    staleVars.add(v);\n+    return;\n+  }\n \n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n+  // If this variable was not inlined normally, check if we can\n+  // inline an alias of it. (If the variable was inlined, then the\n+  // reference data is out of sync. We're better off just waiting for\n+  // the next pass.)\n+  if (!maybeModifiedArguments &&\n+      !staleVars.contains(v) &&\n+      referenceInfo.isWellDefined() &&\n+      referenceInfo.isAssignedOnceInLifetime()) {\n+      // Inlining the variable based solely on well-defined and assigned\n+      // once is *NOT* correct. We relax the correctness requirement if\n+      // the variable is declared constant.\n+    List<Reference> refs = referenceInfo.references;\n+    for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n+      Node nameNode = refs.get(i).getNode();\n+      if (aliasCandidates.containsKey(nameNode)) {\n+        AliasCandidate candidate = aliasCandidates.get(nameNode);\n+        if (!staleVars.contains(candidate.alias) &&\n+            !isVarInlineForbidden(candidate.alias)) {\n+          Reference aliasInit;\n+          aliasInit = candidate.refInfo.getInitializingReference();\n+          Node value = aliasInit.getAssignedValue();\n+          Preconditions.checkNotNull(value);\n+          inlineWellDefinedVariable(candidate.alias,\n+              value,\n+              candidate.refInfo.references);\n+          staleVars.add(candidate.alias);\n+          // Update references to point to the inlined alias instead of this variable.\n+          updateReferencesToAlias(candidate.alias, v);\n         }\n       }\n     }\n+  }\n+}\n+\n+private void updateReferencesToAlias(Var alias, Var original) {\n+  List<Reference> refsToUpdate = new ArrayList<>();\n+  for (Reference ref : referenceMap.getReferences(alias)) {\n+    if (ref.getAssignedValue() != null) {\n+      // This is a Mutation -- the old value is not in use anymore.\n+      removeStaleMutations(ref.getNode());\n+      continue;\n+    }\n+    if (ref.getNode().getInput(0) != nameMap.get(alias.getName())) {\n+      continue;\n+    }\n+    refsToUpdate.add(ref);\n+  }\n+  for (Reference ref : refsToUpdate) {\n+    if (alias.isParam()) {\n+      ref.getNode().replaceChild(nameMap.get(original.getName()),\n+          nameMap.get(alias.getName()));\n+    } else {\n+      ref.getNode().replaceChild(nameMap.get(alias.getName()),\n+          nameMap.get(original.getName()));\n+    }\n+  }\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}