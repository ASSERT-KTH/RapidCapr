{
    "patch": "public Object returnValueFor(Class clazz) {\n    if (clazz.getName().equals(Boolean.class.getName()) || clazz.getName().equals(boolean.class.getName())) {\n        return false;\n    } else if (clazz.getName().equals(Byte.class.getName()) || clazz.getName().equals(byte.class.getName())) {\n        return (byte) 0;\n    } else if (clazz.getName().equals(Character.class.getName()) || clazz.getName().equals(char.class.getName())) {\n        return (char) 0;\n    } else if (clazz.getName().equals(Double.class.getName()) || clazz.getName().equals(double.class.getName())) {\n        return 0.0;\n    } else if (clazz.getName().equals(Float.class.getName()) || clazz.getName().equals(float.class.getName())) {\n        return 0.0f;\n    } else if (clazz.getName().equals(Integer.class.getName()) || clazz.getName().equals(int.class.getName())) {\n        return 0;\n    } else if (clazz.getName().equals(Long.class.getName()) || clazz.getName().equals(long.class.getName())) {\n        return (long) 0;\n    } else if (clazz.getName().equals(Short.class.getName()) || clazz.getName().equals(short.class.getName())) {\n        return (short) 0;\n    } else if (clazz.getName().equals(String.class.getName())) {\n        return \"\";\n    } else if (clazz.getName().equals(List.class.getName())) {\n        return new ArrayList();\n    } else if (clazz.getName().equals(Iterable.class.getName())) {\n        return Collections.emptyList(); // fix: return an empty List instead of null\n    }\n    // The infill should include what should be done if the provided class type does not match any of the above.\n    throw new UnsupportedOperationException(\"Cannot return value for class \" + clazz.getName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}