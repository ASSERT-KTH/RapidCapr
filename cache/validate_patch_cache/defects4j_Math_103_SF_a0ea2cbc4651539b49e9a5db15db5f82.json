{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double result = 0.0;\n    if (Double.isNaN(x)) {\n        result = 0.0;\n    } else if (Double.isInfinite(x)) {\n        result = x < 0 ? 0.0 : 1.0;\n    } else {\n        double dev = (x - mean) / (standardDeviation * ROOT2);\n        double erf = Erf.erf(dev);\n        if (erf == Double.NaN) {\n            result = 0.0;\n        } else if (erf == Double.POSITIVE_INFINITY) {\n            result = 1.0;\n        } else if (erf == Double.NEGATIVE_INFINITY) {\n            result = 0.0;\n        } else {\n            result = 0.5 * (1.0 + erf);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..6c2dff1c4 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,27 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double result = 0.0;\n+    if (Double.isNaN(x)) {\n+        result = 0.0;\n+    } else if (Double.isInfinite(x)) {\n+        result = x < 0 ? 0.0 : 1.0;\n+    } else {\n+        double dev = (x - mean) / (standardDeviation * ROOT2);\n+        double erf = Erf.erf(dev);\n+        if (erf == Double.NaN) {\n+            result = 0.0;\n+        } else if (erf == Double.POSITIVE_INFINITY) {\n+            result = 1.0;\n+        } else if (erf == Double.NEGATIVE_INFINITY) {\n+            result = 0.0;\n+        } else {\n+            result = 0.5 * (1.0 + erf);\n+        }\n     }\n+    return result;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}