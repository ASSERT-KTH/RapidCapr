{
    "patch": "private static String escapeRegex(String value, boolean unquote) {\n    StringBuilder regex = new StringBuilder(\"\\\\s*+\");\n    boolean wasWhite = false;\n\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n\n            continue;\n        }\n\n        wasWhite = false;\n\n        switch (c) {\n            case '[':\n            case ']':\n            case '{':\n            case '}':\n            case '(':\n            case ')':\n            case '\\\\':\n            case '?':\n            case '+':\n            case '*':\n            case '|':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n        }\n\n        regex.append(c);\n    }\n\n    if (unquote && regex.length() > 1 && regex.charAt(0) == '\\'' && regex.charAt(regex.length() - 1) == '\\'') {\n        regex = new StringBuilder(\"(\" + regex.substring(1, regex.length() - 1) + \")\");\n    }\n\n    regex.append(\"\\\\s*+\");\n    return regex.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..a3217564 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,53 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static String escapeRegex(String value, boolean unquote) {\n+    StringBuilder regex = new StringBuilder(\"\\\\s*+\");\n+    boolean wasWhite = false;\n+\n+    for (int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n+\n+            continue;\n+        }\n+\n+        wasWhite = false;\n+\n+        switch (c) {\n             case '[':\n             case ']':\n-            case '(':\n-            case ')':\n             case '{':\n             case '}':\n+            case '(':\n+            case ')':\n             case '\\\\':\n-            case '|':\n-            case '*':\n+            case '?':\n             case '+':\n+            case '*':\n+            case '|':\n             case '^':\n             case '$':\n             case '.':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n         }\n-        return regex;\n+\n+        regex.append(c);\n+    }\n+\n+    if (unquote && regex.length() > 1 && regex.charAt(0) == '\\'' && regex.charAt(regex.length() - 1) == '\\'') {\n+        regex = new StringBuilder(\"(\" + regex.substring(1, regex.length() - 1) + \")\");\n     }\n \n+    regex.append(\"\\\\s*+\");\n+    return regex.toString();\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: method escapeRegex in class FastDateParser cannot be applied to given types;",
    "test_result": "ERROR"
}