{
    "patch": "Node child = n.getFirstChild();\nString lastType = null;\nwhile (child != null) {\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n  if (lastType != null && type != null && !type.toString().equals(lastType)) {\n    compiler.report(JSError.make(\n        t.getSourceName(), child,\n        TypeValidator.TYPE_MISMATCH_WARNING, name, lastType, type.toString()));\n  }\n  lastType = type != null ? type.toString() : null;\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                             processProperty(t, prop, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n  child = child.getNext();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..5a457413 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,30 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+Node child = n.getFirstChild();\n+String lastType = null;\n+while (child != null) {\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+  if (lastType != null && type != null && !type.toString().equals(lastType)) {\n+    compiler.report(JSError.make(\n+        t.getSourceName(), child,\n+        TypeValidator.TYPE_MISMATCH_WARNING, name, lastType, type.toString()));\n+  }\n+  lastType = type != null ? type.toString() : null;\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                             processProperty(t, prop, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+  child = child.getNext();\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}