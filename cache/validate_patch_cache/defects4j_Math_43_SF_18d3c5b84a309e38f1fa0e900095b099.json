{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    // Update sumLogImpl and secondMoment\n    if (!Double.isNaN(value)) {\n        if (sumLogImpl != null) {\n            sumLogImpl.increment(Math.log(value));\n        }\n        if (secondMoment != null) {\n            secondMoment.increment(value);\n        }\n    }\n\n    // if geoMeanImpl is not null then check for non-positive values\n    if (geoMeanImpl != null) {\n        if (value <= 0) {\n            throw new IllegalArgumentException(\"Geometric Mean is undefined for non-positive values\");\n        }\n        geoMeanImpl.increment(value);\n    }\n    // if geoMeanImpl is null then check for positive values\n    else {\n        if (value > 0) {\n            geoMeanImpl = new GeometricMean();\n            geoMeanImpl.increment(value);\n        }\n    }\n\n    // Overridden Mean\n    if (meanImpl != null) {\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n    } else {\n        meanImpl = new Mean();\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n    }\n\n    // Overridden Variance\n    if (varianceImpl != null) {\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n    } else {\n        varianceImpl = new Variance();\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..dc5b9d21e 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,54 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    // Update sumLogImpl and secondMoment\n+    if (!Double.isNaN(value)) {\n+        if (sumLogImpl != null) {\n+            sumLogImpl.increment(Math.log(value));\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+        if (secondMoment != null) {\n+            secondMoment.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    }\n+\n+    // if geoMeanImpl is not null then check for non-positive values\n+    if (geoMeanImpl != null) {\n+        if (value <= 0) {\n+            throw new IllegalArgumentException(\"Geometric Mean is undefined for non-positive values\");\n+        }\n+        geoMeanImpl.increment(value);\n+    }\n+    // if geoMeanImpl is null then check for positive values\n+    else {\n+        if (value > 0) {\n+            geoMeanImpl = new GeometricMean();\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n \n+    // Overridden Mean\n+    if (meanImpl != null) {\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+    } else {\n+        meanImpl = new Mean();\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+    }\n+\n+    // Overridden Variance\n+    if (varianceImpl != null) {\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+    } else {\n+        varianceImpl = new Variance();\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+    }\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "java.lang.IllegalArgumentException: Geometric Mean is undefined for non-positive values",
    "test_result": "FAIL"
}