{
    "patch": "public String fixCode(String code) {\n    String fixedCode = code;\n    String regex = \"(?<!')\\\\b(in)\\\\b(?!')\";\n    Matcher matcher = Pattern.compile(regex).matcher(fixedCode);\n    while (matcher.find()) {\n        int inIndex = matcher.start();\n        int spaceIndex = inIndex + 2;\n        while (fixedCode.charAt(spaceIndex) == ' ') {\n            spaceIndex++;\n        }\n        if (fixedCode.charAt(spaceIndex) != '(') {\n            fixedCode = fixedCode.substring(0, inIndex) + \" \" + fixedCode.substring(inIndex+2);\n        }\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..3dc1d783 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,22 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixedCode = code;\n+    String regex = \"(?<!')\\\\b(in)\\\\b(?!')\";\n+    Matcher matcher = Pattern.compile(regex).matcher(fixedCode);\n+    while (matcher.find()) {\n+        int inIndex = matcher.start();\n+        int spaceIndex = inIndex + 2;\n+        while (fixedCode.charAt(spaceIndex) == ' ') {\n+            spaceIndex++;\n+        }\n+        if (fixedCode.charAt(spaceIndex) != '(') {\n+            fixedCode = fixedCode.substring(0, inIndex) + \" \" + fixedCode.substring(inIndex+2);\n+        }\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}