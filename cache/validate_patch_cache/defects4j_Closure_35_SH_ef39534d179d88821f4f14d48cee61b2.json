{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        objType = objType.withoutProperty(\"prototype\");\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType.getGreatestSubtype(objType.getNativeObjectType());\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n        flowIncompleteTypes.put(objType.getReferenceName(), objType);\n      }\n      return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..f3b8e5c4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,18 +1121,18 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+        objType = objType.withoutProperty(\"prototype\");\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+            JSType typeToInfer = propType.getGreatestSubtype(objType.getNativeObjectType());\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n+        flowIncompleteTypes.put(objType.getReferenceName(), objType);\n       }\n+      return;\n+    }\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}