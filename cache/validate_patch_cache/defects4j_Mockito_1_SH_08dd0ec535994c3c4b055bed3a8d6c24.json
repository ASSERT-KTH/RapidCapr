{
    "patch": "            Object[] args = invocation.getRawArguments();\n            for (int i = indexOfVararg; i < args.length; i++) {\n                for (int position = 0; position < matchers.size() - 1; position++) {\n                    Matcher m = matchers.get(position);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(args[position]);\n                    }\n                }\n            }\n            if (args.length == indexOfVararg + 1) {\n                Matcher lastMatcher = matchers.get(matchers.size() - 1);\n                if (lastMatcher instanceof CapturesArguments) {\n                    ((CapturesArguments) lastMatcher).captureFrom(new Object[0]);\n                }\n            } else {\n                Matcher lastMatcher = matchers.get(matchers.size() - 1);\n                if (lastMatcher instanceof CapturesArguments) {\n                    Object[] varargArray = Arrays.copyOfRange(args, indexOfVararg, args.length);\n                    ((CapturesArguments) lastMatcher).captureFrom(varargArray);\n                }                 \n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..ac3809ad6 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,27 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] args = invocation.getRawArguments();\n+            for (int i = indexOfVararg; i < args.length; i++) {\n+                for (int position = 0; position < matchers.size() - 1; position++) {\n+                    Matcher m = matchers.get(position);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(args[position]);\n+                    }\n+                }\n+            }\n+            if (args.length == indexOfVararg + 1) {\n+                Matcher lastMatcher = matchers.get(matchers.size() - 1);\n+                if (lastMatcher instanceof CapturesArguments) {\n+                    ((CapturesArguments) lastMatcher).captureFrom(new Object[0]);\n+                }\n+            } else {\n+                Matcher lastMatcher = matchers.get(matchers.size() - 1);\n+                if (lastMatcher instanceof CapturesArguments) {\n+                    Object[] varargArray = Arrays.copyOfRange(args, indexOfVararg, args.length);\n+                    ((CapturesArguments) lastMatcher).captureFrom(varargArray);\n+                }                 \n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}