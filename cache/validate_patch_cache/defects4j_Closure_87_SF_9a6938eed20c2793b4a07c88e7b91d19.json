{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n\n      // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n      if (onlyChild.getType() == Token.EXPR_RESULT &&\n          onlyChild.hasOneChild() &&\n          onlyChild.getFirstChild().getType() == Token.STRING &&\n          NodeUtil.isFunction(n.getParent())) {\n        return false;\n      }\n\n      // Do not fold EXPR_RESULT if parent is EXPR_VOID, IF or FOR.\n      if ((n.getParent() != null) && \n          ((n.getParent().getType() == Token.EXPR_VOID) ||\n           (n.getParent().getType() == Token.IF) ||\n           (n.getParent().getType() == Token.FOR))) {\n        return false;\n      }\n\n      // Do not fold empty statements.\n      if (onlyChild.getType() == Token.EMPTY) {\n        return false;\n      }\n\n      // Do not fold an EXPR_RESULT node that has a direct child\n      // that is an IF or FOR loop.\n      for (Node child = onlyChild.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        if ((child.getType() == Token.IF) || \n            (child.getType() == Token.FOR)) {\n          return false;\n        }\n      }\n\n      // Do not fold an EXPR_RESULT node that includes a STRING that is not the only child or a closed expression.\n      boolean hasString = false;\n      for (Node child = onlyChild.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        if (child.getType() == Token.STRING) {\n          hasString = true;\n          if ((child.getNext() != null) || \n              (NodeUtil.closes(onlyChild)) ||\n              (child == onlyChild.getLastChild())) {\n            return false;\n          }\n        }\n      }\n\n      // Always fold blocks containing a single expression statement.\n      return true;\n    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n      // Do not fold a block containing only a function declaration.\n      return false;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a28ad1cf 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,69 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+\n+      // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n+      if (onlyChild.getType() == Token.EXPR_RESULT &&\n+          onlyChild.hasOneChild() &&\n+          onlyChild.getFirstChild().getType() == Token.STRING &&\n+          NodeUtil.isFunction(n.getParent())) {\n+        return false;\n       }\n-    }\n \n-    return false;\n+      // Do not fold EXPR_RESULT if parent is EXPR_VOID, IF or FOR.\n+      if ((n.getParent() != null) && \n+          ((n.getParent().getType() == Token.EXPR_VOID) ||\n+           (n.getParent().getType() == Token.IF) ||\n+           (n.getParent().getType() == Token.FOR))) {\n+        return false;\n+      }\n+\n+      // Do not fold empty statements.\n+      if (onlyChild.getType() == Token.EMPTY) {\n+        return false;\n+      }\n+\n+      // Do not fold an EXPR_RESULT node that has a direct child\n+      // that is an IF or FOR loop.\n+      for (Node child = onlyChild.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        if ((child.getType() == Token.IF) || \n+            (child.getType() == Token.FOR)) {\n+          return false;\n+        }\n+      }\n+\n+      // Do not fold an EXPR_RESULT node that includes a STRING that is not the only child or a closed expression.\n+      boolean hasString = false;\n+      for (Node child = onlyChild.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        if (child.getType() == Token.STRING) {\n+          hasString = true;\n+          if ((child.getNext() != null) || \n+              (NodeUtil.closes(onlyChild)) ||\n+              (child == onlyChild.getLastChild())) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Always fold blocks containing a single expression statement.\n+      return true;\n+    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n+      // Do not fold a block containing only a function declaration.\n+      return false;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}