{
    "patch": "for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n  if (child.isGetProp() || child.isSetProp() || child.isStringKey()) {\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(\n            JSError.make(\n                t.getSourceName(),\n                child,\n                propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION,\n                name,\n                (type == null ? \"null\" : type.toString()),\n                n.toString(),\n                \"\"));\n      }\n    }\n  } else {\n    // This child is not a STRING, GET or SET.\n    // Not sure if this is an error. Log for now.\n    // TODO(user): Should this be reported to the user as an error?\n    compiler.report(\n        JSError.make(\n            t.getSourceName(),\n            child,\n            \"Unexpected child type found in object literal\",\n            Warnings.INVALIDATION,\n            \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..b84db403 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,41 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+  if (child.isGetProp() || child.isSetProp() || child.isStringKey()) {\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now.\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(\n+            JSError.make(\n+                t.getSourceName(),\n+                child,\n+                propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION,\n+                name,\n+                (type == null ? \"null\" : type.toString()),\n+                n.toString(),\n+                \"\"));\n+      }\n+    }\n+  } else {\n+    // This child is not a STRING, GET or SET.\n+    // Not sure if this is an error. Log for now.\n+    // TODO(user): Should this be reported to the user as an error?\n+    compiler.report(\n+        JSError.make(\n+            t.getSourceName(),\n+            child,\n+            \"Unexpected child type found in object literal\",\n+            Warnings.INVALIDATION,\n+            \"\"));\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}