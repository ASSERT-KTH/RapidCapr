{
    "patch": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)),\n                                          atol)) {\n    if (allowed == AllowedSolution.ANY_SIDE ||\n        (fx >= 0 && allowed == AllowedSolution.LEFT_SIDE) ||\n        (fx <= 0 && allowed == AllowedSolution.RIGHT_SIDE) ||\n        (fx <= 0 && allowed == AllowedSolution.ABOVE_SIDE && x >= midpoint(x0, x1)) ||\n        (fx >= 0 && allowed == AllowedSolution.BELOW_SIDE && x <= midpoint(x0, x1))) {\n        return x;\n    }\n    throw new ConvergenceException(LocalizedFormats.ITERATION_FAILED, getMaximalIterationCount());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..892d57e76 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,17 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)),\n+                                          atol)) {\n+    if (allowed == AllowedSolution.ANY_SIDE ||\n+        (fx >= 0 && allowed == AllowedSolution.LEFT_SIDE) ||\n+        (fx <= 0 && allowed == AllowedSolution.RIGHT_SIDE) ||\n+        (fx <= 0 && allowed == AllowedSolution.ABOVE_SIDE && x >= midpoint(x0, x1)) ||\n+        (fx >= 0 && allowed == AllowedSolution.BELOW_SIDE && x <= midpoint(x0, x1))) {\n+        return x;\n+    }\n+    throw new ConvergenceException(LocalizedFormats.ITERATION_FAILED, getMaximalIterationCount());\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}