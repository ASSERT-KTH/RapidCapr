{
    "patch": "        BigInteger n = BigInteger.valueOf(numerator);\n        BigInteger d = BigInteger.valueOf(denominator);\n        BigInteger gcd = n.gcd(d);\n        if (gcd.intValue() == denominator || numerator == 0) {\n            return Fraction.ZERO;\n        }\n        return Fraction.getFraction(numerator / gcd.intValue(), denominator / gcd.intValue());",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..9590a757 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,13 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+        BigInteger n = BigInteger.valueOf(numerator);\n+        BigInteger d = BigInteger.valueOf(denominator);\n+        BigInteger gcd = n.gcd(d);\n+        if (gcd.intValue() == denominator || numerator == 0) {\n+            return Fraction.ZERO;\n+        }\n+        return Fraction.getFraction(numerator / gcd.intValue(), denominator / gcd.intValue());\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: variable gcd is already defined in method reduce()",
    "test_result": "ERROR"
}