{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n\nif (candidate != null) {\n    Class<?> fieldType = field.getType();\n    if (fieldType.isAssignableFrom(candidate.getClass())) {\n        try {\n            field.setAccessible(true);\n            field.set(fieldInstance, candidate);\n        } catch(IllegalAccessException e) {\n            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n        }\n        mocks.remove(candidate);\n    } else {\n        throw new RuntimeException(\"Mock candidate \" + candidate.getClass().getSimpleName() + \" is not compatible with field type \" + fieldType.getSimpleName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..c3bd25da4 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,25 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+\n+if (candidate != null) {\n+    Class<?> fieldType = field.getType();\n+    if (fieldType.isAssignableFrom(candidate.getClass())) {\n+        try {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, candidate);\n+        } catch(IllegalAccessException e) {\n+            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+        }\n+        mocks.remove(candidate);\n+    } else {\n+        throw new RuntimeException(\"Mock candidate \" + candidate.getClass().getSimpleName() + \" is not compatible with field type \" + fieldType.getSimpleName());\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}