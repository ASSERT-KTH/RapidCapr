{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType declaredType = objType.getPropertyType(prop);\n            JSType intersect = getNativeType(NO_TYPE);\n            if (declaredType != null) {\n              intersect = declaredType.getGreatestSubtype(propType);\n            }\n            if (intersect.isBottom()) {\n              warnings.add(JSError.make(\n                  n, TypeValidator.DOES_NOT_EXTEND_EXPLICITLY,\n                  propType.toString(), declaredType.toString()));\n            }\n            JSType union = declaredType.getLeastSupertype(propType);\n            if (!union.equals(declaredType)) {\n              objType.defineInferredProperty(prop, union, null);\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..22e2b524 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1130,9 +1130,23 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType declaredType = objType.getPropertyType(prop);\n+            JSType intersect = getNativeType(NO_TYPE);\n+            if (declaredType != null) {\n+              intersect = declaredType.getGreatestSubtype(propType);\n+            }\n+            if (intersect.isBottom()) {\n+              warnings.add(JSError.make(\n+                  n, TypeValidator.DOES_NOT_EXTEND_EXPLICITLY,\n+                  propType.toString(), declaredType.toString()));\n+            }\n+            JSType union = declaredType.getLeastSupertype(propType);\n+            if (!union.equals(declaredType)) {\n+              objType.defineInferredProperty(prop, union, null);\n+            }\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}