{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType() || constructorType.isEmptyType()) {\n      type = getNativeType(JSTypeNative.OBJECT_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        // If the constructor has an instance type, use it as the type of the newly created object.\n        if (ct.getInstanceType() != null) {\n          type = ct.getInstanceType().restrictByNotNullOrUndefined();\n        } else {\n          // If the constructor does not have an instance type, infer the type from the arguments passed to it.\n          boolean hasArguments = false;\n          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n            hasArguments = true;\n            scope = traverse(arg, scope);\n          }\n          if (hasArguments) {\n            type = inferTypeOfConstructedObject(constructor, ct, scope);\n          } else {\n            type = getNativeType(JSTypeNative.OBJECT_TYPE);\n          }\n        }\n      } else if (constructorType.isFunctionType()) {\n          type = getNativeType(JSTypeNative.OBJECT_TYPE);\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(JSTypeNative.OBJECT_TYPE);\n  }\n  n.setJSType(type);\n  return scope;\n}\n\nprivate JSType inferTypeOfConstructedObject(Node constructor, FunctionType constructorType, FlowScope scope) {\n  List<JSType> argTypes = new ArrayList<>();\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    argTypes.add(arg.getJSType());\n  }\n  JSTypeRegistry registry = constructor.getJSType().getRegistry();\n  FunctionType inferredType = registry.createConstructorType(\n          constructorType.getReferenceName(),\n          registry.createParameters(constructorType.getParametersCount(), argTypes),\n          constructorType.getReturnType());\n  return inferredType.getInstanceType();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..8b418b27 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,58 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType() || constructorType.isEmptyType()) {\n+      type = getNativeType(JSTypeNative.OBJECT_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        // If the constructor has an instance type, use it as the type of the newly created object.\n+        if (ct.getInstanceType() != null) {\n+          type = ct.getInstanceType().restrictByNotNullOrUndefined();\n+        } else {\n+          // If the constructor does not have an instance type, infer the type from the arguments passed to it.\n+          boolean hasArguments = false;\n+          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+            hasArguments = true;\n+            scope = traverse(arg, scope);\n+          }\n+          if (hasArguments) {\n+            type = inferTypeOfConstructedObject(constructor, ct, scope);\n+          } else {\n+            type = getNativeType(JSTypeNative.OBJECT_TYPE);\n+          }\n         }\n+      } else if (constructorType.isFunctionType()) {\n+          type = getNativeType(JSTypeNative.OBJECT_TYPE);\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  if (type == null) {\n+    type = getNativeType(JSTypeNative.OBJECT_TYPE);\n+  }\n+  n.setJSType(type);\n+  return scope;\n+}\n+\n+private JSType inferTypeOfConstructedObject(Node constructor, FunctionType constructorType, FlowScope scope) {\n+  List<JSType> argTypes = new ArrayList<>();\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    argTypes.add(arg.getJSType());\n+  }\n+  JSTypeRegistry registry = constructor.getJSType().getRegistry();\n+  FunctionType inferredType = registry.createConstructorType(\n+          constructorType.getReferenceName(),\n+          registry.createParameters(constructorType.getParametersCount(), argTypes),\n+          constructorType.getReturnType());\n+  return inferredType.getInstanceType();\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}