{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        return;\n    }\n    \n    Callback[] callbacks = ((Factory) mock).getCallbacks();\n    if (callbacks.length == 0) {\n        return;\n    }\n    \n    if (callbacks[0] instanceof MethodInterceptorFilter) {\n        callbacks[0] = new MethodInterceptorFilter(((MethodInterceptorFilter) callbacks[0]).getMockHandler(), (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallbacks(callbacks);\n        return;\n    }\n    \n    for (int i = 1; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MethodInterceptorFilter) {\n            callbacks[i] = new MethodInterceptorFilter(((MethodInterceptorFilter) callbacks[i]).getMockHandler(), (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n            ((Factory) mock).setCallbacks(callbacks);\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..157562a92 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        return;\n+    }\n+    \n+    Callback[] callbacks = ((Factory) mock).getCallbacks();\n+    if (callbacks.length == 0) {\n+        return;\n+    }\n+    \n+    if (callbacks[0] instanceof MethodInterceptorFilter) {\n+        callbacks[0] = new MethodInterceptorFilter(((MethodInterceptorFilter) callbacks[0]).getMockHandler(), (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallbacks(callbacks);\n+        return;\n+    }\n+    \n+    for (int i = 1; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MethodInterceptorFilter) {\n+            callbacks[i] = new MethodInterceptorFilter(((MethodInterceptorFilter) callbacks[i]).getMockHandler(), (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+            ((Factory) mock).setCallbacks(callbacks);\n+            return;\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}