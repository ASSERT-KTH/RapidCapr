{
    "patch": "if (cfa != null && parent.getType() != Token.FUNCTION && finallyNode != node) {\n  // If we have a ControlFlowAnalysis object, create an unconditional edge from\n  // fromNode to finallyNode and the function will handle the control flow.\n  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  return null;\n} else {\n  if (NodeUtil.isFunctionBlock(parent) || (node == parent.getFirstChild()\n        && NodeUtil.getEnclosingType(parent.getParent()) == Token.FUNCTION)) {\n    // After the end of a function, control is transferred to the caller if there's one.\n    Node functionNode = NodeUtil.getEnclosingNode(parent, Token.FUNCTION);\n    Node afterFunctionNode = computeFollowNode(functionNode, functionNode, cfa);\n    cfa.createEdge(fromNode, Branch.UNCOND, afterFunctionNode);\n    return null;\n  } else if (NodeUtil.isLoopStructure(parent)) {\n    // After the end of a loop, control goes back to the loop condition.\n    return parent.getFirstChild();\n  } else if (parent.getType() == Token.TRY) {\n    if (parent.getFirstChild() == node) {\n      // Coming out of a try block, go back to the finally block if there's one.\n      if (NodeUtil.hasFinally(parent)) {\n        return parent.getLastChild();\n      } else {\n        return node.getNext();\n      }\n    } else {\n      // Coming out of a catch or finally block, go to the statement after the entire try-catch-finally.\n      return computeFollowNode(parent, parent.getParent(), cfa);\n    }\n  } else {\n    // Otherwise, control is transferred up the AST to the parent node.\n    return computeFollowNode(parent, parent, cfa);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..31324d93 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,39 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && parent.getType() != Token.FUNCTION && finallyNode != node) {\n+  // If we have a ControlFlowAnalysis object, create an unconditional edge from\n+  // fromNode to finallyNode and the function will handle the control flow.\n+  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  return null;\n+} else {\n+  if (NodeUtil.isFunctionBlock(parent) || (node == parent.getFirstChild()\n+        && NodeUtil.getEnclosingType(parent.getParent()) == Token.FUNCTION)) {\n+    // After the end of a function, control is transferred to the caller if there's one.\n+    Node functionNode = NodeUtil.getEnclosingNode(parent, Token.FUNCTION);\n+    Node afterFunctionNode = computeFollowNode(functionNode, functionNode, cfa);\n+    cfa.createEdge(fromNode, Branch.UNCOND, afterFunctionNode);\n+    return null;\n+  } else if (NodeUtil.isLoopStructure(parent)) {\n+    // After the end of a loop, control goes back to the loop condition.\n+    return parent.getFirstChild();\n+  } else if (parent.getType() == Token.TRY) {\n+    if (parent.getFirstChild() == node) {\n+      // Coming out of a try block, go back to the finally block if there's one.\n+      if (NodeUtil.hasFinally(parent)) {\n+        return parent.getLastChild();\n+      } else {\n+        return node.getNext();\n+      }\n+    } else {\n+      // Coming out of a catch or finally block, go to the statement after the entire try-catch-finally.\n+      return computeFollowNode(parent, parent.getParent(), cfa);\n+    }\n+  } else {\n+    // Otherwise, control is transferred up the AST to the parent node.\n+    return computeFollowNode(parent, parent, cfa);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}