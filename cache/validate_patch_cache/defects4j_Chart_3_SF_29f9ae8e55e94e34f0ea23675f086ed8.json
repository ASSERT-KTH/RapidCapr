{
    "patch": "public class TimeSeries implements Cloneable, Serializable {\n\n    private String domain;\n\n    private String range;\n\n    /** Storage for the data. */\n    private List<TimeSeriesDataItem> data;\n\n    /** Creates a new (empty) time series.\n     * @param name  the name (<code>null</code> not permitted).\n     * @param domain  the domain description (<code>null</code> permitted).\n     * @param range  the range description (<code>null</code> permitted).\n     */\n    public TimeSeries(String name, String domain, String range) {\n        ArgumentUtils.nullNotPermitted(name, \"name\");\n        this.setName(name);\n        this.domain = domain;\n        this.range = range;\n        this.data = new ArrayList<>();\n    }\n\n    /**\n     * Creates a new time series that contains no data.\n     *\n     * @param name the name of the series.\n     * @param domain the domain description.\n     * @param range the range description.\n     */\n    public TimeSeries(String name, String domain, String range, Class timePeriodClass){\n        ArgumentUtils.nullNotPermitted(name, \"name\");\n        ArgumentUtils.nullNotPermitted(timePeriodClass, \"timePeriodClass\");\n\n        this.setName(name);\n        this.domain = domain;\n        this.range = range;\n        this.data = new ArrayList<>();\n    }\n\n    /**\n     * Clones the time series.\n     *\n     * @return A clone of the time series.\n     *\n     * @throws CloneNotSupportedException if the series cannot be cloned.\n     */\n    @Override\n    public TimeSeries clone() throws CloneNotSupportedException {\n        TimeSeries clone = (TimeSeries) super.clone();\n        clone.data = new ArrayList<>(this.data.size());\n        for (TimeSeriesDataItem item : this.data) {\n            clone.add(item.clone());\n        }\n        return clone;\n    }\n\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param item  the item (<code>null</code> not permitted).\n     *\n     * @throws SeriesException if there is a problem adding the item.\n     */\n    public synchronized void add(TimeSeriesDataItem item) throws SeriesException {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null item not allowed.\");\n        }\n        this.data.add(item);\n    }\n\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     *\n     * @throws SeriesException if there is a problem adding the item.\n     */\n    public void add(RegularTimePeriod period, double value) throws SeriesException {\n        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n        this.add(item);\n    }\n\n    /**\n     * Removes all data items from the series.\n     *\n     * @since 1.0.6\n     */\n    public void clear() {\n        if (this.data.size() > 0) {\n            this.data.clear();\n        }\n    }\n\n    /**\n     * Returns the number of data items held in the series.\n     *\n     * @return The item count.\n     */\n    public int getItemCount() {\n        return this.data.size();\n    }\n\n    /**\n     * Creates a new time series that is a copy of this series.\n     *\n     * @param start the start index of the subset to copy.\n     * @param end the end index (inclusive) of the subset to copy.\n     *\n     * @return A new time series.\n     *\n     * @throws CloneNotSupportedException if cloning is not supported.\n     */\n    public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.clear();\n        if (this.data.size() > 0) {\n            int endIndex = Math.min(end, this.data.size() - 1);\n            for (int index = start; index <= endIndex; index++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        copy.setDomainDescription(null);\n        copy.setRangeDescription(null);\n        return copy;\n    }\n\n    /**\n     * Returns the description of the domain (time-axis).\n     *\n     * @return The domain description (possibly <code>null</code>).\n     *\n     * @see #setDomainDescription(String description)\n     */\n    public String getDomainDescription() {\n        return this.domain;\n    }\n\n    /**\n     * Returns the description of the range (value-axis).\n     *\n     * @return The range description (possibly <code>null</code>).\n     *\n     * @see #setRangeDescription(String description)\n     */\n    public String getRangeDescription() {\n        return this.range;\n    }\n\n    /**\n     * Sets the description of the domain (time-axis) and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param description  the description (<code>null</code> permitted).\n     *\n     * @see #getDomainDescription()\n     */\n    public void setDomainDescription(String description) {\n        String old = this.domain;\n        this.domain = description;\n        firePropertyChange(\"Domain\", old, description);\n    }\n\n    /**\n     * Sets the description of the range (value-axis) and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param description  the description (<code>null</code> permitted).\n     *\n     * @see #getRangeDescription()\n     */\n    public void setRangeDescription(String description) {\n        String old = this.range;\n        this.range = description;\n        firePropertyChange(\"Range\", old, description);\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..3111ae3 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,198 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public class TimeSeries implements Cloneable, Serializable {\n+\n+    private String domain;\n+\n+    private String range;\n+\n+    /** Storage for the data. */\n+    private List<TimeSeriesDataItem> data;\n+\n+    /** Creates a new (empty) time series.\n+     * @param name  the name (<code>null</code> not permitted).\n+     * @param domain  the domain description (<code>null</code> permitted).\n+     * @param range  the range description (<code>null</code> permitted).\n+     */\n+    public TimeSeries(String name, String domain, String range) {\n+        ArgumentUtils.nullNotPermitted(name, \"name\");\n+        this.setName(name);\n+        this.domain = domain;\n+        this.range = range;\n+        this.data = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Creates a new time series that contains no data.\n+     *\n+     * @param name the name of the series.\n+     * @param domain the domain description.\n+     * @param range the range description.\n+     */\n+    public TimeSeries(String name, String domain, String range, Class timePeriodClass){\n+        ArgumentUtils.nullNotPermitted(name, \"name\");\n+        ArgumentUtils.nullNotPermitted(timePeriodClass, \"timePeriodClass\");\n+\n+        this.setName(name);\n+        this.domain = domain;\n+        this.range = range;\n+        this.data = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Clones the time series.\n+     *\n+     * @return A clone of the time series.\n+     *\n+     * @throws CloneNotSupportedException if the series cannot be cloned.\n+     */\n+    @Override\n+    public TimeSeries clone() throws CloneNotSupportedException {\n+        TimeSeries clone = (TimeSeries) super.clone();\n+        clone.data = new ArrayList<>(this.data.size());\n+        for (TimeSeriesDataItem item : this.data) {\n+            clone.add(item.clone());\n+        }\n+        return clone;\n+    }\n+\n+    /**\n+     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n+     * to all registered listeners.\n+     *\n+     * @param item  the item (<code>null</code> not permitted).\n+     *\n+     * @throws SeriesException if there is a problem adding the item.\n+     */\n+    public synchronized void add(TimeSeriesDataItem item) throws SeriesException {\n+        if (item == null) {\n+            throw new IllegalArgumentException(\"Null item not allowed.\");\n+        }\n+        this.data.add(item);\n+    }\n+\n+    /**\n+     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n+     * to all registered listeners.\n+     *\n+     * @param period  the time period (<code>null</code> not permitted).\n+     * @param value  the value.\n+     *\n+     * @throws SeriesException if there is a problem adding the item.\n+     */\n+    public void add(RegularTimePeriod period, double value) throws SeriesException {\n+        TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);\n+        this.add(item);\n+    }\n+\n+    /**\n+     * Removes all data items from the series.\n+     *\n+     * @since 1.0.6\n+     */\n+    public void clear() {\n+        if (this.data.size() > 0) {\n+            this.data.clear();\n+        }\n+    }\n+\n+    /**\n+     * Returns the number of data items held in the series.\n+     *\n+     * @return The item count.\n+     */\n+    public int getItemCount() {\n+        return this.data.size();\n+    }\n+\n+    /**\n+     * Creates a new time series that is a copy of this series.\n+     *\n+     * @param start the start index of the subset to copy.\n+     * @param end the end index (inclusive) of the subset to copy.\n+     *\n+     * @return A new time series.\n+     *\n+     * @throws CloneNotSupportedException if cloning is not supported.\n+     */\n+    public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n+        if (start < 0) {\n+            throw new IllegalArgumentException(\"Requires start >= 0.\");\n+        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"Requires start <= end.\");\n+        }\n+        TimeSeries copy = (TimeSeries) super.clone();\n+        copy.clear();\n+        if (this.data.size() > 0) {\n+            int endIndex = Math.min(end, this.data.size() - 1);\n+            for (int index = start; index <= endIndex; index++) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                }\n+                catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        copy.setDomainDescription(null);\n+        copy.setRangeDescription(null);\n+        return copy;\n+    }\n+\n+    /**\n+     * Returns the description of the domain (time-axis).\n+     *\n+     * @return The domain description (possibly <code>null</code>).\n+     *\n+     * @see #setDomainDescription(String description)\n+     */\n+    public String getDomainDescription() {\n+        return this.domain;\n+    }\n+\n+    /**\n+     * Returns the description of the range (value-axis).\n+     *\n+     * @return The range description (possibly <code>null</code>).\n+     *\n+     * @see #setRangeDescription(String description)\n+     */\n+    public String getRangeDescription() {\n+        return this.range;\n+    }\n+\n+    /**\n+     * Sets the description of the domain (time-axis) and sends a\n+     * {@link SeriesChangeEvent} to all registered listeners.\n+     *\n+     * @param description  the description (<code>null</code> permitted).\n+     *\n+     * @see #getDomainDescription()\n+     */\n+    public void setDomainDescription(String description) {\n+        String old = this.domain;\n+        this.domain = description;\n+        firePropertyChange(\"Domain\", old, description);\n+    }\n+\n+    /**\n+     * Sets the description of the range (value-axis) and sends a\n+     * {@link SeriesChangeEvent} to all registered listeners.\n+     *\n+     * @param description  the description (<code>null</code> permitted).\n+     *\n+     * @see #getRangeDescription()\n+     */\n+    public void setRangeDescription(String description) {\n+        String old = this.range;\n+        this.range = description;\n+        firePropertyChange(\"Range\", old, description);\n+    }\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}