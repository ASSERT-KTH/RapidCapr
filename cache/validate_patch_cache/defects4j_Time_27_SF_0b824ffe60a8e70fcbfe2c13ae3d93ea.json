{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        for (int i = 0; i < size; i += 2) {\n            if (elementPairs.get(i) instanceof Separator) {\n                Separator sep = (Separator) elementPairs.get(i);\n                PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                if (i == 0) {\n                    return new PeriodFormatter(sep, sep);\n                } else {\n                    List<Object> pairs = new ArrayList<Object>(size - 1);\n                    pairs.addAll(elementPairs.subList(0, i));\n                    pairs.add(sep);\n                    pairs.addAll(f.getElementPairs());\n                    return toFormatter(pairs, notPrinter, notParser);\n                }\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..cfe8d93f 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -796,11 +796,21 @@ public class PeriodFormatterBuilder {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+        for (int i = 0; i < size; i += 2) {\n+            if (elementPairs.get(i) instanceof Separator) {\n+                Separator sep = (Separator) elementPairs.get(i);\n+                PeriodFormatter f = toFormatter(elementPairs.subList(i + 1, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+                if (i == 0) {\n+                    return new PeriodFormatter(sep, sep);\n+                } else {\n+                    List<Object> pairs = new ArrayList<Object>(size - 1);\n+                    pairs.addAll(elementPairs.subList(0, i));\n+                    pairs.add(sep);\n+                    pairs.addAll(f.getElementPairs());\n+                    return toFormatter(pairs, notPrinter, notParser);\n+                }\n+            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}