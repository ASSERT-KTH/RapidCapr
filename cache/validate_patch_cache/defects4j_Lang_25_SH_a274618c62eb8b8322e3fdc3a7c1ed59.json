{
    "patch": "public class StringEscapeUtils {\n\n    ...\n\n    public static String escapeJava(String input) {\n        return escapeJavaStyleString(input, false, false);\n    }\n\n    public static String escapeJavaStyleString(String input, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n        if (input == null) {                                                 // <---- Add this line\n            return null;                                                      // <---- Add this line\n        }                                                                     // <---- Add this line\n        int sz;\n        sz = input.length();\n        StringBuilder output = new StringBuilder(2 * sz);\n        for (int i = 0; i < sz; i++) {\n            char ch = input.charAt(i);\n            if (ch > 4095) {\n                output.append(\"\\\\u\").append(hex(ch));\n            } else if (ch > 255) {\n                output.append(\"\\\\u0\").append(hex(ch));\n            } else if (ch > 127) {\n                output.append(\"\\\\u00\").append(hex(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        output.append('\\\\');\n                        output.append('b');\n                        break;\n                    case '\\n':\n                        output.append('\\\\');\n                        output.append('n');\n                        break;\n                    case '\\t':\n                        output.append('\\\\');\n                        output.append('t');\n                        break;\n                    case '\\f':\n                        output.append('\\\\');\n                        output.append('f');\n                        break;\n                    case '\\r':\n                        output.append('\\\\');\n                        output.append('r');\n                        break;\n                    default:\n                        if (ch > 15) {\n                            output.append(\"\\\\u00\").append(hex(ch));\n                        } else {\n                            output.append(\"\\\\u000\").append(hex(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuotes) {\n                            output.append('\\\\');\n                        }\n                        output.append('\\'');\n                        break;\n                    case '\"':\n                        output.append('\\\\');\n                        output.append('\"');\n                        break;\n                    case '\\\\':\n                        output.append('\\\\');\n                        output.append('\\\\');\n                        break;\n                    case '/':\n                        if (escapeForwardSlash) {\n                            output.append('\\\\');\n                        }\n                        output.append('/');\n                        break;\n                    default:\n                        output.append(ch);\n                        break;\n                }\n            }\n        }\n        return output.toString();\n    }\n\n    ...\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}