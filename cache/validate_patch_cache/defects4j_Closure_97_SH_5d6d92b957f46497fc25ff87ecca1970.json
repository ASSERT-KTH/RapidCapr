{
    "patch": "if (n.getType() == Token.URSH) {\n    // range check - unsigned shift must be in range [0,32)\n    if (rvalInt >= 32 || rvalInt < 0) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n    }\n    // Perform the unsigned shift operation\n    long lvalLong = lvalInt >= 0 ? lvalInt : ((long) lvalInt) + 4294967296L;\n    result = (double) (lvalLong >>> rvalInt);\n} else {\n    // Perform the signed shift operations\n    result = lvalInt >> (rvalInt & 0x1f);\n    if (n.getType() == Token.LSH) {\n        result = lvalInt << (rvalInt & 0x1f);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..140f1b9a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,22 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+if (n.getType() == Token.URSH) {\n+    // range check - unsigned shift must be in range [0,32)\n+    if (rvalInt >= 32 || rvalInt < 0) {\n+        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+        return n;\n+    }\n+    // Perform the unsigned shift operation\n+    long lvalLong = lvalInt >= 0 ? lvalInt : ((long) lvalInt) + 4294967296L;\n+    result = (double) (lvalLong >>> rvalInt);\n+} else {\n+    // Perform the signed shift operations\n+    result = lvalInt >> (rvalInt & 0x1f);\n+    if (n.getType() == Token.LSH) {\n+        result = lvalInt << (rvalInt & 0x1f);\n+    }\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}