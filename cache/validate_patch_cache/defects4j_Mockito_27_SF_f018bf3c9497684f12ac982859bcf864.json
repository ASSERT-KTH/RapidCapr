{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n        callbacks[0] = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n        factory.setCallbacks(callbacks);\n    } else if (mock instanceof MockitoSession) {\n        MockitoSession session = (MockitoSession) mock;\n        MockitoSessionBuilder builder = Mockito.mockitoSession().initMocks(session.getTestInstance());\n        builder.spy(session.getTestInstance(), session.getMockSettings());\n        session.finishMocking();\n    } else if (mock instanceof Spy) {\n        Object spied = ((Spy) mock).getSpiedInstance();\n        Object initializedSpy = ((Factory) mock).create(new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)));\n        Whitebox.setInternalState(spied, \"CGLIB$CALLBACK_0\", ((Factory) initializedSpy).getCallbacks()[0]);\n    } else {\n        throw new IllegalArgumentException(\"Cannot reset mock for object of type \" + mock.getClass().getName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..388cb6ec4 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+        callbacks[0] = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+        factory.setCallbacks(callbacks);\n+    } else if (mock instanceof MockitoSession) {\n+        MockitoSession session = (MockitoSession) mock;\n+        MockitoSessionBuilder builder = Mockito.mockitoSession().initMocks(session.getTestInstance());\n+        builder.spy(session.getTestInstance(), session.getMockSettings());\n+        session.finishMocking();\n+    } else if (mock instanceof Spy) {\n+        Object spied = ((Spy) mock).getSpiedInstance();\n+        Object initializedSpy = ((Factory) mock).create(new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)));\n+        Whitebox.setInternalState(spied, \"CGLIB$CALLBACK_0\", ((Factory) initializedSpy).getCallbacks()[0]);\n+    } else {\n+        throw new IllegalArgumentException(\"Cannot reset mock for object of type \" + mock.getClass().getName());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}