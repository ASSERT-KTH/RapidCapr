{
    "patch": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            T mock = ensureMockIsAssignableToMockedType(settings, mockInstance);\n            \n            if (settings.isUsingConstructor()) {\n                ConstructorConstructor constructorConstructor = new ConstructorConstructor();\n                Object[] constructorArgs = null;\n                if (settings.getConstructorArgs() != null) {\n                    constructorArgs = constructorConstructor.constructArgumentsForStubbing(\n                            settings.getTypeToMock(), \n                            settings.getConstructorArgs().getResolvedArgs());\n                } else {\n                    constructorArgs = constructorConstructor.constructDefaultArgumentsForExtraInterfaces(settings.getTypeToMock(), \n                            settings.getExtraInterfaces());\n                }\n                new MockMethodInterceptor(asInternalMockHandler(handler), settings).when(mock);\n\n                if(settings.getTypeToMock().isInterface()) {\n                    ((org.mockito.internal.creation.bytebuddy.MockAccess) mock).setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n                }\n                methodInterceptors.filters(settings.getInvocationListeners());\n                mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n                mockAccess.setMockitoInterceptor(methodInterceptors.interceptorChain(mock, implementationLoader), new ObjectMethodsFilter());\n\n                returningSmartNulls.setFirstNonNullReturn(mock);\n                new InstantationEngineDispatcher(\n                        implementationLoader,\n                        new InlineStaticMockMaker(),\n                        new LenientCopyTool(),\n                        new DefaultMethodSerializationFeature()\n                ).instantiatedClass(mockedProxyType, AutoDetect.class).applyConstructors(mock, constructorArgs);\n            }\n\n            return mock;\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..68eedce07 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -35,7 +35,38 @@ public class ByteBuddyMockMaker implements MockMaker {\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+            T mock = ensureMockIsAssignableToMockedType(settings, mockInstance);\n+            \n+            if (settings.isUsingConstructor()) {\n+                ConstructorConstructor constructorConstructor = new ConstructorConstructor();\n+                Object[] constructorArgs = null;\n+                if (settings.getConstructorArgs() != null) {\n+                    constructorArgs = constructorConstructor.constructArgumentsForStubbing(\n+                            settings.getTypeToMock(), \n+                            settings.getConstructorArgs().getResolvedArgs());\n+                } else {\n+                    constructorArgs = constructorConstructor.constructDefaultArgumentsForExtraInterfaces(settings.getTypeToMock(), \n+                            settings.getExtraInterfaces());\n+                }\n+                new MockMethodInterceptor(asInternalMockHandler(handler), settings).when(mock);\n+\n+                if(settings.getTypeToMock().isInterface()) {\n+                    ((org.mockito.internal.creation.bytebuddy.MockAccess) mock).setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+                }\n+                methodInterceptors.filters(settings.getInvocationListeners());\n+                mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+                mockAccess.setMockitoInterceptor(methodInterceptors.interceptorChain(mock, implementationLoader), new ObjectMethodsFilter());\n+\n+                returningSmartNulls.setFirstNonNullReturn(mock);\n+                new InstantationEngineDispatcher(\n+                        implementationLoader,\n+                        new InlineStaticMockMaker(),\n+                        new LenientCopyTool(),\n+                        new DefaultMethodSerializationFeature()\n+                ).instantiatedClass(mockedProxyType, AutoDetect.class).applyConstructors(mock, constructorArgs);\n+            }\n+\n+            return mock;\n         } catch (ClassCastException cce) {\n             throw new MockitoException(join(\n                     \"ClassCastException occurred while creating the mockito mock :\",",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}