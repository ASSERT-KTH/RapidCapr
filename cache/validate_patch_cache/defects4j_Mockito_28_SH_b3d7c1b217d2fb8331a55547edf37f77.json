{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null) {\n    Class<?> targetType = field.getType();\n    while (targetType != null) {\n        if (targetType.isInstance(candidate)) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, candidate);\n                if (!field.getType().equals(candidate.getClass())) {\n                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n                }\n                return;\n            } catch (IllegalAccessException e) {\n                throw new IllegalStateException(\"Could not set field value\", e);\n            }\n        }\n        targetType = targetType.getSuperclass();\n    }\n    \n    // If no matching fieldType is found, try interfaces as well\n    for (Class<?> iface : candidate.getClass().getInterfaces()) {\n        if (targetType.isAssignableFrom(iface)) {\n            injectMockCandidate(iface, mocks, candidate);\n            break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..3cdcee55a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,36 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null) {\n+    Class<?> targetType = field.getType();\n+    while (targetType != null) {\n+        if (targetType.isInstance(candidate)) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, candidate);\n+                if (!field.getType().equals(candidate.getClass())) {\n+                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n+                }\n+                return;\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalStateException(\"Could not set field value\", e);\n+            }\n+        }\n+        targetType = targetType.getSuperclass();\n+    }\n+    \n+    // If no matching fieldType is found, try interfaces as well\n+    for (Class<?> iface : candidate.getClass().getInterfaces()) {\n+        if (targetType.isAssignableFrom(iface)) {\n+            injectMockCandidate(iface, mocks, candidate);\n+            break;\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Can not set org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest$Dependency field org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest$Tested.dependency to org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1",
    "test_result": "FAIL"
}