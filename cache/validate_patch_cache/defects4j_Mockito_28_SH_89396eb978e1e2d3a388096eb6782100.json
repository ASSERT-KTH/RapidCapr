{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n                field.setAccessible(true);\n                try {\n                    Object oldValue = field.get(fieldInstance);\n                    field.set(fieldInstance, candidate);\n                    for (Field innerField : candidate.getClass().getDeclaredFields()) {\n                        innerField.setAccessible(true);\n                        if (innerField.get(candidate) == oldValue) {\n                            innerField.set(candidate, mockCandidateFilter.filterCandidate(mocks, innerField, candidate).thenInject());\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..aaba819f6 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,25 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+                field.setAccessible(true);\n+                try {\n+                    Object oldValue = field.get(fieldInstance);\n+                    field.set(fieldInstance, candidate);\n+                    for (Field innerField : candidate.getClass().getDeclaredFields()) {\n+                        innerField.setAccessible(true);\n+                        if (innerField.get(candidate) == oldValue) {\n+                            innerField.set(candidate, mockCandidateFilter.filterCandidate(mocks, innerField, candidate).thenInject());\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "at org.mockito.internal.configuration.DefaultInjectionEngine.injectMockCandidate(DefaultInjectionEngine.java:107)",
    "test_result": "FAIL"
}