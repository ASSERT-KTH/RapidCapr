{
    "patch": "Node child = n.getFirstChild();\nwhile (child != null) {\n  int type = child.getType();\n  if (type != Token.GETTER_DEF &&\n      type != Token.SETTER_DEF &&\n      type != Token.STRING_KEY) {\n    // Special handling needed for computed properties.\n    if (type == Token.COMPUTED_PROP) {\n      child = child.getFirstChild();\n      Preconditions.checkState(child.getType() == Token.GETPROP);\n      // In the computed property node (e.g. Object{[abc]: 123}) the middle\n      // child is the expression whose value is used as the property name.\n      // So, any warnings/errors that occur during the processing this\n      // expression should have the computed property node as the node.\n      t.reportCodeChange();\n      processComputedProperty(t, child);\n      child = child.getNext();\n      child = child.getNext();\n    } else {\n      NodeUtil.visitPreOrder(child, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (!NodeUtil.isFunctionDeclaration(node) && !NodeUtil.isFunctionExpression(node)) {\n            compiler.report(JSError.make(\n                UNEXPECTED_TOKEN_ERROR, Compiler.nodeTypeToName(node),\n                NodeUtil.getDescription(node)));\n          } else {\n            processMethod(node);\n          }\n        }\n      });\n      child = child.getNext();\n    }\n    continue;\n  }\n\n  // We should never see a mix of numbers and strings.\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                            processProperty(t, prop, type, null))) {\n    // TODO(user): It doesn't look like the user can do much in this\n    // case right now.\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n  child = child.getNext();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..4db78c83 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,60 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+Node child = n.getFirstChild();\n+while (child != null) {\n+  int type = child.getType();\n+  if (type != Token.GETTER_DEF &&\n+      type != Token.SETTER_DEF &&\n+      type != Token.STRING_KEY) {\n+    // Special handling needed for computed properties.\n+    if (type == Token.COMPUTED_PROP) {\n+      child = child.getFirstChild();\n+      Preconditions.checkState(child.getType() == Token.GETPROP);\n+      // In the computed property node (e.g. Object{[abc]: 123}) the middle\n+      // child is the expression whose value is used as the property name.\n+      // So, any warnings/errors that occur during the processing this\n+      // expression should have the computed property node as the node.\n+      t.reportCodeChange();\n+      processComputedProperty(t, child);\n+      child = child.getNext();\n+      child = child.getNext();\n+    } else {\n+      NodeUtil.visitPreOrder(child, new NodeUtil.Visitor() {\n+        @Override\n+        public void visit(Node node) {\n+          if (!NodeUtil.isFunctionDeclaration(node) && !NodeUtil.isFunctionExpression(node)) {\n+            compiler.report(JSError.make(\n+                UNEXPECTED_TOKEN_ERROR, Compiler.nodeTypeToName(node),\n+                NodeUtil.getDescription(node)));\n+          } else {\n+            processMethod(node);\n+          }\n+        }\n+      });\n+      child = child.getNext();\n+    }\n+    continue;\n+  }\n+\n+  // We should never see a mix of numbers and strings.\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                            processProperty(t, prop, type, null))) {\n+    // TODO(user): It doesn't look like the user can do much in this\n+    // case right now.\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+  child = child.getNext();\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}