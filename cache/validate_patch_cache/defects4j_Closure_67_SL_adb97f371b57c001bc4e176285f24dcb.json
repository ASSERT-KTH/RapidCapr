{
    "patch": "          && !NodeUtil.isAssignmentOp(assign.getParent()) &&\n          assign.getParent().getType() != Token.EXPR_RESULT &&\n          assign.getParent().getType() != Token.FOR && assign.getParent().getType() != Token.FOR_OF)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..6da84070 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,9 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && !NodeUtil.isAssignmentOp(assign.getParent()) &&\n+          assign.getParent().getType() != Token.EXPR_RESULT &&\n+          assign.getParent().getType() != Token.FOR && assign.getParent().getType() != Token.FOR_OF)) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}