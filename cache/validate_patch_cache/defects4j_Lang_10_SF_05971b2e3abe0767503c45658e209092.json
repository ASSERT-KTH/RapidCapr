{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean lastWasEscape = false;\n    regex.ensureCapacity(value.length() * 2);\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (lastWasEscape) {\n            regex.append(c);\n            lastWasEscape = false;\n            continue;\n        }\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                if (i == 0 || value.charAt(i - 1) != '\\\\') {\n                    regex.append('\\\\');\n                }\n                break;\n            case '\\\\':\n                lastWasEscape = true;\n                break;\n            default:\n                lastWasEscape = false;\n                break;\n        }\n        regex.append(c);\n    }\n    if (unquote && wasWhite) {\n        regex.append(\"\\\\s*+\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..2f88bc95 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,32 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean lastWasEscape = false;\n+    regex.ensureCapacity(value.length() * 2);\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (lastWasEscape) {\n+            regex.append(c);\n+            lastWasEscape = false;\n+            continue;\n+        }\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n             case '?':\n@@ -328,19 +335,30 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if (i == 0 || value.charAt(i - 1) != '\\\\') {\n+                    regex.append('\\\\');\n+                }\n+                break;\n+            case '\\\\':\n+                lastWasEscape = true;\n+                break;\n+            default:\n+                lastWasEscape = false;\n+                break;\n         }\n-        return regex;\n+        regex.append(c);\n+    }\n+    if (unquote && wasWhite) {\n+        regex.append(\"\\\\s*+\");\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}