{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double norm1 = v1.getNorm1();\n    final double norm2 = v2.getNorm1();\n    final double max = FastMath.max(norm1, norm2);\n    final double eps = max * Precision.EPSILON;\n\n    final double factor1 = BasicUtils.normalize(max, v1.getX(), v1.getY(), v1.getZ());\n    final double factor2 = BasicUtils.normalize(max, v2.getX(), v2.getY(), v2.getZ());\n    final double v1x = factor1 * v1.getX();\n    final double v1y = factor1 * v1.getY();\n    final double v1z = factor1 * v1.getZ();\n    final double v2x = factor2 * v2.getX();\n    final double v2y = factor2 * v2.getY();\n    final double v2z = factor2 * v2.getZ();\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double rho1 = 0.125 * (v1x * v2x + v1y * v2y + v1z * v2z) / (v2x * v2x + v2y * v2y + v2z * v2z);\n\n    // compute v3 = v1 - rho v2\n    final double v3x = v1x - rho1 * v2x;\n    final double v3y = v1y - rho1 * v2y;\n    final double v3z = v1z - rho1 * v2z;\n\n    // check v3 is not null\n    double check = FastMath.abs(v3x) + FastMath.abs(v3y) + FastMath.abs(v3z);\n    if (check < eps) {\n        final double absX = FastMath.abs(v1.getX());\n        final double absY = FastMath.abs(v1.getY());\n        final double absZ = FastMath.abs(v1.getZ());\n        if ((absX > absY) && (absX > absZ)) {\n            return new Vector3D(0, v1z, -v1y);\n        } else if (absY > absZ) {\n            return new Vector3D(-v1z, 0, v1x);\n        }\n        return new Vector3D(v1y, -v1x, 0);\n    }\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c990cdf30 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,55 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double norm1 = v1.getNorm1();\n+    final double norm2 = v2.getNorm1();\n+    final double max = FastMath.max(norm1, norm2);\n+    final double eps = max * Precision.EPSILON;\n+\n+    final double factor1 = BasicUtils.normalize(max, v1.getX(), v1.getY(), v1.getZ());\n+    final double factor2 = BasicUtils.normalize(max, v2.getX(), v2.getY(), v2.getZ());\n+    final double v1x = factor1 * v1.getX();\n+    final double v1y = factor1 * v1.getY();\n+    final double v1z = factor1 * v1.getZ();\n+    final double v2x = factor2 * v2.getX();\n+    final double v2y = factor2 * v2.getY();\n+    final double v2z = factor2 * v2.getZ();\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rho1 = 0.125 * (v1x * v2x + v1y * v2y + v1z * v2z) / (v2x * v2x + v2y * v2y + v2z * v2z);\n+\n+    // compute v3 = v1 - rho v2\n+    final double v3x = v1x - rho1 * v2x;\n+    final double v3y = v1y - rho1 * v2y;\n+    final double v3z = v1z - rho1 * v2z;\n+\n+    // check v3 is not null\n+    double check = FastMath.abs(v3x) + FastMath.abs(v3y) + FastMath.abs(v3z);\n+    if (check < eps) {\n+        final double absX = FastMath.abs(v1.getX());\n+        final double absY = FastMath.abs(v1.getY());\n+        final double absZ = FastMath.abs(v1.getZ());\n+        if ((absX > absY) && (absX > absZ)) {\n+            return new Vector3D(0, v1z, -v1y);\n+        } else if (absY > absZ) {\n+            return new Vector3D(-v1z, 0, v1x);\n+        }\n+        return new Vector3D(v1y, -v1x, 0);\n+    }\n \n-  }\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}