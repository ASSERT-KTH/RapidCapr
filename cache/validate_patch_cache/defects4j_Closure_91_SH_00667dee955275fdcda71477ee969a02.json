{
    "patch": "      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype or a template.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.EXPR_RESULT &&\n            grandparent.getParent().getType() == Token.SCRIPT) {\n          Node rhs = parent.getNext();\n          if (rhs != null && rhs.getType() == Token.NAME &&\n              (rhs.getString().equals(\"$jscomp$templatize\") || rhs.getString().equals(\"$jscomp$decorate\"))) {\n            return true;\n          }\n        }\n\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP &&\n            (lhs.getLastChild().getString().equals(\"prototype\") || lhs.getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fc390da3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,49 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype or a template.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.EXPR_RESULT &&\n+            grandparent.getParent().getType() == Token.SCRIPT) {\n+          Node rhs = parent.getNext();\n+          if (rhs != null && rhs.getType() == Token.NAME &&\n+              (rhs.getString().equals(\"$jscomp$templatize\") || rhs.getString().equals(\"$jscomp$decorate\"))) {\n+            return true;\n+          }\n+        }\n+\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP &&\n+            (lhs.getLastChild().getString().equals(\"prototype\") || lhs.getLastChild().getString().equals(\"$jscomp$scopedEval\"))) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable pType is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}