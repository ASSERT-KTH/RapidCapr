{
    "patch": "    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either value is close to a zero\n            if (Math.abs(yMin) <= functionValueAccuracy) {\n                setResult(min, yMin, 0);\n                return min;\n            }\n            if (Math.abs(yMax) <= functionValueAccuracy) {\n                setResult(max, yMax, 0);\n                return max;\n            }\n            // neither value is close to zero and min and max do not bracket root.\n            double yMid = f.value(0.5 * (min + max));\n            if (yMid * yMin >= 0) {\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n            } else {\n                // solve using only the first endpoint as initial guess\n                ret = solve(min, yMin, max, yMax, min, yMin);\n                // either min or max is a root\n            }\n        } else {\n            // the sign change occurs within the interval\n            ret = solve(min, yMin, max, yMax, Double.NaN, 0);\n        }\n\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..74dc8f8e9 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -137,15 +137,29 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         double sign = yMin * yMax;\n         if (sign >= 0) {\n             // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n+            if (Math.abs(yMin) <= functionValueAccuracy) {\n+                setResult(min, yMin, 0);\n+                return min;\n+            }\n+            if (Math.abs(yMax) <= functionValueAccuracy) {\n+                setResult(max, yMax, 0);\n+                return max;\n+            }\n+            // neither value is close to zero and min and max do not bracket root.\n+            double yMid = f.value(0.5 * (min + max));\n+            if (yMid * yMin >= 0) {\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            } else {\n+                // solve using only the first endpoint as initial guess\n+                ret = solve(min, yMin, max, yMax, min, yMin);\n+                // either min or max is a root\n+            }\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // the sign change occurs within the interval\n+            ret = solve(min, yMin, max, yMax, Double.NaN, 0);\n         }\n \n         return ret;",
    "result_reason": "error: method setResult in class UnivariateRealSolverImpl cannot be applied to given types;",
    "test_result": "ERROR"
}