{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    RealMatrix u = svd.getU();\n    RealMatrix s = MatrixUtils.createRealDiagonalMatrix(svd.getSingularValues().stream().map(x -> Math.sqrt(x)).toArray());\n    RealMatrix ut = u.transpose();\n    return u.multiply(s).multiply(ut);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..61ae2d67b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,11 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    RealMatrix u = svd.getU();\n+    RealMatrix s = MatrixUtils.createRealDiagonalMatrix(svd.getSingularValues().stream().map(x -> Math.sqrt(x)).toArray());\n+    RealMatrix ut = u.transpose();\n+    return u.multiply(s).multiply(ut);\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}