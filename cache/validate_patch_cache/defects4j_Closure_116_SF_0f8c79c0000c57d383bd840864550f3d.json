{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Only consider inlining a function if it has arguments.\n  if (cArg == null) {\n    return CanInlineResult.NO;\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (cArg != null || fnParam != null) {\n    if (fnParam == null) {\n      // Too many call args.\n      return CanInlineResult.NO;\n    }\n    String paramName = fnParam.getString();\n    boolean hasDefaultValue = fnParam.hasChildren();\n    Node defaultValue = fnParam.getFirstChildOrNull();\n\n    if (cArg == null) {\n      // Too many formal parameters.\n      if (!hasDefaultValue) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n      continue;\n    }\n\n    Node cArgValue = cArg.getFirstChild();\n\n    // Handle default parameters.\n    if (cArgValue == null && hasDefaultValue && !NodeUtil.mayHaveSideEffects(defaultValue)) {\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n      continue;\n    }\n\n    if (NodeUtil.mayHaveSideEffects(cArgValue, compiler)) {\n      // Side effects.\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.mayEffectMutableState(cArgValue, compiler) &&\n        NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n      // Check for arguments that are evaluated more than once.\n      // Note: Unlike block inlining, there is no need to check for loop headers.\n      return CanInlineResult.NO;\n    }\n\n    fnParam = fnParam.getNext();\n    cArg = cArg.getNext();\n  }\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..8d0170ca 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,66 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+  Node block = fnNode.getLastChild();\n \n-    Node block = fnNode.getLastChild();\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n \n+  // Only consider inlining a function if it has arguments.\n+  if (cArg == null) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  while (cArg != null || fnParam != null) {\n+    if (fnParam == null) {\n+      // Too many call args.\n+      return CanInlineResult.NO;\n+    }\n+    String paramName = fnParam.getString();\n+    boolean hasDefaultValue = fnParam.hasChildren();\n+    Node defaultValue = fnParam.getFirstChildOrNull();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    if (cArg == null) {\n+      // Too many formal parameters.\n+      if (!hasDefaultValue) {\n+        return CanInlineResult.NO;\n       }\n+      fnParam = fnParam.getNext();\n+      continue;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    Node cArgValue = cArg.getFirstChild();\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Handle default parameters.\n+    if (cArgValue == null && hasDefaultValue && !NodeUtil.mayHaveSideEffects(defaultValue)) {\n+      fnParam = fnParam.getNext();\n+      cArg = cArg.getNext();\n+      continue;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (NodeUtil.mayHaveSideEffects(cArgValue, compiler)) {\n+      // Side effects.\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n+    if (NodeUtil.mayEffectMutableState(cArgValue, compiler) &&\n+        NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n+      // Check for arguments that are evaluated more than once.\n+      // Note: Unlike block inlining, there is no need to check for loop headers.\n+      return CanInlineResult.NO;\n+    }\n+\n+    fnParam = fnParam.getNext();\n+    cArg = cArg.getNext();\n   }\n+  return CanInlineResult.YES;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}