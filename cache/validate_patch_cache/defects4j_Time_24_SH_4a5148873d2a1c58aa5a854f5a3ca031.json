{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n    // ensure the parsed year is within the valid range\n    if (iDefaultYear != null && iDefaultYear != millis / DateTimeConstants.MILLIS_PER_SECOND / DateTimeConstants.SECONDS_PER_MINUTE / \n            DateTimeConstants.MINUTES_PER_HOUR / DateTimeConstants.HOURS_PER_DAY / DateTimeConstants.DAYS_PER_YEAR) {\n        throw new IllegalFieldValueException(DateTimeFieldType.year(), iDefaultYear, null, null);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..96b76019 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+    // ensure the parsed year is within the valid range\n+    if (iDefaultYear != null && iDefaultYear != millis / DateTimeConstants.MILLIS_PER_SECOND / DateTimeConstants.SECONDS_PER_MINUTE / \n+            DateTimeConstants.MINUTES_PER_HOUR / DateTimeConstants.HOURS_PER_DAY / DateTimeConstants.DAYS_PER_YEAR) {\n+        throw new IllegalFieldValueException(DateTimeFieldType.year(), iDefaultYear, null, null);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incomparable types: int and <null>",
    "test_result": "ERROR"
}