{
    "patch": "public Line revert() {\n    final Vector3D zero = Vector3D.ZERO;\n    final Vector3D revertedDirection = direction.negate();\n    return new Line(zero, revertedDirection);\n}\n\npublic boolean equalsWithTolerance(double expected, double actual, double tolerance) {\n    return Math.abs(expected - actual) <= tolerance;\n}\n\npublic void testRevert() {\n    Line line = new Line(new Vector3D(0.028581782127907646, 0, 1), new Vector3D(1, 0, 0));\n    Line revertedLine = line.revert();\n    assertEquals(0, revertedLine.getOrigin().distance(Vector3D.ZERO), 1e-10);\n    assertTrue(equalsWithTolerance(-1, revertedLine.getDirection().getX(), 1e-10));\n    assertTrue(equalsWithTolerance(0, revertedLine.getDirection().getY(), 1e-10));\n    assertTrue(equalsWithTolerance(0, revertedLine.getDirection().getZ(), 1e-10));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..03f052e8e 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,24 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Vector3D zero = Vector3D.ZERO;\n+    final Vector3D revertedDirection = direction.negate();\n+    return new Line(zero, revertedDirection);\n+}\n+\n+public boolean equalsWithTolerance(double expected, double actual, double tolerance) {\n+    return Math.abs(expected - actual) <= tolerance;\n+}\n+\n+public void testRevert() {\n+    Line line = new Line(new Vector3D(0.028581782127907646, 0, 1), new Vector3D(1, 0, 0));\n+    Line revertedLine = line.revert();\n+    assertEquals(0, revertedLine.getOrigin().distance(Vector3D.ZERO), 1e-10);\n+    assertTrue(equalsWithTolerance(-1, revertedLine.getDirection().getX(), 1e-10));\n+    assertTrue(equalsWithTolerance(0, revertedLine.getDirection().getY(), 1e-10));\n+    assertTrue(equalsWithTolerance(0, revertedLine.getDirection().getZ(), 1e-10));\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}