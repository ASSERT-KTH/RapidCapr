{
    "patch": "public void suspend() {\n    if (this.runningState != STATE_RUNNING) {\n        throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n    }\n    this.runningState = STATE_SUSPENDED;\n    suspendTime = System.currentTimeMillis();\n    totalTime += (suspendTime - startTime);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/StopWatch.java b/src/java/org/apache/commons/lang/time/StopWatch.java\nindex 8f394217..c66c24e1 100644\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -111,13 +111,14 @@ public class StopWatch {\n      *\n      * @throws IllegalStateException if the StopWatch is not running.\n      */\n-    public void stop() {\n-        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n-            throw new IllegalStateException(\"Stopwatch is not running. \");\n-        }\n-            stopTime = System.currentTimeMillis();\n-        this.runningState = STATE_STOPPED;\n+public void suspend() {\n+    if (this.runningState != STATE_RUNNING) {\n+        throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n     }\n+    this.runningState = STATE_SUSPENDED;\n+    suspendTime = System.currentTimeMillis();\n+    totalTime += (suspendTime - startTime);\n+}\n \n     /**\n      * <p>Resets the stopwatch. Stops it if need be. </p>",
    "result_reason": "error: method suspend() is already defined in class StopWatch",
    "test_result": "ERROR"
}