{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n      joinString = NodeUtil.getStringValue(right);\n    }\n\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    int arrayLength = 0;\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        arrayFoldedChildren.add(elem);\n        ++arrayLength;\n      } else if (elem.getType() != Token.EMPTY) {\n        // This is the length of the future array.\n        arrayLength += elem.getChildCount();\n        break;\n      }\n\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      // All elements of the array are literals.\n      if (arrayFoldedChildren.isEmpty()) {\n        Node foldedStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      } else {\n        Node foldedStringNode = Node.newString(NodeUtil.getArrayElementStringValue(arrayFoldedChildren.get(0)));\n        for (int i = 1; i < arrayFoldedChildren.size(); ++i) {\n          foldedStringNode.addChildAfter(Node.newString(joinString + NodeUtil.getArrayElementStringValue(arrayFoldedChildren.get(i))),\n              foldedStringNode.getLastChild());\n        }\n\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      }\n    }\n\n    arrayFoldedChildren = new ArrayList<>();\n    elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        arrayFoldedChildren.add(elem);\n      } else if (elem.getType() != Token.EMPTY) {\n        for (Node child = elem.getFirstChild(); child != null; child = child.getNext()) {\n          if (NodeUtil.isImmutableValue(child)) {\n            arrayFoldedChildren.add(child);\n          } else {\n            // The node is not a well-formed array except for empty strings.\n            // No folding is possible.\n            return n;\n          }\n        }\n      }\n\n      elem = elem.getNext();\n    }\n\n    if (arrayFoldedChildren.isEmpty()) {\n      // The array only contains empty strings.\n      Node foldedStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n\n    // Creates a new array of only strings.\n    Node new_array_literal = Node.newArraylit();\n    new_array_literal.putProp(Node.ORIGINAL_NAME_PROP, \"join of string literals\");\n    for (Node str_node : arrayFoldedChildren) {\n      new_array_literal.addChildToBack(Node.newString(str_node.getString()));\n    }\n    Node new_call = IR.call(NodeUtil.newQName(n, arrayNode.getString()), new_array_literal);\n    n.getParent().replaceChild(n, new_call);\n    reportCodeChange();\n    return new_call;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..2b903de5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -372,10 +372,8 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n@@ -386,93 +384,85 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+      joinString = NodeUtil.getStringValue(right);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n+    int arrayLength = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n+      if (NodeUtil.isImmutableValue(elem)) {\n         arrayFoldedChildren.add(elem);\n+        ++arrayLength;\n+      } else if (elem.getType() != Token.EMPTY) {\n+        // This is the length of the future array.\n+        arrayLength += elem.getChildCount();\n+        break;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      elem = elem.getNext();\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n+    if (elem == null) {\n+      // All elements of the array are literals.\n+      if (arrayFoldedChildren.isEmpty()) {\n+        Node foldedStringNode = Node.newString(\"\");\n+        n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+        return foldedStringNode;\n+      } else {\n+        Node foldedStringNode = Node.newString(NodeUtil.getArrayElementStringValue(arrayFoldedChildren.get(0)));\n+        for (int i = 1; i < arrayFoldedChildren.size(); ++i) {\n+          foldedStringNode.addChildAfter(Node.newString(joinString + NodeUtil.getArrayElementStringValue(arrayFoldedChildren.get(i))),\n+              foldedStringNode.getLastChild());\n         }\n+\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+      }\n+    }\n+\n+    arrayFoldedChildren = new ArrayList<>();\n+    elem = arrayNode.getFirstChild();\n+    while (elem != null) {\n+      if (NodeUtil.isImmutableValue(elem)) {\n+        arrayFoldedChildren.add(elem);\n+      } else if (elem.getType() != Token.EMPTY) {\n+        for (Node child = elem.getFirstChild(); child != null; child = child.getNext()) {\n+          if (NodeUtil.isImmutableValue(child)) {\n+            arrayFoldedChildren.add(child);\n+          } else {\n+            // The node is not a well-formed array except for empty strings.\n+            // No folding is possible.\n+            return n;\n+          }\n         }\n-        reportCodeChange();\n-        break;\n+      }\n+\n+      elem = elem.getNext();\n+    }\n+\n+    if (arrayFoldedChildren.isEmpty()) {\n+      // The array only contains empty strings.\n+      Node foldedStringNode = Node.newString(\"\");\n+      n.getParent().replaceChild(n, foldedStringNode);\n+      reportCodeChange();\n+      return foldedStringNode;\n     }\n \n-    return n;\n+    // Creates a new array of only strings.\n+    Node new_array_literal = Node.newArraylit();\n+    new_array_literal.putProp(Node.ORIGINAL_NAME_PROP, \"join of string literals\");\n+    for (Node str_node : arrayFoldedChildren) {\n+      new_array_literal.addChildToBack(Node.newString(str_node.getString()));\n+    }\n+    Node new_call = IR.call(NodeUtil.newQName(n, arrayNode.getString()), new_array_literal);\n+    n.getParent().replaceChild(n, new_call);\n+    reportCodeChange();\n+    return new_call;\n   }\n \n   /**\n@@ -642,4 +632,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}