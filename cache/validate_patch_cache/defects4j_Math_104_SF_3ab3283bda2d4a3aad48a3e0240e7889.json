{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double igammaepsilon = 1.0E-8;\n    double igammabignumber = 1.0E14;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + igammabignumber * a) {\n        return 1.0;\n    }\n\n    double sum = 1.0 / a;\n    double prev = sum;\n    double term = 1.0 / a;\n\n    for (int i = 1; i <= 200; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(sum - prev) < Math.abs(sum) * igammaepsilon) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n        }\n        prev = sum;\n    }\n    throw new MaxIterationsExceededException(200);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..2886e9d47 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double igammaepsilon = 1.0E-8;\n+    double igammabignumber = 1.0E14;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + igammabignumber * a) {\n+        return 1.0;\n+    }\n+\n+    double sum = 1.0 / a;\n+    double prev = sum;\n+    double term = 1.0 / a;\n+\n+    for (int i = 1; i <= 200; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(sum - prev) < Math.abs(sum) * igammaepsilon) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+        }\n+        prev = sum;\n+    }\n+    throw new MaxIterationsExceededException(200);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}