{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JsonElement jsonElement = new JsonParser().parse(json);\n        JsonObject jsonObject = jsonElement.getAsJsonObject();\n        String typed = jsonObject.get(\"typed\").getAsString();\n        String total = jsonObject.get(\"total\").getAsString();\n        double typedNum = Double.parseDouble(typed.substring(0, typed.length() - 1));\n        double totalNum = Double.parseDouble(total.substring(0, total.length() - 1));\n        double percent = (typedNum / totalNum) * 100.0;\n        return Math.round(percent * 10.0) / 10.0;\n    } catch (Exception e) {\n        System.err.println(\"Error while parsing json: \" + e.getMessage());\n        return 0; // if there's an error, return 0 as default\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..07fc778c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JsonElement jsonElement = new JsonParser().parse(json);\n+        JsonObject jsonObject = jsonElement.getAsJsonObject();\n+        String typed = jsonObject.get(\"typed\").getAsString();\n+        String total = jsonObject.get(\"total\").getAsString();\n+        double typedNum = Double.parseDouble(typed.substring(0, typed.length() - 1));\n+        double totalNum = Double.parseDouble(total.substring(0, total.length() - 1));\n+        double percent = (typedNum / totalNum) * 100.0;\n+        return Math.round(percent * 10.0) / 10.0;\n+    } catch (Exception e) {\n+        System.err.println(\"Error while parsing json: \" + e.getMessage());\n+        return 0; // if there's an error, return 0 as default\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}