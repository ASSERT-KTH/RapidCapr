{
    "patch": "public static double getTypedPercent(String jsonString) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONObject json = new JSONObject(jsonString);\n        Iterator<?> keys = json.keys();\n        while (keys.hasNext()) {\n            String key = (String) keys.next();\n            if (json.get(key) instanceof JSONObject) {\n                count++;\n                if (((JSONObject) json.get(key)).has(\"type\")) {\n                    typedCount++;\n                }\n            } else if (json.get(key) instanceof JSONArray) {\n                JSONArray jsonArray = (JSONArray) json.get(key);\n                for (int i = 0; i < jsonArray.length(); i++) {\n                    count++;\n                    if (jsonArray.get(i) instanceof JSONObject && ((JSONObject) jsonArray.get(i)).has(\"type\")) {\n                        typedCount++;\n                    }\n                }\n            }\n        }\n    } catch (JSONException e) {\n        System.out.println(e);\n    }\n    if (count == 0) {\n        return 100.0;\n    }\n    return (typedCount / count) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4fb6b78d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONObject json = new JSONObject(jsonString);\n+        Iterator<?> keys = json.keys();\n+        while (keys.hasNext()) {\n+            String key = (String) keys.next();\n+            if (json.get(key) instanceof JSONObject) {\n+                count++;\n+                if (((JSONObject) json.get(key)).has(\"type\")) {\n+                    typedCount++;\n+                }\n+            } else if (json.get(key) instanceof JSONArray) {\n+                JSONArray jsonArray = (JSONArray) json.get(key);\n+                for (int i = 0; i < jsonArray.length(); i++) {\n+                    count++;\n+                    if (jsonArray.get(i) instanceof JSONObject && ((JSONObject) jsonArray.get(i)).has(\"type\")) {\n+                        typedCount++;\n+                    }\n+                }\n+            }\n+        }\n+    } catch (JSONException e) {\n+        System.out.println(e);\n+    }\n+    if (count == 0) {\n+        return 100.0;\n+    }\n+    return (typedCount / count) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}