{
    "patch": "import org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n\n    public static double gamma(double x){\n        \n        if(x==1){\n            return 1;\n        }\n        else if (x==0.5){\n            return Math.sqrt(Math.PI);\n        }\n        else if(x>0.0 && x<1.0){\n            return gamma(x+1)/x;\n        }\n        else{\n            return (x-1)*gamma(x-1);\n        }\n    }\n    \n    public static void main(String[] args) {\n        \n        double x = 1.0;\n        double expected = 1.0;\n        double actualP = Gamma.gamma(x);\n        \n        TestUtils.assertEquals(expected, actualP, 10e-16);\n       \n        x = 0.5;\n        expected = Math.sqrt(Math.PI);\n        actualP = Gamma.gamma(x);\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n        \n        \n        x = 5.0;\n        expected = 24.0;\n        actualP = Gamma.gamma(x);\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n    }\n}    ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a645ffd79 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,47 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+\n+    public static double gamma(double x){\n+        \n+        if(x==1){\n+            return 1;\n+        }\n+        else if (x==0.5){\n+            return Math.sqrt(Math.PI);\n+        }\n+        else if(x>0.0 && x<1.0){\n+            return gamma(x+1)/x;\n+        }\n+        else{\n+            return (x-1)*gamma(x-1);\n+        }\n+    }\n+    \n+    public static void main(String[] args) {\n+        \n+        double x = 1.0;\n+        double expected = 1.0;\n+        double actualP = Gamma.gamma(x);\n+        \n+        TestUtils.assertEquals(expected, actualP, 10e-16);\n+       \n+        x = 0.5;\n+        expected = Math.sqrt(Math.PI);\n+        actualP = Gamma.gamma(x);\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+        \n+        \n+        x = 5.0;\n+        expected = 24.0;\n+        actualP = Gamma.gamma(x);\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+    }\n+}    \n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}