{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    String[] parts = str.split(\"_\");\n\n    if (parts.length > 0) {\n        language = parts[0];\n        if (!isValidCode(language, 2, 3)) {\n            throw new IllegalArgumentException(\"Invalid locale format: invalid language - \" + language);\n        }\n    }\n\n    if (parts.length > 1) {\n        country = parts[1];\n        if (!isValidCode(country, 2, 2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: invalid country - \" + country);\n        }\n    }\n\n    if (parts.length > 2) {\n        variant = parts[2];\n        if (!isValidVariant(variant)) {\n            throw new IllegalArgumentException(\"Invalid locale format: invalid variant - \" + variant);\n        }\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(String s, int minLen, int maxLen) {\n    if (s.length() < minLen || s.length() > maxLen) {\n        return false;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (!Character.isLetter(s.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidVariant(String variant) {\n    if (variant.isEmpty()) {\n        return true;\n    }\n    String[] parts = variant.split(\"-\");\n    for (String part : parts) {\n        if (part.isEmpty()) {\n            return false;\n        }\n        if (!isValidCode(part, 1, 8)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..d294cd13 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,69 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    String[] parts = str.split(\"_\");\n+\n+    if (parts.length > 0) {\n+        language = parts[0];\n+        if (!isValidCode(language, 2, 3)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: invalid language - \" + language);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (parts.length > 1) {\n+        country = parts[1];\n+        if (!isValidCode(country, 2, 2)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: invalid country - \" + country);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    if (parts.length > 2) {\n+        variant = parts[2];\n+        if (!isValidVariant(variant)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: invalid variant - \" + variant);\n+        }\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(String s, int minLen, int maxLen) {\n+    if (s.length() < minLen || s.length() > maxLen) {\n+        return false;\n+    }\n+    for (int i = 0; i < s.length(); i++) {\n+        if (!Character.isLetter(s.charAt(i))) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidVariant(String variant) {\n+    if (variant.isEmpty()) {\n+        return true;\n+    }\n+    String[] parts = variant.split(\"-\");\n+    for (String part : parts) {\n+        if (part.isEmpty()) {\n+            return false;\n+        }\n+        if (!isValidCode(part, 1, 8)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: invalid country -",
    "test_result": "FAIL"
}