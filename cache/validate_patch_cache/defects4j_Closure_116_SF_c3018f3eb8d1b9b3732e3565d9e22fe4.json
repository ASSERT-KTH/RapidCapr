{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    // Get the function block.\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // Get the parameter names and the arguments.\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Check that the function called has the same number of parameters as\n    // there are arguments provided.\n    int numParams = 0;\n    while (fnParam != null) {\n        numParams++;\n        fnParam = fnParam.getNext();\n    }\n\n    int numArgs = 0;\n    while (cArg != null) {\n        numArgs++;\n        cArg = cArg.getNext();\n    }\n\n    if (numParams != numArgs) {\n        return CanInlineResult.NO;\n    }\n\n    // Reset iterators to check arguments against named parameters.\n    fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    cArg = callNode.getFirstChild().getNext();\n\n    // Check that each argument does not have any side-effects and each named\n    // parameter is not assigned to more than once if the argument has changed\n    // during the course of the function.\n    while (fnParam != null && cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n\n        if (NodeUtil.hasSideEffects(fnParam.getNext(), compiler)) {\n            return CanInlineResult.NO;\n        }\n\n        if (NodeUtil.mayHaveSideEffects(fnParam.getNext(), compiler)) {\n            return CanInlineResult.NO;\n        }\n\n        if (NodeUtil.hasDuplicateParameters(fnParam.getNext(), compiler, block, cArg)) {\n            return CanInlineResult.NO;\n        }\n\n        fnParam = fnParam.getNext();\n        cArg = cArg.getNext();\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..a2e5f0d6 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,66 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n+    // Get the function block.\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    // Get the parameter names and the arguments.\n+    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n+    // Check that the function called has the same number of parameters as\n+    // there are arguments provided.\n+    int numParams = 0;\n+    while (fnParam != null) {\n+        numParams++;\n+        fnParam = fnParam.getNext();\n+    }\n+\n+    int numArgs = 0;\n+    while (cArg != null) {\n+        numArgs++;\n         cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    if (numParams != numArgs) {\n+        return CanInlineResult.NO;\n+    }\n+\n+    // Reset iterators to check arguments against named parameters.\n+    fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    cArg = callNode.getFirstChild().getNext();\n+\n+    // Check that each argument does not have any side-effects and each named\n+    // parameter is not assigned to more than once if the argument has changed\n+    // during the course of the function.\n+    while (fnParam != null && cArg != null) {\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n             return CanInlineResult.NO;\n-          }\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+        if (NodeUtil.hasSideEffects(fnParam.getNext(), compiler)) {\n+            return CanInlineResult.NO;\n+        }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        if (NodeUtil.mayHaveSideEffects(fnParam.getNext(), compiler)) {\n+            return CanInlineResult.NO;\n         }\n+\n+        if (NodeUtil.hasDuplicateParameters(fnParam.getNext(), compiler, block, cArg)) {\n+            return CanInlineResult.NO;\n+        }\n+\n+        fnParam = fnParam.getNext();\n         cArg = cArg.getNext();\n-      }\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}