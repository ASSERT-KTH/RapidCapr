{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n  Node child = n.getFirstChild();\n  if (child.getType() == Token.EXPR_RESULT) {\n    child = child.getFirstChild();\n  }\n  if (NodeUtil.isExpressionNode(child) || child.getType() == Token.IF) {\n    Node parent = n.getParent();\n    if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n      // check if all siblings are also foldable\n      for (Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) {\n        if (!isFoldableExpressBlock(sibling)) {\n          return false;\n        }\n      }\n    }\n    // check if the direct parent is an expression node and \n    // this block has no conditionals or loops in its ancestor tree\n    while (parent != null) {\n      int type = parent.getType();\n      if (type == Token.IF || type == Token.WHILE || type == Token.DO || type == Token.FOR) {\n        return false;\n      } else if (NodeUtil.isStatementBlock(parent)) {\n        if (NodeUtil.mayBeObjectLitKey(parent, n)) {\n          // block is inside an object literal, so we can't fold\n          return false;\n        }\n        n = parent;\n      } else if (NodeUtil.isExpressionNode(parent)) {\n        return true;\n      }\n      parent = parent.getParent();\n    }\n    return false;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1c476540 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,45 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+  Node child = n.getFirstChild();\n+  if (child.getType() == Token.EXPR_RESULT) {\n+    child = child.getFirstChild();\n+  }\n+  if (NodeUtil.isExpressionNode(child) || child.getType() == Token.IF) {\n+    Node parent = n.getParent();\n+    if (parent != null && NodeUtil.isFunctionExpression(parent)) {\n+      // check if all siblings are also foldable\n+      for (Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) {\n+        if (!isFoldableExpressBlock(sibling)) {\n+          return false;\n+        }\n       }\n     }\n-\n+    // check if the direct parent is an expression node and \n+    // this block has no conditionals or loops in its ancestor tree\n+    while (parent != null) {\n+      int type = parent.getType();\n+      if (type == Token.IF || type == Token.WHILE || type == Token.DO || type == Token.FOR) {\n+        return false;\n+      } else if (NodeUtil.isStatementBlock(parent)) {\n+        if (NodeUtil.mayBeObjectLitKey(parent, n)) {\n+          // block is inside an object literal, so we can't fold\n+          return false;\n+        }\n+        n = parent;\n+      } else if (NodeUtil.isExpressionNode(parent)) {\n+        return true;\n+      }\n+      parent = parent.getParent();\n+    }\n     return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}