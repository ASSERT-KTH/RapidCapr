{
    "patch": "      int count = 0;   // Initialize assignment count\n      int refIndex = references.indexOf(ref);\n\n      // Count all assignments in lifetime\n      for (Reference r : references) {\n        if (r.isAssignmentToName()) {\n          count++;\n          if (count > 1) {\n            break;\n          }\n          if (references.indexOf(r) > refIndex) {\n            break;\n          }\n        }\n      }\n      \n      // Report if variable assigned once or more\n      if (count == 1) {\n        return true;\n      } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..37583521 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int count = 0;   // Initialize assignment count\n+      int refIndex = references.indexOf(ref);\n+\n+      // Count all assignments in lifetime\n+      for (Reference r : references) {\n+        if (r.isAssignmentToName()) {\n+          count++;\n+          if (count > 1) {\n+            break;\n+          }\n+          if (references.indexOf(r) > refIndex) {\n+            break;\n+          }\n+        }\n+      }\n+      \n+      // Report if variable assigned once or more\n+      if (count == 1) {\n+        return true;\n+      } else {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}