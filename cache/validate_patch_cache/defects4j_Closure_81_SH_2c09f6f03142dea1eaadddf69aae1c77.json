{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n        Name name = functionNode.getFunctionName();\n        Node nameNode = null;\n        if (name == null) {\n            nameNode = new Node(Token.EMPTY);\n        } else {\n            nameNode = transform(name);\n        }\n        Node node = new Node(Token.FUNCTION, nameNode);\n        Node lp = new Node(Token.LP);\n        if (name == null) {\n            // Old Rhino tagged the empty name node with the line number of the\n            // declaration.\n            int lineno = functionNode.getLineno();\n            nameNode.setLineno(lineno);\n            // The name node should appear before the LP node, even though it appears\n            // after in the AST.\n            node.addChildToBack(nameNode);\n            // TODO(bowdidge) Mark line number of paren correctly.\n            // Same problem as below - the left paren might not be on the\n            // same line as the function keyword.\n            int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n            nameNode.setCharno(position2charno(lpColumn));\n        } else if (!name.getIdentifier().equals(\"\")) {\n            lp.addChildToFront(nameNode);\n        }\n        for (AstNode param : functionNode.getParams()) {\n            lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n        Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n        return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..de579cb3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,42 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+        Name name = functionNode.getFunctionName();\n+        Node nameNode = null;\n+        if (name == null) {\n+            nameNode = new Node(Token.EMPTY);\n+        } else {\n+            nameNode = transform(name);\n+        }\n+        Node node = new Node(Token.FUNCTION, nameNode);\n+        Node lp = new Node(Token.LP);\n+        if (name == null) {\n+            // Old Rhino tagged the empty name node with the line number of the\n+            // declaration.\n+            int lineno = functionNode.getLineno();\n+            nameNode.setLineno(lineno);\n+            // The name node should appear before the LP node, even though it appears\n+            // after in the AST.\n+            node.addChildToBack(nameNode);\n+            // TODO(bowdidge) Mark line number of paren correctly.\n+            // Same problem as below - the left paren might not be on the\n+            // same line as the function keyword.\n+            int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+            nameNode.setCharno(position2charno(lpColumn));\n+        } else if (!name.getIdentifier().equals(\"\")) {\n+            lp.addChildToFront(nameNode);\n+        }\n+        for (AstNode param : functionNode.getParams()) {\n+            lp.addChildToBack(transform(param));\n+        }\n+        node.addChildToBack(lp);\n+        Node bodyNode = transform(functionNode.getBody());\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+        return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}