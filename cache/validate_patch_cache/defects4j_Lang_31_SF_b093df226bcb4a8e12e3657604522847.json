{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    int len = str.length();\n    int searchLen = searchChars.length;\n    int strIndex = 0;\n    for (int i = 0; i < searchLen; i++) {\n        int high = Character.isHighSurrogate(searchChars[i]) ? 1 : 0;\n        if (high != 0 && i < searchLen - 1) {\n            int low = Character.isLowSurrogate(searchChars[i + 1]) ? 1 : 0;\n            if (low != 0) {\n                int codepoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n                while (strIndex < len) {\n                    int x = Character.codePointAt(str, strIndex);\n                    if (x == codepoint) {\n                        return true;\n                    }\n                    strIndex += Character.charCount(x);\n                }\n                return false;\n            }\n        }\n        while (strIndex < len) {\n            char ch = str.charAt(strIndex++);\n            if (ch == searchChars[i]) {\n                return true;\n            }\n            if (Character.isHighSurrogate(ch) && i < searchLen - 1) {\n                if (Character.isLowSurrogate(str.charAt(strIndex))) {\n                    strIndex++;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e5c2d445 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    int len = str.length();\n+    int searchLen = searchChars.length;\n+    int strIndex = 0;\n+    for (int i = 0; i < searchLen; i++) {\n+        int high = Character.isHighSurrogate(searchChars[i]) ? 1 : 0;\n+        if (high != 0 && i < searchLen - 1) {\n+            int low = Character.isLowSurrogate(searchChars[i + 1]) ? 1 : 0;\n+            if (low != 0) {\n+                int codepoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n+                while (strIndex < len) {\n+                    int x = Character.codePointAt(str, strIndex);\n+                    if (x == codepoint) {\n+                        return true;\n+                    }\n+                    strIndex += Character.charCount(x);\n+                }\n+                return false;\n+            }\n+        }\n+        while (strIndex < len) {\n+            char ch = str.charAt(strIndex++);\n+            if (ch == searchChars[i]) {\n+                return true;\n+            }\n+            if (Character.isHighSurrogate(ch) && i < searchLen - 1) {\n+                if (Character.isLowSurrogate(str.charAt(strIndex))) {\n+                    strIndex++;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}