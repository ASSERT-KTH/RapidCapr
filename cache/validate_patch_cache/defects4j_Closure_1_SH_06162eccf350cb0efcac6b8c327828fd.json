{
    "patch": "The correct hunk at the infill location is as follows:\n```\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node param = argList.getFirstChild();\n      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n        param = argList.getFirstChild();\n      }\n      if (param != null) {\n        Node next;\n        while ((next = param.getNext()) != null) {\n          if (!referenced.contains(fnScope.getVar(next.getString())) &&\n              NodeUtil.getFunctionBody(function).getLastChild() != next) {\n            param.getParent().removeChild(next);\n            compiler.reportCodeChange();\n          }\n          param = next;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7cb981bf 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+The correct hunk at the infill location is as follows:\n+```\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node param = argList.getFirstChild();\n+      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+        param = argList.getFirstChild();\n+      }\n+      if (param != null) {\n+        Node next;\n+        while ((next = param.getNext()) != null) {\n+          if (!referenced.contains(fnScope.getVar(next.getString())) &&\n+              NodeUtil.getFunctionBody(function).getLastChild() != next) {\n+            param.getParent().removeChild(next);\n+            compiler.reportCodeChange();\n+          }\n+          param = next;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+```\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}