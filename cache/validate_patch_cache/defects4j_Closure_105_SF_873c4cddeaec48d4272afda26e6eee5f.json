{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = \",\";\n    if (!arrayNode.hasMoreThanOneChild()) {\n      Node onlyChild = arrayNode.getOnlyChild();\n      if (NodeUtil.isImmutableValue(onlyChild)) {\n        // Single string element; the value of the element is the join result.\n        parent.replaceChild(n, onlyChild.cloneNode());\n        t.getCompiler().reportCodeChange();\n      }\n    } else {\n      List<Node> nonStringChildren = new ArrayList<>();\n      StringBuilder joinContent = new StringBuilder();\n      boolean first = true;\n      for (Node child = arrayNode.getFirstChild(); child != null; child = child.getNext()) {\n        if (NodeUtil.isImmutableValue(child) && child.isString()) {\n          if (first) {\n            first = false;\n          } else {\n            joinContent.append(joinString);\n          }\n          joinContent.append(NodeUtil.getStringValue(child));\n        } else {\n          if (joinContent.length() > 0) {\n            Node stringNode = IR.string(joinContent.toString());\n            nonStringChildren.add(stringNode);\n            joinContent = new StringBuilder();\n          }\n          nonStringChildren.add(child);\n        }\n      }\n      if (nonStringChildren.isEmpty()) {\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        t.getCompiler().reportCodeChange();\n      } else {\n        Node joinedNodes = IR.call(\n            IR.getprop(left.cloneTree(), IR.string(\"join\")),\n            nonStringChildren.stream()\n                .map(Node::cloneTree)\n                .collect(Collectors.toList()));\n        if (NodeUtil.isImmutableValue(joinedNodes)) {\n          Node stringNode = IR.string(NodeUtil.getStringValue(joinedNodes));\n          parent.replaceChild(n, stringNode);\n        } else {\n          parent.replaceChild(n, joinedNodes);\n        }\n        t.getCompiler().reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..f62ed2c1 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,7 +1458,7 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n@@ -1472,81 +1472,52 @@ class FoldConstants extends AbstractPostOrderCallback\n       return;\n     }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+    String joinString = \",\";\n+    if (!arrayNode.hasMoreThanOneChild()) {\n+      Node onlyChild = arrayNode.getOnlyChild();\n+      if (NodeUtil.isImmutableValue(onlyChild)) {\n+        // Single string element; the value of the element is the join result.\n+        parent.replaceChild(n, onlyChild.cloneNode());\n+        t.getCompiler().reportCodeChange();\n+      }\n+    } else {\n+      List<Node> nonStringChildren = new ArrayList<>();\n+      StringBuilder joinContent = new StringBuilder();\n+      boolean first = true;\n+      for (Node child = arrayNode.getFirstChild(); child != null; child = child.getNext()) {\n+        if (NodeUtil.isImmutableValue(child) && child.isString()) {\n+          if (first) {\n+            first = false;\n+          } else {\n+            joinContent.append(joinString);\n+          }\n+          joinContent.append(NodeUtil.getStringValue(child));\n+        } else {\n+          if (joinContent.length() > 0) {\n+            Node stringNode = IR.string(joinContent.toString());\n+            nonStringChildren.add(stringNode);\n+            joinContent = new StringBuilder();\n+          }\n+          nonStringChildren.add(child);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n       }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n+      if (nonStringChildren.isEmpty()) {\n         Node emptyStringNode = Node.newString(\"\");\n         parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+        t.getCompiler().reportCodeChange();\n+      } else {\n+        Node joinedNodes = IR.call(\n+            IR.getprop(left.cloneTree(), IR.string(\"join\")),\n+            nonStringChildren.stream()\n+                .map(Node::cloneTree)\n+                .collect(Collectors.toList()));\n+        if (NodeUtil.isImmutableValue(joinedNodes)) {\n+          Node stringNode = IR.string(NodeUtil.getStringValue(joinedNodes));\n+          parent.replaceChild(n, stringNode);\n+        } else {\n+          parent.replaceChild(n, joinedNodes);\n         }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n-  }\n+        t.getCompiler().reportCodeChange();\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}