{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n        double previousTb = Double.NaN;\n        boolean skippedSubstep = false;\n        boolean solveRoot = true;\n        boolean foundAnyRoot = false;\n        double lastRoot = Double.NaN;\n        boolean foundRootAfterT1 = false;\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this substep\n\n                // variation direction, with respect to the integration direction\n                increasing = gb >= ga;\n\n                if (Double.isNaN(previousTb)) {\n                    // this is the first substep where an event occurs\n                    previousTb = tb - h;\n                }\n\n                if (skippedSubstep && !Double.isNaN(lastRoot) &&\n                        Math.abs(lastRoot - previousTb) < convergence) {\n                    // the last substep was skipped, but a root was found before t = t1,\n                    // so return false to accept this substep\n                    pendingEvent = true;\n                    pendingEventTime = lastRoot;\n                    return true;\n                }\n\n                if (solveRoot) {\n                    // solve for the root of the event function using Brent's method\n                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n                                return handler.g(t, interpolator.getInterpolatedState());\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            } catch (EventException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n                    double bracketStart = (tb + previousTb) / 2.0;\n                    double bracketEnd = tb;\n                    if (!increasing) {\n                        // flip the bracket if the sign change is from positive to negative\n                        bracketStart = tb;\n                        bracketEnd = previousTb;\n                    }\n                    try {\n                        final double root = solver.solve(f, bracketStart, bracketEnd);\n                        if (Double.isNaN(lastRoot) || Math.abs(root - lastRoot) > convergence) {\n                            // root is new or different than previous root, store it\n                            pendingEventTime = root;\n                            lastRoot = root;\n                            foundAnyRoot = true;\n                            if (forward && pendingEventTime >= t1 || !forward && pendingEventTime <= t1) {\n                                foundRootAfterT1 = true;\n                            }\n                        }\n                    } catch (ConvergenceException e) {\n                        // couldn't converge on a root in this substep\n                        // try again in the next substep with a smaller interval and don't skip this substep\n                        solveRoot = false; // try again in the next substep\n                        skippedSubstep = false;\n                        previousTb = tb - h;\n                        continue;\n                    }\n\n                    // check for skipped substeps\n                    if (!Double.isNaN(previousEventTime) &&\n                            (forward && pendingEventTime < previousEventTime ||\n                             !forward && pendingEventTime > previousEventTime)) {\n                        // a root was found before the previous event, skip this substep\n                        skippedSubstep = true;\n                        previousTb = tb - h;\n                        continue;\n                    }\n\n                    if (forward && pendingEventTime >= t1 || !forward && pendingEventTime <= t1) {\n                        // we have found an event at or beyond t1, accept this substep\n                        pendingEvent = true;\n                        return true;\n                    } else if (foundAnyRoot && !skippedSubstep && !foundRootAfterT1) {\n                        // we have found at least one root and none of them are beyond t1, skip this substep\n                        previousTb = tb - h;\n                        skippedSubstep = true;\n                        solveRoot = true;\n                        continue;\n                    }\n\n                    // we found a root in the valid interval, return true to accept this substep\n                    pendingEvent = true;\n                    return true;\n\n                } else {\n                    // we are currently retrying the solve from the previous substep, but without success\n                    skippedSubstep = false;\n                    previousTb = tb - h;\n                    solveRoot = true;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                skippedSubstep = false;\n                previousTb = tb - h;\n                lastRoot = Double.NaN;\n            }\n\n            ta = tb;\n            ga = gb;\n\n        }\n\n        // no event during the whole step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..3f6e5e9c3 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,42 +164,55 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n+    try {\n+\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+        double previousTb = Double.NaN;\n+        boolean skippedSubstep = false;\n+        boolean solveRoot = true;\n+        boolean foundAnyRoot = false;\n+        double lastRoot = Double.NaN;\n+        boolean foundRootAfterT1 = false;\n+        for (int i = 0; i < n; ++i) {\n+\n+            // evaluate handler value at the end of the substep\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            // check events occurrence\n+            if (g0Positive ^ (gb >= 0)) {\n+                // there is a sign change: an event is expected during this substep\n+\n+                // variation direction, with respect to the integration direction\n+                increasing = gb >= ga;\n+\n+                if (Double.isNaN(previousTb)) {\n+                    // this is the first substep where an event occurs\n+                    previousTb = tb - h;\n+                }\n+\n+                if (skippedSubstep && !Double.isNaN(lastRoot) &&\n+                        Math.abs(lastRoot - previousTb) < convergence) {\n+                    // the last substep was skipped, but a root was found before t = t1,\n+                    // so return false to accept this substep\n+                    pendingEvent = true;\n+                    pendingEventTime = lastRoot;\n+                    return true;\n+                }\n \n+                if (solveRoot) {\n+                    // solve for the root of the event function using Brent's method\n                     final UnivariateRealFunction f = new UnivariateRealFunction() {\n                         public double value(final double t) throws FunctionEvaluationException {\n                             try {\n@@ -215,53 +228,95 @@ public class EventState {\n                     final BrentSolver solver = new BrentSolver();\n                     solver.setAbsoluteAccuracy(convergence);\n                     solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n+                    double bracketStart = (tb + previousTb) / 2.0;\n+                    double bracketEnd = tb;\n+                    if (!increasing) {\n+                        // flip the bracket if the sign change is from positive to negative\n+                        bracketStart = tb;\n+                        bracketEnd = previousTb;\n+                    }\n+                    try {\n+                        final double root = solver.solve(f, bracketStart, bracketEnd);\n+                        if (Double.isNaN(lastRoot) || Math.abs(root - lastRoot) > convergence) {\n+                            // root is new or different than previous root, store it\n+                            pendingEventTime = root;\n+                            lastRoot = root;\n+                            foundAnyRoot = true;\n+                            if (forward && pendingEventTime >= t1 || !forward && pendingEventTime <= t1) {\n+                                foundRootAfterT1 = true;\n+                            }\n                         }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n+                    } catch (ConvergenceException e) {\n+                        // couldn't converge on a root in this substep\n+                        // try again in the next substep with a smaller interval and don't skip this substep\n+                        solveRoot = false; // try again in the next substep\n+                        skippedSubstep = false;\n+                        previousTb = tb - h;\n+                        continue;\n+                    }\n+\n+                    // check for skipped substeps\n+                    if (!Double.isNaN(previousEventTime) &&\n+                            (forward && pendingEventTime < previousEventTime ||\n+                             !forward && pendingEventTime > previousEventTime)) {\n+                        // a root was found before the previous event, skip this substep\n+                        skippedSubstep = true;\n+                        previousTb = tb - h;\n+                        continue;\n+                    }\n+\n+                    if (forward && pendingEventTime >= t1 || !forward && pendingEventTime <= t1) {\n+                        // we have found an event at or beyond t1, accept this substep\n                         pendingEvent = true;\n                         return true;\n+                    } else if (foundAnyRoot && !skippedSubstep && !foundRootAfterT1) {\n+                        // we have found at least one root and none of them are beyond t1, skip this substep\n+                        previousTb = tb - h;\n+                        skippedSubstep = true;\n+                        solveRoot = true;\n+                        continue;\n                     }\n \n+                    // we found a root in the valid interval, return true to accept this substep\n+                    pendingEvent = true;\n+                    return true;\n+\n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    // we are currently retrying the solve from the previous substep, but without success\n+                    skippedSubstep = false;\n+                    previousTb = tb - h;\n+                    solveRoot = true;\n                 }\n \n+            } else {\n+                // no sign change: there is no event for now\n+                skippedSubstep = false;\n+                previousTb = tb - h;\n+                lastRoot = Double.NaN;\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+            ta = tb;\n+            ga = gb;\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n         }\n \n+        // no event during the whole step\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}