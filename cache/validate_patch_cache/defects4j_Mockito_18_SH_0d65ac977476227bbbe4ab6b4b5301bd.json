{
    "patch": "public <T> ReturnValue<T> execute(CallableProgram<T> callableProgram) {\n  try {\n    T result = callableProgram.call();\n    if (result instanceof Iterable<?>) {\n      return new ReturnValue<T>(result);\n    } else if (result instanceof Optional<?>) {\n      Optional<?> optional = (Optional<?>) result;\n      if (optional.isPresent()) {\n        return new ReturnValue<T>((T) optional.get());\n      } else {\n        return new ReturnValue<T>(null);\n      }\n    } else {\n      return new ReturnValue<T>(result);\n    }\n  } catch (Exception e) {\n    return new ReturnValue<T>(e);\n  }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}