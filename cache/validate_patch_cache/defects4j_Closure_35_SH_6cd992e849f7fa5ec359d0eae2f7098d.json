{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop) && (propType == null || !propType.isUnknownType())) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * If we access a property of a symbol, then that symbol is not null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n == null || !n.isQualifiedName()) {\n      return scope;\n    }\n\n    JSType type = getJSType(n);\n    JSType narrowed = type.restrictByNotNullOrUndefined();\n    if (type != narrowed) {\n      scope = narrowScope(scope, n, narrowed);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..e6d9baca 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,7 +1123,7 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!objType.isPropertyTypeDeclared(prop) && (propType == null || !propType.isUnknownType())) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n@@ -1135,6 +1135,22 @@ class TypeInference\n       }\n     }\n   }\n+  \n+  /**\n+   * If we access a property of a symbol, then that symbol is not null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n == null || !n.isQualifiedName()) {\n+      return scope;\n+    }\n+\n+    JSType type = getJSType(n);\n+    JSType narrowed = type.restrictByNotNullOrUndefined();\n+    if (type != narrowed) {\n+      scope = narrowScope(scope, n, narrowed);\n+    }\n+    }\n+  }\n \n   /**\n    * If we access a property of a symbol, then that symbol is not",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}