{
    "patch": "/**\n * Calculates the percentage of typed characters in a given string.\n * \n * @param text the input string\n * @return the percentage of characters that are typed, rounded to one decimal place\n */\npublic double getTypedPercent(String text) {\n    double typed = 0;\n    double total = 0;\n    for(char c : text.toCharArray()) {\n        if(c != ' ') {\n            if(Character.isLetterOrDigit(c)) {\n                typed++;\n            }\n            total++;\n        }\n    }\n    if(total == 0) {\n        return 0.0;\n    } else {\n        return Math.round((typed/total)*1000)/10.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e51e6a05 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+/**\n+ * Calculates the percentage of typed characters in a given string.\n+ * \n+ * @param text the input string\n+ * @return the percentage of characters that are typed, rounded to one decimal place\n+ */\n+public double getTypedPercent(String text) {\n+    double typed = 0;\n+    double total = 0;\n+    for(char c : text.toCharArray()) {\n+        if(c != ' ') {\n+            if(Character.isLetterOrDigit(c)) {\n+                typed++;\n+            }\n+            total++;\n+        }\n+    }\n+    if(total == 0) {\n+        return 0.0;\n+    } else {\n+        return Math.round((typed/total)*1000)/10.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}