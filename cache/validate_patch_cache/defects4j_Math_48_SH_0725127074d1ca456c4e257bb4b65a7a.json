{
    "patch": "// Detect early that algorithm is stuck, instead of waiting for\n// the maximum number of iterations to be exceeded.\nfinal double delta = FastMath.max(rtol * FastMath.abs(x1),\n                                  atol);\nif (FastMath.abs(x - x1) < 0.5 * delta) {\n    // If we're stuck, try to vary function values more aggressively.\n    switch (method) {\n    case ILLINOIS:\n        f0 *= 0.5;\n        f1 *= 0.5;\n        break;\n    case PEGASUS:\n        f0 *= f1 / (f1 + fx) * 0.5;\n        f1 *= fx / (f1 + fx) * 0.5;\n        break;\n    case REGULA_FALSI:\n        // Falsely reduce function value difference.\n        f0 = f1 * ((f1 - f0) / (fx - f0));\n        break;\n    default:\n        // Should never happen.\n        throw new MathInternalError();\n    }\n} else if (FastMath.abs(f1) <= ftol) {\n    // We're converged.\n    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n        x0 = x1;\n        f0 = f1;\n    }\n    return x1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..737f0a27f 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,37 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting for\n+// the maximum number of iterations to be exceeded.\n+final double delta = FastMath.max(rtol * FastMath.abs(x1),\n+                                  atol);\n+if (FastMath.abs(x - x1) < 0.5 * delta) {\n+    // If we're stuck, try to vary function values more aggressively.\n+    switch (method) {\n+    case ILLINOIS:\n+        f0 *= 0.5;\n+        f1 *= 0.5;\n+        break;\n+    case PEGASUS:\n+        f0 *= f1 / (f1 + fx) * 0.5;\n+        f1 *= fx / (f1 + fx) * 0.5;\n+        break;\n+    case REGULA_FALSI:\n+        // Falsely reduce function value difference.\n+        f0 = f1 * ((f1 - f0) / (fx - f0));\n+        break;\n+    default:\n+        // Should never happen.\n+        throw new MathInternalError();\n+    }\n+} else if (FastMath.abs(f1) <= ftol) {\n+    // We're converged.\n+    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+        x0 = x1;\n+        f0 = f1;\n+    }\n+    return x1;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<org.apache.commons.math.exception.TooManyEvaluationsException>",
    "test_result": "FAIL"
}