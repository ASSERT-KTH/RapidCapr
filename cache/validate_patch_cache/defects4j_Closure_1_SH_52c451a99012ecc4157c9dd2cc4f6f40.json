{
    "patch": "      Node lastArg = null;\n      Node child = argList.getFirstChild();\n      while (child != null) {\n        Var var = fnScope.getVar(child.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n        } else {\n          lastArg = child;\n        }\n        child = child.getNext();\n      }\n      // Strip unreferenced args off the beginning of the parameter list.\n      child = argList.getFirstChild();\n      while (child != lastArg) {\n        argList.removeChild(child);\n        compiler.reportCodeChange();\n        child = argList.getFirstChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..452d036a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = null;\n+      Node child = argList.getFirstChild();\n+      while (child != null) {\n+        Var var = fnScope.getVar(child.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+        } else {\n+          lastArg = child;\n+        }\n+        child = child.getNext();\n+      }\n+      // Strip unreferenced args off the beginning of the parameter list.\n+      child = argList.getFirstChild();\n+      while (child != lastArg) {\n+        argList.removeChild(child);\n+        compiler.reportCodeChange();\n+        child = argList.getFirstChild();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}