{
    "patch": "        savedFields = savedFields.clone();\n        count = iSavedFieldsCount;\n\n        boolean weekyearSet = false;\n        for (int i = 0; i < count; i++) {\n            SavedField svfd = savedFields[i];\n            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                weekyearSet = true;\n                break;\n            }\n        }\n        if (weekyearSet) {\n            throw new IllegalArgumentException(\"Weekyears can not be set\");\n        }\n\n        // Calculate the new millis by iterating saved fields in order.\n        long newMillis = iMillis;\n        for (int i = 0; i < count; i++) {\n            SavedField svfd = savedFields[i];\n            try {\n                newMillis = svfd.set(newMillis, resetFields);\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    StringBuilder buf = new StringBuilder();\n                    buf.append(\"Cannot parse \\\"\").append(text).append(\"\\\": \");\n                    buf.append(e.getMessage());\n                    throw new IllegalArgumentException(buf.toString(), e);\n                }\n                throw e;\n            }\n        }\n\n        // If we are resetting fields and we parsed any of them, recurse to find out if there are any time zone offset transitions.\n        if (resetFields && count > 0) {\n            iSavedFields = null;\n            iSavedFieldsShared = false;\n            iSavedFieldsCount = 0;\n            return computeMillis(true, text);\n        }\n\n        return newMillis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3163d564 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,47 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        savedFields = savedFields.clone();\n+        count = iSavedFieldsCount;\n+\n+        boolean weekyearSet = false;\n+        for (int i = 0; i < count; i++) {\n+            SavedField svfd = savedFields[i];\n+            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                weekyearSet = true;\n+                break;\n+            }\n+        }\n+        if (weekyearSet) {\n+            throw new IllegalArgumentException(\"Weekyears can not be set\");\n+        }\n+\n+        // Calculate the new millis by iterating saved fields in order.\n+        long newMillis = iMillis;\n+        for (int i = 0; i < count; i++) {\n+            SavedField svfd = savedFields[i];\n+            try {\n+                newMillis = svfd.set(newMillis, resetFields);\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    StringBuilder buf = new StringBuilder();\n+                    buf.append(\"Cannot parse \\\"\").append(text).append(\"\\\": \");\n+                    buf.append(e.getMessage());\n+                    throw new IllegalArgumentException(buf.toString(), e);\n+                }\n+                throw e;\n+            }\n+        }\n+\n+        // If we are resetting fields and we parsed any of them, recurse to find out if there are any time zone offset transitions.\n+        if (resetFields && count > 0) {\n+            iSavedFields = null;\n+            iSavedFieldsShared = false;\n+            iSavedFieldsCount = 0;\n+            return computeMillis(true, text);\n+        }\n+\n+        return newMillis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}