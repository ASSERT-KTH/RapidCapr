{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    if (!n.isCall()) {\n        return n;\n    }\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !callTarget.isName() || !callTarget.getString().equals(\"String\")) {\n        return n;\n    }\n    Node value = callTarget.getNext();\n    if (value == null || NodeUtil.mayHaveSideEffects(n) || NodeUtil.mayHaveSideEffects(value)) {\n        return n;\n    }\n    if (NodeUtil.isImmutableValue(value)) {\n        Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n    }\n    return n;\n}\n\n// Helper method to determine if a node is a primitive, null or a primitive wrapper object\nprivate boolean isPrimitiveOrWrapper(Node n) {\n    return n.isString() || n.isNumber() || n.isNull() ||\n           ((n.isQualifiedName() || n.isGetterDef()) && \n            (n.getQualifiedName().equals(\"undefined\") || \n             n.getQualifiedName().equals(\"Boolean\") ||\n             n.getQualifiedName().equals(\"Number\")));\n}\n\n// Helper method to determine if a node is a primitive wrapper object constructor call\nprivate boolean isPrimitiveWrapperConstructorCall(Node n) {\n    if (!n.isCall()) {\n        return false;\n    }\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !callTarget.isName()) {\n        return false;\n    }\n    String targetName = callTarget.getString();\n    return targetName.equals(\"Boolean\") || targetName.equals(\"Number\");\n}\n\n// Helper method to determine if a node is a primitive value or a primitive wrapper object\nprivate boolean isFoldable(Node n) {\n    return isPrimitiveOrWrapper(n) || isPrimitiveWrapperConstructorCall(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..ce315619 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,53 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n-    Preconditions.checkState(n.isCall());\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+    if (!n.isCall()) {\n+        return n;\n+    }\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n+    if (callTarget == null || !callTarget.isName() || !callTarget.getString().equals(\"String\")) {\n+        return n;\n+    }\n+    Node value = callTarget.getNext();\n+    if (value == null || NodeUtil.mayHaveSideEffects(n) || NodeUtil.mayHaveSideEffects(value)) {\n+        return n;\n+    }\n+    if (NodeUtil.isImmutableValue(value)) {\n+        Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n         n.getParent().replaceChild(n, addition);\n         reportCodeChange();\n         return addition;\n-      }\n     }\n     return n;\n-  }\n+}\n+\n+// Helper method to determine if a node is a primitive, null or a primitive wrapper object\n+private boolean isPrimitiveOrWrapper(Node n) {\n+    return n.isString() || n.isNumber() || n.isNull() ||\n+           ((n.isQualifiedName() || n.isGetterDef()) && \n+            (n.getQualifiedName().equals(\"undefined\") || \n+             n.getQualifiedName().equals(\"Boolean\") ||\n+             n.getQualifiedName().equals(\"Number\")));\n+}\n+\n+// Helper method to determine if a node is a primitive wrapper object constructor call\n+private boolean isPrimitiveWrapperConstructorCall(Node n) {\n+    if (!n.isCall()) {\n+        return false;\n+    }\n+    Node callTarget = n.getFirstChild();\n+    if (callTarget == null || !callTarget.isName()) {\n+        return false;\n+    }\n+    String targetName = callTarget.getString();\n+    return targetName.equals(\"Boolean\") || targetName.equals(\"Number\");\n+}\n+\n+// Helper method to determine if a node is a primitive value or a primitive wrapper object\n+private boolean isFoldable(Node n) {\n+    return isPrimitiveOrWrapper(n) || isPrimitiveWrapperConstructorCall(n);\n+}\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}