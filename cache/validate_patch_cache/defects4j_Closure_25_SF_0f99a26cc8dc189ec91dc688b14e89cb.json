{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    if (type == null) {\n      type = getNativeType(NULL_TYPE);\n    }\n    n.setJSType(type);\n    if (constructor.getNext() != null) {\n      // Constructor arguments are optional, so the NodeList may be empty.\n      for (Node arg = constructor.getNext().getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (!arg.isStringLiteral()) {\n          if (arg.getJSType() == null || arg.getJSType().isUnknownType() || arg.getJSType().isNoType() || arg.getJSType().isVoidType()) {\n            arg.setJSType(getNativeType(UNKNOWN_TYPE));\n          } else if (arg.getJSType().isAllType()) {\n            arg.setJSType(getNativeType(NULL_TYPE));\n          } else if (!arg.getJSType().isSubtype(type.getTemplateTypeName())) {\n            warnings.add(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n            arg.setJSType(type);\n          }\n          scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..3372ae40 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,39 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n+      constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    if (type == null) {\n+      type = getNativeType(NULL_TYPE);\n     }\n-    return scope;\n-  }\n+    n.setJSType(type);\n+    if (constructor.getNext() != null) {\n+      // Constructor arguments are optional, so the NodeList may be empty.\n+      for (Node arg = constructor.getNext().getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (!arg.isStringLiteral()) {\n+          if (arg.getJSType() == null || arg.getJSType().isUnknownType() || arg.getJSType().isNoType() || arg.getJSType().isVoidType()) {\n+            arg.setJSType(getNativeType(UNKNOWN_TYPE));\n+          } else if (arg.getJSType().isAllType()) {\n+            arg.setJSType(getNativeType(NULL_TYPE));\n+          } else if (!arg.getJSType().isSubtype(type.getTemplateTypeName())) {\n+            warnings.add(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n+            arg.setJSType(type);\n+          }\n+          scope = traverse(arg, scope);\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}