{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n    JSType type = getJSType(n);\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            boolean found = false;\n            if (objectType.getConstructor() != null &&\n                objectType.getConstructor().isInterface()) {\n              objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n              found = (objectType != null);\n            } else {\n              while (objectType != null) {\n                  ObjectType tmpType = objectType;\n                  found = objectType.hasOwnProperty(propName);\n                  if (found) {\n                      ObjectType funcType = objectType.getPropertyType(propName).getFunType();\n                      if (funcType != null) {\n                          type = funcType;\n                      }\n                      break;\n                  }\n                  objectType = objectType.getImplicitPrototype();\n                  // dereference prototype if it has only one type\n                  if (!dereference && objectType != null && objectType.isUnionType()\n                          && objectType.toMaybeUnionType().getAlternates().size() == 1) {\n                      objectType = objectType.toMaybeObjectType();\n                  }\n                  // only go down prototype chain for types that aren't\n                  // anonymous, interface, or property types.\n                  if (objectType != null &&\n                          (objectType.isRecordType() ||\n                                  objectType.isFunctionType() ||\n                                  objectType.isTypeVariable() ||\n                                  objectType.isEnumType() ||\n                                  objectType.isUnionType() ||\n                                  objectType.hasStableName())) {\n                      if (!found) {\n                          type = objectType.getPropertyType(propName);\n                      }\n                      break;\n                  }\n              }\n            }\n            if (found) {\n                // Don't show complex function names or anonymous types.\n                // Instead, try to get a human-readable type name.\n                if ((objectType.getConstructor() != null || objectType.isFunctionPrototypeType())\n                        && (type == null || !type.toString().contains(\"function\"))) {\n                    return objectType.toString() + \".\" + propName;\n                }\n            }\n        }\n    }\n    if (dereference && type != null) {\n        ObjectType deref = type.dereference();\n        if (deref != null) {\n            type = deref;\n        }\n    }\n    if (type.isFunctionPrototypeType() ||\n            (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    }\n    if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    }\n    return type.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..faf09cf5 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,84 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n-\n+String getReadableJSTypeName(Node n, boolean dereference) {\n     // The best type name is the actual type name.\n-\n+    JSType type = getJSType(n);\n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+        if (objectType != null) {\n+            String propName = n.getLastChild().getString();\n+            boolean found = false;\n+            if (objectType.getConstructor() != null &&\n+                objectType.getConstructor().isInterface()) {\n+              objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n+              found = (objectType != null);\n+            } else {\n+              while (objectType != null) {\n+                  ObjectType tmpType = objectType;\n+                  found = objectType.hasOwnProperty(propName);\n+                  if (found) {\n+                      ObjectType funcType = objectType.getPropertyType(propName).getFunType();\n+                      if (funcType != null) {\n+                          type = funcType;\n+                      }\n+                      break;\n+                  }\n+                  objectType = objectType.getImplicitPrototype();\n+                  // dereference prototype if it has only one type\n+                  if (!dereference && objectType != null && objectType.isUnionType()\n+                          && objectType.toMaybeUnionType().getAlternates().size() == 1) {\n+                      objectType = objectType.toMaybeObjectType();\n+                  }\n+                  // only go down prototype chain for types that aren't\n+                  // anonymous, interface, or property types.\n+                  if (objectType != null &&\n+                          (objectType.isRecordType() ||\n+                                  objectType.isFunctionType() ||\n+                                  objectType.isTypeVariable() ||\n+                                  objectType.isEnumType() ||\n+                                  objectType.isUnionType() ||\n+                                  objectType.hasStableName())) {\n+                      if (!found) {\n+                          type = objectType.getPropertyType(propName);\n+                      }\n+                      break;\n+                  }\n+              }\n+            }\n+            if (found) {\n+                // Don't show complex function names or anonymous types.\n+                // Instead, try to get a human-readable type name.\n+                if ((objectType.getConstructor() != null || objectType.isFunctionPrototypeType())\n+                        && (type == null || !type.toString().contains(\"function\"))) {\n+                    return objectType.toString() + \".\" + propName;\n+                }\n+            }\n         }\n-      }\n     }\n-\n-    JSType type = getJSType(n);\n-    if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n+    if (dereference && type != null) {\n+        ObjectType deref = type.dereference();\n+        if (deref != null) {\n+            type = deref;\n+        }\n     }\n     if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+            (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n+        return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n-    } else {\n-      return type.toString();\n+        return qualifiedName;\n     }\n-  }\n+    if (type.isFunctionType()) {\n+        // Don't show complex function names.\n+        return \"function\";\n+    }\n+    return type.toString();\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}