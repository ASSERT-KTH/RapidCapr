{
    "patch": "    public Dfp multiply(final int x) {\n        if (Double.isNaN(this.minexp) || x == 0) {\n            return newInstance(getField(), this);\n        }\n        if (Double.isNaN(x)) {\n            return newInstance(getField(), Double.NaN);\n        }\n\n        int xi = Math.abs(x);\n\n        if (xi > THRESHOLD || Double.isNaN(xi)) {\n            return multiply(newInstance(x));\n        }\n\n        Dfp product = newInstance(this);\n        boolean negative = x < 0;\n\n        while (xi != 0) {\n            if ((xi & 1) != 0) {\n                product.selfAdd(this);\n            }\n            selfSquare();\n            xi >>>= 1;\n        }\n\n        if (negative) {\n            product.selfNegate();\n        }\n\n        product.normalize();\n        return product;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..98f731a7a 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,8 +413,37 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+    public Dfp multiply(final int x) {\n+        if (Double.isNaN(this.minexp) || x == 0) {\n+            return newInstance(getField(), this);\n+        }\n+        if (Double.isNaN(x)) {\n+            return newInstance(getField(), Double.NaN);\n+        }\n+\n+        int xi = Math.abs(x);\n+\n+        if (xi > THRESHOLD || Double.isNaN(xi)) {\n+            return multiply(newInstance(x));\n+        }\n+\n+        Dfp product = newInstance(this);\n+        boolean negative = x < 0;\n+\n+        while (xi != 0) {\n+            if ((xi & 1) != 0) {\n+                product.selfAdd(this);\n+            }\n+            selfSquare();\n+            xi >>>= 1;\n+        }\n+\n+        if (negative) {\n+            product.selfNegate();\n+        }\n+\n+        product.normalize();\n+        return product;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}