{
    "patch": "        if (block.isFunction) {\n          // Consider the lifetime of the variable to be the lifetime of the function.\n          if (!block.equals(ref.getBasicBlock())) {\n            // Don't assume assignments in inner function scopes won't\n            // be executed multiple times.\n            boolean found = false;\n            BasicBlock currentBlock = ref.getBasicBlock();\n            while (currentBlock != null) {\n              if (block == currentBlock) {\n                found = true;\n                break;\n              }\n              currentBlock = currentBlock.getParent();\n            }\n            if (!found) {\n              return false;\n            }\n          } else { // Block is the same as ref.getBasicBlock()\n            // Check assignments in inner function scopes may be executed multiple times.\n            BasicBlock currentBlock = block;\n            while (currentBlock != null) {\n              if (currentBlock.isLoop) {\n                return false;\n              }\n              currentBlock = currentBlock.getParent();\n            }\n          }\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..9f96ca4f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,37 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // Consider the lifetime of the variable to be the lifetime of the function.\n+          if (!block.equals(ref.getBasicBlock())) {\n+            // Don't assume assignments in inner function scopes won't\n+            // be executed multiple times.\n+            boolean found = false;\n+            BasicBlock currentBlock = ref.getBasicBlock();\n+            while (currentBlock != null) {\n+              if (block == currentBlock) {\n+                found = true;\n+                break;\n+              }\n+              currentBlock = currentBlock.getParent();\n+            }\n+            if (!found) {\n+              return false;\n+            }\n+          } else { // Block is the same as ref.getBasicBlock()\n+            // Check assignments in inner function scopes may be executed multiple times.\n+            BasicBlock currentBlock = block;\n+            while (currentBlock != null) {\n+              if (currentBlock.isLoop) {\n+                return false;\n+              }\n+              currentBlock = currentBlock.getParent();\n+            }\n+          }\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}