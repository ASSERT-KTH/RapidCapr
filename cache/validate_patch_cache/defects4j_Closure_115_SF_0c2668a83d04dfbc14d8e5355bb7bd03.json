{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    // Check if direct call replacement is possible.\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    // Get the function block and check for side effects.\n    Node block = fnNode.getLastChild();\n    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n\n    // Get the function parameters and the call arguments.\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n    Node cArgs = callNode.getLastChild();\n\n    // If there are no parameters, return YES if there are no arguments, NO otherwise.\n    if (!fnParams.hasChildren()) {\n        return cArgs == null ? CanInlineResult.YES : CanInlineResult.NO;\n    }\n\n    // If there are arguments but no parameters, return NO.\n    if (cArgs != null && !fnParams.hasChildren()) {\n        return CanInlineResult.NO;\n    }\n\n    // Iterate over the function parameters and call arguments.\n    Node fnParam = fnParams.getFirstChild();\n    Node cArg = cArgs != null ? cArgs.getFirstChild() : null;\n    while (fnParam != null || cArg != null) {\n\n        // Check for a matching named argument.\n        if (cArg != null && cArg.isName() && cArg.getString().equals(fnParam.getString())) {\n            if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n                // Check whether the argument has side effects.\n                return CanInlineResult.NO;\n            } else if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                // Check for side effects in the argument.\n                return CanInlineResult.NO;\n            } else if (NodeUtil.mayEffectMutableState(cArg, compiler)\n                    && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n                // Check whether the argument is evaluated more than once.\n                return CanInlineResult.NO;\n            }\n            // Move to the next argument.\n            cArg = cArg.getNext();\n\n        } else if (NodeUtil.mayHaveSideEffects(fnParam.getNext(), compiler) || hasSideEffects) {\n            // Check for side effects in the parameter or function block.\n            return CanInlineResult.NO;\n        }\n        // Move to the next parameter.\n        fnParam = fnParam.getNext();\n    }\n\n    // If we reach the end of the function parameters with no issues, return YES.\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..83cb6e96 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,62 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+    // Check if direct call replacement is possible.\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n+    // Get the function block and check for side effects.\n     Node block = fnNode.getLastChild();\n+    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(block, compiler);\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    // Get the function parameters and the call arguments.\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n+    Node cArgs = callNode.getLastChild();\n+\n+    // If there are no parameters, return YES if there are no arguments, NO otherwise.\n+    if (!fnParams.hasChildren()) {\n+        return cArgs == null ? CanInlineResult.YES : CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // If there are arguments but no parameters, return NO.\n+    if (cArgs != null && !fnParams.hasChildren()) {\n+        return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+    // Iterate over the function parameters and call arguments.\n+    Node fnParam = fnParams.getFirstChild();\n+    Node cArg = cArgs != null ? cArgs.getFirstChild() : null;\n+    while (fnParam != null || cArg != null) {\n+\n+        // Check for a matching named argument.\n+        if (cArg != null && cArg.isName() && cArg.getString().equals(fnParam.getString())) {\n+            if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+                // Check whether the argument has side effects.\n+                return CanInlineResult.NO;\n+            } else if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                // Check for side effects in the argument.\n+                return CanInlineResult.NO;\n+            } else if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+                    && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+                // Check whether the argument is evaluated more than once.\n+                return CanInlineResult.NO;\n+            }\n+            // Move to the next argument.\n+            cArg = cArg.getNext();\n+\n+        } else if (NodeUtil.mayHaveSideEffects(fnParam.getNext(), compiler) || hasSideEffects) {\n+            // Check for side effects in the parameter or function block.\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n         }\n-\n-        // Move to the next name.\n+        // Move to the next parameter.\n         fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n     }\n \n+    // If we reach the end of the function parameters with no issues, return YES.\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<YES> but was:<NO>",
    "test_result": "FAIL"
}