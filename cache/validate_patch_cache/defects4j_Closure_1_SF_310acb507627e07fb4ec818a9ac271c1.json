{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    Set<String> usedParamNames = new HashSet<>((int) argList.getChildCount());\n    if (referenced.isEmpty() || !modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node param = argList.getFirstChild();\n        while (param != null) {\n            Node next = param.getNext();\n            usedParamNames.add(param.getString());\n            Var var = fnScope.getVar(param.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(param);\n                compiler.reportCodeChange();\n            }\n            param = next;\n        }\n        if (isAddingUndefinedVariable() && !argList.hasChildren()) {\n            // Ensure that even an empty function will return undefined.\n            argList.addChildToBack(IR.name(ANONYMOUS_ARGUMENTS).useSourceInfoFromForTree(argList));\n        }\n        if (!settings.shouldPreserveDetailedSourceInfo()) {\n            // Remove default parameter initializers.\n            for (Node arg:argList.children()) {\n                if (!arg.getFirstChild().isEmpty()) {\n                    arg.removeChild(arg.getFirstChild());\n                    compiler.reportCodeChange();\n                }\n            }\n        }\n        if (!settings.syntheticBlockStartMarker.isEmpty() || !settings.syntheticBlockEndMarker.isEmpty()) {\n            // Remove trailing commas from the parameter list and put the separated node in a label.\n            for (Node arg:argList.children()) {\n                if (labels == null) {\n                    labels = new LinkedHashMap<>();\n                }\n                String labelName = settings.syntheticBlockStartMarker + \" \" + arg.getString() + \" \" + settings.syntheticBlockEndMarker;\n                Node label = IR.label(IR.name(labelName), arg).useSourceInfoIfMissingFromForTree(arg);\n                labels.put(labelName, label);\n            }\n            while (!argList.isEmpty() && !argList.getLast().hasChildren()) {\n                argList.removeChild(argList.getLast());\n            }\n            if (!argList.isEmpty()) {\n                argList.getLast().setString(argList.getLast().getString().replaceAll(\",\\\\s*$\", \"\"));\n            }\n        }\n    } else {\n        // Remove the parameters that aren't used.\n        Node param = argList.getFirstChild();\n        while (param != null) {\n            Node next = param.getNext();\n            usedParamNames.add(param.getString());\n            Var var = fnScope.getVar(param.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(param);\n                compiler.reportCodeChange();\n            }\n            param = next;\n        }\n    }\n    if (!settings.shouldPreserveAllAnnotations() && !usedParamNames.isEmpty()) {\n        // Remove unused parameter aliases.\n        for (Mapping mapping : namedAnonFunctionMap) {\n            Node nameNode = mapping.getOriginalNameNode();\n            if (nameNode != null && !usedParamNames.contains(nameNode.getString())) {\n                if (nameNode.getParent().isParamList()) {\n                    if (nameNode.getOnlyChild().getNext() != null) {\n                        // A default value initializer follows the alias name, so remove that as well.\n                        nameNode.getOnlyChild().getNext().detach();\n                    }\n                    nameNode.detach();\n                    compiler.reportCodeChange();\n                } else if (NodeUtil.isFunctionDeclaration(nameNode)) {\n                    Node functionNode = NodeUtil.getEnclosingFunction(nameNode);\n                    NodeUtil.getFunctionBody(functionNode).removeChild(nameNode);\n                    compiler.reportCodeChange();\n                }\n            }\n        }\n    }\n    if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8557d513 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -377,33 +377,100 @@ class RemoveUnusedVars\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n+\n     Node function = fnScope.getRootNode();\n \n-    Preconditions.checkState(function.isFunction());\n+    Preconditions.checkState(function.isFunction(), function);\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+            && callSiteOptimizer.canModifyCallers(function);\n+    Set<String> usedParamNames = new HashSet<>((int) argList.getChildCount());\n+    if (referenced.isEmpty() || !modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node param = argList.getFirstChild();\n+        while (param != null) {\n+            Node next = param.getNext();\n+            usedParamNames.add(param.getString());\n+            Var var = fnScope.getVar(param.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(param);\n+                compiler.reportCodeChange();\n+            }\n+            param = next;\n+        }\n+        if (isAddingUndefinedVariable() && !argList.hasChildren()) {\n+            // Ensure that even an empty function will return undefined.\n+            argList.addChildToBack(IR.name(ANONYMOUS_ARGUMENTS).useSourceInfoFromForTree(argList));\n+        }\n+        if (!settings.shouldPreserveDetailedSourceInfo()) {\n+            // Remove default parameter initializers.\n+            for (Node arg:argList.children()) {\n+                if (!arg.getFirstChild().isEmpty()) {\n+                    arg.removeChild(arg.getFirstChild());\n+                    compiler.reportCodeChange();\n+                }\n+            }\n+        }\n+        if (!settings.syntheticBlockStartMarker.isEmpty() || !settings.syntheticBlockEndMarker.isEmpty()) {\n+            // Remove trailing commas from the parameter list and put the separated node in a label.\n+            for (Node arg:argList.children()) {\n+                if (labels == null) {\n+                    labels = new LinkedHashMap<>();\n+                }\n+                String labelName = settings.syntheticBlockStartMarker + \" \" + arg.getString() + \" \" + settings.syntheticBlockEndMarker;\n+                Node label = IR.label(IR.name(labelName), arg).useSourceInfoIfMissingFromForTree(arg);\n+                labels.put(labelName, label);\n+            }\n+            while (!argList.isEmpty() && !argList.getLast().hasChildren()) {\n+                argList.removeChild(argList.getLast());\n+            }\n+            if (!argList.isEmpty()) {\n+                argList.getLast().setString(argList.getLast().getString().replaceAll(\",\\\\s*$\", \"\"));\n+            }\n         }\n-      }\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        // Remove the parameters that aren't used.\n+        Node param = argList.getFirstChild();\n+        while (param != null) {\n+            Node next = param.getNext();\n+            usedParamNames.add(param.getString());\n+            Var var = fnScope.getVar(param.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(param);\n+                compiler.reportCodeChange();\n+            }\n+            param = next;\n+        }\n     }\n-  }\n+    if (!settings.shouldPreserveAllAnnotations() && !usedParamNames.isEmpty()) {\n+        // Remove unused parameter aliases.\n+        for (Mapping mapping : namedAnonFunctionMap) {\n+            Node nameNode = mapping.getOriginalNameNode();\n+            if (nameNode != null && !usedParamNames.contains(nameNode.getString())) {\n+                if (nameNode.getParent().isParamList()) {\n+                    if (nameNode.getOnlyChild().getNext() != null) {\n+                        // A default value initializer follows the alias name, so remove that as well.\n+                        nameNode.getOnlyChild().getNext().detach();\n+                    }\n+                    nameNode.detach();\n+                    compiler.reportCodeChange();\n+                } else if (NodeUtil.isFunctionDeclaration(nameNode)) {\n+                    Node functionNode = NodeUtil.getEnclosingFunction(nameNode);\n+                    NodeUtil.getFunctionBody(functionNode).removeChild(nameNode);\n+                    compiler.reportCodeChange();\n+                }\n+            }\n+        }\n+    }\n+    if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}