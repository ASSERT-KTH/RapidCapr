{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.CALL ||\n            pType == Token.VAR ||\n            pType == Token.FOR ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n          Node lhs = grandparent.getFirstChild();\n          if (lhs != null && lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (NodeUtil.isObjectLitKey(parent, lhs)) {\n          // Don't traverse function expressions in object literals.\n          if (!NodeUtil.isFunctionExpression(n)) {\n            return false;\n          }\n        } else if (NodeUtil.isName(lhs)) {\n          // Only traverse function declarations or variables declared with `let` or `const`.\n          boolean isLetOrConst = NodeUtil.isNameDeclaration(parent.getParent()) &&\n              (parent.getParent().isLet() || parent.getParent().isConst());\n          if (NodeUtil.isFunctionDeclaration(n) || isLetOrConst) {\n            return true;\n          }\n        } else {\n          // Only traverse function expressions in assignment expressions.\n          if (!NodeUtil.isFunctionExpression(n)) {\n            return false;\n          }\n        }\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n        return true;\n      } else {\n        // Only traverse the right side if:\n        // 1. It's not an assignment to a prototype property or subproperty.\n        // 2. It's not a function being defined inside an object literal.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n        if (NodeUtil.isObjectLitKey(parent, lhs)) {\n          // Don't traverse function expressions in object literals.\n          if (!NodeUtil.isFunctionExpression(n)) {\n            return false;\n          }\n        } else if (!NodeUtil.isFunctionExpression(n) && !NodeUtil.isName(n)) {\n          // Only traverse function declarations, function expressions, and variables.\n          return false;\n        }\n        if (n != rhs) {\n          // Only traverse the right side of the assignment once.\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ee858a37 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,116 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            pType == Token.CALL ||\n+            pType == Token.VAR ||\n+            pType == Token.FOR ||\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+          Node lhs = grandparent.getFirstChild();\n+          if (lhs != null && lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+          // Don't traverse function expressions in object literals.\n+          if (!NodeUtil.isFunctionExpression(n)) {\n+            return false;\n+          }\n+        } else if (NodeUtil.isName(lhs)) {\n+          // Only traverse function declarations or variables declared with `let` or `const`.\n+          boolean isLetOrConst = NodeUtil.isNameDeclaration(parent.getParent()) &&\n+              (parent.getParent().isLet() || parent.getParent().isConst());\n+          if (NodeUtil.isFunctionDeclaration(n) || isLetOrConst) {\n+            return true;\n+          }\n+        } else {\n+          // Only traverse function expressions in assignment expressions.\n+          if (!NodeUtil.isFunctionExpression(n)) {\n+            return false;\n+          }\n+        }\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+        return true;\n+      } else {\n+        // Only traverse the right side if:\n+        // 1. It's not an assignment to a prototype property or subproperty.\n+        // 2. It's not a function being defined inside an object literal.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+        if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+          // Don't traverse function expressions in object literals.\n+          if (!NodeUtil.isFunctionExpression(n)) {\n+            return false;\n+          }\n+        } else if (!NodeUtil.isFunctionExpression(n) && !NodeUtil.isName(n)) {\n+          // Only traverse function declarations, function expressions, and variables.\n+          return false;\n+        }\n+        if (n != rhs) {\n+          // Only traverse the right side of the assignment once.\n+          return false;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}