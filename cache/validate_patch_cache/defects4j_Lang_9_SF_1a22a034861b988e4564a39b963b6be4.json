{
    "patch": "    private void init() {\n        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n        nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        Strategy currentStrategy;\n        currentFormatField = patternMatcher.group();\n        currentStrategy= getStrategy(currentFormatField);\n\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy= null;\n                break;\n            }\n\n            String nextFormatField= patternMatcher.group();\n            nextStrategy= getStrategy(nextFormatField);\n\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n\n            currentFormatField = nextFormatField;\n            currentStrategy = nextStrategy;\n        }\n\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n\n        currentFormatField= null;\n\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..388d79de 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -113,10 +113,8 @@ public class FastDateParser implements DateParser, Serializable {\n      * This is called from constructor and from readObject (de-serialization)\n      */\n     private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n+        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+        nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n         StringBuilder regex= new StringBuilder();\n         List<Strategy> collector = new ArrayList<Strategy>();\n \n@@ -125,26 +123,34 @@ public class FastDateParser implements DateParser, Serializable {\n             throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n+        Strategy currentStrategy;\n+        currentFormatField = patternMatcher.group();\n+        currentStrategy= getStrategy(currentFormatField);\n+\n         for(;;) {\n             patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n             if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n+                nextStrategy= null;\n                 break;\n             }\n+\n             String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n+            nextStrategy= getStrategy(nextFormatField);\n+\n             if(currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n+\n+            currentFormatField = nextFormatField;\n+            currentStrategy = nextStrategy;\n         }\n+\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n+\n         currentFormatField= null;\n+\n         strategies= collector.toArray(new Strategy[collector.size()]);\n         parsePattern= Pattern.compile(regex.toString());\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Fri Jan 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}