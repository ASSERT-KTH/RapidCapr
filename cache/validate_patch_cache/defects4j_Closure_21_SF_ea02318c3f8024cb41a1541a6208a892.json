{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() || n.isComma() || n.isFunction()) {\n        // Do not report warnings on empty nodes, commas, or functions.\n        return;\n    }\n\n    if (NodeUtil.isAssignmentOp(n)) {\n        // Do not try to remove assignments.\n        return;\n    }\n\n    if (n.isExprResult()) {\n        // Do not try to remove an expr result without side-effects.\n        Node child = n.getFirstChild();\n        if (child != null && !NodeUtil.mayHaveSideEffects(child, t.getCompiler())) {\n            return;\n        }\n    }\n\n    if (parent == null) {\n        // Do not report warnings on the root node.\n        return;\n    }\n\n    if (parent.getType() != Token.COMMA && parent.getType() != Token.EXPR_RESULT &&\n        parent.getType() != Token.BLOCK && parent.getType() != Token.FOR && parent.getType() != Token.IF) {\n        // Do not report warnings on nodes that are not direct children of a Comma, ExpressionStatement, Block, For or If node.\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n    if (parent.getType() == Token.COMMA) {\n        if (!isResultUsed && n == parent.getLastChild()) {\n            // Do not report warnings on the last items of a comma separated sequence, unless it's part of a for-in loop.\n            Node grandparent = parent.getParent();\n            boolean parentIsForInOrOf = parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n                                        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext());\n            if (grandparent == null || grandparent.getType() != Token.EXPR_RESULT && grandparent.getType() != Token.BLOCK ||\n                parentIsForInOrOf ||\n                grandparent.getType() == Token.IF ||\n                grandparent.getType() == Token.RETURN ||\n                grandparent.getType() == Token.THROW) {\n                return;\n            }\n        }\n    } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {\n        if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n            String msg = \"This code lacks side-effects. Is there a bug?\";\n            if (n.isString()) {\n                msg = \"Is there a missing '+' on the previous line?\";\n            } else if (n.isCall() || n.isNew() || n.isHook()) {\n                msg = \"The return value of a call with side-effects is not being used.\";\n            } else if (n.isOr() || n.isAnd()) {\n                msg = \"The logical result of the operation is not being used.\";\n            } else if (n.isGetProp()) {\n                msg = \"The result of the get operation is not being used.\";\n            } else if (n.isDelProp()) {\n                msg = \"The result of the delete operation is not being used.\";\n            }\n\n            t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n            if (!NodeUtil.isStatement(n)) {\n                problemNodes.add(n);\n            }\n        }\n    } else if (parent.getType() == Token.FOR) {\n        if (!isResultUsed && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n            n == parent.getFirstChild().getNext().getNext())) {\n            // Do not report warnings on the first or second expression of a for-in loop, unless the loop variable is assigned to.\n            Node body = parent.getLastChild();\n            if (body.getType() == Token.BLOCK && body.getChildCount() == 0 ||\n                (body != null && body.getChildCount() == 1 &&\n                (body.getFirstChild().isBlock() && body.getFirstChild().getChildCount() == 0 ||\n                body.getFirstChild().isFunction()))) {\n                return;\n            }\n        }\n    } else if (parent.getType() == Token.IF) {\n        // Do not report warnings on final expression statement of an if branch before a return or throw statement.\n        Node grandparent = parent.getParent();\n        if (grandparent == null || grandparent.getType() != Token.EXPR_RESULT) {\n            return;\n        }\n        Node greatGrandparent = grandparent.getParent();\n        if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n            return;\n        }\n        Node greatGreatGrandparent = greatGrandparent.getParent();\n        if (greatGreatGrandparent == null || (greatGreatGrandparent.getType() != Token.RETURN && greatGreatGrandparent.getType() != Token.THROW)) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..154f34fe 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,101 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isEmpty() || n.isComma() || n.isFunction()) {\n+        // Do not report warnings on empty nodes, commas, or functions.\n+        return;\n     }\n \n-    if (parent == null) {\n-      return;\n+    if (NodeUtil.isAssignmentOp(n)) {\n+        // Do not try to remove assignments.\n+        return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n     if (n.isExprResult()) {\n-      return;\n+        // Do not try to remove an expr result without side-effects.\n+        Node child = n.getFirstChild();\n+        if (child != null && !NodeUtil.mayHaveSideEffects(child, t.getCompiler())) {\n+            return;\n+        }\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+    if (parent == null) {\n+        // Do not report warnings on the root node.\n+        return;\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+    if (parent.getType() != Token.COMMA && parent.getType() != Token.EXPR_RESULT &&\n+        parent.getType() != Token.BLOCK && parent.getType() != Token.FOR && parent.getType() != Token.IF) {\n+        // Do not report warnings on nodes that are not direct children of a Comma, ExpressionStatement, Block, For or If node.\n         return;\n-      }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+\n+    if (parent.getType() == Token.COMMA) {\n+        if (!isResultUsed && n == parent.getLastChild()) {\n+            // Do not report warnings on the last items of a comma separated sequence, unless it's part of a for-in loop.\n+            Node grandparent = parent.getParent();\n+            boolean parentIsForInOrOf = parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n+                                        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext());\n+            if (grandparent == null || grandparent.getType() != Token.EXPR_RESULT && grandparent.getType() != Token.BLOCK ||\n+                parentIsForInOrOf ||\n+                grandparent.getType() == Token.IF ||\n+                grandparent.getType() == Token.RETURN ||\n+                grandparent.getType() == Token.THROW) {\n+                return;\n+            }\n+        }\n+    } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {\n+        if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+            String msg = \"This code lacks side-effects. Is there a bug?\";\n+            if (n.isString()) {\n+                msg = \"Is there a missing '+' on the previous line?\";\n+            } else if (n.isCall() || n.isNew() || n.isHook()) {\n+                msg = \"The return value of a call with side-effects is not being used.\";\n+            } else if (n.isOr() || n.isAnd()) {\n+                msg = \"The logical result of the operation is not being used.\";\n+            } else if (n.isGetProp()) {\n+                msg = \"The result of the get operation is not being used.\";\n+            } else if (n.isDelProp()) {\n+                msg = \"The result of the delete operation is not being used.\";\n+            }\n+\n+            t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+\n+            if (!NodeUtil.isStatement(n)) {\n+                problemNodes.add(n);\n+            }\n+        }\n+    } else if (parent.getType() == Token.FOR) {\n+        if (!isResultUsed && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n+            n == parent.getFirstChild().getNext().getNext())) {\n+            // Do not report warnings on the first or second expression of a for-in loop, unless the loop variable is assigned to.\n+            Node body = parent.getLastChild();\n+            if (body.getType() == Token.BLOCK && body.getChildCount() == 0 ||\n+                (body != null && body.getChildCount() == 1 &&\n+                (body.getFirstChild().isBlock() && body.getFirstChild().getChildCount() == 0 ||\n+                body.getFirstChild().isFunction()))) {\n+                return;\n+            }\n+        }\n+    } else if (parent.getType() == Token.IF) {\n+        // Do not report warnings on final expression statement of an if branch before a return or throw statement.\n+        Node grandparent = parent.getParent();\n+        if (grandparent == null || grandparent.getType() != Token.EXPR_RESULT) {\n+            return;\n+        }\n+        Node greatGrandparent = grandparent.getParent();\n+        if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n+            return;\n+        }\n+        Node greatGreatGrandparent = greatGrandparent.getParent();\n+        if (greatGreatGrandparent == null || (greatGreatGrandparent.getType() != Token.RETURN && greatGreatGrandparent.getType() != Token.THROW)) {\n+            return;\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>",
    "test_result": "FAIL"
}