{
    "patch": "      Name functionName = functionNode.getFunctionName();\n      if (functionName == null) {\n        functionName = new Name();\n        functionName.setIdentifier(\"\");\n        functionName.setLineno(functionNode.getLineno());\n        functionName.setCharno(functionNode.getAbsolutePosition() + \"function\".length());\n      }\n\n      Node functionNodeAst = newNode(Token.FUNCTION);\n      Node functionNameAst = transform(functionName);\n      functionNodeAst.addChildToBack(functionNameAst);\n\n      Node lpAst = newNode(Token.LP);\n      lpAst.setLineno(functionNameAst.getLineno());\n      lpAst.setCharno(functionNameAst.getCharno() + functionNameAst.getLength());\n\n      for (AstNode param : functionNode.getParams()) {\n        lpAst.addChildToFront(transform(param));\n      }\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      lpAst.addChildToBack(bodyNode);\n\n      Node rpAst = newNode(Token.RP);\n      rpAst.setLineno(lpAst.getLineno());\n      rpAst.setCharno(lpAst.getCharno() + lpAst.getLength() + 1);\n\n      functionNodeAst.addChildToBack(lpAst);\n      functionNodeAst.addChildToBack(rpAst);\n      return functionNodeAst;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..068eef17 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,37 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Name functionName = functionNode.getFunctionName();\n+      if (functionName == null) {\n+        functionName = new Name();\n+        functionName.setIdentifier(\"\");\n+        functionName.setLineno(functionNode.getLineno());\n+        functionName.setCharno(functionNode.getAbsolutePosition() + \"function\".length());\n+      }\n+\n+      Node functionNodeAst = newNode(Token.FUNCTION);\n+      Node functionNameAst = transform(functionName);\n+      functionNodeAst.addChildToBack(functionNameAst);\n+\n+      Node lpAst = newNode(Token.LP);\n+      lpAst.setLineno(functionNameAst.getLineno());\n+      lpAst.setCharno(functionNameAst.getCharno() + functionNameAst.getLength());\n+\n+      for (AstNode param : functionNode.getParams()) {\n+        lpAst.addChildToFront(transform(param));\n+      }\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      lpAst.addChildToBack(bodyNode);\n+\n+      Node rpAst = newNode(Token.RP);\n+      rpAst.setLineno(lpAst.getLineno());\n+      rpAst.setCharno(lpAst.getCharno() + lpAst.getLength() + 1);\n+\n+      functionNodeAst.addChildToBack(lpAst);\n+      functionNodeAst.addChildToBack(rpAst);\n+      return functionNodeAst;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}