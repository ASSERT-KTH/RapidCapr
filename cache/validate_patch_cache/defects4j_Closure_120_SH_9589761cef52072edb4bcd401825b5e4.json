{
    "patch": "        if (block.isFunction) {\n          if (block.isLoopHeader()) {\n            // If the variable is initialized in a loop header and not\n            // used in an enclosing loop, it's not assigned once.\n            Reference loop = ref;\n            BasicBlock grandparent = block.getParent();\n            while (grandparent != null && grandparent.isLoop) {\n              loop = loop.getPrevious();\n              grandparent = grandparent.getParent();\n            }\n            if (loop.getBasicBlock() == block) {\n              return false;\n            }\n          } else if (!block.equals(ref.getBasicBlock())) {\n            // Check assignments in inner function scopes may be executed\n            // multiple times.\n            return false;\n          }\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..db5bf227 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          if (block.isLoopHeader()) {\n+            // If the variable is initialized in a loop header and not\n+            // used in an enclosing loop, it's not assigned once.\n+            Reference loop = ref;\n+            BasicBlock grandparent = block.getParent();\n+            while (grandparent != null && grandparent.isLoop) {\n+              loop = loop.getPrevious();\n+              grandparent = grandparent.getParent();\n+            }\n+            if (loop.getBasicBlock() == block) {\n+              return false;\n+            }\n+          } else if (!block.equals(ref.getBasicBlock())) {\n+            // Check assignments in inner function scopes may be executed\n+            // multiple times.\n+            return false;\n+          }\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}