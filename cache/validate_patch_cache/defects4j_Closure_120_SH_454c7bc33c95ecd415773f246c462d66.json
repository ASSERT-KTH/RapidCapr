{
    "patch": "       if (block.isFunction) {\n         break;\n       } else if (block.isLoop) {\n         return false;\n+      } else {\n+        int nextIndex = references.indexOf(ref) + 1;\n+        Reference nextRef = nextIndex < references.size() ? references.get(nextIndex) : null;\n+        if (nextRef != null && nextRef.isSimpleAssignmentToName()) {\n+          return false;\n+        }\n       }\n     }\n\n     return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4e39d78d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+       if (block.isFunction) {\n+         break;\n+       } else if (block.isLoop) {\n+         return false;\n++      } else {\n++        int nextIndex = references.indexOf(ref) + 1;\n++        Reference nextRef = nextIndex < references.size() ? references.get(nextIndex) : null;\n++        if (nextRef != null && nextRef.isSimpleAssignmentToName()) {\n++          return false;\n++        }\n+       }\n+     }\n+\n+     return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}