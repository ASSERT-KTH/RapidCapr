{
    "patch": "public static Iterable<String> getSubStrings(String input) {\n    List<String> result = new ArrayList<>();\n    int length = input.length();\n\n    for (int i = 0; i < length; i++) {\n        for (int j = i + 1; j <= length; j++) {\n            String subString = input.substring(i, j);\n            result.add(subString);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a0f39c4f3 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> getSubStrings(String input) {\n+    List<String> result = new ArrayList<>();\n+    int length = input.length();\n+\n+    for (int i = 0; i < length; i++) {\n+        for (int j = i + 1; j <= length; j++) {\n+            String subString = input.substring(i, j);\n+            result.add(subString);\n+        }\n+    }\n+\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}