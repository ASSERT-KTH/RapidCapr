{
    "patch": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Distribution {\n    private final List<Double> values;\n    private double sum;\n\n    public Distribution() {\n        values = new ArrayList<Double>();\n        sum = 0d;\n    }\n\n    public Distribution(List<Double> vals) {\n        values = new ArrayList<Double>(vals);\n        sum = 0d;\n        for (double v : values) {\n            sum += v;\n        }\n    }\n\n    public Distribution(Distribution other) {\n        values = new ArrayList<Double>(other.values);\n        sum = other.sum;\n    }\n\n    public void add(double val) {\n        values.add(val);\n        sum += val;\n    }\n\n    public void addAll(List<Double> newVals) {\n        for (double v : newVals) {\n            add(v);\n        }\n    }\n\n    public void clear() {\n        values.clear();\n        sum = 0d;\n    }\n\n    public boolean isEmpty() {\n        return values.isEmpty();\n    }\n\n    public int size() {\n        return values.size();\n    }\n\n    public double getSum() {\n        return sum;\n    }\n\n    public double getAvg() {\n        if (values.isEmpty())\n            return 0d;\n        return sum / values.size();\n    }\n\n    public double getMax() {\n        if (values.isEmpty())\n            return 0d;\n        return Collections.max(values);\n    }\n\n    public double getMin() {\n        if (values.isEmpty())\n            return 0d;\n        return Collections.min(values);\n    }\n\n    public List<Double> getValues() {\n        return new ArrayList<Double>(values);\n    }\n\n    public Distribution clone() {\n        return new Distribution(this);\n    }\n\n    public double getPercentile(double percentile) {\n        if (values.isEmpty())\n            return 0d;\n        double pos = percentile * (values.size() - 1);\n        if (Math.floor(pos) == pos) {\n            return values.get((int) pos);\n        } else {\n            int lower = (int) Math.floor(pos);\n            int upper = (int) Math.ceil(pos);\n            return values.get(lower) * (upper - pos) + values.get(upper) * (pos - lower);\n        }\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}