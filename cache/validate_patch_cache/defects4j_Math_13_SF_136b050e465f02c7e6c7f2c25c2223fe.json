{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n    final double[] sqrtDiag = new double[d.getRowDimension()];\n    for (int i = 0; i < sqrtDiag.length; i++) {\n        sqrtDiag[i] = FastMath.sqrt(FastMath.abs(d.getEntry(i, i))) * FastMath.signum(d.getEntry(i, i));\n    }\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtDiag);\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..865caa772 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+    final double[] sqrtDiag = new double[d.getRowDimension()];\n+    for (int i = 0; i < sqrtDiag.length; i++) {\n+        sqrtDiag[i] = FastMath.sqrt(FastMath.abs(d.getEntry(i, i))) * FastMath.signum(d.getEntry(i, i));\n     }\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtDiag);\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}