{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double dev = standardDeviation * Math.sqrt(2.0);\n    if (x - mean >= 0.0) {\n        return 0.5 + 0.5 * Erf.erf((x - mean) / dev);\n    } else {\n        return 0.5 - 0.5 * Erf.erf((-x + mean) / dev);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..106b6ac2b 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,14 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double dev = standardDeviation * Math.sqrt(2.0);\n+    if (x - mean >= 0.0) {\n+        return 0.5 + 0.5 * Erf.erf((x - mean) / dev);\n+    } else {\n+        return 0.5 - 0.5 * Erf.erf((-x + mean) / dev);\n     }\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_result": "FAIL"
}