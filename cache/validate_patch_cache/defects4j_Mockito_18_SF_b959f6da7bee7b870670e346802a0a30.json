{
    "patch": "public class MyClass {\n    \n    public static Iterable divide(int numerator, int denominator) {\n        List<Integer> result = new ArrayList<>();\n        if (denominator == 0) {\n            return result;\n        }\n        int quotient = numerator / denominator;\n        int remainder = numerator % denominator;\n        result.add(quotient);\n        if (remainder == 0) {\n            return result;\n        }\n        int gcd = getGcd(denominator, remainder);\n        result.add(gcd);\n        result.add(remainder / gcd);\n        return result;\n    }\n\n    private static int getGcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return getGcd(b, a % b);\n    }\n    \n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cd2b62334 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,33 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    \n+    public static Iterable divide(int numerator, int denominator) {\n+        List<Integer> result = new ArrayList<>();\n+        if (denominator == 0) {\n+            return result;\n+        }\n+        int quotient = numerator / denominator;\n+        int remainder = numerator % denominator;\n+        result.add(quotient);\n+        if (remainder == 0) {\n+            return result;\n+        }\n+        int gcd = getGcd(denominator, remainder);\n+        result.add(gcd);\n+        result.add(remainder / gcd);\n+        return result;\n+    }\n+\n+    private static int getGcd(int a, int b) {\n+        if (b == 0) {\n+            return a;\n+        }\n+        return getGcd(b, a % b);\n+    }\n+    \n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}