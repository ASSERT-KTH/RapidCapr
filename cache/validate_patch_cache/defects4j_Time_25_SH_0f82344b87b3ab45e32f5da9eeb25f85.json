{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    int diff = offsetAdjusted - offsetLocal;\n                    if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n                            (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetLocal;\n                    }\n                } else {\n                    int diff = offsetAdjusted - offsetLocal;\n                    int offsetBefore = getOffset(nextLocal - 1);\n                    int offsetAfter = getOffset(nextLocal);\n                    if (offsetAfter > offsetBefore) {\n                        if (offsetLocal >= offsetBefore && offsetLocal < offsetAfter) {\n                            return offsetLocal;\n                        }\n                    } else {\n                        if (offsetLocal >= offsetAfter && offsetLocal < offsetBefore) {\n                            return offsetLocal;\n                        }\n                    }\n                    if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetLocal;\n                    }\n                    if ((nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetAfter;\n                    }\n                    if (offsetLocal > offsetAdjusted) {\n                        return offsetBefore;\n                    } else {\n                        return offsetAfter;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..fccd7592 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n+                            (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    int offsetBefore = getOffset(nextLocal - 1);\n+                    int offsetAfter = getOffset(nextLocal);\n+                    if (offsetAfter > offsetBefore) {\n+                        if (offsetLocal >= offsetBefore && offsetLocal < offsetAfter) {\n+                            return offsetLocal;\n+                        }\n+                    } else {\n+                        if (offsetLocal >= offsetAfter && offsetLocal < offsetBefore) {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                    if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetLocal;\n+                    }\n+                    if ((nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetAfter;\n+                    }\n+                    if (offsetLocal > offsetAdjusted) {\n+                        return offsetBefore;\n+                    } else {\n+                        return offsetAfter;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}