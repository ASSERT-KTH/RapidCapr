{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        Node grandparent = parent.getParent();\n        boolean isPrototypeAssignment = NodeUtil.isAssignmentOp(grandparent) &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n        boolean isLentPrototype = grandparent.getType() == Token.CALL &&\n            NodeUtil.isGet(lhs) &&\n            lhs.getFirstChild().getLastChild().getString().equals(\"prototype\");\n        if (isPrototypeAssignment || isLentPrototype) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions that are constructors or interfaces unless they\n      // are being called with the new keyword or being lent without a new keyword.\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n        boolean isNew = NodeUtil.isNew(parent) ||\n            (parent.getType() == Token.CALL && parent.getNext() != null &&\n                parent.getNext().getType() == Token.NEW);\n        if (!isNew && !NodeUtil.isPrototypeProperty(parent.getParent())) {\n          return false;\n        }\n      } else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..065d2116 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,35 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        Node grandparent = parent.getParent();\n+        boolean isPrototypeAssignment = NodeUtil.isAssignmentOp(grandparent) &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+        boolean isLentPrototype = grandparent.getType() == Token.CALL &&\n+            NodeUtil.isGet(lhs) &&\n+            lhs.getFirstChild().getLastChild().getString().equals(\"prototype\");\n+        if (isPrototypeAssignment || isLentPrototype) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions that are constructors or interfaces unless they\n+      // are being called with the new keyword or being lent without a new keyword.\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+        boolean isNew = NodeUtil.isNew(parent) ||\n+            (parent.getType() == Token.CALL && parent.getNext() != null &&\n+                parent.getNext().getType() == Token.NEW);\n+        if (!isNew && !NodeUtil.isPrototypeProperty(parent.getParent())) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 46 expected:<0> but was:<1>",
    "test_result": "FAIL"
}