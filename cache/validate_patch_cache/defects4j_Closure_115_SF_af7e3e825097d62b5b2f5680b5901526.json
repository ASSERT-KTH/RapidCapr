{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n        Preconditions.checkState(block.hasOneChild());\n        Node stmt = block.getFirstChild();\n        if (stmt.isReturn()) {\n            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n\n    Node cArg = callNode.getFirstChild().getNext();\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    while (cArg != null || fnParam != null) {\n        if (fnParam != null && !fnParam.isName()) {\n            fnParam = fnParam.getNext();\n            continue;\n        }\n        if (cArg != null && !cArg.isName()) {\n            cArg = cArg.getNext();\n            continue;\n        }\n        if (hasSideEffects && NodeUtil.mayBeImpure(cArg)) {\n            return CanInlineResult.NO;\n        }\n\n        if (fnParam != null\n                && NodeUtil.mayEffectMutableState(cArg, compiler)\n                && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n        }\n\n        cArg = cArg.getNext();\n        fnParam = fnParam.getNext();\n    }\n\n    // If all arguments are consumed, and all parameters are consumed they are equal. If not then\n    // there are extra parameters or extra arguments. Either way this is caught by removing the\n    // parameters and seeing if non-argument nodes remain. This avoids two loops and reduces the\n    // number of allocations.\n    while (fnParam != null) {\n        Node n = NodeUtil.getAndRemoveNext(fnParam);\n        if (!n.isDefaultValue()) {\n            return CanInlineResult.NO;\n        }\n    }\n\n    // Check that arguments are direct expressions or parameters.\n    while (cArg != null) {\n        if (!NodeUtil.isImmutableValue(cArg)) {\n            // There is an argument that is not a parameter or direct immutable value.\n            return CanInlineResult.NO;\n        }\n\n        cArg = cArg.getNext();\n    }\n\n    // All are consumed. Therefore it is safe to inline.\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..9e5a4e2c 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,72 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+        Preconditions.checkState(block.hasOneChild());\n+        Node stmt = block.getFirstChild();\n+        if (stmt.isReturn()) {\n+            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    Node cArg = callNode.getFirstChild().getNext();\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+        if (fnParam != null && !fnParam.isName()) {\n+            fnParam = fnParam.getNext();\n+            continue;\n+        }\n+        if (cArg != null && !cArg.isName()) {\n+            cArg = cArg.getNext();\n+            continue;\n+        }\n+        if (hasSideEffects && NodeUtil.mayBeImpure(cArg)) {\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        }\n+\n+        if (fnParam != null\n+                && NodeUtil.mayEffectMutableState(cArg, compiler)\n+                && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n-          }\n         }\n \n-        // Move to the next name.\n+        cArg = cArg.getNext();\n         fnParam = fnParam.getNext();\n-      }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    // If all arguments are consumed, and all parameters are consumed they are equal. If not then\n+    // there are extra parameters or extra arguments. Either way this is caught by removing the\n+    // parameters and seeing if non-argument nodes remain. This avoids two loops and reduces the\n+    // number of allocations.\n+    while (fnParam != null) {\n+        Node n = NodeUtil.getAndRemoveNext(fnParam);\n+        if (!n.isDefaultValue()) {\n+            return CanInlineResult.NO;\n         }\n+    }\n+\n+    // Check that arguments are direct expressions or parameters.\n+    while (cArg != null) {\n+        if (!NodeUtil.isImmutableValue(cArg)) {\n+            // There is an argument that is not a parameter or direct immutable value.\n+            return CanInlineResult.NO;\n+        }\n+\n         cArg = cArg.getNext();\n-      }\n     }\n \n+    // All are consumed. Therefore it is safe to inline.\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}