{
    "patch": "        } else {\n            long nextLocal = nextTransition(instantAdjusted);\n            if (nextLocal == instantAdjusted) {\n                // infinite loop prevention - a zone must have at least two transitions\n                return offsetLocal;\n            }\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                // we're near a DST boundary and need to adjust the offset estimate\n                if (offsetLocal < 0 && offsetAdjusted >= 0) {\n                    long prev = previousTransition(instantAdjusted);\n                    int offsetPrev = getOffset(prev);\n                    if (offsetPrev < 0) {\n                        // weird edge case where two transitions occur within one day\n                        return offsetLocal;\n                    }\n                    int diff = offsetLocal - offsetPrev;\n                    if (instantAdjusted - prev <= diff) {\n                        return offsetPrev;\n                    }\n                } else if (offsetLocal >= 0 && offsetAdjusted < 0) {\n                    long next = nextTransition(instantAdjusted);\n                    int offsetNext = getOffset(next);\n                    if (offsetNext >= 0) {\n                        return offsetNext;\n                    }\n                } else if (offsetLocal > 0) {\n                    return offsetLocal;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..a4888b69 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            if (nextLocal == instantAdjusted) {\n+                // infinite loop prevention - a zone must have at least two transitions\n+                return offsetLocal;\n+            }\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                // we're near a DST boundary and need to adjust the offset estimate\n+                if (offsetLocal < 0 && offsetAdjusted >= 0) {\n+                    long prev = previousTransition(instantAdjusted);\n+                    int offsetPrev = getOffset(prev);\n+                    if (offsetPrev < 0) {\n+                        // weird edge case where two transitions occur within one day\n+                        return offsetLocal;\n+                    }\n+                    int diff = offsetLocal - offsetPrev;\n+                    if (instantAdjusted - prev <= diff) {\n+                        return offsetPrev;\n+                    }\n+                } else if (offsetLocal >= 0 && offsetAdjusted < 0) {\n+                    long next = nextTransition(instantAdjusted);\n+                    int offsetNext = getOffset(next);\n+                    if (offsetNext >= 0) {\n+                        return offsetNext;\n+                    }\n+                } else if (offsetLocal > 0) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}