{
    "patch": "      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null && !mayBeObjectOrUnknown(thisType)) {\n        Node parent = n.getParent();\n        if (!parent.isGetProp() && !parent.isGetElem()) {\n          report(\n              t,\n              n,\n              MUST_CALL_SUPER_CONSTRUCTOR,\n              functionType.getDisplayName());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e16b5a30 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null && !mayBeObjectOrUnknown(thisType)) {\n+        Node parent = n.getParent();\n+        if (!parent.isGetProp() && !parent.isGetElem()) {\n+          report(\n+              t,\n+              n,\n+              MUST_CALL_SUPER_CONSTRUCTOR,\n+              functionType.getDisplayName());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}