{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean argsRemoved = false;\n    // Strip unused parameters off the end of the function declaration.\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        argsRemoved = true;\n        lastArg = argList.getLastChild();\n      } else {\n        break;\n      }\n    }\n\n    if (argsRemoved && compiler.getOptions().getWarningLevel() != CheckLevel.OFF) {\n      // Emit a warning to notify users of the modified function.\n      String message = \"Function \" + getFunctionName(function) +\n          \" has unused parameters. This code will throw or be removed in \" +\n          \"future versions of Closure Compiler. \" +\n          \"Use the @suppress {missingProperties} \" +\n          \"annotation to suppress this warning.\";\n      compiler.report(JSError.make(fnScope.getRootNode(), CheckLevel.WARNING, message));\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6637b274 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean argsRemoved = false;\n+    // Strip unused parameters off the end of the function declaration.\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        argsRemoved = true;\n+        lastArg = argList.getLastChild();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (argsRemoved && compiler.getOptions().getWarningLevel() != CheckLevel.OFF) {\n+      // Emit a warning to notify users of the modified function.\n+      String message = \"Function \" + getFunctionName(function) +\n+          \" has unused parameters. This code will throw or be removed in \" +\n+          \"future versions of Closure Compiler. \" +\n+          \"Use the @suppress {missingProperties} \" +\n+          \"annotation to suppress this warning.\";\n+      compiler.report(JSError.make(fnScope.getRootNode(), CheckLevel.WARNING, message));\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}