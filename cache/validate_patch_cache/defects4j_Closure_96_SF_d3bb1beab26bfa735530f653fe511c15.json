{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      if (parameters.hasNext()) {\n        // If there are parameters left in the list, this is a named parameter\n        parameter = parameters.next();\n        validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n      } else if (functionType.hasRestFormals()) { // handle varargs\n        parameter = functionType.getRestFormals();\n        validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n      } else {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(ordinal));\n        return;\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (functionType.hasOptionalFormals() && numArgs < minArgs) { // handle optional params\n      for (int i = numArgs; i < minArgs; i++) {\n        parameter = parameters.next();\n        report(t, call, MISSING_ARGUMENTS, parameter.getString());\n      }\n    } else if (functionType.hasRestFormals()) {\n      if (numArgs < minArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs));\n        return;\n      }\n    } else if (numArgs < minArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..7067d35c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,22 +1405,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    while (arguments.hasNext()) {\n       argument = arguments.next();\n       ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n+      if (parameters.hasNext()) {\n+        // If there are parameters left in the list, this is a named parameter\n+        parameter = parameters.next();\n+        validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n+      } else if (functionType.hasRestFormals()) { // handle varargs\n+        parameter = functionType.getRestFormals();\n+        validator.expectArgumentMatchesParameter(t, argument,\n+          getJSType(argument), getJSType(parameter), call, ordinal);\n+      } else {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(ordinal));\n+        return;\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (functionType.hasOptionalFormals() && numArgs < minArgs) { // handle optional params\n+      for (int i = numArgs; i < minArgs; i++) {\n+        parameter = parameters.next();\n+        report(t, call, MISSING_ARGUMENTS, parameter.getString());\n+      }\n+    } else if (functionType.hasRestFormals()) {\n+      if (numArgs < minArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs));\n+        return;\n+      }\n+    } else if (numArgs < minArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}