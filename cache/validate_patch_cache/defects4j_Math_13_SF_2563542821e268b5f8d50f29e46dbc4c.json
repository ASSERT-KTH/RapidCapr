{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = new BlockRealMatrix(dec.getD().getData());\n        final int n = m.getRowDimension();\n\n        // Compute the square root of diagonal matrix D\n        for (int i = 0; i < n; i++) {\n            final double x = d.getEntry(i, i);\n            if (x < 0) {\n                throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n            }\n            if (x == 0) {\n                d.setEntry(i, i, 0);\n            } else {\n                d.setEntry(i, i, Math.sqrt(x));\n            }\n        }\n\n        // Compute the square root of matrix M using V*D*V^T\n        final RealMatrix vT = v.transpose();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                double value = 0;\n                for (int k = 0; k < n; k++) {\n                    value += v.getEntry(i, k) * d.getEntry(k, j);\n                }\n                vT.setEntry(i, j, value);\n            }\n        }\n        return v.multiply(vT);\n    } catch (MathIllegalArgumentException e) {\n        throw new IllegalArgumentException(\"Matrix cannot be square rooted: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c9a960622 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,40 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = new BlockRealMatrix(dec.getD().getData());\n+        final int n = m.getRowDimension();\n+\n+        // Compute the square root of diagonal matrix D\n+        for (int i = 0; i < n; i++) {\n+            final double x = d.getEntry(i, i);\n+            if (x < 0) {\n+                throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n+            }\n+            if (x == 0) {\n+                d.setEntry(i, i, 0);\n+            } else {\n+                d.setEntry(i, i, Math.sqrt(x));\n+            }\n+        }\n+\n+        // Compute the square root of matrix M using V*D*V^T\n+        final RealMatrix vT = v.transpose();\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                double value = 0;\n+                for (int k = 0; k < n; k++) {\n+                    value += v.getEntry(i, k) * d.getEntry(k, j);\n+                }\n+                vT.setEntry(i, j, value);\n+            }\n+        }\n+        return v.multiply(vT);\n+    } catch (MathIllegalArgumentException e) {\n+        throw new IllegalArgumentException(\"Matrix cannot be square rooted: \" + e.getMessage());\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}