{
    "patch": "        public double[] repairAndDecode(final double[] x) {\n            double[] repaired = decode(x);\n            for (int i = 0; i < repaired.length; i++) {\n                if (repaired[i] > upper[i]) {\n                    repaired[i] = upper[i];\n                } else if (repaired[i] < lower[i]) {\n                    repaired[i] = lower[i];\n                }\n            }\n            return repaired;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..4cdbf9a30 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -918,7 +918,17 @@ public class CMAESOptimizer\n          * @return the original objective variables, possibly repaired.\n          */\n         public double[] repairAndDecode(final double[] x) {\n-            return\n+        public double[] repairAndDecode(final double[] x) {\n+            double[] repaired = decode(x);\n+            for (int i = 0; i < repaired.length; i++) {\n+                if (repaired[i] > upper[i]) {\n+                    repaired[i] = upper[i];\n+                } else if (repaired[i] < lower[i]) {\n+                    repaired[i] = lower[i];\n+                }\n+            }\n+            return repaired;\n+        }\n                 decode(x);\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}