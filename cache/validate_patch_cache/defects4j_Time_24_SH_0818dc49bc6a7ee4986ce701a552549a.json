{
    "patch": "                if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {      \n                    int year = savedFields[i].iValue;\n                    int weekyear = savedFields[0].iField.getRangeDurationField().add(iChrono.getDateTimeMillis(0L, year, 1, 1, 0), savedFields[0].iValue / 53);\n                    if (Math.abs(weekyear - year) > 1) {\n                        throw new IllegalArgumentException(\"The value \" + year + \" for \" + DateTimeFieldType.year() +\n                                \" is not in the range [\" + (weekyear - 1) + ',' + (weekyear + 1) + \"]\");\n                    }\n                    millis = iChrono.getDateTimeMillis(0L, weekyear, savedFields[0].iValue, 1, 0);\n                    continue;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..009d5389 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {      \n+                    int year = savedFields[i].iValue;\n+                    int weekyear = savedFields[0].iField.getRangeDurationField().add(iChrono.getDateTimeMillis(0L, year, 1, 1, 0), savedFields[0].iValue / 53);\n+                    if (Math.abs(weekyear - year) > 1) {\n+                        throw new IllegalArgumentException(\"The value \" + year + \" for \" + DateTimeFieldType.year() +\n+                                \" is not in the range [\" + (weekyear - 1) + ',' + (weekyear + 1) + \"]\");\n+                    }\n+                    millis = iChrono.getDateTimeMillis(0L, weekyear, savedFields[0].iValue, 1, 0);\n+                    continue;\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}