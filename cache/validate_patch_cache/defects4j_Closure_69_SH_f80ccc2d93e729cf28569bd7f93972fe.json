{
    "patch": "      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      FunctionTypeBuilder functionTypeBuilder = new FunctionTypeBuilder(compiler);\n      boolean isTypeOfCall = NodeUtil.isTypeOfReference(n);\n      if (functionTypeBuilder.detectThisType(functionType, isTypeOfCall) &&\n          !(n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        report(t, n, INCORRECT_THIS_TYPE, childType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..51bb5b2e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      FunctionTypeBuilder functionTypeBuilder = new FunctionTypeBuilder(compiler);\n+      boolean isTypeOfCall = NodeUtil.isTypeOfReference(n);\n+      if (functionTypeBuilder.detectThisType(functionType, isTypeOfCall) &&\n+          !(n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        report(t, n, INCORRECT_THIS_TYPE, childType.toString());\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: constructor FunctionTypeBuilder in class FunctionTypeBuilder cannot be applied to given types;",
    "test_result": "ERROR"
}