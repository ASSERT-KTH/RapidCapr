{
    "patch": "        if (val == null) {\n            return null;\n        }\n        if(val.length() > 1 && val.charAt(0) == '+' && val.charAt(1) != '+') {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n            return createInteger(val);\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        char firstChar = val.charAt(0);\n        // Handle plus sign, only if it is followed by a digit.\n        if (val.length() > 1 && firstChar == '+') {\n            firstChar = val.charAt(1);\n            if (Character.isDigit(firstChar)) {\n                val = val.substring(1);\n            }\n        }\n        if (!Character.isDigit(firstChar) && firstChar != '.') {\n            if (firstChar != '+' && val.length() > 1 && val.charAt(1) != '+' &&\n                    (firstChar == '-' && val.length() > 1 && Character.isDigit(val.charAt(1)))\n            ) {\n                return createNumber(val);\n            }\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..a3bfe6fc 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,41 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val == null) {\n+            return null;\n+        }\n+        if(val.length() > 1 && val.charAt(0) == '+' && val.charAt(1) != '+') {\n+            val = val.substring(1);\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n+        if (val.startsWith(\"0b\") || val.startsWith(\"-0b\")) {\n+            return createInteger(val);\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        char firstChar = val.charAt(0);\n+        // Handle plus sign, only if it is followed by a digit.\n+        if (val.length() > 1 && firstChar == '+') {\n+            firstChar = val.charAt(1);\n+            if (Character.isDigit(firstChar)) {\n+                val = val.substring(1);\n+            }\n+        }\n+        if (!Character.isDigit(firstChar) && firstChar != '.') {\n+            if (firstChar != '+' && val.length() > 1 && val.charAt(1) != '+' &&\n+                    (firstChar == '-' && val.length() > 1 && Character.isDigit(val.charAt(1)))\n+            ) {\n+                return createNumber(val);\n+            }\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}