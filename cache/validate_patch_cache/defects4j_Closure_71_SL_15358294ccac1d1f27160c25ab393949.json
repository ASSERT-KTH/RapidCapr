{
    "patch": "  private boolean isPrototypeAssignment(Node node) {\n    if (node == null) {\n      return false;\n    }\n    Node left = node.getFirstChild();\n    return left != null && left.getType() == Token.GETPROP &&\n        \"prototype\".equals(left.getLastChild().getString());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..6c4ab2cf 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,14 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+  private boolean isPrototypeAssignment(Node node) {\n+    if (node == null) {\n+      return false;\n+    }\n+    Node left = node.getFirstChild();\n+    return left != null && left.getType() == Token.GETPROP &&\n+        \"prototype\".equals(left.getLastChild().getString());\n+  }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}