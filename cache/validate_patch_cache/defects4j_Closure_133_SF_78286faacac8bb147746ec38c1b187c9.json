{
    "patch": "private String getRemainingJSDocLine() {\n    StringBuilder sb = new StringBuilder();\n    String line = stream.getRemainingJSDocLine();\n\n    while (line != null) {\n        String trimmedLine = line.trim();\n        if (trimmedLine.startsWith(\"*\")) {\n            String content = trimmedLine.substring(1).trim();\n            if (content.startsWith(\"@type\")) {\n                sb.append(content).append(\" \");\n            }\n        } else if (trimmedLine.startsWith(\"@type\")) {\n            sb.append(trimmedLine).append(\" \");\n        } else {\n            break;\n        }\n        \n        if (trimmedLine.contains(\"*/\")) {\n            break;\n        }\n        \n        line = stream.getRemainingJSDocLine();\n    }\n\n    return sb.length() == 0 ? null : sb.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..4b4709e8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,32 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    StringBuilder sb = new StringBuilder();\n+    String line = stream.getRemainingJSDocLine();\n+\n+    while (line != null) {\n+        String trimmedLine = line.trim();\n+        if (trimmedLine.startsWith(\"*\")) {\n+            String content = trimmedLine.substring(1).trim();\n+            if (content.startsWith(\"@type\")) {\n+                sb.append(content).append(\" \");\n+            }\n+        } else if (trimmedLine.startsWith(\"@type\")) {\n+            sb.append(trimmedLine).append(\" \");\n+        } else {\n+            break;\n+        }\n+        \n+        if (trimmedLine.contains(\"*/\")) {\n+            break;\n+        }\n+        \n+        line = stream.getRemainingJSDocLine();\n+    }\n+\n+    return sb.length() == 0 ? null : sb.toString().trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}