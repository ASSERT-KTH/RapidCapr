{
    "patch": "if (nameNode.getType() == Token.GETPROP) {\n    Node targetNode = nameNode.getFirstChild();\n\n    if (targetNode.isQualifiedName()) {\n        String targetName = targetNode.getQualifiedName();\n\n        // Check for whitelisted global objects.\n        if (targetName.startsWith(\"Math.\") || \n            targetName.startsWith(\"console.\") ||\n            targetName.startsWith(\"JSON.\")) {\n            return false;\n        }\n    }\n\n    if (callNode.hasOneChild()) {\n        Node lastChild = nameNode.getLastChild();\n\n        if (lastChild.getType() == Token.STRING) {\n            String methodName = lastChild.getString();\n\n            if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {\n                return false;\n            }\n        }\n    }\n\n    if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(targetNode)) {\n        return false;\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n            return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n            Node param = nameNode.getNext();\n            if (param != null &&\n                (param.getType() == Token.STRING\n                    || param.getType() == Token.REGEXP)) {\n                return false;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..d3c41668 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,51 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+if (nameNode.getType() == Token.GETPROP) {\n+    Node targetNode = nameNode.getFirstChild();\n+\n+    if (targetNode.isQualifiedName()) {\n+        String targetName = targetNode.getQualifiedName();\n+\n+        // Check for whitelisted global objects.\n+        if (targetName.startsWith(\"Math.\") || \n+            targetName.startsWith(\"console.\") ||\n+            targetName.startsWith(\"JSON.\")) {\n+            return false;\n+        }\n+    }\n+\n+    if (callNode.hasOneChild()) {\n+        Node lastChild = nameNode.getLastChild();\n+\n+        if (lastChild.getType() == Token.STRING) {\n+            String methodName = lastChild.getString();\n+\n+            if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(targetNode)) {\n+        return false;\n+    }\n+\n+    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+        if (nameNode.getFirstChild().getType() == Token.REGEXP\n+            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+            return false;\n+        } else if (nameNode.getFirstChild().getType() == Token.STRING\n+            && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+            Node param = nameNode.getNext();\n+            if (param != null &&\n+                (param.getType() == Token.STRING\n+                    || param.getType() == Token.REGEXP)) {\n+                return false;\n+            }\n+        }\n+    }\n+}\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}