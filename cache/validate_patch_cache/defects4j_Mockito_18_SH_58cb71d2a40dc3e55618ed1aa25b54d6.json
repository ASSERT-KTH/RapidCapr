{
    "patch": "public ReturnValue execute(CodeNode<?> rootNode, ExecutionContext executionContext) {\n    ReturnValue values = new ReturnValue();\n    \n    if (rootNode instanceof LiteralCodeNode) {\n        values.setValue(((LiteralCodeNode) rootNode).getValue());\n    } else if (rootNode instanceof VariableCodeNode) {\n        values.setValue(executionContext.getVariableValue(((VariableCodeNode) rootNode).getName()));\n    } else {\n        for (CodeNode<?> child : rootNode.getChildren()) {\n            values = execute(child, executionContext);\n            if (values.getReturnFlag()) {\n                return values;\n            }\n        }\n    }\n    \n    if (values.getValue() == null) {\n        values.setValue(Collections.emptyList());\n    }\n    \n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}