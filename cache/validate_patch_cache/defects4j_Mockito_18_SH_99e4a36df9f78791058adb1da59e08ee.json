{
    "patch": "public ReturnValue execute (ExecutionEvent event) throws ExecutionException {\n    ReturnValue values = new ReturnValue();\n    try {\n        ISelection selection = HandlerUtil.getCurrentSelection(event);\n        if (selection instanceof IStructuredSelection) {\n            IStructuredSelection structuredSelection = (IStructuredSelection) selection;\n            Iterator<?> selectionIterator = structuredSelection.iterator();\n            while (selectionIterator.hasNext()) {\n                Object currentSelection = selectionIterator.next();\n                if (currentSelection instanceof IJavaElement) {\n                    IJavaElement javaElement = (IJavaElement) currentSelection;\n                    ICompilationUnit javaUnit = (ICompilationUnit) javaElement.getAncestor(IJavaElement.COMPILATION_UNIT);\n                    if (javaUnit != null) {\n                        ASTParser parser = ASTParser.newParser(AST.JLS12);\n                        parser.setResolveBindings(true);\n                        parser.setKind(ASTParser.K_COMPILATION_UNIT);\n                        parser.setSource(javaUnit);\n                        CompilationUnit compilationUnit = (CompilationUnit) parser.createAST(null);\n                        AST ast = compilationUnit.getAST();\n\n                        ASTRewrite rewrite = ASTRewrite.create(ast);\n                        TextEdit textEdit = rewrite.rewriteAST();\n                        CompilationUnitChange cuChange = new CompilationUnitChange(\"\", javaUnit);\n                        cuChange.setEdit(textEdit);\n\n                        values.setValueFor(CompilationUnitChange.class, cuChange);\n                    } else {\n                        //do nothing\n                    }\n                }\n            }\n        }\n        //return empty iterable on success\n        values.setValueFor(Iterable.class, Collections.emptyList());\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}