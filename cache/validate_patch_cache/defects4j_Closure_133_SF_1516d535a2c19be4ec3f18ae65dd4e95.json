{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        throw new IllegalStateException(\"JSDoc line is null\");\n    }\n    result = result.trim();\n    if (result.isEmpty()) {\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    boolean startTrimmed = false;\n    boolean sawAsterisk = false;\n    for (int i = 0; i < result.length(); i++) {\n        char c = result.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!startTrimmed) {\n                sb.append(' ');\n                startTrimmed = true;\n            }\n            sawAsterisk = false;\n        } else {\n            if (c == '*') {\n                sawAsterisk = true;\n            } else {\n                if (sawAsterisk) {\n                    sb.append(' ');\n                }\n                sb.append(c);\n                startTrimmed = false;\n            }\n            sawAsterisk = false;\n        }\n    }\n    return sb.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..8e30a5e7 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,41 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+    if (result == null) {\n+        throw new IllegalStateException(\"JSDoc line is null\");\n+    }\n+    result = result.trim();\n+    if (result.isEmpty()) {\n+        return \"\";\n+    }\n+    StringBuilder sb = new StringBuilder();\n+    boolean startTrimmed = false;\n+    boolean sawAsterisk = false;\n+    for (int i = 0; i < result.length(); i++) {\n+        char c = result.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!startTrimmed) {\n+                sb.append(' ');\n+                startTrimmed = true;\n+            }\n+            sawAsterisk = false;\n+        } else {\n+            if (c == '*') {\n+                sawAsterisk = true;\n+            } else {\n+                if (sawAsterisk) {\n+                    sb.append(' ');\n+                }\n+                sb.append(c);\n+                startTrimmed = false;\n+            }\n+            sawAsterisk = false;\n+        }\n+    }\n+    return sb.toString().trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}