{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n    int newPos = parser.parseInto(bucket, text, position);\n    long parsedLocalMillis = bucket.computeMillis(false, text);\n    int parsedOffset = Integer.MIN_VALUE;\n    if (bucket.getOffsetInteger() != null) {\n        parsedOffset = bucket.getOffsetInteger();\n    } else if (bucket.getZone() != null) {\n        parsedOffset = bucket.getZone().getOffset(parsedLocalMillis);\n    }\n    \n    // check if the parsed day is valid for the parsed year \n    // and set the parsed year accordingly\n    int parsedYear = bucket.getParsedYear();\n    if (parsedYear > 0 && \n        bucket.getParsedMonth() == DateTimeConstants.FEBRUARY && \n        bucket.getParsedDayOfMonth() == 29 && \n        !chrono.isLeapYear(parsedYear)) {\n        throw new IllegalArgumentException(\"Invalid date: \" + text);\n    } else if (parsedYear <= 0) {\n        parsedYear = chrono.year().get(parsedLocalMillis);\n        if (parsedYear > 0 && \n            bucket.getParsedMonth() == DateTimeConstants.FEBRUARY && \n            bucket.getParsedDayOfMonth() == 29 && \n            !chrono.isLeapYear(parsedYear)) {\n            throw new IllegalArgumentException(\"Invalid date: \" + text);\n        }\n    }\n\n    if (parsedOffset != Integer.MIN_VALUE) {\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        parsedLocalMillis -= parsedOffset;\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    } else {\n        parsedOffset = chrono.getZone().getOffset(parsedLocalMillis);\n        parsedLocalMillis -= parsedOffset;\n    }\n    \n    instant.setMillis(parsedLocalMillis);\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n        chrono = chrono.withZone(iZone);\n    } else if (parsedOffset != Integer.MIN_VALUE) {\n        instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n    } else if (bucket.getZone() != null) {\n        instant.setZone(bucket.getZone());\n    } else {\n        instant.setZone(chrono.getZone());\n    }\n    \n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..897c4f77 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,72 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    chrono = selectChronology(chrono);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n+    int newPos = parser.parseInto(bucket, text, position);\n+    long parsedLocalMillis = bucket.computeMillis(false, text);\n+    int parsedOffset = Integer.MIN_VALUE;\n+    if (bucket.getOffsetInteger() != null) {\n+        parsedOffset = bucket.getOffsetInteger();\n+    } else if (bucket.getZone() != null) {\n+        parsedOffset = bucket.getZone().getOffset(parsedLocalMillis);\n+    }\n+    \n+    // check if the parsed day is valid for the parsed year \n+    // and set the parsed year accordingly\n+    int parsedYear = bucket.getParsedYear();\n+    if (parsedYear > 0 && \n+        bucket.getParsedMonth() == DateTimeConstants.FEBRUARY && \n+        bucket.getParsedDayOfMonth() == 29 && \n+        !chrono.isLeapYear(parsedYear)) {\n+        throw new IllegalArgumentException(\"Invalid date: \" + text);\n+    } else if (parsedYear <= 0) {\n+        parsedYear = chrono.year().get(parsedLocalMillis);\n+        if (parsedYear > 0 && \n+            bucket.getParsedMonth() == DateTimeConstants.FEBRUARY && \n+            bucket.getParsedDayOfMonth() == 29 && \n+            !chrono.isLeapYear(parsedYear)) {\n+            throw new IllegalArgumentException(\"Invalid date: \" + text);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n \n+    if (parsedOffset != Integer.MIN_VALUE) {\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        parsedLocalMillis -= parsedOffset;\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    } else {\n+        parsedOffset = chrono.getZone().getOffset(parsedLocalMillis);\n+        parsedLocalMillis -= parsedOffset;\n+    }\n+    \n+    instant.setMillis(parsedLocalMillis);\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+        chrono = chrono.withZone(iZone);\n+    } else if (parsedOffset != Integer.MIN_VALUE) {\n+        instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+    } else if (bucket.getZone() != null) {\n+        instant.setZone(bucket.getZone());\n+    } else {\n+        instant.setZone(chrono.getZone());\n+    }\n+    \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}