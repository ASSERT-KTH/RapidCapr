{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    long local = convertUTCToLocal(instant);\n    boolean overlap = isLocalTimeOverlap(local);\n\n    if (!overlap) {\n        return instant;\n    }\n\n    if (earlierOrLater) {\n        long next = getNextLocalTime(local);\n        if (next != local) {\n            return convertLocalToUTC(local, false, instant);\n        }\n    } else {\n        long prev = getPreviousLocalTime(local);\n        if (prev != local) {\n            return convertLocalToUTC(local, false, instant);\n        }\n    }\n\n    return convertLocalToUTC(local, earlierOrLater, instant);\n}\n\n/**\n * Check if the local time for the given instant is in an overlap (i.e. occurs twice due to a DST transition).\n */\nprivate boolean isLocalTimeOverlap(long localTime) {\n    long before = localTime - 1;\n    long after = localTime + 1;\n    return convertLocalToUTC(before, false, 0L) != convertLocalToUTC(after, false, 0L);\n}\n\n/**\n * Get the next local time within an overlap period.\n */\nprivate long getNextLocalTime(long localTime) {\n    for (int i = 1; i <= 24; i++) {\n        long next = localTime + i* DateTimeConstants.MILLIS_PER_HOUR;\n        if (isLocalTimeOverlap(next)) {\n            return next;\n        }\n    }\n    return localTime;\n}\n\n/**\n * Get the previous local time within an overlap period.\n */\nprivate long getPreviousLocalTime(long localTime) {\n    for (int i = 1; i <= 24; i++) {\n        long prev = localTime - i * DateTimeConstants.MILLIS_PER_HOUR;\n        if (isLocalTimeOverlap(prev)) {\n            return prev;\n        }\n    }\n    return localTime;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..5440962c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,63 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    long local = convertUTCToLocal(instant);\n+    boolean overlap = isLocalTimeOverlap(local);\n+\n+    if (!overlap) {\n+        return instant;\n+    }\n+\n+    if (earlierOrLater) {\n+        long next = getNextLocalTime(local);\n+        if (next != local) {\n+            return convertLocalToUTC(local, false, instant);\n+        }\n+    } else {\n+        long prev = getPreviousLocalTime(local);\n+        if (prev != local) {\n+            return convertLocalToUTC(local, false, instant);\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+\n+    return convertLocalToUTC(local, earlierOrLater, instant);\n+}\n+\n+/**\n+ * Check if the local time for the given instant is in an overlap (i.e. occurs twice due to a DST transition).\n+ */\n+private boolean isLocalTimeOverlap(long localTime) {\n+    long before = localTime - 1;\n+    long after = localTime + 1;\n+    return convertLocalToUTC(before, false, 0L) != convertLocalToUTC(after, false, 0L);\n+}\n+\n+/**\n+ * Get the next local time within an overlap period.\n+ */\n+private long getNextLocalTime(long localTime) {\n+    for (int i = 1; i <= 24; i++) {\n+        long next = localTime + i* DateTimeConstants.MILLIS_PER_HOUR;\n+        if (isLocalTimeOverlap(next)) {\n+            return next;\n+        }\n+    }\n+    return localTime;\n+}\n+\n+/**\n+ * Get the previous local time within an overlap period.\n+ */\n+private long getPreviousLocalTime(long localTime) {\n+    for (int i = 1; i <= 24; i++) {\n+        long prev = localTime - i * DateTimeConstants.MILLIS_PER_HOUR;\n+        if (isLocalTimeOverlap(prev)) {\n+            return prev;\n+        }\n+    }\n+    return localTime;\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}