{
    "patch": "import org.apache.commons.math3.util.*;\n\npublic class GammaFunction {\n\n    public static double regularizedGammaP(double a, double x) {\n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException(\n                    \"a and x must be positive numbers!\");\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        if (x > a + 1.0) { // Compute regularizedGammaQ(a, x)\n            double incompleteGammaC = regularizedGammaQ(a, x);\n            return 1.0 - incompleteGammaC;\n        }\n        double epsilon = 10E-15;\n        double term = 1.0 / a;\n        double sum = term;\n\n        // Compute the sum\n        while (Math.abs(term/sum) > epsilon) {\n            term *= x/a;\n            sum += term;\n            a++;\n        }\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n\n    public static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x+1.0)\n                + 24.01409822 / (x+2.0) - 1.231739516 / (x+3.0)\n                + 0.00120858003 / (x+4.0) - 0.00000536382 / (x+5.0);\n        return tmp + Math.log(ser * Math.sqrt(2*Math.PI));\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        double gamma = Math.exp(logGamma(a));\n        double igamma = incompleteGamma(a, x);\n        return gamma - igamma;\n    }\n\n    public static double incompleteGamma(double a, double x) {\n        double result = 0.0;\n        double term = 1.0/a;\n        while (x > 0 && x >= a && term/Math.max(result,1.0) > 10E-15){\n            term *= x;\n            result += term;\n            a++;\n        }\n\n        return Math.exp(-x + a*Math.log(x) - logGamma(a)) * result;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f6871c251 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.*;\n+\n+public class GammaFunction {\n+\n+    public static double regularizedGammaP(double a, double x) {\n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException(\n+                    \"a and x must be positive numbers!\");\n+        }\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        if (x > a + 1.0) { // Compute regularizedGammaQ(a, x)\n+            double incompleteGammaC = regularizedGammaQ(a, x);\n+            return 1.0 - incompleteGammaC;\n+        }\n+        double epsilon = 10E-15;\n+        double term = 1.0 / a;\n+        double sum = term;\n+\n+        // Compute the sum\n+        while (Math.abs(term/sum) > epsilon) {\n+            term *= x/a;\n+            sum += term;\n+            a++;\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+\n+    public static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x+1.0)\n+                + 24.01409822 / (x+2.0) - 1.231739516 / (x+3.0)\n+                + 0.00120858003 / (x+4.0) - 0.00000536382 / (x+5.0);\n+        return tmp + Math.log(ser * Math.sqrt(2*Math.PI));\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        double gamma = Math.exp(logGamma(a));\n+        double igamma = incompleteGamma(a, x);\n+        return gamma - igamma;\n+    }\n+\n+    public static double incompleteGamma(double a, double x) {\n+        double result = 0.0;\n+        double term = 1.0/a;\n+        while (x > 0 && x >= a && term/Math.max(result,1.0) > 10E-15){\n+            term *= x;\n+            result += term;\n+            a++;\n+        }\n+\n+        return Math.exp(-x + a*Math.log(x) - logGamma(a)) * result;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}