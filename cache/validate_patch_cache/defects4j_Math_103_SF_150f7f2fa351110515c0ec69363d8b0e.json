{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(x)) {\n        if (x < 0) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    }\n    if (x > mean + maxDeviance || x < mean - maxDeviance) {\n        return standardApproach(x);\n    }\n    return 0.5 * (1.0 + Erf.erf((x - mean) /\n            (standardDeviation * Math.sqrt(2.0))));\n}\n\nprivate double standardApproach(double x) throws MathException {\n    if (x < mean) {\n        return 1.0 - cumulativeProbability(mean - x);\n    } else {\n        return cumulativeProbability(x, Double.POSITIVE_INFINITY);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..dd50c84aa 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,31 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n     }\n+    if (Double.isInfinite(x)) {\n+        if (x < 0) {\n+            return 0.0;\n+        } else {\n+            return 1.0;\n+        }\n+    }\n+    if (x > mean + maxDeviance || x < mean - maxDeviance) {\n+        return standardApproach(x);\n+    }\n+    return 0.5 * (1.0 + Erf.erf((x - mean) /\n+            (standardDeviation * Math.sqrt(2.0))));\n+}\n+\n+private double standardApproach(double x) throws MathException {\n+    if (x < mean) {\n+        return 1.0 - cumulativeProbability(mean - x);\n+    } else {\n+        return cumulativeProbability(x, Double.POSITIVE_INFINITY);\n+    }\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}