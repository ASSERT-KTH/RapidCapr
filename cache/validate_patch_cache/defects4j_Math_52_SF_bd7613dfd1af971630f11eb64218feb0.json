{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n\n  double beta;\n  if (v2v2 == 0) {\n    beta = 0;\n  } else {\n    beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  }\n\n  double alpha = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    } else {\n      if (u3.getNormSq() == 0) {\n        // the (q1, q2, q3) vector is also close to (u1, u2, u3) plan,\n        // but (u1, u2, u3) is a singular frame.\n        // we try (v1, v2, v3) as a reference frame\n        uRef = v1;\n        vRef = v2;\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        k = v1Su1.crossProduct(v3.subtract(u1.crossProduct(u2).scalarMultiply(v3.dotProduct(u3) /\n                                                                    u3.getNormSq())));\n        c = k.dotProduct(u1.crossProduct(u2));\n        if (c == 0) {\n          // (q1, q2, q3) colinear with (u1, u2) but also\n          // colinear with (v1, v2), we can only recover\n          // sign of the rotation angle ...\n          q0 = 0.0;\n          q1 = 0.0;\n          q2 = 0.0;\n          q3 = (uRef.dotProduct(vRef) < 0) ? -1 : 1;\n          return;\n        }\n      }\n    }\n\n  }\n\n  // conversions factors\n  double invUNorm = 1 / FastMath.sqrt(u1u1 + u1u2 + u2u2);\n  double e1       = u2.getX() * invUNorm;\n  double e2       = u2.getY() * invUNorm;\n  double e3       = u2.getZ() * invUNorm;\n  double d1       = u1.getX() * invUNorm;\n  double d2       = u1.getY() * invUNorm;\n  double d3       = u1.getZ() * invUNorm;\n  double f1       = e2 * d3 - e3 * d2;\n  double f2       = e3 * d1 - e1 * d3;\n  double f3       = e1 * d2 - e2 * d1;\n\n  // computation of q0\n  double a = 0.5 * (u1u1 - u2u2 - v1v1 + v2v2);\n  double b = 0.5 * (u1.getX() * v1.getX() + u1.getY() * v1.getY() + u1.getZ() * v1.getZ() -\n                    u2.getX() * v2.getX() - u2.getY() * v2.getY() - u2.getZ() * v2.getZ());\n  double cPrime = -a * a + b * b + u1u2 * v1v1;\n  double sq = FastMath.sqrt(cPrime * (u1u1 + u2u2) * v1v1 * v2v2);\n  double d = ((a * (v2v2 - v1v1) + 2 * b * u1u2) * v2v2 -\n              (a * (v2v2 - v1v1) + 2 * b * u1u2 - 2 * u1u2 * invUNorm * sq) * v1v1) / cPrime;\n\n  q0 = d1 * d + e1 * f1 + u1.getX() * invUNorm;\n  q1 = d2 * d + e2 * f1 + u1.getY() * invUNorm;\n  q2 = d3 * d + e3 * f1 + u1.getZ() * invUNorm;\n  q3 = f2 * e3 - f3 * e2;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..bc170cd47 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,7 +310,7 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n   double u1u1 = u1.getNormSq();\n@@ -329,8 +329,15 @@ public class Rotation implements Serializable {\n   double v1v2   = v1.dotProduct(v2);\n   double coeffU = u1u2 / u1u1;\n   double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n+\n+  double beta;\n+  if (v2v2 == 0) {\n+    beta = 0;\n+  } else {\n+    beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+  }\n+\n+  double alpha = coeffU - beta * coeffV;\n   v2 = new Vector3D(alpha, v1, beta, v2);\n \n   // preliminary computation\n@@ -353,8 +360,8 @@ public class Rotation implements Serializable {\n     if (c == 0) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n+      k = v2Su2.crossProduct(v3Su3);\n+      c = k.dotProduct(u2.crossProduct(u3));\n \n       if (c == 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n@@ -370,10 +377,60 @@ public class Rotation implements Serializable {\n       uRef = u2;\n       vRef = v2;\n \n+    } else {\n+      if (u3.getNormSq() == 0) {\n+        // the (q1, q2, q3) vector is also close to (u1, u2, u3) plan,\n+        // but (u1, u2, u3) is a singular frame.\n+        // we try (v1, v2, v3) as a reference frame\n+        uRef = v1;\n+        vRef = v2;\n+        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n+        k = v1Su1.crossProduct(v3.subtract(u1.crossProduct(u2).scalarMultiply(v3.dotProduct(u3) /\n+                                                                    u3.getNormSq())));\n+        c = k.dotProduct(u1.crossProduct(u2));\n+        if (c == 0) {\n+          // (q1, q2, q3) colinear with (u1, u2) but also\n+          // colinear with (v1, v2), we can only recover\n+          // sign of the rotation angle ...\n+          q0 = 0.0;\n+          q1 = 0.0;\n+          q2 = 0.0;\n+          q3 = (uRef.dotProduct(vRef) < 0) ? -1 : 1;\n+          return;\n+        }\n+      }\n     }\n \n   }\n \n+  // conversions factors\n+  double invUNorm = 1 / FastMath.sqrt(u1u1 + u1u2 + u2u2);\n+  double e1       = u2.getX() * invUNorm;\n+  double e2       = u2.getY() * invUNorm;\n+  double e3       = u2.getZ() * invUNorm;\n+  double d1       = u1.getX() * invUNorm;\n+  double d2       = u1.getY() * invUNorm;\n+  double d3       = u1.getZ() * invUNorm;\n+  double f1       = e2 * d3 - e3 * d2;\n+  double f2       = e3 * d1 - e1 * d3;\n+  double f3       = e1 * d2 - e2 * d1;\n+\n+  // computation of q0\n+  double a = 0.5 * (u1u1 - u2u2 - v1v1 + v2v2);\n+  double b = 0.5 * (u1.getX() * v1.getX() + u1.getY() * v1.getY() + u1.getZ() * v1.getZ() -\n+                    u2.getX() * v2.getX() - u2.getY() * v2.getY() - u2.getZ() * v2.getZ());\n+  double cPrime = -a * a + b * b + u1u2 * v1v1;\n+  double sq = FastMath.sqrt(cPrime * (u1u1 + u2u2) * v1v1 * v2v2);\n+  double d = ((a * (v2v2 - v1v1) + 2 * b * u1u2) * v2v2 -\n+              (a * (v2v2 - v1v1) + 2 * b * u1u2 - 2 * u1u2 * invUNorm * sq) * v1v1) / cPrime;\n+\n+  q0 = d1 * d + e1 * f1 + u1.getX() * invUNorm;\n+  q1 = d2 * d + e2 * f1 + u1.getY() * invUNorm;\n+  q2 = d3 * d + e3 * f1 + u1.getZ() * invUNorm;\n+  q3 = f2 * e3 - f3 * e2;\n+\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}