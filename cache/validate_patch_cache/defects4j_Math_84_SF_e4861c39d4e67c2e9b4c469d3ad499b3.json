{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n\n                if (comparator.compare(reflected, expanded) <= 0) { // the reflected simplex is better than the original but not better than the expanded simplex\n                    simplex = replaceWorstPoint(original, expanded, comparator);\n                } else { // expanded simplex is better than the reflected simplex, replace the worst point with the reflected simplex\n                    simplex = replaceWorstPoint(original, reflected, comparator);\n                }\n            } else {\n                // the reflected simplex is not better than the original one, try to contract the simplex around the best point\n                final RealPointValuePair contracted = evaluateNewSimplex(original, -rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // the contracted simplex is better than the original one, accept it\n                    simplex = replaceWorstPoint(original, contracted, comparator);\n                } else {\n                    // neither the reflected nor the contracted simplex is better than the original one, try to shrink the simplex\n                    shrink(original, comparator);\n                }\n            }\n            // check convergence\n            if (isConverged(simplex[0].getValue(), best.getValue())) {\n                return;\n            }\n        }\n    }\n    \n    private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair point,\n                                                    Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] simplex = new RealPointValuePair[original.length];\n        simplex[0] = point;\n        for (int i = 0; i < original.length - 1; i++) {\n            simplex[i + 1] = original[i];\n        }\n        Arrays.sort(simplex, comparator);\n        return simplex;\n    }\n\n    private void shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair best = original[0];\n        for (int i = 1; i < original.length; i++) {\n            final double[] res = new double[original[i].getPointRef().length];\n            final double[] originalI = original[i].getPointRef();\n            for (int j = 0; j < res.length; j++) {\n                res[j] = best.getPointRef()[j] + sigma * (originalI[j] - best.getPointRef()[j]);\n            }\n            final RealPointValuePair pair = new RealPointValuePair(res,\n                    computeObjectiveValue(original[0].getValue(), res), false);\n            simplex[i] = pair;\n        }\n        Arrays.sort(simplex, comparator);\n    }\n    \n    private boolean isConverged(final double best, final double[] previousBest) {\n        return FastMath.abs(best - previousBest[0]) <= ftol\n                && simplex[0].getValue() < (maxEvaluations - getEvaluations()) / rho;\n    }\n\n    private boolean isConverged(final double best, final double previousBest) {\n        return FastMath.abs(best - previousBest) <= ftol\n                && simplex[0].getValue() < (maxEvaluations - getEvaluations()) / rho;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5d5afc1f7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,10 +59,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n         while (true) {\n-\n             incrementIterationsCounter();\n \n             // save the original vertex\n@@ -72,30 +70,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n \n+                if (comparator.compare(reflected, expanded) <= 0) { // the reflected simplex is better than the original but not better than the expanded simplex\n+                    simplex = replaceWorstPoint(original, expanded, comparator);\n+                } else { // expanded simplex is better than the reflected simplex, replace the worst point with the reflected simplex\n+                    simplex = replaceWorstPoint(original, reflected, comparator);\n+                }\n+            } else {\n+                // the reflected simplex is not better than the original one, try to contract the simplex around the best point\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, -rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // the contracted simplex is better than the original one, accept it\n+                    simplex = replaceWorstPoint(original, contracted, comparator);\n+                } else {\n+                    // neither the reflected nor the contracted simplex is better than the original one, try to shrink the simplex\n+                    shrink(original, comparator);\n+                }\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (isConverged(simplex[0].getValue(), best.getValue())) {\n                 return;\n             }\n+        }\n+    }\n+    \n+    private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair point,\n+                                                    Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] simplex = new RealPointValuePair[original.length];\n+        simplex[0] = point;\n+        for (int i = 0; i < original.length - 1; i++) {\n+            simplex[i + 1] = original[i];\n+        }\n+        Arrays.sort(simplex, comparator);\n+        return simplex;\n+    }\n \n+    private void shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair best = original[0];\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] res = new double[original[i].getPointRef().length];\n+            final double[] originalI = original[i].getPointRef();\n+            for (int j = 0; j < res.length; j++) {\n+                res[j] = best.getPointRef()[j] + sigma * (originalI[j] - best.getPointRef()[j]);\n+            }\n+            final RealPointValuePair pair = new RealPointValuePair(res,\n+                    computeObjectiveValue(original[0].getValue(), res), false);\n+            simplex[i] = pair;\n         }\n+        Arrays.sort(simplex, comparator);\n+    }\n+    \n+    private boolean isConverged(final double best, final double[] previousBest) {\n+        return FastMath.abs(best - previousBest[0]) <= ftol\n+                && simplex[0].getValue() < (maxEvaluations - getEvaluations()) / rho;\n+    }\n \n+    private boolean isConverged(final double best, final double previousBest) {\n+        return FastMath.abs(best - previousBest) <= ftol\n+                && simplex[0].getValue() < (maxEvaluations - getEvaluations()) / rho;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}