{
    "patch": "if (cfa != null) {\n  Node finallyParent = finallyNode.getParent();\n  Node nextNode = finallyNode.getNext();\n  if (nextNode != null && nextNode != finallyParent.getNext()) { // Finally not block terminated.\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(nextNode));\n  } else {\n    Node followNode = computeFollowNode(fromNode, parent.getLastChild(), cfa);\n    if (finallyNode.getNext() != null) {\n      Node caseChild = finallyNode.getNext().getFirstChild();\n      if (caseChild != null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, caseChild);\n        cfa.createEdge(caseChild, Branch.UNCOND, computeFollowNode(fromNode, caseChild, cfa));\n      } else {\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getNext(), cfa));\n      }\n    } else {\n      cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n    }\n    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..943c713f 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,27 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node finallyParent = finallyNode.getParent();\n+  Node nextNode = finallyNode.getNext();\n+  if (nextNode != null && nextNode != finallyParent.getNext()) { // Finally not block terminated.\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(nextNode));\n+  } else {\n+    Node followNode = computeFollowNode(fromNode, parent.getLastChild(), cfa);\n+    if (finallyNode.getNext() != null) {\n+      Node caseChild = finallyNode.getNext().getFirstChild();\n+      if (caseChild != null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, caseChild);\n+        cfa.createEdge(caseChild, Branch.UNCOND, computeFollowNode(fromNode, caseChild, cfa));\n+      } else {\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyNode.getNext(), cfa));\n+      }\n+    } else {\n+      cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+    }\n+    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}