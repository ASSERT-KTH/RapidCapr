{
    "patch": "      if (functionType.getTypeOfThis() != null &&\n          NodeUtil.isNormalOrOptChainGetElem(child.getParent()) &&\n          getJSType(child.getParent().getFirstChild().getNext()).isSubtypeOf(\n              getNativeType(JSTypeNative.ARRAY_TYPE))) {\n        List<JSType> alternateTypes = new ArrayList<>();\n        alternateTypes.add(getNativeType(JSTypeNative.NULL_TYPE));\n        alternateTypes.add(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n        alternateTypes.add(getNativeType(JSTypeNative.ARRAY_TYPE));\n        alternateTypes.add(getNativeType(JSTypeNative.OBJECT_TYPE));\n        JSType alternateType = getNativeObjectType(alternateTypes);\n        ensureTyped(t, child.getParent(), alternateType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c1e63df6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null &&\n+          NodeUtil.isNormalOrOptChainGetElem(child.getParent()) &&\n+          getJSType(child.getParent().getFirstChild().getNext()).isSubtypeOf(\n+              getNativeType(JSTypeNative.ARRAY_TYPE))) {\n+        List<JSType> alternateTypes = new ArrayList<>();\n+        alternateTypes.add(getNativeType(JSTypeNative.NULL_TYPE));\n+        alternateTypes.add(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n+        alternateTypes.add(getNativeType(JSTypeNative.ARRAY_TYPE));\n+        alternateTypes.add(getNativeType(JSTypeNative.OBJECT_TYPE));\n+        JSType alternateType = getNativeObjectType(alternateTypes);\n+        ensureTyped(t, child.getParent(), alternateType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}