{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (!constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    // Eg: function f(/** {{foo: string}} */ x) {}\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          // If the property is not already declared, we define it with the inferred type\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            // If the object literal does not already have the property, we infer it with a VOID type\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..ae6a5256 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -553,23 +553,21 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+    // We only want to match constraints on anonymous types.\n+    if (!constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+    // Eg: function f(/** {{foo: string}} */ x) {}\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n+          // If the property is not already declared, we define it with the inferred type\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n+            // If the object literal does not already have the property, we infer it with a VOID type\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                 .getLeastSupertype(propType);\n           }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}