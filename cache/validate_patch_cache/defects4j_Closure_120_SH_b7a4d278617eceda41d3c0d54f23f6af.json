{
    "patch": "        } else if (maybeInit.isSimpleAssignmentToName()) {\n          // ignore self-assignments (e.g. \"x = x + 1\")\n          if (maybeInit.getNode() != maybeInit.getRhs().getNode()) {\n            return maybeInit;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..18b4ddd7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (maybeInit.isSimpleAssignmentToName()) {\n+          // ignore self-assignments (e.g. \"x = x + 1\")\n+          if (maybeInit.getNode() != maybeInit.getRhs().getNode()) {\n+            return maybeInit;\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}