{
    "patch": "try {\n    boolean isOffsetTransition = false;\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n        DateTimeField field = savedFields[i].iField;\n        // If the field set is in the month range increment the year to 1970\n        if (compareReverse(field.getDurationField(), DurationFieldType.months().getField(iChrono)) >= 0\n                && compareReverse(field.getDurationField(), DurationFieldType.years().getField(iChrono)) <= 0\n                && field.get(millis) > 12) {\n            millis = iChrono.year().add(millis, 1);\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is year or weekyear\n    DurationField years = DurationFieldType.years().getField(iChrono);\n    DateTimeField first = savedFields[0].iField;\n    if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n            || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n        long newMillis = first.roundFloor(millis);\n        if (iZone != null) {\n            // If the offset changes because the year is altered, we need to check if there is\n            // a transition in the time zone \n            int oldOffset = iZone.getOffset(millis);\n            int newOffset = iZone.getOffset(newMillis);\n            if (oldOffset != newOffset) {\n                isOffsetTransition = true;\n            }\n        }\n        millis = newMillis;\n        for (int i = 1; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } else {\n        throw e;\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}\n\nif (isOffsetTransition) {\n    String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n    if (text != null) {\n        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n    }\n    throw new IllegalArgumentException(message);\n}\n\nif (iZone == null) {\n    millis -= iOffset;\n} else {\n    int offset = iZone.getOffsetFromLocal(millis);\n    millis -= offset;\n    if (offset != iZone.getOffset(millis)) {\n        String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}\n\nreturn millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..26084a88 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,76 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    boolean isOffsetTransition = false;\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+        DateTimeField field = savedFields[i].iField;\n+        // If the field set is in the month range increment the year to 1970\n+        if (compareReverse(field.getDurationField(), DurationFieldType.months().getField(iChrono)) >= 0\n+                && compareReverse(field.getDurationField(), DurationFieldType.years().getField(iChrono)) <= 0\n+                && field.get(millis) > 12) {\n+            millis = iChrono.year().add(millis, 1);\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is year or weekyear\n+    DurationField years = DurationFieldType.years().getField(iChrono);\n+    DateTimeField first = savedFields[0].iField;\n+    if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n+            || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+        long newMillis = first.roundFloor(millis);\n+        if (iZone != null) {\n+            // If the offset changes because the year is altered, we need to check if there is\n+            // a transition in the time zone \n+            int oldOffset = iZone.getOffset(millis);\n+            int newOffset = iZone.getOffset(newMillis);\n+            if (oldOffset != newOffset) {\n+                isOffsetTransition = true;\n+            }\n+        }\n+        millis = newMillis;\n+        for (int i = 1; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } else {\n+        throw e;\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n+\n+if (isOffsetTransition) {\n+    String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+    if (text != null) {\n+        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+    }\n+    throw new IllegalArgumentException(message);\n+}\n+\n+if (iZone == null) {\n+    millis -= iOffset;\n+} else {\n+    int offset = iZone.getOffsetFromLocal(millis);\n+    millis -= offset;\n+    if (offset != iZone.getOffset(millis)) {\n+        String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n+\n+return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}