{
    "patch": "        List<Reference> assignments = getAssignments();\n        Reference firstAssignment = assignments.get(0);\n        if (assignments.size() != 1 || firstAssignment.canBeDeleted()) {\n            return null;\n        }\n        return firstAssignment;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b827905a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        List<Reference> assignments = getAssignments();\n+        Reference firstAssignment = assignments.get(0);\n+        if (assignments.size() != 1 || firstAssignment.canBeDeleted()) {\n+            return null;\n+        }\n+        return firstAssignment;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}