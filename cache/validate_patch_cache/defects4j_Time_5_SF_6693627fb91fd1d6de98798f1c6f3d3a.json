{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    // Split the period into years, months, and days.\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n\n    // Normalize months and years to be less than 12.\n    int carry = months / 12;\n    months %= 12;\n    years += carry;\n\n    // Construct a new period with the normalized values.\n    Period result = new Period(0L, type, ISOChronology.getInstanceUTC());\n    result = result.withYears(years).withMonths(months).withDays(days);\n\n    // Add all the other period fields to the new period.\n    result = result.plusWeeks(getWeeks())\n                   .plusDays(getDays())\n                   .plusHours(getHours())\n                   .plusMinutes(getMinutes())\n                   .plusSeconds(getSeconds())\n                   .plusMillis(getMillis());\n\n    return result.normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..39e9a16d 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,30 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    // Split the period into years, months, and days.\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+\n+    // Normalize months and years to be less than 12.\n+    int carry = months / 12;\n+    months %= 12;\n+    years += carry;\n+\n+    // Construct a new period with the normalized values.\n+    Period result = new Period(0L, type, ISOChronology.getInstanceUTC());\n+    result = result.withYears(years).withMonths(months).withDays(days);\n+\n+    // Add all the other period fields to the new period.\n+    result = result.plusWeeks(getWeeks())\n+                   .plusDays(getDays())\n+                   .plusHours(getHours())\n+                   .plusMinutes(getMinutes())\n+                   .plusSeconds(getSeconds())\n+                   .plusMillis(getMillis());\n+\n+    return result.normalizedStandard(type);\n+}\n \n }",
    "result_reason": "java.lang.ArithmeticException: The calculation caused an overflow: 1610612736 + 1610612736",
    "test_result": "FAIL"
}