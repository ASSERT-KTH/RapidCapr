{
    "patch": "        final WeightedObservedPoint[] points = getObservations();\n        final double[] sigmas = null; // or new double[points.length] if you have the sigmas\n        final double[] target = null; // or your own target array, if you wish\n        final double[] initGuess = Arrays.copyOf(guess, guess.length);\n        return new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0e-12).optimize(\n                new Evaluation(points, sigmas),\n                new ParameterGauss(), points, sigmas, target, initGuess).getPoint().toArray();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..32052a1b7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,13 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final WeightedObservedPoint[] points = getObservations();\n+        final double[] sigmas = null; // or new double[points.length] if you have the sigmas\n+        final double[] target = null; // or your own target array, if you wish\n+        final double[] initGuess = Arrays.copyOf(guess, guess.length);\n+        return new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0e-12).optimize(\n+                new Evaluation(points, sigmas),\n+                new ParameterGauss(), points, sigmas, target, initGuess).getPoint().toArray();\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}