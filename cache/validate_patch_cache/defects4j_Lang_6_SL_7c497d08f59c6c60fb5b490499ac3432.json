{
    "patch": "BUG DESCRIPTION:\nThe variable `consumed` is the number of Unicode code units consumed in the input CharSequence by translate method but it should increment the code points which could be one or two characters. Therefore, incrementing `pos` by `Character.charCount(Character.codePointAt(input, pos))` only increment one Unicode code unit instead of a code point which could be one or two Unicode code unit.\n\nCODE FIX:\nThe correct line should increment `pos` by the actual count of characters that form a code point. This can be achieved by calling `Character.toChars(int codePoint)` which gives an array of `char` for a Unicode code point and then getting its length.\n\n```\npos += Character.toChars(Character.codePointAt(input, pos)).length;\n```",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..b5bc66f8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,15 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+BUG DESCRIPTION:\n+The variable `consumed` is the number of Unicode code units consumed in the input CharSequence by translate method but it should increment the code points which could be one or two characters. Therefore, incrementing `pos` by `Character.charCount(Character.codePointAt(input, pos))` only increment one Unicode code unit instead of a code point which could be one or two Unicode code unit.\n+\n+CODE FIX:\n+The correct line should increment `pos` by the actual count of characters that form a code point. This can be achieved by calling `Character.toChars(int codePoint)` which gives an array of `char` for a Unicode code point and then getting its length.\n+\n+```\n+pos += Character.toChars(Character.codePointAt(input, pos)).length;\n+```\n             }\n         }\n     }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}