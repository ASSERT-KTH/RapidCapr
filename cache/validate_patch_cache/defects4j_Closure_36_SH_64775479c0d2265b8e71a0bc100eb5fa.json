{
    "patch": "          Node callTarget = reference.getFirstChild();\n          if (callTarget.isGetProp()\n              && callTarget.getNext().getString().equals(\"getInstance\")) {\n            // We determine that a getter is singleton by checking if the\n            // object on which it is invoked has no instance preceding/following\n            // its method name.\n            Node instanceCheck = callTarget.getFirstChild();\n            while (instanceCheck != null\n                && (instanceCheck.isGetElem() || instanceCheck.isGetProp())) {\n              instanceCheck = instanceCheck.getFirstChild();\n            }\n            if (instanceCheck == null || instanceCheck.isThis()) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..4a7028bb 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,20 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          Node callTarget = reference.getFirstChild();\n+          if (callTarget.isGetProp()\n+              && callTarget.getNext().getString().equals(\"getInstance\")) {\n+            // We determine that a getter is singleton by checking if the\n+            // object on which it is invoked has no instance preceding/following\n+            // its method name.\n+            Node instanceCheck = callTarget.getFirstChild();\n+            while (instanceCheck != null\n+                && (instanceCheck.isGetElem() || instanceCheck.isGetProp())) {\n+              instanceCheck = instanceCheck.getFirstChild();\n+            }\n+            if (instanceCheck == null || instanceCheck.isThis()) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}