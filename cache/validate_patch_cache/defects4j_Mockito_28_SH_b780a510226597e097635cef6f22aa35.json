{
    "patch": "MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    Class<?> fieldType = field.getType();\n    Object candidate = mockCandidate.getInstance();\n    if (candidate != null && fieldType.isAssignableFrom(candidate.getClass())) {\n        try {\n            field.setAccessible(true);\n            Object oldValue = field.get(fieldInstance);\n            field.set(fieldInstance, candidate);\n            mocks.remove(candidate); // remove the used mock from the set of available mocks\n            if (oldValue != null && mocks.contains(oldValue)) {\n                mocks.add(oldValue);\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n        }\n    } else if (candidate != null) {\n        String message = String.format(\"Mock candidate %s is not compatible with field type %s\",\n                                        candidate.getClass().getSimpleName(), fieldType.getSimpleName());\n        throw new IllegalArgumentException(message);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0942cc112 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,31 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    Class<?> fieldType = field.getType();\n+    Object candidate = mockCandidate.getInstance();\n+    if (candidate != null && fieldType.isAssignableFrom(candidate.getClass())) {\n+        try {\n+            field.setAccessible(true);\n+            Object oldValue = field.get(fieldInstance);\n+            field.set(fieldInstance, candidate);\n+            mocks.remove(candidate); // remove the used mock from the set of available mocks\n+            if (oldValue != null && mocks.contains(oldValue)) {\n+                mocks.add(oldValue);\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+        }\n+    } else if (candidate != null) {\n+        String message = String.format(\"Mock candidate %s is not compatible with field type %s\",\n+                                        candidate.getClass().getSimpleName(), fieldType.getSimpleName());\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}