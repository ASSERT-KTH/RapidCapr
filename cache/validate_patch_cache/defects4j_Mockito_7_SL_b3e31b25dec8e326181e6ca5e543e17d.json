{
    "patch": "if (typeVariable.getBounds().length == 0) {\n    registerTypeVariablesOn(Object.class);\n} else {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof Class) {\n        registerTypeVariablesOn(typeVariable);\n    } else if (typeVariable instanceof ParameterizedType) {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    } else if (typeVariable instanceof WildcardType) {\n        Type[] upperBounds = ((WildcardType) typeVariable).getUpperBounds();\n        if (upperBounds.length > 0) {\n            registerTypeVariablesOn(upperBounds[0]);\n        } else {\n            registerTypeVariablesOn(Object.class);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..371b21fd8 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,33 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+if (typeVariable.getBounds().length == 0) {\n+    registerTypeVariablesOn(Object.class);\n+} else {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof Class) {\n+        registerTypeVariablesOn(typeVariable);\n+    } else if (typeVariable instanceof ParameterizedType) {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    } else if (typeVariable instanceof WildcardType) {\n+        Type[] upperBounds = ((WildcardType) typeVariable).getUpperBounds();\n+        if (upperBounds.length > 0) {\n+            registerTypeVariablesOn(upperBounds[0]);\n+        } else {\n+            registerTypeVariablesOn(Object.class);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: incompatible types: TypeVariable cannot be converted to Class",
    "test_result": "ERROR"
}