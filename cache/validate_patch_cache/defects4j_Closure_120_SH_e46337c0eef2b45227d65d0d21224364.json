{
    "patch": "-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n+      BasicBlock block = ref.getBasicBlock();\n+      List<BasicBlock> visitedBlocks = new ArrayList<>();\n+      while (block != null && !visitedBlocks.contains(block)) {\n+        visitedBlocks.add(block);\n+        if (block.isLoop || block.getSuccessors().size() > 1) {\n+          return false;\n         } else {\n-          if (block.isLoop) {\n+          List<DiGraphEdge<BasicBlock, Branch>> succs = block.getSuccessors();\n+          if (succs.size() != 1) {\n             return false;\n           }\n-          succs = block.getSuccessors();\n-\n-          if (succs.size() != 1) {\n-            return false;\n-          }\n-\n-          block = succs.get(0).getDestination();\n+          block = succs.get(0).getDestination().getBlock();\n         }\n       }\n-      return true;\n+      return block == null;\n     }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2e6530cc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,35 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+-      for (BasicBlock block = ref.getBasicBlock();\n+-           block != null; block = block.getParent()) {\n+-        if (block.isFunction) {\n+-          break;\n++      BasicBlock block = ref.getBasicBlock();\n++      List<BasicBlock> visitedBlocks = new ArrayList<>();\n++      while (block != null && !visitedBlocks.contains(block)) {\n++        visitedBlocks.add(block);\n++        if (block.isLoop || block.getSuccessors().size() > 1) {\n++          return false;\n+         } else {\n+-          if (block.isLoop) {\n++          List<DiGraphEdge<BasicBlock, Branch>> succs = block.getSuccessors();\n++          if (succs.size() != 1) {\n+             return false;\n+           }\n+-          succs = block.getSuccessors();\n+-\n+-          if (succs.size() != 1) {\n+-            return false;\n+-          }\n+-\n+-          block = succs.get(0).getDestination();\n++          block = succs.get(0).getDestination().getBlock();\n+         }\n+       }\n+-      return true;\n++      return block == null;\n+     }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}