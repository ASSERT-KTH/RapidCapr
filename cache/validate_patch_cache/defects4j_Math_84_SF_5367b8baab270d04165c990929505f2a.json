{
    "patch": "                } else {\n                    // accept the reflected point\n                    simplex[0] = reflected;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n                // check if we should do an outside contraction\n                final RealPointValuePair[] contractedSimplex = simplex;\n                final RealPointValuePair outsideContraction = evaluateNewSimplex(original, deltaOutside, comparator);\n                if (comparator.compare(outsideContraction, contracted) < 0) {\n                    simplex = outsideContraction.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : outsideContraction.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], outsideContraction} : new RealPointValuePair[] {best, outsideContraction, original[1], original[0]};\n                } else {\n                    simplex = contractedSimplex;\n                }\n\n            } else {\n\n                // check if we should do an inside contraction\n                final RealPointValuePair insideContraction = evaluateNewSimplex(original, deltaInside, comparator);\n                if (comparator.compare(insideContraction, best) < 0) {\n                    simplex = insideContraction.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : insideContraction.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], insideContraction} : new RealPointValuePair[] {best, insideContraction, original[1], original[0]};\n                } else {\n                    // check convergence\n                    return;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..786b34304 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected point\n+                    simplex[0] = reflected;\n                 }\n \n                 return;\n@@ -90,13 +72,24 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n-            // check convergence\n-                return;\n-            }\n+                // check if we should do an outside contraction\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                final RealPointValuePair outsideContraction = evaluateNewSimplex(original, deltaOutside, comparator);\n+                if (comparator.compare(outsideContraction, contracted) < 0) {\n+                    simplex = outsideContraction.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : outsideContraction.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], outsideContraction} : new RealPointValuePair[] {best, outsideContraction, original[1], original[0]};\n+                } else {\n+                    simplex = contractedSimplex;\n+                }\n \n-        }\n+            } else {\n \n-    }\n+                // check if we should do an inside contraction\n+                final RealPointValuePair insideContraction = evaluateNewSimplex(original, deltaInside, comparator);\n+                if (comparator.compare(insideContraction, best) < 0) {\n+                    simplex = insideContraction.getPoint() == original[0].getPoint() ? new RealPointValuePair[] {best} : insideContraction.getPoint() == original[original.length - 1].getPoint() ? new RealPointValuePair[] {best, original[1], original[0], insideContraction} : new RealPointValuePair[] {best, insideContraction, original[1], original[0]};\n+                } else {\n+                    // check convergence\n+                    return;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}