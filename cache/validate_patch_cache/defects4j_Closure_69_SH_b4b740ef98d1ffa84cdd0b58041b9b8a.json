{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSTypeRegistry registry = compiler.getTypeRegistry();\n      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null && thisType.isFunctionType()) {\n        FunctionType funcWithThis = thisType.toMaybeFunctionType();\n        if (funcWithThis.getTypeOfThis().isUnknownType()) {\n          Node parent = n.getParent();\n          if (NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent)) {\n            Node receiver = NodeUtil.isGet(parent) ? parent.getFirstChild() : parent.getSecondChild();\n            JSType receiverType = getJSType(receiver);\n            if (receiverType.isSubtype(registry.getNativeType(JSTypeNative.OBJECT_TYPE)) ||\n                receiverType.isSubtype(registry.getNativeType(JSTypeNative.STRING_TYPE)) ||\n                receiverType.isSubtype(registry.getNativeType(JSTypeNative.NUMBER_TYPE)) ||\n                receiverType.isSubtype(registry.getNativeType(JSTypeNative.BOOLEAN_TYPE))) {\n              visitParameterList(t, n, functionType);\n              ensureTyped(t, n, functionType.getReturnType());\n              return;\n            }\n          }\n          report(t, n, THIS_BEFORE_SUPER, childType.toString());\n        } else {\n          report(t, n, CANNOT_CALL_SUPER, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7fdb9702 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSTypeRegistry registry = compiler.getTypeRegistry();\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null && thisType.isFunctionType()) {\n+        FunctionType funcWithThis = thisType.toMaybeFunctionType();\n+        if (funcWithThis.getTypeOfThis().isUnknownType()) {\n+          Node parent = n.getParent();\n+          if (NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent)) {\n+            Node receiver = NodeUtil.isGet(parent) ? parent.getFirstChild() : parent.getSecondChild();\n+            JSType receiverType = getJSType(receiver);\n+            if (receiverType.isSubtype(registry.getNativeType(JSTypeNative.OBJECT_TYPE)) ||\n+                receiverType.isSubtype(registry.getNativeType(JSTypeNative.STRING_TYPE)) ||\n+                receiverType.isSubtype(registry.getNativeType(JSTypeNative.NUMBER_TYPE)) ||\n+                receiverType.isSubtype(registry.getNativeType(JSTypeNative.BOOLEAN_TYPE))) {\n+              visitParameterList(t, n, functionType);\n+              ensureTyped(t, n, functionType.getReturnType());\n+              return;\n+            }\n+          }\n+          report(t, n, THIS_BEFORE_SUPER, childType.toString());\n+        } else {\n+          report(t, n, CANNOT_CALL_SUPER, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}