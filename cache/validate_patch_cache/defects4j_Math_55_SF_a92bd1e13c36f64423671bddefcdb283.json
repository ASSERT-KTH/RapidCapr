{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double eps = 1.0e-20;\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double v1Magnitude = v1.getNorm();\n    final double v2Magnitude = v2.getNorm();\n\n    if (v1Magnitude < eps || v2Magnitude < eps) {\n        // the only solution we find is to return the zero vector\n        return Vector3D.ZERO;\n    }\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = Vector3D.dotProduct(v1, v2) / (v1Magnitude * v2Magnitude);\n    rho = Double.isNaN(rho) ? 0.0 : FastMath.min(FastMath.max(rho, -1.0), 1.0);\n\n    final Vector3D v3 = new Vector3D(v1.x - rho * v2.x,\n                                     v1.y - rho * v2.y,\n                                     v1.z - rho * v2.z);\n\n    final double v3Magnitude = v3.getNorm();\n    if (v3Magnitude < eps) {\n        // v1 and v2 were parallel, try another basis\n        final double absV1X = FastMath.abs(v1.getX());\n        final double absV1Y = FastMath.abs(v1.getY());\n        final double absV1Z = FastMath.abs(v1.getZ());\n        Vector3D aux;\n        if (absV1X < absV1Y) {\n            if (absV1X < absV1Z) {\n                aux = new Vector3D(1, 0, 0);\n            } else {\n                aux = new Vector3D(0, 0, 1);\n            }\n        } else {\n            if (absV1Y < absV1Z) {\n                aux = new Vector3D(0, 1, 0);\n            } else {\n                aux = new Vector3D(0, 0, 1);\n            }\n        }\n        final Vector3D u = v1.crossProduct(aux).normalize();\n        return new Vector3D(u.getY() * v1.getZ() - u.getZ() * v1.getY(),\n                            u.getZ() * v1.getX() - u.getX() * v1.getZ(),\n                            u.getX() * v1.getY() - u.getY() * v1.getX());\n    }\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return v3.crossProduct(v2).normalize().scalarMultiply(v1Magnitude * v2Magnitude * FastMath.sin(FastMath.acos(rho)));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..9f80c7249 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,63 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    final double eps = 1.0e-20;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double v1Magnitude = v1.getNorm();\n+    final double v2Magnitude = v2.getNorm();\n \n+    if (v1Magnitude < eps || v2Magnitude < eps) {\n+        // the only solution we find is to return the zero vector\n+        return Vector3D.ZERO;\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double rho = Vector3D.dotProduct(v1, v2) / (v1Magnitude * v2Magnitude);\n+    rho = Double.isNaN(rho) ? 0.0 : FastMath.min(FastMath.max(rho, -1.0), 1.0);\n+\n+    final Vector3D v3 = new Vector3D(v1.x - rho * v2.x,\n+                                     v1.y - rho * v2.y,\n+                                     v1.z - rho * v2.z);\n+\n+    final double v3Magnitude = v3.getNorm();\n+    if (v3Magnitude < eps) {\n+        // v1 and v2 were parallel, try another basis\n+        final double absV1X = FastMath.abs(v1.getX());\n+        final double absV1Y = FastMath.abs(v1.getY());\n+        final double absV1Z = FastMath.abs(v1.getZ());\n+        Vector3D aux;\n+        if (absV1X < absV1Y) {\n+            if (absV1X < absV1Z) {\n+                aux = new Vector3D(1, 0, 0);\n+            } else {\n+                aux = new Vector3D(0, 0, 1);\n+            }\n+        } else {\n+            if (absV1Y < absV1Z) {\n+                aux = new Vector3D(0, 1, 0);\n+            } else {\n+                aux = new Vector3D(0, 0, 1);\n+            }\n+        }\n+        final Vector3D u = v1.crossProduct(aux).normalize();\n+        return new Vector3D(u.getY() * v1.getZ() - u.getZ() * v1.getY(),\n+                            u.getZ() * v1.getX() - u.getX() * v1.getZ(),\n+                            u.getX() * v1.getY() - u.getY() * v1.getX());\n+    }\n \n-  }\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return v3.crossProduct(v2).normalize().scalarMultiply(v1Magnitude * v2Magnitude * FastMath.sin(FastMath.acos(rho)));\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: method crossProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}