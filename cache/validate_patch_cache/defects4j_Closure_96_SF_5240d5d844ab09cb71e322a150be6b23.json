{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  List<Node> arguments = call.children().subList(1, call.getChildCount());\n  List<Node> parameters = functionType.getParameters();\n  int argSize = arguments.size();\n  int paramSize = parameters.size();\n\n  if (!functionType.isVarArgs()) {\n    // Validate that the number of arguments match the number of parameters\n    if (argSize != paramSize) {\n      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(argSize), String.valueOf(paramSize));\n      throw new RuntimeException(\"Invalid argument count: \" + call);\n    }\n  } else {\n    // Validate that the minimum number of arguments are passed\n    int minArgs = functionType.getMinArguments();\n    if (argSize < minArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT_VAR_ARGS, validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(argSize), String.valueOf(minArgs));\n      throw new RuntimeException(\"Invalid argument count: \" + call);\n    }\n  }\n\n  // Validate that each argument matches the corresponding parameter\n  for (int i = 0; i < paramSize; i++) {\n    Node parameter = parameters.get(i);\n    Node argument = arguments.get(i);\n    validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, i + 1);\n  }\n\n  // Validate varargs overflow\n  if (functionType.isVarArgs() && argSize > paramSize) {\n    Node parameter = parameters.get(paramSize - 1);\n    JSType varArgType = parameter.getJSType();\n    for (int i = paramSize; i < argSize; i++) {\n      Node argument = arguments.get(i);\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), varArgType, call, i + 1);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b5fd3c0e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,48 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  List<Node> arguments = call.children().subList(1, call.getChildCount());\n+  List<Node> parameters = functionType.getParameters();\n+  int argSize = arguments.size();\n+  int paramSize = parameters.size();\n+\n+  if (!functionType.isVarArgs()) {\n+    // Validate that the number of arguments match the number of parameters\n+    if (argSize != paramSize) {\n+      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(argSize), String.valueOf(paramSize));\n+      throw new RuntimeException(\"Invalid argument count: \" + call);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n+  } else {\n+    // Validate that the minimum number of arguments are passed\n     int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (argSize < minArgs) {\n+      report(t, call, WRONG_ARGUMENT_COUNT_VAR_ARGS, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(argSize), String.valueOf(minArgs));\n+      throw new RuntimeException(\"Invalid argument count: \" + call);\n     }\n   }\n \n+  // Validate that each argument matches the corresponding parameter\n+  for (int i = 0; i < paramSize; i++) {\n+    Node parameter = parameters.get(i);\n+    Node argument = arguments.get(i);\n+    validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, i + 1);\n+  }\n+\n+  // Validate varargs overflow\n+  if (functionType.isVarArgs() && argSize > paramSize) {\n+    Node parameter = parameters.get(paramSize - 1);\n+    JSType varArgType = parameter.getJSType();\n+    for (int i = paramSize; i < argSize; i++) {\n+      Node argument = arguments.get(i);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), varArgType, call, i + 1);\n+    }\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}