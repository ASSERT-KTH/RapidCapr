{
    "patch": "if (hasFiniteBounds) {\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            hasInfiniteBounds = true;\n            break;\n        }\n    }\n\n    if (hasInfiniteBounds) {\n        // If there is at least one finite bound, none can be infinite,\n        // because mixed cases are not supported by the current code.\n        throw new MathUnsupportedOperationException();\n    } else if (!isNormalizable(lB, uB)) {\n        // Input boundaries are too large to be normalized.\n        throw new NumberIsTooLargeException(getBoundaryRange(lB, uB), 0, true);\n    } else {\n        // Convert API to internal handling of boundaries.\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n    }\n} else {\n    // Convert API to internal handling of boundaries.\n    boundaries = null;\n}\n\n...\n\nprivate boolean isNormalizable(double[] lB, double[] uB) {\n    for (int i = 0; i < lB.length; i++) {\n        double boundaryRange = uB[i] - lB[i];\n        if (Double.isInfinite(boundaryRange) || boundaryRange > MAX_NORMALIZED_BOUNDARY_RANGE) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate double getBoundaryRange(double[] lB, double[] uB) {\n    double maxBoundaryRange = Double.NEGATIVE_INFINITY;\n    for (int i = 0; i < lB.length; i++) {\n        double boundaryRange = uB[i] - lB[i];\n        if (boundaryRange > maxBoundaryRange) {\n            maxBoundaryRange = boundaryRange;\n        }\n    }\n    return maxBoundaryRange;\n}\n\nprivate static final double MAX_NORMALIZED_BOUNDARY_RANGE = Math.exp(704); // maximum representable double value",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..ae86dabde 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,56 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasFiniteBounds) {\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            hasInfiniteBounds = true;\n+            break;\n+        }\n+    }\n+\n+    if (hasInfiniteBounds) {\n+        // If there is at least one finite bound, none can be infinite,\n+        // because mixed cases are not supported by the current code.\n+        throw new MathUnsupportedOperationException();\n+    } else if (!isNormalizable(lB, uB)) {\n+        // Input boundaries are too large to be normalized.\n+        throw new NumberIsTooLargeException(getBoundaryRange(lB, uB), 0, true);\n+    } else {\n+        // Convert API to internal handling of boundaries.\n+        boundaries = new double[2][];\n+        boundaries[0] = lB;\n+        boundaries[1] = uB;\n+    }\n+} else {\n+    // Convert API to internal handling of boundaries.\n+    boundaries = null;\n+}\n+\n+...\n+\n+private boolean isNormalizable(double[] lB, double[] uB) {\n+    for (int i = 0; i < lB.length; i++) {\n+        double boundaryRange = uB[i] - lB[i];\n+        if (Double.isInfinite(boundaryRange) || boundaryRange > MAX_NORMALIZED_BOUNDARY_RANGE) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private double getBoundaryRange(double[] lB, double[] uB) {\n+    double maxBoundaryRange = Double.NEGATIVE_INFINITY;\n+    for (int i = 0; i < lB.length; i++) {\n+        double boundaryRange = uB[i] - lB[i];\n+        if (boundaryRange > maxBoundaryRange) {\n+            maxBoundaryRange = boundaryRange;\n+        }\n+    }\n+    return maxBoundaryRange;\n+}\n+\n+private static final double MAX_NORMALIZED_BOUNDARY_RANGE = Math.exp(704); // maximum representable double value\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}