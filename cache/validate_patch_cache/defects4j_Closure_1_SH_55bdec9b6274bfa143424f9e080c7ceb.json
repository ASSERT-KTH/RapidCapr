{
    "patch": "    Node function = NodeUtil.getEnclosingFunction(fusionRootNode);\n    if (function == null) {\n      return; // Unable to find function\n    }\n\n    Preconditions.checkState(function.isFunction());\n    \n    // Do not remove arguments from functions with rest params\n    if (NodeUtil.getFunctionRestParameters(function) != null) {\n      return;\n    }\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          Node nameNode = lastArg.removeFirstChild();\n\n          // Declare the variable within the function body so its references\n          // retain the same scope.\n          Node newVarNode = IR.var(nameNode.cloneTree());\n          newVarNode.setJSDocInfo(lastArg.getJSDocInfo());\n          Node newDeclNode = IR.declaration(newVarNode, lastArg.getType());\n          newDeclNode.useSourceInfoIfMissingFrom(lastArg);\n          function.getLastChild().addChildToFront(newDeclNode);\n          lastArg.detach();\n\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..dcb0890b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = NodeUtil.getEnclosingFunction(fusionRootNode);\n+    if (function == null) {\n+      return; // Unable to find function\n+    }\n+\n+    Preconditions.checkState(function.isFunction());\n+    \n+    // Do not remove arguments from functions with rest params\n+    if (NodeUtil.getFunctionRestParameters(function) != null) {\n+      return;\n+    }\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          Node nameNode = lastArg.removeFirstChild();\n+\n+          // Declare the variable within the function body so its references\n+          // retain the same scope.\n+          Node newVarNode = IR.var(nameNode.cloneTree());\n+          newVarNode.setJSDocInfo(lastArg.getJSDocInfo());\n+          Node newDeclNode = IR.declaration(newVarNode, lastArg.getType());\n+          newDeclNode.useSourceInfoIfMissingFrom(lastArg);\n+          function.getLastChild().addChildToFront(newDeclNode);\n+          lastArg.detach();\n+\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}