{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        if (child.getType() == Token.EXPR_RESULT) {\n          child = child.getFirstChild();\n          // If child is a FUNCTION with exactly one expression statement in the body,\n          // we can fold the EXPR_RESULT into that statement.\n          if (NodeUtil.isFunctionExpression(child)\n              && child.getLastChild().getType() == Token.BLOCK\n              && child.getLastChild().getChildCount() == 1\n              && child.getLastChild().getFirstChild().isExprResult()) {\n            return true;\n          }\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n          return NodeUtil.isExpressionNode(child);\n        }\n        return NodeUtil.isExpressionNode(child);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..956fd516 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -519,18 +519,26 @@ public class PeepholeSubstituteAlternateSyntax\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n+        Node child = n.getFirstChild();\n+        if (child.getType() == Token.EXPR_RESULT) {\n+          child = child.getFirstChild();\n+          // If child is a FUNCTION with exactly one expression statement in the body,\n+          // we can fold the EXPR_RESULT into that statement.\n+          if (NodeUtil.isFunctionExpression(child)\n+              && child.getLastChild().getType() == Token.BLOCK\n+              && child.getLastChild().getChildCount() == 1\n+              && child.getLastChild().getFirstChild().isExprResult()) {\n+            return true;\n+          }\n           // IE has a bug where event handlers behave differently when\n           // their return value is used vs. when their return value is in\n           // an EXPR_RESULT. It's pretty freaking weird. See:\n           // http://code.google.com/p/closure-compiler/issues/detail?id=291\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+          return NodeUtil.isExpressionNode(child);\n+        }\n+        return NodeUtil.isExpressionNode(child);\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}