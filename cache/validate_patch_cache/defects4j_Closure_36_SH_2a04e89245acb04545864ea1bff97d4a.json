{
    "patch": "if (value.isFunction()) {\n      Node callNode = reference.getParent();\n      if (reference.getParent().isCall()) {\n        CodingConvention convention = compiler.getCodingConvention();\n        // Bug 2388531: Don't inline subclass definitions into class defining\n        // calls as this confused class removing logic.\n        SubclassRelationship relationship =\n            convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n          return false;\n        }\n\n        // issue 668: Don't inline singleton getter methods\n        // calls as this confused class removing logic.\n        String className = convention.getSingletonGetterClassName(value);\n        if (className != null) {\n          // Make sure that the class is not removed.\n          // If it is, the method could later be inlined into\n          // another function that is in another scope and contains\n          // an inner class with the same name -- but not the same\n          // prototype.\n          if (compiler.getExteriorClassName(className) == null) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..acdb4c4a 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,28 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+      Node callNode = reference.getParent();\n+      if (reference.getParent().isCall()) {\n+        CodingConvention convention = compiler.getCodingConvention();\n+        // Bug 2388531: Don't inline subclass definitions into class defining\n+        // calls as this confused class removing logic.\n+        SubclassRelationship relationship =\n+            convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+          return false;\n+        }\n+\n+        // issue 668: Don't inline singleton getter methods\n+        // calls as this confused class removing logic.\n+        String className = convention.getSingletonGetterClassName(value);\n+        if (className != null) {\n+          // Make sure that the class is not removed.\n+          // If it is, the method could later be inlined into\n+          // another function that is in another scope and contains\n+          // an inner class with the same name -- but not the same\n+          // prototype.\n+          if (compiler.getExteriorClassName(className) == null) {\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}