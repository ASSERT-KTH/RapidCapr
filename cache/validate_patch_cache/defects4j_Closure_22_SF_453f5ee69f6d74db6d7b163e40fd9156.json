{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isComma() || n.isNew() || n.isCall() || n.getType() == Token.INC || n.getType() == Token.DEC) {\n    return;\n  }\n\n  if (isTypeScriptTypeAlias(n)) {\n    return;\n  }\n\n  switch (parent.getType()) {\n    case Token.COMMA:\n      if (n == parent.getLastChild()) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n          if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isString()\n              && n.getNext().getString().equals(\"eval\")) {\n            return;\n          }\n        }\n\n        // This no-op statement was there so that JSDoc information could\n        // be attached to the name. This check should not complain about it.\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n      return;\n\n    case Token.EXPR_RESULT:\n    case Token.BLOCK:\n      return;\n\n    case Token.FOR:\n      if (parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n        return;\n      }\n      break;\n\n    default:\n      if (NodeUtil.isValidStatement(n)) {\n        return;\n      }\n      break;\n  }\n\n  checkForUselessCode(t, n);\n}\n\n/**\n * @return Whether the given node represents a TypeScript type alias.\n */\nprivate static boolean isTypeScriptTypeAlias(Node n) {\n  if (!n.isVar()) {\n    return false;\n  }\n\n  Node value = n.getFirstChild().getFirstChild();\n  if (value == null) {\n    return false;\n  }\n\n  int statementType = value.getType();\n  return statementType == Token.TYPE_ALIAS_DECLARATION;\n}\n\n/**\n * Emits a warning if the given node lacks side-effects.\n *\n * @param t The traversal object.\n * @param n The node to check for side-effects.\n */\nprivate void checkForUselessCode(NodeTraversal t, Node n) {\n  if (NodeUtil.isExpressionAssignedTo(n)\n      || NodeUtil.mayHaveSideEffects(n, t.getCompiler())\n      || n.isFunction()\n      || NodeUtil.isLoopStructure(n)) {\n    return;\n  }\n\n  String msg = \"This code lacks side-effects. Is there a bug?\";\n  if (n.isString()) {\n    msg = \"Is there a missing '+' on the previous line?\";\n  } else if (NodeUtil.isSimpleOperator(n)\n      && !NodeUtil.isAssignmentOp(n)\n      && !NodeUtil.isComparisonOp(n)) {\n    msg = \"The result of the '\" + NodeUtil.opToStr(n) + \"' operator is not being used.\";\n  }\n\n  t.getCompiler()\n      .report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n  if (!NodeUtil.isStatement(n)) {\n    problemNodes.add(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..6e89809c 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,104 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isComma() || n.isNew() || n.isCall() || n.getType() == Token.INC || n.getType() == Token.DEC) {\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  if (isTypeScriptTypeAlias(n)) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+  switch (parent.getType()) {\n+    case Token.COMMA:\n+      if (n == parent.getLastChild()) {\n+        Node gramps = parent.getParent();\n+        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n+          if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isString()\n+              && n.getNext().getString().equals(\"eval\")) {\n+            return;\n+          }\n         }\n-    }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n+        // This no-op statement was there so that JSDoc information could\n+        // be attached to the name. This check should not complain about it.\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n       return;\n-      }\n-    }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n+    case Token.EXPR_RESULT:\n+    case Token.BLOCK:\n+      return;\n+\n+    case Token.FOR:\n+      if (parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n         return;\n       }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+      break;\n+\n+    default:\n+      if (NodeUtil.isValidStatement(n)) {\n+        return;\n       }\n+      break;\n+  }\n \n-      t.getCompiler().report(\n+  checkForUselessCode(t, n);\n+}\n+\n+/**\n+ * @return Whether the given node represents a TypeScript type alias.\n+ */\n+private static boolean isTypeScriptTypeAlias(Node n) {\n+  if (!n.isVar()) {\n+    return false;\n+  }\n+\n+  Node value = n.getFirstChild().getFirstChild();\n+  if (value == null) {\n+    return false;\n+  }\n+\n+  int statementType = value.getType();\n+  return statementType == Token.TYPE_ALIAS_DECLARATION;\n+}\n+\n+/**\n+ * Emits a warning if the given node lacks side-effects.\n+ *\n+ * @param t The traversal object.\n+ * @param n The node to check for side-effects.\n+ */\n+private void checkForUselessCode(NodeTraversal t, Node n) {\n+  if (NodeUtil.isExpressionAssignedTo(n)\n+      || NodeUtil.mayHaveSideEffects(n, t.getCompiler())\n+      || n.isFunction()\n+      || NodeUtil.isLoopStructure(n)) {\n+    return;\n+  }\n+\n+  String msg = \"This code lacks side-effects. Is there a bug?\";\n+  if (n.isString()) {\n+    msg = \"Is there a missing '+' on the previous line?\";\n+  } else if (NodeUtil.isSimpleOperator(n)\n+      && !NodeUtil.isAssignmentOp(n)\n+      && !NodeUtil.isComparisonOp(n)) {\n+    msg = \"The result of the '\" + NodeUtil.opToStr(n) + \"' operator is not being used.\";\n+  }\n+\n+  t.getCompiler()\n+      .report(\n           t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n-    }\n+  if (!NodeUtil.isStatement(n)) {\n+    problemNodes.add(n);\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}