{
    "patch": "if (finallyNode != null && finallyNode.getParent() == parent.getLastChild()) {\n    // If the finally block is the last child of parent, \n    // we don't need to create an edge from here to a follow node.\n    return null;\n}\nreturn computeFollowNode(fromNode, parent.getLastChild(), cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..6d071469 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,12 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode != null && finallyNode.getParent() == parent.getLastChild()) {\n+    // If the finally block is the last child of parent, \n+    // we don't need to create an edge from here to a follow node.\n+    return null;\n+}\n+return computeFollowNode(fromNode, parent.getLastChild(), cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}