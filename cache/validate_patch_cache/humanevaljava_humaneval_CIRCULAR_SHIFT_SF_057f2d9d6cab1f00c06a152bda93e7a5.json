{
    "patch": "public static String circular_shift(int x, int shift) {\n    String s = String.valueOf(x);\n\n    if (shift == 0 || shift == s.length()) {\n        return s;\n    }\n    \n    shift %= s.length(); // reduce shift value to stay within length of string\n\n    StringBuilder sb = new StringBuilder(s);\n    sb.reverse();\n    String reversed = sb.toString();\n\n    String firstPart = reversed.substring(0, shift);\n    String secondPart = reversed.substring(shift);\n\n    sb = new StringBuilder(firstPart);\n    sb.reverse();\n    String partialResult = sb.toString() + secondPart;\n\n    sb = new StringBuilder(partialResult);\n    sb.reverse();\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java b/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java\nindex 9131a1c..48f7dd5 100644\n--- a/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java\n+++ b/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java\n@@ -9,16 +9,28 @@ If shift > number of digits, return digits reversed.\n \"12\" */\n \n public class CIRCULAR_SHIFT {\n-    public static String circular_shift(int x, int shift) {\n-        String s = x + \"\";\n+public static String circular_shift(int x, int shift) {\n+    String s = String.valueOf(x);\n \n-        if (shift > s.length()) {\n-            StringBuilder sb = new StringBuilder();\n-            for (int i = s.length() - 1; i >= 0; i -= 1)\n-                sb.append(s.charAt(i));\n-            return sb.toString();\n-        } else {\n-            return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n-        }\n+    if (shift == 0 || shift == s.length()) {\n+        return s;\n     }\n+    \n+    shift %= s.length(); // reduce shift value to stay within length of string\n+\n+    StringBuilder sb = new StringBuilder(s);\n+    sb.reverse();\n+    String reversed = sb.toString();\n+\n+    String firstPart = reversed.substring(0, shift);\n+    String secondPart = reversed.substring(shift);\n+\n+    sb = new StringBuilder(firstPart);\n+    sb.reverse();\n+    String partialResult = sb.toString() + secondPart;\n+\n+    sb = new StringBuilder(partialResult);\n+    sb.reverse();\n+    return sb.toString();\n+}\n }",
    "result_reason": "   TEST_CIRCULAR_SHIFT.test_0:7 expected:<[100]> but was:<[001]>",
    "test_result": "FAIL"
}