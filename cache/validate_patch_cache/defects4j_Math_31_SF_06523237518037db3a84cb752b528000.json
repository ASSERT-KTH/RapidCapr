{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    final int maxPower = 5;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isNaN(cN) || Double.isNaN(q2) || Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            if(n == 1) {\n                throw new MathInternalError();\n            }\n\n            double scaleFactor = 1.0;\n            double lastScaleFactor = 1.0;\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            for (int i = 0; i < maxPower; ++i) {\n                lastScaleFactor = scaleFactor;\n                scaleFactor *= scale;\n                if (a != 0.0 && FastMath.abs(a) > FastMath.abs(b)) {\n                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                } else if (b != 0.0) {\n                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                }\n\n                if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                    continue;\n                }\n\n                if (FastMath.abs(cN) * maxPower < FastMath.abs(hN) * small && FastMath.abs(q2) * maxPower < small) {\n                    if (cN >= 0 && hN >= 0 || cN < 0 && hN < 0) {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                    } else {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);                  \n                    }\n                }\n\n                if (FastMath.abs(delta(hPrev, cN, p0, dPrev) - 1.0) < epsilon) {\n                    break;\n                }\n\n                cPrev = cN / q2;\n                hPrev = cN;\n                q1 = q2;\n                p0 = p0 / scaleFactor;\n                dPrev = dPrev / scaleFactor;\n                n++;\n\n                break;\n            }\n\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                if (b * dPrev >= a * q1 && FastMath.abs(dPrev) > FastMath.abs(q1)) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                } else if (FastMath.abs(q2) < small) {\n                    if (cN >= 0 && hN >= 0 || cN < 0 && hN < 0) {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                    } else {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);                    \n                    }\n                }\n            } else if (FastMath.abs(delta(hPrev, cN, p0, dPrev) - 1.0) < epsilon) {\n                cPrev = cN / q2;\n                hPrev = cN;\n                q1 = q2;\n                p0 = p0 / scaleFactor;\n                dPrev = dPrev / scaleFactor;\n                n++;\n            } else {\n                cPrev = cN / q2;\n                hPrev = cN;\n                q1 = q2;\n                p0 = p0 / scaleFactor;\n                dPrev = dPrev / scaleFactor;\n                n++;\n            }\n        } else {\n            if (FastMath.abs(delta(hPrev, cN, p0, dPrev) - 1.0) < epsilon) {\n                break;\n            }\n\n            cPrev = cN / q2;\n            hPrev = cN;\n            q1 = q2;\n            p0 = p0 / scale(cPrev);\n            dPrev = dPrev / scale(cPrev);\n            n++;\n        }\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                maxIterations, x);\n    }\n    return hN;\n}\n\n/**\n * Computes the scaling factor for the numerator and denominator of the continued fraction.\n */\nprivate double scale(double number) {\n    if (number == 0.0) {\n        return 1.0;\n    }\n\n    double scaleFactor = 1.0;\n    while (FastMath.abs(number) * scaleFactor < 1e-10 || FastMath.abs(number) * scaleFactor > 1e10) {\n        if (number >= 0) {\n            scaleFactor *= 10;\n        } else {\n            scaleFactor /= 10;\n        }\n    }\n\n    return scaleFactor;\n}\n\n/**\n * Computes the new delta for each iteration.\n */\nprivate double delta(double hPrev, double cN, double p0, double dPrev) {\n    final double deltaN = cN / (a * q1 + b * dPrev) / cPrev;\n    return hPrev / cPrev * (p0 / q1) * deltaN * dPrev;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..ae4a15649 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,147 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    final int maxPower = 5;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n \n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n \n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+\n+        if (Double.isNaN(cN) || Double.isNaN(q2) || Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+            if(n == 1) {\n+                throw new MathInternalError();\n+            }\n+\n+            double scaleFactor = 1.0;\n+            double lastScaleFactor = 1.0;\n+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+            for (int i = 0; i < maxPower; ++i) {\n+                lastScaleFactor = scaleFactor;\n+                scaleFactor *= scale;\n+                if (a != 0.0 && FastMath.abs(a) > FastMath.abs(b)) {\n+                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                } else if (b != 0.0) {\n+                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                 }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n+\n+                if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                    continue;\n+                }\n+\n+                if (FastMath.abs(cN) * maxPower < FastMath.abs(hN) * small && FastMath.abs(q2) * maxPower < small) {\n+                    if (cN >= 0 && hN >= 0 || cN < 0 && hN < 0) {\n+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                    } else {\n+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);                  \n                     }\n                 }\n-            }\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+                if (FastMath.abs(delta(hPrev, cN, p0, dPrev) - 1.0) < epsilon) {\n+                    break;\n+                }\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                cPrev = cN / q2;\n+                hPrev = cN;\n+                q1 = q2;\n+                p0 = p0 / scaleFactor;\n+                dPrev = dPrev / scaleFactor;\n+                n++;\n+\n+                break;\n             }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                if (b * dPrev >= a * q1 && FastMath.abs(dPrev) > FastMath.abs(q1)) {\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                } else if (FastMath.abs(q2) < small) {\n+                    if (cN >= 0 && hN >= 0 || cN < 0 && hN < 0) {\n+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                    } else {\n+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);                    \n+                    }\n+                }\n+            } else if (FastMath.abs(delta(hPrev, cN, p0, dPrev) - 1.0) < epsilon) {\n+                cPrev = cN / q2;\n+                hPrev = cN;\n+                q1 = q2;\n+                p0 = p0 / scaleFactor;\n+                dPrev = dPrev / scaleFactor;\n+                n++;\n+            } else {\n+                cPrev = cN / q2;\n+                hPrev = cN;\n+                q1 = q2;\n+                p0 = p0 / scaleFactor;\n+                dPrev = dPrev / scaleFactor;\n+                n++;\n+            }\n+        } else {\n+            if (FastMath.abs(delta(hPrev, cN, p0, dPrev) - 1.0) < epsilon) {\n                 break;\n             }\n \n-            dPrev = q1;\n             cPrev = cN / q2;\n-            p0 = hPrev;\n             hPrev = cN;\n             q1 = q2;\n+            p0 = p0 / scale(cPrev);\n+            dPrev = dPrev / scale(cPrev);\n             n++;\n         }\n+    }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n-        }\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                maxIterations, x);\n+    }\n+    return hN;\n+}\n+\n+/**\n+ * Computes the scaling factor for the numerator and denominator of the continued fraction.\n+ */\n+private double scale(double number) {\n+    if (number == 0.0) {\n+        return 1.0;\n+    }\n \n-        return hN;\n+    double scaleFactor = 1.0;\n+    while (FastMath.abs(number) * scaleFactor < 1e-10 || FastMath.abs(number) * scaleFactor > 1e10) {\n+        if (number >= 0) {\n+            scaleFactor *= 10;\n+        } else {\n+            scaleFactor /= 10;\n+        }\n     }\n \n+    return scaleFactor;\n+}\n+\n+/**\n+ * Computes the new delta for each iteration.\n+ */\n+private double delta(double hPrev, double cN, double p0, double dPrev) {\n+    final double deltaN = cN / (a * q1 + b * dPrev) / cPrev;\n+    return hPrev / cPrev * (p0 / q1) * deltaN * dPrev;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}