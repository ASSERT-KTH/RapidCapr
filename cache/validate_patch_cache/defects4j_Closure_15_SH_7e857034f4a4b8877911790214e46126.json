{
    "patch": "        // where the function returns (possibly without a return statement)\n        if (n == null) {\n          return false;\n        }\n\n        if (NodeUtil.isCallOrNew(n)) {\n          // We care about calls to functions that potentially modify dependent variables.\n          if (NodeUtil.functionCallHasSideEffects(n)) {\n            return true;\n          }\n          // We also care about non side-effect free function expressions that potentially modify\n          // dependent variables.\n          if (NodeUtil.isFunctionExpression(n.getFirstChild()) && !NodeUtil.isImmutableResult(n.getFirstChild())) {\n            return true;\n          }\n        }\n\n        // Handle the 'delete' operation\n        if (n.isDelProp()) {\n          return true;\n        }\n        // Handle expressions that delete properties\n        if (n.isExprResult() && n.getFirstChild().isGetProp() && n.getFirstChild().getNext().getString().equals(\"delete\")) {\n          return true;\n        }\n\n        // Recurse on child nodes",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..fe219bc5 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,33 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // where the function returns (possibly without a return statement)\n+        if (n == null) {\n+          return false;\n+        }\n+\n+        if (NodeUtil.isCallOrNew(n)) {\n+          // We care about calls to functions that potentially modify dependent variables.\n+          if (NodeUtil.functionCallHasSideEffects(n)) {\n+            return true;\n+          }\n+          // We also care about non side-effect free function expressions that potentially modify\n+          // dependent variables.\n+          if (NodeUtil.isFunctionExpression(n.getFirstChild()) && !NodeUtil.isImmutableResult(n.getFirstChild())) {\n+            return true;\n+          }\n+        }\n+\n+        // Handle the 'delete' operation\n+        if (n.isDelProp()) {\n+          return true;\n+        }\n+        // Handle expressions that delete properties\n+        if (n.isExprResult() && n.getFirstChild().isGetProp() && n.getFirstChild().getNext().getString().equals(\"delete\")) {\n+          return true;\n+        }\n+\n+        // Recurse on child nodes\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}