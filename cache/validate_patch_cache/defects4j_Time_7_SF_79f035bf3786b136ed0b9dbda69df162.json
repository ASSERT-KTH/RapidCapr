{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n        long adjustedInstantMillis = instantMillis + zone.getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(adjustedInstantMillis);\n        int actualZoneOffset = zone.getOffset(adjustedInstantMillis);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            adjustedInstantMillis - actualZoneOffset, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        int newOffsetMillis = actualZoneOffset;\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            newOffsetMillis = bucket.getOffsetInteger().intValue();\n            zone = DateTimeZone.forOffsetMillis(newOffsetMillis);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            if (zone != DateTimeZone.UTC && zone != zone.getFixedDateTimeZone()) {\n                chrono = chrono.withZone(zone);\n            }\n        }\n        instant.setMillis(bucket.computeMillis(true, text) + newOffsetMillis);\n        instant.setChronology(chrono.withZone(zone));\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..457517b3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -705,22 +705,27 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        DateTimeZone zone = chrono.getZone();\n+        long adjustedInstantMillis = instantMillis + zone.getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        int defaultYear = chrono.year().get(adjustedInstantMillis);\n+        int actualZoneOffset = zone.getOffset(adjustedInstantMillis);\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            adjustedInstantMillis - actualZoneOffset, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        int newOffsetMillis = actualZoneOffset;\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            newOffsetMillis = bucket.getOffsetInteger().intValue();\n+            zone = DateTimeZone.forOffsetMillis(newOffsetMillis);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n+            if (zone != DateTimeZone.UTC && zone != zone.getFixedDateTimeZone()) {\n+                chrono = chrono.withZone(zone);\n+            }\n         }\n-        instant.setChronology(chrono);\n+        instant.setMillis(bucket.computeMillis(true, text) + newOffsetMillis);\n+        instant.setChronology(chrono.withZone(zone));\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}