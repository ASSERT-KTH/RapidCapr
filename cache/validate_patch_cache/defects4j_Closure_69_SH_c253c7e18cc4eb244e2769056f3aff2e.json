{
    "patch": "if (functionJSDocInfo != null && functionJSDocInfo.getThisType() != null\n          && (n.getParent().isGetElem() || n.getParent().isGetProp())) {\n        JSType thisType = getJSType(n.getParent().getFirstChild()).getGreatestSubtype(\n            functionJSDocInfo.getThisType().evaluate(scope, typeRegistry));\n        if (!thisType.isSubtypeOf(functionType.getTypeOfThis())) {\n          report(t, n, INVALID_THIS_TYPE, thisType.toString(), functionType.getTypeOfThis());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..749fc3b9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionJSDocInfo != null && functionJSDocInfo.getThisType() != null\n+          && (n.getParent().isGetElem() || n.getParent().isGetProp())) {\n+        JSType thisType = getJSType(n.getParent().getFirstChild()).getGreatestSubtype(\n+            functionJSDocInfo.getThisType().evaluate(scope, typeRegistry));\n+        if (!thisType.isSubtypeOf(functionType.getTypeOfThis())) {\n+          report(t, n, INVALID_THIS_TYPE, thisType.toString(), functionType.getTypeOfThis());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}