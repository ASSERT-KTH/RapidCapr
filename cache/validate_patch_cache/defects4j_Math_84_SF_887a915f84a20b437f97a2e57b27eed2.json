{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = computeNewSimplex(original, expanded, comparator);\n                }\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = computeNewSimplex(original, contracted, comparator);\n            } else {\n                // perform a one-dimensional contraction\n                final RealPointValuePair[] contractedSimplex = simplex;\n                final RealPointValuePair[] newSimplex = contractInside(original, comparator);\n                if (comparator.compare(newSimplex[newSimplex.length - 1], contractedSimplex[0]) < 0) {\n                    simplex = newSimplex;\n                } else {\n                    simplex = contract(original, comparator);\n                }\n            }\n\n            // check convergence\n            if (checker != null &&\n                simplex[0].getValue() != lastResult &&\n                checker.converged(getIterations(), original, simplex)) {\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..42d5ec4e9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,8 +79,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the expanded simplex\n+                    simplex = computeNewSimplex(original, expanded, comparator);\n                 }\n-\n                 return;\n \n             }\n@@ -89,8 +91,22 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = computeNewSimplex(original, contracted, comparator);\n+            } else {\n+                // perform a one-dimensional contraction\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                final RealPointValuePair[] newSimplex = contractInside(original, comparator);\n+                if (comparator.compare(newSimplex[newSimplex.length - 1], contractedSimplex[0]) < 0) {\n+                    simplex = newSimplex;\n+                } else {\n+                    simplex = contract(original, comparator);\n+                }\n+            }\n \n             // check convergence\n+            if (checker != null &&\n+                simplex[0].getValue() != lastResult &&\n+                checker.converged(getIterations(), original, simplex)) {\n                 return;\n             }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}