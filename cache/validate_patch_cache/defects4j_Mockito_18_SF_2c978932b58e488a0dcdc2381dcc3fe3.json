{
    "patch": "public static <T> ReturnValue<T> defaultFor(Class<T> type) {\n    if(type.equals(Boolean.TYPE)) {\n        return new ReturnValue<>(false);\n    } else if(type.isPrimitive()) {\n        return new ReturnValue<>(0);\n    } else if(type.equals(Void.TYPE)) {\n        return new ReturnValue<>(null);\n    } else {\n        return new ReturnValue<>(null);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..083d0070b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> defaultFor(Class<T> type) {\n+    if(type.equals(Boolean.TYPE)) {\n+        return new ReturnValue<>(false);\n+    } else if(type.isPrimitive()) {\n+        return new ReturnValue<>(0);\n+    } else if(type.equals(Void.TYPE)) {\n+        return new ReturnValue<>(null);\n+    } else {\n+        return new ReturnValue<>(null);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}