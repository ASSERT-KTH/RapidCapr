{
    "patch": "public double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    TypeToken<ArrayList<JsonObject>> token = new TypeToken<ArrayList<JsonObject>>() {};\n    ArrayList<JsonObject> list = gson.fromJson(json, token.getType());\n    int count = 0;\n    for (JsonObject obj : list) {\n        if (obj.get(\"type\").getAsString().equals(\"typed\")) {\n            count++;\n        }\n    }\n    return ((double) count / list.size()) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..64cd33c3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    TypeToken<ArrayList<JsonObject>> token = new TypeToken<ArrayList<JsonObject>>() {};\n+    ArrayList<JsonObject> list = gson.fromJson(json, token.getType());\n+    int count = 0;\n+    for (JsonObject obj : list) {\n+        if (obj.get(\"type\").getAsString().equals(\"typed\")) {\n+            count++;\n+        }\n+    }\n+    return ((double) count / list.size()) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}