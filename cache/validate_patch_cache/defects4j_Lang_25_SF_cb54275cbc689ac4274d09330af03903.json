{
    "patch": "public static String unescapeISO8859_1(final String input) {\n    final StringBuilder result = new StringBuilder(input.length());\n    int i = 0;\n    while (i < input.length()) {\n        char next = input.charAt(i++);\n        if (next == '\\\\') {\n            if (i < input.length() && input.charAt(i) == 'x') {\n                // Decode hex value\n                ++i;\n                if (i + 1 < input.length()) {\n                    try {\n                        int value = Integer.parseInt(input.substring(i, i + 2), 16);\n                        result.append((char) value);\n                        i += 2;\n                        continue;\n                    } catch (NumberFormatException ignored) {\n                    }\n                }\n            } else if (i < input.length()) {\n                // Decode octal value\n                char value = 0;\n                int digits = 0;\n                while (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7' && digits < 3) {\n                    value = (char) ((value << 3) + (input.charAt(i++) - '0'));\n                    ++digits;\n                }\n                result.append(value);\n                continue;\n            }\n        }\n        result.append(next);\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5c4c6af3 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,40 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeISO8859_1(final String input) {\n+    final StringBuilder result = new StringBuilder(input.length());\n+    int i = 0;\n+    while (i < input.length()) {\n+        char next = input.charAt(i++);\n+        if (next == '\\\\') {\n+            if (i < input.length() && input.charAt(i) == 'x') {\n+                // Decode hex value\n+                ++i;\n+                if (i + 1 < input.length()) {\n+                    try {\n+                        int value = Integer.parseInt(input.substring(i, i + 2), 16);\n+                        result.append((char) value);\n+                        i += 2;\n+                        continue;\n+                    } catch (NumberFormatException ignored) {\n+                    }\n+                }\n+            } else if (i < input.length()) {\n+                // Decode octal value\n+                char value = 0;\n+                int digits = 0;\n+                while (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7' && digits < 3) {\n+                    value = (char) ((value << 3) + (input.charAt(i++) - '0'));\n+                    ++digits;\n+                }\n+                result.append(value);\n+                continue;\n+            }\n+        }\n+        result.append(next);\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}