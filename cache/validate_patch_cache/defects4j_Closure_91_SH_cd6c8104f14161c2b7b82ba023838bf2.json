{
    "patch": "      if (n.getParent().getType() == Token.ASSIGN) {\n        Node lhs = n.getParent().getFirstChild();\n        Node rhs = lhs.getNext();\n        boolean isPrototypeAssignment = NodeUtil.isGet(lhs) &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n        if (isPrototypeAssignment) {\n          return false;\n        }\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Don't traverse function expressions that are not assigned to a variable.\n          Node nameNode = NodeUtil.getNameNode(lhs);\n          if (nameNode == null || nameNode.getType() != Token.NAME) {\n            return false;\n          }\n          Var var = t.getScope().getVar(nameNode.getString());\n          if (var == null) {\n            return false;\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..148cd6d9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,36 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent().getType() == Token.ASSIGN) {\n+        Node lhs = n.getParent().getFirstChild();\n+        Node rhs = lhs.getNext();\n+        boolean isPrototypeAssignment = NodeUtil.isGet(lhs) &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+        if (isPrototypeAssignment) {\n+          return false;\n+        }\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Don't traverse function expressions that are not assigned to a variable.\n+          Node nameNode = NodeUtil.getNameNode(lhs);\n+          if (nameNode == null || nameNode.getType() != Token.NAME) {\n+            return false;\n+          }\n+          Var var = t.getScope().getVar(nameNode.getString());\n+          if (var == null) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}