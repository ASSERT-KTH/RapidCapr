{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int[] result = {0, 0, 0, 0, 0, 0, 0};\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                result[i] = values[i];\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            if (fieldIndex < 0 || fieldIndex >= result.length) {\n                throw new IndexOutOfBoundsException(\"Invalid index: \" + fieldIndex);\n            }\n            if (valueToAdd != 0) {\n                int[] work = new int[8];\n                if (fieldIndex == 0) {\n                    iChronology.getDateTimeMillis(result[0] + valueToAdd, result[1], result[2], result[3], result[4], result[5], result[6], work);\n                } else if (fieldIndex == 1) {\n                    iChronology.getDateTimeMillis(result[0], result[1] + valueToAdd, result[2], result[3], result[4], result[5], result[6], work);\n                } else {\n                    datetimeToMillis(result[0], result[1], result[2], result[3], result[4], result[5], result[6], 0);\n                    long durationField = partial.getFieldType(fieldIndex).getField(iChronology).getDurationField().getUnitMillis();\n                    long valueField = (long)valueToAdd * durationField;\n                    instant = FieldUtils.safeAdd(instant, valueField);\n                    iChronology.get(partial, instant);\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..89aafc20 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            int[] result = {0, 0, 0, 0, 0, 0, 0};\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                result[i] = values[i];\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            if (fieldIndex < 0 || fieldIndex >= result.length) {\n+                throw new IndexOutOfBoundsException(\"Invalid index: \" + fieldIndex);\n+            }\n+            if (valueToAdd != 0) {\n+                int[] work = new int[8];\n+                if (fieldIndex == 0) {\n+                    iChronology.getDateTimeMillis(result[0] + valueToAdd, result[1], result[2], result[3], result[4], result[5], result[6], work);\n+                } else if (fieldIndex == 1) {\n+                    iChronology.getDateTimeMillis(result[0], result[1] + valueToAdd, result[2], result[3], result[4], result[5], result[6], work);\n+                } else {\n+                    datetimeToMillis(result[0], result[1], result[2], result[3], result[4], result[5], result[6], 0);\n+                    long durationField = partial.getFieldType(fieldIndex).getField(iChronology).getDurationField().getUnitMillis();\n+                    long valueField = (long)valueToAdd * durationField;\n+                    instant = FieldUtils.safeAdd(instant, valueField);\n+                    iChronology.get(partial, instant);\n+                }\n+            }\n+            return result;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: no suitable method found for getDateTimeMillis(int,int,int,int,int,int,int,int[])",
    "test_result": "ERROR"
}