{
    "patch": "public String fixCode(String code) {\n    int index = code.indexOf(\"for(\");\n    if (index == -1) {\n        return code; // for loop not found\n    }\n    int openParenthesis = index + 3; // skip \"for\" keyword and \"(\"\n    int closeParenthesis = findMatchingClosingParenthesis(code, openParenthesis);\n    int firstSemicolon = code.indexOf(';', openParenthesis);\n    int secondSemicolon = code.indexOf(';', firstSemicolon + 1);\n    int inKeyword = code.indexOf(\"in\", firstSemicolon);\n    int openBracket = code.indexOf('[', firstSemicolon);\n    int closeBracket = code.indexOf(']', firstSemicolon);\n    if (inKeyword != -1 && inKeyword < secondSemicolon && (openBracket == -1 || inKeyword < openBracket || inKeyword > closeBracket)) {\n        // \"in\" operator is being used in a for loop\n        String before = code.substring(openParenthesis, firstSemicolon + 1);\n        String after = code.substring(secondSemicolon);\n        String inOperator = code.substring(firstSemicolon + 1, secondSemicolon);\n        String collection = code.substring(openBracket, closeBracket + 1);\n        String fixedInOperator = inOperator.replace(\"in\", \":\");\n        String fixedCollection = \"ObjectUtils.defaultIfNull((java.util.Collection)\" + collection + \", java.util.Collections.emptyList())\";\n        String fixedForLoop = \"for(Object \" + before + fixedCollection + \"){\\n\" + after + \"\\n}\";\n        return code.substring(0, index) + fixedForLoop + fixCode(code.substring(closeParenthesis + 1));\n    } else {\n        // no \"in\" operator found or \"in\" operator is not being used in a for loop\n        return code.substring(0, openParenthesis) + fixCode(code.substring(openParenthesis, closeParenthesis + 1)) + fixCode(code.substring(closeParenthesis + 1));\n    }\n}\n\nprivate int findMatchingClosingParenthesis(String s, int startIndex) {\n    int count = 1;\n    for (int i = startIndex; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == '(') {\n            count++;\n        } else if (c == ')') {\n            count--;\n        }\n        if (count == 0) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..3e735fcd 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,49 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    int index = code.indexOf(\"for(\");\n+    if (index == -1) {\n+        return code; // for loop not found\n+    }\n+    int openParenthesis = index + 3; // skip \"for\" keyword and \"(\"\n+    int closeParenthesis = findMatchingClosingParenthesis(code, openParenthesis);\n+    int firstSemicolon = code.indexOf(';', openParenthesis);\n+    int secondSemicolon = code.indexOf(';', firstSemicolon + 1);\n+    int inKeyword = code.indexOf(\"in\", firstSemicolon);\n+    int openBracket = code.indexOf('[', firstSemicolon);\n+    int closeBracket = code.indexOf(']', firstSemicolon);\n+    if (inKeyword != -1 && inKeyword < secondSemicolon && (openBracket == -1 || inKeyword < openBracket || inKeyword > closeBracket)) {\n+        // \"in\" operator is being used in a for loop\n+        String before = code.substring(openParenthesis, firstSemicolon + 1);\n+        String after = code.substring(secondSemicolon);\n+        String inOperator = code.substring(firstSemicolon + 1, secondSemicolon);\n+        String collection = code.substring(openBracket, closeBracket + 1);\n+        String fixedInOperator = inOperator.replace(\"in\", \":\");\n+        String fixedCollection = \"ObjectUtils.defaultIfNull((java.util.Collection)\" + collection + \", java.util.Collections.emptyList())\";\n+        String fixedForLoop = \"for(Object \" + before + fixedCollection + \"){\\n\" + after + \"\\n}\";\n+        return code.substring(0, index) + fixedForLoop + fixCode(code.substring(closeParenthesis + 1));\n+    } else {\n+        // no \"in\" operator found or \"in\" operator is not being used in a for loop\n+        return code.substring(0, openParenthesis) + fixCode(code.substring(openParenthesis, closeParenthesis + 1)) + fixCode(code.substring(closeParenthesis + 1));\n+    }\n+}\n+\n+private int findMatchingClosingParenthesis(String s, int startIndex) {\n+    int count = 1;\n+    for (int i = startIndex; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        if (c == '(') {\n+            count++;\n+        } else if (c == ')') {\n+            count--;\n+        }\n+        if (count == 0) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}