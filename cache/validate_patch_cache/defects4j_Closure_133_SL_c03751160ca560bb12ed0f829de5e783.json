{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null || result.isBlank()) { // check if result is null or blank\n        return null;\n    }\n    return result;\n}\n\npublic JsDocInfo parseJsDoc() {\n    String remainingJSDocLine = getRemainingJSDocLine();\n    if (remainingJSDocLine == null)\n        return null;\n\n    try {\n        JsDocInfo jsdoc = jsdocParser.parseJsDoc(remainingJSDocLine);\n        return jsdoc;\n    } catch (TypeParseError e) {\n        warningCollector.add(JSError.make(JSC_TYPE_PARSE_ERROR, e.getMessage()));\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..53129bb4 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,27 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null || result.isBlank()) { // check if result is null or blank\n+        return null;\n+    }\n+    return result;\n+}\n+\n+public JsDocInfo parseJsDoc() {\n+    String remainingJSDocLine = getRemainingJSDocLine();\n+    if (remainingJSDocLine == null)\n+        return null;\n+\n+    try {\n+        JsDocInfo jsdoc = jsdocParser.parseJsDoc(remainingJSDocLine);\n+        return jsdoc;\n+    } catch (TypeParseError e) {\n+        warningCollector.add(JSError.make(JSC_TYPE_PARSE_ERROR, e.getMessage()));\n+        return null;\n+    }\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}