{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  JSType resolvedType;\n  boolean resolved;\n  boolean implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n  while (true) {\n    resolved = resolveViaRegistry(t, enclosing);\n    if(!resolved) {\n      resolveViaProperties(t, enclosing);\n      resolved = resolveViaRegistry(t, enclosing);\n    }\n\n    super.resolveInternal(t, enclosing);\n\n    if (isResolved()) {\n      finishPropertyContinuations();\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n      break;\n    }\n\n    if (implicitPrototypeCycleDetected) {\n      handleTypeCycle(t);\n      implicitPrototypeCycleDetected = false;\n      continue;\n    }\n\n    implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n  }\n\n  return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..0e9bdbaa 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,37 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  JSType resolvedType;\n+  boolean resolved;\n+  boolean implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n+  while (true) {\n+    resolved = resolveViaRegistry(t, enclosing);\n+    if(!resolved) {\n+      resolveViaProperties(t, enclosing);\n+      resolved = resolveViaRegistry(t, enclosing);\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+    super.resolveInternal(t, enclosing);\n+\n+    if (isResolved()) {\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+      break;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (implicitPrototypeCycleDetected) {\n       handleTypeCycle(t);\n+      implicitPrototypeCycleDetected = false;\n+      continue;\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    implicitPrototypeCycleDetected = detectImplicitPrototypeCycle();\n   }\n \n+  return resolvedType;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}