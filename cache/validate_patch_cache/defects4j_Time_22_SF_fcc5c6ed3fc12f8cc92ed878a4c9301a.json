{
    "patch": "    protected BasePeriod(long duration) {\n        this(duration, PeriodType.standard());\n    }\n\n    protected BasePeriod(long duration, PeriodType type) {\n        super();\n        iType = type;\n        iValues = new int[type.size()];\n        iIsSet = new boolean[type.size()];\n\n        // break the duration down into fields\n        int totalMillis = 0;\n        for (int i = 0; i < iValues.length; i++) {\n            int value = type.getFieldType(i).getDurationType().getMillis(duration);\n            iValues[i] = value;\n            iIsSet[i] = (value != 0);\n            totalMillis += value;\n            duration -= value;\n        }\n        // if something's left over, divide it among the fields\n        if (duration != 0) {\n            for (int i = 0; i < iValues.length && totalMillis != 0; i++) {\n                DurationField field = type.getFieldType(i).getDurationType();\n                long dur = (long) iValues[i] * totalMillis / duration;\n                iValues[i] = (int) dur;\n                iIsSet[i] = (dur != 0);\n                totalMillis -= field.getMillis(iValues[i]);\n                duration -= dur;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..cec3272a 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,35 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        this(duration, PeriodType.standard());\n+    }\n+\n+    protected BasePeriod(long duration, PeriodType type) {\n+        super();\n+        iType = type;\n+        iValues = new int[type.size()];\n+        iIsSet = new boolean[type.size()];\n+\n+        // break the duration down into fields\n+        int totalMillis = 0;\n+        for (int i = 0; i < iValues.length; i++) {\n+            int value = type.getFieldType(i).getDurationType().getMillis(duration);\n+            iValues[i] = value;\n+            iIsSet[i] = (value != 0);\n+            totalMillis += value;\n+            duration -= value;\n+        }\n+        // if something's left over, divide it among the fields\n+        if (duration != 0) {\n+            for (int i = 0; i < iValues.length && totalMillis != 0; i++) {\n+                DurationField field = type.getFieldType(i).getDurationType();\n+                long dur = (long) iValues[i] * totalMillis / duration;\n+                iValues[i] = (int) dur;\n+                iIsSet[i] = (dur != 0);\n+                totalMillis -= field.getMillis(iValues[i]);\n+                duration -= dur;\n+            }\n+        }\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}