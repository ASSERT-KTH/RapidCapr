{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable typeVariable) {\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n        Type genericSuperClass = declaringClass.getGenericSuperclass();\n        if (genericSuperClass instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) genericSuperClass;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = declaringClass.getSuperclass().getTypeParameters();\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                Type type = actualTypeArguments[i];\n                if (type instanceof TypeVariable<?>) {\n                    TypeVariable<?> typeVariable1 = (TypeVariable<?>) type;\n                    if (typeVariable1.getName().equals(typeVariable.getName()) &&\n                            typeVariable1.getGenericDeclaration().equals(typeVariable.getGenericDeclaration())) {\n                        return actualTypeArguments[i];\n                    }\n                } else if (type instanceof Class<?>) {\n                    Class<?> clazz = (Class<?>) type;\n                    if (clazz.getName().equals(typeVariable.getName())) {\n                        return actualTypeArguments[i];\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6ec5c291a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable typeVariable) {\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n+        Type genericSuperClass = declaringClass.getGenericSuperclass();\n+        if (genericSuperClass instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) genericSuperClass;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = declaringClass.getSuperclass().getTypeParameters();\n+            for (int i = 0; i < actualTypeArguments.length; i++) {\n+                Type type = actualTypeArguments[i];\n+                if (type instanceof TypeVariable<?>) {\n+                    TypeVariable<?> typeVariable1 = (TypeVariable<?>) type;\n+                    if (typeVariable1.getName().equals(typeVariable.getName()) &&\n+                            typeVariable1.getGenericDeclaration().equals(typeVariable.getGenericDeclaration())) {\n+                        return actualTypeArguments[i];\n+                    }\n+                } else if (type instanceof Class<?>) {\n+                    Class<?> clazz = (Class<?>) type;\n+                    if (clazz.getName().equals(typeVariable.getName())) {\n+                        return actualTypeArguments[i];\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}