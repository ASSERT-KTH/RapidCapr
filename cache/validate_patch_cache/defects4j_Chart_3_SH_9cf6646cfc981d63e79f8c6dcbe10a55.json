{
    "patch": "        if (this.data.isEmpty()) {\n            copy.data = new ArrayList();\n            copy.minY = Double.NaN;\n            copy.maxY = Double.NaN;\n        } else if (start >= this.data.size() || end < 0) {\n            copy.data = new ArrayList();\n            copy.minY = Double.POSITIVE_INFINITY;\n            copy.maxY = Double.NEGATIVE_INFINITY;\n        } else {\n            copy.data = new ArrayList();\n            copy.minY = Double.POSITIVE_INFINITY;\n            copy.maxY = Double.NEGATIVE_INFINITY;\n            for (int index = start; index <= end && index < this.data.size(); index++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                    double y = clone.getValue().doubleValue();\n                    if (Double.isNaN(y)) {\n                        continue;\n                    }\n                    if (y > copy.maxY) {\n                        copy.maxY = y;\n                    }\n                    if (y < copy.minY) {\n                        copy.minY = y;\n                    }\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (copy.data.isEmpty()) {\n                copy.minY = Double.NaN;\n                copy.maxY = Double.NaN;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..53776a0 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,40 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        if (this.data.isEmpty()) {\n+            copy.data = new ArrayList();\n+            copy.minY = Double.NaN;\n+            copy.maxY = Double.NaN;\n+        } else if (start >= this.data.size() || end < 0) {\n+            copy.data = new ArrayList();\n+            copy.minY = Double.POSITIVE_INFINITY;\n+            copy.maxY = Double.NEGATIVE_INFINITY;\n+        } else {\n+            copy.data = new ArrayList();\n+            copy.minY = Double.POSITIVE_INFINITY;\n+            copy.maxY = Double.NEGATIVE_INFINITY;\n+            for (int index = start; index <= end && index < this.data.size(); index++) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                    double y = clone.getValue().doubleValue();\n+                    if (Double.isNaN(y)) {\n+                        continue;\n+                    }\n+                    if (y > copy.maxY) {\n+                        copy.maxY = y;\n+                    }\n+                    if (y < copy.minY) {\n+                        copy.minY = y;\n+                    }\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+            if (copy.data.isEmpty()) {\n+                copy.minY = Double.NaN;\n+                copy.maxY = Double.NaN;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}