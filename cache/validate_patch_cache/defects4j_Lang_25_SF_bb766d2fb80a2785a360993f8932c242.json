{
    "patch": "public static String decode(String input) {\n    StringBuffer output = new StringBuffer();\n    for(int i=0;i<input.length();) {\n        char ch = input.charAt(i);\n        if(ch == '+') {\n            output.append(' ');\n            i++;\n        } else if(ch == '%') {\n            if(i+2<input.length()) {\n                int hex = Integer.parseInt(input.substring(i+1,i+3),16);\n                output.append((char)hex);\n                i += 3;\n            } else {\n                throw new IllegalArgumentException(\"Invalid encoding\");\n            }\n        } else {\n            output.append(ch);\n            i++;\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c967abd9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,28 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decode(String input) {\n+    StringBuffer output = new StringBuffer();\n+    for(int i=0;i<input.length();) {\n+        char ch = input.charAt(i);\n+        if(ch == '+') {\n+            output.append(' ');\n+            i++;\n+        } else if(ch == '%') {\n+            if(i+2<input.length()) {\n+                int hex = Integer.parseInt(input.substring(i+1,i+3),16);\n+                output.append((char)hex);\n+                i += 3;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid encoding\");\n+            }\n+        } else {\n+            output.append(ch);\n+            i++;\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}