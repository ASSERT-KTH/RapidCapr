{
    "patch": "public String addInOperator(String input) {\n    int startIndex = 0;\n    StringBuilder output = new StringBuilder();\n    while (true) {\n        int inIndex = input.indexOf(\"in\", startIndex);\n        if (inIndex == -1) {\n            output.append(input.substring(startIndex));\n            break;\n        }\n\n        int leftParenIndex = input.lastIndexOf('(', inIndex);\n        int rightParenIndex = input.indexOf(')', inIndex);\n        if (leftParenIndex == -1 || rightParenIndex == -1 || leftParenIndex > inIndex) {\n            startIndex = inIndex + 2;\n            output.append(\"in\");\n            continue;\n        }\n\n        output.append(input.substring(startIndex, leftParenIndex));\n        output.append(\"[\");\n        output.append(input.substring(leftParenIndex + 1, inIndex));\n        output.append(\" \");\n        output.append(\"in\");\n        output.append(\" \");\n        output.append(input.substring(inIndex + 2, rightParenIndex));\n        output.append(\"]\");\n        startIndex = rightParenIndex + 1;\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..1ed33450 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,36 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String addInOperator(String input) {\n+    int startIndex = 0;\n+    StringBuilder output = new StringBuilder();\n+    while (true) {\n+        int inIndex = input.indexOf(\"in\", startIndex);\n+        if (inIndex == -1) {\n+            output.append(input.substring(startIndex));\n+            break;\n+        }\n+\n+        int leftParenIndex = input.lastIndexOf('(', inIndex);\n+        int rightParenIndex = input.indexOf(')', inIndex);\n+        if (leftParenIndex == -1 || rightParenIndex == -1 || leftParenIndex > inIndex) {\n+            startIndex = inIndex + 2;\n+            output.append(\"in\");\n+            continue;\n+        }\n+\n+        output.append(input.substring(startIndex, leftParenIndex));\n+        output.append(\"[\");\n+        output.append(input.substring(leftParenIndex + 1, inIndex));\n+        output.append(\" \");\n+        output.append(\"in\");\n+        output.append(\" \");\n+        output.append(input.substring(inIndex + 2, rightParenIndex));\n+        output.append(\"]\");\n+        startIndex = rightParenIndex + 1;\n+    }\n+    return output.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}