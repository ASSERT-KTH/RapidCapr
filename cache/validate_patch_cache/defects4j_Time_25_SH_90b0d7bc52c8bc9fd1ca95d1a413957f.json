{
    "patch": "                    // We need to handle the case where the next transition is right at instantLocal\n                    // Otherwise we may end up with the wrong offset (one hour too large)\n                    long nextLocalPrev = previousTransition(instantLocal - offsetLocal);\n                    if (nextLocalPrev == instantLocal - offsetLocal) {\n                        return offsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..05fcddaa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,12 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                    // We need to handle the case where the next transition is right at instantLocal\n+                    // Otherwise we may end up with the wrong offset (one hour too large)\n+                    long nextLocalPrev = previousTransition(instantLocal - offsetLocal);\n+                    if (nextLocalPrev == instantLocal - offsetLocal) {\n+                        return offsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}