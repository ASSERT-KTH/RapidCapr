{
    "patch": "          if (parent.isDelProp()) {\n            return false;\n          }\n          \n          // GetProp nodes must have exactly one child; a STRING node.\n          Preconditions.checkState(parent.getChildCount() == 2);\n          Node propNameNode = parent.getLastChild();\n          Preconditions.checkState(propNameNode.isString());\n          \n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          String propName = propNameNode.getString();\n          if (!validProperties.contains(propName)) {\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              validProperties.add(propName);\n            } else {\n              return false;\n            }\n          }\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          validProperties.add(child.getString());\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..48430ed2 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,91 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (parent.isDelProp()) {\n+            return false;\n+          }\n+          \n+          // GetProp nodes must have exactly one child; a STRING node.\n+          Preconditions.checkState(parent.getChildCount() == 2);\n+          Node propNameNode = parent.getLastChild();\n+          Preconditions.checkState(propNameNode.isString());\n+          \n+          // NOTE(nicksantos): This pass's object-splitting algorithm has\n+          // a blind spot. It assumes that if a property isn't defined on an\n+          // object, then the value is undefined. This is not true, because\n+          // Object.prototype can have arbitrary properties on it.\n+          //\n+          // We short-circuit this problem by bailing out if we see a reference\n+          // to a property that isn't defined on the object literal. This\n+          // isn't a perfect algorithm, but it should catch most cases.\n+          String propName = propNameNode.getString();\n+          if (!validProperties.contains(propName)) {\n+            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+              validProperties.add(propName);\n+            } else {\n+              return false;\n+            }\n+          }\n+          continue;\n+        }\n+\n+        // Only rewrite VAR declarations or simple assignment statements\n+        if (!isVarOrAssignExprLhs(name)) {\n+           return false;\n+        }\n+\n+        Node val = ref.getAssignedValue();\n+        if (val == null) {\n+          // A var with no assignment.\n+          continue;\n+        }\n+\n+        // We're looking for object literal assignments only.\n+        if (!val.isObjectLit()) {\n+          return false;\n+        }\n+\n+        // Make sure that the value is not self-referential. IOW,\n+        // disallow things like x = {b: x.a}.\n+        //\n+        // TODO: Only exclude unorderable self-referential\n+        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+        // but x = {a: 1, b: x.a} is.\n+        //\n+        // Also, ES5 getters/setters aren't handled by this pass.\n+        for (Node child = val.getFirstChild(); child != null;\n+             child = child.getNext()) {\n+          if (child.isGetterDef() ||\n+              child.isSetterDef()) {\n+            // ES5 get/set not supported.\n+            return false;\n+          }\n+\n+          validProperties.add(child.getString());\n+\n+          Node childVal = child.getFirstChild();\n+          // Check if childVal is the parent of any of the passed in\n+          // references, as that is how self-referential assignments\n+          // will happen.\n+          for (Reference t : refs) {\n+            Node refNode = t.getParent();\n+            while (!NodeUtil.isStatementBlock(refNode)) {\n+              if (refNode == childVal) {\n+                // There's a self-referential assignment\n+                return false;\n+              }\n+              refNode = refNode.getParent();\n+            }\n+          }\n+        }\n+\n+        // We have found an acceptable object literal assignment. As\n+        // long as there are no other assignments that mess things up,\n+        // we can inline.\n+        ret = true;\n+      }\n+      return ret;\n+  }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}