{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.EXPR_RESULT) {\n      Node child = n.getFirstChild();\n      if (child.getType() == Token.BLOCK && child.hasOneChild()) {\n        Node expr = child.getFirstChild();\n        if (NodeUtil.isExpressionNode(expr)) {\n          return child.getParent().getType() != Token.EXPR_RESULT;\n        }\n      }\n    }\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node expr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(expr)) {\n        Node parent = n.getParent();\n        if (parent.getType() == Token.EXPR_RESULT && parent.hasOneChild()) {\n          Node exprParent = parent.getFirstChild();\n          if (exprParent.getType() == Token.CALL) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..6929fca0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,23 +517,28 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.EXPR_RESULT) {\n+      Node child = n.getFirstChild();\n+      if (child.getType() == Token.BLOCK && child.hasOneChild()) {\n+        Node expr = child.getFirstChild();\n+        if (NodeUtil.isExpressionNode(expr)) {\n+          return child.getParent().getType() != Token.EXPR_RESULT;\n+        }\n+      }\n+    }\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node expr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(expr)) {\n+        Node parent = n.getParent();\n+        if (parent.getType() == Token.EXPR_RESULT && parent.hasOneChild()) {\n+          Node exprParent = parent.getFirstChild();\n+          if (exprParent.getType() == Token.CALL) {\n+            return false;\n+          }\n+        }\n+        return true;\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}