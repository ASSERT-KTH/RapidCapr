{
    "patch": "// We only want to match constraints on anonymous types or record types.\nif (!isNominalConstructor() && !isFunctionType() && !constraintObj.isRecordType()) {\n  return;\n}\n\n// If constraint object is a function type, return.\nif (constraintObj.isFunctionType()) {\n  if (!isInterface()) {\n    return;\n  }\n  JSType returnType = constraintObj.getReturnType();\n  if (!returnType.isUnknownType() && !returnType.isVoidType()) {\n    if (!isSomeConstructor()\n        && !returnType.isSubtypeOf(JSType.fromObjectType(ObjectType.fromFunctionType(STUB_DECLARATIONS))))\n      return;\n  }\n  for (JSType paramType : constraintObj.getParameterTypes()) {\n    if (!paramType.isUnknownType()) {\n      if (!paramType.isSubtypeOf(JSType.fromObjectType(ObjectType.fromFunctionType(STUB_DECLARATIONS))))\n        return;\n    }\n  }\n}\n\nif (constraintObj.isRecordType()) {\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..b5b6c582 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,42 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types or record types.\n+if (!isNominalConstructor() && !isFunctionType() && !constraintObj.isRecordType()) {\n+  return;\n+}\n+\n+// If constraint object is a function type, return.\n+if (constraintObj.isFunctionType()) {\n+  if (!isInterface()) {\n+    return;\n+  }\n+  JSType returnType = constraintObj.getReturnType();\n+  if (!returnType.isUnknownType() && !returnType.isVoidType()) {\n+    if (!isSomeConstructor()\n+        && !returnType.isSubtypeOf(JSType.fromObjectType(ObjectType.fromFunctionType(STUB_DECLARATIONS))))\n+      return;\n+  }\n+  for (JSType paramType : constraintObj.getParameterTypes()) {\n+    if (!paramType.isUnknownType()) {\n+      if (!paramType.isSubtypeOf(JSType.fromObjectType(ObjectType.fromFunctionType(STUB_DECLARATIONS))))\n+        return;\n+    }\n+  }\n+}\n+\n+if (constraintObj.isRecordType()) {\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(prop);\n+    if (!isPropertyTypeDeclared(prop)) {\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}