{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        newName.setCharno(position2charno(\n            functionNode.getEncodedSourceStart()));\n        Node lp = new Node(Token.LP);\n        lp.setLineno(functionNode.getLineno());\n        lp.setCharno(position2charno(\n            functionNode.getEncodedSourceStart() + \"function\".length()));\n        node.addChildToBack(lp);\n      } else {\n        Node lp = newNode(Token.LP);\n        lp.setLineno(name.getLineno());\n        lp.setCharno(position2charno(name.getEnd()));\n        for (AstNode param : functionNode.getParams()) {\n          lp.addChildToBack(transform(param));\n        }\n        newName.addChildToBack(lp);\n      }\n      node.addChildToBack(newName);\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..153e6fd2 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,43 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+        newName.setCharno(position2charno(\n+            functionNode.getEncodedSourceStart()));\n+        Node lp = new Node(Token.LP);\n+        lp.setLineno(functionNode.getLineno());\n+        lp.setCharno(position2charno(\n+            functionNode.getEncodedSourceStart() + \"function\".length()));\n+        node.addChildToBack(lp);\n+      } else {\n+        Node lp = newNode(Token.LP);\n+        lp.setLineno(name.getLineno());\n+        lp.setCharno(position2charno(name.getEnd()));\n+        for (AstNode param : functionNode.getParams()) {\n+          lp.addChildToBack(transform(param));\n+        }\n+        newName.addChildToBack(lp);\n+      }\n+      node.addChildToBack(newName);\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+      return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}