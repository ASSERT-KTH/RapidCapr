{
    "patch": "                    case 'u':\n                        if (i + 4 <= sz) {\n                            // Get 4 hex digits\n                            CharSequence unicodeStr = input.subSequence(i + 1, i + 5);\n                            if (unicodeStr.chars().allMatch(Character::isLetterOrDigit)) {\n                                char unicodeChar = (char) Integer.parseInt(unicodeStr.toString(), 16);\n                                out.append(unicodeChar);\n                                i += 4;\n                            } else {\n                                throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicodeStr);\n                            }\n                        } else {\n                            throw new IllegalArgumentException(\"Less than 4 hex digits in unicode value: '\"\n                                    + input.subSequence(i, sz) + \"'\");\n                        }\n                        break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..82267394 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,22 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                    case 'u':\n+                        if (i + 4 <= sz) {\n+                            // Get 4 hex digits\n+                            CharSequence unicodeStr = input.subSequence(i + 1, i + 5);\n+                            if (unicodeStr.chars().allMatch(Character::isLetterOrDigit)) {\n+                                char unicodeChar = (char) Integer.parseInt(unicodeStr.toString(), 16);\n+                                out.append(unicodeChar);\n+                                i += 4;\n+                            } else {\n+                                throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicodeStr);\n+                            }\n+                        } else {\n+                            throw new IllegalArgumentException(\"Less than 4 hex digits in unicode value: '\"\n+                                    + input.subSequence(i, sz) + \"'\");\n+                        }\n+                        break;\n             }\n         }\n     }",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}