{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int curYear = 0;\n    int curMonth = 0;\n    int curDay = 0;\n    boolean monthDayChanged = false;\n\n    // Get the current month, day and year values based on the given partial\n    for (int i = 0; i < partial.size(); i++) {\n        switch (partial.getFieldType(i).getName()) {\n            case \"year\":\n                curYear = values[i];\n                break;\n            case \"monthOfYear\":\n                curMonth = values[i];\n                break;\n            case \"dayOfMonth\":\n                curDay = values[i];\n                break;\n        }\n    }\n\n    // Add the given value to the field at the fieldIndex\n    long instant = partial.getFieldType(fieldIndex).getField(iChronology).add(\n            partial.getField(instantUtc, fieldIndex),\n            valueToAdd);\n\n    // Handle the leap year issue\n    if (DateTimeUtils.isContiguous(partial)) {\n        // If the partial is contiguous, validate the day and month\n        int[] newValues = iChronology.get(partial, instant);\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n\n        if (newValues[fieldIndex] != values[fieldIndex]) {\n            // if the day value has changed, set the day to the last valid value of the month\n            int newDayOfMonth = Math.min(newValues[fieldIndex], maxDayOfMonth);\n            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n\n            curDay = newDayOfMonth;\n            monthDayChanged = true;\n        }\n        if (newValues[fieldIndex - 1] != values[fieldIndex - 1]) {\n            // if the month value has changed, validate the new month\n            int newMonthOfYear = newValues[fieldIndex - 1];\n            if (newMonthOfYear > 12) {\n                newMonthOfYear = 12;\n            }\n            DateTime dt = new DateTime(curYear, newMonthOfYear, 1, 0, 0, iChronology);\n            if (monthDayChanged) {\n                // if the day value has changed, set the day to the last valid value of the new month\n                curDay = dt.dayOfMonth().getMaximumValue();\n            } else {\n                int newDayOfMonth = Math.min(curDay, dt.dayOfMonth().getMaximumValue());\n                // if the day value needs to be adjusted, set the day to the last valid value of the new month\n                if (newDayOfMonth != curDay) {\n                    curDay = newDayOfMonth;\n                    monthDayChanged = true;\n                }\n            }\n\n            curMonth = newMonthOfYear;\n        }\n        if (monthDayChanged) {\n            // Update the instant value with the new month and day values\n            instant = new DateTime(curYear, curMonth, curDay, 0, 0, iChronology).getMillis();\n        }\n    }\n\n    // Create a new partial with the updated instant value\n    int[] result = new int[partial.size()];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = partial.getFieldType(i).getField(iChronology).get(instant);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ed2828d9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,85 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int curYear = 0;\n+    int curMonth = 0;\n+    int curDay = 0;\n+    boolean monthDayChanged = false;\n+\n+    // Get the current month, day and year values based on the given partial\n+    for (int i = 0; i < partial.size(); i++) {\n+        switch (partial.getFieldType(i).getName()) {\n+            case \"year\":\n+                curYear = values[i];\n+                break;\n+            case \"monthOfYear\":\n+                curMonth = values[i];\n+                break;\n+            case \"dayOfMonth\":\n+                curDay = values[i];\n+                break;\n+        }\n+    }\n+\n+    // Add the given value to the field at the fieldIndex\n+    long instant = partial.getFieldType(fieldIndex).getField(iChronology).add(\n+            partial.getField(instantUtc, fieldIndex),\n+            valueToAdd);\n+\n+    // Handle the leap year issue\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // If the partial is contiguous, validate the day and month\n+        int[] newValues = iChronology.get(partial, instant);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+\n+        if (newValues[fieldIndex] != values[fieldIndex]) {\n+            // if the day value has changed, set the day to the last valid value of the month\n+            int newDayOfMonth = Math.min(newValues[fieldIndex], maxDayOfMonth);\n+            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n+\n+            curDay = newDayOfMonth;\n+            monthDayChanged = true;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (newValues[fieldIndex - 1] != values[fieldIndex - 1]) {\n+            // if the month value has changed, validate the new month\n+            int newMonthOfYear = newValues[fieldIndex - 1];\n+            if (newMonthOfYear > 12) {\n+                newMonthOfYear = 12;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            DateTime dt = new DateTime(curYear, newMonthOfYear, 1, 0, 0, iChronology);\n+            if (monthDayChanged) {\n+                // if the day value has changed, set the day to the last valid value of the new month\n+                curDay = dt.dayOfMonth().getMaximumValue();\n+            } else {\n+                int newDayOfMonth = Math.min(curDay, dt.dayOfMonth().getMaximumValue());\n+                // if the day value needs to be adjusted, set the day to the last valid value of the new month\n+                if (newDayOfMonth != curDay) {\n+                    curDay = newDayOfMonth;\n+                    monthDayChanged = true;\n+                }\n+            }\n+\n+            curMonth = newMonthOfYear;\n+        }\n+        if (monthDayChanged) {\n+            // Update the instant value with the new month and day values\n+            instant = new DateTime(curYear, curMonth, curDay, 0, 0, iChronology).getMillis();\n         }\n     }\n \n+    // Create a new partial with the updated instant value\n+    int[] result = new int[partial.size()];\n+    for (int i = 0; i < result.length; i++) {\n+        result[i] = partial.getFieldType(i).getField(iChronology).get(instant);\n+    }\n+    return result;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: strings in switch are not supported in -source 1.5",
    "test_result": "ERROR"
}