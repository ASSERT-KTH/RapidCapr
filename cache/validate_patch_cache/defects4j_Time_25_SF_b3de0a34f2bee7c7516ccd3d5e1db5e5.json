{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the initial offset at instantLocal\n    final int initialOffset = getOffset(instantLocal);\n\n    // adjust the time using the initial offset\n    final long utcInstant = instantLocal - initialOffset;\n\n    // get the offset for the adjusted time\n    int currentOffset = getOffset(utcInstant);\n\n    // if the initial and current offsets match, return the current offset\n    if (initialOffset == currentOffset) {\n        return currentOffset;\n    }\n\n    // check if we are in a gap\n    if (initialOffset > currentOffset) {\n        final long nextLocal = nextTransition(instantLocal - currentOffset);\n        final long nextUTC = nextTransition(utcInstant);\n        \n        // if nextLocal equals nextUTC, return the current offset\n        if (nextLocal == nextUTC) {\n            return currentOffset;\n        }\n    }\n\n    // check if we are in an overlap\n    if (currentOffset > initialOffset) {\n        final long prevLocal = previousTransition(instantLocal - initialOffset);\n        final long prevUTC = previousTransition(utcInstant);\n        \n        // if prevLocal equals prevUTC, return the initial offset\n        if (prevLocal == prevUTC) {\n            return initialOffset;\n        }\n    }\n\n    // find the closest transition to the adjusted time\n    final long nextTransitionUTC = nextTransition(utcInstant);\n    final long nextTransitionLocal = nextTransition(instantLocal);\n    final long prevTransitionUTC = previousTransition(utcInstant);\n    final long prevTransitionLocal = previousTransition(instantLocal);\n\n    // check for a DST boundary\n    if (nextTransitionUTC < nextTransitionLocal || prevTransitionUTC > prevTransitionLocal) {\n        // we are near a DST boundary, need to recalculate the offset\n        long adjustedInstant = instantLocal - currentOffset;\n        currentOffset = getOffset(adjustedInstant);\n        if (initialOffset == currentOffset) {\n            return currentOffset;\n        }\n    }\n\n    // if the next local and UTC transitions match, and the current offset equals the new offset, return the current offset\n    if (nextTransitionUTC == nextTransitionLocal) {\n        int newOffset = getOffset(nextTransitionUTC);\n        if (newOffset == currentOffset) {\n            return currentOffset;\n        }\n    }\n\n    // if the previous local and UTC transitions match, and the current offset equals the old offset, return the old offset\n    if (prevTransitionUTC == prevTransitionLocal) {\n        int oldOffset = getOffset(prevTransitionUTC);\n        if (oldOffset == initialOffset) {\n            return initialOffset;\n        }\n    }\n\n    // if none of the above conditions have been met, return the current offset\n    return currentOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a058436c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,79 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the initial offset at instantLocal\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // adjust the time using the initial offset\n+    final long utcInstant = instantLocal - initialOffset;\n+\n+    // get the offset for the adjusted time\n+    int currentOffset = getOffset(utcInstant);\n+\n+    // if the initial and current offsets match, return the current offset\n+    if (initialOffset == currentOffset) {\n+        return currentOffset;\n+    }\n+\n+    // check if we are in a gap\n+    if (initialOffset > currentOffset) {\n+        final long nextLocal = nextTransition(instantLocal - currentOffset);\n+        final long nextUTC = nextTransition(utcInstant);\n+        \n+        // if nextLocal equals nextUTC, return the current offset\n+        if (nextLocal == nextUTC) {\n+            return currentOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // check if we are in an overlap\n+    if (currentOffset > initialOffset) {\n+        final long prevLocal = previousTransition(instantLocal - initialOffset);\n+        final long prevUTC = previousTransition(utcInstant);\n+        \n+        // if prevLocal equals prevUTC, return the initial offset\n+        if (prevLocal == prevUTC) {\n+            return initialOffset;\n+        }\n+    }\n+\n+    // find the closest transition to the adjusted time\n+    final long nextTransitionUTC = nextTransition(utcInstant);\n+    final long nextTransitionLocal = nextTransition(instantLocal);\n+    final long prevTransitionUTC = previousTransition(utcInstant);\n+    final long prevTransitionLocal = previousTransition(instantLocal);\n+\n+    // check for a DST boundary\n+    if (nextTransitionUTC < nextTransitionLocal || prevTransitionUTC > prevTransitionLocal) {\n+        // we are near a DST boundary, need to recalculate the offset\n+        long adjustedInstant = instantLocal - currentOffset;\n+        currentOffset = getOffset(adjustedInstant);\n+        if (initialOffset == currentOffset) {\n+            return currentOffset;\n+        }\n+    }\n+\n+    // if the next local and UTC transitions match, and the current offset equals the new offset, return the current offset\n+    if (nextTransitionUTC == nextTransitionLocal) {\n+        int newOffset = getOffset(nextTransitionUTC);\n+        if (newOffset == currentOffset) {\n+            return currentOffset;\n+        }\n+    }\n+\n+    // if the previous local and UTC transitions match, and the current offset equals the old offset, return the old offset\n+    if (prevTransitionUTC == prevTransitionLocal) {\n+        int oldOffset = getOffset(prevTransitionUTC);\n+        if (oldOffset == initialOffset) {\n+            return initialOffset;\n+        }\n+    }\n+\n+    // if none of the above conditions have been met, return the current offset\n+    return currentOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}