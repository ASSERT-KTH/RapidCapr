{
    "patch": "      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n      if (jsDocInfo != null && jsDocInfo.hasThisType()) {\n        Node parent = n.getParent();\n        if (NodeUtil.isGet(parent) && parent.getFirstChild().equals(n)) {\n          Node possibleThisValue = parent.getFirstChild().getNext();\n          JSType possibleThisType = getJSType(possibleThisValue);\n          if (possibleThisType.isUnknownType() || possibleThisType.isNoType()) {\n            report(t, n, CALL_PARAMETER_MISMATCH, \"'this' type\");\n          }\n        } else {\n          report(t, n, UNSAFE_THIS, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7195a694 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n+      if (jsDocInfo != null && jsDocInfo.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (NodeUtil.isGet(parent) && parent.getFirstChild().equals(n)) {\n+          Node possibleThisValue = parent.getFirstChild().getNext();\n+          JSType possibleThisType = getJSType(possibleThisValue);\n+          if (possibleThisType.isUnknownType() || possibleThisType.isNoType()) {\n+            report(t, n, CALL_PARAMETER_MISMATCH, \"'this' type\");\n+          }\n+        } else {\n+          report(t, n, UNSAFE_THIS, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}