{
    "patch": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ESCUtil {\n\n    public static String escape(String s) {\n        StringBuilder tmp = new StringBuilder();\n        tmp.ensureCapacity(s.length() * 6);\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            if (Character.isDigit(c) || Character.isLowerCase(c) || Character.isUpperCase(c)) {\n                tmp.append(c);\n            } else if (c < 256) {\n                tmp.append(\"%\");\n                if (c < 16) {\n                    tmp.append(\"0\");\n                }\n                tmp.append(Integer.toString(c, 16));\n            } else {\n                tmp.append(\"%u\");\n                tmp.append(Integer.toString(c, 16));\n            }\n        }\n\n        return tmp.toString();\n    }\n\n    public static String unescape(String s) {\n        StringBuilder tmp = new StringBuilder();\n        tmp.ensureCapacity(s.length());\n        Pattern pattern = Pattern.compile(\"(%([0-9A-Fa-f]{2})|%(u[0-9A-Fa-f]{4}))\");\n\n        Matcher matcher = pattern.matcher(s);\n\n        while (matcher.find()) {\n            if (matcher.group(2) != null) {\n                matcher.appendReplacement(tmp, String.valueOf((char) Integer.parseInt(matcher.group(2), 16)));\n            } else {\n                matcher.appendReplacement(tmp, String.valueOf((char) Integer.parseInt(matcher.group(3).substring(1), 16)));\n            }\n        }\n\n        matcher.appendTail(tmp);\n\n        return tmp.toString();\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..b9fe4449 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,56 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class ESCUtil {\n+\n+    public static String escape(String s) {\n+        StringBuilder tmp = new StringBuilder();\n+        tmp.ensureCapacity(s.length() * 6);\n+\n+        for (int i = 0; i < s.length(); i++) {\n+            char c = s.charAt(i);\n+\n+            if (Character.isDigit(c) || Character.isLowerCase(c) || Character.isUpperCase(c)) {\n+                tmp.append(c);\n+            } else if (c < 256) {\n+                tmp.append(\"%\");\n+                if (c < 16) {\n+                    tmp.append(\"0\");\n+                }\n+                tmp.append(Integer.toString(c, 16));\n+            } else {\n+                tmp.append(\"%u\");\n+                tmp.append(Integer.toString(c, 16));\n+            }\n+        }\n+\n+        return tmp.toString();\n+    }\n+\n+    public static String unescape(String s) {\n+        StringBuilder tmp = new StringBuilder();\n+        tmp.ensureCapacity(s.length());\n+        Pattern pattern = Pattern.compile(\"(%([0-9A-Fa-f]{2})|%(u[0-9A-Fa-f]{4}))\");\n+\n+        Matcher matcher = pattern.matcher(s);\n+\n+        while (matcher.find()) {\n+            if (matcher.group(2) != null) {\n+                matcher.appendReplacement(tmp, String.valueOf((char) Integer.parseInt(matcher.group(2), 16)));\n+            } else {\n+                matcher.appendReplacement(tmp, String.valueOf((char) Integer.parseInt(matcher.group(3).substring(1), 16)));\n+            }\n+        }\n+\n+        matcher.appendTail(tmp);\n+\n+        return tmp.toString();\n+    }\n+\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}