{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!NodeUtil.isGetOrSetKey(child)) {\n            String name = null;\n            if (child.isStringKey() || child.isString()) {\n                name = child.getString();\n            } else if (child.isGetProp()) {\n                Node firstChild = child.getFirstChild();\n                Node secondChild = firstChild.getNext();\n                if (firstChild.isString() && secondChild.isString()) {\n                    name = firstChild.getString() + \".\" + secondChild.getString();\n                }\n            } else if (child.isGetElem()) {\n                Node firstChild = child.getFirstChild();\n                Node secondChild = firstChild.getNext();\n                if (firstChild != null && secondChild != null) {\n                    // Check if the first child is actually a property or an array index\n                    if (firstChild.isString()) {\n                        name = firstChild.getString();\n                    } else if (n.isArrayLit() && firstChild.isNumber()) {\n                        name = \"[\" + firstChild.getString() + \"]\";\n                    }\n                }\n                // Handle GETELEM case\n                if (name != null && secondChild.isString()) {\n                    T type;\n                    if (firstChild.isNumber()) {\n                        type = getElementType(getScope(), n);\n                    } else {\n                        type = typeSystem.getType(getScope(), firstChild, secondChild.getString());\n                    }\n                    if (type instanceof UnknownType) {\n                        if (propertiesToErrorFor.containsKey(name)) {\n                            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                                    Warnings.INVALIDATION, name, \"unknown\", n.toString(), \"\"));\n                        } else {\n                            reportWarningForUnknownProperty(t, name, child);\n                        }\n                    } else if (!type.isEmptyType()) {\n                        Property prop = getProperty(name);\n                        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n                            if (propertiesToErrorFor.containsKey(name)) {\n                                compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                                        Warnings.INVALIDATION, name, type.toString(), n.toString(), \"\"));\n                            }\n                        }\n                    }\n                }\n            }\n            if (name == null) {\n                continue;\n            }\n            // Handle STRING and NUMBER case\n            T type = typeSystem.getType(getScope(), n, name);\n\n            if (type instanceof UnknownType) {\n                if (propertiesToErrorFor.containsKey(name)) {\n                    compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                            Warnings.INVALIDATION, name, \"unknown\", n.toString(), \"\"));\n                } else {\n                    reportWarningForUnknownProperty(t, name, child);\n                }\n            } else if (!type.isEmptyType()) {\n                Property prop = getProperty(name);\n                if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n                    if (propertiesToErrorFor.containsKey(name)) {\n                        compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                                Warnings.INVALIDATION, name, type.toString(), n.toString(), \"\"));\n                    }\n                }\n            }\n        }\n    }\n}\n\nprivate ObjectType getElementType(Scope scope, Node arrayLit) {\n    ObjectType type = typeSystem.getObjectType(JSTypeNative.ARRAY_FUNCTION_TYPE);\n    type = type.getReference().getAlternate();\n    Node firstChild = arrayLit.getFirstChild();\n    if (firstChild == null) {\n        return UnknownType.getInstance();\n    }\n    Node lastChild = arrayLit.getLastChild();\n    if (firstChild == lastChild) {\n        return type;\n    }\n    return type.getTemplateTypes().get(0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..8125bcf9 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,94 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!NodeUtil.isGetOrSetKey(child)) {\n+            String name = null;\n+            if (child.isStringKey() || child.isString()) {\n+                name = child.getString();\n+            } else if (child.isGetProp()) {\n+                Node firstChild = child.getFirstChild();\n+                Node secondChild = firstChild.getNext();\n+                if (firstChild.isString() && secondChild.isString()) {\n+                    name = firstChild.getString() + \".\" + secondChild.getString();\n+                }\n+            } else if (child.isGetElem()) {\n+                Node firstChild = child.getFirstChild();\n+                Node secondChild = firstChild.getNext();\n+                if (firstChild != null && secondChild != null) {\n+                    // Check if the first child is actually a property or an array index\n+                    if (firstChild.isString()) {\n+                        name = firstChild.getString();\n+                    } else if (n.isArrayLit() && firstChild.isNumber()) {\n+                        name = \"[\" + firstChild.getString() + \"]\";\n+                    }\n+                }\n+                // Handle GETELEM case\n+                if (name != null && secondChild.isString()) {\n+                    T type;\n+                    if (firstChild.isNumber()) {\n+                        type = getElementType(getScope(), n);\n+                    } else {\n+                        type = typeSystem.getType(getScope(), firstChild, secondChild.getString());\n+                    }\n+                    if (type instanceof UnknownType) {\n+                        if (propertiesToErrorFor.containsKey(name)) {\n+                            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                                    Warnings.INVALIDATION, name, \"unknown\", n.toString(), \"\"));\n+                        } else {\n+                            reportWarningForUnknownProperty(t, name, child);\n+                        }\n+                    } else if (!type.isEmptyType()) {\n+                        Property prop = getProperty(name);\n+                        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+                            if (propertiesToErrorFor.containsKey(name)) {\n+                                compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                                        Warnings.INVALIDATION, name, type.toString(), n.toString(), \"\"));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            if (name == null) {\n+                continue;\n+            }\n+            // Handle STRING and NUMBER case\n+            T type = typeSystem.getType(getScope(), n, name);\n+\n+            if (type instanceof UnknownType) {\n+                if (propertiesToErrorFor.containsKey(name)) {\n+                    compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                            Warnings.INVALIDATION, name, \"unknown\", n.toString(), \"\"));\n+                } else {\n+                    reportWarningForUnknownProperty(t, name, child);\n+                }\n+            } else if (!type.isEmptyType()) {\n+                Property prop = getProperty(name);\n+                if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+                    if (propertiesToErrorFor.containsKey(name)) {\n+                        compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                                Warnings.INVALIDATION, name, type.toString(), n.toString(), \"\"));\n+                    }\n+                }\n+            }\n         }\n-      }\n     }\n+}\n+\n+private ObjectType getElementType(Scope scope, Node arrayLit) {\n+    ObjectType type = typeSystem.getObjectType(JSTypeNative.ARRAY_FUNCTION_TYPE);\n+    type = type.getReference().getAlternate();\n+    Node firstChild = arrayLit.getFirstChild();\n+    if (firstChild == null) {\n+        return UnknownType.getInstance();\n+    }\n+    Node lastChild = arrayLit.getLastChild();\n+    if (firstChild == lastChild) {\n+        return type;\n+    }\n+    return type.getTemplateTypes().get(0);\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: method getElementType in class DisambiguateProperties<T>.FindRenameableProperties cannot be applied to given types;",
    "test_result": "ERROR"
}