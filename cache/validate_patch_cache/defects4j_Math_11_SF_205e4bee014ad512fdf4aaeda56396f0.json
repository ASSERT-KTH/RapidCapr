{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    final double norm = 1 / (FastMath.sqrt(FastMath.pow(2 * FastMath.PI, dim) * covarianceMatrixDeterminant));\n    double exp = 0;\n    for (int i = 0; i < dim; i++) {\n        double innerSum = 0;\n        for (int j = 0; j < dim; j++) {\n            final double delta = vals[j] - means[i][j];\n            innerSum += inverseCovarianceMatrix[i][j] * delta;\n        }\n        exp += innerSum * (vals[i] - means[i][i]);\n    }\n    return norm * FastMath.exp(-0.5 * exp);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..7d84be93d 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,24 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    final double norm = 1 / (FastMath.sqrt(FastMath.pow(2 * FastMath.PI, dim) * covarianceMatrixDeterminant));\n+    double exp = 0;\n+    for (int i = 0; i < dim; i++) {\n+        double innerSum = 0;\n+        for (int j = 0; j < dim; j++) {\n+            final double delta = vals[j] - means[i][j];\n+            innerSum += inverseCovarianceMatrix[i][j] * delta;\n+        }\n+        exp += innerSum * (vals[i] - means[i][i]);\n     }\n+    return norm * FastMath.exp(-0.5 * exp);\n+}\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: array required, but double found",
    "test_result": "ERROR"
}