{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() &&\n           parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (!parameters.hasNext()) {\n      // A var_args function is allowed any number of arguments.\n      // Increasing the maxArgs count in this case to ensure that the condition below passes.\n      maxArgs = Integer.MAX_VALUE;\n    }\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      String extraArgsMessage = maxArgs > numArgs\n                                        ? \"\"\n                                        : \" and no more than \" + (numArgs - maxArgs) + \" extra argument(s)\";\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              \" and at most \" + maxArgs + \" argument(s)\" + extraArgsMessage);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..9d0dcaa4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1409,7 +1409,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n            parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n@@ -1420,12 +1420,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n+    if (!parameters.hasNext()) {\n+      // A var_args function is allowed any number of arguments.\n+      // Increasing the maxArgs count in this case to ensure that the condition below passes.\n+      maxArgs = Integer.MAX_VALUE;\n+    }\n     if (minArgs > numArgs || maxArgs < numArgs) {\n+      String extraArgsMessage = maxArgs > numArgs\n+                                        ? \"\"\n+                                        : \" and no more than \" + (numArgs - maxArgs) + \" extra argument(s)\";\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              \" and at most \" + maxArgs + \" argument(s)\" + extraArgsMessage);\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<0>",
    "test_result": "FAIL"
}