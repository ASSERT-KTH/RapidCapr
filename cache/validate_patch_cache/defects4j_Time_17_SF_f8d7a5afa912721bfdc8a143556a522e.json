{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n\n    // check if there is an overlap or gap using only the hour and minute of the local time\n    boolean overlap = ((new LocalDateTime(instantBefore)).withSecondOfMinute(0).withMillisOfSecond(0))\n                        .isEqual((new LocalDateTime(instantAfter)).withSecondOfMinute(0).withMillisOfSecond(0));\n\n    if (!overlap) {\n        // no overlap or gap\n        return instant;\n    }\n\n    // calculate the range of instants that have duplicate local times\n    long offsetBefore = (convertLocalToUTC(instantBefore, false) - instantBefore);\n    long offsetAfter = (convertLocalToUTC(instantAfter, false) - instantAfter);\n\n    // calculate the difference in offsets\n    long diff = Math.abs(offsetAfter - offsetBefore);\n\n    // if same offset regardless of earlier or later, then we don't have an overlap\n    if (diff == 0) {\n        return instant;\n    }\n\n    // adjust the offset to the earlier/later\n    if (earlierOrLater) {\n        return (instant - offsetBefore + (diff * (offsetBefore < 0 ? -1 : 1)));\n    } else {\n        return (instant - offsetAfter + (diff * (offsetAfter < 0 ? -1 : 1)));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..2234c9fd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n-        }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // evaluate 3 hours before and after to work out if anything is happening\n+    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    // check if there is an overlap or gap using only the hour and minute of the local time\n+    boolean overlap = ((new LocalDateTime(instantBefore)).withSecondOfMinute(0).withMillisOfSecond(0))\n+                        .isEqual((new LocalDateTime(instantAfter)).withSecondOfMinute(0).withMillisOfSecond(0));\n+\n+    if (!overlap) {\n+        // no overlap or gap\n+        return instant;\n     }\n+\n+    // calculate the range of instants that have duplicate local times\n+    long offsetBefore = (convertLocalToUTC(instantBefore, false) - instantBefore);\n+    long offsetAfter = (convertLocalToUTC(instantAfter, false) - instantAfter);\n+\n+    // calculate the difference in offsets\n+    long diff = Math.abs(offsetAfter - offsetBefore);\n+\n+    // if same offset regardless of earlier or later, then we don't have an overlap\n+    if (diff == 0) {\n+        return instant;\n+    }\n+\n+    // adjust the offset to the earlier/later\n+    if (earlierOrLater) {\n+        return (instant - offsetBefore + (diff * (offsetBefore < 0 ? -1 : 1)));\n+    } else {\n+        return (instant - offsetAfter + (diff * (offsetAfter < 0 ? -1 : 1)));\n+    }\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}