{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        Node lValueGrandparent = parent.getParent();\n        switch (lValueGrandparent.getType()) {\n            case Token.ASSIGN:\n            case Token.ASSIGN_ADD:\n            case Token.ASSIGN_BITAND:\n            case Token.ASSIGN_BITOR:\n            case Token.ASSIGN_BITXOR:\n            case Token.ASSIGN_DIV:\n            case Token.ASSIGN_LEFTSHIFT:\n            case Token.ASSIGN_MOD:\n            case Token.ASSIGN_MUL:\n            case Token.ASSIGN_RIGHTSHIFT:\n            case Token.ASSIGN_SUB:\n            case Token.ASSIGN_UNSIGNEDRIGHTSHIFT:\n                Node lvalue = parent.getFirstChild();\n                if (lValueGrandparent.getParent().getType() == Token.EXPR_RESULT &&\n                    !lvalue.matchesQualifiedName(\"exports\") &&\n                    !lvalue.matchesQualifiedName(\"module.exports\") &&\n                    !lvalue.matchesQualifiedName(\"global\") &&\n                    !lvalue.matchesQualifiedName(\"window\")) {\n                        return false;\n                }\n                break;\n            default:\n                break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5a4a7712 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        Node lValueGrandparent = parent.getParent();\n+        switch (lValueGrandparent.getType()) {\n+            case Token.ASSIGN:\n+            case Token.ASSIGN_ADD:\n+            case Token.ASSIGN_BITAND:\n+            case Token.ASSIGN_BITOR:\n+            case Token.ASSIGN_BITXOR:\n+            case Token.ASSIGN_DIV:\n+            case Token.ASSIGN_LEFTSHIFT:\n+            case Token.ASSIGN_MOD:\n+            case Token.ASSIGN_MUL:\n+            case Token.ASSIGN_RIGHTSHIFT:\n+            case Token.ASSIGN_SUB:\n+            case Token.ASSIGN_UNSIGNEDRIGHTSHIFT:\n+                Node lvalue = parent.getFirstChild();\n+                if (lValueGrandparent.getParent().getType() == Token.EXPR_RESULT &&\n+                    !lvalue.matchesQualifiedName(\"exports\") &&\n+                    !lvalue.matchesQualifiedName(\"module.exports\") &&\n+                    !lvalue.matchesQualifiedName(\"global\") &&\n+                    !lvalue.matchesQualifiedName(\"window\")) {\n+                        return false;\n+                }\n+                break;\n+            default:\n+                break;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}