{
    "patch": "if (n.isCall() \n     && n.getFirstChild().isQualifiedName() \n     && !n.getFirstChild().getJSDocInfo().hasNoSideEffectsAnnotation()) {\n    if (NodeUtil.functionCallHasSideEffects(n)) {\n        return true;\n    }\n}\n\nif (n.isNew() \n     && n.getFirstChild().isQualifiedName() \n     && !n.getFirstChild().getJSDocInfo().hasNoSideEffectsAnnotation()) {\n    if (NodeUtil.constructorCallHasSideEffects(n)) {\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..8672f659 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,21 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isCall() \n+     && n.getFirstChild().isQualifiedName() \n+     && !n.getFirstChild().getJSDocInfo().hasNoSideEffectsAnnotation()) {\n+    if (NodeUtil.functionCallHasSideEffects(n)) {\n+        return true;\n+    }\n+}\n+\n+if (n.isNew() \n+     && n.getFirstChild().isQualifiedName() \n+     && !n.getFirstChild().getJSDocInfo().hasNoSideEffectsAnnotation()) {\n+    if (NodeUtil.constructorCallHasSideEffects(n)) {\n+        return true;\n+    }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}