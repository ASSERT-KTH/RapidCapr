{
    "patch": "              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              (NodeUtil.mayHaveSideEffects(lhs.getFirstChild()) &&\n               lhs.getType() != Token.CALL) ||\n              // RegExp literals may have state\n              lhs.getType() == Token.REGEXP ||\n              // Member variables may have external state changes.\n              (lhs.getType() == Token.GETPROP &&\n               isKnownGlobalName(lhs.getFirstChild()))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..fb363be2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,15 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // if LHS has side effects, don't proceed [since the optimization\n+              // evaluates LHS before cond]\n+              (NodeUtil.mayHaveSideEffects(lhs.getFirstChild()) &&\n+               lhs.getType() != Token.CALL) ||\n+              // RegExp literals may have state\n+              lhs.getType() == Token.REGEXP ||\n+              // Member variables may have external state changes.\n+              (lhs.getType() == Token.GETPROP &&\n+               isKnownGlobalName(lhs.getFirstChild()))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}