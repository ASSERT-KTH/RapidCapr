{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double eps = 1e-15;\n    double gln = LogGamma.logGamma(a);\n    double ax = a * Math.log(x) - x - gln;\n    if (a <= 0) {\n        return Double.NaN;\n    }\n    if (x < 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (a > 200) {\n        return 1 - regularizedGammaComplementSeries(a, x, eps);\n    }\n    return Math.exp(ax) * continuedFraction(a, x, eps) / a;\n}\n\nprivate static double regularizedGammaComplementSeries(double a, double x, double eps) {\n    double gln = LogGamma.logGamma(a);\n    double ap = a;\n    double sum = 1 / a;\n    double delta = sum;\n    while (delta > sum * eps) {\n        ap += 1;\n        delta *= x / ap;\n        sum += delta;\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - gln);\n}\n\nprivate static double continuedFraction(double a, double x, double eps) {\n    double gln = LogGamma.logGamma(a);\n    double a0 = 1;\n    double a1 = x;\n    double b0 = 0;\n    double b1 = 1;\n    double fac = 1;\n    double g = b1 / a1;\n    double gold = g;\n    while (Math.abs((g - gold) / g) > eps) {\n        gold = g;\n        double ana = fac * (a + fac);\n        double anf = b1 + fac * (b0 - a1 * b1);\n        double an = ana * a0 + anf * a1;\n        double bn = ana * b0 + anf * b1;\n        if (bn != 0) {\n            fac = an / bn;\n            a0 = a1;\n            a1 = an / bn;\n            b0 = b1;\n            b1 = 1 / bn;\n            g = a1 * g1;\n        } else {\n            break;\n        }\n    }\n    return Math.exp(-x + a * Math.log(x) - gln) * g;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7a61837f3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,66 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 1e-15;\n+    double gln = LogGamma.logGamma(a);\n+    double ax = a * Math.log(x) - x - gln;\n+    if (a <= 0) {\n+        return Double.NaN;\n+    }\n+    if (x < 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (a > 200) {\n+        return 1 - regularizedGammaComplementSeries(a, x, eps);\n+    }\n+    return Math.exp(ax) * continuedFraction(a, x, eps) / a;\n+}\n+\n+private static double regularizedGammaComplementSeries(double a, double x, double eps) {\n+    double gln = LogGamma.logGamma(a);\n+    double ap = a;\n+    double sum = 1 / a;\n+    double delta = sum;\n+    while (delta > sum * eps) {\n+        ap += 1;\n+        delta *= x / ap;\n+        sum += delta;\n+    }\n+    return sum * Math.exp(-x + a * Math.log(x) - gln);\n+}\n+\n+private static double continuedFraction(double a, double x, double eps) {\n+    double gln = LogGamma.logGamma(a);\n+    double a0 = 1;\n+    double a1 = x;\n+    double b0 = 0;\n+    double b1 = 1;\n+    double fac = 1;\n+    double g = b1 / a1;\n+    double gold = g;\n+    while (Math.abs((g - gold) / g) > eps) {\n+        gold = g;\n+        double ana = fac * (a + fac);\n+        double anf = b1 + fac * (b0 - a1 * b1);\n+        double an = ana * a0 + anf * a1;\n+        double bn = ana * b0 + anf * b1;\n+        if (bn != 0) {\n+            fac = an / bn;\n+            a0 = a1;\n+            a1 = an / bn;\n+            b0 = b1;\n+            b1 = 1 / bn;\n+            g = a1 * g1;\n+        } else {\n+            break;\n+        }\n+    }\n+    return Math.exp(-x + a * Math.log(x) - gln) * g;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}