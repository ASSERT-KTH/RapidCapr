{
    "patch": "Object[] rawArguments = invocation.getRawArguments();\nint argIndex = 0;\nfor (Matcher m : matchers) {\n    if (m instanceof CapturesArguments) {\n        Object arg = null;\n        if (argIndex < rawArguments.length) {\n            arg = rawArguments[argIndex];\n            if (isVariableArgument(invocation, argInde",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..119e4e08c 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArguments = invocation.getRawArguments();\n+int argIndex = 0;\n+for (Matcher m : matchers) {\n+    if (m instanceof CapturesArguments) {\n+        Object arg = null;\n+        if (argIndex < rawArguments.length) {\n+            arg = rawArguments[argIndex];\n+            if (isVariableArgument(invocation, argInde\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}