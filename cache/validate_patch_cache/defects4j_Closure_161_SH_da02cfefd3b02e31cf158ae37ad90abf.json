{
    "patch": "    if (intIndex >= elem.getChildCount()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node arrayIndex = elem.getFirstChild();\n    for (int i = 0; arrayIndex != null && i < intIndex; i++) {\n      arrayIndex = arrayIndex.getNext();\n    }\n\n    if (arrayIndex == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    left.removeChild(elem);\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, arrayIndex);\n    reportCodeChange();\n    return arrayIndex;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..002bf80e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,26 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (intIndex >= elem.getChildCount()) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    Node arrayIndex = elem.getFirstChild();\n+    for (int i = 0; arrayIndex != null && i < intIndex; i++) {\n+      arrayIndex = arrayIndex.getNext();\n+    }\n+\n+    if (arrayIndex == null) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+\n+    left.removeChild(elem);\n+    // Replace the entire GETELEM with the value\n+    n.getParent().replaceChild(n, arrayIndex);\n+    reportCodeChange();\n+    return arrayIndex;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}