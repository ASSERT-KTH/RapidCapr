{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        boolean changed = false;\n        DateTimeField field = null;\n        DurationField rangeDurationField = null;\n        for (int i = 0; i < fieldIndex; i++) {\n            DateTimeField f = partial.getField(iChronology, partial.getFieldType(i));\n            DurationField r = f.getDurationField();\n            if (values[i] != f.getMinimumValue() || !r.isSupported() || r.getUnitMillis() <= 0) {\n                changed = true;\n                field = f;\n            } else {\n                if (rangeDurationField == null) {\n                    rangeDurationField = r.getRangeDurationField();\n                } else if (rangeDurationField != r.getRangeDurationField()) {\n                    changed = true;\n                    field = f;\n                }\n            }\n        }\n        if (changed || fieldIndex == 0) {\n            // non-contiguous or requires larger fields\n            Chronology chrono = partial.getChronology();\n            long instant = 0L;\n            for (int i = 0; i < fieldIndex; i++) {\n                instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] newValues = chrono.get(partial, instant);\n            if (!DateTimeUtils.isContiguous(partial)) {\n                newValues = chrono.retain(this, newValues);\n            }\n            return newValues;\n        }\n        // contiguous, can just add\n        int startValue = values[fieldIndex];\n        int range = getRangeDurationField().getDifference(values[fieldIndex + 1], startValue);\n        int workValue = getDurationField().add(startValue, valueToAdd);\n        int workMax = getDurationField().getMaximumValue();\n        if (workValue >= 0 && workValue < workMax) {\n            return set(partial, fieldIndex, values, workValue);\n        }\n\n        long instant = 0L;\n        for (int i = 0; i <= fieldIndex; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        long currentDuration = getDurationField().getField(iChronology).getDuration(instant);\n        long workDuration = currentDuration + (long) valueToAdd * getDurationField().getUnitMillis();\n        int newStart;\n        int newEnd;\n        if (workDuration >= 0) {\n            newStart = getRangeDurationField().getRangeStart(workValue);\n            if (newStart < startValue) {\n                newStart = startValue;\n            }\n            newEnd = getRangeDurationField().add(newStart, range);\n            if (newEnd > workValue) {\n                newEnd = workValue;\n            }\n        } else {\n            newEnd = getRangeDurationField().getRangeEnd(workValue);\n            if (newEnd > startValue) {\n                newEnd = startValue;\n            }\n            newStart = getRangeDurationField().add(newEnd, -range);\n            if (newStart < workValue) {\n                newStart = workValue;\n            }\n        }\n        int[] newValues = set(partial, fieldIndex, values, workValue);\n        newValues[fieldIndex - 1] = newStart;\n        newValues[fieldIndex + 1] = newEnd;\n        return newValues;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..371dfd23 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,92 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        boolean changed = false;\n+        DateTimeField field = null;\n+        DurationField rangeDurationField = null;\n+        for (int i = 0; i < fieldIndex; i++) {\n+            DateTimeField f = partial.getField(iChronology, partial.getFieldType(i));\n+            DurationField r = f.getDurationField();\n+            if (values[i] != f.getMinimumValue() || !r.isSupported() || r.getUnitMillis() <= 0) {\n+                changed = true;\n+                field = f;\n+            } else {\n+                if (rangeDurationField == null) {\n+                    rangeDurationField = r.getRangeDurationField();\n+                } else if (rangeDurationField != r.getRangeDurationField()) {\n+                    changed = true;\n+                    field = f;\n+                }\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if (changed || fieldIndex == 0) {\n+            // non-contiguous or requires larger fields\n+            Chronology chrono = partial.getChronology();\n             long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            for (int i = 0; i < fieldIndex; i++) {\n+                instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] newValues = chrono.get(partial, instant);\n+            if (!DateTimeUtils.isContiguous(partial)) {\n+                newValues = chrono.retain(this, newValues);\n+            }\n+            return newValues;\n+        }\n+        // contiguous, can just add\n+        int startValue = values[fieldIndex];\n+        int range = getRangeDurationField().getDifference(values[fieldIndex + 1], startValue);\n+        int workValue = getDurationField().add(startValue, valueToAdd);\n+        int workMax = getDurationField().getMaximumValue();\n+        if (workValue >= 0 && workValue < workMax) {\n+            return set(partial, fieldIndex, values, workValue);\n+        }\n+\n+        long instant = 0L;\n+        for (int i = 0; i <= fieldIndex; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        long currentDuration = getDurationField().getField(iChronology).getDuration(instant);\n+        long workDuration = currentDuration + (long) valueToAdd * getDurationField().getUnitMillis();\n+        int newStart;\n+        int newEnd;\n+        if (workDuration >= 0) {\n+            newStart = getRangeDurationField().getRangeStart(workValue);\n+            if (newStart < startValue) {\n+                newStart = startValue;\n+            }\n+            newEnd = getRangeDurationField().add(newStart, range);\n+            if (newEnd > workValue) {\n+                newEnd = workValue;\n+            }\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newEnd = getRangeDurationField().getRangeEnd(workValue);\n+            if (newEnd > startValue) {\n+                newEnd = startValue;\n+            }\n+            newStart = getRangeDurationField().add(newEnd, -range);\n+            if (newStart < workValue) {\n+                newStart = workValue;\n+            }\n         }\n+        int[] newValues = set(partial, fieldIndex, values, workValue);\n+        newValues[fieldIndex - 1] = newStart;\n+        newValues[fieldIndex + 1] = newEnd;\n+        return newValues;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}