{
    "patch": "        if (input == null || input.isEmpty()) {\n            return -1;\n        }\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be positive\");\n        }\n        Matcher matcher = pattern.matcher(input);\n        int count = 0;\n        while (matcher.find()) {\n            count++;\n            if (count == n) {\n                return matcher.start();\n            }\n        }\n        return -1;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..c92fe1fa 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,21 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if (input == null || input.isEmpty()) {\n+            return -1;\n+        }\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"n must be positive\");\n+        }\n+        Matcher matcher = pattern.matcher(input);\n+        int count = 0;\n+        while (matcher.find()) {\n+            count++;\n+            if (count == n) {\n+                return matcher.start();\n+            }\n+        }\n+        return -1;\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}