{
    "patch": "    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.getType() == Token.CALL) {\n        findCalledFunctions(child, changed);\n      } else if (child.getType() == Token.FUNCTION) {\n        String functionName = child.getFirstChild().getString();\n        changed.add(functionName);\n        findCalledFunctions(child.getLastChild(), changed);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..3864ab0d 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,13 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+      if (child.getType() == Token.CALL) {\n+        findCalledFunctions(child, changed);\n+      } else if (child.getType() == Token.FUNCTION) {\n+        String functionName = child.getFirstChild().getString();\n+        changed.add(functionName);\n+        findCalledFunctions(child.getLastChild(), changed);\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}