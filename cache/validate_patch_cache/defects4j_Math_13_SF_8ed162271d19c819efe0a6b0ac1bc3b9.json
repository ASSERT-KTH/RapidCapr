{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n\n    // Check if the matrix is positive semidefinite\n    final double trace = dec.getRealEigenvalues()[0];\n    if (trace < 0) {\n        throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n    }\n    \n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n\n    // Take the sqrt of the diagonal matrix\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive semidefinite\");\n        }\n        double sqrtEigenvalue = Math.sqrt(eigenvalue);\n        sqrtD.setEntry(i, i, sqrtEigenvalue);\n    }\n\n    // Compute the square root of the matrix by multiplying the eigenvectors by the sqrt of the diagonal matrix\n    return v.multiply(sqrtD).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..90775bfae 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    // Check if the matrix is positive semidefinite\n+    final double trace = dec.getRealEigenvalues()[0];\n+    if (trace < 0) {\n+        throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n     }\n+    \n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+\n+    // Take the sqrt of the diagonal matrix\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive semidefinite\");\n+        }\n+        double sqrtEigenvalue = Math.sqrt(eigenvalue);\n+        sqrtD.setEntry(i, i, sqrtEigenvalue);\n+    }\n+\n+    // Compute the square root of the matrix by multiplying the eigenvectors by the sqrt of the diagonal matrix\n+    return v.multiply(sqrtD).multiply(v.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}