{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    // The parameters object literal setters can not be removed.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        final Set<String> referenced = Sets.newHashSet(fnScope.getReferenceNames());\n        referenceCollection.addAll(referenced);\n\n        // Strip unreferenced args off the end of the function declaration.\n        if (argList != null) {\n            Node lastArg;\n            while ((lastArg = argList.getLastChild()) != null) {\n                Var var = fnScope.getVar(lastArg.getString());\n                if (!referenced.contains(var)) {\n                    argList.removeChild(lastArg);\n                    compiler.reportCodeChange();\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenceCollection);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..24e73ae0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    // The parameters object literal setters can not be removed.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        final Set<String> referenced = Sets.newHashSet(fnScope.getReferenceNames());\n+        referenceCollection.addAll(referenced);\n+\n+        // Strip unreferenced args off the end of the function declaration.\n+        if (argList != null) {\n+            Node lastArg;\n+            while ((lastArg = argList.getLastChild()) != null) {\n+                Var var = fnScope.getVar(lastArg.getString());\n+                if (!referenced.contains(var)) {\n+                    argList.removeChild(lastArg);\n+                    compiler.reportCodeChange();\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenceCollection);\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}