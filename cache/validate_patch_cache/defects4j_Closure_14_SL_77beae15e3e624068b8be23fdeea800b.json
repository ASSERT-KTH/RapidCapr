{
    "patch": "if (cfa != null) {\n    if (finallyNode == null || finallyNode == node) {\n         return computeFollowNode(fromNode, node, cfa);\n    } else {\n         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n         return computeFallThrough(node.getNext());\n    }\n} else {\n    if (finallyNode.getNext() != null) {\n         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());\n         return computeFallThrough(node.getNext());\n    } else {\n         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n         return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..2944d111 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+    if (finallyNode == null || finallyNode == node) {\n+         return computeFollowNode(fromNode, node, cfa);\n+    } else {\n+         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+         return computeFallThrough(node.getNext());\n+    }\n+} else {\n+    if (finallyNode.getNext() != null) {\n+         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode.getNext());\n+         return computeFallThrough(node.getNext());\n+    } else {\n+         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+         return null;\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}