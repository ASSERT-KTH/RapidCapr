{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // if valueToAdd is zero, return the original array\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // check if the fields in the partial are contiguous\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = Arrays.copyOf(values, values.length);\n        DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n        // if the field being modified is month and the new value is February and day value is 29\n        // and the year is not a leap year, set day to 28\n        if (fieldType == DateTimeFieldType.monthOfYear() && newValues[fieldIndex] == 2 && partial.get(DateTimeFieldType.dayOfMonth()).get(newValues) == 29\n                && !iChronology.isLeapYear(partial.get(DateTimeFieldType.year()).get(newValues))) {\n            newValues[fieldIndex] = fieldType.getField(iChronology).addWrapField(newValues[fieldIndex], valueToAdd);\n            newValues[2] = fieldType.getField(iChronology).getMinimumValue(iChronology.getDateTimeMillis(partial.get(DateTimeFieldType.year()), newValues[fieldIndex]));\n            return newValues;\n        }\n\n        // add the new value to the field\n        newValues[fieldIndex] = fieldType.getField(iChronology).addWrapField(newValues[fieldIndex], valueToAdd);\n        return newValues;\n    } else {\n        // if the fields in the partial are not contiguous, pass control to the super class method\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8492e577 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // if valueToAdd is zero, return the original array\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // check if the fields in the partial are contiguous\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+        // if the field being modified is month and the new value is February and day value is 29\n+        // and the year is not a leap year, set day to 28\n+        if (fieldType == DateTimeFieldType.monthOfYear() && newValues[fieldIndex] == 2 && partial.get(DateTimeFieldType.dayOfMonth()).get(newValues) == 29\n+                && !iChronology.isLeapYear(partial.get(DateTimeFieldType.year()).get(newValues))) {\n+            newValues[fieldIndex] = fieldType.getField(iChronology).addWrapField(newValues[fieldIndex], valueToAdd);\n+            newValues[2] = fieldType.getField(iChronology).getMinimumValue(iChronology.getDateTimeMillis(partial.get(DateTimeFieldType.year()), newValues[fieldIndex]));\n+            return newValues;\n         }\n+\n+        // add the new value to the field\n+        newValues[fieldIndex] = fieldType.getField(iChronology).addWrapField(newValues[fieldIndex], valueToAdd);\n+        return newValues;\n+    } else {\n+        // if the fields in the partial are not contiguous, pass control to the super class method\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}