{
    "patch": "public String getprop(String property) {\n    String value = \"\";\n    try {\n        Properties prop = new Properties();\n        FileInputStream file = new FileInputStream(\"config.properties\");\n        prop.load(file);\n\n        value = prop.getProperty(property);\n        file.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    if (value.isEmpty()) {\n        System.out.println(\"Warning: no value found for property \" + property);\n    }\n\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..05cf9485 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String property) {\n+    String value = \"\";\n+    try {\n+        Properties prop = new Properties();\n+        FileInputStream file = new FileInputStream(\"config.properties\");\n+        prop.load(file);\n+\n+        value = prop.getProperty(property);\n+        file.close();\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (value.isEmpty()) {\n+        System.out.println(\"Warning: no value found for property \" + property);\n+    }\n+\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}