{
    "patch": "         case Token.INC:\n         case Token.DEC:\n           isSet = true;\n           type = Name.Type.OTHER;\n           break;\n         case Token.REGEXP:\n           return;\n         default:\n           if (NodeUtil.isAssignmentOp(parent) &&\n               parent.getFirstChild() == n) {\n             isSet = true;\n             type = Name.Type.OTHER;\n           }\n           break;\n       }\n+      if (n.getJSType() != null && n.getJSType().isConstructor()) {\n+        type = Name.Type.CLASS;\n+      }\n       name = n.getString();\n       break;\n     case Token.GETPROP:",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..d8c1d536 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,27 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+         case Token.INC:\n+         case Token.DEC:\n+           isSet = true;\n+           type = Name.Type.OTHER;\n+           break;\n+         case Token.REGEXP:\n+           return;\n+         default:\n+           if (NodeUtil.isAssignmentOp(parent) &&\n+               parent.getFirstChild() == n) {\n+             isSet = true;\n+             type = Name.Type.OTHER;\n+           }\n+           break;\n+       }\n++      if (n.getJSType() != null && n.getJSType().isConstructor()) {\n++        type = Name.Type.CLASS;\n++      }\n+       name = n.getString();\n+       break;\n+     case Token.GETPROP:\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}