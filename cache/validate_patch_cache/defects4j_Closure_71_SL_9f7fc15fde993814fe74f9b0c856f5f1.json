{
    "patch": "boolean isOverride = false;\nif (objectType != null) {\n  // Is this a normal property access, or are we trying to override\n  // an existing property?\n  isOverride = t.getScope().isGlobal() &&\n               parent.getType() == Token.ASSIGN &&\n               parent.getFirstChild() == getprop;\n  // Find the lowest property defined on a class with visibility\n  // information.\n  if (isOverride) {\n    objectType = objectType.getImplicitPrototype();\n  }\n  JSDocInfo docInfo = null;\n  for (; objectType != null;\n       objectType = objectType.getImplicitPrototype()) {\n    docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n    if (docInfo != null &&\n        docInfo.getVisibility() != Visibility.INHERITED) {\n      break;\n    }\n  }\n  // the rest of the method...\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..c10a51b8 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,29 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false;\n+if (objectType != null) {\n+  // Is this a normal property access, or are we trying to override\n+  // an existing property?\n+  isOverride = t.getScope().isGlobal() &&\n+               parent.getType() == Token.ASSIGN &&\n+               parent.getFirstChild() == getprop;\n+  // Find the lowest property defined on a class with visibility\n+  // information.\n+  if (isOverride) {\n+    objectType = objectType.getImplicitPrototype();\n+  }\n+  JSDocInfo docInfo = null;\n+  for (; objectType != null;\n+       objectType = objectType.getImplicitPrototype()) {\n+    docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+    if (docInfo != null &&\n+        docInfo.getVisibility() != Visibility.INHERITED) {\n+      break;\n+    }\n+  }\n+  // the rest of the method...\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}