{
    "patch": "        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        if (functionType.getTypeOfThis() != null) {\n          Node parent = n.getParent();\n          if (parent.isGetElem() || parent.isGetProp()) {\n            Node receiver = parent.getFirstChild();\n            JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();\n            JSType expectedType =\n                functionType.getTypeOfThis().evaluate(scope, typeRegistry).getExpandedType();\n            if (!receiverType.isSubtypeOf(expectedType)) {\n              report(t, receiver, INVALID_THIS_TYPE, receiverType.toString(), expectedType);\n            }\n          } else {\n            report(t, n, NO_EXPLICIT_THIS,\n                functionType.getTypeOfThis().evaluate(scope, typeRegistry));\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e2b5970c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+        // Functions with explicit 'this' types must be called in a GETPROP\n+        // or GETELEM.\n+        if (functionType.getTypeOfThis() != null) {\n+          Node parent = n.getParent();\n+          if (parent.isGetElem() || parent.isGetProp()) {\n+            Node receiver = parent.getFirstChild();\n+            JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();\n+            JSType expectedType =\n+                functionType.getTypeOfThis().evaluate(scope, typeRegistry).getExpandedType();\n+            if (!receiverType.isSubtypeOf(expectedType)) {\n+              report(t, receiver, INVALID_THIS_TYPE, receiverType.toString(), expectedType);\n+            }\n+          } else {\n+            report(t, n, NO_EXPLICIT_THIS,\n+                functionType.getTypeOfThis().evaluate(scope, typeRegistry));\n+          }\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}