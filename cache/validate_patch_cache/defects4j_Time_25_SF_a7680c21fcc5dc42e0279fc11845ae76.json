{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the initial estimate of the offset.    \n    int initialOffset = getOffset(instantLocal);\n    int j = 0;\n    while (true) {\n        // getNextTransition instant and its offset\n        long nextTransition = nextTransition(instantLocal + (j * 86400000));\n        int nextOffset = getOffset(nextTransition);\n \n        // if there is no transition based on the initial offset estimate, return it.\n        if (initialOffset == nextOffset) {\n            return initialOffset;\n        }\n \n        // find a new transition based on the initial offset estimate.\n        long transition = nextTransition - (initialOffset * 60000L);\n        if (transition == instantLocal) {\n            // If the new transition and the instantLocal are same, it cannot be resolved due to precision limitations.\n            // Return the closest (smaller) offset as per the initial estimate as a result.\n            return initialOffset;\n        }\n \n        // get the new offset estimate based on the new transition\n        int newOffset = getOffset(transition);\n \n        if (initialOffset - nextOffset > 0) {\n            // If going back in time, confirm that the local time is before the\n            // transition or equal to it. Add one day to handle the extreme case that all\n            // days in between transitons are skipped due to grace offsets.\n            if (newOffset < initialOffset || instantLocal < (transition + DAY)) {\n                return initialOffset;\n            }\n        } else if (initialOffset - nextOffset < 0) {\n            // If moving forward in time, confirm that the local time is after the transition\n            // or equal to it.\n            if (newOffset != initialOffset && instantLocal >= transition) {\n              return newOffset;\n            }\n        }\n        j++;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c487a271 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,48 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the initial estimate of the offset.    \n+    int initialOffset = getOffset(instantLocal);\n+    int j = 0;\n+    while (true) {\n+        // getNextTransition instant and its offset\n+        long nextTransition = nextTransition(instantLocal + (j * 86400000));\n+        int nextOffset = getOffset(nextTransition);\n+ \n+        // if there is no transition based on the initial offset estimate, return it.\n+        if (initialOffset == nextOffset) {\n+            return initialOffset;\n+        }\n+ \n+        // find a new transition based on the initial offset estimate.\n+        long transition = nextTransition - (initialOffset * 60000L);\n+        if (transition == instantLocal) {\n+            // If the new transition and the instantLocal are same, it cannot be resolved due to precision limitations.\n+            // Return the closest (smaller) offset as per the initial estimate as a result.\n+            return initialOffset;\n+        }\n+ \n+        // get the new offset estimate based on the new transition\n+        int newOffset = getOffset(transition);\n+ \n+        if (initialOffset - nextOffset > 0) {\n+            // If going back in time, confirm that the local time is before the\n+            // transition or equal to it. Add one day to handle the extreme case that all\n+            // days in between transitons are skipped due to grace offsets.\n+            if (newOffset < initialOffset || instantLocal < (transition + DAY)) {\n+                return initialOffset;\n+            }\n+        } else if (initialOffset - nextOffset < 0) {\n+            // If moving forward in time, confirm that the local time is after the transition\n+            // or equal to it.\n+            if (newOffset != initialOffset && instantLocal >= transition) {\n+              return newOffset;\n             }\n         }\n-        return offsetAdjusted;\n+        j++;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}