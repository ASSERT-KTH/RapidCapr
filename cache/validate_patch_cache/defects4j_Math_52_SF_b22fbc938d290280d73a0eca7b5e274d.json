{
    "patch": "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  if (Double.isNaN(alpha) || Double.isNaN(beta)) {\n    // Handle the case where alpha or beta is NaN (i.e. c == 0).\n    // In this case, v1 and/or v2 are linearly dependent on u1 and/or u2.\n    // We can choose any vector orthogonal to u1 and/or u2 to compute the rotation.\n    // Here, we choose v1 x u1 or v2 x u2, whichever is not zero.\n    Vector3D k;\n    if (u1.crossProduct(v1).getNormSq() > 1e-12) {\n      k = u1.crossProduct(v1);\n    } else if (u2.crossProduct(v2).getNormSq() > 1e-12) {\n      k = u2.crossProduct(v2);\n    } else {\n      // The vectors are almost parallel. Return the identity rotation.\n      q0 = 1.0;\n      q1 = 0.0;\n      q2 = 0.0;\n      q3 = 0.0;\n      return;\n    }\n    double normK = k.getNorm();\n    Vector3D w = new Vector3D(k.getX()/normK, k.getY()/normK, k.getZ()/normK);\n    v2 = u1.crossProduct(w);\n    alpha = 0.0;\n    beta = v1.dotProduct(v2) / u1.dotProduct(u2);\n  } else {\n    v2 = new Vector3D(alpha, v1, beta, v2);\n  }\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // computation of the scalar part\n  double s = FastMath.sqrt((1.0 + c) * 2.0);\n  double oneOverS = 1.0 / s;\n\n  // build the quaternion\n  q0 = 0.5 * s;\n  Vector3D temp = k.scalarMultiply(oneOverS);\n  q1 = temp.getX();\n  q2 = temp.getY();\n  q3 = temp.getZ();\n\n  // adjust the vectorial part for uRef and vRef\n  Vector3D uRefVN = new Vector3D(1.0, uRef, - q1 * q1, vRef);\n  Vector3D vRefVN = new Vector3D(1.0, vRef,   q1 * q1, uRef);\n\n  temp = uRefVN.crossProduct(vRefVN);\n  double sign = (temp.dotProduct(k) >= 0.0) ? 1.0 : -1.0;\n  q1 *= sign;\n  q2 *= sign;\n  q3 *= sign;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..bd42f8bfb 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -331,7 +331,32 @@ public class Rotation implements Serializable {\n   double coeffV = v1v2 / u1u1;\n   double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n   double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n+  if (Double.isNaN(alpha) || Double.isNaN(beta)) {\n+    // Handle the case where alpha or beta is NaN (i.e. c == 0).\n+    // In this case, v1 and/or v2 are linearly dependent on u1 and/or u2.\n+    // We can choose any vector orthogonal to u1 and/or u2 to compute the rotation.\n+    // Here, we choose v1 x u1 or v2 x u2, whichever is not zero.\n+    Vector3D k;\n+    if (u1.crossProduct(v1).getNormSq() > 1e-12) {\n+      k = u1.crossProduct(v1);\n+    } else if (u2.crossProduct(v2).getNormSq() > 1e-12) {\n+      k = u2.crossProduct(v2);\n+    } else {\n+      // The vectors are almost parallel. Return the identity rotation.\n+      q0 = 1.0;\n+      q1 = 0.0;\n+      q2 = 0.0;\n+      q3 = 0.0;\n+      return;\n+    }\n+    double normK = k.getNorm();\n+    Vector3D w = new Vector3D(k.getX()/normK, k.getY()/normK, k.getZ()/normK);\n+    v2 = u1.crossProduct(w);\n+    alpha = 0.0;\n+    beta = v1.dotProduct(v2) / u1.dotProduct(u2);\n+  } else {\n+    v2 = new Vector3D(alpha, v1, beta, v2);\n+  }\n \n   // preliminary computation\n   Vector3D uRef  = u1;\n@@ -353,8 +378,8 @@ public class Rotation implements Serializable {\n     if (c == 0) {\n       // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n+      k = v2Su2.crossProduct(v3Su3);\n+      c = k.dotProduct(u2.crossProduct(u3));\n \n       if (c == 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n@@ -374,6 +399,29 @@ public class Rotation implements Serializable {\n \n   }\n \n+  // computation of the scalar part\n+  double s = FastMath.sqrt((1.0 + c) * 2.0);\n+  double oneOverS = 1.0 / s;\n+\n+  // build the quaternion\n+  q0 = 0.5 * s;\n+  Vector3D temp = k.scalarMultiply(oneOverS);\n+  q1 = temp.getX();\n+  q2 = temp.getY();\n+  q3 = temp.getZ();\n+\n+  // adjust the vectorial part for uRef and vRef\n+  Vector3D uRefVN = new Vector3D(1.0, uRef, - q1 * q1, vRef);\n+  Vector3D vRefVN = new Vector3D(1.0, vRef,   q1 * q1, uRef);\n+\n+  temp = uRefVN.crossProduct(vRefVN);\n+  double sign = (temp.dotProduct(k) >= 0.0) ? 1.0 : -1.0;\n+  q1 *= sign;\n+  q2 *= sign;\n+  q3 *= sign;\n+\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}