{
    "patch": "import com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.rhino.JSDocInfo;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.ast.Var;\n\nimport java.util.List;\n\npublic class MyRepairTool {\n  private Node assignLhsChild;\n\n  private JSDocInfo getFunctionJsDocInfo(Node n) {\n    List<JSDocInfo> infos = NodeUtil.getFunctionJSDocInfo(n);\n    if (infos != null && !infos.isEmpty()) {\n      return infos.get(0);\n    }\n    return null;\n  }\n\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent) && NodeUtil.isName(parent.getFirstChild())) {\n        Var var = t.getScope().getVar(parent.getFirstChild().getString());\n        if (var != null && var.isConstructor()) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions unless they are defined as a var, on a prototype,\n      // or as the right-hand side of an assignment.\n      int pType = parent.getType();\n      if (!(pType == Token.VAR || pType == Token.ASSIGN || NodeUtil.isObjectLitKey(parent))) {\n        return false;\n      }\n\n      // Ensure that function expression assigned to a variable is not skipped.\n      if (pType == Token.ASSIGN && parent.getFirstChild() == n) {\n        return true;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..55b76ec6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,45 +79,57 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.ast.Var;\n+\n+import java.util.List;\n+\n+public class MyRepairTool {\n+  private Node assignLhsChild;\n+\n+  private JSDocInfo getFunctionJsDocInfo(Node n) {\n+    List<JSDocInfo> infos = NodeUtil.getFunctionJSDocInfo(n);\n+    if (infos != null && !infos.isEmpty()) {\n+      return infos.get(0);\n+    }\n+    return null;\n+  }\n \n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n+      // Don't traverse functions that are constructors or have the @this or @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && NodeUtil.isName(parent.getFirstChild())) {\n+        Var var = t.getScope().getVar(parent.getFirstChild().getString());\n+        if (var != null && var.isConstructor()) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions unless they are defined as a var, on a prototype,\n+      // or as the right-hand side of an assignment.\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      if (!(pType == Token.VAR || pType == Token.ASSIGN || NodeUtil.isObjectLitKey(parent))) {\n         return false;\n       }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+      // Ensure that function expression assigned to a variable is not skipped.\n+      if (pType == Token.ASSIGN && parent.getFirstChild() == n) {\n+        return true;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-\n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n         // nested assignments properly (e.g., (a = this).property = c;),\n@@ -129,21 +141,21 @@ final class CheckGlobalThis implements Callback {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n         if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n           Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n         }\n       }\n+      return true;\n     }\n \n     return true;\n   }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}