{
    "patch": "      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      if (argument.isDefaultValue()) {\n        // If argument is a default value, skip to the next parameter\n        continue;\n      }\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    if (numArgs < functionType.getMinimumArguments()) {\n      // If there are less arguments than minimum\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n      return;\n    }\n\n    // Handle remaining parameters\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (parameter.isVarArgs()) {\n        // If remaining parameter is var args, all additional arguments are allowed\n        return;\n      }\n      if (parameter.isOptionalArg()) {\n        continue;\n      }\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n      return;\n    }\n\n    if (numArgs > functionType.getMaximumArguments()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n                  \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n      return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..a1f56695 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,23 +1396,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n+      if (argument.isDefaultValue()) {\n+        // If argument is a default value, skip to the next parameter\n+        continue;\n+      }\n+\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n@@ -1420,14 +1412,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+\n+    if (numArgs < functionType.getMinimumArguments()) {\n+      // If there are less arguments than minimum\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      return;\n     }\n-  }\n+\n+    // Handle remaining parameters\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (parameter.isVarArgs()) {\n+        // If remaining parameter is var args, all additional arguments are allowed\n+        return;\n+      }\n+      if (parameter.isOptionalArg()) {\n+        continue;\n+      }\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(numArgs), String.valueOf(minArgs),\n+              maxArgs != Integer.MAX_VALUE ?\n+              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      return;\n+    }\n+\n+    if (numArgs > functionType.getMaximumArguments()) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(numArgs), String.valueOf(minArgs),\n+              maxArgs != Integer.MAX_VALUE ?\n+                  \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      return;\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}