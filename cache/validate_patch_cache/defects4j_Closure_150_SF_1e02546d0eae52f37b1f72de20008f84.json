{
    "patch": "      switch (n.getToken()) {\n        case FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n            return;\n          }\n          break;\n\n        case LP:\n          Node grandParent = parent.getParent();\n          if (grandParent != null && grandParent.isFunction()) {\n            handleFunctionInputs(n.getNext(), grandParent);\n            return;\n          }\n          break;\n\n        case CATCH:\n          defineCatch(n, parent);\n          return;\n\n        case VAR:\n          defineVar(n, parent);\n          return;\n\n        default:\n          break;\n      }\n\n      attachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b309e7a0 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,35 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+      switch (n.getToken()) {\n+        case FUNCTION:\n+          if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n+            return;\n+          }\n+          break;\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        case LP:\n+          Node grandParent = parent.getParent();\n+          if (grandParent != null && grandParent.isFunction()) {\n+            handleFunctionInputs(n.getNext(), grandParent);\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+\n+        case CATCH:\n           defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+          return;\n+\n+        case VAR:\n           defineVar(n, parent);\n+          return;\n+\n+        default:\n           break;\n       }\n-    }\n+\n+      attachLiteralTypes(n);\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}