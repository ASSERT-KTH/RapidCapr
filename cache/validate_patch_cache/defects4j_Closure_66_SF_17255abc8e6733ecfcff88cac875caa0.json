{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JSONObject jo = new JSONObject(json);\n        JSONArray types = jo.getJSONArray(\"types\");\n        int typeCount = 0;\n        int typedCount = 0;\n        for (int i = 0; i < types.length(); i++) {\n            JSONObject type = types.getJSONObject(i);\n            if (type.getBoolean(\"typed\")) {\n                typedCount++;\n            }\n            typeCount++;\n        }\n        return (double) typedCount / typeCount * 100.0;\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..74135d10 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JSONObject jo = new JSONObject(json);\n+        JSONArray types = jo.getJSONArray(\"types\");\n+        int typeCount = 0;\n+        int typedCount = 0;\n+        for (int i = 0; i < types.length(); i++) {\n+            JSONObject type = types.getJSONObject(i);\n+            if (type.getBoolean(\"typed\")) {\n+                typedCount++;\n+            }\n+            typeCount++;\n+        }\n+        return (double) typedCount / typeCount * 100.0;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}