{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double eps = 1e-15;\n    double gln = gammaLn(a);\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x < a + 1.0) {\n        double ap = a;\n        double del = 1.0 / a;\n        double sum = del;\n\n        while (Math.abs(del) > Math.abs(sum) * eps) {\n            ap += 1.0;\n            del *= x / ap;\n            sum += del;\n        }\n\n        return sum * Math.exp(-x + a * Math.log(x) - gln);\n    } else {\n        double b = x + 1.0 - a;\n        double c = 1.0 / eps;\n        double d = 1.0 / b;\n        double h = d;\n\n        for (int i = 1; i <= Integer.MAX_VALUE; i++) {\n            double an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < eps) {\n                d = eps;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < eps) {\n                c = eps;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < eps) {\n                break;\n            }\n        }\n\n        return 1.0 - h * Math.exp(-x + a * Math.log(x) - gln);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6f65212a8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double eps = 1e-15;\n+    double gln = gammaLn(a);\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < a + 1.0) {\n+        double ap = a;\n+        double del = 1.0 / a;\n+        double sum = del;\n+\n+        while (Math.abs(del) > Math.abs(sum) * eps) {\n+            ap += 1.0;\n+            del *= x / ap;\n+            sum += del;\n+        }\n+\n+        return sum * Math.exp(-x + a * Math.log(x) - gln);\n+    } else {\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / eps;\n+        double d = 1.0 / b;\n+        double h = d;\n+\n+        for (int i = 1; i <= Integer.MAX_VALUE; i++) {\n+            double an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) < eps) {\n+                d = eps;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < eps) {\n+                c = eps;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < eps) {\n+                break;\n+            }\n+        }\n+\n+        return 1.0 - h * Math.exp(-x + a * Math.log(x) - gln);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}