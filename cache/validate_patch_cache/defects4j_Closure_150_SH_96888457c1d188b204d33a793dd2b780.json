{
    "patch": "attachLiteralTypes(n);\nif (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n  defineDeclaredFunction(n, parent);\n} else if (n.getType() == Token.CATCH) {\n  defineCatch(n, parent);\n} else if (n.getType() == Token.VAR) {\n  defineVar(n, parent);\n} else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n  handleFunctionInputs(parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..780dccb3 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,16 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n+  defineDeclaredFunction(n, parent);\n+} else if (n.getType() == Token.CATCH) {\n+  defineCatch(n, parent);\n+} else if (n.getType() == Token.VAR) {\n+  defineVar(n, parent);\n+} else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+  handleFunctionInputs(parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}