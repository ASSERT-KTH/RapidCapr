{
    "patch": "        int firstSigDig = -1;\n        int sz = val.length();\n        for(int i = 0; i < sz; i++) {\n            char ch = val.charAt(i);\n            if(ch == '+' || ch == '-') {\n                if(i != 0) {\n                    break;\n                }\n            } else if(Character.isDigit(ch)) {\n                if(firstSigDig == -1) {\n                    firstSigDig = i;\n                }\n            } else if(ch == '.') {\n                if(decPos >= 0) {\n                    throw new NumberFormatException(String.format(\"Found multiple decimal points in string %s\", val));\n                }\n                decPos = i;\n            } else if(ch == 'e' || ch == 'E') {\n                expPos = i;\n                break;\n            } else {\n                throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n            }\n        }\n        if(firstSigDig == -1) {\n            throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n        }\n        StringBuilder mant = new StringBuilder(sz);\n        char ch = val.charAt(firstSigDig);\n        for(int i = firstSigDig; i < sz; i++) {\n            ch = val.charAt(i);\n            if (ch == '.') {\n                if (decPos >= 0) {\n                    throw new NumberFormatException(String.format(\"Found multiple decimal points in string %s\", val));\n                }\n                decPos = i;\n            } else if (ch == 'e' || ch == 'E') {\n                expPos = i;\n                break;\n            } else if (ch == '+' || ch == '-') {\n                //ignore\n            } else if (!Character.isDigit(ch)) {\n                throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n            } else {\n                mant.append(ch);\n            }\n        }\n        if (decPos >= 0 || expPos >= 0) {\n            if (expPos <= decPos && expPos >= 0) {\n                throw new NumberFormatException(String.format(\"E found in position %s after decimal point\", expPos));\n            }\n            int max = sz - 1;\n            StringBuilder tmp = new StringBuilder(max);\n            if (decPos >= 0) {\n                for (int i = decPos + 1; i < sz; i++) {\n                    ch = val.charAt(i);\n                    if (ch == 'e' || ch == 'E') {\n                        expPos = i;\n                        break;\n                    } else if (!Character.isDigit(ch)) {\n                        throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n                    } else {\n                        tmp.append(ch);\n                    }\n                }\n            }\n            if (expPos >= 0) {\n                if (expPos == 0 || expPos == sz - 1) {\n                    throw new NumberFormatException(String.format(\"Invalid format, E at beginning or end of string: %s\", val));\n                }\n                String expString = val.substring(expPos+1, sz);\n                if(expString.length() > 0 && (expString.charAt(0) == '+' || expString.charAt(0) == '-')) {\n                    throw new NumberFormatException(String.format(\"Invalid format, leading sign: %s\", val));\n                }\n                for (int i = 0; i < expString.length(); i++) {\n                    ch = expString.charAt(i);\n                    if (!Character.isDigit(ch)) {\n                        throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n                    }\n                    tmp.append(ch);\n                }\n            }\n            if(tmp.length() == 0) {\n                expPos = -1;\n            }\n            else {\n                expOffset = mant.length() - decPos;\n            }\n            mant.append(tmp);\n        }\n        if (expPos >= 0) {\n            exp = Integer.parseInt(val.substring(expPos+1)) - expOffset;\n            if(exp < 0) {\n                throw new NumberFormatException(String.format(\"Exponent %s less than zero\", exp));\n            }\n        }\n\n        if (mant.length() == 0) {\n            return new BigDecimal(val);\n        }\n\n        if (exp < 0) {\n            int zeros = -exp - mant.length();\n            if (zeros >= 0) {\n                StringBuilder buf = new StringBuilder((mant.length() + zeros + 2));\n                buf.append(ch);\n                buf.append('.');\n                for (int i=0; i<zeros; i++) {\n                    buf.append('0');\n                }\n                buf.append(mant);\n                return new BigDecimal(buf.toString());\n\n            } else {\n                StringBuilder buf = new StringBuilder(mant.length()+2);\n                buf.append(ch);\n                buf.append(mant.substring(0, mant.length()+exp));\n                buf.append('.');\n                buf.append(mant.substring(mant.length()+exp));\n                return new BigDecimal(buf.toString());\n            }\n        } else if (exp > 0) {\n            return new BigDecimal(ch + mant.toString() + StringUtils.repeat('0', exp));\n        } else {\n            return new BigDecimal(ch + mant.toString());\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..ae5c724e 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,132 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        int firstSigDig = -1;\n+        int sz = val.length();\n+        for(int i = 0; i < sz; i++) {\n+            char ch = val.charAt(i);\n+            if(ch == '+' || ch == '-') {\n+                if(i != 0) {\n+                    break;\n+                }\n+            } else if(Character.isDigit(ch)) {\n+                if(firstSigDig == -1) {\n+                    firstSigDig = i;\n+                }\n+            } else if(ch == '.') {\n+                if(decPos >= 0) {\n+                    throw new NumberFormatException(String.format(\"Found multiple decimal points in string %s\", val));\n+                }\n+                decPos = i;\n+            } else if(ch == 'e' || ch == 'E') {\n+                expPos = i;\n+                break;\n+            } else {\n+                throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n+            }\n+        }\n+        if(firstSigDig == -1) {\n+            throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n+        }\n+        StringBuilder mant = new StringBuilder(sz);\n+        char ch = val.charAt(firstSigDig);\n+        for(int i = firstSigDig; i < sz; i++) {\n+            ch = val.charAt(i);\n+            if (ch == '.') {\n+                if (decPos >= 0) {\n+                    throw new NumberFormatException(String.format(\"Found multiple decimal points in string %s\", val));\n+                }\n+                decPos = i;\n+            } else if (ch == 'e' || ch == 'E') {\n+                expPos = i;\n+                break;\n+            } else if (ch == '+' || ch == '-') {\n+                //ignore\n+            } else if (!Character.isDigit(ch)) {\n+                throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n+            } else {\n+                mant.append(ch);\n+            }\n+        }\n+        if (decPos >= 0 || expPos >= 0) {\n+            if (expPos <= decPos && expPos >= 0) {\n+                throw new NumberFormatException(String.format(\"E found in position %s after decimal point\", expPos));\n+            }\n+            int max = sz - 1;\n+            StringBuilder tmp = new StringBuilder(max);\n+            if (decPos >= 0) {\n+                for (int i = decPos + 1; i < sz; i++) {\n+                    ch = val.charAt(i);\n+                    if (ch == 'e' || ch == 'E') {\n+                        expPos = i;\n+                        break;\n+                    } else if (!Character.isDigit(ch)) {\n+                        throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n+                    } else {\n+                        tmp.append(ch);\n+                    }\n+                }\n+            }\n+            if (expPos >= 0) {\n+                if (expPos == 0 || expPos == sz - 1) {\n+                    throw new NumberFormatException(String.format(\"Invalid format, E at beginning or end of string: %s\", val));\n+                }\n+                String expString = val.substring(expPos+1, sz);\n+                if(expString.length() > 0 && (expString.charAt(0) == '+' || expString.charAt(0) == '-')) {\n+                    throw new NumberFormatException(String.format(\"Invalid format, leading sign: %s\", val));\n+                }\n+                for (int i = 0; i < expString.length(); i++) {\n+                    ch = expString.charAt(i);\n+                    if (!Character.isDigit(ch)) {\n+                        throw new NumberFormatException(String.format(\"For input string: \\\"%s\\\"\", val));\n+                    }\n+                    tmp.append(ch);\n+                }\n+            }\n+            if(tmp.length() == 0) {\n+                expPos = -1;\n+            }\n+            else {\n+                expOffset = mant.length() - decPos;\n+            }\n+            mant.append(tmp);\n+        }\n+        if (expPos >= 0) {\n+            exp = Integer.parseInt(val.substring(expPos+1)) - expOffset;\n+            if(exp < 0) {\n+                throw new NumberFormatException(String.format(\"Exponent %s less than zero\", exp));\n+            }\n+        }\n+\n+        if (mant.length() == 0) {\n+            return new BigDecimal(val);\n+        }\n+\n+        if (exp < 0) {\n+            int zeros = -exp - mant.length();\n+            if (zeros >= 0) {\n+                StringBuilder buf = new StringBuilder((mant.length() + zeros + 2));\n+                buf.append(ch);\n+                buf.append('.');\n+                for (int i=0; i<zeros; i++) {\n+                    buf.append('0');\n+                }\n+                buf.append(mant);\n+                return new BigDecimal(buf.toString());\n+\n+            } else {\n+                StringBuilder buf = new StringBuilder(mant.length()+2);\n+                buf.append(ch);\n+                buf.append(mant.substring(0, mant.length()+exp));\n+                buf.append('.');\n+                buf.append(mant.substring(mant.length()+exp));\n+                return new BigDecimal(buf.toString());\n+            }\n+        } else if (exp > 0) {\n+            return new BigDecimal(ch + mant.toString() + StringUtils.repeat('0', exp));\n+        } else {\n+            return new BigDecimal(ch + mant.toString());\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}