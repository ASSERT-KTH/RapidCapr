{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = savedFields.clone();\n            iSavedFieldsShared = false;\n        }\n\n        sort(savedFields, count);\n        int monthsIndex = -1, daysIndex = -1;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (monthsIndex == -1 && field.getDurationField() == DurationFieldType.months().getField(iChrono)) {\n                monthsIndex = i;\n            } else if (daysIndex == -1 && field.getDurationField() == DurationFieldType.days().getField(iChrono)) {\n                daysIndex = i;\n            }\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            }\n        }\n\n        if (daysIndex != -1 && savedFields[0].iField.getDurationField() == DurationFieldType.weekyears().getField(iChrono)) {\n            if (monthsIndex != -1 && monthsIndex < daysIndex) {\n                // swap months and days\n                SavedField tmp = savedFields[monthsIndex];\n                savedFields[monthsIndex] = savedFields[daysIndex];\n                savedFields[daysIndex] = tmp;\n                monthsIndex = daysIndex; // correction\n            }\n            millis = savedFields[0].set(millis, iDefaultYear);\n            for (int i = 1; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                    }\n                    throw e;\n                }\n            }\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..873695c8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -331,49 +331,66 @@ public class DateTimeParserBucket {\n     public long computeMillis(boolean resetFields, String text) {\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n+\n         if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+            iSavedFields = savedFields = savedFields.clone();\n             iSavedFieldsShared = false;\n         }\n+\n         sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+        int monthsIndex = -1, daysIndex = -1;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (monthsIndex == -1 && field.getDurationField() == DurationFieldType.months().getField(iChrono)) {\n+                monthsIndex = i;\n+            } else if (daysIndex == -1 && field.getDurationField() == DurationFieldType.days().getField(iChrono)) {\n+                daysIndex = i;\n+            }\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n             }\n         }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+        if (daysIndex != -1 && savedFields[0].iField.getDurationField() == DurationFieldType.weekyears().getField(iChrono)) {\n+            if (monthsIndex != -1 && monthsIndex < daysIndex) {\n+                // swap months and days\n+                SavedField tmp = savedFields[monthsIndex];\n+                savedFields[monthsIndex] = savedFields[daysIndex];\n+                savedFields[daysIndex] = tmp;\n+                monthsIndex = daysIndex; // correction\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            millis = savedFields[0].set(millis, iDefaultYear);\n+            for (int i = 1; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                    }\n+                    throw e;\n+                }\n             }\n-            throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n+\n         return millis;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}