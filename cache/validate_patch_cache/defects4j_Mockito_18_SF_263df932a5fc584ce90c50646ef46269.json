{
    "patch": "public Object handle(Invocation invocation) throws Throwable {\n    Object value = invocation.proceed();\n    if (value instanceof Iterable) {\n        Iterator iterator = ((Iterable) value).iterator();\n        if (iterator.hasNext()) {\n            if (iterator.next() instanceof String) {\n                String str = (String) iterator.next();\n                if (str.isEmpty()) {\n                    return Arrays.asList(\"\");\n                }\n            }\n            return value;\n        }\n        return Arrays.asList(\"\");\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..3455802b2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Object handle(Invocation invocation) throws Throwable {\n+    Object value = invocation.proceed();\n+    if (value instanceof Iterable) {\n+        Iterator iterator = ((Iterable) value).iterator();\n+        if (iterator.hasNext()) {\n+            if (iterator.next() instanceof String) {\n+                String str = (String) iterator.next();\n+                if (str.isEmpty()) {\n+                    return Arrays.asList(\"\");\n+                }\n+            }\n+            return value;\n+        }\n+        return Arrays.asList(\"\");\n+    }\n+    return value;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}