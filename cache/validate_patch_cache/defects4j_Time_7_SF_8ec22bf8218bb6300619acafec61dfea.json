{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    \n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n    \n    int newPos = position;\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n\n    newPos = parser.parseInto(bucket, text, newPos);\n    if (newPos >= 0 && (iOffsetParsed || !bucket.getOffsetInteger().equals(zone.getOffset(instantLocal)))) {\n        zone = iOffsetParsed ? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()) : bucket.getZone();\n        if (zone != null) {\n            bucket = new DateTimeParserBucket(instantLocal, chrono.withZone(zone), iLocale, pivotYear, defaultYear);\n            newPos = parser.parseInto(bucket, text, position);\n            if (newPos >= 0 && (iOffsetParsed || !bucket.getOffsetInteger().equals(zone.getOffset(instantLocal)))) {\n                zone = iOffsetParsed ? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()) : bucket.getZone();\n            }\n        }\n\n        instantLocal = bucket.computeMillis();\n        if (iOffsetParsed) {\n            long parsedOffset = bucket.getOffsetInteger().longValue();\n            instantLocal -= parsedOffset;\n        }\n    } else {\n        instantLocal = bucket.computeMillis();\n    }\n\n    if (newPos < 0) {\n        if (newPos == ~position) {\n            newPos = ~newPos;\n        }\n        instant.setMillis(instantLocal);\n        return newPos;\n    }\n\n    // handle time zone\n    DateTimeZone parsedZone = iOffsetParsed ? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()) : bucket.getZone();\n    if (parsedZone != null) {\n        chrono = chrono.withZone(parsedZone);\n    } else {\n        chrono = chrono.withZone(zone);\n    }\n\n    instant.setChronology(chrono);\n    instant.setMillis(instantLocal);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    } else if (parsedZone != null) {\n        instant.setZone(parsedZone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..c131dd52 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,72 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    \n+    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+    \n+    int newPos = position;\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n+\n+    newPos = parser.parseInto(bucket, text, newPos);\n+    if (newPos >= 0 && (iOffsetParsed || !bucket.getOffsetInteger().equals(zone.getOffset(instantLocal)))) {\n+        zone = iOffsetParsed ? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()) : bucket.getZone();\n+        if (zone != null) {\n+            bucket = new DateTimeParserBucket(instantLocal, chrono.withZone(zone), iLocale, pivotYear, defaultYear);\n+            newPos = parser.parseInto(bucket, text, position);\n+            if (newPos >= 0 && (iOffsetParsed || !bucket.getOffsetInteger().equals(zone.getOffset(instantLocal)))) {\n+                zone = iOffsetParsed ? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()) : bucket.getZone();\n+            }\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+\n+        instantLocal = bucket.computeMillis();\n+        if (iOffsetParsed) {\n+            long parsedOffset = bucket.getOffsetInteger().longValue();\n+            instantLocal -= parsedOffset;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    } else {\n+        instantLocal = bucket.computeMillis();\n+    }\n+\n+    if (newPos < 0) {\n+        if (newPos == ~position) {\n+            newPos = ~newPos;\n         }\n+        instant.setMillis(instantLocal);\n         return newPos;\n     }\n \n+    // handle time zone\n+    DateTimeZone parsedZone = iOffsetParsed ? DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()) : bucket.getZone();\n+    if (parsedZone != null) {\n+        chrono = chrono.withZone(parsedZone);\n+    } else {\n+        chrono = chrono.withZone(zone);\n+    }\n+\n+    instant.setChronology(chrono);\n+    instant.setMillis(instantLocal);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    } else if (parsedZone != null) {\n+        instant.setZone(parsedZone);\n+    }\n+\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}