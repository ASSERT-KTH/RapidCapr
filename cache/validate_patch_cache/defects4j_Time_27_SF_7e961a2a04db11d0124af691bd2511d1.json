{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> subList = elementPairs.subList(1, size);\n        List<Object> flattenedList = new ArrayList<Object>();\n        for (Object obj : subList) {\n            if (obj instanceof Separator) {\n                Separator subSep = (Separator) obj;\n                PeriodFormatter f = toFormatter(flattenedList, notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                sep = subSep.finish(sep.getPrinter(), sep.getParser());\n                flattenedList.clear();\n            } else {\n                flattenedList.add(obj);\n            }\n        }\n        PeriodFormatter f = toFormatter(flattenedList, notPrinter, notParser);\n        if (f == null) {\n            return null;\n        }\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        if (comp[1] == null) {\n            return null;\n        }\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        if (comp[0] == null) {\n            return null;\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..4c2ac05a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,48 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> subList = elementPairs.subList(1, size);\n+        List<Object> flattenedList = new ArrayList<Object>();\n+        for (Object obj : subList) {\n+            if (obj instanceof Separator) {\n+                Separator subSep = (Separator) obj;\n+                PeriodFormatter f = toFormatter(flattenedList, notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+                sep = subSep.finish(sep.getPrinter(), sep.getParser());\n+                flattenedList.clear();\n+            } else {\n+                flattenedList.add(obj);\n+            }\n         }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        PeriodFormatter f = toFormatter(flattenedList, notPrinter, notParser);\n+        if (f == null) {\n+            return null;\n         }\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n     }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        if (comp[1] == null) {\n+            return null;\n+        }\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        if (comp[0] == null) {\n+            return null;\n+        }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}