{
    "patch": "private void readTypeVariables() {\n    if (typeVariable != null) {\n        Type[] bounds = typeVariable.getBounds();\n        if (bounds != null) {\n            for (Type boundType : bounds) {\n                if (boundType instanceof TypeVariable) {\n                    readTypeVariableBounds((TypeVariable<?>) boundType);\n                } else {\n                    registerTypeVariablesOn(boundType);\n                }\n            }\n        }\n\n        if (!(typeVariable.getGenericDeclaration() instanceof Class)) {\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n\n            // Check if the actual type argument is null or not dynamically generated\n            if (actualTypeArgument != null && !isDynamicallyGenerated(actualTypeArgument)) {\n                if (actualTypeArgument instanceof TypeVariable) {\n                    readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n                } else if (actualTypeArgument instanceof ParameterizedType) {\n                    Type[] arguments = ((ParameterizedType) actualTypeArgument).getActualTypeArguments();\n                    if (arguments != null) {\n                        for (Type argument : arguments) {\n                            if (argument instanceof TypeVariable) {\n                                readTypeVariableBounds((TypeVariable<?>) argument);\n                            } else {\n                                registerTypeVariablesOn(argument);\n                            }\n                        }\n                    }\n                } else {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            }\n        }\n    }\n}\n\nprivate void readTypeVariableBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null) {\n        for (Type boundType : bounds) {\n            if (boundType instanceof TypeVariable) {\n                readTypeVariableBounds((TypeVariable<?>) boundType);\n            } else {\n                registerTypeVariablesOn(boundType);\n            }\n        }\n    }\n}\n\nprivate boolean isDynamicallyGenerated(Type type) {\n    if (type instanceof TypeVariable) {\n        return isDynamicallyGenerated(((TypeVariable<?>) type).getBounds()[0]);\n    } else if (type instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) type;\n        Type[] upperBounds = wildcardType.getUpperBounds();\n        Type[] lowerBounds = wildcardType.getLowerBounds();\n        return upperBounds.length == 1 && isDynamicallyGenerated(upperBounds[0])\n                && lowerBounds.length == 0;\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3c67f7422 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,72 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable != null) {\n+        Type[] bounds = typeVariable.getBounds();\n+        if (bounds != null) {\n+            for (Type boundType : bounds) {\n+                if (boundType instanceof TypeVariable) {\n+                    readTypeVariableBounds((TypeVariable<?>) boundType);\n+                } else {\n+                    registerTypeVariablesOn(boundType);\n+                }\n+            }\n+        }\n+\n+        if (!(typeVariable.getGenericDeclaration() instanceof Class)) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+\n+            // Check if the actual type argument is null or not dynamically generated\n+            if (actualTypeArgument != null && !isDynamicallyGenerated(actualTypeArgument)) {\n+                if (actualTypeArgument instanceof TypeVariable) {\n+                    readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n+                } else if (actualTypeArgument instanceof ParameterizedType) {\n+                    Type[] arguments = ((ParameterizedType) actualTypeArgument).getActualTypeArguments();\n+                    if (arguments != null) {\n+                        for (Type argument : arguments) {\n+                            if (argument instanceof TypeVariable) {\n+                                readTypeVariableBounds((TypeVariable<?>) argument);\n+                            } else {\n+                                registerTypeVariablesOn(argument);\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariableBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null) {\n+        for (Type boundType : bounds) {\n+            if (boundType instanceof TypeVariable) {\n+                readTypeVariableBounds((TypeVariable<?>) boundType);\n+            } else {\n+                registerTypeVariablesOn(boundType);\n+            }\n+        }\n+    }\n+}\n+\n+private boolean isDynamicallyGenerated(Type type) {\n+    if (type instanceof TypeVariable) {\n+        return isDynamicallyGenerated(((TypeVariable<?>) type).getBounds()[0]);\n+    } else if (type instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) type;\n+        Type[] upperBounds = wildcardType.getUpperBounds();\n+        Type[] lowerBounds = wildcardType.getLowerBounds();\n+        return upperBounds.length == 1 && isDynamicallyGenerated(upperBounds[0])\n+                && lowerBounds.length == 0;\n+    } else {\n+        return false;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}