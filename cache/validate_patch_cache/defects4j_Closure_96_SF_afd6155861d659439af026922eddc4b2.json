{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean var_args = false;\n    while (arguments.hasNext()) {\n      if (!parameters.hasNext()) {\n        // If there are no parameters left in the list, then this must be\n        // a var_args function.\n        var_args = true;\n        break;\n      }\n      parameter = parameters.next();\n      ordinal++;\n      argument = arguments.next();\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (var_args) {\n      // For var_args function, the rest of the arguments (if any) must be of\n      // the same type as the parameter type of the last parameter in the list.\n      parameter = parameters.hasNext() ? parameters.next() : null;\n      while (argument != null) {\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n        ordinal++;\n        argument = arguments.hasNext() ? arguments.next() : null;\n      }\n    } else {\n      // For non-var_args function, the number of arguments must be equal to the\n      // number of parameters.\n      if (functionType.getMinArguments() > ordinal ||\n          parameters.hasNext() != arguments.hasNext()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n      return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..47bd3e69 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,18 +1405,46 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    boolean var_args = false;\n+    while (arguments.hasNext()) {\n+      if (!parameters.hasNext()) {\n+        // If there are no parameters left in the list, then this must be\n+        // a var_args function.\n+        var_args = true;\n+        break;\n+      }\n+      parameter = parameters.next();\n       ordinal++;\n+      argument = arguments.next();\n \n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n+    if (var_args) {\n+      // For var_args function, the rest of the arguments (if any) must be of\n+      // the same type as the parameter type of the last parameter in the list.\n+      parameter = parameters.hasNext() ? parameters.next() : null;\n+      while (argument != null) {\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+        ordinal++;\n+        argument = arguments.hasNext() ? arguments.next() : null;\n+      }\n+    } else {\n+      // For non-var_args function, the number of arguments must be equal to the\n+      // number of parameters.\n+      if (functionType.getMinArguments() > ordinal ||\n+          parameters.hasNext() != arguments.hasNext()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+      }\n+    }\n+\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n@@ -1426,6 +1454,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      return;\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_WRONG_ARGUMENT_COUNT. Function Function: called with 0 argument(s). Function requires at least 0 argument(s). at testcode line 6 : 109 expected:<0> but was:<1>",
    "test_result": "FAIL"
}