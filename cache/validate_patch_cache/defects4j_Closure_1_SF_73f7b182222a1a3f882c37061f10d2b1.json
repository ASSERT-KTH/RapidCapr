{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = NodeUtil.getFunctionParameters(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  boolean couldRemoveGlobals = options.removeUnusedPrototypeProperties\n      || options.removeUnusedClassProperties\n      || options.removeUnusedVars;\n\n  if (!modifyCallers && argList.hasChildren()) {\n    Node currentThingToCheck = argList.getFirstChild();\n    Node lastThingToRemove = null;\n    while (currentThingToCheck != null) {\n      String paramName = currentThingToCheck.getString();\n      Var var = fnScope.getVar(paramName);\n      if (!referenced.contains(var)) {\n        Node nextThingToCheck = currentThingToCheck.getNext();\n        argList.removeChild(currentThingToCheck);\n        compiler.reportCodeChange();\n        lastThingToRemove = currentThingToCheck;\n        currentThingToCheck = nextThingToCheck;\n      } else {\n        break;\n      }\n    }\n    // we've removed all the parameters that we could from the start\n    // now see if any can be removed from the end.\n    if (lastThingToRemove != null && lastThingToRemove.getNext() != null) {\n      int numberOfParams = 0;\n      for (Node node = argList.getFirstChild(); node != null; node = node.getNext()) {\n        if (couldRemoveGlobals || !isGlobalProperty(node)) {\n          numberOfParams++;\n        }\n      }\n\n      // check if any unused parameters remain.\n      if (numberOfParams > 0) {\n        Node lastThingToCheck = argList.getLastChild();\n        while (lastThingToRemove != lastThingToCheck\n            && !referenced.contains(fnScope.getVar(lastThingToCheck.getString()))) {\n          Node previousThingToCheck = lastThingToCheck.getPrevious();\n          argList.removeChild(lastThingToCheck);\n          compiler.reportCodeChange();\n          lastThingToCheck = previousThingToCheck;\n        }\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..62642953 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,62 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = NodeUtil.getFunctionParameters(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  boolean couldRemoveGlobals = options.removeUnusedPrototypeProperties\n+      || options.removeUnusedClassProperties\n+      || options.removeUnusedVars;\n+\n+  if (!modifyCallers && argList.hasChildren()) {\n+    Node currentThingToCheck = argList.getFirstChild();\n+    Node lastThingToRemove = null;\n+    while (currentThingToCheck != null) {\n+      String paramName = currentThingToCheck.getString();\n+      Var var = fnScope.getVar(paramName);\n+      if (!referenced.contains(var)) {\n+        Node nextThingToCheck = currentThingToCheck.getNext();\n+        argList.removeChild(currentThingToCheck);\n+        compiler.reportCodeChange();\n+        lastThingToRemove = currentThingToCheck;\n+        currentThingToCheck = nextThingToCheck;\n+      } else {\n+        break;\n+      }\n+    }\n+    // we've removed all the parameters that we could from the start\n+    // now see if any can be removed from the end.\n+    if (lastThingToRemove != null && lastThingToRemove.getNext() != null) {\n+      int numberOfParams = 0;\n+      for (Node node = argList.getFirstChild(); node != null; node = node.getNext()) {\n+        if (couldRemoveGlobals || !isGlobalProperty(node)) {\n+          numberOfParams++;\n+        }\n+      }\n+\n+      // check if any unused parameters remain.\n+      if (numberOfParams > 0) {\n+        Node lastThingToCheck = argList.getLastChild();\n+        while (lastThingToRemove != lastThingToCheck\n+            && !referenced.contains(fnScope.getVar(lastThingToCheck.getString()))) {\n+          Node previousThingToCheck = lastThingToCheck.getPrevious();\n+          argList.removeChild(lastThingToCheck);\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n+          lastThingToCheck = previousThingToCheck;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}