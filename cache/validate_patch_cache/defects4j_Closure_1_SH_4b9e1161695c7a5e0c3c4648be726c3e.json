{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      LinkedHashSet<String> toRemove = new LinkedHashSet<>();\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          toRemove.add(arg.getString());\n        } else {\n          // If we've already seen an unreferenced parameter, \"arguments\"\n          // parsing will be affected, e.g. function(x, y, a, b) { return\n          // arguments[0] }. We only want to remove this if it's the last\n          // argument.\n          if (toRemove.isEmpty()) {\n            continue;\n          }\n\n          toRemove.add(arg.getString());\n          break;\n        }\n      }\n\n      while (!toRemove.isEmpty()) {\n        String paramName = toRemove.iterator().next();\n        toRemove.remove(paramName);\n\n        // it's possible that the arglist has already shrunk as we removed\n        // args.\n        Node arg = argList.getFirstChild();\n        if (arg.getString().equals(paramName)) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..85d26b5a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      LinkedHashSet<String> toRemove = new LinkedHashSet<>();\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          toRemove.add(arg.getString());\n+        } else {\n+          // If we've already seen an unreferenced parameter, \"arguments\"\n+          // parsing will be affected, e.g. function(x, y, a, b) { return\n+          // arguments[0] }. We only want to remove this if it's the last\n+          // argument.\n+          if (toRemove.isEmpty()) {\n+            continue;\n+          }\n+\n+          toRemove.add(arg.getString());\n+          break;\n+        }\n+      }\n+\n+      while (!toRemove.isEmpty()) {\n+        String paramName = toRemove.iterator().next();\n+        toRemove.remove(paramName);\n+\n+        // it's possible that the arglist has already shrunk as we removed\n+        // args.\n+        Node arg = argList.getFirstChild();\n+        if (arg.getString().equals(paramName)) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}