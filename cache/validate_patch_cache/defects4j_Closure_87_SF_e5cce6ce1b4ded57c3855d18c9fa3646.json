{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // Ignore EXPR_RESULT nodes that are returned from an event handler. This is because\n    // IE has a bug where event handlers behave differently when their return value is used\n    // vs. when their return value is in an EXPR_RESULT. See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n    if (maybeExpr.getType() == Token.EXPR_RESULT &&\n        maybeExpr.getFirstChild().getType() == Token.CALL &&\n        maybeExpr.getFirstChild().getFirstChild().getType() == Token.NAME &&\n        maybeExpr.getFirstChild().getFirstChild().getString().endsWith(\"_\")) {\n      return false;\n    }\n\n    // This is a foldable block if:\n    //   - The child node is an expression node, and\n    //   - The parent is not an EXPR_RESULT node, or\n    //   - The child is an immutable value (boolean, number, string, null, undefined), or\n    //   - The child is `this`.\n    if (NodeUtil.isExpressionNode(maybeExpr) &&\n        ((n.getParent() != null && n.getParent().getType() != Token.EXPR_RESULT) ||\n        NodeUtil.isImmutableValue(maybeExpr) || maybeExpr.getType() == Token.THIS)) {\n      return true;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..ba7fb230 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // Ignore EXPR_RESULT nodes that are returned from an event handler. This is because\n+    // IE has a bug where event handlers behave differently when their return value is used\n+    // vs. when their return value is in an EXPR_RESULT. See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n+    if (maybeExpr.getType() == Token.EXPR_RESULT &&\n+        maybeExpr.getFirstChild().getType() == Token.CALL &&\n+        maybeExpr.getFirstChild().getFirstChild().getType() == Token.NAME &&\n+        maybeExpr.getFirstChild().getFirstChild().getString().endsWith(\"_\")) {\n+      return false;\n     }\n \n-    return false;\n+    // This is a foldable block if:\n+    //   - The child node is an expression node, and\n+    //   - The parent is not an EXPR_RESULT node, or\n+    //   - The child is an immutable value (boolean, number, string, null, undefined), or\n+    //   - The child is `this`.\n+    if (NodeUtil.isExpressionNode(maybeExpr) &&\n+        ((n.getParent() != null && n.getParent().getType() != Token.EXPR_RESULT) ||\n+        NodeUtil.isImmutableValue(maybeExpr) || maybeExpr.getType() == Token.THIS)) {\n+      return true;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}