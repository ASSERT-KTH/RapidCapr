{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(parent)) {\n        Node ancestor = parent.getParent();\n        while (NodeUtil.isAssignmentOp(ancestor) || NodeUtil.isExprCall(ancestor)) {\n          ancestor = ancestor.getParent();\n        }\n        if (NodeUtil.isGetProp(ancestor) &&\n            ancestor.getParent().getType() == Token.EXPR_RESULT) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..38c56713 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        Node ancestor = parent.getParent();\n+        while (NodeUtil.isAssignmentOp(ancestor) || NodeUtil.isExprCall(ancestor)) {\n+          ancestor = ancestor.getParent();\n+        }\n+        if (NodeUtil.isGetProp(ancestor) &&\n+            ancestor.getParent().getType() == Token.EXPR_RESULT) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}