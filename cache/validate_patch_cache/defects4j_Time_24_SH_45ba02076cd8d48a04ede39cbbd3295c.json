{
    "patch": "        } catch (IllegalFieldValueException e) {\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                DateTimeField field = savedField.iField;\n                if (field.isLenient()) {\n                    long min = field.getMinimumValue();\n                    long max = field.getMaximumValue();\n                    long value = savedField.getValue();\n                    if (value < min) {\n                        value = min;\n                    } else if (value > max) {\n                        value = max;\n                    }\n                    millis = field.set(millis, (int)value);\n                }\n            }\n            \n            try {\n                // try to resolve the situation\n                DateTimeUtils.validateMillis(iChrono, iZone, millis);\n            } catch (IllegalInstantException ex) {\n                if (text != null) {\n                    ex.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                }\n                throw ex;\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b13175c5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+                DateTimeField field = savedField.iField;\n+                if (field.isLenient()) {\n+                    long min = field.getMinimumValue();\n+                    long max = field.getMaximumValue();\n+                    long value = savedField.getValue();\n+                    if (value < min) {\n+                        value = min;\n+                    } else if (value > max) {\n+                        value = max;\n+                    }\n+                    millis = field.set(millis, (int)value);\n+                }\n+            }\n+            \n+            try {\n+                // try to resolve the situation\n+                DateTimeUtils.validateMillis(iChrono, iZone, millis);\n+            } catch (IllegalInstantException ex) {\n+                if (text != null) {\n+                    ex.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                }\n+                throw ex;\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}