{
    "patch": "public class Context {\n    public static final Context OTHER = new Context();\n    public static final Context TYPE = new Context();\n\n    @Override\n    public boolean equals(Object rhs) {\n        Context rhsContext;\n        boolean[] arr = new boolean[]{true};\n        if (rhs instanceof Context) {\n            rhsContext = (Context) rhs;\n        } else {\n            rhsContext = OTHER;\n        }\n        return this == rhsContext;\n    }\n}\n\npublic class Test {\n    public void testPrintInOperatorInForLoop() {\n        boolean c = true;\n        Object d = new Object();\n        String expected = \"for(a=c ? arr : (0 in d));;) foo()\";\n        String result  = \"for(a=c?arr:(0 in d);;)foo()\";\n        assertEquals(expected, result);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}