{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd || input.charAt(index) != '&' || index >= seqEnd - 1 || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        start++;\n        isHex = true;\n        if(start >= seqEnd) {  // check if just an x without value\n            return 0;\n        }\n    }\n    int end = start;\n    while (end < seqEnd && input.charAt(end) != ';') { // find end of entity\n        end++;\n    }\n    if (end >= seqEnd) {\n        return 0; // entity is unfinished (no semicolon)\n    }\n\n    int entityValue = 0;\n    try {\n        if(isHex){\n            if (end-start > 0) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                return 0;\n            }\n        } else {\n            if (end-start > 0) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            } else {\n                return 0;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n        return 0;\n    }\n\n    // Make sure that the entityValue is a valid Unicode code point\n    if (!Character.isValidCodePoint(entityValue)) {\n        return 0;\n    }\n\n    // Handle supplementary characters\n    if (entityValue > 0xFFFF) {\n        entityValue -= 0x10000;\n        out.write((char) ((entityValue >> 10) + 0xD800));\n        out.write((char) ((entityValue & 0x3FF) + 0xDC00));\n    } else {\n        out.write((char) entityValue);\n    }\n    \n    return end - index + (input.charAt(end) == ';' ? 1 : 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..3b6ac4b8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,63 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd || input.charAt(index) != '&' || index >= seqEnd - 1 || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    int start = index + 2;\n+    boolean isHex = false;\n+    if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        start++;\n+        isHex = true;\n+        if(start >= seqEnd) {  // check if just an x without value\n+            return 0;\n+        }\n+    }\n+    int end = start;\n+    while (end < seqEnd && input.charAt(end) != ';') { // find end of entity\n+        end++;\n+    }\n+    if (end >= seqEnd) {\n+        return 0; // entity is unfinished (no semicolon)\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+    int entityValue = 0;\n+    try {\n+        if(isHex){\n+            if (end-start > 0) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n+            } else {\n                 return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        } else {\n+            if (end-start > 0) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n             } else {\n-                out.write(entityValue);\n+                return 0;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n+    } catch (NumberFormatException nfe) {\n+        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n+        return 0;\n+    }\n+\n+    // Make sure that the entityValue is a valid Unicode code point\n+    if (!Character.isValidCodePoint(entityValue)) {\n         return 0;\n     }\n+\n+    // Handle supplementary characters\n+    if (entityValue > 0xFFFF) {\n+        entityValue -= 0x10000;\n+        out.write((char) ((entityValue >> 10) + 0xD800));\n+        out.write((char) ((entityValue & 0x3FF) + 0xDC00));\n+    } else {\n+        out.write((char) entityValue);\n+    }\n+    \n+    return end - index + (input.charAt(end) == ';' ? 1 : 0);\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: Failed to support unfinished entities (i.e. missing semi-colon expected:<Test []0 not test> but was:<Test [&#x3]0 not test>",
    "test_result": "FAIL"
}