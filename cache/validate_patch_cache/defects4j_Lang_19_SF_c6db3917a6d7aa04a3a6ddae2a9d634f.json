{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd - 1 || input.charAt(index) != '&') {\n        return 0;\n    }\n\n    int entityValue = 0;\n    boolean isHex = false;\n    int start = index + 1;\n    int end = start;\n    \n    if (input.charAt(start) == '#') {\n        start++;\n        if (start >= seqEnd) {\n            return 0;\n        }\n\n        // decimal escape sequence\n        char ch = input.charAt(start);\n\n        if (ch == 'x' || ch == 'X') {\n            isHex = true;\n            start++;\n            if (start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        while (end < seqEnd && input.charAt(end) != ';') {\n            ch = input.charAt(end);\n            if (!Character.isDigit(ch) && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n                return 0;\n            }\n            end++;\n        }\n\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString());\n            }\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        if (entityValue < 0 || (entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n            return 0;\n        }\n    } else {\n        // named escape sequence\n        while (end < seqEnd && Character.isLetter(input.charAt(end))) {\n            end++;\n        }\n\n        String entityName = input.subSequence(start, end).toString();\n        if (end < seqEnd && input.charAt(end) == ';') {\n            end++;\n        }\n\n        entityValue = htmlEntities.get(entityName);\n        if (entityValue == null) {\n            return 0;\n        }\n    }\n\n    if (entityValue > 0xFFFF) {\n        char[] chars = Character.toChars(entityValue);\n        out.write(chars[0]);\n        out.write(chars[1]);\n    } else {\n        out.write(entityValue);\n    }\n\n    return end - index;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..5a40c67f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,80 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd - 1 || input.charAt(index) != '&') {\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    int entityValue = 0;\n+    boolean isHex = false;\n+    int start = index + 1;\n+    int end = start;\n+    \n+    if (input.charAt(start) == '#') {\n+        start++;\n+        if (start >= seqEnd) {\n+            return 0;\n+        }\n \n-                // Check there's more than just an x after the &#\n-            }\n+        // decimal escape sequence\n+        char ch = input.charAt(start);\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+        if (ch == 'x' || ch == 'X') {\n+            isHex = true;\n+            start++;\n+            if (start >= seqEnd) {\n+                return 0;\n             }\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+        while (end < seqEnd && input.charAt(end) != ';') {\n+            ch = input.charAt(end);\n+            if (!Character.isDigit(ch) && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n                 return 0;\n             }\n+            end++;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        try {\n+            if (isHex) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString());\n             }\n+        } catch (NumberFormatException e) {\n+            return 0;\n+        }\n \n+        if (entityValue < 0 || (entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n+            return 0;\n+        }\n+    } else {\n+        // named escape sequence\n+        while (end < seqEnd && Character.isLetter(input.charAt(end))) {\n+            end++;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        String entityName = input.subSequence(start, end).toString();\n+        if (end < seqEnd && input.charAt(end) == ';') {\n+            end++;\n+        }\n+\n+        entityValue = htmlEntities.get(entityName);\n+        if (entityValue == null) {\n+            return 0;\n         }\n-        return 0;\n     }\n+\n+    if (entityValue > 0xFFFF) {\n+        char[] chars = Character.toChars(entityValue);\n+        out.write(chars[0]);\n+        out.write(chars[1]);\n+    } else {\n+        out.write(entityValue);\n+    }\n+\n+    return end - index;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}