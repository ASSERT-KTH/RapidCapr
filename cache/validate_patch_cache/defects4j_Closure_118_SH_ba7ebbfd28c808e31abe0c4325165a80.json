{
    "patch": "if (child.isComputedProp()) {\n    type = typeSystem.getType(getScope(), child);\n} else if (NodeUtil.isEs6ClassMember(child)) {\n    // handle computed method names\n    Node methodName = child.getFirstChild();\n    if (methodName.isComputedProp()) {\n        type = typeSystem.getType(getScope(), methodName);\n    } else {\n        type = typeSystem.getType(getScope(), n, methodName.getString());\n    }\n} else {\n    type = typeSystem.getType(getScope(), n, child.getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..0f2a6b2a 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,19 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isComputedProp()) {\n+    type = typeSystem.getType(getScope(), child);\n+} else if (NodeUtil.isEs6ClassMember(child)) {\n+    // handle computed method names\n+    Node methodName = child.getFirstChild();\n+    if (methodName.isComputedProp()) {\n+        type = typeSystem.getType(getScope(), methodName);\n+    } else {\n+        type = typeSystem.getType(getScope(), n, methodName.getString());\n+    }\n+} else {\n+    type = typeSystem.getType(getScope(), n, child.getString());\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}