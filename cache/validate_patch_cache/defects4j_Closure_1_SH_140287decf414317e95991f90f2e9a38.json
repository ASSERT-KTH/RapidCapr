{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // Don't remove parameters for setter methods in object literals.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n    // If there are no callers to the function, then take out parameters that aren't referenced.\n    Set<String> allReferencedVars = getAllReferencedVars(fnScope);\n    Node param = argList.getLastChild();\n    while (param != null && !allReferencedVars.contains(param.getString())) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n        param = argList.getLastChild();\n    }\n} else {\n    // If there are callers to the function, then remove only the unused parameters at the end of\n    // the parameter list since those are safe to remove without affecting the function call sites.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n        } else {\n            break;\n        }\n    }\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0efb2d14 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // Don't remove parameters for setter methods in object literals.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+    // If there are no callers to the function, then take out parameters that aren't referenced.\n+    Set<String> allReferencedVars = getAllReferencedVars(fnScope);\n+    Node param = argList.getLastChild();\n+    while (param != null && !allReferencedVars.contains(param.getString())) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+        param = argList.getLastChild();\n+    }\n+} else {\n+    // If there are callers to the function, then remove only the unused parameters at the end of\n+    // the parameter list since those are safe to remove without affecting the function call sites.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+        } else {\n+            break;\n+        }\n+    }\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}