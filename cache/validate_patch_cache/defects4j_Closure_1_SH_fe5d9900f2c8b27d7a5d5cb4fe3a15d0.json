{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Collect the referenced arguments of the function.\n      Set<Node> referencedArgs = new HashSet<>();\n      NodeTraversal.traverse(compiler, function,\n          new AbstractPostOrderCallback() {\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n == function || !argList.hasChildren()) {\n                return;\n              }\n              // look for spots where arguments are used\n              if (NodeUtil.isVarOrSimpleAssignLhs(n)) {\n                Node assignment = NodeUtil.getEnclosingAssignment(n);\n                if (assignment == null) {\n                  NodeUtil.getEnclosingOp(n);\n                }\n                if (assignment != null) {\n                  Node rhs = assignment.getNext();\n                  if (rhs != null) { // handling of 'var x = x || defaultValue' pattern\n                    referencedArgs.addAll(\n                        NodeUtil.extractParametersFromFunctionExpression(rhs));\n                  }\n                }\n              } else if (n.isName() && parent.isCall() && n.getString() != null) {\n                // look for spots where arguments are called\n                if (parent.getFirstChild() == n) {\n                  referencedArgs.add(argList.getFirstChild());\n                  argList.removeChild(argList.getFirstChild());\n                  compiler.reportCodeChange();\n                } else {\n                  Node prev = parent.getFirstChild();\n                  while (prev.getNext() != n) {\n                    prev = prev.getNext();\n                  }\n                  Node arg = prev.getNext();\n                  Node maybeSpread = prev.getNext().getFirstChild();\n                  while (maybeSpread != null && maybeSpread.isSpread()) {\n                    arg = maybeSpread.getLastChild();\n                    maybeSpread = arg.getNext();\n                  }\n                  referencedArgs.add(arg);\n                  argList.removeChild(arg);\n                  compiler.reportCodeChange();\n                }\n              }\n            }\n          });\n\n      // Remove unreferenced args from argList\n      Node cur = argList.getFirstChild();\n      Node lastReferencedArg = null;\n      while (cur != null) {\n        if (referencedArgs.contains(cur)) {\n          lastReferencedArg = cur;\n          cur = cur.getNext();\n        } else {\n          argList.removeChild(cur);\n          compiler.reportCodeChange();\n          cur = cur.getNext();\n        }\n      }\n\n      // If non-last arguments of the function are unused, move them to undefined value.\n      Node param = argList.getFirstChild();\n      Node argParent = argList.getParent();\n      while (param != null && !Objects.equals(param, lastReferencedArg)) {\n        Node undefinedNode = Node.newString(Token.NAME, \"undefined\");\n        undefinedNode.useSourceInfoIfMissingFromForTree(function);\n        NodeUtil.insertBefore(param, undefinedNode);\n        Node assignNode = IR.assign(param.cloneTree(), undefinedNode.cloneTree())\n            .setJSDocInfo(param.getJSDocInfo());\n        assignNode.useSourceInfoIfMissingFromForTree(function);\n        NodeUtil.insertBefore(argParent, assignNode);\n        NodeUtil.removeChild(argParent, assignNode);\n        param = param.getNext();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6394889e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,98 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Collect the referenced arguments of the function.\n+      Set<Node> referencedArgs = new HashSet<>();\n+      NodeTraversal.traverse(compiler, function,\n+          new AbstractPostOrderCallback() {\n+            @Override\n+            public void visit(NodeTraversal t, Node n, Node parent) {\n+              if (n == function || !argList.hasChildren()) {\n+                return;\n+              }\n+              // look for spots where arguments are used\n+              if (NodeUtil.isVarOrSimpleAssignLhs(n)) {\n+                Node assignment = NodeUtil.getEnclosingAssignment(n);\n+                if (assignment == null) {\n+                  NodeUtil.getEnclosingOp(n);\n+                }\n+                if (assignment != null) {\n+                  Node rhs = assignment.getNext();\n+                  if (rhs != null) { // handling of 'var x = x || defaultValue' pattern\n+                    referencedArgs.addAll(\n+                        NodeUtil.extractParametersFromFunctionExpression(rhs));\n+                  }\n+                }\n+              } else if (n.isName() && parent.isCall() && n.getString() != null) {\n+                // look for spots where arguments are called\n+                if (parent.getFirstChild() == n) {\n+                  referencedArgs.add(argList.getFirstChild());\n+                  argList.removeChild(argList.getFirstChild());\n+                  compiler.reportCodeChange();\n+                } else {\n+                  Node prev = parent.getFirstChild();\n+                  while (prev.getNext() != n) {\n+                    prev = prev.getNext();\n+                  }\n+                  Node arg = prev.getNext();\n+                  Node maybeSpread = prev.getNext().getFirstChild();\n+                  while (maybeSpread != null && maybeSpread.isSpread()) {\n+                    arg = maybeSpread.getLastChild();\n+                    maybeSpread = arg.getNext();\n+                  }\n+                  referencedArgs.add(arg);\n+                  argList.removeChild(arg);\n+                  compiler.reportCodeChange();\n+                }\n+              }\n+            }\n+          });\n+\n+      // Remove unreferenced args from argList\n+      Node cur = argList.getFirstChild();\n+      Node lastReferencedArg = null;\n+      while (cur != null) {\n+        if (referencedArgs.contains(cur)) {\n+          lastReferencedArg = cur;\n+          cur = cur.getNext();\n+        } else {\n+          argList.removeChild(cur);\n+          compiler.reportCodeChange();\n+          cur = cur.getNext();\n+        }\n+      }\n+\n+      // If non-last arguments of the function are unused, move them to undefined value.\n+      Node param = argList.getFirstChild();\n+      Node argParent = argList.getParent();\n+      while (param != null && !Objects.equals(param, lastReferencedArg)) {\n+        Node undefinedNode = Node.newString(Token.NAME, \"undefined\");\n+        undefinedNode.useSourceInfoIfMissingFromForTree(function);\n+        NodeUtil.insertBefore(param, undefinedNode);\n+        Node assignNode = IR.assign(param.cloneTree(), undefinedNode.cloneTree())\n+            .setJSDocInfo(param.getJSDocInfo());\n+        assignNode.useSourceInfoIfMissingFromForTree(function);\n+        NodeUtil.insertBefore(argParent, assignNode);\n+        NodeUtil.removeChild(argParent, assignNode);\n+        param = param.getNext();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}