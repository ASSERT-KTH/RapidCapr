{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // If the gap in local time between instantAdjusted and\n                    // nextAdjusted is less than the length of the gap\n                    // in local time between instantLocal and nextAdjusted then\n                    // we must have gone into DST before instantAdjusted and the\n                    // original offsetLocal is correct.\n                    long diff = nextAdjusted - instantAdjusted;\n                    long next = nextTransition(nextAdjusted);\n                    long nextDiff = next - nextAdjusted;\n                    if (diff < nextDiff) {\n                        return offsetLocal;\n                    }\n                }\n                // the time must be between nextAdjusted and\n                // (nextAdjusted + dstOffsetAdjusted)\n                return offsetAdjusted;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8e22b8ab 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // If the gap in local time between instantAdjusted and\n+                    // nextAdjusted is less than the length of the gap\n+                    // in local time between instantLocal and nextAdjusted then\n+                    // we must have gone into DST before instantAdjusted and the\n+                    // original offsetLocal is correct.\n+                    long diff = nextAdjusted - instantAdjusted;\n+                    long next = nextTransition(nextAdjusted);\n+                    long nextDiff = next - nextAdjusted;\n+                    if (diff < nextDiff) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                // the time must be between nextAdjusted and\n+                // (nextAdjusted + dstOffsetAdjusted)\n+                return offsetAdjusted;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}