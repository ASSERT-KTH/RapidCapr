{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is month or day\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    } else {\n        // alter base year for parsing if first field is weekyear\n        if (first.getType() == DateTimeFieldType.weekyear() || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n            DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n            if (count > 1 && compareReverse(savedFields[1].iField.getDurationField(), weeks) < 0) {\n                int defaultWeekyear = iChrono.weekyear().get(millis);\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() ||\n                            savedFields[i].iField.getType() == DateTimeFieldType.weekyearOfCentury()) {\n                        int value = savedFields[i].iValue;\n                        if (value < 100) {\n                            value = iChrono.weekyear().set(defaultWeekyear, value);\n                        }\n                        millis = savedFields[i].iField.set(millis, value);\n                        break;\n                    }\n                }\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear() &&\n                            savedFields[i].iField.getType() != DateTimeFieldType.weekyearOfCentury()) {\n                        millis = savedFields[i].set(millis, resetFields);\n                    }\n                }\n            } else {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        } else {\n            throw e;\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1ecf11e0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,57 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is month or day\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    } else {\n+        // alter base year for parsing if first field is weekyear\n+        if (first.getType() == DateTimeFieldType.weekyear() || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+            DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+            if (count > 1 && compareReverse(savedFields[1].iField.getDurationField(), weeks) < 0) {\n+                int defaultWeekyear = iChrono.weekyear().get(millis);\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear() ||\n+                            savedFields[i].iField.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+                        int value = savedFields[i].iValue;\n+                        if (value < 100) {\n+                            value = iChrono.weekyear().set(defaultWeekyear, value);\n+                        }\n+                        millis = savedFields[i].iField.set(millis, value);\n+                        break;\n+                    }\n+                }\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear() &&\n+                            savedFields[i].iField.getType() != DateTimeFieldType.weekyearOfCentury()) {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    }\n+                }\n+            } else {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            }\n+        } else {\n+            throw e;\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}