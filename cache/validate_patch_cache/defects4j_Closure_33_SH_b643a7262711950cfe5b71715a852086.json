{
    "patch": "// We only want to match constraints on anonymous types or nominal constructors without a reference name.\nif (constraintObj.isNominalConstructor()) {\n  if (constraintObj.hasReferenceName() || constraintObj.isInterface() || constraintObj.isFunctionType()) {\n    return;\n  }\n} else if (!constraintObj.getDisplayName().isEmpty() || constraintObj.hasReferenceName()) {\n  return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..01a42307 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,14 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types or nominal constructors without a reference name.\n+if (constraintObj.isNominalConstructor()) {\n+  if (constraintObj.hasReferenceName() || constraintObj.isInterface() || constraintObj.isFunctionType()) {\n+    return;\n+  }\n+} else if (!constraintObj.getDisplayName().isEmpty() || constraintObj.hasReferenceName()) {\n+  return;\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}