{
    "patch": "              Node sideEffectParent = NodeUtil.getPowerfulParent(lhs);\n              if (NodeUtil.mayHaveSideEffects(sideEffectParent)) {\n                // Although isSafeDeclarationNode can be a better check,\n                // we intentionally use mayHaveSideEffects so that function\n                // literals in initializers won't trip us.\n                return n;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..ffd67f39 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node sideEffectParent = NodeUtil.getPowerfulParent(lhs);\n+              if (NodeUtil.mayHaveSideEffects(sideEffectParent)) {\n+                // Although isSafeDeclarationNode can be a better check,\n+                // we intentionally use mayHaveSideEffects so that function\n+                // literals in initializers won't trip us.\n+                return n;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}