{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                        Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  if (arrayNode.getType() != Token.ARRAYLIT) {\n    return;\n  }\n\n  Node functionName = left.getNext();\n  if (!functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  if (joinString == null) {\n    // String value is null, cannot continue folding.\n    return;\n  }\n\n  List<Node> arrayFoldedChildren = new ArrayList<>();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String s = NodeUtil.getStringValue(elem);\n      if (s == null) {\n        // String value is null, cannot continue folding.\n        return;\n      }\n      arrayFoldedChildren.add(elem);\n      foldedSize += s.length();\n    } else {\n      arrayFoldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n  if (foldedSize > InlineCostEstimator.getCost(n)) {\n    return;\n  }\n\n  // Build folded expression.\n  Node comma = Node.newString(\",\");\n  Node foldedExpression = arrayFoldedChildren.get(0);\n  for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n    foldedExpression = new Node(\n        Token.ADD, foldedExpression, comma.cloneNode(), arrayFoldedChildren.get(i));\n  }\n\n  parent.replaceChild(n, foldedExpression);\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..6652dcd2 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,64 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                        Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  if (arrayNode.getType() != Token.ARRAYLIT) {\n+    return;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  Node functionName = left.getNext();\n+  if (!functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n-    }\n+  String joinString = NodeUtil.getStringValue(right);\n+  if (joinString == null) {\n+    // String value is null, cannot continue folding.\n+    return;\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  List<Node> arrayFoldedChildren = new ArrayList<>();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      String s = NodeUtil.getStringValue(elem);\n+      if (s == null) {\n+        // String value is null, cannot continue folding.\n+        return;\n+      }\n+      arrayFoldedChildren.add(elem);\n+      foldedSize += s.length();\n+    } else {\n+      arrayFoldedChildren.add(elem);\n+      foldedSize += InlineCostEstimator.getCost(elem);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+    elem = elem.getNext();\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n+  if (foldedSize > InlineCostEstimator.getCost(n)) {\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+  // Build folded expression.\n+  Node comma = Node.newString(\",\");\n+  Node foldedExpression = arrayFoldedChildren.get(0);\n+  for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n+    foldedExpression = new Node(\n+        Token.ADD, foldedExpression, comma.cloneNode(), arrayFoldedChildren.get(i));\n   }\n \n+  parent.replaceChild(n, foldedExpression);\n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}