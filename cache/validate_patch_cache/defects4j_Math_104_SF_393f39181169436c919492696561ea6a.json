{
    "patch": "import org.apache.commons.math3.util.*;\n\npublic class GammaFunction {\n\n    public double regularizedGamma(double a, double x) {\n        double epsilon = 10e-15;\n        double maxIterations = 1000000;\n        double sum = 0.0;\n        double term = 1.0 / a;\n        int iteration = 1;\n\n        // Handle special cases for a and x\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        if (x >= a + 1) {\n            double b = x + 1 - a;\n            double c = 1 / epsilon;\n            double d = 1 / b;\n            double h = d;\n            while (iteration <= maxIterations) {\n                double an = -iteration * (iteration - a);\n                b += 2.0;\n                d = an * d + b;\n                if (Math.abs(d) < epsilon) {\n                    d = epsilon;\n                }\n                c = b + an / c;\n                if (Math.abs(c) < epsilon) {\n                    c = epsilon;\n                }\n                d = 1 / d;\n                double del = d * c;\n                h *= del;\n                if (Math.abs(del - 1) < epsilon) {\n                    break;\n                }\n                iteration++;\n            }\n            if (iteration > maxIterations) {\n                return Double.NaN;\n            }\n            sum = 1 / h;\n        } else {\n            double b = x;\n            double c = 1 / epsilon;\n            double d = 1 / x;\n            double h = d;\n            while (iteration <= maxIterations) {\n                double an = iteration * (a - iteration);\n                b += 2.0;\n                d = an * d + b;\n                if (Math.abs(d) < epsilon) {\n                    d = epsilon;\n                }\n                c = b + an / c;\n                if (Math.abs(c) < epsilon) {\n                    c = epsilon;\n                }\n                d = 1 / d;\n                double del = d * c;\n                h *= del;\n                if (Math.abs(del - 1) < epsilon) {\n                    break;\n                }\n                iteration++;\n            }\n            if (iteration > maxIterations) {\n                return Double.NaN;\n            }\n            sum = h;\n        }\n\n        double gammaFunc = Gamma.gamma(a);\n        double p = sum * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n        return p / gammaFunc;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d3df69571 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,89 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.*;\n+\n+public class GammaFunction {\n+\n+    public double regularizedGamma(double a, double x) {\n+        double epsilon = 10e-15;\n+        double maxIterations = 1000000;\n+        double sum = 0.0;\n+        double term = 1.0 / a;\n+        int iteration = 1;\n+\n+        // Handle special cases for a and x\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        if (x >= a + 1) {\n+            double b = x + 1 - a;\n+            double c = 1 / epsilon;\n+            double d = 1 / b;\n+            double h = d;\n+            while (iteration <= maxIterations) {\n+                double an = -iteration * (iteration - a);\n+                b += 2.0;\n+                d = an * d + b;\n+                if (Math.abs(d) < epsilon) {\n+                    d = epsilon;\n+                }\n+                c = b + an / c;\n+                if (Math.abs(c) < epsilon) {\n+                    c = epsilon;\n+                }\n+                d = 1 / d;\n+                double del = d * c;\n+                h *= del;\n+                if (Math.abs(del - 1) < epsilon) {\n+                    break;\n+                }\n+                iteration++;\n+            }\n+            if (iteration > maxIterations) {\n+                return Double.NaN;\n+            }\n+            sum = 1 / h;\n+        } else {\n+            double b = x;\n+            double c = 1 / epsilon;\n+            double d = 1 / x;\n+            double h = d;\n+            while (iteration <= maxIterations) {\n+                double an = iteration * (a - iteration);\n+                b += 2.0;\n+                d = an * d + b;\n+                if (Math.abs(d) < epsilon) {\n+                    d = epsilon;\n+                }\n+                c = b + an / c;\n+                if (Math.abs(c) < epsilon) {\n+                    c = epsilon;\n+                }\n+                d = 1 / d;\n+                double del = d * c;\n+                h *= del;\n+                if (Math.abs(del - 1) < epsilon) {\n+                    break;\n+                }\n+                iteration++;\n+            }\n+            if (iteration > maxIterations) {\n+                return Double.NaN;\n+            }\n+            sum = h;\n+        }\n+\n+        double gammaFunc = Gamma.gamma(a);\n+        double p = sum * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n+        return p / gammaFunc;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}