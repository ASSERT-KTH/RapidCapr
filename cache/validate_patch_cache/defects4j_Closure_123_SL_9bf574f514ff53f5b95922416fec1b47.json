{
    "patch": "        Context rhsContext = Context.VOID; \n    \n        // infill location\n        if (0 in d) {\n            rhsContext = Context.ARRAY;\n        }\n        \n        String op = (operatorStack.empty() ? null : operatorStack.peek());\n\n        while (op != null && !op.equals(\"(\")\n                && ((isLeftAssociative(operator) && getPrecedence(operator) <= getPrecedence(op))\n                        || (!isLeftAssociative(operator) && getPrecedence(operator) < getPrecedence(op)))) {\n            leftContext = contextStack.pop();\n            rhsContext = applyOperator(leftContext, op, rhsContext);\n            operatorStack.pop();\n            op = (operatorStack.empty() ? null : operatorStack.peek());\n        }\n\n        contextStack.push(rhsContext);    ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}