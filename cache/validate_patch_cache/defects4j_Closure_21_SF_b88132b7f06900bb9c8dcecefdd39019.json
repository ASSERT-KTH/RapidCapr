{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at block level.\n    // There are cases where this indicates a bug, such as an empty\n    // statement. An example of unintentional non-malicious usage would be\n    // in an object literal:\n    //\n    // var obj = {\n    //   foo: function() {},\n    //   bar: function() {},\n    // };\n    //\n    // I'm not too thrilled about keeping it this way, but for now we will.\n    if (n.isEmpty() ||\n        n.isComma() ||\n        n.isName() && n.getString().equals(\"undefined\")) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Don't try to remove a label. We've already handled the child, and\n    // removing this node for side-effect concerns will break the label.\n    if (parent.isLabel()) {\n      return;\n    }\n\n    // Don't remove leafs that are exported.\n    if (NodeUtil.isExported(n, parent)) {\n      return;\n    }\n\n    // Don't remove the throw expression statement nodes, only remove the\n    // expression node within it.\n    if (parent.isThrow()) {\n      if (n == parent.getFirstChild()) {\n        parent.setToken(Token.EXPRESSION_RESULT);\n        parent.addChildToFront(\n            new Node(Token.VOID, IR.string(\"throw expression removed\")));\n        n.detach();\n        t.reportCodeChange();\n      }\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isBlock() || n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      // We only remove nodes that are side-effect free. It is not safe\n      // to remove non-side-effect free nodes in the input tree as it can\n      // modify the order of the processing of the input expressions.\n      // Thus it can't be used for the contract of the NodeTraversal contract.\n      if (isSimpleOp ||\n          !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        // Gotta respect the ancestors.\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n\n        n.detachFromParent();\n        t.reportCodeChange();\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT &&\n               parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR &&\n             parent.getChildCount() == 4 &&\n             (n == parent.getFirstChild() ||\n              n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      } else if (NodeUtil.isForIn(parent)) {\n        return;\n      }\n    }\n    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n              \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(JSError.make(t.getSourceName(), n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..01943b78 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,13 +81,21 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // VOID nodes appear when there are extra semicolons at block level.\n+    // There are cases where this indicates a bug, such as an empty\n+    // statement. An example of unintentional non-malicious usage would be\n+    // in an object literal:\n+    //\n+    // var obj = {\n+    //   foo: function() {},\n+    //   bar: function() {},\n+    // };\n+    //\n+    // I'm not too thrilled about keeping it this way, but for now we will.\n     if (n.isEmpty() ||\n-        n.isComma()) {\n+        n.isComma() ||\n+        n.isName() && n.getString().equals(\"undefined\")) {\n       return;\n     }\n \n@@ -95,10 +103,34 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       return;\n     }\n \n+    // Don't try to remove a label. We've already handled the child, and\n+    // removing this node for side-effect concerns will break the label.\n+    if (parent.isLabel()) {\n+      return;\n+    }\n+\n+    // Don't remove leafs that are exported.\n+    if (NodeUtil.isExported(n, parent)) {\n+      return;\n+    }\n+\n+    // Don't remove the throw expression statement nodes, only remove the\n+    // expression node within it.\n+    if (parent.isThrow()) {\n+      if (n == parent.getFirstChild()) {\n+        parent.setToken(Token.EXPRESSION_RESULT);\n+        parent.addChildToFront(\n+            new Node(Token.VOID, IR.string(\"throw expression removed\")));\n+        n.detach();\n+        t.reportCodeChange();\n+      }\n+      return;\n+    }\n+\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+    if (n.isBlock() || n.isExprResult()) {\n       return;\n     }\n \n@@ -114,31 +146,44 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n+      // We only remove nodes that are side-effect free. It is not safe\n+      // to remove non-side-effect free nodes in the input tree as it can\n+      // modify the order of the processing of the input expressions.\n+      // Thus it can't be used for the contract of the NodeTraversal contract.\n+      if (isSimpleOp ||\n+          !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+        // Gotta respect the ancestors.\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n           else break;\n         }\n+\n+        n.detachFromParent();\n+        t.reportCodeChange();\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+    } else if (parent.getType() != Token.EXPR_RESULT &&\n+               parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR &&\n+             parent.getChildCount() == 4 &&\n+             (n == parent.getFirstChild() ||\n+              n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      } else if (NodeUtil.isForIn(parent)) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n       } else if (isSimpleOp) {\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+              \"' operator is not being used.\";\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      t.getCompiler().report(JSError.make(t.getSourceName(), n, level, USELESS_CODE_ERROR, msg));\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}