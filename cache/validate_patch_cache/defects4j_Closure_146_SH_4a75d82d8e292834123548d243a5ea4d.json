{
    "patch": "TypePair p = that.getTypesUnderInequality(this);\nif (p.typeA == null || p.typeB == null) {\n    return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n}\nreturn new TypePair(p.typeB, p.typeA);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..ccde3dcd 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,11 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+TypePair p = that.getTypesUnderInequality(this);\n+if (p.typeA == null || p.typeB == null) {\n+    return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+}\n+return new TypePair(p.typeB, p.typeA);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}