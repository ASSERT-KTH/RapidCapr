{
    "patch": "if (recurse) {\n  boolean allChildrenString = true;\n  for (Node child : n.childNodes()) {\n    if (!mayBeString(child, true)) {\n      allChildrenString = false;\n      break;\n    }\n  }\n  return allChildrenString;\n} else {\n  return mayBeStringHelper(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..4966afe2 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,18 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+if (recurse) {\n+  boolean allChildrenString = true;\n+  for (Node child : n.childNodes()) {\n+    if (!mayBeString(child, true)) {\n+      allChildrenString = false;\n+      break;\n+    }\n+  }\n+  return allChildrenString;\n+} else {\n+  return mayBeStringHelper(n);\n+}\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}