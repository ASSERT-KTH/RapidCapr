{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // Determine if the partial contains a leap day in a non-leap year\n    boolean hasLeapDay = false;\n    if (partial instanceof MonthDay) {\n        MonthDay monthDay = (MonthDay) partial;\n        int month = monthDay.getMonthOfYear();\n        int day = monthDay.getDayOfMonth();\n        hasLeapDay = !iChronology.year().isLeap(iChronology.getDateTimeMillis(2000, month, day, 0));\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n\n        // Ensure time is at start of day to work around the issue with leap day in non-leap year.\n        instant = iChronology.dayOfMonth().roundFloor(instant);\n\n        instant = add(instant, valueToAdd);\n\n        int[] newValues = iChronology.get(partial, instant);\n\n        if (hasLeapDay) {\n            int month = newValues[1];\n            int day = newValues[2];\n            if (month == 2 && day == 29 && !iChronology.year().isLeap(newValues[0])) {\n                // If the new date is February 29 in a non-leap year, set the day to 28.\n                newValues[2] = 28;\n            }\n        }\n\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..7cfa2cbb 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,47 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // Determine if the partial contains a leap day in a non-leap year\n+    boolean hasLeapDay = false;\n+    if (partial instanceof MonthDay) {\n+        MonthDay monthDay = (MonthDay) partial;\n+        int month = monthDay.getMonthOfYear();\n+        int day = monthDay.getDayOfMonth();\n+        hasLeapDay = !iChronology.year().isLeap(iChronology.getDateTimeMillis(2000, month, day, 0));\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        // Ensure time is at start of day to work around the issue with leap day in non-leap year.\n+        instant = iChronology.dayOfMonth().roundFloor(instant);\n+\n+        instant = add(instant, valueToAdd);\n+\n+        int[] newValues = iChronology.get(partial, instant);\n+\n+        if (hasLeapDay) {\n+            int month = newValues[1];\n+            int day = newValues[2];\n+            if (month == 2 && day == 29 && !iChronology.year().isLeap(newValues[0])) {\n+                // If the new date is February 29 in a non-leap year, set the day to 28.\n+                newValues[2] = 28;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}