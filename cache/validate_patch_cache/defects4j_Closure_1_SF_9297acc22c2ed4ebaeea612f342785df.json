{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor(){\n        @Override\n        public void visit(Node node) {\n            // Remove the parameter if it is unused.\n            if (node.isParamList()) {\n                Node current = node.getFirstChild();\n                while (current != null) {\n                    Node next = current.getNext();\n                    if (!NodeUtil.isNameReferenced(function, current.getString())) {\n                        current.detach();\n                        compiler.reportCodeChange();\n                    }\n                    current = next;\n                }\n            }\n        }\n    });\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..652c62de 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -378,32 +378,24 @@ class RemoveUnusedVars\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n     Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor(){\n+        @Override\n+        public void visit(Node node) {\n+            // Remove the parameter if it is unused.\n+            if (node.isParamList()) {\n+                Node current = node.getFirstChild();\n+                while (current != null) {\n+                    Node next = current.getNext();\n+                    if (!NodeUtil.isNameReferenced(function, current.getString())) {\n+                        current.detach();\n+                        compiler.reportCodeChange();\n+                    }\n+                    current = next;\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+    });\n+}\n \n \n   /**",
    "result_reason": "error: local variable function is accessed from within inner class; needs to be declared final",
    "test_result": "ERROR"
}