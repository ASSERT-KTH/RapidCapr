{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    int MAXITER = 1000;\n    double epsilon = 10e-15;\n    double lnGammaA = Gamma.logGamma(a);\n    double sum = 0.0;\n    double term = 1.0 / a;\n    for (int k = 1; k <= MAXITER; k++) {\n        term *= x / (a + k);\n        sum += term;\n        if (Math.abs(term) < epsilon) {\n            break;\n        }\n    }\n    return Math.exp(-x + a * Math.log(x) - lnGammaA) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e0de641f4 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,21 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    int MAXITER = 1000;\n+    double epsilon = 10e-15;\n+    double lnGammaA = Gamma.logGamma(a);\n+    double sum = 0.0;\n+    double term = 1.0 / a;\n+    for (int k = 1; k <= MAXITER; k++) {\n+        term *= x / (a + k);\n+        sum += term;\n+        if (Math.abs(term) < epsilon) {\n+            break;\n+        }\n+    }\n+    return Math.exp(-x + a * Math.log(x) - lnGammaA) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}