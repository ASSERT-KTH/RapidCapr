{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private boolean isInitializingAssignmentAt(int index) {\n    if (index < references.size() && index > 0) {\n      Reference maybeDecl = references.get(index - 1);\n      if (maybeDecl.isVarDeclaration()) {\n        Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n        Reference maybeInit = references.get(index);\n        if (maybeInit.isSimpleAssignmentToName()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return The reference that provides the value for the variable at the\n   * time of the first read, if known, otherwise null.\n   *\n   * This is either the variable declaration (\"var a = ...\") or first\n   * reference following the declaration if it is an assignment.\n   */\n  Reference getInitializingReference() {\n    if (isInitializingDeclarationAt(0)) {\n      return references.get(0);\n    } else if (isInitializingAssignmentAt(1)) {\n      return references.get(1);\n    }\n    return null;\n  }\n\n  /**\n   * Constants are allowed to be defined after their first use.\n   */\n  Reference getInitializingReferenceForConstants() {\n    int size = references.size();\n    for (int i = 0; i < size; i++) {\n      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n        return references.get(i);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return Whether the variable is only assigned a value once for its\n   *     lifetime.\n   */\n  boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n\n    if (ref == null) {\n      return false;\n    }\n    ReferenceUtils.DeclarationKind kind = ref.getFirstDeclaration().getDeclarationKind();\n\n    // Handle the special case of variables declared in externs files or from extern functions calls.\n    if (kind == ReferenceUtils.DeclarationKind.INFERRED_EXTERN_VAR\n        || kind == ReferenceUtils.DeclarationKind.EXTERN\n        || kind == ReferenceUtils.DeclarationKind.FUNCTION_EXPRESSION_NAME) {\n      return true;\n    }\n\n    Collection<Reference> refs = ref.getVariableReferences();\n    int count = 0;\n    for (Reference r : refs) {\n      if (r.isLvalue() && !r.isConst()) {\n        // If there is another write to the variable, then it's written more than once.\n        if (++count > 1) {\n          return false;\n        }\n      }\n    }\n    return true;\n\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..78a306a8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,71 +371,91 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n       }\n-      return false;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n+  private boolean isInitializingAssignmentAt(int index) {\n+    if (index < references.size() && index > 0) {\n+      Reference maybeDecl = references.get(index - 1);\n+      if (maybeDecl.isVarDeclaration()) {\n+        Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n+        Reference maybeInit = references.get(index);\n+        if (maybeInit.isSimpleAssignmentToName()) {\n+          return true;\n+        }\n       }\n-      return null;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n-        }\n-      }\n-      return null;\n+  /**\n+   * @return The reference that provides the value for the variable at the\n+   * time of the first read, if known, otherwise null.\n+   *\n+   * This is either the variable declaration (\"var a = ...\") or first\n+   * reference following the declaration if it is an assignment.\n+   */\n+  Reference getInitializingReference() {\n+    if (isInitializingDeclarationAt(0)) {\n+      return references.get(0);\n+    } else if (isInitializingAssignmentAt(1)) {\n+      return references.get(1);\n     }\n+    return null;\n+  }\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n-        return false;\n+  /**\n+   * Constants are allowed to be defined after their first use.\n+   */\n+  Reference getInitializingReferenceForConstants() {\n+    int size = references.size();\n+    for (int i = 0; i < size; i++) {\n+      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+        return references.get(i);\n       }\n+    }\n+    return null;\n+  }\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n+  /**\n+   * @return Whether the variable is only assigned a value once for its\n+   *     lifetime.\n+   */\n+  boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+\n+    if (ref == null) {\n+      return false;\n+    }\n+    ReferenceUtils.DeclarationKind kind = ref.getFirstDeclaration().getDeclarationKind();\n+\n+    // Handle the special case of variables declared in externs files or from extern functions calls.\n+    if (kind == ReferenceUtils.DeclarationKind.INFERRED_EXTERN_VAR\n+        || kind == ReferenceUtils.DeclarationKind.EXTERN\n+        || kind == ReferenceUtils.DeclarationKind.FUNCTION_EXPRESSION_NAME) {\n+      return true;\n+    }\n+\n+    Collection<Reference> refs = ref.getVariableReferences();\n+    int count = 0;\n+    for (Reference r : refs) {\n+      if (r.isLvalue() && !r.isConst()) {\n+        // If there is another write to the variable, then it's written more than once.\n+        if (++count > 1) {\n           return false;\n         }\n       }\n-\n-      return true;\n     }\n+    return true;\n+\n+  }\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}