{
    "patch": "protected RealPointValuePair getSolution() {\n  int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n  Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n  double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n  Set<Integer> basicRows = new HashSet<Integer>();\n  double[] coefficients = new double[getOriginalNumDecisionVariables()];\n  for (int i = 0; i < coefficients.length; i++) {\n    int colIndex = columnLabels.indexOf(\"x\" + i);\n    if (colIndex < 0) {\n      coefficients[i] = 0;\n      continue;\n    }\n    Integer basicRow = getBasicRow(colIndex);\n\n    if (basicRow != null && basicRow < getNumObjectiveFunctions())\n    {\n      coefficients[i] = 0;\n      continue;\n    }\n\n    boolean setCoeffToZero = false;\n    if(basicRow != null) {\n      for (int j = 0; j < i; j++) {\n        if (getBasicRow(columnLabels.indexOf(\"x\" + j)) == basicRow) {\n          setCoeffToZero = true;\n          break;\n        }\n      }\n    }\n\n    if(setCoeffToZero)\n    {\n      coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n      for(int j = i+1; j< coefficients.length; j++)\n      {\n        if(getBasicRow(columnLabels.indexOf(\"x\" + j)) == basicRow)\n        {\n          coefficients[j] = 0;\n        }\n      }\n    }\n    else {\n      basicRows.add(basicRow);\n      coefficients[i] =\n          (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n              (restrictToNonNegative ? 0 : mostNegative);\n    }\n  }\n  return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..b995a3c2d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,37 +393,58 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n+protected RealPointValuePair getSolution() {\n+  int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+  Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+  double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+\n+  Set<Integer> basicRows = new HashSet<Integer>();\n+  double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+  for (int i = 0; i < coefficients.length; i++) {\n+    int colIndex = columnLabels.indexOf(\"x\" + i);\n+    if (colIndex < 0) {\n+      coefficients[i] = 0;\n+      continue;\n+    }\n+    Integer basicRow = getBasicRow(colIndex);\n+\n+    if (basicRow != null && basicRow < getNumObjectiveFunctions())\n+    {\n+      coefficients[i] = 0;\n+      continue;\n+    }\n+\n+    boolean setCoeffToZero = false;\n+    if(basicRow != null) {\n+      for (int j = 0; j < i; j++) {\n+        if (getBasicRow(columnLabels.indexOf(\"x\" + j)) == basicRow) {\n+          setCoeffToZero = true;\n+          break;\n+        }\n       }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n \n+    if(setCoeffToZero)\n+    {\n+      coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+      for(int j = i+1; j< coefficients.length; j++)\n+      {\n+        if(getBasicRow(columnLabels.indexOf(\"x\" + j)) == basicRow)\n+        {\n+          coefficients[j] = 0;\n+        }\n+      }\n+    }\n+    else {\n+      basicRows.add(basicRow);\n+      coefficients[i] =\n+          (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+              (restrictToNonNegative ? 0 : mostNegative);\n+    }\n+  }\n+  return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "org.apache.commons.math.exception.OutOfRangeException: column index (-1)",
    "test_result": "FAIL"
}