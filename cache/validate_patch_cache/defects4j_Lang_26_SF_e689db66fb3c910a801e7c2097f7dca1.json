{
    "patch": "public String format(Date date) {\n    Calendar c = new GregorianCalendar(mTimeZone);\n    c.setTime(date);\n    return applyRulesWithTimeZone(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}\n\nprivate StringBuffer applyRulesWithTimeZone(Calendar calendar, StringBuffer stringBuffer) {\n    for (Rule rule : mRules) {\n        rule.appendTo(stringBuffer, calendar);\n    }\n    \n    // handling week number based on timezone\n    if (mWeekNumberRule != null) {\n        int weekNumber = calendar.get(Calendar.WEEK_OF_YEAR);\n        if (mTimeZone.useDaylightTime() && calendar.get(Calendar.MONTH) == Calendar.JANUARY && weekNumber > 50) {\n            weekNumber = 0;\n        }\n        mWeekNumberRule.appendTo(stringBuffer, weekNumber);\n    }\n    \n    return stringBuffer;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e30da2a5..f2653a1c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -816,11 +816,28 @@ public class FastDateFormat extends Format {\n      * @param date  the date to format\n      * @return the formatted string\n      */\n-    public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n-        c.setTime(date);\n-        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+public String format(Date date) {\n+    Calendar c = new GregorianCalendar(mTimeZone);\n+    c.setTime(date);\n+    return applyRulesWithTimeZone(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+}\n+\n+private StringBuffer applyRulesWithTimeZone(Calendar calendar, StringBuffer stringBuffer) {\n+    for (Rule rule : mRules) {\n+        rule.appendTo(stringBuffer, calendar);\n     }\n+    \n+    // handling week number based on timezone\n+    if (mWeekNumberRule != null) {\n+        int weekNumber = calendar.get(Calendar.WEEK_OF_YEAR);\n+        if (mTimeZone.useDaylightTime() && calendar.get(Calendar.MONTH) == Calendar.JANUARY && weekNumber > 50) {\n+            weekNumber = 0;\n+        }\n+        mWeekNumberRule.appendTo(stringBuffer, weekNumber);\n+    }\n+    \n+    return stringBuffer;\n+}\n \n     /**\n      * <p>Formats a <code>Calendar</code> object.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}