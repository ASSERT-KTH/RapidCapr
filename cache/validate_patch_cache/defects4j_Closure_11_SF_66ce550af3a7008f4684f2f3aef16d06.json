{
    "patch": "public String getProp(String key) {\n    Properties prop = new Properties();\n    String propFileName = \"config.properties\";\n    try {\n        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n        if (inputStream != null) {\n            prop.load(inputStream);\n        } else {\n            throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n        }\n        inputStream.close();\n    } catch (Exception e) {\n        System.out.println(\"Exception: \" + e);\n    }\n    String value = prop.getProperty(key);\n    if (value == null) {\n        System.out.println(\"Property \" + key + \" not found!\");\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..83bbad11 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String key) {\n+    Properties prop = new Properties();\n+    String propFileName = \"config.properties\";\n+    try {\n+        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n+        if (inputStream != null) {\n+            prop.load(inputStream);\n+        } else {\n+            throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n+        }\n+        inputStream.close();\n+    } catch (Exception e) {\n+        System.out.println(\"Exception: \" + e);\n+    }\n+    String value = prop.getProperty(key);\n+    if (value == null) {\n+        System.out.println(\"Property \" + key + \" not found!\");\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}