{
    "patch": "    protected BasePeriod(long duration) {\n        super();\n        iPeriodType = PeriodType.standard();\n        long millis = duration;\n\n        if (duration >= 0) {\n            iYears = getPeriodField(millis, DurationFieldType.years());\n            millis = millis - (iYears * MILLIS_PER_YEAR);\n            iMonths = getPeriodField(millis, DurationFieldType.months());\n            millis = millis - (iMonths * MILLIS_PER_MONTH);\n            iWeeks = getPeriodField(millis, DurationFieldType.weeks());\n            millis = millis - (iWeeks * MILLIS_PER_WEEK);\n            iDays = getPeriodField(millis, DurationFieldType.days());\n            millis = millis - (iDays * MILLIS_PER_DAY);\n            iHours = getPeriodField(millis, DurationFieldType.hours());\n            millis = millis - (iHours * MILLIS_PER_HOUR);\n            iMinutes = getPeriodField(millis, DurationFieldType.minutes());\n            millis = millis - (iMinutes * MILLIS_PER_MINUTE);\n            iSeconds = getPeriodField(millis, DurationFieldType.seconds());\n            millis = millis - (iSeconds * MILLIS_PER_SECOND);\n            iMillis = getPeriodField(millis, DurationFieldType.millis());\n        } else {\n            long offset = 0;\n            try {\n                MutablePeriod durationPeriod = new MutablePeriod(duration, iPeriodType);\n                offset = new Duration(durationPeriod.toPeriod(), new Period(0, iPeriodType)).getMillis();\n            } catch (ArithmeticException ex) {\n                // ignored\n            }\n\n            long[] remainder = new long[1];\n\n            iYears = getPeriodField(duration, DurationFieldType.years(), remainder);\n            if (iYears != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iYears, MILLIS_PER_YEAR));\n            }\n            iMonths = getPeriodField(remainder[0], DurationFieldType.months(), remainder);\n            if (iMonths != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iMonths, MILLIS_PER_MONTH));\n            }\n            iWeeks = getPeriodField(remainder[0], DurationFieldType.weeks(), remainder);\n            if (iWeeks != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iWeeks, MILLIS_PER_WEEK));\n            }\n            iDays = getPeriodField(remainder[0], DurationFieldType.days(), remainder);\n            if (iDays != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iDays, MILLIS_PER_DAY));\n            }\n            iHours = getPeriodField(remainder[0], DurationFieldType.hours(), remainder);\n            if (iHours != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iHours, MILLIS_PER_HOUR));\n            }\n            iMinutes = getPeriodField(remainder[0], DurationFieldType.minutes(), remainder);\n            if (iMinutes != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iMinutes, MILLIS_PER_MINUTE));\n            }\n            iSeconds = getPeriodField(remainder[0], DurationFieldType.seconds(), remainder);\n            if (iSeconds != 0) {\n                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iSeconds, MILLIS_PER_SECOND));\n            }\n            iMillis = getPeriodField(remainder[0], DurationFieldType.millis());\n            if (iMillis != 0) {\n                millis = FieldUtils.safeAdd(millis, iMillis);\n            }\n            iMillis = FieldUtils.safeToInt(FieldUtils.safeAdd(iMillis, offset));\n        }\n    }\n\n    private static int getPeriodField(long duration, DurationFieldType type) {\n        if (duration == Long.MIN_VALUE || duration == Long.MAX_VALUE) {\n            throw new ArithmeticException(\"Long overflow\");\n        }\n        return (int)(duration / type.getDurationType().getUnitMillis());\n    }\n    \n    private static int getPeriodField(long duration, DurationFieldType type, long[] remainder) {\n        if (duration == Long.MIN_VALUE || duration == Long.MAX_VALUE) {\n            throw new ArithmeticException(\"Long overflow\");\n        }\n        long unitMillis = type.getDurationType().getUnitMillis();\n        int value = (int)(duration / unitMillis);\n        remainder[0] = duration % unitMillis;\n        return value;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..77753ba7 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,88 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        super();\n+        iPeriodType = PeriodType.standard();\n+        long millis = duration;\n+\n+        if (duration >= 0) {\n+            iYears = getPeriodField(millis, DurationFieldType.years());\n+            millis = millis - (iYears * MILLIS_PER_YEAR);\n+            iMonths = getPeriodField(millis, DurationFieldType.months());\n+            millis = millis - (iMonths * MILLIS_PER_MONTH);\n+            iWeeks = getPeriodField(millis, DurationFieldType.weeks());\n+            millis = millis - (iWeeks * MILLIS_PER_WEEK);\n+            iDays = getPeriodField(millis, DurationFieldType.days());\n+            millis = millis - (iDays * MILLIS_PER_DAY);\n+            iHours = getPeriodField(millis, DurationFieldType.hours());\n+            millis = millis - (iHours * MILLIS_PER_HOUR);\n+            iMinutes = getPeriodField(millis, DurationFieldType.minutes());\n+            millis = millis - (iMinutes * MILLIS_PER_MINUTE);\n+            iSeconds = getPeriodField(millis, DurationFieldType.seconds());\n+            millis = millis - (iSeconds * MILLIS_PER_SECOND);\n+            iMillis = getPeriodField(millis, DurationFieldType.millis());\n+        } else {\n+            long offset = 0;\n+            try {\n+                MutablePeriod durationPeriod = new MutablePeriod(duration, iPeriodType);\n+                offset = new Duration(durationPeriod.toPeriod(), new Period(0, iPeriodType)).getMillis();\n+            } catch (ArithmeticException ex) {\n+                // ignored\n+            }\n+\n+            long[] remainder = new long[1];\n+\n+            iYears = getPeriodField(duration, DurationFieldType.years(), remainder);\n+            if (iYears != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iYears, MILLIS_PER_YEAR));\n+            }\n+            iMonths = getPeriodField(remainder[0], DurationFieldType.months(), remainder);\n+            if (iMonths != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iMonths, MILLIS_PER_MONTH));\n+            }\n+            iWeeks = getPeriodField(remainder[0], DurationFieldType.weeks(), remainder);\n+            if (iWeeks != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iWeeks, MILLIS_PER_WEEK));\n+            }\n+            iDays = getPeriodField(remainder[0], DurationFieldType.days(), remainder);\n+            if (iDays != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iDays, MILLIS_PER_DAY));\n+            }\n+            iHours = getPeriodField(remainder[0], DurationFieldType.hours(), remainder);\n+            if (iHours != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iHours, MILLIS_PER_HOUR));\n+            }\n+            iMinutes = getPeriodField(remainder[0], DurationFieldType.minutes(), remainder);\n+            if (iMinutes != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iMinutes, MILLIS_PER_MINUTE));\n+            }\n+            iSeconds = getPeriodField(remainder[0], DurationFieldType.seconds(), remainder);\n+            if (iSeconds != 0) {\n+                millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply(iSeconds, MILLIS_PER_SECOND));\n+            }\n+            iMillis = getPeriodField(remainder[0], DurationFieldType.millis());\n+            if (iMillis != 0) {\n+                millis = FieldUtils.safeAdd(millis, iMillis);\n+            }\n+            iMillis = FieldUtils.safeToInt(FieldUtils.safeAdd(iMillis, offset));\n+        }\n+    }\n+\n+    private static int getPeriodField(long duration, DurationFieldType type) {\n+        if (duration == Long.MIN_VALUE || duration == Long.MAX_VALUE) {\n+            throw new ArithmeticException(\"Long overflow\");\n+        }\n+        return (int)(duration / type.getDurationType().getUnitMillis());\n+    }\n+    \n+    private static int getPeriodField(long duration, DurationFieldType type, long[] remainder) {\n+        if (duration == Long.MIN_VALUE || duration == Long.MAX_VALUE) {\n+            throw new ArithmeticException(\"Long overflow\");\n+        }\n+        long unitMillis = type.getDurationType().getUnitMillis();\n+        int value = (int)(duration / unitMillis);\n+        remainder[0] = duration % unitMillis;\n+        return value;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}