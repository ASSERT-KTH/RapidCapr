{
    "patch": "public static String fixCode(String code) {\n    Pattern pattern = Pattern.compile(\"for\\\\((.*?):(.*?)\\\\)(.*?)\\\\{(.*?)}\", Pattern.DOTALL);\n    Matcher matcher = pattern.matcher(code);\n\n    while (matcher.find()) {\n        String beforeLoop = code.substring(0, matcher.start());\n        String insideLoop = matcher.group(0);\n        String afterLoop = code.substring(matcher.end());\n        \n        String newLoopHeader = matcher.group(1) + \":\";\n        \n        String secondArg = matcher.group(2).trim();\n        boolean secondArgIsArray = secondArg.matches(\"\\\\[.*?]\");\n        String secondArgIsInRelation = secondArg.contains(\" in \");\n        \n        if (secondArgIsArray) {\n            newLoopHeader += secondArg;\n        } else if (secondArgIsInRelation) {\n            newLoopHeader += String.format(\"[%s]\", secondArg);\n        } else {\n            newLoopHeader += String.format(\"[%s]\", secondArg);\n            afterLoop = afterLoop.replaceFirst(\"(\\\\W*)\" + secondArg + \"(\\\\W*)\", \"$1\" + secondArg + \"[$2]\");\n            insideLoop = insideLoop.replaceFirst(\":\" + secondArg + \"(\\\\W.*)\", \":\" + secondArg + \"[]$1\");\n        }\n        code = beforeLoop + \"for(\" + newLoopHeader + \")\" + insideLoop + afterLoop;\n        matcher = pattern.matcher(code);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..0abdfe03 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,35 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    Pattern pattern = Pattern.compile(\"for\\\\((.*?):(.*?)\\\\)(.*?)\\\\{(.*?)}\", Pattern.DOTALL);\n+    Matcher matcher = pattern.matcher(code);\n+\n+    while (matcher.find()) {\n+        String beforeLoop = code.substring(0, matcher.start());\n+        String insideLoop = matcher.group(0);\n+        String afterLoop = code.substring(matcher.end());\n+        \n+        String newLoopHeader = matcher.group(1) + \":\";\n+        \n+        String secondArg = matcher.group(2).trim();\n+        boolean secondArgIsArray = secondArg.matches(\"\\\\[.*?]\");\n+        String secondArgIsInRelation = secondArg.contains(\" in \");\n+        \n+        if (secondArgIsArray) {\n+            newLoopHeader += secondArg;\n+        } else if (secondArgIsInRelation) {\n+            newLoopHeader += String.format(\"[%s]\", secondArg);\n+        } else {\n+            newLoopHeader += String.format(\"[%s]\", secondArg);\n+            afterLoop = afterLoop.replaceFirst(\"(\\\\W*)\" + secondArg + \"(\\\\W*)\", \"$1\" + secondArg + \"[$2]\");\n+            insideLoop = insideLoop.replaceFirst(\":\" + secondArg + \"(\\\\W.*)\", \":\" + secondArg + \"[]$1\");\n+        }\n+        code = beforeLoop + \"for(\" + newLoopHeader + \")\" + insideLoop + afterLoop;\n+        matcher = pattern.matcher(code);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}