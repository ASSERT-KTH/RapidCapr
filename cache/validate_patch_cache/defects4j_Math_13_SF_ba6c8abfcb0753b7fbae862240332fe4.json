{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    final RealMatrix l = dec.getL();\n    final int n = l.getRowDimension();\n\n    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < (i + 1); j++) {\n            double e = l.getEntry(i, j);\n            for (int k = 0; k < j; k++) {\n                e -= s.getEntry(i, k) * s.getEntry(j, k);\n            }\n            if (i == j) {\n                s.setEntry(i, j, Math.sqrt(Math.max(e, 0.0)));\n            } else {\n                s.setEntry(i, j, e / s.getEntry(j, j));\n            }\n        }\n    }\n\n    return s;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2836f6d60 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    final RealMatrix l = dec.getL();\n+    final int n = l.getRowDimension();\n+\n+    RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < (i + 1); j++) {\n+            double e = l.getEntry(i, j);\n+            for (int k = 0; k < j; k++) {\n+                e -= s.getEntry(i, k) * s.getEntry(j, k);\n+            }\n+            if (i == j) {\n+                s.setEntry(i, j, Math.sqrt(Math.max(e, 0.0)));\n+            } else {\n+                s.setEntry(i, j, e / s.getEntry(j, j));\n+            }\n+        }\n     }\n+\n+    return s;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}