{
    "patch": "            long stack = 0;\n            for (int i = 0; i < text.length(); i++) {\n                char c = text.charAt(i);\n                switch (c) {\n                    case '-':\n                        stack = 0 - stack;\n                        break;\n                    case 'W':\n                        // Don't want to parse \"WWW\" as \"12\" weeks.\n                        if (i + 1 < text.length() && text.charAt(i + 1) == 'W') {\n                            break;\n                        }\n                        if (savedFieldsCount == savedFields.length) {\n                            throw new IllegalArgumentException(\"Too many fields\");\n                        }\n                        savedFields[savedFieldsCount++] = new SavedField(DateTimeFieldType.weekOfWeekyear(), stack);\n                        // Re-initialize the running total with the last value, not zero.\n                        stack = savedFields[savedFieldsCount - 1].init;\n                        break;\n                    default:\n                        if (c < '0' || c > '9') {\n                            throw new IllegalArgumentException(\"Invalid character found: \" + c);\n                        }\n                        stack = stack * 10 + (c - '0');\n                        break;\n                }\n            }\n            if (savedFieldsCount == savedFields.length) {\n                throw new IllegalArgumentException(\"Too many fields\");\n            }\n            savedFields[savedFieldsCount++] = new SavedField(DateTimeFieldType.weekyear(), stack);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0e481e1a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            long stack = 0;\n+            for (int i = 0; i < text.length(); i++) {\n+                char c = text.charAt(i);\n+                switch (c) {\n+                    case '-':\n+                        stack = 0 - stack;\n+                        break;\n+                    case 'W':\n+                        // Don't want to parse \"WWW\" as \"12\" weeks.\n+                        if (i + 1 < text.length() && text.charAt(i + 1) == 'W') {\n+                            break;\n+                        }\n+                        if (savedFieldsCount == savedFields.length) {\n+                            throw new IllegalArgumentException(\"Too many fields\");\n+                        }\n+                        savedFields[savedFieldsCount++] = new SavedField(DateTimeFieldType.weekOfWeekyear(), stack);\n+                        // Re-initialize the running total with the last value, not zero.\n+                        stack = savedFields[savedFieldsCount - 1].init;\n+                        break;\n+                    default:\n+                        if (c < '0' || c > '9') {\n+                            throw new IllegalArgumentException(\"Invalid character found: \" + c);\n+                        }\n+                        stack = stack * 10 + (c - '0');\n+                        break;\n+                }\n+            }\n+            if (savedFieldsCount == savedFields.length) {\n+                throw new IllegalArgumentException(\"Too many fields\");\n+            }\n+            savedFields[savedFieldsCount++] = new SavedField(DateTimeFieldType.weekyear(), stack);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}