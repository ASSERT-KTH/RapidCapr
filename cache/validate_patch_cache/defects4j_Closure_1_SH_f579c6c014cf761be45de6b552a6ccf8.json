{
    "patch": "    \n    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor() {\n      @Override\n      public void visit(Node node) {\n        if (node.isParam()) {\n          Var var = fnScope.getVar(node.getString());\n          if (!referenced.contains(var)) {\n            node.detach();\n            compiler.reportCodeChange();\n          } else {\n            referenced.remove(var);\n          }\n        }\n      }\n    });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..afa200b8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor() {\n+      @Override\n+      public void visit(Node node) {\n+        if (node.isParam()) {\n+          Var var = fnScope.getVar(node.getString());\n+          if (!referenced.contains(var)) {\n+            node.detach();\n+            compiler.reportCodeChange();\n+          } else {\n+            referenced.remove(var);\n+          }\n+        }\n+      }\n+    });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}