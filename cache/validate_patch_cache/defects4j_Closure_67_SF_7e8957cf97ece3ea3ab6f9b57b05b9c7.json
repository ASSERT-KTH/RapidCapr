{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\") && assign.getNext() == null &&\n              (!NodeUtil.isAssignmentOp(assign.getParent()) || NodeUtil.isExprAssign(assign.getParent()))) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..ae2b5105 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -314,17 +314,16 @@ class AnalyzePrototypeProperties implements CompilerPass {\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getType() == Token.GETPROP) {\n         // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n \n         if (isChainedProperty) {\n           Node child = n.getFirstChild().getFirstChild().getNext();\n \n           if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n+              child.getString().equals(\"prototype\") && assign.getNext() == null &&\n+              (!NodeUtil.isAssignmentOp(assign.getParent()) || NodeUtil.isExprAssign(assign.getParent()))) {\n             return true;\n           }\n         }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}