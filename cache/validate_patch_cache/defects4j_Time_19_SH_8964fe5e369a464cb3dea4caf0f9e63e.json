{
    "patch": "        if (offsetLocal == 0) {\n            return offsetAdjusted;\n        } else {\n            final long nextLocal = nextTransition(instantAdjusted);\n            final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n            // if same transitions then return adjusted, even if it's wrong\n            if (nextLocal == nextAdjusted) {\n                return offsetAdjusted;\n            }\n\n            // See if the current offset is OK\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                int diff = offsetPrev - offsetLocal;\n                if (instantAdjusted - prev <= diff) {\n                    return offsetPrev;\n                }\n            }\n\n            // Since the transitions are different but probably represent the\n            // same discontinuity, we need to check if the time between them\n            // is okay, and return the right offset for the instant in\n            // question.\n            if (offsetLocal < 0 && offsetAdjusted < 0 || offsetLocal > 0 && offsetAdjusted > 0 || Math.abs(offsetLocal - offsetAdjusted) < getStandardOffset(instantLocal)) {\n                return offsetLocal;\n            }\n\n            // Now we resolve the ambiguity, first by using the standard\n            if (offsetLocal >= 0) {\n                int stdOffset = getStandardOffset(nextLocal);\n                if (offsetAdjusted - stdOffset >= 0) {\n                    return stdOffset;\n                }\n            }\n            if (offsetAdjusted < 0) {\n                int stdOffset = getStandardOffset(nextAdjusted);\n                if (offsetLocal < 0 && (offsetAdjusted - stdOffset >= 0 || offsetLocal - offsetAdjusted < stdOffset)) {\n                    return stdOffset;\n                } else if (offsetLocal > 0 && (getOffset(nextLocal) < 0 || offsetAdjusted - stdOffset >= 0)) {\n                    return stdOffset;\n                }\n            }\n        }\n        return offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..817a57a5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,52 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal == 0) {\n+            return offsetAdjusted;\n+        } else {\n+            final long nextLocal = nextTransition(instantAdjusted);\n+            final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+            // if same transitions then return adjusted, even if it's wrong\n+            if (nextLocal == nextAdjusted) {\n+                return offsetAdjusted;\n+            }\n+\n+            // See if the current offset is OK\n+            long prev = previousTransition(instantAdjusted);\n+            if (prev < instantAdjusted) {\n+                int offsetPrev = getOffset(prev);\n+                int diff = offsetPrev - offsetLocal;\n+                if (instantAdjusted - prev <= diff) {\n+                    return offsetPrev;\n+                }\n+            }\n+\n+            // Since the transitions are different but probably represent the\n+            // same discontinuity, we need to check if the time between them\n+            // is okay, and return the right offset for the instant in\n+            // question.\n+            if (offsetLocal < 0 && offsetAdjusted < 0 || offsetLocal > 0 && offsetAdjusted > 0 || Math.abs(offsetLocal - offsetAdjusted) < getStandardOffset(instantLocal)) {\n+                return offsetLocal;\n+            }\n+\n+            // Now we resolve the ambiguity, first by using the standard\n+            if (offsetLocal >= 0) {\n+                int stdOffset = getStandardOffset(nextLocal);\n+                if (offsetAdjusted - stdOffset >= 0) {\n+                    return stdOffset;\n+                }\n+            }\n+            if (offsetAdjusted < 0) {\n+                int stdOffset = getStandardOffset(nextAdjusted);\n+                if (offsetLocal < 0 && (offsetAdjusted - stdOffset >= 0 || offsetLocal - offsetAdjusted < stdOffset)) {\n+                    return stdOffset;\n+                } else if (offsetLocal > 0 && (getOffset(nextLocal) < 0 || offsetAdjusted - stdOffset >= 0)) {\n+                    return stdOffset;\n+                }\n+            }\n+        }\n+        return offsetLocal;\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}