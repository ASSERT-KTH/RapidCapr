{
    "patch": "        // We care about calls to functions and function expressions that potentially modify dependent variables.\n        if (NodeUtil.isCallOrNew(n) && !NodeUtil.isImmutableValue(n.getFirstChild())) {\n          return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Handle the 'delete' operation and non-string property access\n        if (n.isDelProp() ||\n            (n.isGetElem() && !n.getLastChild().isString())) {\n          return true;\n        }\n\n        // Recurse on child nodes",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..e62180ec 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,18 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // We care about calls to functions and function expressions that potentially modify dependent variables.\n+        if (NodeUtil.isCallOrNew(n) && !NodeUtil.isImmutableValue(n.getFirstChild())) {\n+          return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Handle the 'delete' operation and non-string property access\n+        if (n.isDelProp() ||\n+            (n.isGetElem() && !n.getLastChild().isString())) {\n+          return true;\n+        }\n+\n+        // Recurse on child nodes\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}