{
    "patch": "      if (NodeUtil.isLValue(parent) && NodeUtil.isExpressionResultUsed(parent.getParent())) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && jsDoc.isConstructor()) {\n          // Constructor functions being lent to a prototype object\n          // is still okay.\n          Node maybePrototypeNode = parent.getParent().getParent().getParent();\n          if (maybePrototypeNode != null &&\n              maybePrototypeNode.getType() == Token.STRING &&\n              maybePrototypeNode.getString().equals(\"prototype\")) {\n            return true;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..21ed0f2b 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent) && NodeUtil.isExpressionResultUsed(parent.getParent())) {\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && jsDoc.isConstructor()) {\n+          // Constructor functions being lent to a prototype object\n+          // is still okay.\n+          Node maybePrototypeNode = parent.getParent().getParent().getParent();\n+          if (maybePrototypeNode != null &&\n+              maybePrototypeNode.getType() == Token.STRING &&\n+              maybePrototypeNode.getString().equals(\"prototype\")) {\n+            return true;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}