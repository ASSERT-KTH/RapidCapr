{
    "patch": "                // when offsetLocal > offsetAdjusted we want to make sure\n                // that instantLocal + offsetLocal > nextTransition(instantLocal)\n                // otherwise we need to add another hour to stay after the transition\n                if (offsetLocal > offsetAdjusted) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        long nextAdjustedLocalTime = nextAdjusted + offsetLocal;\n                        if (instantLocal >= nextAdjustedLocalTime) {\n                            return offsetLocal;\n                        } else {\n                            return offsetAdjusted + 1;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0316418c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // when offsetLocal > offsetAdjusted we want to make sure\n+                // that instantLocal + offsetLocal > nextTransition(instantLocal)\n+                // otherwise we need to add another hour to stay after the transition\n+                if (offsetLocal > offsetAdjusted) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        long nextAdjustedLocalTime = nextAdjusted + offsetLocal;\n+                        if (instantLocal >= nextAdjustedLocalTime) {\n+                            return offsetLocal;\n+                        } else {\n+                            return offsetAdjusted + 1;\n+                        }\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:59:59.999+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:59:59.999+03]:00>",
    "test_result": "FAIL"
}