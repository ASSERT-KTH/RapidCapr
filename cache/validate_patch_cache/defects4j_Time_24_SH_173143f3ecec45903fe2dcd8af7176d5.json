{
    "patch": "            } else if (e.getIllegalFieldValueErrorCode() == DateTimeFieldType.year()\n                    && e.getMessage().startsWith(\"Value \")) {\n                if (e.getMessage().endsWith(\" exceeds range of valid values: \" + iMinYear + \" to \" + iMaxYear)) {\n                    long value = extractParsedYear(e.getMessage());\n                    if (isStrict() || (value >= iMinYear && value <= iMaxYear)) {\n                        throw e;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3ddb56c3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,13 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } else if (e.getIllegalFieldValueErrorCode() == DateTimeFieldType.year()\n+                    && e.getMessage().startsWith(\"Value \")) {\n+                if (e.getMessage().endsWith(\" exceeds range of valid values: \" + iMinYear + \" to \" + iMaxYear)) {\n+                    long value = extractParsedYear(e.getMessage());\n+                    if (isStrict() || (value >= iMinYear && value <= iMaxYear)) {\n+                        throw e;\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}