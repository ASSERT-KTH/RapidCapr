{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n        return n;\n    }\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n        return n;\n    }\n    Node arrayNode = callTarget.getFirstChild();\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n            !arrayNode.hasChildren() ||\n            !ArrayJoinDetector.ARRAY_JOIN_METHOD.matches(callTarget).isMatch()) {\n        return n;\n    }\n    Node firstChild = arrayNode.getFirstChild();\n    if (firstChild != null && !NodeUtil.isImmutableValue(firstChild)) {\n        return n;\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n        joinString = NodeUtil.getStringValue(right);\n    }\n\n    StringBuilder foldedStr = new StringBuilder();\n    Node child = firstChild;\n    int foldedSize = 0;\n    while (child != null) {\n        String childValue;\n        if (child.getType() == Token.STRING) {\n            childValue = NodeUtil.getStringValue(child);\n        } else if (NodeUtil.isImmutableValue(child)) {\n            childValue = child.toString();\n        } else {\n            return n;\n        }\n        foldedSize += NodeUtil.countChars(childValue);\n        foldedStr.append(childValue);\n        child = child.getNext();\n        if (child != null) {\n            foldedSize++;\n            foldedStr.append(joinString);\n        }\n    }\n\n    if (foldedStr.length() == 0) {\n        Node emptyStringNode = IR.string(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize + 8 >= originalSize) { // Include some overhead.\n        return n;\n    }\n\n    Node foldedStrNode = IR.string(foldedStr.toString()).srcref(n);\n    if (foldedStr.length() == 1) {\n        Node fromCharCode =\n                IR.getprop(IR.name(\"String\"), IR.string(\"fromCharCode\")).srcref(n);\n        Node call = NodeUtil.newCallNode(fromCharCode, foldedStrNode).srcref(n);\n        foldedStrNode = NodeUtil.newExpr(call).srcref(n);\n    }\n\n    n.getParent().replaceChild(n, foldedStrNode);\n    reportCodeChange();\n    return foldedStrNode;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..3e55fdf9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,115 +364,75 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n-\n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n+        return n;\n     }\n-\n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n         return n;\n-      }\n     }\n-\n     Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n     if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+            !arrayNode.hasChildren() ||\n+            !ArrayJoinDetector.ARRAY_JOIN_METHOD.matches(callTarget).isMatch()) {\n+        return n;\n+    }\n+    Node firstChild = arrayNode.getFirstChild();\n+    if (firstChild != null && !NodeUtil.isImmutableValue(firstChild)) {\n+        return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+        joinString = NodeUtil.getStringValue(right);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n+    StringBuilder foldedStr = new StringBuilder();\n+    Node child = firstChild;\n     int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+    while (child != null) {\n+        String childValue;\n+        if (child.getType() == Token.STRING) {\n+            childValue = NodeUtil.getStringValue(child);\n+        } else if (NodeUtil.isImmutableValue(child)) {\n+            childValue = child.toString();\n         } else {\n-          sb.append(joinString);\n+            return n;\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        foldedSize += NodeUtil.countChars(childValue);\n+        foldedStr.append(childValue);\n+        child = child.getNext();\n+        if (child != null) {\n+            foldedSize++;\n+            foldedStr.append(joinString);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+    if (foldedStr.length() == 0) {\n+        Node emptyStringNode = IR.string(\"\");\n         n.getParent().replaceChild(n, emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n     }\n \n-    return n;\n+    int originalSize = InlineCostEstimator.getCost(n);\n+    if (foldedSize + 8 >= originalSize) { // Include some overhead.\n+        return n;\n+    }\n+\n+    Node foldedStrNode = IR.string(foldedStr.toString()).srcref(n);\n+    if (foldedStr.length() == 1) {\n+        Node fromCharCode =\n+                IR.getprop(IR.name(\"String\"), IR.string(\"fromCharCode\")).srcref(n);\n+        Node call = NodeUtil.newCallNode(fromCharCode, foldedStrNode).srcref(n);\n+        foldedStrNode = NodeUtil.newExpr(call).srcref(n);\n+    }\n+\n+    n.getParent().replaceChild(n, foldedStrNode);\n+    reportCodeChange();\n+    return foldedStrNode;\n   }\n \n   /**\n@@ -642,4 +602,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: package ArrayJoinDetector does not exist",
    "test_result": "ERROR"
}