{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      // Strip unreferenced default parameters.\n      Node param = argList.getFirstChild();\n      Node statementBlockParent = null;\n      for (int i = 0; param != null;) {\n        if (!param.isDefaultValue() || referenced.contains(fnScope.getVar(param.getFirstChild().getString()))) {\n          statementBlockParent = param.getParent();\n          param = param.getNext();\n          i++;\n        } else {\n          NodeUtil.deleteNode(param);\n          param = argList.getFirstChild();\n          for (int j = 0; j < i - 1; j++) {\n            param = param.getNext();\n          }\n        }\n      }\n      if (statementBlockParent != null) {\n        compiler.reportCodeChange();\n        statementBlockParent.putBooleanProp(Node.FUNCTION_HAS_DEFAULT_PARAMS, true);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ad392680 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      // Strip unreferenced default parameters.\n+      Node param = argList.getFirstChild();\n+      Node statementBlockParent = null;\n+      for (int i = 0; param != null;) {\n+        if (!param.isDefaultValue() || referenced.contains(fnScope.getVar(param.getFirstChild().getString()))) {\n+          statementBlockParent = param.getParent();\n+          param = param.getNext();\n+          i++;\n+        } else {\n+          NodeUtil.deleteNode(param);\n+          param = argList.getFirstChild();\n+          for (int j = 0; j < i - 1; j++) {\n+            param = param.getNext();\n+          }\n+        }\n+      }\n+      if (statementBlockParent != null) {\n+        compiler.reportCodeChange();\n+        statementBlockParent.putBooleanProp(Node.FUNCTION_HAS_DEFAULT_PARAMS, true);\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}