{
    "patch": "public static SimpleDateFormat createDateFormat(String pattern, Locale locale) {\n    SimpleDateFormat dateFormat = new SimpleDateFormat(pattern, locale);\n    dateFormat.setLenient(false);\n\n    // handle eras if present\n    String eraString = dateFormat.toPattern().replaceAll(\"['a-zA-Z]+\", \"\").trim();\n    if (!eraString.isEmpty()) {\n        if (eraString.equals(\"GG\")) {\n            dateFormat.setDateFormatSymbols(new DateFormatSymbols(locale) {\n                @Override\n                public String[] getEras() {\n                    return new String[]{\"BC\", \"AD\"};\n                }\n            });\n        } else {\n            throw new IllegalArgumentException(\"Unhandled era pattern: \" + eraString);\n        }\n    }\n\n    return dateFormat;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..63fed70a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,28 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+public static SimpleDateFormat createDateFormat(String pattern, Locale locale) {\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(pattern, locale);\n+    dateFormat.setLenient(false);\n+\n+    // handle eras if present\n+    String eraString = dateFormat.toPattern().replaceAll(\"['a-zA-Z]+\", \"\").trim();\n+    if (!eraString.isEmpty()) {\n+        if (eraString.equals(\"GG\")) {\n+            dateFormat.setDateFormatSymbols(new DateFormatSymbols(locale) {\n+                @Override\n+                public String[] getEras() {\n+                    return new String[]{\"BC\", \"AD\"};\n                 }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+            });\n+        } else {\n+            throw new IllegalArgumentException(\"Unhandled era pattern: \" + eraString);\n         }\n-        return regex;\n     }\n \n+    return dateFormat;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}