{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 15)))) {\n        // Julian calendar\n        long instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n        if (instant >= iCutoverMillis) {\n            // We're in the overlap period, so we need to use the Gregorian calendar to resolve the ambiguity\n            instant = iGregorianChronology.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist in Julian calendar\");\n            }\n        }\n        return instant;\n    }\n\n    // Gregorian calendar\n    long instant = iGregorianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (instant < iCutoverMillis) {\n        // We're in the overlap period, so we need to use the Julian calendar to resolve the ambiguity\n        instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            throw new IllegalArgumentException(\"Specified date does not exist in Gregorian calendar\");\n        }\n    }\n\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..3533e896 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,36 +347,54 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+        throws IllegalArgumentException {\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n+\n+    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 15)))) {\n+        // Julian calendar\n+        long instant = iJulianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+\n+        if (instant >= iCutoverMillis) {\n+            // We're in the overlap period, so we need to use the Gregorian calendar to resolve the ambiguity\n+            instant = iGregorianChronology.getDateTimeMillis\n+                    (year, monthOfYear, dayOfMonth,\n+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant < iCutoverMillis) {\n+                throw new IllegalArgumentException(\"Specified date does not exist in Julian calendar\");\n             }\n         }\n         return instant;\n     }\n \n+    // Gregorian calendar\n+    long instant = iGregorianChronology.getDateTimeMillis\n+            (year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+\n+    if (instant < iCutoverMillis) {\n+        // We're in the overlap period, so we need to use the Julian calendar to resolve the ambiguity\n+        instant = iJulianChronology.getDateTimeMillis\n+                (year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (instant >= iCutoverMillis) {\n+            throw new IllegalArgumentException(\"Specified date does not exist in Gregorian calendar\");\n+        }\n+    }\n+\n+    return instant;\n+}\n+\n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.\n      * @return the cutover instant",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}