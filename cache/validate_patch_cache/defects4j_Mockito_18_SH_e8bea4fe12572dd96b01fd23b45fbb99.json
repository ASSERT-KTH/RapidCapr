{
    "patch": "@Fix\npublic void fix(ExecutionContext ctx, MethodInvocation invocation, @Sequence(sequence = \"SEQUENCE1\") SequenceRecording sequenceRecording, SequenceInformation information) {\n    MethodDeclaration methodDeclaration = (MethodDeclaration) invocation.getWrappedObject();\n    StatementList statements = methodDeclaration.getBody().get().getStatements();\n\n    if (statements.size() > 0 && statements.get(0).isExpressionStmt()) {\n        ExpressionStmt firstStatement = statements.getFirst(ExpressionStmt.class).get();\n        if (firstStatement.getExpression().isMethodCallExpr()) {\n            MethodCallExpr mce = firstStatement.getExpression().asMethodCallExpr();\n            if (mce.getName().asString().equals(\"init\")) {\n                statements.remove(0);\n            }\n        }\n    }\n\n    sequenceRecording.getLastInvocation().setReturnValue(Collections.emptyList());\n}\n",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}