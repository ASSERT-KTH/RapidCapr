{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    int numArgsToRemove = 0;\n    for (Node arg : argList.children()) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        numArgsToRemove++;\n        if (!modifyCallers) {\n          compiler.reportChangeToEnclosingScope(arg);\n        }\n      } else {\n        break; // All remaining args are referenced\n      }\n    }\n    for (int i = 0; i < numArgsToRemove; i++) {\n      argList.removeChild(lastArg);\n    }\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bdc863bc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    int numArgsToRemove = 0;\n+    for (Node arg : argList.children()) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        numArgsToRemove++;\n+        if (!modifyCallers) {\n+          compiler.reportChangeToEnclosingScope(arg);\n+        }\n+      } else {\n+        break; // All remaining args are referenced\n+      }\n+    }\n+    for (int i = 0; i < numArgsToRemove; i++) {\n+      argList.removeChild(lastArg);\n+    }\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}