{
    "patch": "public static String escapeString(String s, String encoding) throws UnsupportedEncodingException {\n    if (s == null) {\n        return null;\n    }\n    StringBuilder result = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (c == '\\'') {\n            result.append(\"\\\\'\");\n        } else if (c == '\\\\') {\n            result.append(\"\\\\\\\\\");\n        } else if (c == '\\n') {\n            result.append(\"\\\\n\");\n        } else if (c == '\\r') {\n            result.append(\"\\\\r\");\n        } else if (c == '\\t') {\n            result.append(\"\\\\t\");\n        } else if (c == '\\\"') {\n            result.append(\"\\\\\\\"\");\n        } else if (c < 32 || c > 126) {\n            byte[] b = Character.toString(c).getBytes(encoding);\n            for (byte aByte : b) {\n                result.append('=');\n                result.append(String.format(\"%02X\", aByte));\n            }\n        } else {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..12651c56 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,36 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeString(String s, String encoding) throws UnsupportedEncodingException {\n+    if (s == null) {\n+        return null;\n+    }\n+    StringBuilder result = new StringBuilder();\n+    for (char c : s.toCharArray()) {\n+        if (c == '\\'') {\n+            result.append(\"\\\\'\");\n+        } else if (c == '\\\\') {\n+            result.append(\"\\\\\\\\\");\n+        } else if (c == '\\n') {\n+            result.append(\"\\\\n\");\n+        } else if (c == '\\r') {\n+            result.append(\"\\\\r\");\n+        } else if (c == '\\t') {\n+            result.append(\"\\\\t\");\n+        } else if (c == '\\\"') {\n+            result.append(\"\\\\\\\"\");\n+        } else if (c < 32 || c > 126) {\n+            byte[] b = Character.toString(c).getBytes(encoding);\n+            for (byte aByte : b) {\n+                result.append('=');\n+                result.append(String.format(\"%02X\", aByte));\n+            }\n+        } else {\n+            result.append(c);\n+        }\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}