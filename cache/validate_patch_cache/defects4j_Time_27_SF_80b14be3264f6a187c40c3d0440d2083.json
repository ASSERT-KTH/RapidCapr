{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    Object[] comp = null;\n\n    for (int i = 0; i < size; i++) {\n        Object pair = elementPairs.get(i);\n\n        if (pair instanceof Separator) {\n            List<Object> leftPairs = elementPairs.subList(0, i);\n            List<Object> rightPairs = elementPairs.subList(i + 1, size);\n            PeriodFormatter leftFormatter = toFormatter(leftPairs, notPrinter, notParser);\n            PeriodFormatter rightFormatter = toFormatter(rightPairs, notPrinter, notParser);\n            if (notPrinter) {\n                return new PeriodFormatter(null, ((Separator) pair).finish(null, rightFormatter.getParser()));\n            } else if (notParser) {\n                return new PeriodFormatter(leftFormatter.getPrinter(), ((Separator) pair).finish(rightFormatter.getPrinter(), null));\n            } else {\n                return new PeriodFormatter(leftFormatter.getPrinter(), ((Separator) pair).finish(rightFormatter.getPrinter(), rightFormatter.getParser()));\n            }\n        } else if (pair instanceof PeriodPrinter && !notPrinter) {\n            comp = createComposite(elementPairs);\n            break;\n        } else if (pair instanceof PeriodParser && !notParser) {\n            comp = createComposite(elementPairs);\n            break;\n        }\n    }\n\n    if (comp == null) {\n        comp = createComposite(elementPairs);\n    }\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n\n    PeriodPrinter printer = (PeriodPrinter) comp[0];\n    PeriodParser parser = (PeriodParser) comp[1];\n\n    for (int i = 0; i < size; i++) {\n        Object pair = elementPairs.get(i);\n\n        if (pair instanceof Separator) {\n            List<Object> leftPairs = elementPairs.subList(0, i);\n            List<Object> rightPairs = elementPairs.subList(i + 1, size);\n\n            PeriodFormatter leftFormatter = toFormatter(leftPairs, true, false);\n            PeriodFormatter rightFormatter = toFormatter(rightPairs, false, true);\n\n            printer = ((Separator) pair).finish(leftFormatter.getPrinter(), rightFormatter.getPrinter());\n            parser = ((Separator) pair).finish(leftFormatter.getParser(), rightFormatter.getParser());\n\n            break;\n        }\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..93f40767 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,82 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    Object[] comp = null;\n+\n+    for (int i = 0; i < size; i++) {\n+        Object pair = elementPairs.get(i);\n+\n+        if (pair instanceof Separator) {\n+            List<Object> leftPairs = elementPairs.subList(0, i);\n+            List<Object> rightPairs = elementPairs.subList(i + 1, size);\n+            PeriodFormatter leftFormatter = toFormatter(leftPairs, notPrinter, notParser);\n+            PeriodFormatter rightFormatter = toFormatter(rightPairs, notPrinter, notParser);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, ((Separator) pair).finish(null, rightFormatter.getParser()));\n+            } else if (notParser) {\n+                return new PeriodFormatter(leftFormatter.getPrinter(), ((Separator) pair).finish(rightFormatter.getPrinter(), null));\n+            } else {\n+                return new PeriodFormatter(leftFormatter.getPrinter(), ((Separator) pair).finish(rightFormatter.getPrinter(), rightFormatter.getParser()));\n+            }\n+        } else if (pair instanceof PeriodPrinter && !notPrinter) {\n+            comp = createComposite(elementPairs);\n+            break;\n+        } else if (pair instanceof PeriodParser && !notParser) {\n+            comp = createComposite(elementPairs);\n+            break;\n         }\n     }\n \n+    if (comp == null) {\n+        comp = createComposite(elementPairs);\n+    }\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+\n+    PeriodPrinter printer = (PeriodPrinter) comp[0];\n+    PeriodParser parser = (PeriodParser) comp[1];\n+\n+    for (int i = 0; i < size; i++) {\n+        Object pair = elementPairs.get(i);\n+\n+        if (pair instanceof Separator) {\n+            List<Object> leftPairs = elementPairs.subList(0, i);\n+            List<Object> rightPairs = elementPairs.subList(i + 1, size);\n+\n+            PeriodFormatter leftFormatter = toFormatter(leftPairs, true, false);\n+            PeriodFormatter rightFormatter = toFormatter(rightPairs, false, true);\n+\n+            printer = ((Separator) pair).finish(leftFormatter.getPrinter(), rightFormatter.getPrinter());\n+            parser = ((Separator) pair).finish(leftFormatter.getParser(), rightFormatter.getParser());\n+\n+            break;\n+        }\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}