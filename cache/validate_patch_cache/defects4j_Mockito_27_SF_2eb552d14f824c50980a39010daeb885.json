{
    "patch": "import org.mockito.internal.creation.bytebuddy.MocksCreationSettings;\n\nimport java.lang.reflect.Proxy;\n\npublic <T> void resetMock(T mock) {\n    MocksCreationSettings<T> settings = new MocksCreationSettings<>();\n    settings.setTargetType(mock.getClass());\n    MockHandlerInterface<T> oldMockHandler = settings.getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().spiedInstance(mock).defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if(mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        Class<?>[] interfaces = mock.getClass().getInterfaces();\n        T proxy = (T) Proxy.newProxyInstance(\n                mock.getClass().getClassLoader(),\n                interfaces,\n                newFilter);\n        settings.setMockHandler(proxy, newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ac2228f47 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MocksCreationSettings;\n+\n+import java.lang.reflect.Proxy;\n+\n+public <T> void resetMock(T mock) {\n+    MocksCreationSettings<T> settings = new MocksCreationSettings<>();\n+    settings.setTargetType(mock.getClass());\n+    MockHandlerInterface<T> oldMockHandler = settings.getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().spiedInstance(mock).defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if(mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        Class<?>[] interfaces = mock.getClass().getInterfaces();\n+        T proxy = (T) Proxy.newProxyInstance(\n+                mock.getClass().getClassLoader(),\n+                interfaces,\n+                newFilter);\n+        settings.setMockHandler(proxy, newMockHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}