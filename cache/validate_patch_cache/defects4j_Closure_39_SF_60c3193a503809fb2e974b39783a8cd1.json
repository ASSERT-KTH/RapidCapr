{
    "patch": "  private boolean hasObjectTypeProperties(ObjectType objType, Set<String> propertyNames, int maxRecursionDepth) {\n    if (objType.isNativeObjectType() || maxRecursionDepth <= 0) {\n      return false;\n    }\n    for (ObjectType current = objType;\n        current != null && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n        current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n      for (String property : propertyNames) {\n        JSType type = current.getOwnPropertyJSType(property);\n        if (type.isUnknownType() || type.isVoidType() || type.isAllType()) {\n          continue;\n        }\n        if (type.isRecordType()) {\n          if (!hasObjectTypeProperties(type.toMaybeObjectType(), propertyNames, maxRecursionDepth - 1)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  public boolean canBeCalled() {\n    return isRegexpType() || isRecursedType();\n  }\n\n  public boolean isRecursedType() {\n    Set<String> propertyNameSet = Sets.newHashSet();\n    return hasObjectTypeProperties(this, propertyNameSet, MAX_PROPERTY_RECURSION_DEPTH);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..36820a99 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,54 +345,36 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n+  private boolean hasObjectTypeProperties(ObjectType objType, Set<String> propertyNames, int maxRecursionDepth) {\n+    if (objType.isNativeObjectType() || maxRecursionDepth <= 0) {\n+      return false;\n+    }\n+    for (ObjectType current = objType;\n+        current != null && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+        current = current.getImplicitPrototype()) {\n+      propertyNames.addAll(current.getOwnPropertyNames());\n       for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        JSType type = current.getOwnPropertyJSType(property);\n+        if (type.isUnknownType() || type.isVoidType() || type.isAllType()) {\n+          continue;\n         }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        if (type.isRecordType()) {\n+          if (!hasObjectTypeProperties(type.toMaybeObjectType(), propertyNames, maxRecursionDepth - 1)) {\n+            return false;\n+          }\n         }\n       }\n+    }\n+    return true;\n+  }\n \n-      sb.append(\"}\");\n+  public boolean canBeCalled() {\n+    return isRegexpType() || isRecursedType();\n+  }\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n+  public boolean isRecursedType() {\n+    Set<String> propertyNameSet = Sets.newHashSet();\n+    return hasObjectTypeProperties(this, propertyNameSet, MAX_PROPERTY_RECURSION_DEPTH);\n   }\n \n   void setPrettyPrint(boolean prettyPrint) {",
    "result_reason": "error: PrototypeObjectType is not abstract and does not override abstract method toStringHelper(boolean) in JSType",
    "test_result": "ERROR"
}