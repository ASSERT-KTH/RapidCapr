{
    "patch": "  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent != null && parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.EXPR_RESULT:\n      Node firstChild = n.getFirstChild();\n      if (firstChild != null && firstChild.getType() == Token.ASSIGN) {\n        if (firstChild.getFirstChild().getType() == Token.NAME) {\n          defineVar(firstChild.getFirstChild(), parent);\n        } else {\n          traverse(firstChild, n);\n        }\n      }\n      break;\n    case Token.LP:\n      if (parent != null) {\n        if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n          handleFunctionInputs(n);\n        } else if (parent.getType() == Token.FUNCTION && parent.getParent().getType() != Token.OBJECTLIT) {\n          handleFunctionInputs(parent);\n        }\n      }\n      break;\n    default:\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..818bd425 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,42 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent != null && parent.getType() == Token.NAME) {\n+        return;\n+      }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.EXPR_RESULT:\n+      Node firstChild = n.getFirstChild();\n+      if (firstChild != null && firstChild.getType() == Token.ASSIGN) {\n+        if (firstChild.getFirstChild().getType() == Token.NAME) {\n+          defineVar(firstChild.getFirstChild(), parent);\n+        } else {\n+          traverse(firstChild, n);\n+        }\n       }\n+      break;\n+    case Token.LP:\n+      if (parent != null) {\n+        if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n+          handleFunctionInputs(n);\n+        } else if (parent.getType() == Token.FUNCTION && parent.getParent().getType() != Token.OBJECTLIT) {\n+          handleFunctionInputs(parent);\n+        }\n+      }\n+      break;\n+    default:\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}