{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        ScriptableObjectType childType = ScriptableObjectType.of(child);\n        switch (childType) {\n          case STRING:\n          case GET:\n          case SET:\n            String name = child.getString();\n            T type = typeSystem.getType(getScope(), n, name);\n\n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n              // TODO(user): It doesn't look like the user can do much in this\n              // case right now.\n              if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(\n                    JSError.make(\n                        t.getSourceName(),\n                        child,\n                        propertiesToErrorFor.get(name),\n                        Warnings.INVALIDATION,\n                        name,\n                        (type == null ? \"null\" : type.toString()),\n                        n.toString(),\n                        \"\"));\n              }\n            }\n            break;\n\n          case NUMBER:\n            // We should never mix numbers and strings in an object literal.\n            // Log an error and do not include the property in the renaming map.\n            compiler.report(\n                JSError.make(\n                    t.getSourceName(),\n                    child,\n                    Warnings.INVALIDATION,\n                    \"Property name in object literal cannot be a number.\"));\n            break;\n\n          default:\n            // The type of the child is not known. We should never see this.\n            // Log an error and do not include the property in the renaming map.\n            compiler.report(\n                JSError.make(\n                    t.getSourceName(),\n                    child,\n                    Warnings.INVALIDATION,\n                    \"Unexpected type of child node in object literal.\"));\n            break;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..e8c7eeed 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,61 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        ScriptableObjectType childType = ScriptableObjectType.of(child);\n+        switch (childType) {\n+          case STRING:\n+          case GET:\n+          case SET:\n+            String name = child.getString();\n+            T type = typeSystem.getType(getScope(), n, name);\n+\n+            Property prop = getProperty(name);\n+            if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+              // TODO(user): It doesn't look like the user can do much in this\n+              // case right now.\n+              if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(\n+                    JSError.make(\n+                        t.getSourceName(),\n+                        child,\n+                        propertiesToErrorFor.get(name),\n+                        Warnings.INVALIDATION,\n+                        name,\n+                        (type == null ? \"null\" : type.toString()),\n+                        n.toString(),\n+                        \"\"));\n+              }\n+            }\n+            break;\n+\n+          case NUMBER:\n+            // We should never mix numbers and strings in an object literal.\n+            // Log an error and do not include the property in the renaming map.\n+            compiler.report(\n+                JSError.make(\n+                    t.getSourceName(),\n+                    child,\n+                    Warnings.INVALIDATION,\n+                    \"Property name in object literal cannot be a number.\"));\n+            break;\n+\n+          default:\n+            // The type of the child is not known. We should never see this.\n+            // Log an error and do not include the property in the renaming map.\n+            compiler.report(\n+                JSError.make(\n+                    t.getSourceName(),\n+                    child,\n+                    Warnings.INVALIDATION,\n+                    \"Unexpected type of child node in object literal.\"));\n+            break;\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}