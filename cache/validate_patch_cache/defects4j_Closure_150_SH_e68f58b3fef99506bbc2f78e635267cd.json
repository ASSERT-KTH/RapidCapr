{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n  case Token.FUNCTION:\n    if (NodeUtil.isFunctionExpression(n)) {\n      handleFunctionInputs(n.getParent());\n    } else if (parent.getType() == Token.EXPR_RESULT) {\n      defineDeclaredFunction(n, parent);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      defineDeclaredFunction(n, parent.getParent());\n    }\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n}\n\nif (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT\n    && parent.getFirstChild().getType() == Token.FUNCTION && n.hasChildren()) {\n  handleFunctionInputs(parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..84481598 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,29 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+  case Token.FUNCTION:\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      handleFunctionInputs(n.getParent());\n+    } else if (parent.getType() == Token.EXPR_RESULT) {\n+      defineDeclaredFunction(n, parent);\n+    } else if (NodeUtil.isFunctionDeclaration(n)) {\n+      defineDeclaredFunction(n, parent.getParent());\n+    }\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+}\n+\n+if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT\n+    && parent.getFirstChild().getType() == Token.FUNCTION && n.hasChildren()) {\n+  handleFunctionInputs(parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}