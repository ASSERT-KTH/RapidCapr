{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    if (nextLocal != nextAdjusted) {\n        int offsetNext = getOffset(nextLocal);\n        int diff = offsetNext - offsetLocal;\n        if ((nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n            if ((nextAdjusted - instantLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                if (offsetLocal < offsetAdjusted) {\n                    return offsetLocal;\n                }\n                if ((nextLocal - instantAdjusted) >= (offsetNext - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetNext;\n                }\n            }\n        }\n    } else {\n        int diff = offsetAdjusted - offsetLocal;\n        if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n            if ((nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                return offsetLocal;\n            }\n        } else {\n            int nextOffsetLocal = getOffset(nextLocal - 1);\n            if (nextOffsetLocal > offsetLocal && (nextAdjusted - instantLocal) >= (nextOffsetLocal - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR) {\n                return nextOffsetLocal;\n            }\n        }\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4ca9e863 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    if (nextLocal != nextAdjusted) {\n+        int offsetNext = getOffset(nextLocal);\n+        int diff = offsetNext - offsetLocal;\n+        if ((nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+            if ((nextAdjusted - instantLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                if (offsetLocal < offsetAdjusted) {\n+                    return offsetLocal;\n+                }\n+                if ((nextLocal - instantAdjusted) >= (offsetNext - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetNext;\n+                }\n+            }\n+        }\n+    } else {\n+        int diff = offsetAdjusted - offsetLocal;\n+        if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+            if ((nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            int nextOffsetLocal = getOffset(nextLocal - 1);\n+            if (nextOffsetLocal > offsetLocal && (nextAdjusted - instantLocal) >= (nextOffsetLocal - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR) {\n+                return nextOffsetLocal;\n+            }\n+        }\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}