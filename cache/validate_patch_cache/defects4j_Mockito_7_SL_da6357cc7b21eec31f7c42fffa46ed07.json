{
    "patch": " private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n        GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n        Type type = Object.class; // set it to Object.class by default\n        if (genericDeclaration instanceof Class<?>) {\n            Class<?> clazz = (Class<?>) genericDeclaration;\n            for (int i = 0; i < clazz.getTypeParameters().length; i++) {\n                TypeVariable<?> tv = clazz.getTypeParameters()[i];\n                if (tv.equals(typeVariable)) {\n                    Type[] actualTypeArguments = clazz.getTypeParameters();\n                    if (actualTypeArguments != null && actualTypeArguments.length > i && actualTypeArguments[i] != null) {\n                        type = actualTypeArguments[i];\n                    }\n                }\n            }\n        }\n        return type;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..606fbaabb 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+ private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+        GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n+        Type type = Object.class; // set it to Object.class by default\n+        if (genericDeclaration instanceof Class<?>) {\n+            Class<?> clazz = (Class<?>) genericDeclaration;\n+            for (int i = 0; i < clazz.getTypeParameters().length; i++) {\n+                TypeVariable<?> tv = clazz.getTypeParameters()[i];\n+                if (tv.equals(typeVariable)) {\n+                    Type[] actualTypeArguments = clazz.getTypeParameters();\n+                    if (actualTypeArguments != null && actualTypeArguments.length > i && actualTypeArguments[i] != null) {\n+                        type = actualTypeArguments[i];\n+                    }\n+                }\n+            }\n+        }\n+        return type;\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}