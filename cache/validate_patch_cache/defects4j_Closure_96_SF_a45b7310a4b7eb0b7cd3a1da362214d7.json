{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n        FunctionType functionType) {\n\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); //skip the function name\n\n    List<Node> parameters = functionType.getParameters();\n    boolean isVarArgs = functionType.isVarArgs();\n\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    int numDefinedParams = isVarArgs ? parameters.size() - 1 : parameters.size();\n    int expectedArgs = numDefinedParams + (isVarArgs ? 0 : Math.max(0, numDefinedParams - arguments.hasNext()));\n    int numArgs = 0;\n\n    while (arguments.hasNext()) {\n        if (!parameters.isEmpty()) {\n            parameter = parameters.remove(0);\n            argument = arguments.next();\n            numArgs++;\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n        } else {\n            if (!isVarArgs) { //too many arguments for non-varargs function\n                report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.valueOf(numArgs), String.valueOf(expectedArgs));\n            }\n            arguments.next(); //consume remaining arguments\n            break;\n        }\n    }\n\n    if (parameters.isEmpty() && !isVarArgs && arguments.hasNext()) { //too many arguments for non-varargs function\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numDefinedParams + numArgs), String.valueOf(expectedArgs));\n    }\n\n    if (parameters.isEmpty() && isVarArgs && !arguments.hasNext()) {\n        //var args function with zero arguments\n        expectedArgs = numDefinedParams;\n    }\n\n    if (!isVarArgs && numArgs < numDefinedParams) { //too few arguments for non-varargs function\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(expectedArgs));\n    } else if (numArgs < numDefinedParams || numArgs > expectedArgs) { //wrong number of arguments for varargs function\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(expectedArgs));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..8ea06455 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call,\n+        FunctionType functionType) {\n+\n     Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    arguments.next(); //skip the function name\n+\n+    List<Node> parameters = functionType.getParameters();\n+    boolean isVarArgs = functionType.isVarArgs();\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    int numDefinedParams = isVarArgs ? parameters.size() - 1 : parameters.size();\n+    int expectedArgs = numDefinedParams + (isVarArgs ? 0 : Math.max(0, numDefinedParams - arguments.hasNext()));\n+    int numArgs = 0;\n+\n+    while (arguments.hasNext()) {\n+        if (!parameters.isEmpty()) {\n+            parameter = parameters.remove(0);\n+            argument = arguments.next();\n+            numArgs++;\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else {\n+            if (!isVarArgs) { //too many arguments for non-varargs function\n+                report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.valueOf(numArgs), String.valueOf(expectedArgs));\n+            }\n+            arguments.next(); //consume remaining arguments\n+            break;\n+        }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (parameters.isEmpty() && !isVarArgs && arguments.hasNext()) { //too many arguments for non-varargs function\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numDefinedParams + numArgs), String.valueOf(expectedArgs));\n     }\n-  }\n+\n+    if (parameters.isEmpty() && isVarArgs && !arguments.hasNext()) {\n+        //var args function with zero arguments\n+        expectedArgs = numDefinedParams;\n+    }\n+\n+    if (!isVarArgs && numArgs < numDefinedParams) { //too few arguments for non-varargs function\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(expectedArgs));\n+    } else if (numArgs < numDefinedParams || numArgs > expectedArgs) { //wrong number of arguments for varargs function\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(expectedArgs));\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}