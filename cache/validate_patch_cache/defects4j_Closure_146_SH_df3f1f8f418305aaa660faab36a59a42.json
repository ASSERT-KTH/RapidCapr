{
    "patch": "// restrict types by not null or undefined\nJSType thisRestricted = this.restrictByNotNullOrUndefined();\nJSType thatRestricted = that.restrictByNotNullOrUndefined();\n\nif (thisRestricted == null || thatRestricted == null) {\n  JSType notNullType = JSType.join(JSType.NULL, JSType.UNDEFINED).getGreatestSubtype();\n  return new TypePair(notNullType, notNullType);\n}\n\n// check for equivalent types\nif (thisRestricted.isEquivalentTo(thatRestricted)) {\n  return new TypePair(thisRestricted, thisRestricted);\n}\n\n// handle cases where one type is nullable and the other is not\nif (this.isNullable() && !that.isNullable()) {\n  return new TypePair(thatRestricted, thatRestricted);\n} else if (that.isNullable() && !this.isNullable()) {\n  return new TypePair(thisRestricted, thisRestricted);\n}\n\nreturn new TypePair(thisRestricted, thatRestricted);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..5000a562 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,28 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+// restrict types by not null or undefined\n+JSType thisRestricted = this.restrictByNotNullOrUndefined();\n+JSType thatRestricted = that.restrictByNotNullOrUndefined();\n+\n+if (thisRestricted == null || thatRestricted == null) {\n+  JSType notNullType = JSType.join(JSType.NULL, JSType.UNDEFINED).getGreatestSubtype();\n+  return new TypePair(notNullType, notNullType);\n+}\n+\n+// check for equivalent types\n+if (thisRestricted.isEquivalentTo(thatRestricted)) {\n+  return new TypePair(thisRestricted, thisRestricted);\n+}\n+\n+// handle cases where one type is nullable and the other is not\n+if (this.isNullable() && !that.isNullable()) {\n+  return new TypePair(thatRestricted, thatRestricted);\n+} else if (that.isNullable() && !this.isNullable()) {\n+  return new TypePair(thisRestricted, thisRestricted);\n+}\n+\n+return new TypePair(thisRestricted, thatRestricted);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}