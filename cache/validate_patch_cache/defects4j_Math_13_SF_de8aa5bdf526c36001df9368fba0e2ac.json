{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(dec.getSquareRoot().getData());\n    final RealMatrix invEigenVectors = dec.getV().inverse();\n    final RealMatrix tmp = invEigenVectors.multiply(sqrtEigenValues);\n    return tmp.multiply(dec.getV().transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ad319cd56 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtEigenValues = MatrixUtils.createRealDiagonalMatrix(dec.getSquareRoot().getData());\n+    final RealMatrix invEigenVectors = dec.getV().inverse();\n+    final RealMatrix tmp = invEigenVectors.multiply(sqrtEigenValues);\n+    return tmp.multiply(dec.getV().transpose());\n+}\n }",
    "result_reason": "error: method createRealDiagonalMatrix in class MatrixUtils cannot be applied to given types;",
    "test_result": "ERROR"
}