{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int numRows = m.getRowDimension();\n    final int numCols = m.getColumnDimension();\n    \n    // Check if matrix is too large\n    if (numRows > 1000 || numCols > 1000) {\n        throw new IllegalArgumentException(\"Matrix size is too large for square root calculation.\");\n    }\n    \n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrtMatrix = dec.getSquareRoot();\n    \n    // Check if the square root matrix contains NaN or infinity values\n    if (!isFinite(sqrtMatrix)) {\n        throw new IllegalArgumentException(\"Matrix contains NaN or infinity values.\");\n    }\n    \n    return sqrtMatrix;\n}\n\n// Helper function to check if a matrix contains NaN or infinity values\nprivate boolean isFinite(RealMatrix m) {\n    for (double d : m.getColumn(0)) {\n        if (Double.isNaN(d) || Double.isInfinite(d))\n            return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1632041cd 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int numRows = m.getRowDimension();\n+    final int numCols = m.getColumnDimension();\n+    \n+    // Check if matrix is too large\n+    if (numRows > 1000 || numCols > 1000) {\n+        throw new IllegalArgumentException(\"Matrix size is too large for square root calculation.\");\n     }\n+    \n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrtMatrix = dec.getSquareRoot();\n+    \n+    // Check if the square root matrix contains NaN or infinity values\n+    if (!isFinite(sqrtMatrix)) {\n+        throw new IllegalArgumentException(\"Matrix contains NaN or infinity values.\");\n+    }\n+    \n+    return sqrtMatrix;\n+}\n+\n+// Helper function to check if a matrix contains NaN or infinity values\n+private boolean isFinite(RealMatrix m) {\n+    for (double d : m.getColumn(0)) {\n+        if (Double.isNaN(d) || Double.isInfinite(d))\n+            return false;\n+    }\n+    return true;\n+}\n }",
    "result_reason": "java.lang.IllegalArgumentException: Matrix size is too large for square root calculation.",
    "test_result": "FAIL"
}