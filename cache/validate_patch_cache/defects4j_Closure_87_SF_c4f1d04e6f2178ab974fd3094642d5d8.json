{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // Check if the only child is an expression\n      if (NodeUtil.isExpressionNode(maybeExpr)\n          || (maybeExpr.getType() == Token.EXPR_RESULT\n              && NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n        Node parent = n.getParent();\n        while (parent != null) {\n          int type = parent.getType();\n          if (type == Token.EXPR_RESULT\n              || type == Token.HOOK\n              || type == Token.AND\n              || type == Token.OR) {\n            return false;\n          }\n          if (NodeUtil.isLoopStructure(parent)) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              return false;\n            }\n            break;\n          }\n          if (type == Token.IF) {\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n              if(condition.isBinary() \n                 && condition.getType() == Token.AND\n                 && isStrictBooleanExpression(condition.getFirstChild())\n                 && isStrictBooleanExpression(condition.getSecondChild())) {\n                //e.g. (x && y) && z\n                return false;\n              }\n              return !hasReturnValue(condition);\n            }\n          }\n          parent = parent.getParent();\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean hasReturnValue(Node n) {\n  if(n.isFunction()) {\n    return true;\n  }\n  ImmutableList<Node> children = n.children();\n  if(!children.isEmpty()) {\n    for(Node child : children) {\n      if(hasReturnValue(child)) {\n        return true;\n      }\n    }\n  } \n  return n.isReturn();\n}\n\nprivate boolean isStrictBooleanExpression(Node n) {\n  if(NodeUtil.isBooleanResultExpression(n, true)\n      || NodeUtil.isBooleanResultExpression(n, false)) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..64a59e76 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,74 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      // Check if the only child is an expression\n+      if (NodeUtil.isExpressionNode(maybeExpr)\n+          || (maybeExpr.getType() == Token.EXPR_RESULT\n+              && NodeUtil.isExpressionNode(maybeExpr.getFirstChild()))) {\n+        Node parent = n.getParent();\n+        while (parent != null) {\n+          int type = parent.getType();\n+          if (type == Token.EXPR_RESULT\n+              || type == Token.HOOK\n+              || type == Token.AND\n+              || type == Token.OR) {\n+            return false;\n+          }\n+          if (NodeUtil.isLoopStructure(parent)) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              return false;\n+            }\n+            break;\n+          }\n+          if (type == Token.IF) {\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null && NodeUtil.isExpressionNode(condition)) {\n+              if(condition.isBinary() \n+                 && condition.getType() == Token.AND\n+                 && isStrictBooleanExpression(condition.getFirstChild())\n+                 && isStrictBooleanExpression(condition.getSecondChild())) {\n+                //e.g. (x && y) && z\n+                return false;\n+              }\n+              return !hasReturnValue(condition);\n+            }\n+          }\n+          parent = parent.getParent();\n+        }\n+        return true;\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean hasReturnValue(Node n) {\n+  if(n.isFunction()) {\n+    return true;\n   }\n+  ImmutableList<Node> children = n.children();\n+  if(!children.isEmpty()) {\n+    for(Node child : children) {\n+      if(hasReturnValue(child)) {\n+        return true;\n+      }\n+    }\n+  } \n+  return n.isReturn();\n+}\n+\n+private boolean isStrictBooleanExpression(Node n) {\n+  if(NodeUtil.isBooleanResultExpression(n, true)\n+      || NodeUtil.isBooleanResultExpression(n, false)) {\n+    return true;\n+  }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}