{
    "patch": "        boolean foundNonDeclarationAssignments = false;\n        for (int i = 1; i < references.size(); i++) {\n          if (isInitializingAssignmentAt(i)) {\n            foundNonDeclarationAssignments = true;\n            break;\n          }\n        }\n        if (foundNonDeclarationAssignments) {\n          return null;\n        } else {\n          return references.get(0);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0023a794 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        boolean foundNonDeclarationAssignments = false;\n+        for (int i = 1; i < references.size(); i++) {\n+          if (isInitializingAssignmentAt(i)) {\n+            foundNonDeclarationAssignments = true;\n+            break;\n+          }\n+        }\n+        if (foundNonDeclarationAssignments) {\n+          return null;\n+        } else {\n+          return references.get(0);\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}