{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char c = input.charAt(pos);\n            if (Character.isHighSurrogate(c)) {\n                if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                    out.write(c);\n                    out.write(input.charAt(pos + 1));\n                } else {\n                    writeUnicodeEscape(c, out);\n                }\n            } else if (Character.isLowSurrogate(c)) {\n                writeUnicodeEscape(c, out);\n            } else {\n                out.write(c);\n            }\n            pos++;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n\nprivate static void writeUnicodeEscape(char c, Writer out) throws IOException {\n    out.write(\"\\\\u\");\n    out.write(HEX_DIGITS[(c >> 12) & 0xF]);\n    out.write(HEX_DIGITS[(c >> 8) & 0xF]);\n    out.write(HEX_DIGITS[(c >> 4) & 0xF]);\n    out.write(HEX_DIGITS[c & 0xF]);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..0d907895 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,47 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char c = input.charAt(pos);\n+            if (Character.isHighSurrogate(c)) {\n+                if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                    out.write(c);\n+                    out.write(input.charAt(pos + 1));\n+                } else {\n+                    writeUnicodeEscape(c, out);\n+                }\n+            } else if (Character.isLowSurrogate(c)) {\n+                writeUnicodeEscape(c, out);\n+            } else {\n                 out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n+            pos++;\n+            continue;\n+        }\n+        for (int pt = 0; pt < consumed; pt++) {\n+            pos += Character.charCount(Character.codePointAt(input, pos));\n         }\n     }\n+}\n+\n+private static void writeUnicodeEscape(char c, Writer out) throws IOException {\n+    out.write(\"\\\\u\");\n+    out.write(HEX_DIGITS[(c >> 12) & 0xF]);\n+    out.write(HEX_DIGITS[(c >> 8) & 0xF]);\n+    out.write(HEX_DIGITS[(c >> 4) & 0xF]);\n+    out.write(HEX_DIGITS[c & 0xF]);\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}