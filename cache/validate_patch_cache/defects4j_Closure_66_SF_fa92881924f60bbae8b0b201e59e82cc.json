{
    "patch": "public static double getTypedPercent(List<JsonElement> list) {\n    int typed = 0;\n    for (JsonElement jsonElement : list) {\n        if (jsonElement.isJsonPrimitive()) {\n            JsonPrimitive primitive = jsonElement.getAsJsonPrimitive();\n            if (primitive.isNumber()) {\n                typed++;\n            }\n        }\n    }\n    if (list.isEmpty()) {\n        return 0.0;\n    } else {\n        return (double) typed / (double) list.size() * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..12468616 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(List<JsonElement> list) {\n+    int typed = 0;\n+    for (JsonElement jsonElement : list) {\n+        if (jsonElement.isJsonPrimitive()) {\n+            JsonPrimitive primitive = jsonElement.getAsJsonPrimitive();\n+            if (primitive.isNumber()) {\n+                typed++;\n+            }\n+        }\n+    }\n+    if (list.isEmpty()) {\n+        return 0.0;\n+    } else {\n+        return (double) typed / (double) list.size() * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}