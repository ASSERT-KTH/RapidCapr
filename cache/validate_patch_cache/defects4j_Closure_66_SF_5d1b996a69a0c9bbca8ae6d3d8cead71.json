{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<List<Map<String, Object>>>() {}.getType();\n    List<Map<String, Object>> jsonList = gson.fromJson(json, type);\n\n    int total = jsonList.size();\n    int count = 0;\n\n    for (Map<String, Object> map : jsonList) {\n        if (map.containsKey(\"type\") && map.get(\"type\") instanceof String && ((String) map.get(\"type\")).length() > 0) {\n            count++;\n        }\n    }\n\n    return ((double) count) / ((double) total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5044fc45 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<List<Map<String, Object>>>() {}.getType();\n+    List<Map<String, Object>> jsonList = gson.fromJson(json, type);\n+\n+    int total = jsonList.size();\n+    int count = 0;\n+\n+    for (Map<String, Object> map : jsonList) {\n+        if (map.containsKey(\"type\") && map.get(\"type\") instanceof String && ((String) map.get(\"type\")).length() > 0) {\n+            count++;\n+        }\n+    }\n+\n+    return ((double) count) / ((double) total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}