{
    "patch": "        try {\n        \tfor (int i = 0; i < count; i++) {\n            \tmillis = savedFields[i].set(millis, resetFields);\n        \t}\n            \n            if (resetFields) {\n                // Verify that there are no duplicate fields\n                // This will also ensure all required fields are present\n                for (int i = 0; i < count; i++) {\n                    DateTimeField field = savedFields[i].iField;\n                    if (field != null) {\n                       for (int j=i+1; j<count; j++) {\n                           if (field == savedFields[j].iField) {\n                               throw new IllegalFieldValueException(\n                                  \"Duplicate field: \" + field.getName(), field.getName());\n                           }\n                       }\n                    } else {\n                        throw new IllegalStateException(\"Incomplete\");\n                    }\n                }\n\n                if (iDefaultYear == null) {\n                    iDefaultYear = Integer.valueOf(LocalDate.now().getYear());\n                }\n            }\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..51f9d8b5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+        \tfor (int i = 0; i < count; i++) {\n+            \tmillis = savedFields[i].set(millis, resetFields);\n+        \t}\n+            \n+            if (resetFields) {\n+                // Verify that there are no duplicate fields\n+                // This will also ensure all required fields are present\n+                for (int i = 0; i < count; i++) {\n+                    DateTimeField field = savedFields[i].iField;\n+                    if (field != null) {\n+                       for (int j=i+1; j<count; j++) {\n+                           if (field == savedFields[j].iField) {\n+                               throw new IllegalFieldValueException(\n+                                  \"Duplicate field: \" + field.getName(), field.getName());\n+                           }\n+                       }\n+                    } else {\n+                        throw new IllegalStateException(\"Incomplete\");\n+                    }\n+                }\n+\n+                if (iDefaultYear == null) {\n+                    iDefaultYear = Integer.valueOf(LocalDate.now().getYear());\n+                }\n+            }\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incomparable types: int and <null>",
    "test_result": "ERROR"
}