{
    "patch": "// restrict types by not null or undefined\nJSType thisRestricted = this.restrictByNotNullOrUndefined();\nJSType thatRestricted = that.restrictByNotNullOrUndefined();\n\nif (thisRestricted != null && thatRestricted != null && !thisRestricted.isEquivalentTo(thatRestricted)) {\n  return new TypePair(thisRestricted, thatRestricted);\n}\n\nTypePair p = that.getTypesUnderInequality(this);\nreturn new TypePair(p.typeB, p.typeA);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..44c82cde 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,16 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+// restrict types by not null or undefined\n+JSType thisRestricted = this.restrictByNotNullOrUndefined();\n+JSType thatRestricted = that.restrictByNotNullOrUndefined();\n+\n+if (thisRestricted != null && thatRestricted != null && !thisRestricted.isEquivalentTo(thatRestricted)) {\n+  return new TypePair(thisRestricted, thatRestricted);\n+}\n+\n+TypePair p = that.getTypesUnderInequality(this);\n+return new TypePair(p.typeB, p.typeA);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}