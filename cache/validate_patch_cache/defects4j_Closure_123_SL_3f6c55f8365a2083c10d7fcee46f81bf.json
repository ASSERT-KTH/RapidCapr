{
    "patch": "boolean isArray = false;\nObject rhs = null;\nif (rhsNode instanceof ArrayAccessExpr) {\n    ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode;\n    Expression arrayIndex = arrayAccessExpr.getIndex();\n    if (arrayIndex instanceof IntegerLiteralExpr) {\n        int index = ((IntegerLiteralExpr) arrayIndex).asNumber().intValue();\n        rhs = arrayAccessExpr.getName() + \"[\" + index + \"]\";\n        isArray = true;\n    }\n} else {\n    rhs = rhsNode.toString();\n}\nif (!isArray) {\n    rhs = rhsNode.toString();\n}\nString infixExpr = rhs + \" \" + operatorSymbol + \" \" + lhsName;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}