{
    "patch": "      Node parentParent = parent.getParent();\n      if (NodeUtil.isExprAssign(parentParent)) {\n        Node targetName = parentParent.getFirstChild();\n        if (NodeUtil.isGet(targetName)) {\n          String propName = targetName.getLastChild().getString();\n          if (\"prototype\".equals(propName)) {\n            return false;\n          }\n          if (NodeUtil.isGet(targetName.getFirstChild())) {\n            String baseName = targetName.getFirstChild().getLastChild().getString();\n            if (\"Object\".equals(baseName) || \"Function\".equals(baseName)) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fd412a4e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node parentParent = parent.getParent();\n+      if (NodeUtil.isExprAssign(parentParent)) {\n+        Node targetName = parentParent.getFirstChild();\n+        if (NodeUtil.isGet(targetName)) {\n+          String propName = targetName.getLastChild().getString();\n+          if (\"prototype\".equals(propName)) {\n+            return false;\n+          }\n+          if (NodeUtil.isGet(targetName.getFirstChild())) {\n+            String baseName = targetName.getFirstChild().getLastChild().getString();\n+            if (\"Object\".equals(baseName) || \"Function\".equals(baseName)) {\n+              return false;\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}