{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction(), function);\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers =\n      modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    Set<String> referencedArgNames = new HashSet<>();\n\n    Node body = function.getLastChild();\n    for (Node stmt = body.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n      if (!stmt.isExprResult()) {\n        continue;\n      }\n      Node call = stmt.getFirstChild();\n      if (call != null && call.isCall() && call.getFirstChild().matchesQualifiedName(\"arguments\")) {\n        collectReferencedArgumentsFromCall(call, referencedArgNames);\n      }\n    }\n\n    // Strip unreferenced args off the function declaration.\n    Node firstToRemove = null;\n    Node lastToRemove = null;\n    boolean remove = false;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      if (referencedArgNames.contains(arg.getString())) {\n        if (remove) {\n          lastToRemove = arg.getPrevious();\n        }\n      } else {\n        if (firstToRemove == null) {\n          firstToRemove = arg;\n          lastToRemove = arg;\n        } else {\n          lastToRemove = arg;\n        }\n        remove = true;\n      }\n    }\n\n    if (remove) {\n      // Remove the args from the tree.\n      argList.removeChildrenBetween(firstToRemove, lastToRemove);\n      compiler.reportCodeChange();\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}\n\nprivate void collectReferencedArgumentsFromCall(Node call, Set<String> referencedArgNames) {\n  Node arg = call.getNext();\n  for (Node param = call.getFirstChild(); param != null && param.isParamList(); param = param.getNext()) {\n    if (!arg.isName()) {\n      // Skip any expression other than a simple name up-front.\n      // We don't have the full analysis done yet to figure this out right.\n      arg = arg.getNext();\n      continue;\n    }\n\n    if (NodeUtil.isImmutableValue(arg)) {\n      // Immutable values do not need to be analyzed.\n      arg = arg.getNext();\n      continue;\n    }\n\n    Node nameNode = arg;\n    String name = nameNode.getString();\n    if (referencedArgNames.contains(name)) {\n      // If this argument is already seen as referenced, we don't need to search again.\n      arg = nameNode = null; // Try to prevent leaking memory.\n    } else if (!name.equals(getBestLValueName(nameNode))) {\n      // If the arg isn't the actual argument (potentially destructured), skip it.\n      arg = arg.getNext();\n    } else if (NodeUtil.isLiteralValue(nameNode.getNext())) {\n      // Literal values cannot reference 'arguments' in any way, so skip them.\n      arg = arg.getNext();\n    } else {\n      // Analyze assignments that occur within the function,\n      // skip any assignments to global variables.\n      Var var = currentScope.getVar(name);\n      if (var == null || !var.getScope().isLocal()) {\n        arg = arg.getNext();\n        continue;\n      }\n\n      findReferencesInScope(currentScope, nameNode, referencedArgNames);\n      arg = arg.getNext();\n    }\n  }\n}\n\nprivate static void findReferencesInScope(\n    Scope scope, Node nameNode, Set<String> referencedArgNames) {\n  String name = nameNode.getString();\n  for (Reference ref : scope.getReferences()) {\n    if (ref.getNode() == nameNode) {\n      referencedArgNames.add(name);\n    }\n  }\n\n  for (Scope childScope : scope.children) {\n    findReferencesInScope(childScope, nameNode, referencedArgNames);\n  }\n}\n\nprivate static String getBestLValueName(Node lvalue) {\n  if (lvalue.isName()) {\n    return lvalue.getString();\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fb727c95 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,45 +366,126 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction(), function);\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers =\n+      modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    Set<String> referencedArgNames = new HashSet<>();\n+\n+    Node body = function.getLastChild();\n+    for (Node stmt = body.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n+      if (!stmt.isExprResult()) {\n+        continue;\n+      }\n+      Node call = stmt.getFirstChild();\n+      if (call != null && call.isCall() && call.getFirstChild().matchesQualifiedName(\"arguments\")) {\n+        collectReferencedArgumentsFromCall(call, referencedArgNames);\n+      }\n+    }\n+\n+    // Strip unreferenced args off the function declaration.\n+    Node firstToRemove = null;\n+    Node lastToRemove = null;\n+    boolean remove = false;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      if (referencedArgNames.contains(arg.getString())) {\n+        if (remove) {\n+          lastToRemove = arg.getPrevious();\n+        }\n+      } else {\n+        if (firstToRemove == null) {\n+          firstToRemove = arg;\n+          lastToRemove = arg;\n         } else {\n-          break;\n+          lastToRemove = arg;\n         }\n+        remove = true;\n       }\n+    }\n+\n+    if (remove) {\n+      // Remove the args from the tree.\n+      argList.removeChildrenBetween(firstToRemove, lastToRemove);\n+      compiler.reportCodeChange();\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+}\n+\n+private void collectReferencedArgumentsFromCall(Node call, Set<String> referencedArgNames) {\n+  Node arg = call.getNext();\n+  for (Node param = call.getFirstChild(); param != null && param.isParamList(); param = param.getNext()) {\n+    if (!arg.isName()) {\n+      // Skip any expression other than a simple name up-front.\n+      // We don't have the full analysis done yet to figure this out right.\n+      arg = arg.getNext();\n+      continue;\n+    }\n+\n+    if (NodeUtil.isImmutableValue(arg)) {\n+      // Immutable values do not need to be analyzed.\n+      arg = arg.getNext();\n+      continue;\n+    }\n+\n+    Node nameNode = arg;\n+    String name = nameNode.getString();\n+    if (referencedArgNames.contains(name)) {\n+      // If this argument is already seen as referenced, we don't need to search again.\n+      arg = nameNode = null; // Try to prevent leaking memory.\n+    } else if (!name.equals(getBestLValueName(nameNode))) {\n+      // If the arg isn't the actual argument (potentially destructured), skip it.\n+      arg = arg.getNext();\n+    } else if (NodeUtil.isLiteralValue(nameNode.getNext())) {\n+      // Literal values cannot reference 'arguments' in any way, so skip them.\n+      arg = arg.getNext();\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      // Analyze assignments that occur within the function,\n+      // skip any assignments to global variables.\n+      Var var = currentScope.getVar(name);\n+      if (var == null || !var.getScope().isLocal()) {\n+        arg = arg.getNext();\n+        continue;\n+      }\n+\n+      findReferencesInScope(currentScope, nameNode, referencedArgNames);\n+      arg = arg.getNext();\n+    }\n+  }\n+}\n+\n+private static void findReferencesInScope(\n+    Scope scope, Node nameNode, Set<String> referencedArgNames) {\n+  String name = nameNode.getString();\n+  for (Reference ref : scope.getReferences()) {\n+    if (ref.getNode() == nameNode) {\n+      referencedArgNames.add(name);\n     }\n   }\n \n+  for (Scope childScope : scope.children) {\n+    findReferencesInScope(childScope, nameNode, referencedArgNames);\n+  }\n+}\n+\n+private static String getBestLValueName(Node lvalue) {\n+  if (lvalue.isName()) {\n+    return lvalue.getString();\n+  }\n+  return null;\n+}\n+\n \n   /**\n    * @return the LP node containing the function parameters.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}