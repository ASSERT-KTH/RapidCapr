{
    "patch": "      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n        // Don't traverse exported functions getting assigned to obj.prototype.method.\n        Node parentNode = parent.getParent();\n        if (NodeUtil.isGet(parentNode) &&\n            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n          if (NodeUtil.isGet(parentNode.getParent())) {\n            return false;\n          }\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getParent() != null && NodeUtil.isPrototypePropertyDeclaration(n.getParent())) {\n        return false;\n      }\n\n      if (parent.getType() == Token.OBJECTLIT &&\n          parent.getParent().getType() == Token.ASSIGN &&\n          parent.getParent().getParent().getType() == Token.EXPR_RESULT) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isObjectLitKey(parent, n)) {\n        return false;\n      }\n\n      if (n.getFirstChild() != null &&\n          NodeUtil.isGet(n.getFirstChild())) {\n        Node parentParent = parent.getParent();\n        if (parentParent != null &&\n            NodeUtil.isGet(parentParent) &&\n            parentParent.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node gramps = parent.getParent();\n      if (NodeUtil.isPrototypeProperty(gramps) ||\n          NodeUtil.isPrototypeProperty(parent.getParent().getParent())) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..686c6016 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,49 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent() != null && n.getParent().getFirstChild() == n) {\n+        // Don't traverse exported functions getting assigned to obj.prototype.method.\n+        Node parentNode = parent.getParent();\n+        if (NodeUtil.isGet(parentNode) &&\n+            parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n+          if (NodeUtil.isGet(parentNode.getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent() != null && NodeUtil.isPrototypePropertyDeclaration(n.getParent())) {\n+        return false;\n+      }\n+\n+      if (parent.getType() == Token.OBJECTLIT &&\n+          parent.getParent().getType() == Token.ASSIGN &&\n+          parent.getParent().getParent().getType() == Token.EXPR_RESULT) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent, n)) {\n+        return false;\n+      }\n+\n+      if (n.getFirstChild() != null &&\n+          NodeUtil.isGet(n.getFirstChild())) {\n+        Node parentParent = parent.getParent();\n+        if (parentParent != null &&\n+            NodeUtil.isGet(parentParent) &&\n+            parentParent.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node gramps = parent.getParent();\n+      if (NodeUtil.isPrototypeProperty(gramps) ||\n+          NodeUtil.isPrototypeProperty(parent.getParent().getParent())) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}