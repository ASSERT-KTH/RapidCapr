{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        try {\n            if (isAllZeros(val)) {\n                // cannot convert empty or +0 or +0L etc. to Long\n                throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n            }\n            if (val.indexOf('.') > -1 || val.indexOf('e') > -1 || val.indexOf('E') > -1) {\n                if (isAllZeros(substringBefore(val, \".\")) && isAllZeros(substringAfter(val, \".\"))) {\n                    // cannot convert 0.00 or 00.00 or 0e1 or 0x1p1 to BigDecimal\n                    throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n                }\n                return createBigDecimal(val);\n            }\n            return createLong(val);\n        } catch (NumberFormatException nfe) {\n            // empty catch\n        }\n        return createBigInteger(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..9a261436 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,36 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear\n+            // to be in specification of class. OS X Java parses it to\n+            // a wrong value.\n+            return null;\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+        try {\n+            if (isAllZeros(val)) {\n+                // cannot convert empty or +0 or +0L etc. to Long\n+                throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n+            }\n+            if (val.indexOf('.') > -1 || val.indexOf('e') > -1 || val.indexOf('E') > -1) {\n+                if (isAllZeros(substringBefore(val, \".\")) && isAllZeros(substringAfter(val, \".\"))) {\n+                    // cannot convert 0.00 or 00.00 or 0e1 or 0x1p1 to BigDecimal\n+                    throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n+                }\n+                return createBigDecimal(val);\n+            }\n+            return createLong(val);\n+        } catch (NumberFormatException nfe) {\n+            // empty catch\n+        }\n+        return createBigInteger(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}