{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.hasChildren()) {\n            continue;\n        }\n\n        Node parent = n.getParent();\n        if (parent == null || !parent.isVar() || parent.getFirstChild() != n) {\n            continue;\n        }\n\n        boolean isAlias = false;\n\n        if (n.getFirstChild().isQualifiedName()) {\n            // If the left-hand side is a qualified name, it is an alias\n            String name = n.getFirstChild().getQualifiedName();\n            String qualifiedName = n.getLastChild().getQualifiedName();\n            aliases.put(name, v);\n            transformation.addAlias(name, qualifiedName);\n            isAlias = true;\n        } else if (n.getFirstChild().isName()) {\n            Var aliasVar = scope.getVar(n.getFirstChild().getString());\n            if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n                // If the left-hand side is a variable name and the corresponding Var object's initial value is a qualified name, it is an alias\n                String name = n.getFirstChild().getString();\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                aliases.put(name, aliasVar);\n                transformation.addAlias(name, qualifiedName);\n                isAlias = true;\n            }\n        }\n\n        if (!isAlias) {\n            // If it is not an alias, it is added to the error report\n            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..42ebbef6 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,46 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null || !n.hasChildren()) {\n+            continue;\n+        }\n+\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent == null || !parent.isVar() || parent.getFirstChild() != n) {\n+            continue;\n+        }\n+\n+        boolean isAlias = false;\n+\n+        if (n.getFirstChild().isQualifiedName()) {\n+            // If the left-hand side is a qualified name, it is an alias\n+            String name = n.getFirstChild().getQualifiedName();\n+            String qualifiedName = n.getLastChild().getQualifiedName();\n+            aliases.put(name, v);\n+            transformation.addAlias(name, qualifiedName);\n+            isAlias = true;\n+        } else if (n.getFirstChild().isName()) {\n+            Var aliasVar = scope.getVar(n.getFirstChild().getString());\n+            if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n+                // If the left-hand side is a variable name and the corresponding Var object's initial value is a qualified name, it is an alias\n+                String name = n.getFirstChild().getString();\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                aliases.put(name, aliasVar);\n+                transformation.addAlias(name, qualifiedName);\n+                isAlias = true;\n+            }\n         }\n+\n+        if (!isAlias) {\n+            // If it is not an alias, it is added to the error report\n+            report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}