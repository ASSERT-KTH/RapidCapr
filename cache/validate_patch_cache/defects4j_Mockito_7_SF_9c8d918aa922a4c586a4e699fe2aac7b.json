{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null) {\n        for (Type type : bounds) {\n            if (type instanceof TypeVariable) {\n                TypeVariable<?> typeVar = (TypeVariable<?>) type;\n                Type[] innerBounds = typeVar.getBounds();\n                for (Type innerBound : innerBounds) {\n                    registerTypeVariablesOn(innerBound);\n                }\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n\n    Type superType = getActualTypeArgumentFor(typeVariable);\n    if (superType instanceof TypeVariable) {\n        readTypeVariableFor(superType);\n    } else if (superType != null) {\n        registerTypeVariablesOn(superType);\n    }\n}\n\nprivate void readTypeVariableFor(Type type) {\n    if (type == null || !(type instanceof TypeVariable)) {\n        return;\n    }\n\n    TypeVariable<?> typeVar = (TypeVariable<?>) type;\n    Type[] bounds = typeVar.getBounds();\n    if (bounds != null) {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                TypeVariable<?> innerType = (TypeVariable<?>) bound;\n                Type[] innerBounds = innerType.getBounds();\n                for (Type innerBound : innerBounds) {\n                    registerTypeVariablesOn(innerBound);\n                }\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n\n    Type superType = getActualTypeArgumentFor(typeVar);\n    if (superType instanceof TypeVariable) {\n        readTypeVariableFor(superType);\n    } else if (superType != null) {\n        registerTypeVariablesOn(superType);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..2cbfaf131 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,63 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null) {\n+        for (Type type : bounds) {\n+            if (type instanceof TypeVariable) {\n+                TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+                Type[] innerBounds = typeVar.getBounds();\n+                for (Type innerBound : innerBounds) {\n+                    registerTypeVariablesOn(innerBound);\n+                }\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+\n+    Type superType = getActualTypeArgumentFor(typeVariable);\n+    if (superType instanceof TypeVariable) {\n+        readTypeVariableFor(superType);\n+    } else if (superType != null) {\n+        registerTypeVariablesOn(superType);\n+    }\n+}\n+\n+private void readTypeVariableFor(Type type) {\n+    if (type == null || !(type instanceof TypeVariable)) {\n+        return;\n+    }\n+\n+    TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+    Type[] bounds = typeVar.getBounds();\n+    if (bounds != null) {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                TypeVariable<?> innerType = (TypeVariable<?>) bound;\n+                Type[] innerBounds = innerType.getBounds();\n+                for (Type innerBound : innerBounds) {\n+                    registerTypeVariablesOn(innerBound);\n+                }\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+\n+    Type superType = getActualTypeArgumentFor(typeVar);\n+    if (superType instanceof TypeVariable) {\n+        readTypeVariableFor(superType);\n+    } else if (superType != null) {\n+        registerTypeVariablesOn(superType);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}