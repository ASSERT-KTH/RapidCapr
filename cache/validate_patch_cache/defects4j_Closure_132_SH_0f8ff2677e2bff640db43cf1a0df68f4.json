{
    "patch": "              !mayEffectMutableState(lhs);\n            boolean lhsHasNoSideEffects = lhs.isName() ||\n                (lhs.isGetProp() &&\n                 !compiler.getCodingConvention().callsMethodThatMutatesGlobalState(\n                     lhs.getLastChild().getString()));\n            if (rhsIsNewObjWithUnusedArg(lhs) || lhsHasNoSideEffects) {\n>>> [ INFILL ] <<<\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..9a947a63 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,14 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              !mayEffectMutableState(lhs);\n+            boolean lhsHasNoSideEffects = lhs.isName() ||\n+                (lhs.isGetProp() &&\n+                 !compiler.getCodingConvention().callsMethodThatMutatesGlobalState(\n+                     lhs.getLastChild().getString()));\n+            if (rhsIsNewObjWithUnusedArg(lhs) || lhsHasNoSideEffects) {\n+>>> [ INFILL ] <<<\n+            }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}