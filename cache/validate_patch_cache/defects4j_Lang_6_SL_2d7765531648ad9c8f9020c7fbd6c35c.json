{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                int codePoint = Character.codePointAt(input, pos);\n                pos += Character.charCount(codePoint);\n                out.write(codePoint);\n                continue;\n            }\n            pos += consumed;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..f4067a14 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,26 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    public final void translate(CharSequence input, Writer out) throws IOException {\n+        if (out == null) {\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n+        }\n+        if (input == null) {\n+            return;\n+        }\n+        int pos = 0;\n+        int len = input.length();\n+        while (pos < len) {\n+            int consumed = translate(input, pos, out);\n+            if (consumed == 0) {\n+                int codePoint = Character.codePointAt(input, pos);\n+                pos += Character.charCount(codePoint);\n+                out.write(codePoint);\n+                continue;\n+            }\n+            pos += consumed;\n+        }\n+    }\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}