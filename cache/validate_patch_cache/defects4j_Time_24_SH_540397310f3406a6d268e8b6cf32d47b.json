{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                    int year = savedFields[i].iValue;\n                    if (year < 0) {\n                        if (year < -292275054) {\n                            throw new IllegalFieldValueException\n                                (DateTimeFieldType.year(), new Long(year), null, null);\n                        }\n                        year = -year;\n                    }\n                    if (iChrono != null) {\n                        year = iChrono.convertYearByWeekyear(year);\n                    }\n                    millis = setYear(millis, year);\n                    continue;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..962b8ca1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                    int year = savedFields[i].iValue;\n+                    if (year < 0) {\n+                        if (year < -292275054) {\n+                            throw new IllegalFieldValueException\n+                                (DateTimeFieldType.year(), new Long(year), null, null);\n+                        }\n+                        year = -year;\n+                    }\n+                    if (iChrono != null) {\n+                        year = iChrono.convertYearByWeekyear(year);\n+                    }\n+                    millis = setYear(millis, year);\n+                    continue;\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}