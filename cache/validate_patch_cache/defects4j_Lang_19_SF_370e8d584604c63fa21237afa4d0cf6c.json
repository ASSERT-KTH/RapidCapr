{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            start++;\n            while (start < seqEnd && isHexDigit(input.charAt(start))) {\n                start++;\n            }\n        } else {\n            while (start < seqEnd && isDigit(input.charAt(start))) {\n                start++;\n            }\n        }\n\n        if (start == seqEnd) {\n            // If the entity is not complete, write it to the output and return the current index\n            out.write(input.subSequence(index, seqEnd).toString());\n            return seqEnd - index;\n        }\n\n        if (input.charAt(start) != ';') {\n            // If the entity is incomplete, write it to the output and return the current index\n            out.write(input.subSequence(index, start).toString());\n            return start - index;\n        }\n\n        int entityValue;\n        try {\n            String entityString = input.subSequence(index + 2, start).toString();\n            if (input.charAt(index + 2) == 'x' || input.charAt(index + 2) == 'X') {\n                entityValue = Integer.parseInt(entityString, 16);\n            } else {\n                entityValue = Integer.parseInt(entityString);\n            }\n        } catch (NumberFormatException nfe) {\n            out.write(input.subSequence(index, start + 1).toString());\n            return start + 1 - index;\n        }\n\n        if (entityValue > 0xFFFF) {\n            // Write the high and low surrogate pairs separately\n            entityValue -= 0x10000;\n            char[] chrs = new char[2];\n            chrs[0] = (char) ((entityValue / 0x400) + 0xD800);\n            chrs[1] = (char) ((entityValue % 0x400) + 0xDC00);\n            out.write(chrs);\n        } else {\n            out.write(entityValue);\n        }\n\n        return start - index + 1;\n    }\n\n    return 0;\n}\n\nprivate boolean isHexDigit(char c) {\n    return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');\n}\n\nprivate boolean isDigit(char c) {\n    return c >= '0' && c <= '9';\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..7119006b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,70 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n \n-                // Check there's more than just an x after the &#\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            start++;\n+            while (start < seqEnd && isHexDigit(input.charAt(start))) {\n+                start++;\n             }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+        } else {\n+            while (start < seqEnd && isDigit(input.charAt(start))) {\n+                start++;\n             }\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        if (start == seqEnd) {\n+            // If the entity is not complete, write it to the output and return the current index\n+            out.write(input.subSequence(index, seqEnd).toString());\n+            return seqEnd - index;\n+        }\n+\n+        if (input.charAt(start) != ';') {\n+            // If the entity is incomplete, write it to the output and return the current index\n+            out.write(input.subSequence(index, start).toString());\n+            return start - index;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+        try {\n+            String entityString = input.subSequence(index + 2, start).toString();\n+            if (input.charAt(index + 2) == 'x' || input.charAt(index + 2) == 'X') {\n+                entityValue = Integer.parseInt(entityString, 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(entityString);\n             }\n+        } catch (NumberFormatException nfe) {\n+            out.write(input.subSequence(index, start + 1).toString());\n+            return start + 1 - index;\n+        }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (entityValue > 0xFFFF) {\n+            // Write the high and low surrogate pairs separately\n+            entityValue -= 0x10000;\n+            char[] chrs = new char[2];\n+            chrs[0] = (char) ((entityValue / 0x400) + 0xD800);\n+            chrs[1] = (char) ((entityValue % 0x400) + 0xDC00);\n+            out.write(chrs);\n+        } else {\n+            out.write(entityValue);\n         }\n-        return 0;\n+\n+        return start - index + 1;\n     }\n+\n+    return 0;\n+}\n+\n+private boolean isHexDigit(char c) {\n+    return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');\n+}\n+\n+private boolean isDigit(char c) {\n+    return c >= '0' && c <= '9';\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x80;&#x9F;]>",
    "test_result": "FAIL"
}