{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaDistribution {\n    private double alpha;\n    private final double beta;\n\n    public GammaDistribution(double alpha, double beta) {\n        if (alpha <= 0.0) {\n            throw new IllegalArgumentException(\"Invalid alpha: \" + alpha);\n        }\n\n        if (beta <= 0.0) {\n            throw new IllegalArgumentException(\"Invalid beta: \" + beta);\n        }\n\n        this.alpha = alpha;\n        this.beta = beta;\n    }\n\n    public double pdf(double x) {\n        if (x < 0.0) {\n            return 0.0;\n        }\n\n        // We use the regularized incomplete gamma function to compute the PDF.\n        double gamma = Gamma.regularizedGammaP(alpha, beta * x);\n        double pdf = (Math.pow(beta, alpha) * Math.pow(x, alpha - 1) * Math.exp(-beta * x)) / Gamma.gamma(alpha);\n        return Precision.round(pdf, Precision.EPSILON) == 0 ? 0 : pdf / gamma;\n    }\n\n    public double getCDF(double x) {\n        if (x < 0.0) {\n            return 0.0;\n        }\n\n        return Gamma.regularizedGammaP(alpha, beta * x);\n    }\n\n    public double getAlpha() {\n        return alpha;\n    }\n\n    public void setAlpha(double alpha) {\n        if (alpha <= 0.0) {\n            throw new IllegalArgumentException(\"Invalid alpha: \" + alpha);\n        }\n\n        this.alpha = alpha;\n    }\n\n    public double getBeta() {\n        return beta;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d2e8be307 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaDistribution {\n+    private double alpha;\n+    private final double beta;\n+\n+    public GammaDistribution(double alpha, double beta) {\n+        if (alpha <= 0.0) {\n+            throw new IllegalArgumentException(\"Invalid alpha: \" + alpha);\n+        }\n+\n+        if (beta <= 0.0) {\n+            throw new IllegalArgumentException(\"Invalid beta: \" + beta);\n+        }\n+\n+        this.alpha = alpha;\n+        this.beta = beta;\n+    }\n+\n+    public double pdf(double x) {\n+        if (x < 0.0) {\n+            return 0.0;\n+        }\n+\n+        // We use the regularized incomplete gamma function to compute the PDF.\n+        double gamma = Gamma.regularizedGammaP(alpha, beta * x);\n+        double pdf = (Math.pow(beta, alpha) * Math.pow(x, alpha - 1) * Math.exp(-beta * x)) / Gamma.gamma(alpha);\n+        return Precision.round(pdf, Precision.EPSILON) == 0 ? 0 : pdf / gamma;\n+    }\n+\n+    public double getCDF(double x) {\n+        if (x < 0.0) {\n+            return 0.0;\n+        }\n+\n+        return Gamma.regularizedGammaP(alpha, beta * x);\n+    }\n+\n+    public double getAlpha() {\n+        return alpha;\n+    }\n+\n+    public void setAlpha(double alpha) {\n+        if (alpha <= 0.0) {\n+            throw new IllegalArgumentException(\"Invalid alpha: \" + alpha);\n+        }\n+\n+        this.alpha = alpha;\n+    }\n+\n+    public double getBeta() {\n+        return beta;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}