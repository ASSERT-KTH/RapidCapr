{
    "patch": "                if (boundaries != null) {\n                    for (int i = 0; i < init.length; i++) {\n                        final double sum = FastMath.abs(boundaries[1][i]) + FastMath.abs(boundaries[0][i]);\n                        if (sum > Double.MAX_VALUE / 2) {\n                            throw new NumberIsTooLargeException(sum, Double.MAX_VALUE / 2, false);\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..f67bedc4b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,13 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                if (boundaries != null) {\n+                    for (int i = 0; i < init.length; i++) {\n+                        final double sum = FastMath.abs(boundaries[1][i]) + FastMath.abs(boundaries[0][i]);\n+                        if (sum > Double.MAX_VALUE / 2) {\n+                            throw new NumberIsTooLargeException(sum, Double.MAX_VALUE / 2, false);\n+                        }\n+                    }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}