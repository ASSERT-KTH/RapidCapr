{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node scopeRoot = t.getScopeRoot();\n    if (scopeRoot.hasOneChild() && scopeRoot.getFirstChild().isFunction() &&\n            !scopeRoot.getFirstChild().getFirstChild().isName()) {\n        Node function = scopeRoot.getFirstChild();\n        if (function.getSecondChild() == null) {\n            for (Node n : function.getLastChild().children()) {\n                if (n.isName() && (n.getParent().isVar() || n.getParent().isAssign())) {\n                    String name = n.getString();\n                    Var aliasVar = scope.getVar(name);\n                    if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                        aliases.put(name, aliasVar);\n                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                        transformation.addAlias(name, qualifiedName);\n                    } else {\n                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                    }\n                } else if (n.isFunction()) {\n                    // Since the alias processing only takes place on the root node,\n                    // we need to manually process nested functions.\n                    NodeTraversal nestedTraversal = t.getSubTraversal(n);\n                    findAliases(nestedTraversal);\n                } else if (n.isExprResult() && n.getFirstChild().isCall()) {\n                    Node call = n.getFirstChild();\n                    if (call.getFirstChild().matchesQualifiedName(\"goog.provide\")) {\n                        // Do nothing, allow the provide statement to already add the alias\n                        // to the transformation.\n                    } else if (call.getFirstChild().matchesQualifiedName(\"goog.require\")) {\n                        String name = call.getLastChild().getString();\n                        String qualifiedName = name;\n                        if (call.hasMoreThanOneChild()) {\n                            Node lastChild = call.getLastChild();\n                            String namespace = lastChild.getPrevious().getString();\n                            qualifiedName = namespace + \".\" + name;\n                        }\n                        transformation.addAlias(name, qualifiedName);\n                    } else {\n                        report(t, n, GOOG_SCOPE_ILLEGAL_ALIAS, call.getFirstChild().getQualifiedName());\n                    }\n                } else {\n                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                }\n            }\n        } else {\n            report(t, function, GOOG_SCOPE_MALFORMED_ANNOTATION);\n        }\n    } else {\n        report(t, scopeRoot, GOOG_SCOPE_MALFORMED_ANNOTATION);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..48217da9 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,57 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node scopeRoot = t.getScopeRoot();\n+    if (scopeRoot.hasOneChild() && scopeRoot.getFirstChild().isFunction() &&\n+            !scopeRoot.getFirstChild().getFirstChild().isName()) {\n+        Node function = scopeRoot.getFirstChild();\n+        if (function.getSecondChild() == null) {\n+            for (Node n : function.getLastChild().children()) {\n+                if (n.isName() && (n.getParent().isVar() || n.getParent().isAssign())) {\n+                    String name = n.getString();\n+                    Var aliasVar = scope.getVar(name);\n+                    if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                        aliases.put(name, aliasVar);\n+                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                        transformation.addAlias(name, qualifiedName);\n+                    } else {\n+                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                    }\n+                } else if (n.isFunction()) {\n+                    // Since the alias processing only takes place on the root node,\n+                    // we need to manually process nested functions.\n+                    NodeTraversal nestedTraversal = t.getSubTraversal(n);\n+                    findAliases(nestedTraversal);\n+                } else if (n.isExprResult() && n.getFirstChild().isCall()) {\n+                    Node call = n.getFirstChild();\n+                    if (call.getFirstChild().matchesQualifiedName(\"goog.provide\")) {\n+                        // Do nothing, allow the provide statement to already add the alias\n+                        // to the transformation.\n+                    } else if (call.getFirstChild().matchesQualifiedName(\"goog.require\")) {\n+                        String name = call.getLastChild().getString();\n+                        String qualifiedName = name;\n+                        if (call.hasMoreThanOneChild()) {\n+                            Node lastChild = call.getLastChild();\n+                            String namespace = lastChild.getPrevious().getString();\n+                            qualifiedName = namespace + \".\" + name;\n+                        }\n+                        transformation.addAlias(name, qualifiedName);\n+                    } else {\n+                        report(t, n, GOOG_SCOPE_ILLEGAL_ALIAS, call.getFirstChild().getQualifiedName());\n+                    }\n+                } else {\n+                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                }\n+            }\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            report(t, function, GOOG_SCOPE_MALFORMED_ANNOTATION);\n         }\n-        }\n-      }\n+    } else {\n+        report(t, scopeRoot, GOOG_SCOPE_MALFORMED_ANNOTATION);\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}