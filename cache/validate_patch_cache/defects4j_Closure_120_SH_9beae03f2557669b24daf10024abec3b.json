{
    "patch": "if (ref == null) {\n  return false;\n}\n\nBasicBlock block = ref.getBasicBlock();\nif (block == null) {\n  return false;\n}\n\nwhile (!block.isFunction) {\n  if (block.isLoop) {\n    return false;\n  }\n  block = block.getParent();\n  if (block == null) {\n    return false;\n  }\n}\n\nreturn (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0))\n    || (ref == getInitializingReferenceForConstants());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..02cda4c3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null) {\n+  return false;\n+}\n+\n+BasicBlock block = ref.getBasicBlock();\n+if (block == null) {\n+  return false;\n+}\n+\n+while (!block.isFunction) {\n+  if (block.isLoop) {\n+    return false;\n+  }\n+  block = block.getParent();\n+  if (block == null) {\n+    return false;\n+  }\n+}\n+\n+return (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0))\n+    || (ref == getInitializingReferenceForConstants());\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}