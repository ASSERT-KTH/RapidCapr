{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 1 millis before and after to work out if anything is happening\n    long instantBefore = instant - 1;\n    long instantAfter = instant + 1;\n    long offsetBefore = getOffset(instantBefore);\n    long offsetAfter = getOffset(instantAfter);\n\n    if (offsetBefore == offsetAfter) {\n        // not an overlap (less than is a gap, equal is normal case)\n        return instant;\n    }\n\n    boolean overlapAtStart = offsetAfter > offsetBefore;\n    if (earlierOrLater == overlapAtStart) {\n        // currently in later offset\n        instant = instantBefore;\n    } else {\n        // currently in earlier offset\n        instant = instantAfter;\n    }\n\n    // work out range of instants that have duplicate local times\n    long orgInstant = instant;\n    while (true) {\n        long nextInstant = earlierOrLater ? nextTransition(orgInstant) : previousTransition(orgInstant);\n        if (nextInstant == orgInstant) {\n            break;\n        }\n        orgInstant = nextInstant;\n        long offset = getOffset(orgInstant);\n        if (offset == offsetBefore || offset == offsetAfter) {\n            break;\n        }\n        instant = earlierOrLater ? Math.min(instant, orgInstant) : Math.max(instant, orgInstant);\n    }\n\n    // calculate result\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..c275320e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // evaluate 1 millis before and after to work out if anything is happening\n+    long instantBefore = instant - 1;\n+    long instantAfter = instant + 1;\n+    long offsetBefore = getOffset(instantBefore);\n+    long offsetAfter = getOffset(instantAfter);\n+\n+    if (offsetBefore == offsetAfter) {\n+        // not an overlap (less than is a gap, equal is normal case)\n+        return instant;\n+    }\n+\n+    boolean overlapAtStart = offsetAfter > offsetBefore;\n+    if (earlierOrLater == overlapAtStart) {\n+        // currently in later offset\n+        instant = instantBefore;\n+    } else {\n+        // currently in earlier offset\n+        instant = instantAfter;\n+    }\n+\n+    // work out range of instants that have duplicate local times\n+    long orgInstant = instant;\n+    while (true) {\n+        long nextInstant = earlierOrLater ? nextTransition(orgInstant) : previousTransition(orgInstant);\n+        if (nextInstant == orgInstant) {\n+            break;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+        orgInstant = nextInstant;\n+        long offset = getOffset(orgInstant);\n+        if (offset == offsetBefore || offset == offsetAfter) {\n+            break;\n+        }\n+        instant = earlierOrLater ? Math.min(instant, orgInstant) : Math.max(instant, orgInstant);\n     }\n+\n+    // calculate result\n+    return instant;\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}