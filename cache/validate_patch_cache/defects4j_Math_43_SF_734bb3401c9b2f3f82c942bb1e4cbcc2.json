{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (meanImpl instanceof Mean) {\n      if (n == 0) {\n          try {\n              ((Mean)meanImpl).incrementAll(new double[]{value});\n              ((Mean)meanImpl).evaluate();\n          } catch (Exception e) {\n              // Use a new Mean object if there is a NullArgumentException\n              meanImpl = new Mean();\n              meanImpl.increment(value);\n          }\n      } else {\n          meanImpl.increment(value);\n      }\n    } else if (meanImpl instanceof AbstractStorelessUnivariateStatistic) {\n        ((AbstractStorelessUnivariateStatistic)meanImpl).increment(value);\n    }\n    // Variance implementation\n    if (varianceImpl instanceof Variance) {\n      if (n == 0) {\n          try {\n              ((Variance)varianceImpl).incrementAll(new double[]{value});\n              ((Variance)varianceImpl).evaluate();\n          } catch (Exception e) {\n              // Use a new Variance object if there is a NullArgumentException\n              varianceImpl = new Variance();\n              varianceImpl.increment(value);\n          }\n      } else {\n          varianceImpl.increment(value);\n      }\n    } else if (varianceImpl instanceof AbstractStorelessUnivariateStatistic) {\n        ((AbstractStorelessUnivariateStatistic)varianceImpl).increment(value);\n    }\n    // Geometric mean implementation\n    if (geoMeanImpl instanceof GeometricMean) {\n        if (n == 0) {\n            try {\n                ((GeometricMean)geoMeanImpl).incrementAll(new double[]{value});\n                ((GeometricMean)geoMeanImpl).evaluate();\n            } catch (Exception e) {\n                // Use a new GeometricMean object if there is a NullArgumentException\n                geoMeanImpl = new GeometricMean();\n                geoMeanImpl.increment(Math.log(value));\n            }\n        } else {\n           geoMeanImpl.increment(Math.log(value));\n        }\n    } else if (geoMeanImpl instanceof AbstractStorelessUnivariateStatistic) {\n        ((AbstractStorelessUnivariateStatistic)geoMeanImpl).increment(Math.log(value));\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..c1af633ee 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,68 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (meanImpl instanceof Mean) {\n+      if (n == 0) {\n+          try {\n+              ((Mean)meanImpl).incrementAll(new double[]{value});\n+              ((Mean)meanImpl).evaluate();\n+          } catch (Exception e) {\n+              // Use a new Mean object if there is a NullArgumentException\n+              meanImpl = new Mean();\n+              meanImpl.increment(value);\n+          }\n+      } else {\n+          meanImpl.increment(value);\n+      }\n+    } else if (meanImpl instanceof AbstractStorelessUnivariateStatistic) {\n+        ((AbstractStorelessUnivariateStatistic)meanImpl).increment(value);\n+    }\n+    // Variance implementation\n+    if (varianceImpl instanceof Variance) {\n+      if (n == 0) {\n+          try {\n+              ((Variance)varianceImpl).incrementAll(new double[]{value});\n+              ((Variance)varianceImpl).evaluate();\n+          } catch (Exception e) {\n+              // Use a new Variance object if there is a NullArgumentException\n+              varianceImpl = new Variance();\n+              varianceImpl.increment(value);\n+          }\n+      } else {\n+          varianceImpl.increment(value);\n+      }\n+    } else if (varianceImpl instanceof AbstractStorelessUnivariateStatistic) {\n+        ((AbstractStorelessUnivariateStatistic)varianceImpl).increment(value);\n+    }\n+    // Geometric mean implementation\n+    if (geoMeanImpl instanceof GeometricMean) {\n+        if (n == 0) {\n+            try {\n+                ((GeometricMean)geoMeanImpl).incrementAll(new double[]{value});\n+                ((GeometricMean)geoMeanImpl).evaluate();\n+            } catch (Exception e) {\n+                // Use a new GeometricMean object if there is a NullArgumentException\n+                geoMeanImpl = new GeometricMean();\n+                geoMeanImpl.increment(Math.log(value));\n+            }\n+        } else {\n+           geoMeanImpl.increment(Math.log(value));\n         }\n-        n++;\n+    } else if (geoMeanImpl instanceof AbstractStorelessUnivariateStatistic) {\n+        ((AbstractStorelessUnivariateStatistic)geoMeanImpl).increment(Math.log(value));\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}