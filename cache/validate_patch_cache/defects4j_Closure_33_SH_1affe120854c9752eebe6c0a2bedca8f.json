{
    "patch": "// We only want to match constraints on anonymous types or nominal constructors without a reference name and without an interface or function type.\nif (!((constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName()) || (constraintObj.isAnonymousObjectType() && constraintObj.isObjectType() && !constraintObj.isFunctionType()))) {\n    return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..80cca34c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,10 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types or nominal constructors without a reference name and without an interface or function type.\n+if (!((constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName()) || (constraintObj.isAnonymousObjectType() && constraintObj.isObjectType() && !constraintObj.isFunctionType()))) {\n+    return;\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}