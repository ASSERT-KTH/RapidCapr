{
    "patch": "public static String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder(input.length());\n    boolean hadSlash = false;\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n        if (hadSlash) {\n            hadSlash = false;\n            switch (ch) {\n                case '\\\\':\n                    sb.append('\\\\');\n                    break;\n                case '\\'':\n                    sb.append('\\'');\n                    break;\n                case '\\\"':\n                    sb.append('\"');\n                    break;\n                case 'r':\n                    sb.append('\\r');\n                    break;\n                case 'f':\n                    sb.append('\\f');\n                    break;\n                case 't':\n                    sb.append('\\t');\n                    break;\n                case 'n':\n                    sb.append('\\n');\n                    break;\n                case 'b':\n                    sb.append('\\b');\n                    break;\n                case 'u':\n                    if (i + 4 < input.length()) {\n                        String unicode = input.substring(i + 1, i + 5);\n                        try {\n                            int value = Integer.parseInt(unicode, 16);\n                            sb.append((char) value);\n                            i += 4;\n                        } catch (NumberFormatException nfe) {\n                            sb.append(\"\\\\u\");\n                        }\n                    } else {\n                        sb.append(\"\\\\u\");\n                    }\n                    break;\n                default:\n                    sb.append('\\\\').append(ch);\n                    break;\n            }\n        } else if (ch == '\\\\') {\n            hadSlash = true;\n        } else {\n            sb.append(ch);\n        }\n    }\n    if (hadSlash) {\n        sb.append('\\\\');\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..508e4265 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,70 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String unescape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder(input.length());\n+    boolean hadSlash = false;\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+        if (hadSlash) {\n+            hadSlash = false;\n+            switch (ch) {\n+                case '\\\\':\n+                    sb.append('\\\\');\n+                    break;\n+                case '\\'':\n+                    sb.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    sb.append('\"');\n+                    break;\n+                case 'r':\n+                    sb.append('\\r');\n+                    break;\n+                case 'f':\n+                    sb.append('\\f');\n+                    break;\n+                case 't':\n+                    sb.append('\\t');\n+                    break;\n+                case 'n':\n+                    sb.append('\\n');\n+                    break;\n+                case 'b':\n+                    sb.append('\\b');\n+                    break;\n+                case 'u':\n+                    if (i + 4 < input.length()) {\n+                        String unicode = input.substring(i + 1, i + 5);\n+                        try {\n+                            int value = Integer.parseInt(unicode, 16);\n+                            sb.append((char) value);\n+                            i += 4;\n+                        } catch (NumberFormatException nfe) {\n+                            sb.append(\"\\\\u\");\n+                        }\n                     } else {\n-                        pos++;\n+                        sb.append(\"\\\\u\");\n                     }\n-                }\n-                pos--;\n+                    break;\n+                default:\n+                    sb.append('\\\\').append(ch);\n+                    break;\n             }\n-            pos++;\n+        } else if (ch == '\\\\') {\n+            hadSlash = true;\n+        } else {\n+            sb.append(ch);\n         }\n     }\n+    if (hadSlash) {\n+        sb.append('\\\\');\n+    }\n+    return sb.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}