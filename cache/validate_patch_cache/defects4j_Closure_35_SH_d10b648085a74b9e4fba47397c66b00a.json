{
    "patch": "    if (type.isObject() && constraintObj != null && constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (propType.isUnknownType()) {\n          continue;\n        }\n        if (type.hasProperty(prop)) {\n          JSType existingPropType = type.getPropertyType(prop);\n          if (existingPropType.isUnknownType()) {\n            existingPropType = getNativeType(VOID_TYPE);\n          }\n          JSType leastSupertype = existingPropType.getLeastSupertype(propType);\n          if (leastSupertype.isUnknownType()) {\n            continue;\n          }\n          JSType narrowed = existingPropType.getGreatestSubtype(leastSupertype);\n          if (narrowed.isBottom()) {\n            continue;\n          }\n          if (!narrowed.equals(existingPropType)) {\n            warnings.add(createTypeMismatchWarning(prop, narrowed, existingPropType));\n          }\n        } else {\n          if (!propType.isUnknownType()) {\n            warnings.add(createTypeMismatchWarning(prop, propType, null));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..3d346585 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,36 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+    if (type.isObject() && constraintObj != null && constraintObj.isRecordType()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (propType.isUnknownType()) {\n+          continue;\n+        }\n+        if (type.hasProperty(prop)) {\n+          JSType existingPropType = type.getPropertyType(prop);\n+          if (existingPropType.isUnknownType()) {\n+            existingPropType = getNativeType(VOID_TYPE);\n+          }\n+          JSType leastSupertype = existingPropType.getLeastSupertype(propType);\n+          if (leastSupertype.isUnknownType()) {\n+            continue;\n+          }\n+          JSType narrowed = existingPropType.getGreatestSubtype(leastSupertype);\n+          if (narrowed.isBottom()) {\n+            continue;\n+          }\n+          if (!narrowed.equals(existingPropType)) {\n+            warnings.add(createTypeMismatchWarning(prop, narrowed, existingPropType));\n+          }\n+        } else {\n+          if (!propType.isUnknownType()) {\n+            warnings.add(createTypeMismatchWarning(prop, propType, null));\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}