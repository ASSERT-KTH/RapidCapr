{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null && this.getParent().isCall()) {\n  Node parent = n.getParent();\n  // this is provide better error message for this()\n  if (NodeUtil.isSpecificCall(parent, \"this\", child.getNext())) {\n    report(t, parent, THIS_CALL_FUNCTION_WITHOUT_FIRST_PARAMETER);\n    ensureTyped(t, n);\n    return;\n  }\n  // only looking on the second child as the first child should be the getprop\n  String propName = child.getNext().getString();\n  JSType propType = objectTypeRestrictions.getRestrictedType(thisType.getPropertyType(propName));\n  // here we check for nullable or undefined type because if explicitly set it will also be wrapped with NotNull\n  if (propType.isUnknownType() || propType.isVoidType() || propType.isNullable() || propType.isUndefinedType()) {\n    report(t, child.getNext(), FUNCTION_WITHOUT_THIS_TYPE, childType.toString(),\n        propType.toString().replaceAll(\"[\\\\n\\\\r]+\", \" \"));\n    ensureTyped(t, n);\n    return;\n  }\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..34cd8178 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null && this.getParent().isCall()) {\n+  Node parent = n.getParent();\n+  // this is provide better error message for this()\n+  if (NodeUtil.isSpecificCall(parent, \"this\", child.getNext())) {\n+    report(t, parent, THIS_CALL_FUNCTION_WITHOUT_FIRST_PARAMETER);\n+    ensureTyped(t, n);\n+    return;\n+  }\n+  // only looking on the second child as the first child should be the getprop\n+  String propName = child.getNext().getString();\n+  JSType propType = objectTypeRestrictions.getRestrictedType(thisType.getPropertyType(propName));\n+  // here we check for nullable or undefined type because if explicitly set it will also be wrapped with NotNull\n+  if (propType.isUnknownType() || propType.isVoidType() || propType.isNullable() || propType.isUndefinedType()) {\n+    report(t, child.getNext(), FUNCTION_WITHOUT_THIS_TYPE, childType.toString(),\n+        propType.toString().replaceAll(\"[\\\\n\\\\r]+\", \" \"));\n+    ensureTyped(t, n);\n+    return;\n+  }\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}