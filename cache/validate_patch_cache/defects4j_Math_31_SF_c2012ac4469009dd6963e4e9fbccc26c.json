{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n            // continued fraction convergents divergence detected\n            double value1 = Double.POSITIVE_INFINITY;\n            double value2 = Double.NEGATIVE_INFINITY;\n\n            for (int i = 0; i < n; i++) {\n                double a_i = getA(i, x);\n                double b_i = getB(i, x);\n                double delta_i = a_i * hPrev + b_i * p0;\n\n                if (delta_i != 0.0) {\n                    delta_i = 1.0 / delta_i;\n                }\n\n                if (Double.isInfinite(delta_i)) {\n                    if (delta_i > 0) {\n                        value1 = Double.POSITIVE_INFINITY;\n                    } else {\n                        value2 = Double.NEGATIVE_INFINITY;\n                    }\n                } else {\n                    double inv = q1 * delta_i + cPrev;\n                    if (Double.isInfinite(inv)) {\n                        if (inv > 0) {\n                            value1 = Double.POSITIVE_INFINITY;\n                        } else {\n                            value2 = Double.NEGATIVE_INFINITY;\n                        }\n                    } else {\n                        inv = 1.0 / inv;\n                        if (inv > 0) {\n                            value1 = FastMath.min(value1, inv);\n                        } else if (inv < 0) {\n                            value2 = FastMath.max(value2, inv);\n                        }\n                    }\n                }\n            }\n\n            if (Double.isInfinite(value1) && Double.isInfinite(value2)) {\n                throw new ConvergenceException(\n                        LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n\n            if (Double.isInfinite(value1)) {\n                hN = value2;\n            } else {\n                if (Double.isInfinite(value2)) {\n                    hN = value1;\n                } else {\n                    hN = (FastMath.abs(value1 - hPrev) < FastMath.abs(value2 - hPrev)) ? value1 : value2;\n                }\n            }\n\n            if (Double.isNaN(hN) || Double.isInfinite(hN)) {\n                throw new ConvergenceException(\n                        LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        } else {\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(\n                        LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n        }\n\n        dPrev = q1;\n        cPrev = cN;\n        p0 = hPrev;\n        hPrev = hN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(\n                LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..4910c084c 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,119 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n+\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2) || Double.isNaN(cN) || Double.isNaN(q2)) {\n+            // continued fraction convergents divergence detected\n+            double value1 = Double.POSITIVE_INFINITY;\n+            double value2 = Double.NEGATIVE_INFINITY;\n+\n+            for (int i = 0; i < n; i++) {\n+                double a_i = getA(i, x);\n+                double b_i = getB(i, x);\n+                double delta_i = a_i * hPrev + b_i * p0;\n+\n+                if (delta_i != 0.0) {\n+                    delta_i = 1.0 / delta_i;\n                 }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+\n+                if (Double.isInfinite(delta_i)) {\n+                    if (delta_i > 0) {\n+                        value1 = Double.POSITIVE_INFINITY;\n+                    } else {\n+                        value2 = Double.NEGATIVE_INFINITY;\n                     }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n+                } else {\n+                    double inv = q1 * delta_i + cPrev;\n+                    if (Double.isInfinite(inv)) {\n+                        if (inv > 0) {\n+                            value1 = Double.POSITIVE_INFINITY;\n+                        } else {\n+                            value2 = Double.NEGATIVE_INFINITY;\n+                        }\n+                    } else {\n+                        inv = 1.0 / inv;\n+                        if (inv > 0) {\n+                            value1 = FastMath.min(value1, inv);\n+                        } else if (inv < 0) {\n+                            value2 = FastMath.max(value2, inv);\n+                        }\n                     }\n                 }\n             }\n \n+            if (Double.isInfinite(value1) && Double.isInfinite(value2)) {\n+                throw new ConvergenceException(\n+                        LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            }\n+\n+            if (Double.isInfinite(value1)) {\n+                hN = value2;\n+            } else {\n+                if (Double.isInfinite(value2)) {\n+                    hN = value1;\n+                } else {\n+                    hN = (FastMath.abs(value1 - hPrev) < FastMath.abs(value2 - hPrev)) ? value1 : value2;\n+                }\n+            }\n+\n+            if (Double.isNaN(hN) || Double.isInfinite(hN)) {\n+                throw new ConvergenceException(\n+                        LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            }\n+        } else {\n             final double deltaN = cN / q2 / cPrev;\n             hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+                throw new ConvergenceException(\n+                        LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n+\n             if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n             }\n \n             if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                 break;\n             }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n-        }\n+        dPrev = q1;\n+        cPrev = cN;\n+        p0 = hPrev;\n+        hPrev = hN;\n+        q1 = q2;\n+        n++;\n+    }\n \n-        return hN;\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(\n+                LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n     }\n \n+    return hN;\n+}\n+\n }",
    "result_reason": "org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction convergents diverged to +/- infinity for value 0.1",
    "test_result": "FAIL"
}