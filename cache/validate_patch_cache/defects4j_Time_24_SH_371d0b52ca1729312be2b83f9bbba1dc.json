{
    "patch": "            } catch (IllegalFieldValueException e) {\n                // Try to save information about the error\n                if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_YEAR) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    for (int i = 0; i < savedFields.length; i++) {\n                        if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                            savedFields[i].set(iDefaultYear);\n                        }\n                    }\n                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_MONTH) {\n                    saveField(DateTimeFieldType.monthOfYear(), 1);\n                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DAY_OF_MONTH) {\n                    saveField(DateTimeFieldType.dayOfMonth(), 1);\n                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DAY_OF_WEEK) {\n                    saveField(DateTimeFieldType.dayOfWeek(), 1);\n                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_HOUR_OF_DAY) {\n                    saveField(DateTimeFieldType.hourOfDay(), 0);\n                } else {\n                    throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c4078a6a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                // Try to save information about the error\n+                if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_YEAR) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    for (int i = 0; i < savedFields.length; i++) {\n+                        if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                            savedFields[i].set(iDefaultYear);\n+                        }\n+                    }\n+                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_MONTH) {\n+                    saveField(DateTimeFieldType.monthOfYear(), 1);\n+                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DAY_OF_MONTH) {\n+                    saveField(DateTimeFieldType.dayOfMonth(), 1);\n+                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DAY_OF_WEEK) {\n+                    saveField(DateTimeFieldType.dayOfWeek(), 1);\n+                } else if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_HOUR_OF_DAY) {\n+                    saveField(DateTimeFieldType.hourOfDay(), 0);\n+                } else {\n+                    throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}