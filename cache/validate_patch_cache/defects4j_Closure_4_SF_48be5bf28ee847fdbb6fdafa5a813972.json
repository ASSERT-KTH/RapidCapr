{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Try to resolve using the registry\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  if (resolvedViaRegistry) {\n    // If we detect an implicit prototype cycle, handle the cycle\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    // Resolve the type using the registry\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n\n  // Try to resolve using the property map\n  resolveViaProperties(t, enclosing);\n\n  // If we detect an implicit prototype cycle, handle the cycle\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  // If we resolved the type using the property map, finish property continuations\n  if (isResolved()) {\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n\n  // Otherwise, try to resolve again using the registry\n  if (resolvedViaRegistry) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n\n  // If all attempts to resolve the type failed, return the current instance\n  return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..021965e5 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,48 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Try to resolve using the registry\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  if (resolvedViaRegistry) {\n+    // If we detect an implicit prototype cycle, handle the cycle\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    // Resolve the type using the registry\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ?\n+        getReferencedType() : this;\n+  }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+  // Try to resolve using the property map\n+  resolveViaProperties(t, enclosing);\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  // If we detect an implicit prototype cycle, handle the cycle\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n+\n+  // If we resolved the type using the property map, finish property continuations\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ?\n+        getReferencedType() : this;\n+  }\n \n+  // Otherwise, try to resolve again using the registry\n+  if (resolvedViaRegistry) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n+    finishPropertyContinuations();\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }\n \n+  // If all attempts to resolve the type failed, return the current instance\n+  return this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>",
    "test_result": "FAIL"
}