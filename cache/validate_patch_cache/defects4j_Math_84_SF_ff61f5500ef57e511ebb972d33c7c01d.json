{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        final RealPointValuePair[] original = simplex; // save the original vertex\n        final RealPointValuePair best = original[0];\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = Arrays.copyOf(original, original.length); // shrink the simplex\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = evaluateNewSimplex(original, beta, comparator);\n            } else if (comparator.compare(contracted, simplex[simplex.length - 1]) >= 0) {\n                // try to expand the simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, contracted) < 0) {\n                    simplex = expanded.getPoint(); // accept the expanded simplex\n                } else {\n                    simplex = evaluateNewSimplex(original, beta, comparator).getPoint(); // contract the simplex\n                }\n            } else {\n                simplex = contracted.getPoint(); // accept the contracted simplex\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b6a63123c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -60,15 +60,13 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        final RealPointValuePair[] original = simplex; // save the original vertex\n+        final RealPointValuePair best = original[0];\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n@@ -79,6 +77,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = Arrays.copyOf(original, original.length); // shrink the simplex\n                 }\n \n                 return;\n@@ -89,9 +89,17 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = evaluateNewSimplex(original, beta, comparator);\n+            } else if (comparator.compare(contracted, simplex[simplex.length - 1]) >= 0) {\n+                // try to expand the simplex\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, contracted) < 0) {\n+                    simplex = expanded.getPoint(); // accept the expanded simplex\n+                } else {\n+                    simplex = evaluateNewSimplex(original, beta, comparator).getPoint(); // contract the simplex\n+                }\n+            } else {\n+                simplex = contracted.getPoint(); // accept the contracted simplex\n             }\n \n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}