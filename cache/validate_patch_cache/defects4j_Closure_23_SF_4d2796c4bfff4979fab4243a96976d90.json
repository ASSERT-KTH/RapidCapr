{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n  if (!right.isNumber()) {\n    return n;\n  }\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n  Node current = left.getFirstChild();\n  Node prev = null;\n  int currentIndex = 0;\n  while (current != null) {\n    if (currentIndex == intIndex) {\n      if (current.isEmpty()) {\n        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n        if (prev == null) {\n          parent.replaceChild(n, undefinedNode);\n        } else {\n          Node next = current.getNext();\n          prev.removeChild(current);\n          if (next != null) {\n            prev.addChildBefore(undefinedNode, next);\n          } else {\n            prev.addChildToBack(undefinedNode);\n          }\n        }\n        reportCodeChange();\n        return undefinedNode;\n      } else {\n        Node currentCopy = current.cloneNode();\n        if (prev == null) {\n          parent.replaceChild(n, currentCopy);\n        } else {\n          Node next = current.getNext();\n          prev.removeChild(current);\n          if (next != null) {\n            prev.addChildBefore(currentCopy, next);\n          } else {\n            prev.addChildToBack(currentCopy);\n          }\n        }\n        if (left.getFirstChild() == null) {\n          parent.removeChild(left);\n        }\n        reportCodeChange();\n        return currentCopy;\n      }\n    }\n    currentIndex++;\n    prev = current;\n    current = current.getNext();\n  }\n  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..a7ee765c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,71 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+  if (isAssignmentTarget(n)) {\n+    return n;\n+  }\n+  if (!right.isNumber()) {\n+    return n;\n+  }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n+  if (intIndex < 0) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+  Node current = left.getFirstChild();\n+  Node prev = null;\n+  int currentIndex = 0;\n+  while (current != null) {\n+    if (currentIndex == intIndex) {\n+      if (current.isEmpty()) {\n+        Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+        if (prev == null) {\n+          parent.replaceChild(n, undefinedNode);\n+        } else {\n+          Node next = current.getNext();\n+          prev.removeChild(current);\n+          if (next != null) {\n+            prev.addChildBefore(undefinedNode, next);\n+          } else {\n+            prev.addChildToBack(undefinedNode);\n+          }\n+        }\n+        reportCodeChange();\n+        return undefinedNode;\n+      } else {\n+        Node currentCopy = current.cloneNode();\n+        if (prev == null) {\n+          parent.replaceChild(n, currentCopy);\n+        } else {\n+          Node next = current.getNext();\n+          prev.removeChild(current);\n+          if (next != null) {\n+            prev.addChildBefore(currentCopy, next);\n+          } else {\n+            prev.addChildToBack(currentCopy);\n+          }\n+        }\n+        if (left.getFirstChild() == null) {\n+          parent.removeChild(left);\n+        }\n+        reportCodeChange();\n+        return currentCopy;\n+      }\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+    currentIndex++;\n+    prev = current;\n+    current = current.getNext();\n   }\n+  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  return n;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}