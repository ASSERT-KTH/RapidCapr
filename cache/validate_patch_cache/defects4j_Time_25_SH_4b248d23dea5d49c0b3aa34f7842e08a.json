{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (instantLocal <= Long.MIN_VALUE + DateTimeConstants.MILLIS_PER_DAY ||\n            instantLocal >= Long.MAX_VALUE - DateTimeConstants.MILLIS_PER_DAY) {\n        return offsetAdjusted;\n    }\n    if (offsetLocal >= 0 && offsetAdjusted < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    } else if ((offsetLocal - offsetAdjusted) < 0) {\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        long prevLocal = previousTransition(instantAdjusted);\n        if (prevLocal < prevAdjusted) {\n            return offsetLocal;\n        } else if (getOffset(prevLocal) == offsetLocal) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    } else {\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long nextLocal = nextTransition(instantAdjusted);\n        if (nextLocal > nextAdjusted) {\n            return offsetLocal;\n        } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n            return offsetAdjusted;\n        } else {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..68177bfb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (instantLocal <= Long.MIN_VALUE + DateTimeConstants.MILLIS_PER_DAY ||\n+            instantLocal >= Long.MAX_VALUE - DateTimeConstants.MILLIS_PER_DAY) {\n+        return offsetAdjusted;\n+    }\n+    if (offsetLocal >= 0 && offsetAdjusted < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else if ((offsetLocal - offsetAdjusted) < 0) {\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        long prevLocal = previousTransition(instantAdjusted);\n+        if (prevLocal < prevAdjusted) {\n+            return offsetLocal;\n+        } else if (getOffset(prevLocal) == offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long nextLocal = nextTransition(instantAdjusted);\n+        if (nextLocal > nextAdjusted) {\n+            return offsetLocal;\n+        } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}