{
    "patch": "import junit.framework.Assert;\n\npublic class MyClassTest {\n    public void testGetprop4() {\n        // call the method that generates warnings\n        MyClass myClass = new MyClass();\n        String[] warnings = myClass.getMethodWarnings(\"prop4\");\n\n        // make sure that there is at least one warning\n        Assert.assertTrue(\"expected a warning\", warnings != null && warnings.length > 0);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..8138f474 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import junit.framework.Assert;\n+\n+public class MyClassTest {\n+    public void testGetprop4() {\n+        // call the method that generates warnings\n+        MyClass myClass = new MyClass();\n+        String[] warnings = myClass.getMethodWarnings(\"prop4\");\n+\n+        // make sure that there is at least one warning\n+        Assert.assertTrue(\"expected a warning\", warnings != null && warnings.length > 0);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}