{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (isImmutable(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        if (elem.getType() == Token.STRING) {\n          foldedSize += elem.getString().length();\n        } else {\n          foldedSize += InlineCostEstimator.getCost(elem);\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    // one for each comma\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = IR.string(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        if (n.isName()) {\n          n.setString(foldedStringNode.getString());\n        }\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // no folding could actually be performed\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n\n        // Note: The string representation of an array in JS can have leading/trailing commas. Thus\n        // foo([1, 2,]) === foo([1, 2])\n        // Therefore, if we have leading/trailing empty values in the array after folding, we need to\n        // add one trailing/leading ',' to ensure that the code is still valid.\n        boolean hasLeadingEmpties = arrayFoldedChildren.get(0).getType() == Token.EMPTY;\n        boolean hasTrailingEmpties =\n            arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.EMPTY;\n        StringBuilder joinExprBuilder =\n            new StringBuilder(\"[\").append(\n                hasLeadingEmpties ? \",\" : \"\");\n        // We need to \"print\" each of the array children, applying different rules for string\n        // literals and objects.\n        boolean first = true;\n        for (Node arrayFoldedChild : arrayFoldedChildren) {\n          if (!first) {\n            joinExprBuilder.append(\",\");\n          }\n          first = false;\n          if (arrayFoldedChild.getType() == Token.EMPTY) {\n            continue;\n          }\n          if (arrayFoldedChild.getType() == Token.STRING) {\n            // Escape the contents of the string and enclose in quotes\n            String stringVal = arrayFoldedChild.getString();\n            joinExprBuilder.append('\"');\n            for (int i = 0; i < stringVal.length(); i++) {\n              char ch = stringVal.charAt(i);\n              if (ch == '\\\\') {\n                joinExprBuilder.append(\"\\\\\\\\\");\n              } else if (ch == '\\\"') {\n                joinExprBuilder.append(\"\\\\\\\"\");\n              } else if (ch == '\\n') {\n                joinExprBuilder.append(\"\\\\n\");\n              } else if (ch == '\\r') {\n                joinExprBuilder.append(\"\\\\r\");\n              } else if (ch == '\\t') {\n                joinExprBuilder.append(\"\\\\t\");\n              } else if (ch == '\\f') {\n                joinExprBuilder.append(\"\\\\f\");\n              } else if (ch == '\\b') {\n                joinExprBuilder.append(\"\\\\b\");\n              } else {\n                joinExprBuilder.append(ch);\n              }\n            }\n            joinExprBuilder.append('\"');\n          } else {\n            joinExprBuilder.append(\n                getChunkTypeAnnotatableStringForExpr(arrayFoldedChild, compiler));\n          }\n        }\n        joinExprBuilder.append(\n            hasTrailingEmpties ? \",]\" : \"]\");\n        Node joinExprTree =\n            compiler.parseSyntheticCode(joinExprBuilder.toString(), n.getLineNumber());\n        int foldingCost = InlineCostEstimator.getCost(joinExprTree);\n        if (foldingCost > originalSize) {\n          return n;\n        }\n\n        // Set the source information for the new node.\n        joinExprTree.copyInformationFrom(n);\n        n.getParent().replaceChild(n, joinExprTree);\n\n        reportCodeChange();\n        return joinExprTree;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..a37b3710 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,7 +364,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n@@ -386,8 +386,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n+    // \",\" is the default, it doesn't need to be explicit\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n@@ -396,7 +395,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+      if (isImmutable(elem) || elem.getType() == Token.EMPTY) {\n         if (sb == null) {\n           sb = new StringBuilder();\n         } else {\n@@ -412,7 +411,11 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n               Node.newString(sb.toString()).copyInformationFrom(prev));\n           sb = null;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n+        if (elem.getType() == Token.STRING) {\n+          foldedSize += elem.getString().length();\n+        } else {\n+          foldedSize += InlineCostEstimator.getCost(elem);\n+        }\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n@@ -426,13 +429,14 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       arrayFoldedChildren.add(\n           Node.newString(sb.toString()).copyInformationFrom(prev));\n     }\n-    // one for each comma.\n+\n+    // one for each comma\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node emptyStringNode = IR.string(\"\");\n         n.getParent().replaceChild(n, emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n@@ -441,39 +445,84 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         if (foldedSize > originalSize) {\n           return n;\n         }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n         n.getParent().replaceChild(n, foldedStringNode);\n+        if (n.isName()) {\n+          n.setString(foldedStringNode.getString());\n+        }\n         reportCodeChange();\n         return foldedStringNode;\n       default:\n-        // No folding could actually be performed.\n+        // no folding could actually be performed\n         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n           return n;\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n+\n+        // Note: The string representation of an array in JS can have leading/trailing commas. Thus\n+        // foo([1, 2,]) === foo([1, 2])\n+        // Therefore, if we have leading/trailing empty values in the array after folding, we need to\n+        // add one trailing/leading ',' to ensure that the code is still valid.\n+        boolean hasLeadingEmpties = arrayFoldedChildren.get(0).getType() == Token.EMPTY;\n+        boolean hasTrailingEmpties =\n+            arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.EMPTY;\n+        StringBuilder joinExprBuilder =\n+            new StringBuilder(\"[\").append(\n+                hasLeadingEmpties ? \",\" : \"\");\n+        // We need to \"print\" each of the array children, applying different rules for string\n+        // literals and objects.\n+        boolean first = true;\n+        for (Node arrayFoldedChild : arrayFoldedChildren) {\n+          if (!first) {\n+            joinExprBuilder.append(\",\");\n+          }\n+          first = false;\n+          if (arrayFoldedChild.getType() == Token.EMPTY) {\n+            continue;\n+          }\n+          if (arrayFoldedChild.getType() == Token.STRING) {\n+            // Escape the contents of the string and enclose in quotes\n+            String stringVal = arrayFoldedChild.getString();\n+            joinExprBuilder.append('\"');\n+            for (int i = 0; i < stringVal.length(); i++) {\n+              char ch = stringVal.charAt(i);\n+              if (ch == '\\\\') {\n+                joinExprBuilder.append(\"\\\\\\\\\");\n+              } else if (ch == '\\\"') {\n+                joinExprBuilder.append(\"\\\\\\\"\");\n+              } else if (ch == '\\n') {\n+                joinExprBuilder.append(\"\\\\n\");\n+              } else if (ch == '\\r') {\n+                joinExprBuilder.append(\"\\\\r\");\n+              } else if (ch == '\\t') {\n+                joinExprBuilder.append(\"\\\\t\");\n+              } else if (ch == '\\f') {\n+                joinExprBuilder.append(\"\\\\f\");\n+              } else if (ch == '\\b') {\n+                joinExprBuilder.append(\"\\\\b\");\n+              } else {\n+                joinExprBuilder.append(ch);\n+              }\n+            }\n+            joinExprBuilder.append('\"');\n+          } else {\n+            joinExprBuilder.append(\n+                getChunkTypeAnnotatableStringForExpr(arrayFoldedChild, compiler));\n+          }\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+        joinExprBuilder.append(\n+            hasTrailingEmpties ? \",]\" : \"]\");\n+        Node joinExprTree =\n+            compiler.parseSyntheticCode(joinExprBuilder.toString(), n.getLineNumber());\n+        int foldingCost = InlineCostEstimator.getCost(joinExprTree);\n+        if (foldingCost > originalSize) {\n+          return n;\n         }\n-        reportCodeChange();\n-        break;\n-    }\n \n-    return n;\n-  }\n+        // Set the source information for the new node.\n+        joinExprTree.copyInformationFrom(n);\n+        n.getParent().replaceChild(n, joinExprTree);\n+\n+        reportCodeChange();\n+        return joinExprTree;\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +691,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}