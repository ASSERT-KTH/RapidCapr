{
    "patch": "public class MyClass {\n    public static void main(String[] args) {\n        Iterable<String> iterable = getEmptyIterable();\n        assertFalse(iterable.iterator().hasNext());\n    }\n    \n    public static Iterable<String> getEmptyIterable() {\n        return new ArrayList<>();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..7765b12ff 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,16 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    public static void main(String[] args) {\n+        Iterable<String> iterable = getEmptyIterable();\n+        assertFalse(iterable.iterator().hasNext());\n+    }\n+    \n+    public static Iterable<String> getEmptyIterable() {\n+        return new ArrayList<>();\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}