{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n.isName() && n.getBooleanProp(Node.IS_NAMESPACE)) {\n      findNamespaceAlias(scope, n);\n    } else if (n.isName() && !n.getBooleanProp(Node.IS_NAMESPACE)\n          && !isAliasAlreadyFound(n.getString())) {\n      findVarAlias(scope, n);\n    }\n  }\n}\n\nprivate void findNamespaceAlias(Scope scope, Node namespaceNode) {\n  String namespace = namespaceNode.getString();\n  Node parent = namespaceNode.getParent();\n  if (parent.isExprResult()) {\n    Node child = parent.getFirstChild();\n    if (child.isAssign() && child.getFirstChild().isQualifiedName()\n        && child.getFirstChild().matchesQualifiedName(namespace)) {\n      Node aliasNode = child.getLastChild();\n      if (aliasNode != null && aliasNode.isQualifiedName()) {\n        String name = namespace.substring(0, namespace.length() - 1);\n        if (scope.getVar(name) == null) {\n          // The original namespace variable has been removed because it was only used for\n          // aliasing purposes.\n          Var aliasVar = scope.getVar(aliasNode.getQualifiedName());\n          aliases.put(name, aliasVar);\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        }\n      }\n    }\n  }\n}\n\nprivate void findVarAlias(Scope scope, Node nameNode) {\n  String name = nameNode.getString();\n  if (nameNode.hasChildren() && nameNode.getFirstChild().isQualifiedName()) {\n    Var aliasVar = scope.getVar(name);\n    // Consider only declared variables and not parameters, functions etc.\n    if (aliasVar != null && aliasVar.getInitialValue() != null\n        && aliasVar.getParentNode().isVar()) {\n      aliases.put(name, aliasVar);\n\n      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n      transformation.addAlias(name, qualifiedName);\n    } else {\n      report(nameNode, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n    }\n  }\n}\n\nprivate boolean isAliasAlreadyFound(String name) {\n  return aliases.containsKey(name) || transformation.hasAlias(name);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..55390121 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,62 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n.isName() && n.getBooleanProp(Node.IS_NAMESPACE)) {\n+      findNamespaceAlias(scope, n);\n+    } else if (n.isName() && !n.getBooleanProp(Node.IS_NAMESPACE)\n+          && !isAliasAlreadyFound(n.getString())) {\n+      findVarAlias(scope, n);\n+    }\n+  }\n+}\n \n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+private void findNamespaceAlias(Scope scope, Node namespaceNode) {\n+  String namespace = namespaceNode.getString();\n+  Node parent = namespaceNode.getParent();\n+  if (parent.isExprResult()) {\n+    Node child = parent.getFirstChild();\n+    if (child.isAssign() && child.getFirstChild().isQualifiedName()\n+        && child.getFirstChild().matchesQualifiedName(namespace)) {\n+      Node aliasNode = child.getLastChild();\n+      if (aliasNode != null && aliasNode.isQualifiedName()) {\n+        String name = namespace.substring(0, namespace.length() - 1);\n+        if (scope.getVar(name) == null) {\n+          // The original namespace variable has been removed because it was only used for\n+          // aliasing purposes.\n+          Var aliasVar = scope.getVar(aliasNode.getQualifiedName());\n+          aliases.put(name, aliasVar);\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n         }\n       }\n     }\n+  }\n+}\n+\n+private void findVarAlias(Scope scope, Node nameNode) {\n+  String name = nameNode.getString();\n+  if (nameNode.hasChildren() && nameNode.getFirstChild().isQualifiedName()) {\n+    Var aliasVar = scope.getVar(name);\n+    // Consider only declared variables and not parameters, functions etc.\n+    if (aliasVar != null && aliasVar.getInitialValue() != null\n+        && aliasVar.getParentNode().isVar()) {\n+      aliases.put(name, aliasVar);\n+\n+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+      transformation.addAlias(name, qualifiedName);\n+    } else {\n+      report(nameNode, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+    }\n+  }\n+}\n+\n+private boolean isAliasAlreadyFound(String name) {\n+  return aliases.containsKey(name) || transformation.hasAlias(name);\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}