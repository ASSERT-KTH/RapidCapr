{
    "patch": "// Only set constraints on anonymous nominal types without a reference name, interface, or function type.\nif (constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName() && !constraintObj.isInterface() && !constraintObj.isFunctionType()) {\n    return;\n}\nif (!constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n    return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..43170c5b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,13 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// Only set constraints on anonymous nominal types without a reference name, interface, or function type.\n+if (constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName() && !constraintObj.isInterface() && !constraintObj.isFunctionType()) {\n+    return;\n+}\n+if (!constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n+    return;\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}