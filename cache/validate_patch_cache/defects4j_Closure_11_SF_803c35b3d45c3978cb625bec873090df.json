{
    "patch": "public static String getprop(String propName) { \n    Properties props = new Properties(System.getProperties()); \n    ByteArrayOutputStream baos = new ByteArrayOutputStream(); \n    try { \n        props.store(baos, \"\"); \n    } catch (IOException e) { \n        throw new RuntimeException(e); \n    } \n    String[] propStrings = baos.toString().split(\"\\n\"); \n    String result = null; \n    for (String propString : propStrings) { \n        if (propString.startsWith(propName + \"=\")) { \n            result = propString.substring(propName.length() + 1); \n            break; \n        } \n    } \n    return result; \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..5c6d4ee0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String propName) { \n+    Properties props = new Properties(System.getProperties()); \n+    ByteArrayOutputStream baos = new ByteArrayOutputStream(); \n+    try { \n+        props.store(baos, \"\"); \n+    } catch (IOException e) { \n+        throw new RuntimeException(e); \n+    } \n+    String[] propStrings = baos.toString().split(\"\\n\"); \n+    String result = null; \n+    for (String propString : propStrings) { \n+        if (propString.startsWith(propName + \"=\")) { \n+            result = propString.substring(propName.length() + 1); \n+            break; \n+        } \n+    } \n+    return result; \n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}