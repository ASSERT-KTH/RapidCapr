{
    "patch": "// Remove unreferenced function arguments.\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = function.getFirstChild().getNext();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Node previousArg = lastArg.getPrevious();\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else if (optimizerOptions.removeUnusedPrototypeProperties()\n            && NodeUtil.isPrototypeProperty(fnScope.getRootNode(),\n                var.getName(), function)) {\n          // This parameter is not referenced from within the function, but\n          // its value may be used elsewhere to reference a property of the\n          // prototype, eg. if `function(xyz) {this.x = xyz;}` is used as a superclass in\n          // `function Subclass() {}; Subclass.prototype = new Superclass();`,\n          // then we can't remove `xyz` from Subclass's constructor even though\n          // `x` is never set on it inside the constructor.\n          NodeUtil.addOrRemoveChild(\n              function, IR.exprResult(IR.delete(IR.getprop(IR.name(\"MyClass\"),\n                  IR.string(var.getName())))), true, compiler);\n          compiler.reportCodeChange();\n          break;\n        } else {\n          break;\n        }\n        lastArg = previousArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a8e1ba2f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,6 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n+// Remove unreferenced function arguments.\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n@@ -376,7 +377,6 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n@@ -385,20 +385,37 @@ class RemoveUnusedVars\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n+    Node argList = function.getFirstChild().getNext();\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Node previousArg = lastArg.getPrevious();\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n         if (!referenced.contains(var)) {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n+        } else if (optimizerOptions.removeUnusedPrototypeProperties()\n+            && NodeUtil.isPrototypeProperty(fnScope.getRootNode(),\n+                var.getName(), function)) {\n+          // This parameter is not referenced from within the function, but\n+          // its value may be used elsewhere to reference a property of the\n+          // prototype, eg. if `function(xyz) {this.x = xyz;}` is used as a superclass in\n+          // `function Subclass() {}; Subclass.prototype = new Superclass();`,\n+          // then we can't remove `xyz` from Subclass's constructor even though\n+          // `x` is never set on it inside the constructor.\n+          NodeUtil.addOrRemoveChild(\n+              function, IR.exprResult(IR.delete(IR.getprop(IR.name(\"MyClass\"),\n+                  IR.string(var.getName())))), true, compiler);\n+          compiler.reportCodeChange();\n+          break;\n         } else {\n           break;\n         }\n+        lastArg = previousArg;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}