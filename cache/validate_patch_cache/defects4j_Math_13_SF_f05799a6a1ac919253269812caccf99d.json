{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix v = dec.getV();\n    RealMatrix d = dec.getD();\n    int n = v.getColumnDimension();\n    RealMatrix sqrtD = new Array2DRowRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        double dEntry = d.getEntry(i, i);\n        if (dEntry > 0.0) {\n            sqrtD.setEntry(i, i, FastMath.sqrt(dEntry));\n        } else {\n            sqrtD.setEntry(i, i, 0.0);\n        }\n    }\n    RealMatrix sqrtM = v.multiply(sqrtD);\n    RealMatrix xi = new Array2DRowRealMatrix(n, n);\n    RealMatrix xi_old = new Array2DRowRealMatrix(n, n);\n    RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n    int maxIterations = n * 100;\n    for (int i = 0; i < maxIterations; i++) {\n        if (i == 0) {\n            xi = sqrtM.add(eye).scalarMultiply(0.5);\n        } else {\n            xi_old = xi;\n            xi = xi_old.add(sqrtM.multiply(MatrixUtils.inverse(xi_old))).scalarMultiply(0.5);\n        }\n        if (MatrixUtils.epsilonEquals(xi, xi_old, 1.0e-10)) {\n            break;\n        }\n    }\n    return xi;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9e8fc4297 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix v = dec.getV();\n+    RealMatrix d = dec.getD();\n+    int n = v.getColumnDimension();\n+    RealMatrix sqrtD = new Array2DRowRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        double dEntry = d.getEntry(i, i);\n+        if (dEntry > 0.0) {\n+            sqrtD.setEntry(i, i, FastMath.sqrt(dEntry));\n+        } else {\n+            sqrtD.setEntry(i, i, 0.0);\n+        }\n     }\n+    RealMatrix sqrtM = v.multiply(sqrtD);\n+    RealMatrix xi = new Array2DRowRealMatrix(n, n);\n+    RealMatrix xi_old = new Array2DRowRealMatrix(n, n);\n+    RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n+    int maxIterations = n * 100;\n+    for (int i = 0; i < maxIterations; i++) {\n+        if (i == 0) {\n+            xi = sqrtM.add(eye).scalarMultiply(0.5);\n+        } else {\n+            xi_old = xi;\n+            xi = xi_old.add(sqrtM.multiply(MatrixUtils.inverse(xi_old))).scalarMultiply(0.5);\n+        }\n+        if (MatrixUtils.epsilonEquals(xi, xi_old, 1.0e-10)) {\n+            break;\n+        }\n+    }\n+    return xi;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}