{
    "patch": "public String fixCode(String code) {\n    return code.replaceAll(\"for\\\\s*\\\\((.*?)\\\\s*in\\\\s*(.*?)\\\\)\", \"for (int i = 0; i < (($2) instanceof Object[] ? (($2) instanceof Object[] ? (($2).length) : java.lang.reflect.Array.getLength($2)) : (($2) instanceof java.util.Collection ? (($2) instanceof java.util.Collection ? (($2)).size() : ((java.util.Collection)($2)).size()) : -1)); i++) { $1 = (($2) instanceof Object[] ? (($2) instanceof Object[] ? (($2)[i]) : java.lang.reflect.Array.get(($2), i)) : (($2) instanceof java.util.List ? (($2) instanceof java.util.List ? ((java.util.List)($2)).get(i) : ((java.util.List)($2)).get(i)) : (($2) instanceof java.util.Iterator ? (($2) instanceof java.util.Iterator ? ((java.util.Iterator)($2)).next() : ((java.util.Iterator)($2)).next()) : (($2) instanceof java.util.Enumeration ? (($2) instanceof java.util.Enumeration ? ((java.util.Enumeration)($2)).nextElement() : ((java.util.Enumeration)($2)).nextElement()) :\n\" + \"$2.getClass().isArray() ? java.lang.reflect.Array.get($2, i) : $1))\"); \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..91d619ff 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,10 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    return code.replaceAll(\"for\\\\s*\\\\((.*?)\\\\s*in\\\\s*(.*?)\\\\)\", \"for (int i = 0; i < (($2) instanceof Object[] ? (($2) instanceof Object[] ? (($2).length) : java.lang.reflect.Array.getLength($2)) : (($2) instanceof java.util.Collection ? (($2) instanceof java.util.Collection ? (($2)).size() : ((java.util.Collection)($2)).size()) : -1)); i++) { $1 = (($2) instanceof Object[] ? (($2) instanceof Object[] ? (($2)[i]) : java.lang.reflect.Array.get(($2), i)) : (($2) instanceof java.util.List ? (($2) instanceof java.util.List ? ((java.util.List)($2)).get(i) : ((java.util.List)($2)).get(i)) : (($2) instanceof java.util.Iterator ? (($2) instanceof java.util.Iterator ? ((java.util.Iterator)($2)).next() : ((java.util.Iterator)($2)).next()) : (($2) instanceof java.util.Enumeration ? (($2) instanceof java.util.Enumeration ? ((java.util.Enumeration)($2)).nextElement() : ((java.util.Enumeration)($2)).nextElement()) :\n+\" + \"$2.getClass().isArray() ? java.lang.reflect.Array.get($2, i) : $1))\"); \n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: unclosed string literal",
    "test_result": "ERROR"
}