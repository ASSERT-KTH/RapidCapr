{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n\n        JSModule module = t.getModule();\n        JSModule providedModule = provided.explicitModule;\n        while (providedModule == null) {\n          Preconditions.checkNotNull(\n              provided.containingModule,\n              \"ProvidedName %s should have contained a containingModule but did not\", provided);\n          provided = providedNames.get(provided.containingModule);\n          providedModule = provided.explicitModule;\n        }\n\n        // This must be non-null in this case.\n        Preconditions.checkNotNull(providedModule);\n\n        if (moduleGraph != null &&\n                module != providedModule &&\n                !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(\n                  n,\n                  XMODULE_REQUIRE_ERROR,\n                  ns,\n                  providedModule.getName(),\n                  module.getName()\n              )\n          );\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run Closure passes multiple times, first with the\n      // checks for broken requires turned off. In these cases, we allow broken\n      // requires to be preserved by the first run to let them be caught in the\n      // subsequent run.\n      parent.removeChild(n);\n      compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..ed09f9d1 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,7 +292,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n@@ -302,19 +302,32 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         unrecognizedRequires.add(\n             new UnrecognizedRequire(n, ns, t.getSourceName()));\n       } else {\n+\n+        JSModule module = t.getModule();\n         JSModule providedModule = provided.explicitModule;\n+        while (providedModule == null) {\n+          Preconditions.checkNotNull(\n+              provided.containingModule,\n+              \"ProvidedName %s should have contained a containingModule but did not\", provided);\n+          provided = providedNames.get(provided.containingModule);\n+          providedModule = provided.explicitModule;\n+        }\n \n-        // This must be non-null, because there was an explicit provide.\n+        // This must be non-null in this case.\n         Preconditions.checkNotNull(providedModule);\n \n-        JSModule module = t.getModule();\n         if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n+                module != providedModule &&\n+                !moduleGraph.dependsOn(module, providedModule)) {\n           compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+              t.makeError(\n+                  n,\n+                  XMODULE_REQUIRE_ERROR,\n+                  ns,\n                   providedModule.getName(),\n-                  module.getName()));\n+                  module.getName()\n+              )\n+          );\n         }\n       }\n \n@@ -322,16 +335,14 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       maybeAddStringNodeToSymbolTable(arg);\n \n       // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+      // Some clients run Closure passes multiple times, first with the\n+      // checks for broken requires turned off. In these cases, we allow broken\n+      // requires to be preserved by the first run to let them be caught in the\n+      // subsequent run.\n+      parent.removeChild(n);\n+      compiler.reportCodeChange();\n     }\n-  }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}