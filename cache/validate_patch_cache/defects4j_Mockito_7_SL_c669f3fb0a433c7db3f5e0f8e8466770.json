{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof TypeVariable<?>) { \n        TypeVariable<?> typeVar = (TypeVariable<?>) typeVariable;\n        Type[] actualTypeArguments = typeVar.getGenericDeclaration().getTypeParameters();\n        Type actualTypeArgument;\n        if (actualTypeArguments.length > 0) {\n            actualTypeArgument = actualTypeArguments[0];\n        } else {\n            actualTypeArgument = typeVar.getBounds()[0];\n        }\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        registerTypeVariablesOn(typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..fe700cba1 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,29 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof TypeVariable<?>) { \n+        TypeVariable<?> typeVar = (TypeVariable<?>) typeVariable;\n+        Type[] actualTypeArguments = typeVar.getGenericDeclaration().getTypeParameters();\n+        Type actualTypeArgument;\n+        if (actualTypeArguments.length > 0) {\n+            actualTypeArgument = actualTypeArguments[0];\n+        } else {\n+            actualTypeArgument = typeVar.getBounds()[0];\n+        }\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}