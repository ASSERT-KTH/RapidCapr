{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if (x > mean + 40 * standardDeviation) {\n            return 1;\n        } else if (x < mean - 40 * standardDeviation) {\n            return 0;\n        } else {\n            final double dev = x - mean;\n            try {\n                return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n            } catch (MaxIterationsExceededException ex) {\n                throw new ConvergenceException();\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..47a680d3e 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -122,17 +122,17 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @throws MathException if the algorithm fails to converge\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n+        if (x > mean + 40 * standardDeviation) {\n+            return 1;\n+        } else if (x < mean - 40 * standardDeviation) {\n+            return 0;\n+        } else {\n+            final double dev = x - mean;\n+            try {\n+                return 0.5 * (1.0 + Erf.erf((dev) /\n                     (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n+            } catch (MaxIterationsExceededException ex) {\n+                throw new ConvergenceException();\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}