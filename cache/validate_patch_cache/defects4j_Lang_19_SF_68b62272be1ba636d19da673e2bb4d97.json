{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n\n    if (index < seqEnd && input.charAt(index) == '&') {\n        int semiColonIndex = -1;\n\n        // Look for the end of the entity\n        for (int i = index + 1; i < seqEnd; i++) {\n            char c = input.charAt(i);\n            if (c == ';') {\n                semiColonIndex = i;\n                break;\n            }\n\n            if (c == '&') { // Unexpected '&' character, pass through\n                out.write(input.subSequence(index, i).toString());\n                return i - index;\n            }\n        }\n\n        // Handle unfinished entities\n        if (semiColonIndex == -1) {\n            out.write(input.subSequence(index, seqEnd).toString());\n            return seqEnd - index;\n        }\n\n        String entityText = input.subSequence(index, semiColonIndex + 1).toString();\n\n        int entityValue;\n        try {\n            if (entityText.length() > 3 && entityText.charAt(1) == 'x') {\n                entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1), 16);\n            } else {\n                entityValue = Integer.parseInt(entityText.substring(1, entityText.length() - 1));\n            }\n        } catch (NumberFormatException nfe) {\n            out.write(entityText);\n            return entityText.length();\n        }\n\n        // Pass through control characters\n        if (entityValue < 32 || (entityValue > 126 && entityValue < 160)) {\n            out.write(entityText);\n            return entityText.length();\n        }\n\n        // Pass through non-characters\n        if ((entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n            out.write(entityText);\n            return entityText.length();\n        }\n\n        // Write the character to output\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return semiColonIndex - index + 1;\n    }\n\n    out.write(input.charAt(index));\n    return 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..387e16d4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,71 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index < seqEnd && input.charAt(index) == '&') {\n+        int semiColonIndex = -1;\n \n-                // Check there's more than just an x after the &#\n+        // Look for the end of the entity\n+        for (int i = index + 1; i < seqEnd; i++) {\n+            char c = input.charAt(i);\n+            if (c == ';') {\n+                semiColonIndex = i;\n+                break;\n             }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+            if (c == '&') { // Unexpected '&' character, pass through\n+                out.write(input.subSequence(index, i).toString());\n+                return i - index;\n             }\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        // Handle unfinished entities\n+        if (semiColonIndex == -1) {\n+            out.write(input.subSequence(index, seqEnd).toString());\n+            return seqEnd - index;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        String entityText = input.subSequence(index, semiColonIndex + 1).toString();\n+\n+        int entityValue;\n+        try {\n+            if (entityText.length() > 3 && entityText.charAt(1) == 'x') {\n+                entityValue = Integer.parseInt(entityText.substring(2, entityText.length() - 1), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(entityText.substring(1, entityText.length() - 1));\n             }\n+        } catch (NumberFormatException nfe) {\n+            out.write(entityText);\n+            return entityText.length();\n+        }\n \n+        // Pass through control characters\n+        if (entityValue < 32 || (entityValue > 126 && entityValue < 160)) {\n+            out.write(entityText);\n+            return entityText.length();\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        // Pass through non-characters\n+        if ((entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n+            out.write(entityText);\n+            return entityText.length();\n         }\n-        return 0;\n+\n+        // Write the character to output\n+        if (entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+        } else {\n+            out.write(entityValue);\n+        }\n+\n+        return semiColonIndex - index + 1;\n     }\n+\n+    out.write(input.charAt(index));\n+    return 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: High unicode should have been unchanged expected:<?[?]> but was:<?[]>",
    "test_result": "FAIL"
}