{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = d.getRowDimension();\n    final double[] dSqrt = new double[n];\n    for (int i = 0; i < n; ++i) {\n        final double sqr = Math.sqrt(Math.max(d.getEntry(i, i), 0.0));\n        dSqrt[i] = sqr;\n    }\n\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(dSqrt);\n\n    return v.multiply(sqrtD).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d6d3540ca 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = d.getRowDimension();\n+    final double[] dSqrt = new double[n];\n+    for (int i = 0; i < n; ++i) {\n+        final double sqr = Math.sqrt(Math.max(d.getEntry(i, i), 0.0));\n+        dSqrt[i] = sqr;\n     }\n+\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(dSqrt);\n+\n+    return v.multiply(sqrtD).multiply(v.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}