{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n    XYDataItem existingItem = null;\n    int index = indexOf(x);\n    if (index >= 0) {\n        // Check if duplicate x values are allowed\n        if (allowDuplicateXValues) {\n            // Check if there are multiple items with same x value\n            int nextIndex = index + 1;\n            while (nextIndex < getItemCount() && getX(nextIndex).equals(x)) {\n                nextIndex++;\n            }\n            // Append the new item if there are no more items with the same x value\n            this.data.add(nextIndex, new XYDataItem(x, y));\n        } else {\n            // Duplicate x values are not allowed, update y value of the existing item\n            existingItem = getDataItem(index);\n            existingItem.setY(y);\n        }\n    } else {\n        // If the series is sorted use binary search algorithm to insert the new item\n        if (autoSort) {\n            index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n            if (index < 0) {\n                this.data.add((-index - 1), new XYDataItem(x, y));\n            } else {\n                // Check if duplicate x values are allowed\n                if (allowDuplicateXValues) {\n                    // Check if there are multiple items with same x value\n                    int nextIndex = index + 1;\n                    while (nextIndex < getItemCount() && getX(nextIndex).equals(x)) {\n                        nextIndex++;\n                    }\n                    // Append the new item if there are no more items with the same x value\n                    this.data.add(nextIndex, new XYDataItem(x, y));\n                } else {\n                    // Duplicate x values are not allowed, replace the existing item with new item\n                    existingItem = getDataItem(index);\n                    existingItem.setY(y);\n                }\n            }\n        } else {\n            // The series is not sorted so just append the data item\n            this.data.add(new XYDataItem(x, y));\n        }\n        // Check if the series exceeds the maximum item count and remove the oldest item\n        if (getItemCount() > maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    // Notify series listeners of data change\n    fireSeriesChanged();\n    return existingItem;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..a5fa7d9 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,62 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+    XYDataItem existingItem = null;\n+    int index = indexOf(x);\n+    if (index >= 0) {\n+        // Check if duplicate x values are allowed\n+        if (allowDuplicateXValues) {\n+            // Check if there are multiple items with same x value\n+            int nextIndex = index + 1;\n+            while (nextIndex < getItemCount() && getX(nextIndex).equals(x)) {\n+                nextIndex++;\n+            }\n+            // Append the new item if there are no more items with the same x value\n+            this.data.add(nextIndex, new XYDataItem(x, y));\n+        } else {\n+            // Duplicate x values are not allowed, update y value of the existing item\n+            existingItem = getDataItem(index);\n+            existingItem.setY(y);\n+        }\n+    } else {\n+        // If the series is sorted use binary search algorithm to insert the new item\n+        if (autoSort) {\n+            index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n+            if (index < 0) {\n+                this.data.add((-index - 1), new XYDataItem(x, y));\n+            } else {\n+                // Check if duplicate x values are allowed\n+                if (allowDuplicateXValues) {\n+                    // Check if there are multiple items with same x value\n+                    int nextIndex = index + 1;\n+                    while (nextIndex < getItemCount() && getX(nextIndex).equals(x)) {\n+                        nextIndex++;\n+                    }\n+                    // Append the new item if there are no more items with the same x value\n+                    this.data.add(nextIndex, new XYDataItem(x, y));\n+                } else {\n+                    // Duplicate x values are not allowed, replace the existing item with new item\n+                    existingItem = getDataItem(index);\n+                    existingItem.setY(y);\n+                }\n+            }\n+        } else {\n+            // The series is not sorted so just append the data item\n+            this.data.add(new XYDataItem(x, y));\n+        }\n+        // Check if the series exceeds the maximum item count and remove the oldest item\n+        if (getItemCount() > maximumItemCount) {\n+            this.data.remove(0);\n+        }\n+    }\n+    // Notify series listeners of data change\n+    fireSeriesChanged();\n+    return existingItem;\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[1.0, 2.0]> but was:<[1.0, 99.0]>",
    "test_result": "FAIL"
}