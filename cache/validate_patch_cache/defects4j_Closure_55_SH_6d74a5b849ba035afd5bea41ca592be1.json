{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (NodeUtil.isFunctionExpression(n)) {\n        if (NodeUtil.getFunctionName(n) != null && NodeUtil.getFunctionBody(n) != null) {\n            return true;\n        }\n    } else if (n.isCall()) {\n        Node callee = n.getFirstChild();\n        if (callee.isFunction()) {\n            Node name = callee.getFirstChild();\n            Node body = name.getNext();\n            if (name.isName() && body != null) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..2fadf627 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,23 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (NodeUtil.isFunctionExpression(n)) {\n+        if (NodeUtil.getFunctionName(n) != null && NodeUtil.getFunctionBody(n) != null) {\n+            return true;\n+        }\n+    } else if (n.isCall()) {\n+        Node callee = n.getFirstChild();\n+        if (callee.isFunction()) {\n+            Node name = callee.getFirstChild();\n+            Node body = name.getNext();\n+            if (name.isName() && body != null) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}