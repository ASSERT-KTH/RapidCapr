{
    "patch": "import org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\n\nprivate static final double TOLERANCE = 1e-9;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, TOLERANCE);\n    final RealMatrix sqrtD = dec.getD().scalarMatrixRoot();\n    final RealMatrix v = dec.getV();\n    if (v.getRowDimension() == 0 || v.getColumnDimension() == 0) {\n        return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    }\n\n    RealMatrix sqrtD_times_vt = sqrtD.multiply(v.transpose());\n    RealMatrix res = v.multiply(sqrtD_times_vt);\n\n    return res;\n}\n\nprivate RealMatrix pseudoInverse(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, TOLERANCE);\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n    final int n = d.getRowDimension();\n    final RealVector singularValues = new ArrayRealVector(n);\n    for (int i = 0; i < n; i++) {\n        if (Math.abs(d.getEntry(i, i)) > TOLERANCE) {\n            singularValues.setEntry(i, 1.0 / Math.sqrt(Math.abs(d.getEntry(i, i))));\n        }\n    }\n    return v.multiply(MatrixUtils.createRealDiagonalMatrix(singularValues.toArray())).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..13cb58905 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.ArrayRealVector;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.RealVector;\n+\n+private static final double TOLERANCE = 1e-9;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, TOLERANCE);\n+    final RealMatrix sqrtD = dec.getD().scalarMatrixRoot();\n+    final RealMatrix v = dec.getV();\n+    if (v.getRowDimension() == 0 || v.getColumnDimension() == 0) {\n+        return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n     }\n+\n+    RealMatrix sqrtD_times_vt = sqrtD.multiply(v.transpose());\n+    RealMatrix res = v.multiply(sqrtD_times_vt);\n+\n+    return res;\n+}\n+\n+private RealMatrix pseudoInverse(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, TOLERANCE);\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+    final int n = d.getRowDimension();\n+    final RealVector singularValues = new ArrayRealVector(n);\n+    for (int i = 0; i < n; i++) {\n+        if (Math.abs(d.getEntry(i, i)) > TOLERANCE) {\n+            singularValues.setEntry(i, 1.0 / Math.sqrt(Math.abs(d.getEntry(i, i))));\n+        }\n+    }\n+    return v.multiply(MatrixUtils.createRealDiagonalMatrix(singularValues.toArray())).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}