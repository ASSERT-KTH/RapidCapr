{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ObjectType ot = constructorType.autoboxesTo();\n        FunctionType ct = ot.getConstructor();\n        if (ct != null && ct.isConstructor()) {\n          JSType instanceType = ot.getTemplateTypeMap().getResolvedTemplateType(\"this\");\n          type = instanceType == null ? getNativeType(OBJECT_TYPE) : instanceType;\n        } else {\n          // We don't want to throw a warning here. It is very likely that the\n          // programmer intended to assign a value to this node later. This will\n          // infer an unknown type, which is the correct behavior.\n          return scope;\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c16ab53c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1043,15 +1043,16 @@ class TypeInference\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n+        ObjectType ot = constructorType.autoboxesTo();\n+        FunctionType ct = ot.getConstructor();\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          JSType instanceType = ot.getTemplateTypeMap().getResolvedTemplateType(\"this\");\n+          type = instanceType == null ? getNativeType(OBJECT_TYPE) : instanceType;\n+        } else {\n+          // We don't want to throw a warning here. It is very likely that the\n+          // programmer intended to assign a value to this node later. This will\n+          // infer an unknown type, which is the correct behavior.\n+          return scope;\n         }\n       }\n     }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}