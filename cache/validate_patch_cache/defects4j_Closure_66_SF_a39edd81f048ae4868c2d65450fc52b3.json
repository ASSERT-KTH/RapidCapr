{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    try {\n        JSONObject jsonObj = new JSONObject(jsonStr);\n        JSONArray fieldsArr = jsonObj.getJSONArray(\"fields\");\n        int total = 0;\n        int typed = 0;\n        for (int i = 0; i < fieldsArr.length(); i++) {\n            JSONObject fieldObj = fieldsArr.getJSONObject(i);\n            String fieldType = fieldObj.getString(\"type\");\n            if (fieldType.equals(\"typed\")) {\n                typed += fieldObj.getInt(\"count\");\n            }\n            total += fieldObj.getInt(\"count\");\n        }\n        if (total == 0) {\n            return 0.0;\n        }\n        return ((double) typed / (double) total) * 100.0;\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..16894895 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    try {\n+        JSONObject jsonObj = new JSONObject(jsonStr);\n+        JSONArray fieldsArr = jsonObj.getJSONArray(\"fields\");\n+        int total = 0;\n+        int typed = 0;\n+        for (int i = 0; i < fieldsArr.length(); i++) {\n+            JSONObject fieldObj = fieldsArr.getJSONObject(i);\n+            String fieldType = fieldObj.getString(\"type\");\n+            if (fieldType.equals(\"typed\")) {\n+                typed += fieldObj.getInt(\"count\");\n+            }\n+            total += fieldObj.getInt(\"count\");\n+        }\n+        if (total == 0) {\n+            return 0.0;\n+        }\n+        return ((double) typed / (double) total) * 100.0;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}