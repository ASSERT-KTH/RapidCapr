{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.EXPR_RESULT) {\n    // only blocks with one child are foldable\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n      Node grandchild = child.getFirstChild();\n      if (grandchild.getType() == Token.EXPR_RESULT) {\n        // recursively check for foldability\n        return isFoldableExpressBlock(grandchild);\n      } else if (grandchild.getType() == Token.RETURN) {\n        // only return statements with a single return value are foldable\n        return NodeUtil.isExpressionNode(grandchild.getFirstChild());\n      } else if (grandchild.getType() == Token.HOOK) {\n        // only ternary expressions composed of literals or variables are foldable\n        Node first = grandchild.getFirstChild();\n        Node second = first.getNext();\n        Node third = grandchild.getLastChild();\n        return NodeUtil.isLiteralValue(first) && NodeUtil.isLiteralValue(second) && NodeUtil.isName(second)\n            && NodeUtil.isLiteralValue(third) && !grandchild.hasChildren();\n      } else if (grandchild.getType() == Token.OR || grandchild.getType() == Token.AND) {\n        // only || and && composed of variables are foldable\n        Node left = grandchild.getFirstChild();\n        Node right = left.getNext();\n        return NodeUtil.isName(left) && NodeUtil.isName(right) && !grandchild.hasChildren();\n      } else if (grandchild.getType() == Token.INC || grandchild.getType() == Token.DEC) {\n        // ++ and -- operators on variables are foldable\n        Node operand = grandchild.getFirstChild();\n        return NodeUtil.isName(operand) && !grandchild.hasChildren();\n      } else if (grandchild.getType() == Token.NOT) {\n        // !(x) expressions are foldable\n        Node childOfNot = grandchild.getFirstChild();\n        return NodeUtil.isExpressionNode(childOfNot) && !grandchild.hasChildren();\n      } else if (grandchild.getType() == Token.TYPEOF) {\n        // typeof(x) expressions are foldable\n        Node childOfTypeof = grandchild.getFirstChild();\n        return NodeUtil.isName(childOfTypeof) && !grandchild.hasChildren();\n      } else if (grandchild.getType() != Token.CALL) {\n        // anything else should only be a variable or a literal\n        return NodeUtil.isLiteralValue(grandchild) || NodeUtil.isName(grandchild) && !grandchild.hasChildren();\n      }\n    }\n    return false;\n  } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n    if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.FUNCTION) {\n      Node functionChild = NodeUtil.getFunctionBody(child);\n      if (functionChild != null) {\n        return false;\n      }\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..cc29f96f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,60 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.EXPR_RESULT) {\n+    // only blocks with one child are foldable\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n+      Node grandchild = child.getFirstChild();\n+      if (grandchild.getType() == Token.EXPR_RESULT) {\n+        // recursively check for foldability\n+        return isFoldableExpressBlock(grandchild);\n+      } else if (grandchild.getType() == Token.RETURN) {\n+        // only return statements with a single return value are foldable\n+        return NodeUtil.isExpressionNode(grandchild.getFirstChild());\n+      } else if (grandchild.getType() == Token.HOOK) {\n+        // only ternary expressions composed of literals or variables are foldable\n+        Node first = grandchild.getFirstChild();\n+        Node second = first.getNext();\n+        Node third = grandchild.getLastChild();\n+        return NodeUtil.isLiteralValue(first) && NodeUtil.isLiteralValue(second) && NodeUtil.isName(second)\n+            && NodeUtil.isLiteralValue(third) && !grandchild.hasChildren();\n+      } else if (grandchild.getType() == Token.OR || grandchild.getType() == Token.AND) {\n+        // only || and && composed of variables are foldable\n+        Node left = grandchild.getFirstChild();\n+        Node right = left.getNext();\n+        return NodeUtil.isName(left) && NodeUtil.isName(right) && !grandchild.hasChildren();\n+      } else if (grandchild.getType() == Token.INC || grandchild.getType() == Token.DEC) {\n+        // ++ and -- operators on variables are foldable\n+        Node operand = grandchild.getFirstChild();\n+        return NodeUtil.isName(operand) && !grandchild.hasChildren();\n+      } else if (grandchild.getType() == Token.NOT) {\n+        // !(x) expressions are foldable\n+        Node childOfNot = grandchild.getFirstChild();\n+        return NodeUtil.isExpressionNode(childOfNot) && !grandchild.hasChildren();\n+      } else if (grandchild.getType() == Token.TYPEOF) {\n+        // typeof(x) expressions are foldable\n+        Node childOfTypeof = grandchild.getFirstChild();\n+        return NodeUtil.isName(childOfTypeof) && !grandchild.hasChildren();\n+      } else if (grandchild.getType() != Token.CALL) {\n+        // anything else should only be a variable or a literal\n+        return NodeUtil.isLiteralValue(grandchild) || NodeUtil.isName(grandchild) && !grandchild.hasChildren();\n       }\n     }\n-\n     return false;\n+  } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.FUNCTION) {\n+      Node functionChild = NodeUtil.getFunctionBody(child);\n+      if (functionChild != null) {\n+        return false;\n+      }\n+      return NodeUtil.isExpressionNode(child);\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: method isLiteralValue in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}