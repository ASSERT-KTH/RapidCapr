{
    "patch": "public static double logBeta(double x, double y) {\n    if (Double.isNaN(x) || Double.isNaN(y) || x <= 0.0 || y <= 0.0) {\n        return Double.NaN;\n    } else if (x <= 1.0 && y <= 1.0) {\n        double prod = x * y;\n        if (prod == 0.0) {\n            return Double.POSITIVE_INFINITY;\n        } else {\n            return Math.log(Gamma.gamma(x) + Math.log(Gamma.gamma(y)) - Math.log(Gamma.gamma(x + y)));\n        }\n    } else {\n        return Math.log(Gamma.gamma(x) + Math.log(Gamma.gamma(y)) - Math.log(Gamma.gamma(x + y)));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a5ce25804 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,20 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double logBeta(double x, double y) {\n+    if (Double.isNaN(x) || Double.isNaN(y) || x <= 0.0 || y <= 0.0) {\n+        return Double.NaN;\n+    } else if (x <= 1.0 && y <= 1.0) {\n+        double prod = x * y;\n+        if (prod == 0.0) {\n+            return Double.POSITIVE_INFINITY;\n+        } else {\n+            return Math.log(Gamma.gamma(x) + Math.log(Gamma.gamma(y)) - Math.log(Gamma.gamma(x + y)));\n+        }\n+    } else {\n+        return Math.log(Gamma.gamma(x) + Math.log(Gamma.gamma(y)) - Math.log(Gamma.gamma(x + y)));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}