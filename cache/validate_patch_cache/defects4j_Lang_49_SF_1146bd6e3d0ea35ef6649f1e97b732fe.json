{
    "patch": "public Fraction reduce() {\n    int num = this.numerator;\n    int den = this.denominator;\n    \n    // handle zero and one\n    if (num == 0 || Math.abs(den) == 1) {\n        return this;\n    }\n\n    // calculate gcd\n    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(den));\n    \n    // if gcd > 1, reduce the fraction\n    if (gcd > 1) {\n        num /= gcd;\n        den /= gcd;\n    }\n\n    // ensure negative sign is always on the numerator\n    if (den < 0) {\n        num = -num;\n        den = -den;\n    }\n    \n    // return the reduced fraction as a new Fraction instance\n    return new Fraction(num, den);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..620cd5f0 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,33 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int num = this.numerator;\n+    int den = this.denominator;\n+    \n+    // handle zero and one\n+    if (num == 0 || Math.abs(den) == 1) {\n+        return this;\n+    }\n+\n+    // calculate gcd\n+    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(den));\n+    \n+    // if gcd > 1, reduce the fraction\n+    if (gcd > 1) {\n+        num /= gcd;\n+        den /= gcd;\n+    }\n+\n+    // ensure negative sign is always on the numerator\n+    if (den < 0) {\n+        num = -num;\n+        den = -den;\n     }\n+    \n+    // return the reduced fraction as a new Fraction instance\n+    return new Fraction(num, den);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}