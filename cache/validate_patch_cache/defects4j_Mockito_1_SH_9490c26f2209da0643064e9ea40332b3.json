{
    "patch": "            int argsCount = invocationMatcher.matchers.size();\n            Object[] rawArgs = invocation.getRawArguments();\n            int indexOfVararg = -1;\n            if (invocation.getMethod().isVarArgs()) {\n                indexOfVararg = rawArgs.length - 1;\n                argsCount += Math.max(rawArgs.length - argsCount, 0);\n            }\n            for (int position = 0; position < argsCount; position++) {\n                if (position == indexOfVararg) {\n                    Object vararg = rawArgs[indexOfVararg];\n                    for (int i = 0; i < Array.getLength(vararg); i++) {\n                        Object arg = Array.get(vararg, i);\n                        int matcherIndex = Math.min(position, invocationMatcher.matchers.size() - 1);\n                        Matcher m = invocationMatcher.matchers.get(matcherIndex);\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(arg);\n                        }\n                        position++;\n                    }\n                    position--;\n                } else {\n                    int matcherIndex = Math.min(position, invocationMatcher.matchers.size() - 1);\n                    Matcher m = invocationMatcher.matchers.get(matcherIndex);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(rawArgs[position]);\n                    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..b76e0fa49 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,32 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            int argsCount = invocationMatcher.matchers.size();\n+            Object[] rawArgs = invocation.getRawArguments();\n+            int indexOfVararg = -1;\n+            if (invocation.getMethod().isVarArgs()) {\n+                indexOfVararg = rawArgs.length - 1;\n+                argsCount += Math.max(rawArgs.length - argsCount, 0);\n+            }\n+            for (int position = 0; position < argsCount; position++) {\n+                if (position == indexOfVararg) {\n+                    Object vararg = rawArgs[indexOfVararg];\n+                    for (int i = 0; i < Array.getLength(vararg); i++) {\n+                        Object arg = Array.get(vararg, i);\n+                        int matcherIndex = Math.min(position, invocationMatcher.matchers.size() - 1);\n+                        Matcher m = invocationMatcher.matchers.get(matcherIndex);\n+                        if (m instanceof CapturesArguments) {\n+                            ((CapturesArguments) m).captureFrom(arg);\n+                        }\n+                        position++;\n+                    }\n+                    position--;\n+                } else {\n+                    int matcherIndex = Math.min(position, invocationMatcher.matchers.size() - 1);\n+                    Matcher m = invocationMatcher.matchers.get(matcherIndex);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(rawArgs[position]);\n+                    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}