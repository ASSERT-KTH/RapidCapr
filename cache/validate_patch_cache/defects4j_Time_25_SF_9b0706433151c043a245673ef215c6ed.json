{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n\n    // adjust instantLocal using the estimate and recalculate the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // If true, we must be in a DST gap\n        if (offsetLocal > offsetAdjusted) {\n            // This means we need to find the last valid offset before the gap\n            final long previousLocalTransition = previousTransition(instantLocal);\n            final int previousLocalOffset = getOffset(previousLocalTransition);\n            if (previousLocalOffset == offsetLocal) {\n                // We're on the right side of the transition, before the gap\n                return offsetLocal;\n            } else {\n                // We have already fallen into the gap\n                return previousLocalOffset;\n            }\n        } else {\n            // We must be in a DST overlap\n            final long nextLocalTransition = nextTransition(instantLocal);\n            final int nextLocalOffset = getOffset(nextLocalTransition);\n            if (nextLocalOffset == offsetAdjusted) {\n                // We're on the right side of the transition, after the overlap\n                return offsetAdjusted;\n            } else {\n                // We have not yet reached the new offset\n                return offsetLocal;\n            }\n        }\n    }\n\n    // If we haven't yet returned, the offset is the same before and after the transition\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a982344b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,46 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+\n+    // adjust instantLocal using the estimate and recalculate the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // If true, we must be in a DST gap\n+        if (offsetLocal > offsetAdjusted) {\n+            // This means we need to find the last valid offset before the gap\n+            final long previousLocalTransition = previousTransition(instantLocal);\n+            final int previousLocalOffset = getOffset(previousLocalTransition);\n+            if (previousLocalOffset == offsetLocal) {\n+                // We're on the right side of the transition, before the gap\n+                return offsetLocal;\n+            } else {\n+                // We have already fallen into the gap\n+                return previousLocalOffset;\n+            }\n+        } else {\n+            // We must be in a DST overlap\n+            final long nextLocalTransition = nextTransition(instantLocal);\n+            final int nextLocalOffset = getOffset(nextLocalTransition);\n+            if (nextLocalOffset == offsetAdjusted) {\n+                // We're on the right side of the transition, after the overlap\n+                return offsetAdjusted;\n+            } else {\n+                // We have not yet reached the new offset\n+                return offsetLocal;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    // If we haven't yet returned, the offset is the same before and after the transition\n+    return offsetAdjusted;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}