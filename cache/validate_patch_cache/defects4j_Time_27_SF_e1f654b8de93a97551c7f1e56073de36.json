{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    Separator separator = null;\n    int separatorIndex = -1;\n    for (int i = size - 1; i >= 0; i--) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof Separator) {\n            separator = (Separator) obj;\n            separatorIndex = i;\n            break;\n        }\n    }\n    if (separator == null) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n    List<Object> before = elementPairs.subList(0, separatorIndex);\n    List<Object> after = elementPairs.subList(separatorIndex + 1, size);\n    PeriodFormatter bef = toFormatter(before, notPrinter, notParser);\n    PeriodFormatter aft = toFormatter(after, notPrinter, notParser);\n    Separator sep = separator.finish(bef.getPrinter(), aft.getParser());\n    if (notPrinter) {\n        sep = (Separator) sep.withLaterPrinter(null);\n    } else if (notParser) {\n        sep = (Separator) sep.withLaterParser(null);\n    }\n    return new PeriodFormatter(sep, sep);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..86475cb4 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,25 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    Separator separator = null;\n+    int separatorIndex = -1;\n+    for (int i = size - 1; i >= 0; i--) {\n+        Object obj = elementPairs.get(i);\n+        if (obj instanceof Separator) {\n+            separator = (Separator) obj;\n+            separatorIndex = i;\n+            break;\n         }\n+    }\n+    if (separator == null) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +819,18 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+    List<Object> before = elementPairs.subList(0, separatorIndex);\n+    List<Object> after = elementPairs.subList(separatorIndex + 1, size);\n+    PeriodFormatter bef = toFormatter(before, notPrinter, notParser);\n+    PeriodFormatter aft = toFormatter(after, notPrinter, notParser);\n+    Separator sep = separator.finish(bef.getPrinter(), aft.getParser());\n+    if (notPrinter) {\n+        sep = (Separator) sep.withLaterPrinter(null);\n+    } else if (notParser) {\n+        sep = (Separator) sep.withLaterParser(null);\n+    }\n+    return new PeriodFormatter(sep, sep);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}