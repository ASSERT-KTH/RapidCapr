{
    "patch": "                } \n                 else {\n                    simplex = performContractStep(original, best, comparator);\n                }\n            } else {\n                simplex = performContractStep(original, best, comparator);\n            }\n\n            // check convergence\n            if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n                return;\n            }\n        }\n    }\n\n    protected RealPointValuePair[] performContractStep(RealPointValuePair[] original, RealPointValuePair best,\n                                                    Comparator<RealPointValuePair> comparator) {\n        final int dimension = original[0].getPoint().length;\n        final RealPointValuePair contracted;\n\n        // compute the contracted simplex\n        if (fullSimplex) {\n            contracted = evaluateNewSimplex(\n                original, beta,\n                comparator\n            );\n        } else {\n            final double[] contractedCoords = new double[dimension];\n            final double[] bestCoords = best.getPoint();\n            final RealPointValuePair[] nonBest = new RealPointValuePair[simplex.length - 1];\n            for (int i = 0; i < simplex.length; ++i) {\n                final double[] coords_i = simplex[i].getPoint();\n                if (i < nonBest.length) {\n                    nonBest[i] = simplex[i];\n                }\n                for (int j = 0; j < dimension; ++j) {\n                    contractedCoords[j] += coords_i[j];\n                }\n            }\n            final double scaling = 1.0 / dimension;\n            for (int j = 0; j < dimension; ++j) {\n                contractedCoords[j] = bestCoords[j] + (contractedCoords[j] - bestCoords[j]) * scaling;\n            }\n            contracted = new RealPointValuePair(contractedCoords, Double.NaN);\n            final int[] contractIndices = getContractionIndices(best, comparator);\n            for (final int contractIndex : contractIndices) {\n                simplex[contractIndex] = contracted;\n            }\n            nonBest[contractIndices[0]] = contracted;\n            evaluateSimplex(nonBest, comparator, false);\n        }\n        if (comparator.compare(contracted, best) >= 0) {\n            return contractInside(original, comparator);\n        }\n\n        RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        contractedSimplex[0] = best;\n        for (int i = 0; i < simplex.length; ++i) {\n            contractedSimplex[i + 1] = (simplex[i] == best) ? contracted : simplex[i];\n        }\n        return contractedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..895174940 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,67 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                } \n+                 else {\n+                    simplex = performContractStep(original, best, comparator);\n                 }\n-\n-                return;\n-\n+            } else {\n+                simplex = performContractStep(original, best, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n                 return;\n             }\n+        }\n+    }\n \n+    protected RealPointValuePair[] performContractStep(RealPointValuePair[] original, RealPointValuePair best,\n+                                                    Comparator<RealPointValuePair> comparator) {\n+        final int dimension = original[0].getPoint().length;\n+        final RealPointValuePair contracted;\n+\n+        // compute the contracted simplex\n+        if (fullSimplex) {\n+            contracted = evaluateNewSimplex(\n+                original, beta,\n+                comparator\n+            );\n+        } else {\n+            final double[] contractedCoords = new double[dimension];\n+            final double[] bestCoords = best.getPoint();\n+            final RealPointValuePair[] nonBest = new RealPointValuePair[simplex.length - 1];\n+            for (int i = 0; i < simplex.length; ++i) {\n+                final double[] coords_i = simplex[i].getPoint();\n+                if (i < nonBest.length) {\n+                    nonBest[i] = simplex[i];\n+                }\n+                for (int j = 0; j < dimension; ++j) {\n+                    contractedCoords[j] += coords_i[j];\n+                }\n+            }\n+            final double scaling = 1.0 / dimension;\n+            for (int j = 0; j < dimension; ++j) {\n+                contractedCoords[j] = bestCoords[j] + (contractedCoords[j] - bestCoords[j]) * scaling;\n+            }\n+            contracted = new RealPointValuePair(contractedCoords, Double.NaN);\n+            final int[] contractIndices = getContractionIndices(best, comparator);\n+            for (final int contractIndex : contractIndices) {\n+                simplex[contractIndex] = contracted;\n+            }\n+            nonBest[contractIndices[0]] = contracted;\n+            evaluateSimplex(nonBest, comparator, false);\n+        }\n+        if (comparator.compare(contracted, best) >= 0) {\n+            return contractInside(original, comparator);\n         }\n \n-    }\n+        RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        contractedSimplex[0] = best;\n+        for (int i = 0; i < simplex.length; ++i) {\n+            contractedSimplex[i + 1] = (simplex[i] == best) ? contracted : simplex[i];\n+        }\n+        return contractedSimplex;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}