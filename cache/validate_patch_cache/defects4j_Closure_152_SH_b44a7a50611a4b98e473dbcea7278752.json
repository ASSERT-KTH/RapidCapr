{
    "patch": "    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n    if (!(typeOfThisResolved instanceof ObjectType)) {\n      t.report(\n          JSError.make(\n              this.getSourceFileName(),\n              this.getSourceName(),\n              this.getLineNumber(),\n              TYPE_USED_WITHOUT_ANNOTATION_OR_CAST,\n              \"typeOfThis in FunctionType not an object or null\"));\n    } else {\n      typeOfThis = (ObjectType) typeOfThisResolved;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..9af85e41 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,17 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n+    if (!(typeOfThisResolved instanceof ObjectType)) {\n+      t.report(\n+          JSError.make(\n+              this.getSourceFileName(),\n+              this.getSourceName(),\n+              this.getLineNumber(),\n+              TYPE_USED_WITHOUT_ANNOTATION_OR_CAST,\n+              \"typeOfThis in FunctionType not an object or null\"));\n+    } else {\n+      typeOfThis = (ObjectType) typeOfThisResolved;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}