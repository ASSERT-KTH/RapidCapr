{
    "patch": "    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else if (provided.explicitModule == null) {\n      compiler.report(\n          t.makeError(\n            n, REQUIRED_PROVIDED_MISMATCH, ns, provided.requiredIn, \"null\"));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(\n              n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      parent.detachFromParent();\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..26e47461 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,29 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    if (provided == null || !provided.isExplicitlyProvided()) {\n+      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+    } else if (provided.explicitModule == null) {\n+      compiler.report(\n+          t.makeError(\n+            n, REQUIRED_PROVIDED_MISMATCH, ns, provided.requiredIn, \"null\"));\n+    } else {\n+      JSModule providedModule = provided.explicitModule;\n+\n+      JSModule module = t.getModule();\n+      if (moduleGraph != null &&\n+          module != providedModule &&\n+          !moduleGraph.dependsOn(module, providedModule)) {\n+        compiler.report(\n+            t.makeError(\n+              n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n+      }\n+\n+      maybeAddToSymbolTable(left);\n+      maybeAddStringNodeToSymbolTable(arg);\n+\n+      parent.detachFromParent();\n+      compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}