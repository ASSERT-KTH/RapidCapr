{
    "patch": "boolean atLeastOneStrategyAdded = false;\nfor (;;) {\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n    if (!patternMatcher.lookingAt()) {\n        nextStrategy = null;\n        break;\n    }\n    String nextFormatField = patternMatcher.group();\n    nextStrategy = getStrategy(nextFormatField);\n    if (currentStrategy != null) {\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n            atLeastOneStrategyAdded = true;\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    currentFormatField = nextFormatField;\n    currentStrategy = nextStrategy;\n}\nif (currentStrategy != null) {\n    if (atLeastOneStrategyAdded || currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    } else {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n}\nif (collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[collector.size()]);\nparsePattern = Pattern.compile(regex.toString());\nif (strategies.length == 0) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..56153833 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,42 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean atLeastOneStrategyAdded = false;\n+for (;;) {\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+    if (!patternMatcher.lookingAt()) {\n+        nextStrategy = null;\n+        break;\n+    }\n+    String nextFormatField = patternMatcher.group();\n+    nextStrategy = getStrategy(nextFormatField);\n+    if (currentStrategy != null) {\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+            atLeastOneStrategyAdded = true;\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    currentFormatField = nextFormatField;\n+    currentStrategy = nextStrategy;\n+}\n+if (currentStrategy != null) {\n+    if (atLeastOneStrategyAdded || currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+}\n+if (collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+parsePattern = Pattern.compile(regex.toString());\n+if (strategies.length == 0) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}