{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  if (n.isCall()) {\n    Node callee = n.getFirstChild();\n    if (callee.isGetProp()) {\n      String prop = callee.getLastChild().getString();\n      return !NodeFns.isDisallowedInSimplified(prop);\n    } else if (callee.isName()) {\n      String name = callee.getString();\n      return !NodeFns.isDisallowedInSimplified(name);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..d5368fb1 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,22 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (NodeUtil.isFunctionExpression(n)) {\n+    return true;\n   }\n+  if (n.isCall()) {\n+    Node callee = n.getFirstChild();\n+    if (callee.isGetProp()) {\n+      String prop = callee.getLastChild().getString();\n+      return !NodeFns.isDisallowedInSimplified(prop);\n+    } else if (callee.isName()) {\n+      String name = callee.getString();\n+      return !NodeFns.isDisallowedInSimplified(name);\n+    }\n+  }\n+  return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}