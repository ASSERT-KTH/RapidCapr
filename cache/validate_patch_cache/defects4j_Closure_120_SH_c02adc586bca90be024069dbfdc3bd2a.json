{
    "patch": "        // Traverse up the basic blocks, making sure the assignment is not in a loop or nested function.\n        block = ref.getBasicBlock().getParent();\n        while (block != null) {\n          if (block.isFunction) {\n            return false;\n          } else if (block.isLoop) {\n            return false;\n          }\n          if (block == ref.getBasicBlock()) {\n            break;\n          }\n          block = block.getParent();\n        }\n\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..3f86920f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Traverse up the basic blocks, making sure the assignment is not in a loop or nested function.\n+        block = ref.getBasicBlock().getParent();\n+        while (block != null) {\n+          if (block.isFunction) {\n+            return false;\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n+          if (block == ref.getBasicBlock()) {\n+            break;\n+          }\n+          block = block.getParent();\n+        }\n+\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}