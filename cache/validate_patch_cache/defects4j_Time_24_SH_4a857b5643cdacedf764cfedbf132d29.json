{
    "patch": "        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            } catch (ArithmeticException e) {\n                if (text != null) {\n                    e = new IllegalFieldValueException(\n                            savedFields[i].iField.getType(),\n                            text,\n                            e.getMessage(),\n                            e\n                     );\n                }\n                throw new IllegalFieldValueException(\n                        savedFields[i].iField.getType(),\n                        e.getMessage(),\n                        e\n                 );\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..81caa4db 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            } catch (ArithmeticException e) {\n+                if (text != null) {\n+                    e = new IllegalFieldValueException(\n+                            savedFields[i].iField.getType(),\n+                            text,\n+                            e.getMessage(),\n+                            e\n+                     );\n+                }\n+                throw new IllegalFieldValueException(\n+                        savedFields[i].iField.getType(),\n+                        e.getMessage(),\n+                        e\n+                 );\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(DateTimeFieldType,String,String,ArithmeticException)",
    "test_result": "ERROR"
}