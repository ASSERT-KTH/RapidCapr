{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          if (externFunctions.contains(functionName)) {\n            // Add a new reference for the external function\n            Node newRef = IR.name(functionName);\n            newRef.putProp(Node.ORIGINAL_NAME_PROP, functionName);\n            Node parent = node.getParent();\n            parent.replaceChild(node, newRef);\n            newRef.addChildToFront(node);\n            node = newRef;\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed, externFunctions);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..b648cee6 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,24 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          if (externFunctions.contains(functionName)) {\n+            // Add a new reference for the external function\n+            Node newRef = IR.name(functionName);\n+            newRef.putProp(Node.ORIGINAL_NAME_PROP, functionName);\n+            Node parent = node.getParent();\n+            parent.replaceChild(node, newRef);\n+            newRef.addChildToFront(node);\n+            node = newRef;\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed, externFunctions);\n       }\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}