{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double EPSILON = 1e-10;\n\n    double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n    double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n\n    double crossProductX;\n    double crossProductY;\n    double crossProductZ;\n\n    double v1Norm = v1.getNorm();\n    double v2Norm = v2.getNorm();\n\n    if ((v1Norm < EPSILON) || (v2Norm < EPSILON)) {\n        // If either vector has zero norm,\n        // cross product is zero vector.\n        crossProductX = 0.0;\n        crossProductY = 0.0;\n        crossProductZ = 0.0;\n    } else {\n        crossProductX = v1y * v2z - v1z * v2y;\n        crossProductY = v1z * v2x - v1x * v2z;\n        crossProductZ = v1x * v2y - v1y * v2x;\n    }\n\n    double crossProductNorm = Math.sqrt(crossProductX * crossProductX +\n                                        crossProductY * crossProductY +\n                                        crossProductZ * crossProductZ);\n\n    if (crossProductNorm / (v1Norm * v2Norm) < EPSILON) {\n        // the vectors are nearly parallel\n        // we should choose a vector that is orthogonal to v1\n        // and that is not too close to zero\n        double newVectorX, newVectorY, newVectorZ;\n        double absV1x = Math.abs(v1x);\n        double absV1y = Math.abs(v1y);\n        double absV1z = Math.abs(v1z);\n\n        if (absV1z > absV1x) {\n            if (absV1z > absV1y) {\n                newVectorX = -v1y;\n                newVectorY = v1x;\n                newVectorZ = 0.0;\n            } else {\n                newVectorX = 0.0;\n                newVectorY = -v1z;\n                newVectorZ = v1y;\n            }\n        } else if (absV1y > absV1x) {\n            newVectorX = v1z;\n            newVectorY = 0.0;\n            newVectorZ = -v1x;\n        } else {\n            newVectorX = -v1z;\n            newVectorY = v1y;\n            newVectorZ = 0.0;\n        }\n\n        double newVectorNorm = Math.sqrt(newVectorX * newVectorX +\n                                         newVectorY * newVectorY +\n                                         newVectorZ * newVectorZ);\n\n        if (newVectorNorm < EPSILON * v1Norm) {\n            // v1 is too close to the x, y or z axis: nearly zero vector, we can't normalize\n            // we just use a random vector that is not too close to zero\n            newVectorX = 0.25;\n            newVectorY = 0.5;\n            newVectorZ = 0.75;\n            newVectorNorm = Math.sqrt(newVectorX * newVectorX + newVectorY * newVectorY + newVectorZ * newVectorZ);\n        }\n\n        return new Vector3D(newVectorX / newVectorNorm, newVectorY / newVectorNorm, newVectorZ / newVectorNorm);\n\n    }\n\n    return new Vector3D(crossProductX / crossProductNorm, crossProductY / crossProductNorm, crossProductZ / crossProductNorm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..943c0a0a1 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,83 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double EPSILON = 1e-10;\n+\n+    double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n+    double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n+\n+    double crossProductX;\n+    double crossProductY;\n+    double crossProductZ;\n+\n+    double v1Norm = v1.getNorm();\n+    double v2Norm = v2.getNorm();\n+\n+    if ((v1Norm < EPSILON) || (v2Norm < EPSILON)) {\n+        // If either vector has zero norm,\n+        // cross product is zero vector.\n+        crossProductX = 0.0;\n+        crossProductY = 0.0;\n+        crossProductZ = 0.0;\n+    } else {\n+        crossProductX = v1y * v2z - v1z * v2y;\n+        crossProductY = v1z * v2x - v1x * v2z;\n+        crossProductZ = v1x * v2y - v1y * v2x;\n+    }\n \n+    double crossProductNorm = Math.sqrt(crossProductX * crossProductX +\n+                                        crossProductY * crossProductY +\n+                                        crossProductZ * crossProductZ);\n+\n+    if (crossProductNorm / (v1Norm * v2Norm) < EPSILON) {\n+        // the vectors are nearly parallel\n+        // we should choose a vector that is orthogonal to v1\n+        // and that is not too close to zero\n+        double newVectorX, newVectorY, newVectorZ;\n+        double absV1x = Math.abs(v1x);\n+        double absV1y = Math.abs(v1y);\n+        double absV1z = Math.abs(v1z);\n+\n+        if (absV1z > absV1x) {\n+            if (absV1z > absV1y) {\n+                newVectorX = -v1y;\n+                newVectorY = v1x;\n+                newVectorZ = 0.0;\n+            } else {\n+                newVectorX = 0.0;\n+                newVectorY = -v1z;\n+                newVectorZ = v1y;\n+            }\n+        } else if (absV1y > absV1x) {\n+            newVectorX = v1z;\n+            newVectorY = 0.0;\n+            newVectorZ = -v1x;\n+        } else {\n+            newVectorX = -v1z;\n+            newVectorY = v1y;\n+            newVectorZ = 0.0;\n+        }\n+\n+        double newVectorNorm = Math.sqrt(newVectorX * newVectorX +\n+                                         newVectorY * newVectorY +\n+                                         newVectorZ * newVectorZ);\n+\n+        if (newVectorNorm < EPSILON * v1Norm) {\n+            // v1 is too close to the x, y or z axis: nearly zero vector, we can't normalize\n+            // we just use a random vector that is not too close to zero\n+            newVectorX = 0.25;\n+            newVectorY = 0.5;\n+            newVectorZ = 0.75;\n+            newVectorNorm = Math.sqrt(newVectorX * newVectorX + newVectorY * newVectorY + newVectorZ * newVectorZ);\n+        }\n+\n+        return new Vector3D(newVectorX / newVectorNorm, newVectorY / newVectorNorm, newVectorZ / newVectorNorm);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    }\n \n-  }\n+    return new Vector3D(crossProductX / crossProductNorm, crossProductY / crossProductNorm, crossProductZ / crossProductNorm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28603877677367767>",
    "test_result": "FAIL"
}