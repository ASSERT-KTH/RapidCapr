{
    "patch": "  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node arg = argList.getFirstChild();\n    Node lastReferencedArg = arg;\n    while (arg != null) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(arg);\n\n        // If there were any referenced arguments before this one. Then the last\n        // referenced argument should be set as last argument.\n        if (lastReferencedArg.getNext() != arg) {\n          argList.addChildAfter(\n              lastReferencedArg.detachFromParent().srcref(argList), arg);\n        }\n\n        compiler.reportCodeChange();\n      } else {\n        lastReferencedArg = arg;\n      }\n      arg = arg.getNext();\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..33d91161 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node arg = argList.getFirstChild();\n+    Node lastReferencedArg = arg;\n+    while (arg != null) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(arg);\n+\n+        // If there were any referenced arguments before this one. Then the last\n+        // referenced argument should be set as last argument.\n+        if (lastReferencedArg.getNext() != arg) {\n+          argList.addChildAfter(\n+              lastReferencedArg.detachFromParent().srcref(argList), arg);\n+        }\n+\n+        compiler.reportCodeChange();\n+      } else {\n+        lastReferencedArg = arg;\n+      }\n+      arg = arg.getNext();\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}