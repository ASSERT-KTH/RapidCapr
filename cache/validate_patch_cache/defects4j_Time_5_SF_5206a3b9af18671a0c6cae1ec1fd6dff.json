{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    long millis = getMillis();\n    millis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    millis += getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n\n    int inputYears = 0;\n    int inputMonths = 0;\n    int inputDays = getDays();\n\n    // Add the weeks to inputDays if the period type contains weeks\n    if (type != null && type.getIndexedField(PeriodType.WEEK_INDEX) != null) {\n        inputDays += getWeeks() * 7;\n    }\n\n    // Split remaining period fields into years and months\n    if (getMonths() != 0 || inputDays > 30) {\n        inputYears = getMonths() / 12;\n        inputMonths = getMonths() % 12;\n        inputDays -= inputMonths * 30;\n    }\n    inputYears += getYears();\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    result = result.withYears(inputYears);\n    result = result.withMonths(inputMonths);\n    result = result.withDays(inputDays);\n    return result.normalizedStandard(type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5a2f8a5a 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,36 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    long millis = getMillis();\n+    millis += getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+    millis += getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+    millis += getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+    millis += getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+    millis += getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    int inputYears = 0;\n+    int inputMonths = 0;\n+    int inputDays = getDays();\n+\n+    // Add the weeks to inputDays if the period type contains weeks\n+    if (type != null && type.getIndexedField(PeriodType.WEEK_INDEX) != null) {\n+        inputDays += getWeeks() * 7;\n+    }\n+\n+    // Split remaining period fields into years and months\n+    if (getMonths() != 0 || inputDays > 30) {\n+        inputYears = getMonths() / 12;\n+        inputMonths = getMonths() % 12;\n+        inputDays -= inputMonths * 30;\n+    }\n+    inputYears += getYears();\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    result = result.withYears(inputYears);\n+    result = result.withMonths(inputMonths);\n+    result = result.withDays(inputDays);\n+    return result.normalizedStandard(type);\n+}\n \n }",
    "result_reason": "error: method getIndexedField in class PeriodType cannot be applied to given types;",
    "test_result": "ERROR"
}