{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    StringBuilder eraRegex = null;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '?':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n                break;\n            case 'G':\n                eraRegex = handleEraIndicator(value, i, eraRegex);\n                i += eraRegex.charAt(eraRegex.length() - 1) - '0';\n                regex.append(eraRegex.substring(0, eraRegex.length() - 1));\n                eraRegex = null;\n                break;\n            default:\n                regex.append(c);\n        }\n    }\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n    if (eraRegex != null) {\n        regex.append(eraRegex);\n    }\n    return regex;\n}\n\nprivate static StringBuilder handleEraIndicator(String value, int pos, StringBuilder eraRegex) {\n    int eraLength = 1;\n    char nextChar = (pos + 1 < value.length()) ? value.charAt(pos + 1) : '\\0';\n    switch (nextChar) {\n        case 'G':\n            eraLength = 4;\n            break;\n        case 'y':\n        case 'M':\n        case 'd':\n        case 'h':\n        case 'H':\n        case 'm':\n        case 's':\n            eraLength = 2;\n            break;\n        default:\n            eraLength = 1;\n    }\n    if (eraRegex == null) {\n        eraRegex = new StringBuilder();\n        eraRegex.append(\"(\");\n    }\n    String eraPattern = getEraPattern(nextChar);\n    if (eraPattern != null) {\n        eraRegex.append(eraPattern);\n    } else {\n        eraRegex.append(\".\");\n    }\n    eraRegex.append(\")\");\n    eraRegex.append(\"{\" + eraLength + \"}\");\n    return eraRegex;\n}\n\nprivate static String getEraPattern(char nextChar) {\n    String pattern = null;\n    switch (nextChar) {\n        case 'G':\n            pattern = \"(AD|BC)\";\n            break;\n        case 'y':\n        case 'M':\n        case 'd':\n            pattern = \"\\\\p{Lu}\\\\p{Ll}+\";\n            break;\n        case 'h':\n        case 'H':\n        case 'm':\n        case 's':\n            pattern = \"\\\\d+\";\n            break;\n    }\n    return pattern;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..56e8f280 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,28 +300,28 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    StringBuilder eraRegex = null;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n-            case '?':\n             case '[':\n             case ']':\n             case '(':\n@@ -330,17 +330,87 @@ public class FastDateParser implements DateParser, Serializable {\n             case '}':\n             case '\\\\':\n             case '|':\n+            case '?':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                break;\n+            case 'G':\n+                eraRegex = handleEraIndicator(value, i, eraRegex);\n+                i += eraRegex.charAt(eraRegex.length() - 1) - '0';\n+                regex.append(eraRegex.substring(0, eraRegex.length() - 1));\n+                eraRegex = null;\n+                break;\n+            default:\n+                regex.append(c);\n         }\n-        return regex;\n     }\n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+    if (eraRegex != null) {\n+        regex.append(eraRegex);\n+    }\n+    return regex;\n+}\n+\n+private static StringBuilder handleEraIndicator(String value, int pos, StringBuilder eraRegex) {\n+    int eraLength = 1;\n+    char nextChar = (pos + 1 < value.length()) ? value.charAt(pos + 1) : '\\0';\n+    switch (nextChar) {\n+        case 'G':\n+            eraLength = 4;\n+            break;\n+        case 'y':\n+        case 'M':\n+        case 'd':\n+        case 'h':\n+        case 'H':\n+        case 'm':\n+        case 's':\n+            eraLength = 2;\n+            break;\n+        default:\n+            eraLength = 1;\n+    }\n+    if (eraRegex == null) {\n+        eraRegex = new StringBuilder();\n+        eraRegex.append(\"(\");\n+    }\n+    String eraPattern = getEraPattern(nextChar);\n+    if (eraPattern != null) {\n+        eraRegex.append(eraPattern);\n+    } else {\n+        eraRegex.append(\".\");\n+    }\n+    eraRegex.append(\")\");\n+    eraRegex.append(\"{\" + eraLength + \"}\");\n+    return eraRegex;\n+}\n+\n+private static String getEraPattern(char nextChar) {\n+    String pattern = null;\n+    switch (nextChar) {\n+        case 'G':\n+            pattern = \"(AD|BC)\";\n+            break;\n+        case 'y':\n+        case 'M':\n+        case 'd':\n+            pattern = \"\\\\p{Lu}\\\\p{Ll}+\";\n+            break;\n+        case 'h':\n+        case 'H':\n+        case 'm':\n+        case 's':\n+            pattern = \"\\\\d+\";\n+            break;\n+    }\n+    return pattern;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}