{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n\n    boolean insideQuotes = false;\n    boolean wasWhite = false;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n\n        if (c == '\\'' && !insideQuotes && unquote) {\n            //start of a quote\n            insideQuotes = true;\n            continue;\n        }\n\n        if (insideQuotes) {\n            //c is inside quotes\n            if (c == '\\'' && i + 1 < value.length() && value.charAt(i + 1) == '\\'' && unquote) {\n                //escaped quote, append both\n                regex.append(c).append(c);\n                i++;\n            } else if (c == '\\'' && unquote) {\n                //end of quoted string\n                insideQuotes = false;\n            }\n        } else {\n            //c is not inside quotes\n            if (Character.isWhitespace(c)) {\n                if (!wasWhite) {\n                    wasWhite = true;\n                    regex.append(\"\\\\s*\");\n                }\n                continue;\n            }\n            wasWhite = false;\n\n            if (c == '?' || c == '[' || c == ']' || c == '(' || c == ')' || c == '{' || c == '}' || c == '|' || c == '*' || c == '+' || c == '^' || c == '$' || c == '.') {\n                regex.append('\\\\');\n            } else if (c == '\\\\' && (i + 1 == value.length() || value.charAt(i + 1) != 'Q')) {\n                //escape backslashes outside of quoted strings\n                regex.append('\\\\');\n            } else if (c == '\\\\' && i + 1 < value.length() && value.charAt(i + 1) == 'Q' && unquote) {\n                //start of quoted string\n                insideQuotes = true;\n            }\n\n            regex.append(c);\n        }\n\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..f14c35a8 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,59 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+\n+    boolean insideQuotes = false;\n+    boolean wasWhite = false;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+\n+        if (c == '\\'' && !insideQuotes && unquote) {\n+            //start of a quote\n+            insideQuotes = true;\n+            continue;\n+        }\n+\n+        if (insideQuotes) {\n+            //c is inside quotes\n+            if (c == '\\'' && i + 1 < value.length() && value.charAt(i + 1) == '\\'' && unquote) {\n+                //escaped quote, append both\n+                regex.append(c).append(c);\n+                i++;\n+            } else if (c == '\\'' && unquote) {\n+                //end of quoted string\n+                insideQuotes = false;\n+            }\n+        } else {\n+            //c is not inside quotes\n+            if (Character.isWhitespace(c)) {\n+                if (!wasWhite) {\n+                    wasWhite = true;\n+                    regex.append(\"\\\\s*\");\n                 }\n                 continue;\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n+            wasWhite = false;\n+\n+            if (c == '?' || c == '[' || c == ']' || c == '(' || c == ')' || c == '{' || c == '}' || c == '|' || c == '*' || c == '+' || c == '^' || c == '$' || c == '.') {\n                 regex.append('\\\\');\n+            } else if (c == '\\\\' && (i + 1 == value.length() || value.charAt(i + 1) != 'Q')) {\n+                //escape backslashes outside of quoted strings\n+                regex.append('\\\\');\n+            } else if (c == '\\\\' && i + 1 < value.length() && value.charAt(i + 1) == 'Q' && unquote) {\n+                //start of quoted string\n+                insideQuotes = true;\n             }\n+\n             regex.append(c);\n         }\n-        return regex;\n+\n     }\n \n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}