{
    "patch": "      // be able to have a @this annotation associated with them.\n      // e.g., var a = function() { }; or\n      // function a() {} or\n      // a.x = function() {}; or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!NodeUtil.isFunctionBlock(n) &&\n          !(NodeUtil.isStatement(parent) &&\n            (pType == Token.BLOCK || pType == Token.SCRIPT)) &&\n          !(\n            (pType == Token.ASSIGN ||\n             pType == Token.VAR ||\n             pType == Token.LET ||\n             pType == Token.CONST) &&\n            NodeUtil.isStatement(n))) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (isLendToPrototype(parent)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isLendToPrototype(Node parent) {\n    if (!isPrototypePropertyDeclaration(parent)) {\n      return false;\n    }\n    Node rhs = parent.getLastChild();\n    if (rhs == null || !rhs.isFunction()) {\n      return false;\n    }\n    // Don't traverse functions that are getting lent to a prototype.\n    return isFunctionLendToPrototype(rhs);\n  }\n\n  private boolean isFunctionLendToPrototype(Node function) {\n    Node last = function.getLastChild();\n    if (last == null || !last.isGetProp()) {\n      return false;\n    }\n    // If a function has the name 'constructor', it's not getting lent\n    // to the prototype.\n    if (\"constructor\".equals(last.getLastChild().getString())) {\n      return false;\n    }\n    Node ll = last.getFirstChild();\n    return ll != null\n        && ll.isName()\n        && \"prototype\".equals(ll.getString())\n        && isPrototypePropertyDeclaration(last.getParent());\n  }\n\n  private boolean isPrototypePropertyDeclaration(Node n) {\n    if (n == null || !n.isAssign() || !n.getFirstChild().isGetProp()) {\n      return false;\n    }\n    Node getProp = n.getFirstChild();\n    return getProp.getNext() != null\n        && getProp.getNext().isString()\n        && \"prototype\".equals(getProp.getLastChild().getString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0a95b405 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,39 +79,28 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n+      // be able to have a @this annotation associated with them.\n+      // e.g., var a = function() { }; or\n+      // function a() {} or\n+      // a.x = function() {}; or\n       // var a = {x: function() {}};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      if (!NodeUtil.isFunctionBlock(n) &&\n+          !(NodeUtil.isStatement(parent) &&\n+            (pType == Token.BLOCK || pType == Token.SCRIPT)) &&\n+          !(\n+            (pType == Token.ASSIGN ||\n+             pType == Token.VAR ||\n+             pType == Token.LET ||\n+             pType == Token.CONST) &&\n+            NodeUtil.isStatement(n))) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (isLendToPrototype(parent)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -145,6 +134,44 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  private boolean isLendToPrototype(Node parent) {\n+    if (!isPrototypePropertyDeclaration(parent)) {\n+      return false;\n+    }\n+    Node rhs = parent.getLastChild();\n+    if (rhs == null || !rhs.isFunction()) {\n+      return false;\n+    }\n+    // Don't traverse functions that are getting lent to a prototype.\n+    return isFunctionLendToPrototype(rhs);\n+  }\n+\n+  private boolean isFunctionLendToPrototype(Node function) {\n+    Node last = function.getLastChild();\n+    if (last == null || !last.isGetProp()) {\n+      return false;\n+    }\n+    // If a function has the name 'constructor', it's not getting lent\n+    // to the prototype.\n+    if (\"constructor\".equals(last.getLastChild().getString())) {\n+      return false;\n+    }\n+    Node ll = last.getFirstChild();\n+    return ll != null\n+        && ll.isName()\n+        && \"prototype\".equals(ll.getString())\n+        && isPrototypePropertyDeclaration(last.getParent());\n+  }\n+\n+  private boolean isPrototypePropertyDeclaration(Node n) {\n+    if (n == null || !n.isAssign() || !n.getFirstChild().isGetProp()) {\n+      return false;\n+    }\n+    Node getProp = n.getFirstChild();\n+    return getProp.getNext() != null\n+        && getProp.getNext().isString()\n+        && \"prototype\".equals(getProp.getLastChild().getString());\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}