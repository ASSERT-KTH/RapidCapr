{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isLiteralName(left, \"join\") || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  final Node firstArg = left.getNext();\n  if (firstArg == null) {\n    return;\n  }\n  int argc = 1;\n  final List<Node> arguments = new ArrayList<>();\n  arguments.add(firstArg);\n  for (Node arg = firstArg.getNext(); arg != null; arg = arg.getNext()) {\n    if (arg.isEmpty()) {\n      continue;\n    }\n    if (!NodeUtil.isImmutableValue(arg)) {\n      return;\n    }\n    argc++;\n    arguments.add(arg);\n  }\n\n  final Node stringLiteralArg = argc == 1 ? arguments.get(0) : null;\n  final String stringValue = NodeUtil.getStringValue(right);\n  if (stringLiteralArg != null) {\n    String stringJoinValue =\n        NodeUtil.getStringValue(stringLiteralArg);\n    if (stringJoinValue == null) {\n      return;\n    }\n    try {\n      final String foldedValue = String.join(stringJoinValue, stringValue, arguments);\n      if (foldedValue.length() < stringLiteralArg.getLength()) {\n        Node foldedNode = IR.string(foldedValue);\n        parent.replaceChild(n, foldedNode);\n        reportCodeChange(t);\n      }\n    } catch (IllegalArgumentException e) {\n      // Ignored, folded string is larger than unoptimized.\n    }\n  } else {\n    // If left is not an array's join method, create a new method call node which is.\n    final Node newJoinNode = IR.call(IR.getprop(IR.arraylit(), IR.string(\"join\")), left.cloneTree(), right.cloneTree());\n    parent.replaceChild(n, newJoinNode);\n    reportCodeChange(t);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..cac9bb35 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,54 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isLiteralName(left, \"join\") || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n+\n+  final Node firstArg = left.getNext();\n+  if (firstArg == null) {\n+    return;\n+  }\n+  int argc = 1;\n+  final List<Node> arguments = new ArrayList<>();\n+  arguments.add(firstArg);\n+  for (Node arg = firstArg.getNext(); arg != null; arg = arg.getNext()) {\n+    if (arg.isEmpty()) {\n+      continue;\n+    }\n+    if (!NodeUtil.isImmutableValue(arg)) {\n       return;\n     }\n+    argc++;\n+    arguments.add(arg);\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+  final Node stringLiteralArg = argc == 1 ? arguments.get(0) : null;\n+  final String stringValue = NodeUtil.getStringValue(right);\n+  if (stringLiteralArg != null) {\n+    String stringJoinValue =\n+        NodeUtil.getStringValue(stringLiteralArg);\n+    if (stringJoinValue == null) {\n       return;\n     }\n-\n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+    try {\n+      final String foldedValue = String.join(stringJoinValue, stringValue, arguments);\n+      if (foldedValue.length() < stringLiteralArg.getLength()) {\n+        Node foldedNode = IR.string(foldedValue);\n+        parent.replaceChild(n, foldedNode);\n+        reportCodeChange(t);\n       }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n-\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+    } catch (IllegalArgumentException e) {\n+      // Ignored, folded string is larger than unoptimized.\n+    }\n+  } else {\n+    // If left is not an array's join method, create a new method call node which is.\n+    final Node newJoinNode = IR.call(IR.getprop(IR.arraylit(), IR.string(\"join\")), left.cloneTree(), right.cloneTree());\n+    parent.replaceChild(n, newJoinNode);\n+    reportCodeChange(t);\n   }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}