{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long instantBefore = instantAdjusted - 1;\n    long instantAfter = instantAdjusted + 1;\n\n    int offsetBefore = getOffset(instantBefore);\n    int offsetAfter = getOffset(instantAfter);\n\n    if (offsetBefore == offsetAfter) {\n        return offsetBefore;\n    }\n\n    boolean isPositiveTransition = offsetLocal > offsetAdjusted;\n\n    if (isPositiveTransition) {\n        long nextTransitionTime = nextTransition(instantAdjusted);\n\n        if (nextTransitionTime == instantLocal - offsetLocal) {\n            return offsetLocal;\n        } else if (offsetAfter == offsetLocal) {\n            return offsetLocal;\n        } else {\n            return offsetAfter;\n        }\n    } else {\n        long prevTransitionTime = previousTransition(instantAdjusted);\n\n        if (prevTransitionTime == instantLocal - offsetAdjusted) {\n            return offsetAdjusted;\n        } else if (offsetBefore == offsetAdjusted) {\n            return offsetAdjusted;\n        } else {\n            return offsetBefore;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..85b98afd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long instantBefore = instantAdjusted - 1;\n+    long instantAfter = instantAdjusted + 1;\n+\n+    int offsetBefore = getOffset(instantBefore);\n+    int offsetAfter = getOffset(instantAfter);\n+\n+    if (offsetBefore == offsetAfter) {\n+        return offsetBefore;\n+    }\n+\n+    boolean isPositiveTransition = offsetLocal > offsetAdjusted;\n+\n+    if (isPositiveTransition) {\n+        long nextTransitionTime = nextTransition(instantAdjusted);\n+\n+        if (nextTransitionTime == instantLocal - offsetLocal) {\n+            return offsetLocal;\n+        } else if (offsetAfter == offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAfter;\n+        }\n+    } else {\n+        long prevTransitionTime = previousTransition(instantAdjusted);\n+\n+        if (prevTransitionTime == instantLocal - offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else if (offsetBefore == offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            return offsetBefore;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}