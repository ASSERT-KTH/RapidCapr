{
    "patch": "private String getRemainingJSDocLine() {\n    if (stream == null) {\n        return null;\n    }\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        return null;\n    }\n    return result.trim();\n}\n\n// ...\n\ntry {\n    jsdocParser.parse();\n} catch (RuntimeException e) {\n    // handle exceptions as needed\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..7661e136 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,24 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    if (stream == null) {\n+        return null;\n+    }\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        return null;\n+    }\n+    return result.trim();\n+}\n+\n+// ...\n+\n+try {\n+    jsdocParser.parse();\n+} catch (RuntimeException e) {\n+    // handle exceptions as needed\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}