{
    "patch": "        int remainingIndex = index;\n        for (int i = 0; i < last; i++) {\n            final int offset = uniCounterOffset[i];\n            int idx = remainingIndex / offset;\n            indices[i] = idx;\n            remainingIndex = remainingIndex % offset;\n        }\n        indices[last - 1] += remainingIndex;\n        if (indices[last - 1] >= uniCounterOffset[last - 1]) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..d18ceccf3 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,17 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int remainingIndex = index;\n+        for (int i = 0; i < last; i++) {\n+            final int offset = uniCounterOffset[i];\n+            int idx = remainingIndex / offset;\n+            indices[i] = idx;\n+            remainingIndex = remainingIndex % offset;\n+        }\n+        indices[last - 1] += remainingIndex;\n+        if (indices[last - 1] >= uniCounterOffset[last - 1]) {\n+            throw new OutOfRangeException(index, 0, totalSize);\n         }\n-        --idx;\n-        indices[last] = idx;\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][1] expected:<0> but was:<1>",
    "test_result": "FAIL"
}