{
    "patch": "    public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) throws MathRuntimeException {\n        // norms computation\n        double u1u1 = u1.getNormSq();\n        double u2u2 = u2.getNormSq();\n        double v1v1 = v1.getNormSq();\n        double v2v2 = v2.getNormSq();\n\n        if (Precision.equals(u1u1, 0.0, EPSILON) ||\n                Precision.equals(u2u2, 0.0, EPSILON) ||\n                Precision.equals(v1v1, 0.0, EPSILON) ||\n                Precision.equals(v2v2, 0.0, EPSILON)) {\n            throw new MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n        }\n\n        // normalize v1 in order to have (v1'|v1') = (u1|u1)\n        v1 = v1.scalarMultiply( FastMath.sqrt(u1u1 / v1v1));\n\n        // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n        double u1u2   = u1.dotProduct(u2);\n        double v2v1   = v2.dotProduct(v1);\n        double v2v2   = v2.dotProduct(v2);\n        double coeffU = u1u2 / u1u1;\n        double coeffV = v2v1 / u1u1;\n        double beta   = (u2u2 - u1u2 * coeffU) / (v2v2 - coeffV * v2v1);\n        double alpha  = (u1u2 - beta * v2v1) / u1u1;\n\n        // preliminary computation\n        Vector3D u3 = u1.crossProduct(u2);\n        Vector3D v3 = v1.crossProduct(v2);\n        double kNorm = v3.getNorm();\n        if (kNorm < EPSILON) {\n            // the (q1, q2, q3) vector is aligned with everything\n            // this is really the identity rotation\n            q0 = 1.0;\n            q1 = 0.0;\n            q2 = 0.0;\n            q3 = 0.0;\n            return;\n        }\n        Vector3D k = v3.scalarMultiply(1.0 / kNorm);\n\n        // computation of q0\n        double s = (1 + k.dotProduct(u3)) / 2.0;\n        if (s < EPSILON) {\n            q0 = 0.0;\n            k = u1.orthogonal();\n            s = (1 + k.dotProduct(u3)) / 2.0;\n            if (s < EPSILON) {\n                k = u2.orthogonal();\n                s = (1 + k.dotProduct(u3)) / 2.0;\n                if (s < EPSILON) {\n                    throw new MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_AXIS_PAIR,\n                            u1.toString(), u2.toString());\n                }\n            }\n        }\n        q0 = FastMath.sqrt(s);\n\n        // computation of quaternion norm\n        double qnorm = 1.0 / FastMath.sqrt(u1u1 + u2u2 + q0 * q0 * kNorm);\n\n        // fill the quaternion\n        q1 = qnorm * u2.crossProduct(k).dotProduct(v2.scalarMultiply(alpha).add(v1.scalarMultiply(beta)));\n        q2 = qnorm * k.dotProduct(u1.crossProduct(v2.scalarMultiply(alpha).add(v1.scalarMultiply(beta))));\n        q3 = qnorm * k.dotProduct(u2.crossProduct(v1).add(u1.crossProduct(v2))).getReal();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..62649d1cc 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,71 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n-\n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n-      }\n+    public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) throws MathRuntimeException {\n+        // norms computation\n+        double u1u1 = u1.getNormSq();\n+        double u2u2 = u2.getNormSq();\n+        double v1v1 = v1.getNormSq();\n+        double v2v2 = v2.getNormSq();\n+\n+        if (Precision.equals(u1u1, 0.0, EPSILON) ||\n+                Precision.equals(u2u2, 0.0, EPSILON) ||\n+                Precision.equals(v1v1, 0.0, EPSILON) ||\n+                Precision.equals(v2v2, 0.0, EPSILON)) {\n+            throw new MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+        }\n \n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n+        // normalize v1 in order to have (v1'|v1') = (u1|u1)\n+        v1 = v1.scalarMultiply( FastMath.sqrt(u1u1 / v1v1));\n+\n+        // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+        double u1u2   = u1.dotProduct(u2);\n+        double v2v1   = v2.dotProduct(v1);\n+        double v2v2   = v2.dotProduct(v2);\n+        double coeffU = u1u2 / u1u1;\n+        double coeffV = v2v1 / u1u1;\n+        double beta   = (u2u2 - u1u2 * coeffU) / (v2v2 - coeffV * v2v1);\n+        double alpha  = (u1u2 - beta * v2v1) / u1u1;\n+\n+        // preliminary computation\n+        Vector3D u3 = u1.crossProduct(u2);\n+        Vector3D v3 = v1.crossProduct(v2);\n+        double kNorm = v3.getNorm();\n+        if (kNorm < EPSILON) {\n+            // the (q1, q2, q3) vector is aligned with everything\n+            // this is really the identity rotation\n+            q0 = 1.0;\n+            q1 = 0.0;\n+            q2 = 0.0;\n+            q3 = 0.0;\n+            return;\n+        }\n+        Vector3D k = v3.scalarMultiply(1.0 / kNorm);\n+\n+        // computation of q0\n+        double s = (1 + k.dotProduct(u3)) / 2.0;\n+        if (s < EPSILON) {\n+            q0 = 0.0;\n+            k = u1.orthogonal();\n+            s = (1 + k.dotProduct(u3)) / 2.0;\n+            if (s < EPSILON) {\n+                k = u2.orthogonal();\n+                s = (1 + k.dotProduct(u3)) / 2.0;\n+                if (s < EPSILON) {\n+                    throw new MathRuntimeException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_AXIS_PAIR,\n+                            u1.toString(), u2.toString());\n+                }\n+            }\n+        }\n+        q0 = FastMath.sqrt(s);\n \n-    }\n+        // computation of quaternion norm\n+        double qnorm = 1.0 / FastMath.sqrt(u1u1 + u2u2 + q0 * q0 * kNorm);\n \n-  }\n+        // fill the quaternion\n+        q1 = qnorm * u2.crossProduct(k).dotProduct(v2.scalarMultiply(alpha).add(v1.scalarMultiply(beta)));\n+        q2 = qnorm * k.dotProduct(u1.crossProduct(v2.scalarMultiply(alpha).add(v1.scalarMultiply(beta))));\n+        q3 = qnorm * k.dotProduct(u2.crossProduct(v1).add(u1.crossProduct(v2))).getReal();\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}