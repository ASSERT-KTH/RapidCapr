{
    "patch": "attachLiteralTypes(n);\nif (NodeUtil.isFunctionDeclaration(n)) {\n  defineDeclaredFunction(n, parent);\n  return;\n}\n\nswitch (n.getType()) {\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.LP:\n    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n        Node firstChild = parent.getFirstChild();\n        if (firstChild != null && firstChild.getType() == Token.FUNCTION) {\n          defineDeclaredFunction(firstChild, grandparent);\n        }\n      } else if (grandparent == null) {\n        handleFunctionInputs(parent);\n      }\n    }\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..80eea0c1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,34 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+if (NodeUtil.isFunctionDeclaration(n)) {\n+  defineDeclaredFunction(n, parent);\n+  return;\n+}\n+\n+switch (n.getType()) {\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.LP:\n+    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+        Node firstChild = parent.getFirstChild();\n+        if (firstChild != null && firstChild.getType() == Token.FUNCTION) {\n+          defineDeclaredFunction(firstChild, grandparent);\n+        }\n+      } else if (grandparent == null) {\n+        handleFunctionInputs(parent);\n       }\n     }\n+    break;\n+}\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}