{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType.getLeastSupertype(getNativeType(UNKNOWN_TYPE));\n            if (!objType.hasProperty(prop)) {\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            } else {\n              JSType currPropType = objType.getPropertyType(prop);\n              if (!currPropType.isSubtype(propType)) {\n                warnings.add(\n                    JSError.make(\n                        n,\n                        TypeValidator.TYPE_MISMATCH_WARNING,\n                        prop,\n                        currPropType.toString(),\n                        propType.toString()));\n              }\n              objType.setPropertyType(prop, currPropType.getLeastSupertype(propType));\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..e9210fa3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1124,15 +1124,24 @@ class TypeInference\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n+            JSType typeToInfer = propType.getLeastSupertype(getNativeType(UNKNOWN_TYPE));\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n+            } else {\n+              JSType currPropType = objType.getPropertyType(prop);\n+              if (!currPropType.isSubtype(propType)) {\n+                warnings.add(\n+                    JSError.make(\n+                        n,\n+                        TypeValidator.TYPE_MISMATCH_WARNING,\n+                        prop,\n+                        currPropType.toString(),\n+                        propType.toString()));\n+              }\n+              objType.setPropertyType(prop, currPropType.getLeastSupertype(propType));\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}