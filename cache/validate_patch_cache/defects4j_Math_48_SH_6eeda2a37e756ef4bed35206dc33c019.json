{
    "patch": "                case REGULA_FALSI:\n                    // Detect early that algorithm is stuck, instead of waiting\n                    // for the maximum number of iterations to be exceeded.\n                    final double xDiff = FastMath.abs(x1 - x0);\n                    final double functionTol = ftol + rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0));\n                    if (xDiff < functionTol) {\n                        if (FastMath.abs(f1 * f0) < FastMath.ulp(1d)) {\n                            throw new ConvergenceException(LocalizedFormats.FAILED_FRACTION_CONVERGENCE,\n                                                           getMaximalIterationCount());\n                        } else {\n                            throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n                                                           getMaximalIterationCount());\n                        }\n                    }\n                    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..1a9967c92 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,21 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                case REGULA_FALSI:\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    final double xDiff = FastMath.abs(x1 - x0);\n+                    final double functionTol = ftol + rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0));\n+                    if (xDiff < functionTol) {\n+                        if (FastMath.abs(f1 * f0) < FastMath.ulp(1d)) {\n+                            throw new ConvergenceException(LocalizedFormats.FAILED_FRACTION_CONVERGENCE,\n+                                                           getMaximalIterationCount());\n+                        } else {\n+                            throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED,\n+                                                           getMaximalIterationCount());\n+                        }\n+                    }\n+                    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}