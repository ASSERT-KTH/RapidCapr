{
    "patch": "        if (sign >= 0) {\n            // check if either value is close to a zero\n            if (Math.abs(yMin) < FUNCTION_VALUE_ACCURACY) {\n                setResult(min, yMin, 0);\n                return min;\n            } else if (Math.abs(yMax) < FUNCTION_VALUE_ACCURACY) {\n                setResult(max, yMax, 0);\n                return max;\n            } else {\n                // neither value is close to zero and min and max do not bracket root.\n                // Use bisection instead.\n                ret = solveBisection(min, max, yMin, yMax);\n            }\n        } else {\n            // solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // either min or max is a root\n        }\n\n        return ret;\n    }\n\n    private double solveBisection(double min, double max, double yMin, double yMax) {\n        double ret = Double.NaN;\n        double xMid = Double.NaN;\n        double yMid = Double.NaN;\n        int i = 0;\n        while (i < maximalIterationCount) {\n            xMid = 0.5 * (min + max);\n            yMid = f.value(xMid);\n            if (Math.abs(yMid) < FUNCTION_VALUE_ACCURACY) {\n                ret = xMid;\n                setResult(ret, yMid, i);\n                break;\n            }\n            if (yMid * yMin > 0) {\n                min = xMid;\n                yMin = yMid;\n            } else {\n                max = xMid;\n                yMax = yMid;\n            }\n            ++i;\n        }\n        if (Double.isNaN(ret)) {\n            throw new MaxIterationsExceededException(maximalIterationCount);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..c52095fbc 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,26 +122,19 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n         if (sign >= 0) {\n             // check if either value is close to a zero\n+            if (Math.abs(yMin) < FUNCTION_VALUE_ACCURACY) {\n+                setResult(min, yMin, 0);\n+                return min;\n+            } else if (Math.abs(yMax) < FUNCTION_VALUE_ACCURACY) {\n+                setResult(max, yMax, 0);\n+                return max;\n+            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+                // Use bisection instead.\n+                ret = solveBisection(min, max, yMin, yMax);\n+            }\n         } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n@@ -150,6 +143,31 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n \n         return ret;\n     }\n+\n+    private double solveBisection(double min, double max, double yMin, double yMax) {\n+        double ret = Double.NaN;\n+        double xMid = Double.NaN;\n+        double yMid = Double.NaN;\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            xMid = 0.5 * (min + max);\n+            yMid = f.value(xMid);\n+            if (Math.abs(yMid) < FUNCTION_VALUE_ACCURACY) {\n+                ret = xMid;\n+                setResult(ret, yMid, i);\n+                break;\n+            }\n+            if (yMid * yMin > 0) {\n+                min = xMid;\n+                yMin = yMid;\n+            } else {\n+                max = xMid;\n+                yMax = yMid;\n+            }\n+            ++i;\n+        }\n+        if (Double.isNaN(ret)) {\n+            throw new MaxIterationsExceededException(maximalIterationCount);\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}