{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // Save the original simplex\n            final RealPointValuePair[] oldVertices = simplex;\n\n            // Compute the value of the reflected simplex at a reflection coefficient of 1.0\n            final RealPointValuePair best = oldVertices[0];\n            final RealPointValuePair reflectedVertex = evaluateNewSimplex(oldVertices, 1.0, comparator);\n\n            if (comparator.compare(reflectedVertex, best) < 0) {\n\n                // Compute the value of the reflected simplex at a reflection coefficient of rho\n                final RealPointValuePair expandedVertex = evaluateNewSimplex(oldVertices, rho, comparator);\n\n                // Use the expanded simplex if it is better than the reflected one, else use the reflected one\n                if (comparator.compare(expandedVertex, reflectedVertex) < 0) {\n                    simplex = replaceWorstPoint(oldVertices, expandedVertex, comparator);\n                } else {\n                    simplex = replaceWorstPoint(oldVertices, reflectedVertex, comparator);\n                }\n\n            } else {\n\n                // Calculate the contraction and do an outside contraction\n                final RealPointValuePair contractedVertex = evaluateNewSimplex(oldVertices, -gamma, comparator);\n\n                if (comparator.compare(contractedVertex, best) < 0) {\n\n                    simplex = replaceWorstPoint(oldVertices, contractedVertex, comparator);\n\n                } else {\n\n                    // If the contraction is not better than the best point, perform a shrink\n                    simplex = shrinkSimplex(oldVertices, comparator);\n\n                }\n            }\n\n            // Check convergence and iteration termination\n            final RealPointValuePair newBest = simplex[0];\n            boolean isConverged = true;\n\n            for (int i = 0; i < simplex.length; i++) {\n                isConverged &= FastMath.abs(newBest.getValue() - simplex[i].getValue()) <= getRelativeThreshold() * (FastMath.abs(newBest.getValue()) + getAbsoluteThreshold());\n            }\n\n            if (isConverged || getEvaluations() >= getMaxEvaluations()) {\n                return;\n            }\n        }\n    }\n\n    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] initialSimplex,\n            final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n\n        final RealPointValuePair best = initialSimplex[0];\n\n        RealPointValuePair[] newSimplex = new RealPointValuePair[initialSimplex.length];\n\n        for (int i = 1; i < initialSimplex.length; i++) {\n\n            final double[] x = initialSimplex[i].getPoint();\n            final double[] newX = new double[x.length];\n\n            for (int j = 0; j < x.length; j++) {\n                newX[j] = beta * x[j] + (1 - beta) * best.getPoint()[j];\n            }\n\n            final RealPointValuePair point = new RealPointValuePair(newX, computeObjectiveValue(newX));\n            newSimplex[i] = point;\n\n        }\n\n        return sortSimplex(newSimplex, comparator);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..c6ec60d82 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,87 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+import org.apache.commons.math3.util.FastMath;\n+\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+            // Save the original simplex\n+            final RealPointValuePair[] oldVertices = simplex;\n+\n+            // Compute the value of the reflected simplex at a reflection coefficient of 1.0\n+            final RealPointValuePair best = oldVertices[0];\n+            final RealPointValuePair reflectedVertex = evaluateNewSimplex(oldVertices, 1.0, comparator);\n+\n+            if (comparator.compare(reflectedVertex, best) < 0) {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+                // Compute the value of the reflected simplex at a reflection coefficient of rho\n+                final RealPointValuePair expandedVertex = evaluateNewSimplex(oldVertices, rho, comparator);\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                // Use the expanded simplex if it is better than the reflected one, else use the reflected one\n+                if (comparator.compare(expandedVertex, reflectedVertex) < 0) {\n+                    simplex = replaceWorstPoint(oldVertices, expandedVertex, comparator);\n+                } else {\n+                    simplex = replaceWorstPoint(oldVertices, reflectedVertex, comparator);\n                 }\n \n-                return;\n+            } else {\n+\n+                // Calculate the contraction and do an outside contraction\n+                final RealPointValuePair contractedVertex = evaluateNewSimplex(oldVertices, -gamma, comparator);\n+\n+                if (comparator.compare(contractedVertex, best) < 0) {\n \n+                    simplex = replaceWorstPoint(oldVertices, contractedVertex, comparator);\n+\n+                } else {\n+\n+                    // If the contraction is not better than the best point, perform a shrink\n+                    simplex = shrinkSimplex(oldVertices, comparator);\n+\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // Check convergence and iteration termination\n+            final RealPointValuePair newBest = simplex[0];\n+            boolean isConverged = true;\n+\n+            for (int i = 0; i < simplex.length; i++) {\n+                isConverged &= FastMath.abs(newBest.getValue() - simplex[i].getValue()) <= getRelativeThreshold() * (FastMath.abs(newBest.getValue()) + getAbsoluteThreshold());\n+            }\n \n-            // check convergence\n+            if (isConverged || getEvaluations() >= getMaxEvaluations()) {\n                 return;\n             }\n+        }\n+    }\n+\n+    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] initialSimplex,\n+            final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+\n+        final RealPointValuePair best = initialSimplex[0];\n+\n+        RealPointValuePair[] newSimplex = new RealPointValuePair[initialSimplex.length];\n+\n+        for (int i = 1; i < initialSimplex.length; i++) {\n+\n+            final double[] x = initialSimplex[i].getPoint();\n+            final double[] newX = new double[x.length];\n+\n+            for (int j = 0; j < x.length; j++) {\n+                newX[j] = beta * x[j] + (1 - beta) * best.getPoint()[j];\n+            }\n+\n+            final RealPointValuePair point = new RealPointValuePair(newX, computeObjectiveValue(newX));\n+            newSimplex[i] = point;\n \n         }\n \n+        return sortSimplex(newSimplex, comparator);\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}