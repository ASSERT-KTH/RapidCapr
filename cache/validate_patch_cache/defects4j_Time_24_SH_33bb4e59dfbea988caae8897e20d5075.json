{
    "patch": "            if (!resetFields) {\n                DurationField field = savedFields[i].iField.getDurationField();\n\n                if (field == null) {\n                    continue;\n                }\n                // When parsing, a DST transition can leave the time field incorrect.\n                // This protects against this.\n                long local = field.getType().getField(iChrono).getDurationType().getField(iChrono).set(millis, iZone.getOffsetFromLocal(millis));\n                if (savedFields[i].get(local) != savedFields[i].iValue) {\n                    if (!resetFields) {\n                        throw new IllegalFieldValueException(savedFields[i].iField.getType(), savedFields[i].iValue);\n                    }\n                    resetFields = false;\n                }\n            }\n            millis = savedFields[i].set(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..dc2edced 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (!resetFields) {\n+                DurationField field = savedFields[i].iField.getDurationField();\n+\n+                if (field == null) {\n+                    continue;\n+                }\n+                // When parsing, a DST transition can leave the time field incorrect.\n+                // This protects against this.\n+                long local = field.getType().getField(iChrono).getDurationType().getField(iChrono).set(millis, iZone.getOffsetFromLocal(millis));\n+                if (savedFields[i].get(local) != savedFields[i].iValue) {\n+                    if (!resetFields) {\n+                        throw new IllegalFieldValueException(savedFields[i].iField.getType(), savedFields[i].iValue);\n+                    }\n+                    resetFields = false;\n+                }\n+            }\n+            millis = savedFields[i].set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}