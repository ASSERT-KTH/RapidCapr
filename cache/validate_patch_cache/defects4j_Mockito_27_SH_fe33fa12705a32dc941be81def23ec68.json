{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nif (mock instanceof Factory) {\n    Callback[] callbacks = ((Factory) mock).getCallbacks();\n    if (callbacks == null) {\n        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n    } else {\n        boolean interceptorFound = false;\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                ((Factory) mock).setCallback(i, newFilter);\n                interceptorFound = true;\n                break;\n            }\n        }\n        if (!interceptorFound) {\n           List<Callback> newCallbacks = new ArrayList<>(Arrays.asList(callbacks));\n           newCallbacks.add(newFilter);\n           ((Factory) mock).setCallbacks(newCallbacks.toArray(new Callback[]{}));\n        }\n    }\n} else {\n    throw new RuntimeException(\"Mock object is not a Factory instance.\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ecd3fec46 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,34 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+if (mock instanceof Factory) {\n+    Callback[] callbacks = ((Factory) mock).getCallbacks();\n+    if (callbacks == null) {\n+        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+    } else {\n+        boolean interceptorFound = false;\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                ((Factory) mock).setCallback(i, newFilter);\n+                interceptorFound = true;\n+                break;\n+            }\n+        }\n+        if (!interceptorFound) {\n+           List<Callback> newCallbacks = new ArrayList<>(Arrays.asList(callbacks));\n+           newCallbacks.add(newFilter);\n+           ((Factory) mock).setCallbacks(newCallbacks.toArray(new Callback[]{}));\n+        }\n+    }\n+} else {\n+    throw new RuntimeException(\"Mock object is not a Factory instance.\");\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}