{
    "patch": "    attachLiteralTypes(n);\n\n    switch (parent.getType()) {\n      case Token.FUNCTION:\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      default:\n        if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n          handleFunctionInputs(parent);\n        } else if (n.getType() == Token.NAME) {\n          Var var = scope.getVar(n.getString());\n          maybeAddFunctionToNamespace(var);\n        } else if (n.getType() == Token.CALL && n.getFirstChild() != null) {\n          Node callee = n.getFirstChild();\n          if (callee.getType() == Token.NAME) {\n            Var var = scope.getVar(callee.getString());\n            maybeAddFunctionToNamespace(var);\n          } else if (callee.getType() == Token.GETPROP) {\n            Node getTarget = callee.getFirstChild();\n            if (getTarget.getType() == Token.NAME) {\n              Var var = scope.getVar(getTarget.getString());\n              maybeAddFunctionToNamespace(var);\n            }\n          }\n        }\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..17334fab 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+    attachLiteralTypes(n);\n+\n+    switch (parent.getType()) {\n+      case Token.FUNCTION:\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      default:\n+        if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+          handleFunctionInputs(parent);\n+        } else if (n.getType() == Token.NAME) {\n+          Var var = scope.getVar(n.getString());\n+          maybeAddFunctionToNamespace(var);\n+        } else if (n.getType() == Token.CALL && n.getFirstChild() != null) {\n+          Node callee = n.getFirstChild();\n+          if (callee.getType() == Token.NAME) {\n+            Var var = scope.getVar(callee.getString());\n+            maybeAddFunctionToNamespace(var);\n+          } else if (callee.getType() == Token.GETPROP) {\n+            Node getTarget = callee.getFirstChild();\n+            if (getTarget.getType() == Token.NAME) {\n+              Var var = scope.getVar(getTarget.getString());\n+              maybeAddFunctionToNamespace(var);\n+            }\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}