{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        return;\n    }\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (!(oldMockHandler instanceof MockHandler)) {\n        return;\n    }\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if(mock instanceof org.mockito.cglib.proxy.Factory) {\n        org.mockito.cglib.proxy.Factory factory = (org.mockito.cglib.proxy.Factory) mock;\n        for(int i = 0; i < factory.getCallbacks().length; i++) {\n            if(factory.getCallback(i) instanceof MethodInterceptorFilter) {\n                factory.setCallback(i, newFilter);\n                return;\n            }\n        }\n        factory.setCallback(0, newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4f4d20bcd 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        return;\n+    }\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (!(oldMockHandler instanceof MockHandler)) {\n+        return;\n+    }\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if(mock instanceof org.mockito.cglib.proxy.Factory) {\n+        org.mockito.cglib.proxy.Factory factory = (org.mockito.cglib.proxy.Factory) mock;\n+        for(int i = 0; i < factory.getCallbacks().length; i++) {\n+            if(factory.getCallback(i) instanceof MethodInterceptorFilter) {\n+                factory.setCallback(i, newFilter);\n+                return;\n+            }\n+        }\n+        factory.setCallback(0, newFilter);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "junit.framework.AssertionFailedError: Expected: <null> but was: 200",
    "test_result": "FAIL"
}