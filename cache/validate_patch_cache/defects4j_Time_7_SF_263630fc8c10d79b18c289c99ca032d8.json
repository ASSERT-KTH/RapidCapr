{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        if (bucket.restoreState(parseContext)) {\n            instantMillis = bucket.computeMillis(false, text);\n            chrono = bucket.getChronology();\n        } else {\n            instantMillis = bucket.computeMillis(true, text);\n            chrono = selectChronology(bucket.getChronology());\n        }\n        instant.setMillis(instantMillis);\n        if (bucket.getOffsetInteger() != null) {\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        \n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        \n        parseContext.setParsed(result, newPos);\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7f868b8e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -712,18 +712,27 @@ public class DateTimeFormatter {\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+        \n+        if (bucket.restoreState(parseContext)) {\n+            instantMillis = bucket.computeMillis(false, text);\n+            chrono = bucket.getChronology();\n+        } else {\n+            instantMillis = bucket.computeMillis(true, text);\n+            chrono = selectChronology(bucket.getChronology());\n+        }\n+        instant.setMillis(instantMillis);\n+        if (bucket.getOffsetInteger() != null) {\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n         instant.setChronology(chrono);\n+        \n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n+        \n+        parseContext.setParsed(result, newPos);\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}