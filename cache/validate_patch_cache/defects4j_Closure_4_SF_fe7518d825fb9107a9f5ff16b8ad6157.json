{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    \n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n    errorIfNamespace(t);\n    //checking for cycles after there is no resolution via registry. \n    //this is done to prevent the cycle detection during resolution via scope properties\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    // resolve type with registry failing that return reference to this\n    warnIfNamespace(t);\n    resolveViaProperties(t, enclosing);\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    // only one warning can be generated, so we return the first that was generated\n    if (getErrorCount() > 0) {\n      return getErrorType();\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }   ",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..87167a09 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,34 +182,39 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n+    \n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n+    errorIfNamespace(t);\n+    //checking for cycles after there is no resolution via registry. \n+    //this is done to prevent the cycle detection during resolution via scope properties\n+    if (detectImplicitPrototypeCycle()) {\n+      handleTypeCycle(t);\n+    }\n \n+    // resolve type with registry failing that return reference to this\n+    warnIfNamespace(t);\n     resolveViaProperties(t, enclosing);\n+\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    // only one warning can be generated, so we return the first that was generated\n+    if (getErrorCount() > 0) {\n+      return getErrorType();\n+    }\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n-  }\n+  }   \n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}