{
    "patch": "public void testGetProperty() throws Exception {\n    String key = \"test.key\";\n    String value = \"test.value\";\n    String defaultValue = \"default.value\";\n\n    // set the test property\n    System.setProperty(key, value);\n\n    // retrieve the property and ensure it matches\n    assertEquals(value, System.getProperty(key));\n\n    // retrieve the property with a default value and ensure it matches\n    assertEquals(value, System.getProperty(key, defaultValue));\n\n    // test a property that has not been set\n    assertNull(System.getProperty(\"nonexistent.key\"));\n\n    // test retrieving all properties\n    Properties props = System.getProperties();\n    assertNotNull(props);\n\n    // test getting a property that does not exist, should return null\n    assertNull(props.getProperty(\"nonexistent.key\"));\n\n    // test getting all properties\n    Enumeration<?> e = props.propertyNames();\n    assertNotNull(e);\n\n    // test that we can retrieve at least one property\n    assertTrue(e.hasMoreElements());\n\n    // test that there are no warnings\n    String[] warnings = this.getWarnings();\n    assertTrue(\"expected no warnings\", warnings.length == 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..bbfe74af 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,41 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetProperty() throws Exception {\n+    String key = \"test.key\";\n+    String value = \"test.value\";\n+    String defaultValue = \"default.value\";\n+\n+    // set the test property\n+    System.setProperty(key, value);\n+\n+    // retrieve the property and ensure it matches\n+    assertEquals(value, System.getProperty(key));\n+\n+    // retrieve the property with a default value and ensure it matches\n+    assertEquals(value, System.getProperty(key, defaultValue));\n+\n+    // test a property that has not been set\n+    assertNull(System.getProperty(\"nonexistent.key\"));\n+\n+    // test retrieving all properties\n+    Properties props = System.getProperties();\n+    assertNotNull(props);\n+\n+    // test getting a property that does not exist, should return null\n+    assertNull(props.getProperty(\"nonexistent.key\"));\n+\n+    // test getting all properties\n+    Enumeration<?> e = props.propertyNames();\n+    assertNotNull(e);\n+\n+    // test that we can retrieve at least one property\n+    assertTrue(e.hasMoreElements());\n+\n+    // test that there are no warnings\n+    String[] warnings = this.getWarnings();\n+    assertTrue(\"expected no warnings\", warnings.length == 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}