{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getColumnDimension();\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n\n    if (n <= 16) { // if small matrix, do the sqrt directly\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                sqrt.setEntry(i, j, Math.sqrt(m.getEntry(i,j)));\n            }\n        }\n    } else { // otherwise, use the matrix square root algorithm\n        RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n        double norm = m.getNorm();\n        RealMatrix scaled = m.scalarMultiply(1.0 / norm);\n\n        RealMatrix x = new LUDecomposition(scaled).getSolver().getInverse();\n        RealMatrix y = identity.scalarMultiply(Math.sqrt(norm));\n\n        for (int i = 0; i < 10; i++) { // 10 iterations should be enough\n            RealMatrix z = y.multiply(x);\n            x = z.add(identity).scalarMultiply(0.5);\n            y = z.add(scaled).scalarMultiply(0.5);\n        }\n\n        sqrt = y.multiply(new LUDecomposition(x).getSolver().getInverse());\n    }\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..280e666f4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getColumnDimension();\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(n, n);\n+\n+    if (n <= 16) { // if small matrix, do the sqrt directly\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                sqrt.setEntry(i, j, Math.sqrt(m.getEntry(i,j)));\n+            }\n+        }\n+    } else { // otherwise, use the matrix square root algorithm\n+        RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+        double norm = m.getNorm();\n+        RealMatrix scaled = m.scalarMultiply(1.0 / norm);\n+\n+        RealMatrix x = new LUDecomposition(scaled).getSolver().getInverse();\n+        RealMatrix y = identity.scalarMultiply(Math.sqrt(norm));\n+\n+        for (int i = 0; i < 10; i++) { // 10 iterations should be enough\n+            RealMatrix z = y.multiply(x);\n+            x = z.add(identity).scalarMultiply(0.5);\n+            y = z.add(scaled).scalarMultiply(0.5);\n+        }\n+\n+        sqrt = y.multiply(new LUDecomposition(x).getSolver().getInverse());\n     }\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}