{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for Gamma function!\");\n    }\n    double gammaValue = gamma(a);\n    double sum = 0.0;\n    int n = 0;\n    double term = Math.pow(x, a) * Math.exp(-x) / gammaValue;\n    while (term != 0.0 && Math.abs(term) > Math.abs(sum * 1E-15)) {\n        sum += term;\n        n++;\n        gammaValue *= (a + n);\n        term = Math.pow(x, a + n) * Math.exp(-x) / gammaValue;\n    }\n    return sum;\n}\n\npublic static double gamma(double z) {\n    if (z < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n    } else {\n        double result = 1.0;\n        while (z > 1.5) {\n            z -= 1.0;\n            result *= z;\n        }\n        return result * Math.sqrt(2.0 * Math.PI / Math.E) * Math.pow(z + 0.5, z - 0.5) * Math.exp(-(z + 0.5));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..356e3db9b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,35 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for Gamma function!\");\n+    }\n+    double gammaValue = gamma(a);\n+    double sum = 0.0;\n+    int n = 0;\n+    double term = Math.pow(x, a) * Math.exp(-x) / gammaValue;\n+    while (term != 0.0 && Math.abs(term) > Math.abs(sum * 1E-15)) {\n+        sum += term;\n+        n++;\n+        gammaValue *= (a + n);\n+        term = Math.pow(x, a + n) * Math.exp(-x) / gammaValue;\n+    }\n+    return sum;\n+}\n+\n+public static double gamma(double z) {\n+    if (z < 0.5) {\n+        return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n+    } else {\n+        double result = 1.0;\n+        while (z > 1.5) {\n+            z -= 1.0;\n+            result *= z;\n+        }\n+        return result * Math.sqrt(2.0 * Math.PI / Math.E) * Math.pow(z + 0.5, z - 0.5) * Math.exp(-(z + 0.5));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}