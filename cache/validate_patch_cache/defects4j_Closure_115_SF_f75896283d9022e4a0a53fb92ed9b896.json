{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // Get the function name and level\n    Node fName = NodeUtil.getFunctionNameNode(fnNode);\n    int fLevel = NodeUtil.getFunctionBody(fnNode).getDepth();\n\n    // Check if function has side effects\n    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(fnNode, compiler);\n\n    // Get the argument list nodes\n    Node cArg = callNode.getFirstChild().getNext();\n    Node fArg = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    while (cArg != null && fArg != null) {\n      // Check if named parameter has side effects or is evaluated multiple times\n      if (fArg.isName() && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      if (fArg.isName()\n          && NodeUtil.getNameReferenceCount(\n              NodeUtil.getFunctionBody(fnNode), fArg.getString())\n              > 1) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n      fArg = fArg.getNext();\n    }\n\n    // If there are excess arguments for the function call, then we can't inline\n    if (cArg != null) {\n      return CanInlineResult.NO;\n    }\n\n    // If function has side-effects, and the inlined return value is not used, then we cant inline\n    if (hasSideEffects\n        && !NodeUtil.mayHaveSideEffects(callNode.getParent())) {\n      return CanInlineResult.NO;\n    }\n\n    // Check function depth level.\n    int cFnLevel = NodeUtil.getFunctionBody(callNode).getDepth();\n    if (cFnLevel - 1 != fLevel) {\n      return CanInlineResult.NO;\n    }\n\n    // Check function names if present.\n    if (fName != null && !NodeUtil.isLValue(fName)) {\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..452c0374 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,62 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    // Get the function name and level\n+    Node fName = NodeUtil.getFunctionNameNode(fnNode);\n+    int fLevel = NodeUtil.getFunctionBody(fnNode).getDepth();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    // Check if function has side effects\n+    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(fnNode, compiler);\n+\n+    // Get the argument list nodes\n     Node cArg = callNode.getFirstChild().getNext();\n+    Node fArg = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    while (cArg != null && fArg != null) {\n+      // Check if named parameter has side effects or is evaluated multiple times\n+      if (fArg.isName() && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+      if (fArg.isName()\n+          && NodeUtil.getNameReferenceCount(\n+              NodeUtil.getFunctionBody(fnNode), fArg.getString())\n+              > 1) {\n+        return CanInlineResult.NO;\n       }\n+\n+      cArg = cArg.getNext();\n+      fArg = fArg.getNext();\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    // If there are excess arguments for the function call, then we can't inline\n+    if (cArg != null) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // If function has side-effects, and the inlined return value is not used, then we cant inline\n+    if (hasSideEffects\n+        && !NodeUtil.mayHaveSideEffects(callNode.getParent())) {\n+      return CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    // Check function depth level.\n+    int cFnLevel = NodeUtil.getFunctionBody(callNode).getDepth();\n+    if (cFnLevel - 1 != fLevel) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // Check function names if present.\n+    if (fName != null && !NodeUtil.isLValue(fName)) {\n+      return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}