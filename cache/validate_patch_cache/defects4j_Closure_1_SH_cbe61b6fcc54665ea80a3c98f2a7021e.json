{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    List<Node> toRemove = new ArrayList<>();\n    // Collect unreferenced parameters in a separate list to avoid modifying argList while iterating over it.\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        toRemove.add(arg);\n      } else if (toRemove.size() > 0) {\n        // Remove all unreferenced args collected so far.\n        for (Node argToRemove : toRemove) {\n          argList.removeChild(argToRemove);\n          compiler.reportCodeChange();\n        }\n        toRemove.clear();\n      }\n    }\n    // If there are unreferenced parameters still to be removed (i.e. at the end),\n    // remove them after iterating over the child nodes.\n    for (Node argToRemove : toRemove) {\n      argList.removeChild(argToRemove);\n      compiler.reportCodeChange();\n    }\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..48b68bba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    List<Node> toRemove = new ArrayList<>();\n+    // Collect unreferenced parameters in a separate list to avoid modifying argList while iterating over it.\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        toRemove.add(arg);\n+      } else if (toRemove.size() > 0) {\n+        // Remove all unreferenced args collected so far.\n+        for (Node argToRemove : toRemove) {\n+          argList.removeChild(argToRemove);\n+          compiler.reportCodeChange();\n+        }\n+        toRemove.clear();\n+      }\n+    }\n+    // If there are unreferenced parameters still to be removed (i.e. at the end),\n+    // remove them after iterating over the child nodes.\n+    for (Node argToRemove : toRemove) {\n+      argList.removeChild(argToRemove);\n+      compiler.reportCodeChange();\n+    }\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}