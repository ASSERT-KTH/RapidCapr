{
    "patch": "if (callNode.isOnlyModifiesArgumentsCall()) {\n    return true;\n}\n\nif (nameNode.getFirstChild() != null \n    && nameNode.getFirstChild().getType() == Token.NAME \n    && (nameNode.getFirstChild().getString().equals(\"Math\") \n        || nameNode.getFirstChild().getString().equals(\"console\")\n        || nameNode.getFirstChild().getString().equals(\"JSON\"))) {\n    return false;\n} else if (nameNode.getType() == Token.GETPROP) {\n    Node targetNode = nameNode.getFirstChild();\n    if (targetNode != null && targetNode.getType() == Token.NAME \n        && targetNode.getString().equals(\"Math\")) {\n        return false;\n    }\n    Node lastChild = nameNode.getLastChild();\n    if (lastChild.getType() == Token.STRING \n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lastChild.getString())) {\n        return false;\n    }\n    if (lastChild.getType() == Token.NAME && lastChild.getString().equals(\"now\")) {\n        if (targetNode != null && targetNode.getType() == Token.NAME \n            && targetNode.getString().equals(\"Date\")) {\n            return false;\n        }\n    }\n    if (lastChild.getType() == Token.NAME && lastChild.getString().equals(\"setTimeout\")) {\n        if (targetNode != null && targetNode.getType() == Token.NAME \n            && targetNode.getString().equals(\"window\")) {\n            return false;\n        }\n    }\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..ea4029d6 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,42 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+if (callNode.isOnlyModifiesArgumentsCall()) {\n+    return true;\n+}\n+\n+if (nameNode.getFirstChild() != null \n+    && nameNode.getFirstChild().getType() == Token.NAME \n+    && (nameNode.getFirstChild().getString().equals(\"Math\") \n+        || nameNode.getFirstChild().getString().equals(\"console\")\n+        || nameNode.getFirstChild().getString().equals(\"JSON\"))) {\n+    return false;\n+} else if (nameNode.getType() == Token.GETPROP) {\n+    Node targetNode = nameNode.getFirstChild();\n+    if (targetNode != null && targetNode.getType() == Token.NAME \n+        && targetNode.getString().equals(\"Math\")) {\n+        return false;\n+    }\n+    Node lastChild = nameNode.getLastChild();\n+    if (lastChild.getType() == Token.STRING \n+        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lastChild.getString())) {\n+        return false;\n+    }\n+    if (lastChild.getType() == Token.NAME && lastChild.getString().equals(\"now\")) {\n+        if (targetNode != null && targetNode.getType() == Token.NAME \n+            && targetNode.getString().equals(\"Date\")) {\n+            return false;\n+        }\n+    }\n+    if (lastChild.getType() == Token.NAME && lastChild.getString().equals(\"setTimeout\")) {\n+        if (targetNode != null && targetNode.getType() == Token.NAME \n+            && targetNode.getString().equals(\"window\")) {\n+            return false;\n+        }\n+    }\n+}\n+\n+return true;\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}