{
    "patch": "       if (block.isFunction) {\n         break;\n       } else if (block.isLoop) {\n         return false;\n       } else if (block.isConditional()) {\n         // This handles conditionals with multiple exit points, one of which is an\n         // assignment to this variable. For example:\n         // if (a.b) { var x = 1; } else { return; }\n         // a.b = 2;\n         block = block.getLastChild();\n         if (block != null && block.isBlock()) {\n           List<AstNode> statements = block.getChildren();\n           for (int i = statements.size() - 1; i >= 0; i--) {\n             AstNode statement = statements.get(i);\n             if (NodeUtil.mayEffectMutableState(statement)) {\n               return false;\n             }\n             if (NodeUtil.isExpressionOfAssignmentTo(statement, variableName)) {\n               return false;\n             }\n           }\n         }\n       }\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c52458ff 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,32 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+       if (block.isFunction) {\n+         break;\n+       } else if (block.isLoop) {\n+         return false;\n+       } else if (block.isConditional()) {\n+         // This handles conditionals with multiple exit points, one of which is an\n+         // assignment to this variable. For example:\n+         // if (a.b) { var x = 1; } else { return; }\n+         // a.b = 2;\n+         block = block.getLastChild();\n+         if (block != null && block.isBlock()) {\n+           List<AstNode> statements = block.getChildren();\n+           for (int i = statements.size() - 1; i >= 0; i--) {\n+             AstNode statement = statements.get(i);\n+             if (NodeUtil.mayEffectMutableState(statement)) {\n+               return false;\n+             }\n+             if (NodeUtil.isExpressionOfAssignmentTo(statement, variableName)) {\n+               return false;\n+             }\n+           }\n+         }\n+       }\n+      }\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}