{
    "patch": "import java.util.*;\n\npublic class MyClass {\n    public static Iterable<Integer> getEvenNumbers(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..6fe2afa85 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.*;\n+\n+public class MyClass {\n+    public static Iterable<Integer> getEvenNumbers(int n) {\n+        List<Integer> result = new ArrayList<>();\n+        for (int i = 0; i <= n; i++) {\n+            if (i % 2 == 0) {\n+                result.add(i);\n+            }\n+        }\n+        return result;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}