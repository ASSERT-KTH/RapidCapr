{
    "patch": "      if (lhs.getType() == Token.GETPROP &&\n          lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      // Don't traverse functions that are part of exported object property\n      // assignments i.e. exports.prop = ...\n      if (NodeUtil.isNameDeclaration(parent.getParent()) ||\n          (NodeUtil.isAssign(parent) &&\n           NodeUtil.isObjectLitKey(lhs, \"exports\"))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..50bd1387 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (lhs.getType() == Token.GETPROP &&\n+          lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are part of exported object property\n+      // assignments i.e. exports.prop = ...\n+      if (NodeUtil.isNameDeclaration(parent.getParent()) ||\n+          (NodeUtil.isAssign(parent) &&\n+           NodeUtil.isObjectLitKey(lhs, \"exports\"))) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}