{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double eps = Precision.EPSILON;\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double v1x = v1.getX();\n      final double v1y = v1.getY();\n      final double v1z = v1.getZ();\n      final double v2x = v2.getX();\n      final double v2y = v2.getY();\n      final double v2z = v2.getZ();\n\n      final double max1 = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n      final double max2 = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n      final double norm1 = Math.sqrt(v1x * v1x + v1y * v1y + v1z * v1z);\n      final double norm2 = Math.sqrt(v2x * v2x + v2y * v2y + v2z * v2z);\n      final double k = FastMath.ceil((Math.log(Math.max(max1 / norm1, max2 / norm2)) + eps) / FastMath.log(2.0d));\n      final double factor = FastMath.scalb(1.0d, -k);\n      final double[] v1n = {v1x * factor, v1y * factor, v1z * factor};\n      final double[] v2n = {v2x * factor, v2y * factor, v2z * factor};\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      final double dot1 = v1n[0] * v2n[0] + v1n[1] * v2n[1] + v1n[2] * v2n[2];\n      final double dot2 = v2n[0] * v2n[0] + v2n[1] * v2n[1] + v2n[2] * v2n[2];\n      final double rho = dot1 / dot2;\n\n      final double[] v3n = {v1n[0] - rho * v2n[0], v1n[1] - rho * v2n[1], v1n[2] - rho * v2n[2]};\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double x = v3n[1] * v2n[2] - v3n[2] * v2n[1];\n      final double y = v3n[2] * v2n[0] - v3n[0] * v2n[2];\n      final double z = v3n[0] * v2n[1] - v3n[1] * v2n[0];\n\n      if (k > 0) {\n          return new Vector3D(FastMath.scalb(x, (int) k),\n                  FastMath.scalb(y, (int) k),\n                  FastMath.scalb(z, (int) k));\n      }\n\n      return new Vector3D(x, y, z);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..560e7ea9e 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,49 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double eps = Precision.EPSILON;\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double v1x = v1.getX();\n+      final double v1y = v1.getY();\n+      final double v1z = v1.getZ();\n+      final double v2x = v2.getX();\n+      final double v2y = v2.getY();\n+      final double v2z = v2.getZ();\n+\n+      final double max1 = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n+      final double max2 = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n+      final double norm1 = Math.sqrt(v1x * v1x + v1y * v1y + v1z * v1z);\n+      final double norm2 = Math.sqrt(v2x * v2x + v2y * v2y + v2z * v2z);\n+      final double k = FastMath.ceil((Math.log(Math.max(max1 / norm1, max2 / norm2)) + eps) / FastMath.log(2.0d));\n+      final double factor = FastMath.scalb(1.0d, -k);\n+      final double[] v1n = {v1x * factor, v1y * factor, v1z * factor};\n+      final double[] v2n = {v2x * factor, v2y * factor, v2z * factor};\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n       // v3 without loss of precision. See Kahan lecture\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+      final double dot1 = v1n[0] * v2n[0] + v1n[1] * v2n[1] + v1n[2] * v2n[2];\n+      final double dot2 = v2n[0] * v2n[0] + v2n[1] * v2n[1] + v2n[2] * v2n[2];\n+      final double rho = dot1 / dot2;\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double[] v3n = {v1n[0] - rho * v2n[0], v1n[1] - rho * v2n[1], v1n[2] - rho * v2n[2]};\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double x = v3n[1] * v2n[2] - v3n[2] * v2n[1];\n+      final double y = v3n[2] * v2n[0] - v3n[0] * v2n[2];\n+      final double z = v3n[0] * v2n[1] - v3n[1] * v2n[0];\n+\n+      if (k > 0) {\n+          return new Vector3D(FastMath.scalb(x, (int) k),\n+                  FastMath.scalb(y, (int) k),\n+                  FastMath.scalb(z, (int) k));\n+      }\n+\n+      return new Vector3D(x, y, z);\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}