{
    "patch": "if (functionType.getTypeOfThis() != null &&\n          parent != null &&\n          parent.getToken() != Token.NEW &&\n          !NodeUtil.isGetOrSetKey(n.getParent())) {\n        if (functionType.getTypeOfThis().isUnknownType()) {\n          report(t, n, UNKNOWN_THIS_TYPE, childType.toString());\n        } else {\n          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2dc1a592 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null &&\n+          parent != null &&\n+          parent.getToken() != Token.NEW &&\n+          !NodeUtil.isGetOrSetKey(n.getParent())) {\n+        if (functionType.getTypeOfThis().isUnknownType()) {\n+          report(t, n, UNKNOWN_THIS_TYPE, childType.toString());\n+        } else {\n+          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}