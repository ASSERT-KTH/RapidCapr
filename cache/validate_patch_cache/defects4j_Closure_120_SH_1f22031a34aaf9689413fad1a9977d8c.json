{
    "patch": "if (ref.isVarDeclaration()) {\n    // Make sure this is the only declaration of the variable.\n    for (int i = 0; i < references.size(); i++) {\n        Reference currentRef = references.get(i);\n        if (currentRef.isVarDeclaration() && currentRef.getName().equals(ref.getName()) && currentRef != ref) {\n            return false;\n        }\n    }\n} else if (block.isFunction) {\n    // Function declarations have their own var scope.\n    return false;\n} else if (block.isLoop) {\n    return false;\n} else if (!block.equals(ref.getBasicBlock())) {\n    // Check if the reference is in an outer block.\n    return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a4e043c0 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref.isVarDeclaration()) {\n+    // Make sure this is the only declaration of the variable.\n+    for (int i = 0; i < references.size(); i++) {\n+        Reference currentRef = references.get(i);\n+        if (currentRef.isVarDeclaration() && currentRef.getName().equals(ref.getName()) && currentRef != ref) {\n+            return false;\n+        }\n+    }\n+} else if (block.isFunction) {\n+    // Function declarations have their own var scope.\n+    return false;\n+} else if (block.isLoop) {\n+    return false;\n+} else if (!block.equals(ref.getBasicBlock())) {\n+    // Check if the reference is in an outer block.\n+    return false;\n+}\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}