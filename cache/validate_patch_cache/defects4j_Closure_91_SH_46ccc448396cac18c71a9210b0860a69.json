{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.CALL &&\n          parent.getFirstChild().getType() == Token.GETPROP) {\n        Node getProp = parent.getFirstChild();\n        return !(getProp.getChildCount() == 1 &&\n            getProp.getFirstChild().getString().equals(\"prototype\"));\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c1933132 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.CALL &&\n+          parent.getFirstChild().getType() == Token.GETPROP) {\n+        Node getProp = parent.getFirstChild();\n+        return !(getProp.getChildCount() == 1 &&\n+            getProp.getFirstChild().getString().equals(\"prototype\"));\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}