{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class TypedObjectCounter {\n    public double getTypedPercent(String jsonData) {\n        int totalObjectCount = 0;\n        int typedObjectCount = 0;\n\n        try {\n            JSONArray jsonArr = new JSONArray(jsonData);\n\n            for (int i = 0; i < jsonArr.length(); i++) {\n                JSONObject jsonObj = jsonArr.getJSONObject(i);\n                if (jsonObj.has(\"type\") && !jsonObj.getString(\"type\").isEmpty()) {\n                    typedObjectCount++;\n                }\n                totalObjectCount++;\n            }\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n\n        return (totalObjectCount != 0) ? (double) typedObjectCount / totalObjectCount * 100.0 : 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b835069d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class TypedObjectCounter {\n+    public double getTypedPercent(String jsonData) {\n+        int totalObjectCount = 0;\n+        int typedObjectCount = 0;\n+\n+        try {\n+            JSONArray jsonArr = new JSONArray(jsonData);\n+\n+            for (int i = 0; i < jsonArr.length(); i++) {\n+                JSONObject jsonObj = jsonArr.getJSONObject(i);\n+                if (jsonObj.has(\"type\") && !jsonObj.getString(\"type\").isEmpty()) {\n+                    typedObjectCount++;\n+                }\n+                totalObjectCount++;\n+            }\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return (totalObjectCount != 0) ? (double) typedObjectCount / totalObjectCount * 100.0 : 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}