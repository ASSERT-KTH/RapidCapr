{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    if (nextLocal <= instantAdjusted) {\n                        return offsetAdjusted;\n                    } else {\n                        int nextLocalOffset = getOffset(nextLocal);\n                        if (nextLocalOffset > offsetLocal) {\n                            return nextLocalOffset;\n                        } else {\n                            if (nextAdjusted < instantAdjusted) {\n                                nextAdjusted = nextTransition(nextAdjusted);\n                                if (nextAdjusted == nextLocal) {\n                                    return getOffset(nextLocal);\n                                } else if (nextAdjusted < nextLocal) {\n                                    return offsetLocal;\n                                } else {\n                                    return getOffset(nextAdjusted);\n                                }\n                            } else {\n                                return offsetLocal;\n                            }\n                        }\n                    }\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    if (prevAdjusted >= instantAdjusted) {\n                        return offsetAdjusted;\n                    } else {\n                        int prevLocalOffset = getOffset(prevLocal);\n                        if (prevLocalOffset < offsetLocal) {\n                            return prevLocalOffset;\n                        } else {\n                            if (prevAdjusted >= instantAdjusted - prevLocalOffset) {\n                                return offsetLocal;\n                            } else {\n                                return getOffset(prevAdjusted);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5786afdb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,61 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != nextAdjusted) {\n+                    if (nextLocal <= instantAdjusted) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        int nextLocalOffset = getOffset(nextLocal);\n+                        if (nextLocalOffset > offsetLocal) {\n+                            return nextLocalOffset;\n+                        } else {\n+                            if (nextAdjusted < instantAdjusted) {\n+                                nextAdjusted = nextTransition(nextAdjusted);\n+                                if (nextAdjusted == nextLocal) {\n+                                    return getOffset(nextLocal);\n+                                } else if (nextAdjusted < nextLocal) {\n+                                    return offsetLocal;\n+                                } else {\n+                                    return getOffset(nextAdjusted);\n+                                }\n+                            } else {\n+                                return offsetLocal;\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    if (prevAdjusted >= instantAdjusted) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        int prevLocalOffset = getOffset(prevLocal);\n+                        if (prevLocalOffset < offsetLocal) {\n+                            return prevLocalOffset;\n+                        } else {\n+                            if (prevAdjusted >= instantAdjusted - prevLocalOffset) {\n+                                return offsetLocal;\n+                            } else {\n+                                return getOffset(prevAdjusted);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}