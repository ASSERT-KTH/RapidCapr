{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long prevLocal = previousTransition(instantAdjusted);\n                int offsetPrev = getOffset(prevLocal);\n                if (offsetPrev == offsetAdjusted) {\n                    return offsetPrev;\n                } else {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    int offsetNext = getOffset(nextLocal);\n                    if (offsetNext == offsetLocal) {\n                        return offsetLocal;\n                    } else {\n                        throw new IllegalArgumentException();\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..acfa70b6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                int offsetPrev = getOffset(prevLocal);\n+                if (offsetPrev == offsetAdjusted) {\n+                    return offsetPrev;\n+                } else {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    int offsetNext = getOffset(nextLocal);\n+                    if (offsetNext == offsetLocal) {\n+                        return offsetLocal;\n+                    } else {\n+                        throw new IllegalArgumentException();\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}