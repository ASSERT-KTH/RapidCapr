{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    for (int i = 0; i < size; i++) {\n        Object pair = elementPairs.get(i);\n        if (pair instanceof Separator) {\n            PeriodFormatter left = toFormatter(elementPairs.subList(0, i), notPrinter, notParser);\n            PeriodFormatter right = toFormatter(elementPairs.subList(i+1, size), notPrinter, notParser);\n            return new PeriodFormatter(left.getPrinter(), right.getParser(), ((Separator) pair).finish(left.getPrinter(), right.getParser()));\n        } else if (pair instanceof PeriodPrinter && !notPrinter) {\n            PeriodParser parser = null;\n            for (int j = i + 1; j < size; j++) {\n                Object nextPair = elementPairs.get(j);\n                if (nextPair instanceof PeriodParser) {\n                    parser = (PeriodParser) nextPair;\n                    break;\n                }\n            }\n            if (parser == null) {\n                Object[] comp = createComposite(elementPairs.subList(i, size));\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) pair, parser);\n            }\n        } else if (pair instanceof PeriodParser && !notParser) {\n            PeriodPrinter printer = null;\n            for (int j = i + 1; j < size; j++) {\n                Object nextPair = elementPairs.get(j);\n                if (nextPair instanceof PeriodPrinter) {\n                    printer = (PeriodPrinter) nextPair;\n                    break;\n                }\n            }\n            if (printer == null) {\n                Object[] comp = createComposite(elementPairs.subList(i, size));\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else {\n                return new PeriodFormatter(printer, (PeriodParser) pair);\n            }\n        }\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter && notParser) {\n        return new PeriodFormatter(null, null);\n    } else if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..3d18ec03 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,68 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    for (int i = 0; i < size; i++) {\n+        Object pair = elementPairs.get(i);\n+        if (pair instanceof Separator) {\n+            PeriodFormatter left = toFormatter(elementPairs.subList(0, i), notPrinter, notParser);\n+            PeriodFormatter right = toFormatter(elementPairs.subList(i+1, size), notPrinter, notParser);\n+            return new PeriodFormatter(left.getPrinter(), right.getParser(), ((Separator) pair).finish(left.getPrinter(), right.getParser()));\n+        } else if (pair instanceof PeriodPrinter && !notPrinter) {\n+            PeriodParser parser = null;\n+            for (int j = i + 1; j < size; j++) {\n+                Object nextPair = elementPairs.get(j);\n+                if (nextPair instanceof PeriodParser) {\n+                    parser = (PeriodParser) nextPair;\n+                    break;\n+                }\n+            }\n+            if (parser == null) {\n+                Object[] comp = createComposite(elementPairs.subList(i, size));\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) pair, parser);\n+            }\n+        } else if (pair instanceof PeriodParser && !notParser) {\n+            PeriodPrinter printer = null;\n+            for (int j = i + 1; j < size; j++) {\n+                Object nextPair = elementPairs.get(j);\n+                if (nextPair instanceof PeriodPrinter) {\n+                    printer = (PeriodPrinter) nextPair;\n+                    break;\n+                }\n+            }\n+            if (printer == null) {\n+                Object[] comp = createComposite(elementPairs.subList(i, size));\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else {\n+                return new PeriodFormatter(printer, (PeriodParser) pair);\n+            }\n         }\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter && notParser) {\n+        return new PeriodFormatter(null, null);\n+    } else if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: no suitable constructor found for PeriodFormatter(PeriodPrinter,PeriodParser,Separator)",
    "test_result": "ERROR"
}