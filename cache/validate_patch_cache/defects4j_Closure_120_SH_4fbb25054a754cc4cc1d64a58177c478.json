{
    "patch": "          // Function assignments are ok iff they end up being returned.\n          // This construct is used in goog.partial.\n          Node last = block.getLastNode();\n          if (last == null || last.getToken() != Token.RETURN) {\n            return false;\n          }\n          for (Node n : last.children()) {\n            if (n.matchesQualifiedName(name)) {\n              return true;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e5816df1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Function assignments are ok iff they end up being returned.\n+          // This construct is used in goog.partial.\n+          Node last = block.getLastNode();\n+          if (last == null || last.getToken() != Token.RETURN) {\n+            return false;\n+          }\n+          for (Node n : last.children()) {\n+            if (n.matchesQualifiedName(name)) {\n+              return true;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}