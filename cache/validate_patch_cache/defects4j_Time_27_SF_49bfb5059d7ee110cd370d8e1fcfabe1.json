{
    "patch": "private static Composite createComposite(List<Object> elementPairs) {\n    if (elementPairs.size() == 0) {\n        return null;\n    }\n    \n    Object first = elementPairs.get(0);\n    if (!(first instanceof Element)) {\n        throw new IllegalArgumentException(\"Invalid element: \" + first);\n    }\n    \n    Element element = (Element) first;\n    if (element instanceof Literal) {\n        String text = ((Literal) element).getText();\n        return new CompositeLiteral(text, createComposite(elementPairs.subList(1, elementPairs.size())));\n    } else if (element instanceof Separator) {\n        Separator sep = (Separator) element;\n        PeriodPrinter beforePrinter = createComposite(elementPairs.subList(1, sep.getPosition()));\n        PeriodPrinter afterPrinter = createComposite(elementPairs.subList(sep.getPosition() + 1, elementPairs.size()));\n        PeriodParser beforeParser = createComposite(elementPairs.subList(1, sep.getPosition()));\n        PeriodParser afterParser = createComposite(elementPairs.subList(sep.getPosition() + 1, elementPairs.size()));\n        return new CompositeSeparator(sep, beforePrinter, afterPrinter, beforeParser, afterParser);\n    } else if (element instanceof DurationFieldType) {\n        DurationFieldType fieldType = (DurationFieldType) element;\n        IntegerArray array = new IntegerArray(elementPairs.size() - 1);\n        for (int i = 1; i < elementPairs.size(); i++) {\n            Object pair = elementPairs.get(i);\n            if (pair instanceof Element) {\n                Element elem = (Element) pair;\n                String err = \"Field type \" + fieldType + \" cannot be printed as \" + elem.getClass();\n                throw new IllegalArgumentException(err);\n            }\n            array.set(i - 1, (Integer) pair);\n        }\n        PeriodPrinter printer = null;\n        PeriodParser parser = null;\n        switch (fieldType) {\n            case years():\n                printer = new UnpaddedNumber(element, 4, false, SignStyle.NOT_NEGATIVE);\n                parser = new UnpaddedNumber(element, 4, false, SignStyle.NORMAL);\n                break;\n            case months():\n                printer = new UnpaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n                parser = new UnpaddedNumber(element, 2, false, SignStyle.NORMAL);\n                break;\n            case weeks():\n                printer = new UnpaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n                parser = new UnpaddedNumber(element, 2, false, SignStyle.NORMAL);\n                break;\n            case days():\n                printer = new UnpaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n                parser = new UnpaddedNumber(element, 2, false, SignStyle.NORMAL);\n                break;\n            case hours():\n                printer = new PaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n                parser = new PaddedNumber(element, 2, false, SignStyle.NORMAL);\n                break;\n            case minutes():\n                printer = new PaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n                parser = new PaddedNumber(element, 2, false, SignStyle.NORMAL);\n                break;\n            case seconds():\n                printer = new PaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n                parser = new PaddedNumber(element, 2, false, SignStyle.NORMAL);\n                break;\n            case millis():\n                printer = new PaddedNumber(element, 3, false, SignStyle.NOT_NEGATIVE);\n                parser = new PaddedNumber(element, 3, false, SignStyle.NORMAL);\n                break;\n            case micros():\n                printer = new PaddedNumber(element, 6, false, SignStyle.NOT_NEGATIVE);\n                parser = new PaddedNumber(element, 6, false, SignStyle.NORMAL);\n                break;\n            case nanos():\n                printer = new PaddedNumber(element, 9, false, SignStyle.NOT_NEGATIVE);\n                parser = new PaddedNumber(element, 9, false, SignStyle.NORMAL);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unrecognized field type: \" + fieldType.getName());\n        }\n        return new CompositeField(printer, parser, fieldType, array);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized element: \" + element);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..38b09b9b 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,90 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static Composite createComposite(List<Object> elementPairs) {\n+    if (elementPairs.size() == 0) {\n+        return null;\n+    }\n+    \n+    Object first = elementPairs.get(0);\n+    if (!(first instanceof Element)) {\n+        throw new IllegalArgumentException(\"Invalid element: \" + first);\n+    }\n+    \n+    Element element = (Element) first;\n+    if (element instanceof Literal) {\n+        String text = ((Literal) element).getText();\n+        return new CompositeLiteral(text, createComposite(elementPairs.subList(1, elementPairs.size())));\n+    } else if (element instanceof Separator) {\n+        Separator sep = (Separator) element;\n+        PeriodPrinter beforePrinter = createComposite(elementPairs.subList(1, sep.getPosition()));\n+        PeriodPrinter afterPrinter = createComposite(elementPairs.subList(sep.getPosition() + 1, elementPairs.size()));\n+        PeriodParser beforeParser = createComposite(elementPairs.subList(1, sep.getPosition()));\n+        PeriodParser afterParser = createComposite(elementPairs.subList(sep.getPosition() + 1, elementPairs.size()));\n+        return new CompositeSeparator(sep, beforePrinter, afterPrinter, beforeParser, afterParser);\n+    } else if (element instanceof DurationFieldType) {\n+        DurationFieldType fieldType = (DurationFieldType) element;\n+        IntegerArray array = new IntegerArray(elementPairs.size() - 1);\n+        for (int i = 1; i < elementPairs.size(); i++) {\n+            Object pair = elementPairs.get(i);\n+            if (pair instanceof Element) {\n+                Element elem = (Element) pair;\n+                String err = \"Field type \" + fieldType + \" cannot be printed as \" + elem.getClass();\n+                throw new IllegalArgumentException(err);\n+            }\n+            array.set(i - 1, (Integer) pair);\n+        }\n+        PeriodPrinter printer = null;\n+        PeriodParser parser = null;\n+        switch (fieldType) {\n+            case years():\n+                printer = new UnpaddedNumber(element, 4, false, SignStyle.NOT_NEGATIVE);\n+                parser = new UnpaddedNumber(element, 4, false, SignStyle.NORMAL);\n+                break;\n+            case months():\n+                printer = new UnpaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n+                parser = new UnpaddedNumber(element, 2, false, SignStyle.NORMAL);\n+                break;\n+            case weeks():\n+                printer = new UnpaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n+                parser = new UnpaddedNumber(element, 2, false, SignStyle.NORMAL);\n+                break;\n+            case days():\n+                printer = new UnpaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n+                parser = new UnpaddedNumber(element, 2, false, SignStyle.NORMAL);\n+                break;\n+            case hours():\n+                printer = new PaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n+                parser = new PaddedNumber(element, 2, false, SignStyle.NORMAL);\n+                break;\n+            case minutes():\n+                printer = new PaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n+                parser = new PaddedNumber(element, 2, false, SignStyle.NORMAL);\n+                break;\n+            case seconds():\n+                printer = new PaddedNumber(element, 2, false, SignStyle.NOT_NEGATIVE);\n+                parser = new PaddedNumber(element, 2, false, SignStyle.NORMAL);\n+                break;\n+            case millis():\n+                printer = new PaddedNumber(element, 3, false, SignStyle.NOT_NEGATIVE);\n+                parser = new PaddedNumber(element, 3, false, SignStyle.NORMAL);\n+                break;\n+            case micros():\n+                printer = new PaddedNumber(element, 6, false, SignStyle.NOT_NEGATIVE);\n+                parser = new PaddedNumber(element, 6, false, SignStyle.NORMAL);\n+                break;\n+            case nanos():\n+                printer = new PaddedNumber(element, 9, false, SignStyle.NOT_NEGATIVE);\n+                parser = new PaddedNumber(element, 9, false, SignStyle.NORMAL);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unrecognized field type: \" + fieldType.getName());\n         }\n+        return new CompositeField(printer, parser, fieldType, array);\n+    } else {\n+        throw new IllegalArgumentException(\"Unrecognized element: \" + element);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method createComposite(List<Object>) is already defined in class PeriodFormatterBuilder",
    "test_result": "ERROR"
}