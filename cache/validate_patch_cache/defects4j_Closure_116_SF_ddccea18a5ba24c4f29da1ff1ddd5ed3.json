{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  // check if there are no parameters and arguments to inline or vice-versa\n  if ((cArg == null && fnParam != null)\n      || (cArg != null && fnParam == null)\n      || (fnParam != null && !NodeUtil.isChangeableParameterList(fnParam))) {\n    return CanInlineResult.NO;\n  }\n\n  while (cArg != null || fnParam != null) {\n    if (fnParam != null) {\n      String paramName = fnParam.getString();\n      boolean hasDefaultValue = fnParam.hasChildren();\n      Node defaultValue = fnParam.getFirstChild();\n\n      // If there are no more arguments, and the parameter has a default value,\n      // then it does not need to be bound.\n      if (cArg == null && hasDefaultValue) {\n        fnParam = fnParam.getNext();\n        continue;\n      }\n\n      // If there are more arguments than formal parameters,\n      // and the parameter has no default value, inlining is not possible.\n      if (cArg != null && fnParam == null) {\n        return CanInlineResult.NO;\n      }\n\n      // If the function parameter is not a changeable parameter i.e. does not\n      // have a default value and is not used within the function, then it is\n      // safe to skip it.\n      if (!NodeUtil.isChangeableParameter(fnParam, block)) {\n        fnParam = fnParam.getNext();\n        continue;\n      }\n\n      // Now we have at least one argument and one parameter.\n      Node cArgValue = cArg.getFirstChild();\n      if (NodeUtil.mayEffectMutableState(cArgValue, compiler)\n          && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n        // Check for arguments that are evaluated more than once.\n        // Note: Unlike block inlining, there is no need to check for loop headers.\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n      fnParam = fnParam.getNext();\n    }\n    // For every call argument check for side-effects, even if there\n    // isn't a named parameter to match.\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..183e5897 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,77 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // check if there are no parameters and arguments to inline or vice-versa\n+  if ((cArg == null && fnParam != null)\n+      || (cArg != null && fnParam == null)\n+      || (fnParam != null && !NodeUtil.isChangeableParameterList(fnParam))) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  while (cArg != null || fnParam != null) {\n+    if (fnParam != null) {\n+      String paramName = fnParam.getString();\n+      boolean hasDefaultValue = fnParam.hasChildren();\n+      Node defaultValue = fnParam.getFirstChild();\n+\n+      // If there are no more arguments, and the parameter has a default value,\n+      // then it does not need to be bound.\n+      if (cArg == null && hasDefaultValue) {\n+        fnParam = fnParam.getNext();\n+        continue;\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+      // If there are more arguments than formal parameters,\n+      // and the parameter has no default value, inlining is not possible.\n+      if (cArg != null && fnParam == null) {\n+        return CanInlineResult.NO;\n+      }\n \n-        // Move to the next name.\n+      // If the function parameter is not a changeable parameter i.e. does not\n+      // have a default value and is not used within the function, then it is\n+      // safe to skip it.\n+      if (!NodeUtil.isChangeableParameter(fnParam, block)) {\n         fnParam = fnParam.getNext();\n+        continue;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      // Now we have at least one argument and one parameter.\n+      Node cArgValue = cArg.getFirstChild();\n+      if (NodeUtil.mayEffectMutableState(cArgValue, compiler)\n+          && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n+        // Check for arguments that are evaluated more than once.\n+        // Note: Unlike block inlining, there is no need to check for loop headers.\n+        return CanInlineResult.NO;\n       }\n-    }\n \n-    return CanInlineResult.YES;\n+      cArg = cArg.getNext();\n+      fnParam = fnParam.getNext();\n+    }\n+    // For every call argument check for side-effects, even if there\n+    // isn't a named parameter to match.\n+    if (cArg != null) {\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+      cArg = cArg.getNext();\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}