{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(parent) && n == parent.getLastChild()) {\n        Node pparent = parent.getParent();\n        if (pparent.getType() == Token.ASSIGN &&\n            pparent.getFirstChild() != parent &&\n            NodeUtil.isGet(pparent.getFirstChild())) {\n          Node lvalue = pparent.getFirstChild();\n          if (NodeUtil.isGet(lvalue.getLastChild()) &&\n              lvalue.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        } else if (pparent.getType() == Token.BINARY &&\n                   pparent.getBooleanProp(Node.MUTATING_ASSIGNMENT) &&\n                   n == pparent.getLastChild()) {\n          Node lhs = pparent.getFirstChild();\n          if (NodeUtil.isGet(lhs) &&\n              NodeUtil.isGet(lhs.getLastChild()) &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..923b3754 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent) && n == parent.getLastChild()) {\n+        Node pparent = parent.getParent();\n+        if (pparent.getType() == Token.ASSIGN &&\n+            pparent.getFirstChild() != parent &&\n+            NodeUtil.isGet(pparent.getFirstChild())) {\n+          Node lvalue = pparent.getFirstChild();\n+          if (NodeUtil.isGet(lvalue.getLastChild()) &&\n+              lvalue.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        } else if (pparent.getType() == Token.BINARY &&\n+                   pparent.getBooleanProp(Node.MUTATING_ASSIGNMENT) &&\n+                   n == pparent.getLastChild()) {\n+          Node lhs = pparent.getFirstChild();\n+          if (NodeUtil.isGet(lhs) &&\n+              NodeUtil.isGet(lhs.getLastChild()) &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}