{
    "patch": "public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    final int csLength = cs.length();\n    final int searchLength = searchChars.length;\n    final boolean[] searchMap = new boolean[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLength; i++) {\n        searchMap[searchChars[i]] = true;\n    }\n    for (int i = 0; i < csLength; i++) {\n        final char ch = cs.charAt(i);\n        if (searchMap[ch]) {\n            if (!Character.isHighSurrogate(ch)) {\n                return true;\n            } else if (i < csLength - 1) {\n                final char ch2 = cs.charAt(i + 1);\n                if (searchMap[ch2]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..82ab69de 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n+    if (cs == null || searchChars == null) {\n+        return false;\n+    }\n+    final int csLength = cs.length();\n+    final int searchLength = searchChars.length;\n+    final boolean[] searchMap = new boolean[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLength; i++) {\n+        searchMap[searchChars[i]] = true;\n+    }\n+    for (int i = 0; i < csLength; i++) {\n+        final char ch = cs.charAt(i);\n+        if (searchMap[ch]) {\n+            if (!Character.isHighSurrogate(ch)) {\n+                return true;\n+            } else if (i < csLength - 1) {\n+                final char ch2 = cs.charAt(i + 1);\n+                if (searchMap[ch2]) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}