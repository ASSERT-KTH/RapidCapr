{
    "patch": "public boolean shouldTraverse(final NodeTraversal t, final Node n, final Node parent) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them.\n        if (!(isBlockOrScript(parent) || isNamedFunction(parent) || isFunctionExpressionInAssignment(parent))) {\n            return false;\n        }\n    }\n\n    if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR)) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (n == lhs) {\n            // Always traverse the left side of the assignment.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n            if (lhs.getType() == Token.GETPROP) {\n                Node propNameNode = lhs.getLastChild();\n                if (propNameNode.getType() == Token.STRING && propNameNode.getString().contains(\".prototype.\")) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    // Avoid the use of global `this` object.\n    if (n.getType() == Token.THIS && !(isConstructor(n) || isPrototype(n) || isFunctionExpressionInAssignment(parent))) {\n        t.report(n, CheckGlobalThis.GLOBAL_THIS, \"dangerous use of the global this object\");\n        return false;\n    }\n\n    return true;\n}\n\nprivate static boolean isBlockOrScript(Node n) {\n    int parentType = n.getParent() != null ? n.getParent().getType() : Token.BLOCK;\n    return parentType == Token.BLOCK || parentType == Token.SCRIPT;\n}\n\nprivate static boolean isNamedFunction(Node n) {\n    int parentType = n.getParent() != null ? n.getParent().getType() : Token.BLOCK;\n    return n.getType() == Token.FUNCTION && (parentType == Token.NAME || isBlockOrScript(n));\n}\n\nprivate static boolean isFunctionExpressionInAssignment(Node n) {\n    if (n.getType() != Token.ASSIGN) {\n        return false;\n    }\n    Node lhs = n.getFirstChild();\n    Node rhs = lhs.getNext();\n    return rhs.getType() == Token.FUNCTION ||\n            (rhs.getType() == Token.CALL && rhs.getLastChild().getType() == Token.FUNCTION);\n}\n\nprivate static boolean isConstructor(Node n) {\n    return n.getParent() != null && n.getParent().getType() == Token.FUNCTION\n            && n.getParent().getFirstChild() == n\n            && (n.getParent().getSecondChild() == null\n            || n.getParent().getSecondChild().getType() != Token.STRING);\n}\n\nprivate static boolean isPrototype(Node n) {\n    return n.getParent() != null && n.getParent().getType() == Token.GETPROP\n            && n.getParent().getLastChild() == n\n            && n.getParent().getFirstChild().getType() == Token.GETPROP\n            && \"prototype\".equals(n.getParent().getFirstChild().getLastChild().getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..a0eb6f3e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,83 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(final NodeTraversal t, final Node n, final Node parent) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them.\n+        if (!(isBlockOrScript(parent) || isNamedFunction(parent) || isFunctionExpressionInAssignment(parent))) {\n+            return false;\n+        }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR)) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+            if (lhs.getType() == Token.GETPROP) {\n+                Node propNameNode = lhs.getLastChild();\n+                if (propNameNode.getType() == Token.STRING && propNameNode.getString().contains(\".prototype.\")) {\n+                    return false;\n+                }\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n+    }\n+\n+    // Avoid the use of global `this` object.\n+    if (n.getType() == Token.THIS && !(isConstructor(n) || isPrototype(n) || isFunctionExpressionInAssignment(parent))) {\n+        t.report(n, CheckGlobalThis.GLOBAL_THIS, \"dangerous use of the global this object\");\n+        return false;\n     }\n \n     return true;\n-  }\n+}\n+\n+private static boolean isBlockOrScript(Node n) {\n+    int parentType = n.getParent() != null ? n.getParent().getType() : Token.BLOCK;\n+    return parentType == Token.BLOCK || parentType == Token.SCRIPT;\n+}\n+\n+private static boolean isNamedFunction(Node n) {\n+    int parentType = n.getParent() != null ? n.getParent().getType() : Token.BLOCK;\n+    return n.getType() == Token.FUNCTION && (parentType == Token.NAME || isBlockOrScript(n));\n+}\n+\n+private static boolean isFunctionExpressionInAssignment(Node n) {\n+    if (n.getType() != Token.ASSIGN) {\n+        return false;\n+    }\n+    Node lhs = n.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    return rhs.getType() == Token.FUNCTION ||\n+            (rhs.getType() == Token.CALL && rhs.getLastChild().getType() == Token.FUNCTION);\n+}\n+\n+private static boolean isConstructor(Node n) {\n+    return n.getParent() != null && n.getParent().getType() == Token.FUNCTION\n+            && n.getParent().getFirstChild() == n\n+            && (n.getParent().getSecondChild() == null\n+            || n.getParent().getSecondChild().getType() != Token.STRING);\n+}\n+\n+private static boolean isPrototype(Node n) {\n+    return n.getParent() != null && n.getParent().getType() == Token.GETPROP\n+            && n.getParent().getLastChild() == n\n+            && n.getParent().getFirstChild().getType() == Token.GETPROP\n+            && \"prototype\".equals(n.getParent().getFirstChild().getLastChild().getString());\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}