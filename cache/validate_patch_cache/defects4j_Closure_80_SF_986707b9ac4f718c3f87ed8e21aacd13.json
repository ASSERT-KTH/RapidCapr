{
    "patch": "import com.google.javascript.rhino.Node;\nimport java.util.function.Predicate;\n\npublic class AutomatedProgramRepairTool {\n\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the same as returning a\n        // non-local name, but this doesn't matter if the value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            || evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.test(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.test(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.test(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.test(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n            || locals.test(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literal objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // The \"in\" operator requires the left-hand side to be a simple object and the right-hand\n        // side to be a simple value. Both sides need to be evaluated.\n        return evaluatesToLocalValue(value.getFirstChild(), locals) &&\n            evaluatesToSimpleObject(value.getFirstChild()) &&\n            evaluatesToLocalValue(value.getLastChild(), locals);\n      default:\n        // Other ops force a local value:\n        //  x = '' + g (x is now a local string)\n        //  x -= g (x is now a local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node \" + value + \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  static boolean isImmutableValue(Node value) {\n    switch (value.getType()) {\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n        return true;\n      case Token.NUMBER:\n      case Token.STRING:\n        return !value.hasChildren();\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        return false;\n      default:\n        return false;\n    }\n  }\n\n  static boolean isSimpleOperator(Node n) {\n    int type = n.getType();\n    return type == Token.ASSIGN ||\n        type == Token.BITAND_ASSIGN ||\n        type == Token.BITOR_ASSIGN ||\n        type == Token.BITXOR_ASSIGN ||\n        type == Token.DIV_ASSIGN ||\n        type == Token.MINUS_ASSIGN ||\n        type == Token.MOD_ASSIGN ||\n        type == Token.PLUS_ASSIGN ||\n        type == Token.RSHIFT_ASSIGN ||\n        type == Token.LSHIFT_ASSIGN ||\n        type == Token.URSHIFT_ASSIGN ||\n        type == Token.MUL_ASSIGN ||\n        type == Token.AND ||\n        type == Token.OR ||\n        type == Token.BITAND ||\n        type == Token.BITOR ||\n        type == Token.BITXOR ||\n        type == Token.COMMA ||\n        type == Token.DIV ||\n        type == Token.EQ ||\n        type == Token.GE ||\n        type == Token.GT ||\n        type == Token.INSTANCEOF ||\n        type == Token.LE ||\n        type == Token.LT ||\n        type == Token.MOD ||\n        type == Token.MUL ||\n        type == Token.NOT_EQ ||\n        type == Token.SHEQ ||\n        type == Token.SHNE ||\n        type == Token.URSHIFT ||\n        type == Token.LSHIFT ||\n        type == Token.RSHIFT ||\n        type == Token.VOID ||\n        type == Token.TYPEOF ||\n        type == Token.ADD ||\n        type == Token.SUB;\n  }\n\n  static boolean isToStringMethodCall(Node n) {\n    if (n.getType() == Token.CALL) {\n      Node getProp = n.getFirstChild();\n      return getProp.getType() == Token.GETPROP &&\n          getProp.getNext().getType() == Token.STRING &&\n          \"toString\".equals(getProp.getLastChild().getString());\n    }\n    return false;\n  }\n\n  static boolean callHasLocalResult(Node n) {\n    if (n.getType() == Token.CALL) {\n      Node target = n.getFirstChild();\n      // Native JS functions with local side effects that cannot be observed directly.\n      if (target.getType() == Token.NAME) {\n        String functionName = target.getString();\n        return \"eval\".equals(functionName) || \"parseInt\".equals(functionName);\n      }\n    }\n    return false;\n  }\n\n  static boolean newHasLocalResult(Node n) {\n    if (n.getType() == Token.NEW) {\n      Node target = n.getFirstChild();\n      switch (target.getType()) {\n        case Token.NAME:\n          return \"RegExp\".equals(target.getString());\n        case Token.GETPROP:\n          return \"Date\".equals(target.getLastChild().getString());\n        default:\n          break;\n      }\n    }\n    return false;\n  }\n\n  static boolean evaluatesToSimpleObject(Node n) {\n    int type = n.getType();\n    return type == Token.ARRAYLIT || type == Token.OBJECTLIT;\n  }\n\n  static boolean isAssignmentOp(Node n) {\n    int type = n.getType();\n    return type == Token.ASSIGN || type == Token.EXPR_RESULT ||\n        type == Token.ASSIGN_ADD ||\n        type == Token.ASSIGN_BITAND ||\n        type == Token.ASSIGN_BITOR ||\n        type == Token.ASSIGN_BITXOR ||\n        type == Token.ASSIGN_DIV ||\n        type == Token.ASSIGN_LSH ||\n        type == Token.ASSIGN_MOD ||\n        type == Token.ASSIGN_MUL ||\n        type == Token.ASSIGN_RSH ||\n        type == Token.ASSIGN_SUB ||\n        type == Token.ASSIGN_URSH;\n  }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..85bd5489 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,195 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n+import com.google.javascript.rhino.Node;\n+import java.util.function.Predicate;\n+\n+public class AutomatedProgramRepairTool {\n+\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the same as returning a\n+        // non-local name, but this doesn't matter if the value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            || evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.test(value);\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.test(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.test(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.test(value);\n+      case Token.NEW:\n+        return newHasLocalResult(value)\n+            || locals.test(value);\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literal objects with non-literal children are allowed.\n+        return true;\n+      case Token.IN:\n+        // The \"in\" operator requires the left-hand side to be a simple object and the right-hand\n+        // side to be a simple value. Both sides need to be evaluated.\n+        return evaluatesToLocalValue(value.getFirstChild(), locals) &&\n+            evaluatesToSimpleObject(value.getFirstChild()) &&\n+            evaluatesToLocalValue(value.getLastChild(), locals);\n+      default:\n+        // Other ops force a local value:\n+        //  x = '' + g (x is now a local string)\n+        //  x -= g (x is now a local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node \" + value + \"\\n parent:\" + value.getParent());\n+    }\n+  }\n+\n+  static boolean isImmutableValue(Node value) {\n+    switch (value.getType()) {\n       case Token.TRUE:\n       case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n+      case Token.NULL:\n         return true;\n+      case Token.NUMBER:\n+      case Token.STRING:\n+        return !value.hasChildren();\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        return false;\n       default:\n         return false;\n     }\n   }\n \n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+  static boolean isSimpleOperator(Node n) {\n+    int type = n.getType();\n+    return type == Token.ASSIGN ||\n+        type == Token.BITAND_ASSIGN ||\n+        type == Token.BITOR_ASSIGN ||\n+        type == Token.BITXOR_ASSIGN ||\n+        type == Token.DIV_ASSIGN ||\n+        type == Token.MINUS_ASSIGN ||\n+        type == Token.MOD_ASSIGN ||\n+        type == Token.PLUS_ASSIGN ||\n+        type == Token.RSHIFT_ASSIGN ||\n+        type == Token.LSHIFT_ASSIGN ||\n+        type == Token.URSHIFT_ASSIGN ||\n+        type == Token.MUL_ASSIGN ||\n+        type == Token.AND ||\n+        type == Token.OR ||\n+        type == Token.BITAND ||\n+        type == Token.BITOR ||\n+        type == Token.BITXOR ||\n+        type == Token.COMMA ||\n+        type == Token.DIV ||\n+        type == Token.EQ ||\n+        type == Token.GE ||\n+        type == Token.GT ||\n+        type == Token.INSTANCEOF ||\n+        type == Token.LE ||\n+        type == Token.LT ||\n+        type == Token.MOD ||\n+        type == Token.MUL ||\n+        type == Token.NOT_EQ ||\n+        type == Token.SHEQ ||\n+        type == Token.SHNE ||\n+        type == Token.URSHIFT ||\n+        type == Token.LSHIFT ||\n+        type == Token.RSHIFT ||\n+        type == Token.VOID ||\n+        type == Token.TYPEOF ||\n+        type == Token.ADD ||\n+        type == Token.SUB;\n+  }\n+\n+  static boolean isToStringMethodCall(Node n) {\n+    if (n.getType() == Token.CALL) {\n+      Node getProp = n.getFirstChild();\n+      return getProp.getType() == Token.GETPROP &&\n+          getProp.getNext().getType() == Token.STRING &&\n+          \"toString\".equals(getProp.getLastChild().getString());\n     }\n     return false;\n   }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n-\n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n+  static boolean callHasLocalResult(Node n) {\n+    if (n.getType() == Token.CALL) {\n+      Node target = n.getFirstChild();\n+      // Native JS functions with local side effects that cannot be observed directly.\n+      if (target.getType() == Token.NAME) {\n+        String functionName = target.getString();\n+        return \"eval\".equals(functionName) || \"parseInt\".equals(functionName);\n+      }\n+    }\n+    return false;\n   }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+  static boolean newHasLocalResult(Node n) {\n+    if (n.getType() == Token.NEW) {\n+      Node target = n.getFirstChild();\n+      switch (target.getType()) {\n+        case Token.NAME:\n+          return \"RegExp\".equals(target.getString());\n+        case Token.GETPROP:\n+          return \"Date\".equals(target.getLastChild().getString());\n+        default:\n+          break;\n+      }\n     }\n+    return false;\n   }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+  static boolean evaluatesToSimpleObject(Node n) {\n+    int type = n.getType();\n+    return type == Token.ARRAYLIT || type == Token.OBJECTLIT;\n+  }\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+  static boolean isAssignmentOp(Node n) {\n+    int type = n.getType();\n+    return type == Token.ASSIGN || type == Token.EXPR_RESULT ||\n+        type == Token.ASSIGN_ADD ||\n+        type == Token.ASSIGN_BITAND ||\n+        type == Token.ASSIGN_BITOR ||\n+        type == Token.ASSIGN_BITXOR ||\n+        type == Token.ASSIGN_DIV ||\n+        type == Token.ASSIGN_LSH ||\n+        type == Token.ASSIGN_MOD ||\n+        type == Token.ASSIGN_MUL ||\n+        type == Token.ASSIGN_RSH ||\n+        type == Token.ASSIGN_SUB ||\n+        type == Token.ASSIGN_URSH;\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}