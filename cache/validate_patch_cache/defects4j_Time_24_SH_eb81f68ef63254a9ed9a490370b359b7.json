{
    "patch": "        } catch (IllegalFieldValueException e) {\n            int errorIndex = -1;\n            for (int i = 0; i < count; i++) {\n                int index = savedFields[i].set(erased, 0);\n                if (index < 0) {\n                    index = ~index;\n                    if (index > errorIndex) {\n                        errorIndex = index;\n                    }\n                }\n            }\n            if (errorIndex >= 0) {\n                DateTimeField field = savedFields[errorIndex].iField;\n                String message = \"Value \" + savedFields[errorIndex].iValue +\n                    \" for \" + field.getName() + \" is not supported: \";\n                DurationField rangeDurationField = field.getDurationField();\n                long range;\n                if (rangeDurationField == null) {\n                    range = Long.MAX_VALUE;\n                } else {\n                    range = rangeDurationField.getUnitMillis() * (field.getRange().getMaximum() - field.getRange().getMinimum() + 1);\n                }\n                if (savedFields[errorIndex].iValue < field.getRange().getMinimum()) {\n                    message += \"Value must be greater than or equal to \" + field.getRange().getMinimum();\n                } else if (savedFields[errorIndex].iValue > field.getRange().getMaximum()) {\n                    message += \"Value must be less than or equal to \" + field.getRange().getMaximum();\n                } else if (rangeDurationField != null && Math.abs(savedFields[errorIndex].iValue * rangeDurationField.getUnitMillis()) > range) {\n                    message += \"Value must be in the range [\" +\n                        (savedFields[errorIndex].iValue * rangeDurationField.getUnitMillis()) + \",\" +\n                        (field.getRange().getMaximum() * rangeDurationField.getUnitMillis()) + \"]\";\n                } else {\n                    message += \"Value \" + savedFields[errorIndex].iValue +\n                    \" is not supported for field \" + field.getName();\n                }\n                throw new IllegalFieldValueException(\n                    field.getType(), message, savedFields[errorIndex].iValue, null, null);\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c2c984e0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            int errorIndex = -1;\n+            for (int i = 0; i < count; i++) {\n+                int index = savedFields[i].set(erased, 0);\n+                if (index < 0) {\n+                    index = ~index;\n+                    if (index > errorIndex) {\n+                        errorIndex = index;\n+                    }\n+                }\n+            }\n+            if (errorIndex >= 0) {\n+                DateTimeField field = savedFields[errorIndex].iField;\n+                String message = \"Value \" + savedFields[errorIndex].iValue +\n+                    \" for \" + field.getName() + \" is not supported: \";\n+                DurationField rangeDurationField = field.getDurationField();\n+                long range;\n+                if (rangeDurationField == null) {\n+                    range = Long.MAX_VALUE;\n+                } else {\n+                    range = rangeDurationField.getUnitMillis() * (field.getRange().getMaximum() - field.getRange().getMinimum() + 1);\n+                }\n+                if (savedFields[errorIndex].iValue < field.getRange().getMinimum()) {\n+                    message += \"Value must be greater than or equal to \" + field.getRange().getMinimum();\n+                } else if (savedFields[errorIndex].iValue > field.getRange().getMaximum()) {\n+                    message += \"Value must be less than or equal to \" + field.getRange().getMaximum();\n+                } else if (rangeDurationField != null && Math.abs(savedFields[errorIndex].iValue * rangeDurationField.getUnitMillis()) > range) {\n+                    message += \"Value must be in the range [\" +\n+                        (savedFields[errorIndex].iValue * rangeDurationField.getUnitMillis()) + \",\" +\n+                        (field.getRange().getMaximum() * rangeDurationField.getUnitMillis()) + \"]\";\n+                } else {\n+                    message += \"Value \" + savedFields[errorIndex].iValue +\n+                    \" is not supported for field \" + field.getName();\n+                }\n+                throw new IllegalFieldValueException(\n+                    field.getType(), message, savedFields[errorIndex].iValue, null, null);\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}