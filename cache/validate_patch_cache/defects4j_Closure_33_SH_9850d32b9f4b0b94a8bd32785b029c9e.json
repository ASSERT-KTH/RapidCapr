{
    "patch": "    // Do nothing if `this` is not a record type or `constraintObj` is not a record type or a subtype of `this`.\n    if (!(this instanceof RecordType) || \n        (!constraintObj.isRecordType() && !this.isSuperTypeOf(constraintObj))) {\n      return;\n    }\n\n    // Modify the record literal to conform to the constraint.\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (!hasProperty(prop)) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        defineInferredProperty(prop, propType, null);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..ba3d22c9 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,19 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    // Do nothing if `this` is not a record type or `constraintObj` is not a record type or a subtype of `this`.\n+    if (!(this instanceof RecordType) || \n+        (!constraintObj.isRecordType() && !this.isSuperTypeOf(constraintObj))) {\n+      return;\n+    }\n+\n+    // Modify the record literal to conform to the constraint.\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      if (!hasProperty(prop)) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        defineInferredProperty(prop, propType, null);\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}