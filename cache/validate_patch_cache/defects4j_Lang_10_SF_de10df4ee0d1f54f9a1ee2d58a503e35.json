{
    "patch": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class StringUtil {\n    \n    private static final Pattern PERCENT_PATTERN = Pattern.compile(\"%(\\\\d\\\\$)?[-#\\\\+ 0,(\\\\<]*\\\\d*(\\\\.\\\\d+)?[a-zA-Z]\");\n    private static final Pattern QUOTED_PATTERN = Pattern.compile(\"(''''|''|[^'])*'\");\n\n    public static String[] splitWithEscape(String str, char separatorChar, char escapeChar) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return new String[0];\n        }\n        List<String> list = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        boolean inQuotes = false;\n        int i = 0;\n        while (i < len) {\n            char c = str.charAt(i++);\n            if (c == escapeChar) {\n                if (i == len) {\n                    break;\n                }\n                c = str.charAt(i++);\n                sb.append(c);\n            } else if (c == separatorChar && !inQuotes) {\n                list.add(sb.toString());\n                sb.setLength(0);\n            } else {\n                if (c == '\\'') {\n                    Matcher matcher = QUOTED_PATTERN.matcher(str.substring(i - 1));\n                    if (matcher.lookingAt()) {\n                        int end = matcher.end();\n                        sb.append(str, i - 1, i - 1 + end);\n                        i += end - 1;\n                        continue;\n                    } else {\n                        inQuotes = !inQuotes;\n                    }\n                }\n                sb.append(c);\n            }\n        }\n        list.add(sb.toString());\n        return list.toArray(new String[0]);\n    }\n\n    public static String removePercent(String formatString) {\n        if (formatString == null) {\n            return null;\n        }\n        Matcher matcher = PERCENT_PATTERN.matcher(formatString);\n        int endIndex = 0;\n        if (matcher.find()) {\n            StringBuffer sb = new StringBuffer();\n            do {\n                sb.append(formatString.substring(endIndex, matcher.start()));\n                endIndex = matcher.end();\n            } while (matcher.find());\n            sb.append(formatString.substring(endIndex));\n            return sb.toString();\n        } else {\n            return formatString;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..67695685 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,76 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class StringUtil {\n+    \n+    private static final Pattern PERCENT_PATTERN = Pattern.compile(\"%(\\\\d\\\\$)?[-#\\\\+ 0,(\\\\<]*\\\\d*(\\\\.\\\\d+)?[a-zA-Z]\");\n+    private static final Pattern QUOTED_PATTERN = Pattern.compile(\"(''''|''|[^'])*'\");\n+\n+    public static String[] splitWithEscape(String str, char separatorChar, char escapeChar) {\n+        if (str == null) {\n+            return null;\n+        }\n+        int len = str.length();\n+        if (len == 0) {\n+            return new String[0];\n+        }\n+        List<String> list = new ArrayList<>();\n+        StringBuilder sb = new StringBuilder();\n+        boolean inQuotes = false;\n+        int i = 0;\n+        while (i < len) {\n+            char c = str.charAt(i++);\n+            if (c == escapeChar) {\n+                if (i == len) {\n+                    break;\n                 }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                c = str.charAt(i++);\n+                sb.append(c);\n+            } else if (c == separatorChar && !inQuotes) {\n+                list.add(sb.toString());\n+                sb.setLength(0);\n+            } else {\n+                if (c == '\\'') {\n+                    Matcher matcher = QUOTED_PATTERN.matcher(str.substring(i - 1));\n+                    if (matcher.lookingAt()) {\n+                        int end = matcher.end();\n+                        sb.append(str, i - 1, i - 1 + end);\n+                        i += end - 1;\n+                        continue;\n+                    } else {\n+                        inQuotes = !inQuotes;\n                     }\n-                    c= value.charAt(i);\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                sb.append(c);\n             }\n-            regex.append(c);\n         }\n-        return regex;\n+        list.add(sb.toString());\n+        return list.toArray(new String[0]);\n     }\n \n+    public static String removePercent(String formatString) {\n+        if (formatString == null) {\n+            return null;\n+        }\n+        Matcher matcher = PERCENT_PATTERN.matcher(formatString);\n+        int endIndex = 0;\n+        if (matcher.find()) {\n+            StringBuffer sb = new StringBuffer();\n+            do {\n+                sb.append(formatString.substring(endIndex, matcher.start()));\n+                endIndex = matcher.end();\n+            } while (matcher.find());\n+            sb.append(formatString.substring(endIndex));\n+            return sb.toString();\n+        } else {\n+            return formatString;\n+        }\n+    }\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}