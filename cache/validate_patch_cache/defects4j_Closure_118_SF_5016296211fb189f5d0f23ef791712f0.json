{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasInvalidProperty = false; // added line\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n>>>     if (child.getType() == Token.STRING) {\n>>>       continue;\n>>>     }\n \n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          hasInvalidProperty = true; // added line\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n\n      // Added block of code to handle the case when invalid properties are found\n      if (hasInvalidProperty) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        Node firstChild = n.getFirstChild();\n        String name = firstChild.isGetProp() || firstChild.isStringKey()\n                    ? firstChild.getString()\n                    : \"\";\n        compiler.report(JSError.make(\n            t.getSourceName(), firstChild,\n            \"Object literal contains invalid properties (\" + name + \")\", \n            Warnings.INVALIDATION, \"\", \"\", n.toString(), \"\"));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..e20158b1 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,11 +488,13 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+      boolean hasInvalidProperty = false; // added line\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n-\n+>>>     if (child.getType() == Token.STRING) {\n+>>>       continue;\n+>>>     }\n+ \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n         T type = typeSystem.getType(getScope(), n, name);\n@@ -500,8 +502,7 @@ class DisambiguateProperties<T> implements CompilerPass {\n         Property prop = getProperty(name);\n         if (!prop.scheduleRenaming(child,\n                                    processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n+          hasInvalidProperty = true; // added line\n           if (propertiesToErrorFor.containsKey(name)) {\n             compiler.report(JSError.make(\n                 t.getSourceName(), child, propertiesToErrorFor.get(name),\n@@ -510,6 +511,20 @@ class DisambiguateProperties<T> implements CompilerPass {\n           }\n         }\n       }\n+\n+      // Added block of code to handle the case when invalid properties are found\n+      if (hasInvalidProperty) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        Node firstChild = n.getFirstChild();\n+        String name = firstChild.isGetProp() || firstChild.isStringKey()\n+                    ? firstChild.getString()\n+                    : \"\";\n+        compiler.report(JSError.make(\n+            t.getSourceName(), firstChild,\n+            \"Object literal contains invalid properties (\" + name + \")\", \n+            Warnings.INVALIDATION, \"\", \"\", n.toString(), \"\"));\n+      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}