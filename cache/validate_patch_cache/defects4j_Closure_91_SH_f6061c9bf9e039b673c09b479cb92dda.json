{
    "patch": "      if (n.getParent != null && n.getParent().isAssign()) {\n        Node target = n.getParent().getLastChild();\n        if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n          Node llhs = parent.getFirstChild().getFirstChild();\n          if (llhs.getType() == Token. NAME &&\n              target.getString().equals(\"prototype\")) {\n            return false;\n          } else if (llhs.getType() == Token.GETPROP &&\n                     llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b328afcb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent != null && n.getParent().isAssign()) {\n+        Node target = n.getParent().getLastChild();\n+        if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getFirstChild())) {\n+          Node llhs = parent.getFirstChild().getFirstChild();\n+          if (llhs.getType() == Token. NAME &&\n+              target.getString().equals(\"prototype\")) {\n+            return false;\n+          } else if (llhs.getType() == Token.GETPROP &&\n+                     llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}