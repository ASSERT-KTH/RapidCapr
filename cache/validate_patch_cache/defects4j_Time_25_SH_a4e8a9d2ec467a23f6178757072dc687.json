{
    "patch": "                // if we just return offsetAdjusted, then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    long delta = nextLocal - instantAdjusted;\n                    if (offsetLocal != getOffset(nextLocal)) {\n                        delta -= DateTimeConstants.MILLIS_PER_HOUR;\n                    }\n                    return getOffset(nextLocal + delta);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..10969b05 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,17 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if we just return offsetAdjusted, then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    long delta = nextLocal - instantAdjusted;\n+                    if (offsetLocal != getOffset(nextLocal)) {\n+                        delta -= DateTimeConstants.MILLIS_PER_HOUR;\n+                    }\n+                    return getOffset(nextLocal + delta);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}