{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            readTypeVariableBounds((TypeVariable<?>) type, new HashSet<>(Arrays.asList(typeVariable)));\n        } else if (!type.equals(Object.class)) {\n            registerTypeVariablesOn(type);\n        }\n    }\n    \n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}\n\nprivate void readTypeVariableBounds(TypeVariable<?> variable, Set<TypeVariable<?>> visited) {\n    visited.add(variable);\n    for (Type type : variable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n            if (!visited.contains(typeVar)) {\n                readTypeVariableBounds(typeVar, visited);\n            }\n        } else if (!type.equals(Object.class)) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..bf12e2b34 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,36 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariableBounds((TypeVariable<?>) type, new HashSet<>(Arrays.asList(typeVariable)));\n+        } else if (!type.equals(Object.class)) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    \n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+}\n+\n+private void readTypeVariableBounds(TypeVariable<?> variable, Set<TypeVariable<?>> visited) {\n+    visited.add(variable);\n+    for (Type type : variable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+            if (!visited.contains(typeVar)) {\n+                readTypeVariableBounds(typeVar, visited);\n+            }\n+        } else if (!type.equals(Object.class)) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}