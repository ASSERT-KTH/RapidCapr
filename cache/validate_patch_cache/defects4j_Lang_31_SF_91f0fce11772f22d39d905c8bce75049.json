{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    int csLength = strLength + searchLength;\n    char[] chars = new char[csLength];\n    str.getChars(0, strLength, chars, 0);\n    System.arraycopy(searchChars, 0, chars, strLength, searchLength);\n    boolean[] hits = new boolean[Character.MAX_VALUE];\n    for (int i = 0; i < strLength; i++) {\n        if(Character.isHighSurrogate(chars[i]) && i < strLength - 1) {\n            int codePoint = Character.toCodePoint(chars[i], chars[i + 1]);\n            i++;\n            for (int j = strLength; j < csLength; j++) {\n                if(Character.isHighSurrogate(chars[j]) && j < csLength - 1) {\n                    int codePoint2 = Character.toCodePoint(chars[j], chars[j + 1]);\n                    j++;\n                    if (codePoint == codePoint2) {\n                        return true;\n                    }\n                } else {\n                    if (chars[j] == chars[i] || chars[j] == chars[i + 1]) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            hits[chars[i]] = true;\n        }\n    }\n    for (int i = strLength; i < csLength; i++) {\n        if(Character.isHighSurrogate(chars[i]) && i < csLength - 1) {\n            int codePoint = Character.toCodePoint(chars[i], chars[i + 1]);\n            i++;\n            if (hits[codePoint]) {\n                return true;\n            }\n        } else {\n            if (hits[chars[i]]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d80e30d2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,53 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    int csLength = strLength + searchLength;\n+    char[] chars = new char[csLength];\n+    str.getChars(0, strLength, chars, 0);\n+    System.arraycopy(searchChars, 0, chars, strLength, searchLength);\n+    boolean[] hits = new boolean[Character.MAX_VALUE];\n+    for (int i = 0; i < strLength; i++) {\n+        if(Character.isHighSurrogate(chars[i]) && i < strLength - 1) {\n+            int codePoint = Character.toCodePoint(chars[i], chars[i + 1]);\n+            i++;\n+            for (int j = strLength; j < csLength; j++) {\n+                if(Character.isHighSurrogate(chars[j]) && j < csLength - 1) {\n+                    int codePoint2 = Character.toCodePoint(chars[j], chars[j + 1]);\n+                    j++;\n+                    if (codePoint == codePoint2) {\n+                        return true;\n+                    }\n+                } else {\n+                    if (chars[j] == chars[i] || chars[j] == chars[i + 1]) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            hits[chars[i]] = true;\n+        }\n+    }\n+    for (int i = strLength; i < csLength; i++) {\n+        if(Character.isHighSurrogate(chars[i]) && i < csLength - 1) {\n+            int codePoint = Character.toCodePoint(chars[i], chars[i + 1]);\n+            i++;\n+            if (hits[codePoint]) {\n+                return true;\n+            }\n+        } else {\n+            if (hits[chars[i]]) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}