{
    "patch": "public static final int COUNT = 16;\n\npublic static List<Boolean> getBits(int value) {\n    List<Boolean> bits = new ArrayList<>(COUNT);\n    for (int i = COUNT - 1; i >= 0; i--) {\n        int mask = 1 << i;\n        bits.add((value & mask) != 0);\n    }\n    return bits;\n}\n\npublic static double getTypedPercent(JSONObject data) {\n    int total = 0;\n    int typed = 0;\n\n    JSONArray questions = data.getJSONArray(\"questions\");\n    for (int i = 0; i < questions.length(); i++) {\n        JSONObject question = questions.getJSONObject(i);\n        if (question.has(\"keypresses\")) {\n            total++;\n            JSONArray keypresses = question.getJSONArray(\"keypresses\");\n            if (keypresses.length() > 0) {\n                typed++;\n            }\n        }\n    }\n\n    return (double)typed/total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b22539ce 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,35 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static final int COUNT = 16;\n+\n+public static List<Boolean> getBits(int value) {\n+    List<Boolean> bits = new ArrayList<>(COUNT);\n+    for (int i = COUNT - 1; i >= 0; i--) {\n+        int mask = 1 << i;\n+        bits.add((value & mask) != 0);\n+    }\n+    return bits;\n+}\n+\n+public static double getTypedPercent(JSONObject data) {\n+    int total = 0;\n+    int typed = 0;\n+\n+    JSONArray questions = data.getJSONArray(\"questions\");\n+    for (int i = 0; i < questions.length(); i++) {\n+        JSONObject question = questions.getJSONObject(i);\n+        if (question.has(\"keypresses\")) {\n+            total++;\n+            JSONArray keypresses = question.getJSONArray(\"keypresses\");\n+            if (keypresses.length() > 0) {\n+                typed++;\n+            }\n+        }\n+    }\n+\n+    return (double)typed/total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}