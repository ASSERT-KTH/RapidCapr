{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix x = m;\n    RealMatrix y = identity;\n    while (true) {\n        final RealMatrix prevX = x;\n        final RealMatrix prevY = y;\n        final RealMatrix tmp = prevX.add(prevY);\n        x = tmp.scalarMultiply(0.5);\n        y = prevY.multiply(prevX).add(m).scalarMultiply(0.5).multiply(y.pow(-1));\n        if (x.subtract(prevX).getNorm() < 1E-6) {\n            break;\n        }\n    }\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0786774f5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix x = m;\n+    RealMatrix y = identity;\n+    while (true) {\n+        final RealMatrix prevX = x;\n+        final RealMatrix prevY = y;\n+        final RealMatrix tmp = prevX.add(prevY);\n+        x = tmp.scalarMultiply(0.5);\n+        y = prevY.multiply(prevX).add(m).scalarMultiply(0.5).multiply(y.pow(-1));\n+        if (x.subtract(prevX).getNorm() < 1E-6) {\n+            break;\n+        }\n     }\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}