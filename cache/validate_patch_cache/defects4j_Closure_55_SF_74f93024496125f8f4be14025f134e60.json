{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isFunction()) {\n      return true;\n    }\n    if (n.isCall()) {\n      String fnName = null;\n      if (n.hasChildren()) {\n        Node callee = n.getFirstChild();\n        if (callee.isName()) {\n          fnName = callee.getString();\n        } else if (callee.isGetProp()) {\n          Node propNode = callee.getLastChild();\n          if (propNode.isString()) {\n            fnName = propNode.getString();\n          }\n        }\n      }\n      return (fnName != null) && functionRegistry.isReduceableFunction(fnName);\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..51d7a024 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,25 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (n.isFunction()) {\n+      return true;\n+    }\n+    if (n.isCall()) {\n+      String fnName = null;\n+      if (n.hasChildren()) {\n+        Node callee = n.getFirstChild();\n+        if (callee.isName()) {\n+          fnName = callee.getString();\n+        } else if (callee.isGetProp()) {\n+          Node propNode = callee.getLastChild();\n+          if (propNode.isString()) {\n+            fnName = propNode.getString();\n+          }\n+        }\n+      }\n+      return (fnName != null) && functionRegistry.isReduceableFunction(fnName);\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}