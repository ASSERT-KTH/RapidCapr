{
    "patch": "public Fraction reduce() {\n    int n = numerator;\n    int d = denominator;\n\n    if (n == 0) {\n        return ZERO;\n    }\n\n    // Compute the Greatest Common Divisor (GCD) of n and d\n    int gcd = gcd(Math.abs(n), Math.abs(d));\n\n    // Reduce the fraction using the GCD\n    n /= gcd;\n    d /= gcd;\n\n    // Flip the sign of the denominator if it's negative\n    if (d < 0) {\n        n = -n;\n        d = -d;\n    }\n\n    if (d == 1) {\n        return new Fraction(n);\n    }\n\n    return new Fraction(n, d);\n}\n\n// Compute the Greatest Common Divisor (GCD) of two integers\nprivate int gcd(int a, int b) {\n    while (b != 0) {\n        int t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..16b89363 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,44 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int n = numerator;\n+    int d = denominator;\n+\n+    if (n == 0) {\n+        return ZERO;\n+    }\n+\n+    // Compute the Greatest Common Divisor (GCD) of n and d\n+    int gcd = gcd(Math.abs(n), Math.abs(d));\n+\n+    // Reduce the fraction using the GCD\n+    n /= gcd;\n+    d /= gcd;\n+\n+    // Flip the sign of the denominator if it's negative\n+    if (d < 0) {\n+        n = -n;\n+        d = -d;\n     }\n \n+    if (d == 1) {\n+        return new Fraction(n);\n+    }\n+\n+    return new Fraction(n, d);\n+}\n+\n+// Compute the Greatest Common Divisor (GCD) of two integers\n+private int gcd(int a, int b) {\n+    while (b != 0) {\n+        int t = b;\n+        b = a % b;\n+        a = t;\n+    }\n+    return a;\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "error: constructor Fraction in class Fraction cannot be applied to given types;",
    "test_result": "ERROR"
}