{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // Check if we have an expression that can be folded\n    if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n      boolean containsIf = false;\n      boolean containsNonIf = false;\n\n      for (Node child : maybeExpr.children()) {\n        if (child.getType() == Token.IF) {\n          if (child.getChildCount() != 2 || child.getLastChild().getType() != Token.BLOCK) {\n            // If the \"if\" statement doesn't have a block body, or it contains an \"else\" statement, we can't fold\n            return false;\n          }\n          containsIf = true;\n        } else if (child.getType() == Token.HOOK) {\n          // If we have a conditional expression, check if the branches are expressions\n          Node trueExpr = child.getSecondChild();\n          Node falseExpr = child.getLastChild();\n          if (NodeUtil.isStatementBlock(trueExpr) || NodeUtil.isStatementBlock(falseExpr)) {\n            return false;\n          }\n        } else if (NodeUtil.isExpressionNode(child)) {\n          containsNonIf = true;\n        } else if (child.getType() != Token.EMPTY) {\n          // If there's any node besides an IF, a conditional expression, or an expression, we can't fold\n          return false;\n        }\n      }\n\n      // We can fold if we only have expressions (excluding conditional expressions) and at least one \"if\" statement,\n      // and all of those \"if\" statements have block bodies and no \"else\" statements\n      return containsIf && !containsNonIf;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..7839e360 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,46 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // Check if we have an expression that can be folded\n+    if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n+      boolean containsIf = false;\n+      boolean containsNonIf = false;\n+\n+      for (Node child : maybeExpr.children()) {\n+        if (child.getType() == Token.IF) {\n+          if (child.getChildCount() != 2 || child.getLastChild().getType() != Token.BLOCK) {\n+            // If the \"if\" statement doesn't have a block body, or it contains an \"else\" statement, we can't fold\n+            return false;\n+          }\n+          containsIf = true;\n+        } else if (child.getType() == Token.HOOK) {\n+          // If we have a conditional expression, check if the branches are expressions\n+          Node trueExpr = child.getSecondChild();\n+          Node falseExpr = child.getLastChild();\n+          if (NodeUtil.isStatementBlock(trueExpr) || NodeUtil.isStatementBlock(falseExpr)) {\n+            return false;\n+          }\n+        } else if (NodeUtil.isExpressionNode(child)) {\n+          containsNonIf = true;\n+        } else if (child.getType() != Token.EMPTY) {\n+          // If there's any node besides an IF, a conditional expression, or an expression, we can't fold\n+          return false;\n+        }\n       }\n-    }\n \n-    return false;\n+      // We can fold if we only have expressions (excluding conditional expressions) and at least one \"if\" statement,\n+      // and all of those \"if\" statements have block bodies and no \"else\" statements\n+      return containsIf && !containsNonIf;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}