{
    "patch": "        // evaluate 30 minutes before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 30 * DateTimeConstants.MILLIS_PER_MINUTE);\n        long instantAfter = convertUTCToLocal(instant + 30 * DateTimeConstants.MILLIS_PER_MINUTE);\n        if (instantBefore == instantAfter) {\n            // not an overlap (less than is a gap, equal is normal case)\n            return instant;\n        }\n\n        long instantLocal = convertUTCToLocal(instant);\n        long offsetBefore = getOffset(instantBefore);\n        long offsetAfter = getOffset(instantAfter);\n        if (offsetBefore < offsetAfter) {\n            if (instantLocal >= instantAfter) {\n                if (earlierOrLater) {\n                    // currently in earlier offset\n                    return instant;\n                } else {\n                    // currently in later offset\n                    return instant - offsetAfter;\n                }\n            } else {\n                // (instantLocal < instantAfter)\n                if (earlierOrLater) {\n                    // currently in earlier offset\n                    return instant - offsetBefore;\n                } else {\n                    // currently in later offset\n                    return instant;\n                }\n            }\n        } else if (offsetBefore > offsetAfter) {\n            if (instantLocal >= instantBefore) {\n                if (earlierOrLater) {\n                    // currently in earlier offset\n                    return instant - offsetBefore;\n                } else {\n                    // currently in later offset\n                    return instant;\n                }\n            } else {\n                // (instantLocal < instantBefore)\n                if (earlierOrLater) {\n                    // currently in earlier offset\n                    return instant;\n                } else {\n                    // currently in later offset\n                    return instant - offsetAfter;\n                }\n            }\n        }\n\n        // offsetBefore == offsetAfter\n        if (earlierOrLater) {\n            // choose the earlier instant\n            return instant - offsetBefore;\n        } else {\n            // choose the later instant\n            return instant - offsetAfter;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..6b35282c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,64 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        // evaluate 30 minutes before and after to work out if anything is happening\n+        long instantBefore = convertUTCToLocal(instant - 30 * DateTimeConstants.MILLIS_PER_MINUTE);\n+        long instantAfter = convertUTCToLocal(instant + 30 * DateTimeConstants.MILLIS_PER_MINUTE);\n         if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+            // not an overlap (less than is a gap, equal is normal case)\n+            return instant;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n-    }\n+\n+        long instantLocal = convertUTCToLocal(instant);\n+        long offsetBefore = getOffset(instantBefore);\n+        long offsetAfter = getOffset(instantAfter);\n+        if (offsetBefore < offsetAfter) {\n+            if (instantLocal >= instantAfter) {\n+                if (earlierOrLater) {\n+                    // currently in earlier offset\n+                    return instant;\n+                } else {\n+                    // currently in later offset\n+                    return instant - offsetAfter;\n+                }\n+            } else {\n+                // (instantLocal < instantAfter)\n+                if (earlierOrLater) {\n+                    // currently in earlier offset\n+                    return instant - offsetBefore;\n+                } else {\n+                    // currently in later offset\n+                    return instant;\n+                }\n+            }\n+        } else if (offsetBefore > offsetAfter) {\n+            if (instantLocal >= instantBefore) {\n+                if (earlierOrLater) {\n+                    // currently in earlier offset\n+                    return instant - offsetBefore;\n+                } else {\n+                    // currently in later offset\n+                    return instant;\n+                }\n+            } else {\n+                // (instantLocal < instantBefore)\n+                if (earlierOrLater) {\n+                    // currently in earlier offset\n+                    return instant;\n+                } else {\n+                    // currently in later offset\n+                    return instant - offsetAfter;\n+                }\n+            }\n+        }\n+\n+        // offsetBefore == offsetAfter\n+        if (earlierOrLater) {\n+            // choose the earlier instant\n+            return instant - offsetBefore;\n+        } else {\n+            // choose the later instant\n+            return instant - offsetAfter;\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}