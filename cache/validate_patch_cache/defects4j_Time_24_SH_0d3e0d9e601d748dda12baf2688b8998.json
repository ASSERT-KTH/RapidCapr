{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            try {\n                millis = savedField.set(millis, resetFields);\n                \n                if (i + 1 < count) {\n                    DurationField currentField = savedField.iField.getDurationField();\n                    SavedField nextField = savedFields[i + 1];\n                    DurationField nextDurationField = nextField.iField.getDurationField();\n                    \n                    // if next duration field is smaller than current field or they have the same duration\n                    if (compareReverse(currentField, nextDurationField) >= 0) {\n                        // if next field is year, correct year and then set millis again\n                        if (DateTimeFieldType.year().equals(nextField.iField.getType())) {\n                            long newY = Long.parseLong(String.valueOf(nextField.iValue));\n                            if (newY < 100) {\n                                newY += (newY < 50 ? 2000 : 1900);\n                            }\n                            millis = strictChrono.year().set(millis, newY);\n                            i++;\n                            continue;\n                        } else {\n                            throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField + \" -> \" + nextDurationField);\n                        }\n                    }\n                }\n            } catch (IllegalFieldValueException e) {\n                if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n                    long instant = savedField.iField.set(0L, iDefaultYear);\n                    millis = savedField.iField.set(instant, savedField.iValue);\n                } else if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    throw e;\n                } else {\n                    throw e;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5a7b3729 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,44 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+                \n+                if (i + 1 < count) {\n+                    DurationField currentField = savedField.iField.getDurationField();\n+                    SavedField nextField = savedFields[i + 1];\n+                    DurationField nextDurationField = nextField.iField.getDurationField();\n+                    \n+                    // if next duration field is smaller than current field or they have the same duration\n+                    if (compareReverse(currentField, nextDurationField) >= 0) {\n+                        // if next field is year, correct year and then set millis again\n+                        if (DateTimeFieldType.year().equals(nextField.iField.getType())) {\n+                            long newY = Long.parseLong(String.valueOf(nextField.iValue));\n+                            if (newY < 100) {\n+                                newY += (newY < 50 ? 2000 : 1900);\n+                            }\n+                            millis = strictChrono.year().set(millis, newY);\n+                            i++;\n+                            continue;\n+                        } else {\n+                            throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField + \" -> \" + nextDurationField);\n+                        }\n+                    }\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n+                    long instant = savedField.iField.set(0L, iDefaultYear);\n+                    millis = savedField.iField.set(instant, savedField.iValue);\n+                } else if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    throw e;\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}