{
    "patch": "if (provided == null || provided.explicitModule == null) {\n  JSModule module = t.getModule();\n  if (!module.contains(errorsByNamespace)) { // Replace this statement\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, ns, t.getSourceName()));\n  } else {\n    compiler.report(\n        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n            providedModule.getName(),\n            module.getName()));\n  }\n} else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..263cb6c3 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,18 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+if (provided == null || provided.explicitModule == null) {\n+  JSModule module = t.getModule();\n+  if (!module.contains(errorsByNamespace)) { // Replace this statement\n+    unrecognizedRequires.add(\n+        new UnrecognizedRequire(n, ns, t.getSourceName()));\n+  } else {\n+    compiler.report(\n+        t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+            providedModule.getName(),\n+            module.getName()));\n+  }\n+} else {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}