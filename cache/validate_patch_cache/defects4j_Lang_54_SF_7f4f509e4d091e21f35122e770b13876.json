{
    "patch": "public static Locale toLocale(String str) throws IllegalArgumentException {\n    if (str == null) {\n        return null;\n    }\n    str = str.trim();\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String lang = \"\", country = \"\", variant = \"\";\n    int idx1 = str.indexOf('_');\n    int idx2 = idx1 == -1 ? -1 : str.indexOf('_', idx1 + 1);\n    if (idx1 == -1 && len == 2) { // lang code only\n        lang = str;\n    } else if (idx1 == -1 && len == 5) { // lang and country codes\n        lang = str.substring(0, 2);\n        country = str.substring(2);\n    } else if (idx1 == -1 || (idx2 == -1 && len - idx1 != 3) || (idx2 != -1 && len - idx1 != 4)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    } else { // lang, country, and variant codes\n        lang = str.substring(0, idx1);\n        country = str.substring(idx1 + 1, idx2);\n        variant = str.substring(idx2 + 1);\n    }\n    if (!isValidCode(lang, 2) || !isValidCode(country, 2) || !isValidCode(variant, -8)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (variant.isEmpty()) {\n        return new Locale(lang, country);\n    } else {\n        return new Locale(lang, country, variant);\n    }\n}\n\nprivate static boolean isValidCode(String code, int length) {\n    if (code.isEmpty()) {\n        return true;\n    }\n    if (length > 0 && code.length() != length) {\n        return false;\n    }\n    if (length < 0 && code.length() > -length) {\n        return false;\n    }\n    for (int i = 0; i < code.length(); i++) {\n        char c = code.charAt(i);\n        if (c < 'a' || c > 'z' && c < 'A' || c > 'Z' && c < '0' || c > '9' || c == '_') {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..d26efe93 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,58 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n+public static Locale toLocale(String str) throws IllegalArgumentException {\n+    if (str == null) {\n+        return null;\n+    }\n+    str = str.trim();\n+    int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String lang = \"\", country = \"\", variant = \"\";\n+    int idx1 = str.indexOf('_');\n+    int idx2 = idx1 == -1 ? -1 : str.indexOf('_', idx1 + 1);\n+    if (idx1 == -1 && len == 2) { // lang code only\n+        lang = str;\n+    } else if (idx1 == -1 && len == 5) { // lang and country codes\n+        lang = str.substring(0, 2);\n+        country = str.substring(2);\n+    } else if (idx1 == -1 || (idx2 == -1 && len - idx1 != 3) || (idx2 != -1 && len - idx1 != 4)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    } else { // lang, country, and variant codes\n+        lang = str.substring(0, idx1);\n+        country = str.substring(idx1 + 1, idx2);\n+        variant = str.substring(idx2 + 1);\n+    }\n+    if (!isValidCode(lang, 2) || !isValidCode(country, 2) || !isValidCode(variant, -8)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (variant.isEmpty()) {\n+        return new Locale(lang, country);\n+    } else {\n+        return new Locale(lang, country, variant);\n+    }\n+}\n+\n+private static boolean isValidCode(String code, int length) {\n+    if (code.isEmpty()) {\n+        return true;\n+    }\n+    if (length > 0 && code.length() != length) {\n+        return false;\n+    }\n+    if (length < 0 && code.length() > -length) {\n+        return false;\n+    }\n+    for (int i = 0; i < code.length(); i++) {\n+        char c = code.charAt(i);\n+        if (c < 'a' || c > 'z' && c < 'A' || c > 'Z' && c < '0' || c > '9' || c == '_') {\n+            return false;\n         }\n     }\n+    return true;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX",
    "test_result": "FAIL"
}