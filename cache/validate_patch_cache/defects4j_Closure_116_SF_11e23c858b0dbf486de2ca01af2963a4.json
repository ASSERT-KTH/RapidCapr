{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node arg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object\n    // as the first parameter.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (!arg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        arg = arg.getNext();\n      } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode),\n            \"Apply call node must be removed before this step:\\n %s\", callNode);\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node param = NodeUtil.getFunctionParameters(fnNode);\n\n    while (arg != null || param.hasChildren()) {\n      // Check if a parameter is used more than once.\n      if (param.hasChildren()) {\n        String paramName = param.getFirstChild().getString();\n        if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n            return CanInlineResult.NO;\n          }\n          param.removeChild(param.getFirstChild());\n          continue;\n        }\n      }\n\n      // For every call argument check for side-effects.\n      if (arg != null && NodeUtil.mayHaveSideEffects(arg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      arg = arg == null ? null : arg.getNext();\n      param = param.getFirstChild() != null ? param.getFirstChild().getNext() : param;\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..57ca639a 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,63 +686,53 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node arg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n+    // Functions called via 'call' and 'apply' have a this-object\n+    // as the first parameter.\n     if (!callNode.getFirstChild().isName()) {\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+        if (!arg.isThis()) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        arg = arg.getNext();\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode),\n+            \"Apply call node must be removed before this step:\\n %s\", callNode);\n       }\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    Node param = NodeUtil.getFunctionParameters(fnNode);\n+\n+    while (arg != null || param.hasChildren()) {\n+      // Check if a parameter is used more than once.\n+      if (param.hasChildren()) {\n+        String paramName = param.getFirstChild().getString();\n+        if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n+          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n             return CanInlineResult.NO;\n           }\n+          param.removeChild(param.getFirstChild());\n+          continue;\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      // For every call argument check for side-effects.\n+      if (arg != null && NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+\n+      arg = arg == null ? null : arg.getNext();\n+      param = param.getFirstChild() != null ? param.getFirstChild().getNext() : param;\n     }\n \n     return CanInlineResult.YES;",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}