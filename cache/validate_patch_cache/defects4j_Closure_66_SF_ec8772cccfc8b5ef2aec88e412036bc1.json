{
    "patch": "public static double getTypedPercent(String json) {\n  Gson gson = new Gson();\n  Type type = new TypeToken<Map<String, Object>>() {}.getType();\n  Map<String, Object> map = gson.fromJson(json, type);\n\n  int typed = 0;\n  int total = 0;\n\n  for (Map.Entry<String, Object> entry : map.entrySet()) {\n    if (entry.getValue() instanceof Integer) {\n      typed += 1;\n      total += 1;\n    } else if (entry.getValue() == null) {\n      // Do nothing\n    } else {\n      total += 1;\n    }\n  }\n\n  return (typed * 100.0) / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4056bb33 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+  Gson gson = new Gson();\n+  Type type = new TypeToken<Map<String, Object>>() {}.getType();\n+  Map<String, Object> map = gson.fromJson(json, type);\n+\n+  int typed = 0;\n+  int total = 0;\n+\n+  for (Map.Entry<String, Object> entry : map.entrySet()) {\n+    if (entry.getValue() instanceof Integer) {\n+      typed += 1;\n+      total += 1;\n+    } else if (entry.getValue() == null) {\n+      // Do nothing\n+    } else {\n+      total += 1;\n+    }\n+  }\n+\n+  return (typed * 100.0) / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}