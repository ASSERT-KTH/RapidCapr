{
    "patch": "public static String escape(String str) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c <= 127 && c != '%' && !Character.isISOControl(c)) {\n            sb.append(c);\n        } else {\n            try {\n                byte[] bytes = String.valueOf(c).getBytes(\"ISO-8859-1\");\n                for (byte b : bytes) {\n                    sb.append('%');\n                    sb.append(Character.forDigit((b >> 4) & 0xf, 16));\n                    sb.append(Character.forDigit(b & 0xf, 16));\n                }\n            } catch (UnsupportedEncodingException e) {\n                // cannot happen, ISO-8859-1 is always supported\n            }\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..423532f7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,27 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escape(String str) {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        if (c <= 127 && c != '%' && !Character.isISOControl(c)) {\n+            sb.append(c);\n+        } else {\n+            try {\n+                byte[] bytes = String.valueOf(c).getBytes(\"ISO-8859-1\");\n+                for (byte b : bytes) {\n+                    sb.append('%');\n+                    sb.append(Character.forDigit((b >> 4) & 0xf, 16));\n+                    sb.append(Character.forDigit(b & 0xf, 16));\n+                }\n+            } catch (UnsupportedEncodingException e) {\n+                // cannot happen, ISO-8859-1 is always supported\n+            }\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}