{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codePoint = Character.codePointAt(input, pos);\n            if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                // write out the escaped surrogate pair\n                out.write(\"\\\\u\" + hex(input.charAt(pos)) + \"\\\\u\" + hex(input.charAt(pos + 1)));\n                // move to the next pair\n                pos += 2;\n            } else if (Character.isBmpCodePoint(codePoint)) {\n                out.write(codePoint);\n                pos++;\n            } else {\n                char[] chars = Character.toChars(codePoint);\n                out.write(chars);\n                pos += chars.length;\n            }\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n\nprivate static String hex(char ch) {\n    return Integer.toHexString(ch | 0x10000).substring(1);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..f20cf4d1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,43 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            int codePoint = Character.codePointAt(input, pos);\n+            if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                // write out the escaped surrogate pair\n+                out.write(\"\\\\u\" + hex(input.charAt(pos)) + \"\\\\u\" + hex(input.charAt(pos + 1)));\n+                // move to the next pair\n+                pos += 2;\n+            } else if (Character.isBmpCodePoint(codePoint)) {\n+                out.write(codePoint);\n+                pos++;\n+            } else {\n+                char[] chars = Character.toChars(codePoint);\n+                out.write(chars);\n+                pos += chars.length;\n             }\n+            continue;\n+        }\n+        for (int pt = 0; pt < consumed; pt++) {\n+            pos += Character.charCount(Character.codePointAt(input, pos));\n         }\n     }\n+}\n+\n+private static String hex(char ch) {\n+    return Integer.toHexString(ch | 0x10000).substring(1);\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[\ud842\udfb7]A> but was:<[\\ud842\\udfb7]A>",
    "test_result": "FAIL"
}