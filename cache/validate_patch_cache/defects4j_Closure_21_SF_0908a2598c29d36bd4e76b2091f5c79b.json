{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isComma()) {\n    warn(t, n, parent, \"This comma statement doesn't do anything.\");\n  } else if (n.isEmpty()) {\n    warn(t, n, parent, \"This empty statement doesn't do anything.\");\n  } else if (n.isExprResult() && !NodeUtil.isExpressionLiteralValue(n.getFirstChild(), true)) {\n    warn(t, n, parent, \"This statement doesn't do anything.\");\n  } else if (n.isAssign() && !NodeUtil.isExpressionLiteralValue(n.getLastChild(), true)) {\n    warn(t, n, parent, \"This assignment doesn't do anything.\");\n  } else if (isUselessCode(n) && !inFunctionOrCatch(parent)) {\n    warn(t, n, parent, \"This code doesn't do anything and should be removed.\");\n  }\n}\n\nprivate boolean isUselessCode(Node n) {\n  int type = n.getType();\n  if (type == Token.VOID || type == Token.TRUE || type == Token.FALSE) {\n    return true;\n  }\n  if (NodeUtil.isLiteralValue(n)) {\n    return false;\n  }\n  if (NodeUtil.isFunctionDeclaration(n)) {\n    return false;\n  }\n  if (n.isName() && (n.getBooleanProp(Node.IS_CONSTANT_NAME) || !n.getBooleanProp(Node.IS_LOCAL_FUNCTION))) {\n    return false;\n  }\n  if (NodeUtil.isExpressionNode(n) && !NodeUtil.mayHaveSideEffects(n) && !NodeUtil.isCallOrNew(n)) {\n    return true;\n  }\n  if (n.isDeclaresDefaultVar() || n.isExports()) {\n    return true;\n  }\n  return false;\n}\n\nprivate boolean inFunctionOrCatch(Node n) {\n  while (n != null) {\n    if (n.isFunction() || n.isCatch()) {\n      return true;\n    }\n    n = n.getParent();\n  }\n  return false;\n}\n\nprivate void warn(NodeTraversal t, Node n, Node parent, String message) {\n  JSError warning = t.makeError(n, Level.WARNING, USELESS_CODE, message);\n  t.getCompiler().report(warning);\n  problemNodes.add(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..61011e42 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,58 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isComma()) {\n+    warn(t, n, parent, \"This comma statement doesn't do anything.\");\n+  } else if (n.isEmpty()) {\n+    warn(t, n, parent, \"This empty statement doesn't do anything.\");\n+  } else if (n.isExprResult() && !NodeUtil.isExpressionLiteralValue(n.getFirstChild(), true)) {\n+    warn(t, n, parent, \"This statement doesn't do anything.\");\n+  } else if (n.isAssign() && !NodeUtil.isExpressionLiteralValue(n.getLastChild(), true)) {\n+    warn(t, n, parent, \"This assignment doesn't do anything.\");\n+  } else if (isUselessCode(n) && !inFunctionOrCatch(parent)) {\n+    warn(t, n, parent, \"This code doesn't do anything and should be removed.\");\n+  }\n+}\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+private boolean isUselessCode(Node n) {\n+  int type = n.getType();\n+  if (type == Token.VOID || type == Token.TRUE || type == Token.FALSE) {\n+    return true;\n+  }\n+  if (NodeUtil.isLiteralValue(n)) {\n+    return false;\n+  }\n+  if (NodeUtil.isFunctionDeclaration(n)) {\n+    return false;\n+  }\n+  if (n.isName() && (n.getBooleanProp(Node.IS_CONSTANT_NAME) || !n.getBooleanProp(Node.IS_LOCAL_FUNCTION))) {\n+    return false;\n+  }\n+  if (NodeUtil.isExpressionNode(n) && !NodeUtil.mayHaveSideEffects(n) && !NodeUtil.isCallOrNew(n)) {\n+    return true;\n+  }\n+  if (n.isDeclaresDefaultVar() || n.isExports()) {\n+    return true;\n+  }\n+  return false;\n+}\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+private boolean inFunctionOrCatch(Node n) {\n+  while (n != null) {\n+    if (n.isFunction() || n.isCatch()) {\n+      return true;\n     }\n+    n = n.getParent();\n   }\n+  return false;\n+}\n+\n+private void warn(NodeTraversal t, Node n, Node parent, String message) {\n+  JSError warning = t.makeError(n, Level.WARNING, USELESS_CODE, message);\n+  t.getCompiler().report(warning);\n+  problemNodes.add(n);\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}