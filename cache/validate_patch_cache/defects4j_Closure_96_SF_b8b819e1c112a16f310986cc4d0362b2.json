{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      // If there are no arguments left in the list and this is a var_args function\n      // then the last parameter gets the remaining arguments.\n      if (!arguments.hasNext() && functionType.hasRestFormals()) {\n        parameter = parameters.next();\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(parameter), \"0\",\n            String.valueOf(functionType.getMinArguments()), \" or more argument(s)\");\n        return;\n      }\n      if (arguments.hasNext()) {\n        argument = arguments.next();\n        if (argument.isSpread()) {\n          // We could try to propagate the type here? Getting the type of the\n          // child of a spread is quite hard.\n          this.visit(t, argument);\n          continue;\n        }\n      }\n      parameter = parameters.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n          getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    boolean hasRestFormals = functionType.hasRestFormals();\n    if (minArgs > numArgs && !hasRestFormals || maxArgs < numArgs) {\n      String suffix = \"\";\n      if (hasRestFormals) {\n        suffix = \" (or pass 'undefined' if not needed)\";\n      } else if (minArgs == maxArgs) {\n        suffix = \" required\";\n      } else {\n        suffix = \" between \" + minArgs + \" and \" + maxArgs + \" inclusive\";\n      }\n      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call\n          .getFirstChild(), /* ignoreQuoted= */ false), String.valueOf(numArgs),\n          String.valueOf(minArgs), suffix);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..31fae00d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1404,48 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) {\n+      // If there are no arguments left in the list and this is a var_args function\n+      // then the last parameter gets the remaining arguments.\n+      if (!arguments.hasNext() && functionType.hasRestFormals()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(parameter), \"0\",\n+            String.valueOf(functionType.getMinArguments()), \" or more argument(s)\");\n+        return;\n+      }\n+      if (arguments.hasNext()) {\n+        argument = arguments.next();\n+        if (argument.isSpread()) {\n+          // We could try to propagate the type here? Getting the type of the\n+          // child of a spread is quite hard.\n+          this.visit(t, argument);\n+          continue;\n+        }\n+      }\n+      parameter = parameters.next();\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+          getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+    boolean hasRestFormals = functionType.hasRestFormals();\n+    if (minArgs > numArgs && !hasRestFormals || maxArgs < numArgs) {\n+      String suffix = \"\";\n+      if (hasRestFormals) {\n+        suffix = \" (or pass 'undefined' if not needed)\";\n+      } else if (minArgs == maxArgs) {\n+        suffix = \" required\";\n+      } else {\n+        suffix = \" between \" + minArgs + \" and \" + maxArgs + \" inclusive\";\n+      }\n+      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call\n+          .getFirstChild(), /* ignoreQuoted= */ false), String.valueOf(numArgs),\n+          String.valueOf(minArgs), suffix);\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}