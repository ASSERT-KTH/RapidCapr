{
    "patch": "        // Check assignments made to the variable in the lifetime of the block.\n        for (BasicBlock b = ref.getBasicBlock().getParent();\n            b != null; b = b.getParent()) {\n          if (b.isFunction) {\n            // Ignore variables defined in functions; their lifetime is not easily analyzed.\n            return false;\n          } else if (b.isLoop) {\n            // Variables in loops may be assigned multiple times.\n            if (b == ref.getBasicBlock()) {\n              break;\n            }\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4e026beb 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Check assignments made to the variable in the lifetime of the block.\n+        for (BasicBlock b = ref.getBasicBlock().getParent();\n+            b != null; b = b.getParent()) {\n+          if (b.isFunction) {\n+            // Ignore variables defined in functions; their lifetime is not easily analyzed.\n+            return false;\n+          } else if (b.isLoop) {\n+            // Variables in loops may be assigned multiple times.\n+            if (b == ref.getBasicBlock()) {\n+              break;\n+            }\n+            return false;\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}