{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {     \n    if (NodeUtil.isNameDeclaration(n)) {\n      for (Node nameNode : NodeUtil.findLhsNodesInNode(n)) {          \n        NameInformation ns = createNameInformation(t, nameNode, parent);\n        if (ns != null) {\n          recordSet(ns.name, nameNode);\n        }\n      }\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, parent);\n        if (ns != null) {\n          JsName nameInfo = getName(nameNode.getString(), true);\n          if (nameInfo != null) {\n            recordSet(nameInfo.name, nameNode);\n          }\n        }\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n\n  if (n.isAssign() && n.getFirstChild().isGetProp()) {\n    Node getprop = n.getFirstChild();\n    String propName = getprop.getLastChild().getString();\n    Node nameNode = getprop.getFirstChild();\n    if (nameNode != null && nameNode.isName()) {\n      NameInformation ns = createNameInformation(t, nameNode, parent);\n        if (ns != null) {\n          if (propName.equals(\"prototype\")) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n    }\n  } else if (n.isCall() && n.getFirstChild().isGetProp()) {\n    Node getprop = n.getFirstChild();\n    String propName = getprop.getLastChild().getString();\n    Node nameNode = getprop.getFirstChild();\n\n    if (nameNode != null && nameNode.isName()) {\n      NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef && propName.equals(\"define\")) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n          }\n        }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..9df54b88 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,64 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (t.inGlobalScope()) {     \n+    if (NodeUtil.isNameDeclaration(n)) {\n+      for (Node nameNode : NodeUtil.findLhsNodesInNode(n)) {          \n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n+        if (ns != null) {\n+          recordSet(ns.name, nameNode);\n+        }\n+      }\n+    } else if (NodeUtil.isFunctionDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.isName()) {\n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n+        if (ns != null) {\n+          JsName nameInfo = getName(nameNode.getString(), true);\n+          if (nameInfo != null) {\n             recordSet(nameInfo.name, nameNode);\n           }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n         }\n       }\n+    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n+      NameInformation ns = createNameInformation(t, n, parent);\n+      if (ns != null) {\n+        recordSet(ns.name, n);\n+      }\n+    }\n+  }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n+  if (n.isAssign() && n.getFirstChild().isGetProp()) {\n+    Node getprop = n.getFirstChild();\n+    String propName = getprop.getLastChild().getString();\n+    Node nameNode = getprop.getFirstChild();\n+    if (nameNode != null && nameNode.isName()) {\n+      NameInformation ns = createNameInformation(t, nameNode, parent);\n         if (ns != null) {\n-          if (ns.isPrototype) {\n+          if (propName.equals(\"prototype\")) {\n             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n           } else {\n             recordSet(ns.name, nameNode);\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n+    }\n+  } else if (n.isCall() && n.getFirstChild().isGetProp()) {\n+    Node getprop = n.getFirstChild();\n+    String propName = getprop.getLastChild().getString();\n+    Node nameNode = getprop.getFirstChild();\n+\n+    if (nameNode != null && nameNode.isName()) {\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+        if (ns != null && ns.onlyAffectsClassDef && propName.equals(\"define\")) {\n           JsName name = getName(ns.name, false);\n           if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+            refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n           }\n         }\n-      }\n     }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}