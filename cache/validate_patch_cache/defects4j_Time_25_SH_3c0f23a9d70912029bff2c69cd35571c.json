{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // check if there is a gap or overlap\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        // we are in an overlap or a gap\n        boolean isOverlap = false;\n        if (offsetLocal > offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            if (prevLocal < instantAdjusted - offsetLocal) {\n                isOverlap = true;\n            }\n        } else {\n            if (nextLocal <= instantAdjusted) {\n                isOverlap = true;\n            }\n        }\n        boolean isGap = !isOverlap;\n\n        if (isOverlap && !isGap) {\n            // we are in an overlap, return the max of the two offsets\n            return Math.max(offsetLocal, offsetAdjusted);\n        } else if (!isOverlap && isGap) {\n            // we are in a gap, return the offset just before the gap\n            long prevLocal = previousTransition(instantAdjusted);\n            return getOffset(prevLocal);\n        } else {\n            // we have an unusual situation\n            if (offsetLocal < offsetAdjusted) {\n                // if we're in the fall-back transition range, return the standard offset\n                return offsetLocal;\n            } else {\n                // if we're in the spring-forward transition range, return the daylight offset\n                return offsetAdjusted;\n            }\n        }\n    } else {\n        // we are not near a DST boundary, return the difference\n        return (offsetLocal - offsetAdjusted < 0) ? offsetLocal : offsetAdjusted;\n    }\n} else {\n    // return the adjusted offset if we are not near a DST boundary\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3872cb29 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,50 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // check if there is a gap or overlap\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        // we are in an overlap or a gap\n+        boolean isOverlap = false;\n+        if (offsetLocal > offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            if (prevLocal < instantAdjusted - offsetLocal) {\n+                isOverlap = true;\n+            }\n+        } else {\n+            if (nextLocal <= instantAdjusted) {\n+                isOverlap = true;\n+            }\n+        }\n+        boolean isGap = !isOverlap;\n+\n+        if (isOverlap && !isGap) {\n+            // we are in an overlap, return the max of the two offsets\n+            return Math.max(offsetLocal, offsetAdjusted);\n+        } else if (!isOverlap && isGap) {\n+            // we are in a gap, return the offset just before the gap\n+            long prevLocal = previousTransition(instantAdjusted);\n+            return getOffset(prevLocal);\n+        } else {\n+            // we have an unusual situation\n+            if (offsetLocal < offsetAdjusted) {\n+                // if we're in the fall-back transition range, return the standard offset\n+                return offsetLocal;\n+            } else {\n+                // if we're in the spring-forward transition range, return the daylight offset\n+                return offsetAdjusted;\n+            }\n+        }\n+    } else {\n+        // we are not near a DST boundary, return the difference\n+        return (offsetLocal - offsetAdjusted < 0) ? offsetLocal : offsetAdjusted;\n+    }\n+} else {\n+    // return the adjusted offset if we are not near a DST boundary\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}