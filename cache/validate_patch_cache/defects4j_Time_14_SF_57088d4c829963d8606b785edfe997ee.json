{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            try {\n                return iChronology.get(partial, instant);\n            } catch (IllegalFieldValueException e) {\n                if (e.getDateTimeFieldType() != DateTimeFieldType.monthOfYear()) {\n                    throw e;\n                }\n                int year = iChronology.year().getInstantMillis(instant);\n                int month = iChronology.monthOfYear().getInstantMillis(instant);\n                int day = iChronology.dayOfMonth().getMinimumValue(year, month);\n                long early = iChronology.getDateTimeMillis(year, month, day, 0);\n                int[] newValues = iChronology.get(partial, early + instant - iChronology.getDateTimeMillis(year, month, 1, 0));\n                for (int i = 0; i < newValues.length; i++) {\n                    if (newValues[i] != values[i]) {\n                        return add(partial, i, newValues, valueToAdd);\n                    }\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..88a0f437 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            try {\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalFieldValueException e) {\n+                if (e.getDateTimeFieldType() != DateTimeFieldType.monthOfYear()) {\n+                    throw e;\n+                }\n+                int year = iChronology.year().getInstantMillis(instant);\n+                int month = iChronology.monthOfYear().getInstantMillis(instant);\n+                int day = iChronology.dayOfMonth().getMinimumValue(year, month);\n+                long early = iChronology.getDateTimeMillis(year, month, day, 0);\n+                int[] newValues = iChronology.get(partial, early + instant - iChronology.getDateTimeMillis(year, month, 1, 0));\n+                for (int i = 0; i < newValues.length; i++) {\n+                    if (newValues[i] != values[i]) {\n+                        return add(partial, i, newValues, valueToAdd);\n+                    }\n+                }\n+                throw e;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}