{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    Node parameter = null;\n    Node argument = null;\n    int ordinal = 0;\n\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!arguments.hasNext()) {\n            if (parameter.isVarArgs()) {\n                return;\n            } else {\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.valueOf(ordinal), String.valueOf(ordinal),\n                        parameter.isOptional() ? \" or more\" : \"\");\n                return;\n            }\n        }\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                getJSType(parameter), call, ordinal);\n    }\n\n    if (arguments.hasNext()) {\n        Node arg = arguments.next();\n        // We still have arguments left but no parameters to match them to.\n        // If the function is var_args, ignore the excess arguments.\n        // Otherwise, report the error.\n        if (functionType.isVarArgs()) {\n            validator.expectArgumentMatchesParameter(t, arg, getJSType(arg), null, call, ++ordinal);\n        } else {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(ordinal + 1), String.valueOf(ordinal),\n                    functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                            \" or less\" : \"\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..6b5ad09f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+    int ordinal = 0;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    while (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        if (!arguments.hasNext()) {\n+            if (parameter.isVarArgs()) {\n+                return;\n+            } else {\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.valueOf(ordinal), String.valueOf(ordinal),\n+                        parameter.isOptional() ? \" or more\" : \"\");\n+                return;\n+            }\n+        }\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (arguments.hasNext()) {\n+        Node arg = arguments.next();\n+        // We still have arguments left but no parameters to match them to.\n+        // If the function is var_args, ignore the excess arguments.\n+        // Otherwise, report the error.\n+        if (functionType.isVarArgs()) {\n+            validator.expectArgumentMatchesParameter(t, arg, getJSType(arg), null, call, ++ordinal);\n+        } else {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(ordinal + 1), String.valueOf(ordinal),\n+                    functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                            \" or less\" : \"\");\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}