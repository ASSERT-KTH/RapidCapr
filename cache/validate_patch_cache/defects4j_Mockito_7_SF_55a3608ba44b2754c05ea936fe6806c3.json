{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = this.parameterizedType.getActualTypeArguments();\n    TypeVariable<?>[] typeParameters = this.parameterizedType.getRawType().getTypeParameters();\n    for (int i = 0; i < typeParameters.length; i++) {\n        if (typeParameters[i].equals(typeVariable)) {\n            if (actualTypeArguments[i] instanceof TypeVariable) {\n                TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArguments[i];\n                Type resolvedTypeVariable = getActualTypeArgumentFor(actualTypeVariable);\n                if (resolvedTypeVariable != null) {\n                    return resolvedTypeVariable;\n                }\n            } else {\n                return actualTypeArguments[i];\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a8bea5169 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = this.parameterizedType.getActualTypeArguments();\n+    TypeVariable<?>[] typeParameters = this.parameterizedType.getRawType().getTypeParameters();\n+    for (int i = 0; i < typeParameters.length; i++) {\n+        if (typeParameters[i].equals(typeVariable)) {\n+            if (actualTypeArguments[i] instanceof TypeVariable) {\n+                TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArguments[i];\n+                Type resolvedTypeVariable = getActualTypeArgumentFor(actualTypeVariable);\n+                if (resolvedTypeVariable != null) {\n+                    return resolvedTypeVariable;\n+                }\n+            } else {\n+                return actualTypeArguments[i];\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}