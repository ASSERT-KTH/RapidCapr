{
    "patch": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageMapUtilities {\n\n    private static final Map<String, String> HTML_ESCAPES = new HashMap<>();\n\n    static {\n        HTML_ESCAPES.put(\"\\\"\", \"&quot;\");\n        // add other HTML escapes here if needed\n    }\n\n    /**\n     * Generates an HTML fragment containing a tooltip.\n     *\n     * @param toolTipText text to display in the tooltip\n     * @return HTML fragment with tooltip\n     */\n    public static String generateToolTipFragment(String toolTipText) {\n        return \" title=\\\"\" + htmlEscape(toolTipText) + \"\\\" alt=\\\"\\\"\";\n    }\n\n    /**\n     * Escape special characters in HTML.\n     *\n     * @param text input text to escape\n     * @return escaped text\n     */\n    public static String htmlEscape(String text) {\n        StringBuilder builder = new StringBuilder(text.length());\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            String escape = HTML_ESCAPES.get(String.valueOf(c));\n\n            if (escape != null) {\n                builder.append(escape);\n            } else {\n                builder.append(c);\n            }\n        }\n\n        return builder.toString();\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\nindex bbd5ddb..fd82637 100644\n--- a/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java\n@@ -327,7 +327,51 @@ public class MinMaxCategoryRenderer extends AbstractCategoryItemRenderer {\n      * @param column  the column index (zero-based).\n      * @param pass  the pass index.\n      */\n-    public void drawItem(Graphics2D g2, CategoryItemRendererState state,\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImageMapUtilities {\n+\n+    private static final Map<String, String> HTML_ESCAPES = new HashMap<>();\n+\n+    static {\n+        HTML_ESCAPES.put(\"\\\"\", \"&quot;\");\n+        // add other HTML escapes here if needed\n+    }\n+\n+    /**\n+     * Generates an HTML fragment containing a tooltip.\n+     *\n+     * @param toolTipText text to display in the tooltip\n+     * @return HTML fragment with tooltip\n+     */\n+    public static String generateToolTipFragment(String toolTipText) {\n+        return \" title=\\\"\" + htmlEscape(toolTipText) + \"\\\" alt=\\\"\\\"\";\n+    }\n+\n+    /**\n+     * Escape special characters in HTML.\n+     *\n+     * @param text input text to escape\n+     * @return escaped text\n+     */\n+    public static String htmlEscape(String text) {\n+        StringBuilder builder = new StringBuilder(text.length());\n+\n+        for (int i = 0; i < text.length(); i++) {\n+            char c = text.charAt(i);\n+            String escape = HTML_ESCAPES.get(String.valueOf(c));\n+\n+            if (escape != null) {\n+                builder.append(escape);\n+            } else {\n+                builder.append(c);\n+            }\n+        }\n+\n+        return builder.toString();\n+    }\n+}\n             Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n             ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n             int pass) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}