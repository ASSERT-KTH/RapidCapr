{
    "patch": "            DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n            boolean weekYear = false, weekOfWeekyear = false;\n            for (int i = 0; i < count; i++) {\n                DateTimeField field = savedFields[i].iField;\n                if (weekYear || field.getDurationField() != weeks) {\n                    continue;\n                }\n                int year = iChrono.weekyear().get(getMillis());\n                int week = iChrono.weekOfWeekyear().get(getMillis());\n                int value = field.get(getMillis());\n                if (year != iChrono.weekyear().getMinimumValue() &&\n                        year != iChrono.weekyear().getMaximumValue() &&\n                        value == iChrono.weeks().getMaximumValue()) {\n                    savedFields[i] = new SavedField(\n                            iChrono.weekyear(), year - 1);\n                    weekYear = true;\n                } else if (week != iChrono.weekOfWeekyear().getMinimumValue() &&\n                        week != iChrono.weekOfWeekyear().getMaximumValue() &&\n                        value == iChrono.weeks().getMinimumValue()) {\n                    savedFields[i] = new SavedField(\n                            iChrono.weekyear(), year + 1);\n                    weekYear = true;\n                } else {\n                    weekOfWeekyear = true;\n                }\n            }\n            if (weekYear && weekOfWeekyear) {\n                sort(savedFields, count);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0f74cf15 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,35 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+            boolean weekYear = false, weekOfWeekyear = false;\n+            for (int i = 0; i < count; i++) {\n+                DateTimeField field = savedFields[i].iField;\n+                if (weekYear || field.getDurationField() != weeks) {\n+                    continue;\n+                }\n+                int year = iChrono.weekyear().get(getMillis());\n+                int week = iChrono.weekOfWeekyear().get(getMillis());\n+                int value = field.get(getMillis());\n+                if (year != iChrono.weekyear().getMinimumValue() &&\n+                        year != iChrono.weekyear().getMaximumValue() &&\n+                        value == iChrono.weeks().getMaximumValue()) {\n+                    savedFields[i] = new SavedField(\n+                            iChrono.weekyear(), year - 1);\n+                    weekYear = true;\n+                } else if (week != iChrono.weekOfWeekyear().getMinimumValue() &&\n+                        week != iChrono.weekOfWeekyear().getMaximumValue() &&\n+                        value == iChrono.weeks().getMinimumValue()) {\n+                    savedFields[i] = new SavedField(\n+                            iChrono.weekyear(), year + 1);\n+                    weekYear = true;\n+                } else {\n+                    weekOfWeekyear = true;\n+                }\n+            }\n+            if (weekYear && weekOfWeekyear) {\n+                sort(savedFields, count);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}