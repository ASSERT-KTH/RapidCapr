{
    "patch": "        // Set the base time zone offset to zero to handle parsing zone offsets.\n        int initialZoneOffset = iZone == null ? 0 : iZone.getOffsetFromLocal(iMillis);\n        iMillis -= initialZoneOffset;\n\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalFieldValueException(\n                    \"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n\n        // If the chronology has a base time zone, and the parsed field differs\n        // from the original zone offset, adjust the parsed millis to keep\n        // the date/time in the original zone.\n        if (iZone != null) {\n            int offset = iZone.getOffsetFromLocal(millis);\n            if (offset != initialZoneOffset) {\n                long adjust = initialZoneOffset - offset;\n                millis += adjust;\n                // Simple case: if the adjustment is too big, recompute\n                if (iZone.getOffset(millis) != offset) {\n                    millis = savedFields[0].set(millis, savedFields[0].value + adjust, resetFields);\n                    for (int i=1; i<count; i++) {\n                        millis = savedFields[i].set(millis, savedFields[i].value, resetFields);\n                    }\n                }\n            }\n        }\n        return millis + initialZoneOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4a6eb1ae 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        // Set the base time zone offset to zero to handle parsing zone offsets.\n+        int initialZoneOffset = iZone == null ? 0 : iZone.getOffsetFromLocal(iMillis);\n+        iMillis -= initialZoneOffset;\n+\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalFieldValueException(\n+                    \"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+\n+        // If the chronology has a base time zone, and the parsed field differs\n+        // from the original zone offset, adjust the parsed millis to keep\n+        // the date/time in the original zone.\n+        if (iZone != null) {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            if (offset != initialZoneOffset) {\n+                long adjust = initialZoneOffset - offset;\n+                millis += adjust;\n+                // Simple case: if the adjustment is too big, recompute\n+                if (iZone.getOffset(millis) != offset) {\n+                    millis = savedFields[0].set(millis, savedFields[0].value + adjust, resetFields);\n+                    for (int i=1; i<count; i++) {\n+                        millis = savedFields[i].set(millis, savedFields[i].value, resetFields);\n+                    }\n+                }\n+            }\n+        }\n+        return millis + initialZoneOffset;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot assign a value to final variable iMillis",
    "test_result": "ERROR"
}