{
    "patch": "@Override public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return true;\n    }\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent.getType() == Token.NAME) {\n                return true;\n            }\n            defineDeclaredFunction(n, parent);\n            return false;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            return false;\n        case Token.VAR:\n            defineVar(n, parent);\n            return false;\n        case Token.LP:\n            if (parent == scope.getRootNode() || (parent.getParent() != null &&\n                    (parent.getParent().getType() == Token.ASSIGN ||\n                            parent.getParent().getType() == Token.VAR ||\n                            parent.getParent().getType() == Token.EXPR_RESULT))) {\n                handleFunctionInputs(parent);\n            }\n            return false;\n        case Token.RETURN:\n        case Token.THROW:\n        case Token.BREAK:\n        case Token.CONTINUE:\n            expandUnreachableCode(n);\n            return false;\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n            maybeAddTypeToCaseClauses(n);\n            return true;\n        case Token.TRY:\n            maybeWarnIfTryBlockCompletesNormally(n.getLastChild());\n            return true;\n        default:\n            break;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9ddd5ac1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,49 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+@Override public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+        return true;\n+    }\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent.getType() == Token.NAME) {\n+                return true;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            return false;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            return false;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            return false;\n+        case Token.LP:\n+            if (parent == scope.getRootNode() || (parent.getParent() != null &&\n+                    (parent.getParent().getType() == Token.ASSIGN ||\n+                            parent.getParent().getType() == Token.VAR ||\n+                            parent.getParent().getType() == Token.EXPR_RESULT))) {\n+                handleFunctionInputs(parent);\n+            }\n+            return false;\n+        case Token.RETURN:\n+        case Token.THROW:\n+        case Token.BREAK:\n+        case Token.CONTINUE:\n+            expandUnreachableCode(n);\n+            return false;\n+        case Token.CASE:\n+        case Token.DEFAULT_CASE:\n+            maybeAddTypeToCaseClauses(n);\n+            return true;\n+        case Token.TRY:\n+            maybeWarnIfTryBlockCompletesNormally(n.getLastChild());\n+            return true;\n+        default:\n+            break;\n     }\n+    return true;\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: shouldTraverse(NodeTraversal,Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot override shouldTraverse(NodeTraversal,Node,Node) in TypedScopeCreator.AbstractScopeBuilder",
    "test_result": "ERROR"
}