{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvectorsR = dec.getV();\n    final RealMatrix eigenvectorsI = eigenvectorsR.transpose(); // inverse of eigenvectorsR\n    final RealMatrix eigenvalues = dec.getD();\n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n    for (int i = 0; i < sqrtEigenvalues.getRowDimension(); i++) {\n        sqrtEigenvalues.setEntry(i, i, Math.sqrt(Math.max(0.0, eigenvalues.getEntry(i, i))));\n    }\n    final RealMatrix sqrtM = eigenvectorsR.multiply(sqrtEigenvalues).multiply(eigenvectorsI);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..65489dcaa 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvectorsR = dec.getV();\n+    final RealMatrix eigenvectorsI = eigenvectorsR.transpose(); // inverse of eigenvectorsR\n+    final RealMatrix eigenvalues = dec.getD();\n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(eigenvalues.getRowDimension(), eigenvalues.getColumnDimension());\n+    for (int i = 0; i < sqrtEigenvalues.getRowDimension(); i++) {\n+        sqrtEigenvalues.setEntry(i, i, Math.sqrt(Math.max(0.0, eigenvalues.getEntry(i, i))));\n     }\n+    final RealMatrix sqrtM = eigenvectorsR.multiply(sqrtEigenvalues).multiply(eigenvectorsI);\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}