{
    "patch": "if (options.checkGlobalThisLevel.isOn() &&\n        options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n      if (options.shouldEmitUseStrict() &&\n          !options.getWarningLevel(DiagnosticGroups.USE_STRICT_DIRECTIVE)\n              .equals(CheckLevel.OFF)) {\n        setReportUnsupportedError();\n        report(\n            JSError.make(\n                RhinoErrorReporter.USAGE_OF_STRICT_WARNING_DIRECTIVE));\n      }\n\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..50d07a3a 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,20 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel.isOn() &&\n+        options.getLanguageIn().compareTo(LanguageMode.ECMASCRIPT5) >= 0) {\n+      if (options.shouldEmitUseStrict() &&\n+          !options.getWarningLevel(DiagnosticGroups.USE_STRICT_DIRECTIVE)\n+              .equals(CheckLevel.OFF)) {\n+        setReportUnsupportedError();\n+        report(\n+            JSError.make(\n+                RhinoErrorReporter.USAGE_OF_STRICT_WARNING_DIRECTIVE));\n+      }\n+\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n+    }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}