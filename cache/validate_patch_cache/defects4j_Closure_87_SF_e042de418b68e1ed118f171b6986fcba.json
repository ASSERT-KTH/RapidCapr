{
    "patch": "private boolean isFoldableExpressBlock(Node node) {\n  if (node.getType() != Token.BLOCK || !node.hasOneChild()) {\n    return false;\n  }\n  Node maybeExpr = node.getFirstChild();\n  Node parent = maybeExpr.getParent();\n  if (NodeUtil.isFunctionExpression(maybeExpr) || NodeUtil.isNameDeclaration(parent) ||\n      (parent.isAssign() && maybeExpr == parent.getLastChild()) || NodeUtil.isLoopStructure(parent) ||\n      parent.getType() == Token.CATCH) {\n    return false;\n  }\n  if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n    return false;\n  }\n  Node grandparent = parent.getParent();\n  if (grandparent == null) {\n    return true;  // Root block.\n  }\n  // A block is foldable if it is the only child of an if/for/while or exists in a control structures with a single child.\n  // Also it is foldable if the block is a child of a switch/case/default node.\n  return (parent.isIf() || parent.isFor() || parent.isWhile() || parent.isDo() ||\n          parent.isSwitch() || parent.isCase() || parent.isDefault()) &&\n      grandparent.hasOneChild() && maybeExpr == parent.getLastChild() ||\n      parent.isTry() && maybeExpr == parent.getFirstChild();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..43d58c67 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,31 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n-\n+private boolean isFoldableExpressBlock(Node node) {\n+  if (node.getType() != Token.BLOCK || !node.hasOneChild()) {\n     return false;\n   }\n+  Node maybeExpr = node.getFirstChild();\n+  Node parent = maybeExpr.getParent();\n+  if (NodeUtil.isFunctionExpression(maybeExpr) || NodeUtil.isNameDeclaration(parent) ||\n+      (parent.isAssign() && maybeExpr == parent.getLastChild()) || NodeUtil.isLoopStructure(parent) ||\n+      parent.getType() == Token.CATCH) {\n+    return false;\n+  }\n+  if (NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+    return false;\n+  }\n+  Node grandparent = parent.getParent();\n+  if (grandparent == null) {\n+    return true;  // Root block.\n+  }\n+  // A block is foldable if it is the only child of an if/for/while or exists in a control structures with a single child.\n+  // Also it is foldable if the block is a child of a switch/case/default node.\n+  return (parent.isIf() || parent.isFor() || parent.isWhile() || parent.isDo() ||\n+          parent.isSwitch() || parent.isCase() || parent.isDefault()) &&\n+      grandparent.hasOneChild() && maybeExpr == parent.getLastChild() ||\n+      parent.isTry() && maybeExpr == parent.getFirstChild();\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}