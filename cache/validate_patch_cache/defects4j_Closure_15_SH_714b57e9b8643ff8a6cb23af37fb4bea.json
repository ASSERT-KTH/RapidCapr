{
    "patch": "        if (n.isBlock()) {\n          Block block = n.asBlock();\n          if (block.isFunctionBlock()) {\n            return false;\n          }\n          if (block.getParent().isHook()) {\n            // We only care about the hook call or the hook context.\n            return n == block.getFirstChild().getNext();\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..8fc183a8 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,16 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isBlock()) {\n+          Block block = n.asBlock();\n+          if (block.isFunctionBlock()) {\n+            return false;\n+          }\n+          if (block.getParent().isHook()) {\n+            // We only care about the hook call or the hook context.\n+            return n == block.getFirstChild().getNext();\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}