{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  Node block = t.getScopeRoot();\n  if (!block.isBlock() || !block.getParent().isFunction()) {\n    // The code isn't structured like a goog.scope.\n    return;\n  }\n\n  Node function = block.getParent();\n  if (function.getSecondChild() != block || function.getChildCount() != 3) {\n    report(t, block, GOOG_SCOPE_MISPLACED);\n    return;\n  }\n\n  Node args = function.getFirstChild().getNext();\n  if (args == null || !args.isParamList() || args.hasChildren()) {\n    report(t, function.getFirstChild(), GOOG_SCOPE_EXPECTED_FUNCTION_EXPRESSION);\n    return;\n  }\n\n  Node body = block.getFirstChild();\n  if (body == null || scope.getParent() != null || scope.getRootNode() != body.getParent()) {\n    report(t, block, GOOG_SCOPE_GOOG_SCOPE_NOT_GLOBAL, scope.getParent());\n  }\n\n  boolean hasNonVarStatements = false;\n  boolean hasGoogProvide = false;\n  for (Node current = body.getFirstChild(); current != null; current = current.getNext()) {\n    int type = current.getType();\n    if (type == Token.EXPR_RESULT &&\n        current.getFirstChild() != null &&\n        current.getFirstChild().isCall() &&\n        current.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.provide\")) {\n      hasGoogProvide = true;\n    }\n    if (TokenUtil.isStatement(type) && type != Token.VAR) {\n      hasNonVarStatements = true;\n      break;\n    }\n  }\n  if (!hasGoogProvide) {\n    report(t, block, GOOG_SCOPE_MISSING_GOOG_PROVIDE);\n  }\n  if (hasNonVarStatements) {\n    report(t, block, GOOG_SCOPE_HAS_NON_VAR_STATEMENTS);\n  }\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || !n.isName()) {\n      // Skip variables that are not named values.\n      continue;\n    }\n    Node parent = n.getParent();\n    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n      String name = n.getString();\n      Var aliasVar = scope.getVar(name);\n      if (aliasVar == null || aliasVar.getInitialValue() == null) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        continue;\n      }\n      aliases.put(name, aliasVar);\n\n      String qualifiedName =\n          aliasVar.getInitialValue().getQualifiedName();\n      transformation.addAlias(name, qualifiedName);\n    } else if (!parent.isFunction()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..735fe975 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,77 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  Node block = t.getScopeRoot();\n+  if (!block.isBlock() || !block.getParent().isFunction()) {\n+    // The code isn't structured like a goog.scope.\n+    return;\n+  }\n+\n+  Node function = block.getParent();\n+  if (function.getSecondChild() != block || function.getChildCount() != 3) {\n+    report(t, block, GOOG_SCOPE_MISPLACED);\n+    return;\n+  }\n+\n+  Node args = function.getFirstChild().getNext();\n+  if (args == null || !args.isParamList() || args.hasChildren()) {\n+    report(t, function.getFirstChild(), GOOG_SCOPE_EXPECTED_FUNCTION_EXPRESSION);\n+    return;\n+  }\n+\n+  Node body = block.getFirstChild();\n+  if (body == null || scope.getParent() != null || scope.getRootNode() != body.getParent()) {\n+    report(t, block, GOOG_SCOPE_GOOG_SCOPE_NOT_GLOBAL, scope.getParent());\n+  }\n+\n+  boolean hasNonVarStatements = false;\n+  boolean hasGoogProvide = false;\n+  for (Node current = body.getFirstChild(); current != null; current = current.getNext()) {\n+    int type = current.getType();\n+    if (type == Token.EXPR_RESULT &&\n+        current.getFirstChild() != null &&\n+        current.getFirstChild().isCall() &&\n+        current.getFirstChild().getFirstChild().matchesQualifiedName(\"goog.provide\")) {\n+      hasGoogProvide = true;\n+    }\n+    if (TokenUtil.isStatement(type) && type != Token.VAR) {\n+      hasNonVarStatements = true;\n+      break;\n+    }\n+  }\n+  if (!hasGoogProvide) {\n+    report(t, block, GOOG_SCOPE_MISSING_GOOG_PROVIDE);\n+  }\n+  if (hasNonVarStatements) {\n+    report(t, block, GOOG_SCOPE_HAS_NON_VAR_STATEMENTS);\n+  }\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || !n.isName()) {\n+      // Skip variables that are not named values.\n+      continue;\n+    }\n+    Node parent = n.getParent();\n+    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+      String name = n.getString();\n+      Var aliasVar = scope.getVar(name);\n+      if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        continue;\n       }\n+      aliases.put(name, aliasVar);\n+\n+      String qualifiedName =\n+          aliasVar.getInitialValue().getQualifiedName();\n+      transformation.addAlias(name, qualifiedName);\n+    } else if (!parent.isFunction()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}