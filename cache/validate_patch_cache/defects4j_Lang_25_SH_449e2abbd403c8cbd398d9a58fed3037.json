{
    "patch": "char ch = data.charAt(i);\nif (ch == '\\r' && i + 1 < data.length() && data.charAt(i + 1) == '\\n') {\n    // CRLF also known as \\r\\n is not allowed in ISO-8859-1. Replace with LF (\\n)\n    // i.e. Drop the \\r and carry on.\n    newData.append('\\n');\n    // Also, skip the next character (which is '\\n') since we've already replaced it\n    i++;\n}\nelse if (ch < 128) {\n    // character is ASCII, so just write it out as-is\n    newData.append(ch);\n}\nelse {\n    // character is not ASCII, so escape it\n    newData.append(ESCAPE_PREFIX);\n    newData.append((char)(ch / 16));\n    newData.append((char)(ch % 16));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}