{
    "patch": "      if (!functionType.isInterface() &&\n          functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (n.getParent().isGetProp() && n.getParent().hasChildren()) {\n\n        JSType propType = getJSType(n.getParent().getFirstChild());\n        if (propType != null && propType.hasObjectType()) {\n          ObjectType objType = ObjectType.cast(propType.restrictByNotNullOrUndefined());\n\n          if (objType != null && objType.hasReferenceName() &&\n              objType.getReferenceName().equals(\"this\")) {\n            visitParameterList(t, n, functionType);\n            ensureTyped(t, n, functionType.getReturnType());\n            return;\n          }\n        }\n      }\n\n      // If we get here, it is because there is a mismatch between the receiver type of the function type\n      // and the function call.\n      // We should check that there's a this object we can bind. If there is, we should report a warning.\n      ObjectType expectedReceiverType = functionType.getTypeOfThis();\n      if (expectedReceiverType != null) {\n        // Check whether we can bind an object to \"this\" to make this function type apply.\n        JSType expectedParentType = expectedReceiverType.getOwnerFunction().getDeclaredType();\n        if (expectedParentType == null || !expectedParentType.isUnknownType() && !expectedParentType.isNoType()) {\n          // We require that the pre-existing scope at the place of invocation is consistent with invocation.\n          ObjectType parentScope = ObjectType.cast(expectedParentType.restrictByNotNullOrUndefined());\n          if (parentScope == null) {\n            report(t, n, FUNCTION_CALLED_BAD_THIS, childType.toString());\n          } else {\n            LinkedHashSet<ObjectType> possibleReceiverTypes = new LinkedHashSet<>();\n            JSType parentType = getScopeType();\n            while (parentType != null) {\n              ObjectType classType = parentType.getProp(expectedReceiverType.getReferenceName()).getJSType().restrictByNotNullOrUndefined()\n                  .dereference();\n              if (classType != null && !classType.isInterface()) {\n                possibleReceiverTypes.add(classType);\n              }\n              parentType = parentType.getPrototype();\n            }\n            if (possibleReceiverTypes.isEmpty()) {\n              report(t, n, FUNCTION_CALLED_BAD_THIS, childType.toString());\n            } else {\n              JSTypeUnion possibleTypes = JSTypeCreatorFromJSDoc.makeUnionType(possibleReceiverTypes);\n              ensureTyped(t, n, JSTypeCreatorFromJSDoc.getCommonSuperType(expectedReceiverType, possibleTypes)\n                      .getFunType());\n            }\n          }\n        } else {\n          report(t, n, FUNCTION_CALL_BAD_CONTEXT, childType.toString());\n        }\n      } else {\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9edc3c02 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,33 +1541,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n-\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n-\n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n+      if (!functionType.isInterface() &&\n+          functionType.isConstructor() &&\n           !functionType.isNativeObjectType() &&\n           (functionType.getReturnType().isUnknownType() ||\n            functionType.getReturnType().isVoidType() ||\n@@ -1575,19 +1550,60 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n+      // Functions with explicit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (n.getParent().isGetProp() && n.getParent().hasChildren()) {\n \n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n-    }\n+        JSType propType = getJSType(n.getParent().getFirstChild());\n+        if (propType != null && propType.hasObjectType()) {\n+          ObjectType objType = ObjectType.cast(propType.restrictByNotNullOrUndefined());\n \n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n-  }\n+          if (objType != null && objType.hasReferenceName() &&\n+              objType.getReferenceName().equals(\"this\")) {\n+            visitParameterList(t, n, functionType);\n+            ensureTyped(t, n, functionType.getReturnType());\n+            return;\n+          }\n+        }\n+      }\n+\n+      // If we get here, it is because there is a mismatch between the receiver type of the function type\n+      // and the function call.\n+      // We should check that there's a this object we can bind. If there is, we should report a warning.\n+      ObjectType expectedReceiverType = functionType.getTypeOfThis();\n+      if (expectedReceiverType != null) {\n+        // Check whether we can bind an object to \"this\" to make this function type apply.\n+        JSType expectedParentType = expectedReceiverType.getOwnerFunction().getDeclaredType();\n+        if (expectedParentType == null || !expectedParentType.isUnknownType() && !expectedParentType.isNoType()) {\n+          // We require that the pre-existing scope at the place of invocation is consistent with invocation.\n+          ObjectType parentScope = ObjectType.cast(expectedParentType.restrictByNotNullOrUndefined());\n+          if (parentScope == null) {\n+            report(t, n, FUNCTION_CALLED_BAD_THIS, childType.toString());\n+          } else {\n+            LinkedHashSet<ObjectType> possibleReceiverTypes = new LinkedHashSet<>();\n+            JSType parentType = getScopeType();\n+            while (parentType != null) {\n+              ObjectType classType = parentType.getProp(expectedReceiverType.getReferenceName()).getJSType().restrictByNotNullOrUndefined()\n+                  .dereference();\n+              if (classType != null && !classType.isInterface()) {\n+                possibleReceiverTypes.add(classType);\n+              }\n+              parentType = parentType.getPrototype();\n+            }\n+            if (possibleReceiverTypes.isEmpty()) {\n+              report(t, n, FUNCTION_CALLED_BAD_THIS, childType.toString());\n+            } else {\n+              JSTypeUnion possibleTypes = JSTypeCreatorFromJSDoc.makeUnionType(possibleReceiverTypes);\n+              ensureTyped(t, n, JSTypeCreatorFromJSDoc.getCommonSuperType(expectedReceiverType, possibleTypes)\n+                      .getFunType());\n+            }\n+          }\n+        } else {\n+          report(t, n, FUNCTION_CALL_BAD_CONTEXT, childType.toString());\n+        }\n+      } else {\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}