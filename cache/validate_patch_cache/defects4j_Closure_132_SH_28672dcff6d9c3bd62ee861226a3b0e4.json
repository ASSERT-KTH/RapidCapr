{
    "patch": "              boolean lhsHasNoSideEffects = !NodeUtil.mayHaveSideEffects(lhs);\n              boolean elseOpHasNoSideEffects = !NodeUtil.mayHaveSideEffects(elseOp.getFirstChild()) && !NodeUtil.mayHaveSideEffects(elseExpr.getLastChild());\n              if (lhsHasNoSideEffects && elseOpHasNoSideEffects && lhs.isName() && areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..3cb5ec94 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,9 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              boolean lhsHasNoSideEffects = !NodeUtil.mayHaveSideEffects(lhs);\n+              boolean elseOpHasNoSideEffects = !NodeUtil.mayHaveSideEffects(elseOp.getFirstChild()) && !NodeUtil.mayHaveSideEffects(elseExpr.getLastChild());\n+              if (lhsHasNoSideEffects && elseOpHasNoSideEffects && lhs.isName() && areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}