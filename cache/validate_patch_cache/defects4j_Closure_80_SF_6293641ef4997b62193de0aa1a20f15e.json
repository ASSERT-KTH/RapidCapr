{
    "patch": "import java.util.function.Predicate;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.common.annotations.VisibleForTesting;\n\npublic class ProgramRepairTool {\n    @VisibleForTesting\n    static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n        switch (value.getToken()) {\n            case ASSIGN:\n                return NodeUtil.isImmutableValue(value.getLastChild())\n                        || (locals.test(value.getFirstChild())\n                        && evaluatesToLocalValue(value.getLastChild(), locals));\n            case COMMA:\n                return evaluatesToLocalValue(value.getLastChild(), locals);\n            case AND:\n            case OR:\n                return evaluatesToLocalValue(value.getFirstChild(), locals)\n                        && evaluatesToLocalValue(value.getLastChild(), locals);\n            case HOOK:\n                return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                        && evaluatesToLocalValue(value.getLastChild(), locals);\n            case INC:\n            case DEC:\n                if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                    return evaluatesToLocalValue(value.getFirstChild(), locals);\n                } else {\n                    return true;\n                }\n            case THIS:\n                return locals.test(value);\n            case NAME:\n                return isImmutableValue(value) || locals.test(value);\n            case GETELEM:\n            case GETPROP:\n                return locals.test(value);\n            case CALL:\n                return callHasLocalResult(value)\n                        || isToStringMethodCall(value)\n                        || locals.test(value);\n            case NEW:\n                return newHasLocalResult(value)\n                        || locals.test(value);\n            case FUNCTION:\n            case REGEXP:\n            case ARRAYLIT:\n            case OBJECTLIT:\n                return true;\n            case IN:\n                return true;\n            case DELETE:\n                return NodeUtil.isImmutableValue(value.getFirstChild())\n                        || evaluatesToLocalValue(value.getFirstChild(), locals);\n            default:\n                if (isAssignmentOp(value)\n                        || isSimpleOperator(value)\n                        || isImmutableValue(value)) {\n                    return true;\n                }\n\n                throw new IllegalStateException(\n                        \"Unexpected expression node\" + value +\n                                \"\\n parent:\" + value.getParent());\n        }\n    }\n\n    private static boolean isImmutableValue(Node node) {\n        if (node.getType() == Token.STRING || node.getType() == Token.NUMBER ||\n                node.getType() == Token.TRUE || node.getType() == Token.FALSE ||\n                node.getType() == Token.NULL || node.getType() == Token.VOID) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private static boolean callHasLocalResult(Node value) {\n        return value.isGetProp() && value.getLastChild().getString().equals(\"bind\");\n    }\n\n    private static boolean newHasLocalResult(Node value) {\n        return value.getFirstChild().isGetProp() &&\n                value.getFirstChild().getLastChild().getString().equals(\"prototype\");\n    }\n\n    private static boolean isAssignmentOp(Node node) {\n        int type = node.getType();\n        return (type >= Token.ASSIGN && type <= Token.ASSIGN_BITXOR) ||\n                (type >= Token.ASSIGN_SHL && type <= Token.ASSIGN >>>) ||\n                type == Token.ASSIGN_EXPONENT;\n    }\n\n    private static boolean isSimpleOperator(Node node) {\n        int type = node.getType();\n        return type == Token.ADD ||\n                type == Token.BITAND ||\n                type == Token.BITOR ||\n                type == Token.DIV ||\n                type == Token.EQ ||\n                type == Token.GE ||\n                type == Token.GT ||\n                type == Token.INSTANCEOF ||\n                type == Token.LE ||\n                type == Token.LT ||\n                type == Token.MOD ||\n                type == Token.MUL ||\n                type == Token.NE ||\n                type == Token.SHIFT_LEFT ||\n                type == Token.SHIFT_RIGHT ||\n                type == Token.SHIFT_RIGHT_UNSIGNED ||\n                type == Token.SUB ||\n                type == Token.AND ||\n                type == Token.OR ||\n                type == Token.INC ||\n                type == Token.DEC ||\n                type == Token.NOT ||\n                type == Token.POS ||\n                type == Token.NEG ||\n                type == Token.TYPEOF ||\n                type == Token.VOID ||\n                type == Token.DELETE ||\n                type == Token.COMMA ||\n                type == Token.INSTANCEOF;\n    }\n\n    private static boolean isToStringMethodCall(Node value) {\n        return isCallToMethod(value, \"toString\");\n    }\n\n    private static boolean isCallToMethod(Node value, String methodName) {\n        return value.isCall() && value.getFirstChild().getLastChild().getString().equals(methodName);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..7d90f6c2 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,140 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n-        return true;\n-      default:\n-        return false;\n-    }\n-  }\n-\n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+import java.util.function.Predicate;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class ProgramRepairTool {\n+    @VisibleForTesting\n+    static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+        switch (value.getToken()) {\n+            case ASSIGN:\n+                return NodeUtil.isImmutableValue(value.getLastChild())\n+                        || (locals.test(value.getFirstChild())\n+                        && evaluatesToLocalValue(value.getLastChild(), locals));\n+            case COMMA:\n+                return evaluatesToLocalValue(value.getLastChild(), locals);\n+            case AND:\n+            case OR:\n+                return evaluatesToLocalValue(value.getFirstChild(), locals)\n+                        && evaluatesToLocalValue(value.getLastChild(), locals);\n+            case HOOK:\n+                return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+                        && evaluatesToLocalValue(value.getLastChild(), locals);\n+            case INC:\n+            case DEC:\n+                if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+                    return evaluatesToLocalValue(value.getFirstChild(), locals);\n+                } else {\n+                    return true;\n+                }\n+            case THIS:\n+                return locals.test(value);\n+            case NAME:\n+                return isImmutableValue(value) || locals.test(value);\n+            case GETELEM:\n+            case GETPROP:\n+                return locals.test(value);\n+            case CALL:\n+                return callHasLocalResult(value)\n+                        || isToStringMethodCall(value)\n+                        || locals.test(value);\n+            case NEW:\n+                return newHasLocalResult(value)\n+                        || locals.test(value);\n+            case FUNCTION:\n+            case REGEXP:\n+            case ARRAYLIT:\n+            case OBJECTLIT:\n+                return true;\n+            case IN:\n+                return true;\n+            case DELETE:\n+                return NodeUtil.isImmutableValue(value.getFirstChild())\n+                        || evaluatesToLocalValue(value.getFirstChild(), locals);\n+            default:\n+                if (isAssignmentOp(value)\n+                        || isSimpleOperator(value)\n+                        || isImmutableValue(value)) {\n+                    return true;\n+                }\n+\n+                throw new IllegalStateException(\n+                        \"Unexpected expression node\" + value +\n+                                \"\\n parent:\" + value.getParent());\n+        }\n     }\n-    return false;\n-  }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n-\n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n-  }\n+    private static boolean isImmutableValue(Node node) {\n+        if (node.getType() == Token.STRING || node.getType() == Token.NUMBER ||\n+                node.getType() == Token.TRUE || node.getType() == Token.FALSE ||\n+                node.getType() == Token.NULL || node.getType() == Token.VOID) {\n+            return true;\n+        }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+        return false;\n     }\n-  }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n-\n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n-  }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+    private static boolean callHasLocalResult(Node value) {\n+        return value.isGetProp() && value.getLastChild().getString().equals(\"bind\");\n+    }\n+\n+    private static boolean newHasLocalResult(Node value) {\n+        return value.getFirstChild().isGetProp() &&\n+                value.getFirstChild().getLastChild().getString().equals(\"prototype\");\n+    }\n+\n+    private static boolean isAssignmentOp(Node node) {\n+        int type = node.getType();\n+        return (type >= Token.ASSIGN && type <= Token.ASSIGN_BITXOR) ||\n+                (type >= Token.ASSIGN_SHL && type <= Token.ASSIGN >>>) ||\n+                type == Token.ASSIGN_EXPONENT;\n+    }\n+\n+    private static boolean isSimpleOperator(Node node) {\n+        int type = node.getType();\n+        return type == Token.ADD ||\n+                type == Token.BITAND ||\n+                type == Token.BITOR ||\n+                type == Token.DIV ||\n+                type == Token.EQ ||\n+                type == Token.GE ||\n+                type == Token.GT ||\n+                type == Token.INSTANCEOF ||\n+                type == Token.LE ||\n+                type == Token.LT ||\n+                type == Token.MOD ||\n+                type == Token.MUL ||\n+                type == Token.NE ||\n+                type == Token.SHIFT_LEFT ||\n+                type == Token.SHIFT_RIGHT ||\n+                type == Token.SHIFT_RIGHT_UNSIGNED ||\n+                type == Token.SUB ||\n+                type == Token.AND ||\n+                type == Token.OR ||\n+                type == Token.INC ||\n+                type == Token.DEC ||\n+                type == Token.NOT ||\n+                type == Token.POS ||\n+                type == Token.NEG ||\n+                type == Token.TYPEOF ||\n+                type == Token.VOID ||\n+                type == Token.DELETE ||\n+                type == Token.COMMA ||\n+                type == Token.INSTANCEOF;\n+    }\n+\n+    private static boolean isToStringMethodCall(Node value) {\n+        return isCallToMethod(value, \"toString\");\n+    }\n+\n+    private static boolean isCallToMethod(Node value, String methodName) {\n+        return value.isCall() && value.getFirstChild().getLastChild().getString().equals(methodName);\n+    }\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}