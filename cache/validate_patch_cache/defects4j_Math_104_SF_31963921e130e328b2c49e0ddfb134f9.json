{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    double sum = 1.0 / a;\n    double term = sum;\n\n    for (int n = 1; n < 200; n++) {\n        double numerator = Math.pow(x, n);\n        double denominator = BigInteger.valueOf(n)\n                .multiply(factorial(a + n - 1))\n                .doubleValue();\n        double tmp = numerator / denominator;\n        sum += tmp;\n        if (Math.abs(tmp / sum) < 1e-14) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n\n    return 1.0; // Failed to converge - may need to increase max iterations\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}\n\npublic static double factorial(double n) {\n    if (n == 0) {\n        return 1;\n    }\n    double res = 1;\n    for (double i = 2; i <= n; i++) {\n        res *= i;\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c563edf50 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,46 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    double sum = 1.0 / a;\n+    double term = sum;\n+\n+    for (int n = 1; n < 200; n++) {\n+        double numerator = Math.pow(x, n);\n+        double denominator = BigInteger.valueOf(n)\n+                .multiply(factorial(a + n - 1))\n+                .doubleValue();\n+        double tmp = numerator / denominator;\n+        sum += tmp;\n+        if (Math.abs(tmp / sum) < 1e-14) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+\n+    return 1.0; // Failed to converge - may need to increase max iterations\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n+\n+public static double factorial(double n) {\n+    if (n == 0) {\n+        return 1;\n+    }\n+    double res = 1;\n+    for (double i = 2; i <= n; i++) {\n+        res *= i;\n+    }\n+    return res;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}