{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    final int inputLength = input.length();\n    for (int i = 0; i < inputLength; i++) {\n        int consumed = translate(input, i, out);\n        if (consumed == 0) {\n            final char c1 = input.charAt(i);\n            if (Character.isSurrogate(c1)) {\n                if (Character.isHighSurrogate(c1) && i + 1 < inputLength && Character.isLowSurrogate(input.charAt(i + 1))) {\n                    out.write(Character.toChars(Character.toCodePoint(c1, input.charAt(i + 1))));\n                    i++;\n                } else {\n                    out.write('\\ufffd'); // Replace with U+FFFD (REPLACEMENT CHARACTER)\n                }\n            } else {\n                out.write(c1);\n            }\n        } else if (consumed < 0) {\n            i = -consumed - 1;\n        }\n    }\n    out.flush();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..e36814cb 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,34 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    final int inputLength = input.length();\n+    for (int i = 0; i < inputLength; i++) {\n+        int consumed = translate(input, i, out);\n+        if (consumed == 0) {\n+            final char c1 = input.charAt(i);\n+            if (Character.isSurrogate(c1)) {\n+                if (Character.isHighSurrogate(c1) && i + 1 < inputLength && Character.isLowSurrogate(input.charAt(i + 1))) {\n+                    out.write(Character.toChars(Character.toCodePoint(c1, input.charAt(i + 1))));\n+                    i++;\n+                } else {\n+                    out.write('\\ufffd'); // Replace with U+FFFD (REPLACEMENT CHARACTER)\n                 }\n-                pos--;\n+            } else {\n+                out.write(c1);\n             }\n-            pos++;\n+        } else if (consumed < 0) {\n+            i = -consumed - 1;\n         }\n     }\n+    out.flush();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.ComparisonFailure: unescape(String) failed: expected '\\ntest\\b' actual '\\nntest\\bb' expected:<",
    "test_result": "FAIL"
}