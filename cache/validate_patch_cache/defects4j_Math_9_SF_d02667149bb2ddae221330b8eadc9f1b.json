{
    "patch": "import java.math.*;\n...\npublic Line revert() {\n    final BigDecimal[] directionCoords = {\n            BigDecimal.valueOf(direction.getX()),\n            BigDecimal.valueOf(direction.getY()),\n            BigDecimal.valueOf(direction.getZ())\n    };\n    final BigDecimal[] oppositeCoords = {\n            BigDecimal.valueOf(-1.0).multiply(directionCoords[0]),\n            BigDecimal.valueOf(-1.0).multiply(directionCoords[1]),\n            BigDecimal.valueOf(-1.0).multiply(directionCoords[2])\n    };\n    final Vector3D oppositeDirection = new Vector3D(oppositeCoords[0], oppositeCoords[1], oppositeCoords[2]);\n    return new Line(Vector3D.ZERO, oppositeDirection);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..421932556 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,22 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+import java.math.*;\n+...\n+public Line revert() {\n+    final BigDecimal[] directionCoords = {\n+            BigDecimal.valueOf(direction.getX()),\n+            BigDecimal.valueOf(direction.getY()),\n+            BigDecimal.valueOf(direction.getZ())\n+    };\n+    final BigDecimal[] oppositeCoords = {\n+            BigDecimal.valueOf(-1.0).multiply(directionCoords[0]),\n+            BigDecimal.valueOf(-1.0).multiply(directionCoords[1]),\n+            BigDecimal.valueOf(-1.0).multiply(directionCoords[2])\n+    };\n+    final Vector3D oppositeDirection = new Vector3D(oppositeCoords[0], oppositeCoords[1], oppositeCoords[2]);\n+    return new Line(Vector3D.ZERO, oppositeDirection);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}