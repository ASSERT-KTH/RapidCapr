{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid argument for regularized gamma function\");\n    }\n\n    if (x < a + 1) {\n        double y = a;\n        double z = x - y + 1;\n        double c = 1.0 / y;\n        double p = c;\n        double delta = p;\n\n        int maxIterations = 1000;\n        int i = 0;\n\n        do {\n            i += 1;\n            c *= (z / i);\n            y += 1;\n            p += c;\n            if (p == 0.0) {\n                return 0.0;\n            }\n            delta = c / p;\n        } while (Math.abs(delta - 1.0) > 10e-14 && i <= maxIterations);\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * p;\n    } else {\n        double y = x;\n        double z = y - a + 1.0;\n        double c = 0.0;\n        double p = 1.0;\n        double ans = 1.0;\n        double delta = 1.0;\n\n        int maxIterations = 1000;\n        int i = 0;\n\n        do {\n            i += 1;\n            c = -(z / i) * c + p;\n            y += 1;\n            delta = z / y;\n            p = delta * p + c;\n            if (p == 0.0) {\n                return ans;\n            }\n            ans = p / Math.exp(a * Math.log(x) - logGamma(a));\n        } while (Math.abs(ans - delta) > 10e-14 && i <= maxIterations);\n\n        return ans;\n    }\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e2db8ae74 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,65 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid argument for regularized gamma function\");\n+    }\n+\n+    if (x < a + 1) {\n+        double y = a;\n+        double z = x - y + 1;\n+        double c = 1.0 / y;\n+        double p = c;\n+        double delta = p;\n+\n+        int maxIterations = 1000;\n+        int i = 0;\n+\n+        do {\n+            i += 1;\n+            c *= (z / i);\n+            y += 1;\n+            p += c;\n+            if (p == 0.0) {\n+                return 0.0;\n+            }\n+            delta = c / p;\n+        } while (Math.abs(delta - 1.0) > 10e-14 && i <= maxIterations);\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * p;\n+    } else {\n+        double y = x;\n+        double z = y - a + 1.0;\n+        double c = 0.0;\n+        double p = 1.0;\n+        double ans = 1.0;\n+        double delta = 1.0;\n+\n+        int maxIterations = 1000;\n+        int i = 0;\n+\n+        do {\n+            i += 1;\n+            c = -(z / i) * c + p;\n+            y += 1;\n+            delta = z / y;\n+            p = delta * p + c;\n+            if (p == 0.0) {\n+                return ans;\n+            }\n+            ans = p / Math.exp(a * Math.log(x) - logGamma(a));\n+        } while (Math.abs(ans - delta) > 10e-14 && i <= maxIterations);\n+\n+        return ans;\n+    }\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}