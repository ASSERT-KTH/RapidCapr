{
    "patch": "public static <T> ReturnValue<T> returnValue(Iterable<T> iterable) {\n    ArrayList<T> values = new ArrayList<>();\n    iterable.forEach(values::add);\n    if (values.isEmpty()) {\n        return new ReturnValue<>(null);\n    } else if (values.size() == 1) {\n        return new ReturnValue<>(values.get(0));\n    } else {\n        return new ReturnValue<>(values);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cc02c2946 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> returnValue(Iterable<T> iterable) {\n+    ArrayList<T> values = new ArrayList<>();\n+    iterable.forEach(values::add);\n+    if (values.isEmpty()) {\n+        return new ReturnValue<>(null);\n+    } else if (values.size() == 1) {\n+        return new ReturnValue<>(values.get(0));\n+    } else {\n+        return new ReturnValue<>(values);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}