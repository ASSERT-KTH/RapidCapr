{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double totalTyped = 0.0;\n    double total = 0.0;\n    for (String key : jsonObject.keySet()) {\n        if (jsonObject.get(key) instanceof JSONObject) {\n            JSONObject subJson = (JSONObject) jsonObject.get(key);\n            total += subJson.size();\n            for (String innerKey : subJson.keySet()) {\n                Object value = subJson.get(innerKey);\n                if (value != null && value.getClass().getSimpleName().equals(\"String\")) {\n                    totalTyped++;\n                }\n            }\n        }\n    }\n    if (total == 0.0) {\n        return 0.0;\n    }\n    return totalTyped / total * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d039ac72 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double totalTyped = 0.0;\n+    double total = 0.0;\n+    for (String key : jsonObject.keySet()) {\n+        if (jsonObject.get(key) instanceof JSONObject) {\n+            JSONObject subJson = (JSONObject) jsonObject.get(key);\n+            total += subJson.size();\n+            for (String innerKey : subJson.keySet()) {\n+                Object value = subJson.get(innerKey);\n+                if (value != null && value.getClass().getSimpleName().equals(\"String\")) {\n+                    totalTyped++;\n+                }\n+            }\n+        }\n+    }\n+    if (total == 0.0) {\n+        return 0.0;\n+    }\n+    return totalTyped / total * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}