{
    "patch": "      if (ref.isVarDeclaration()) {\n        return true;\n      }\n\n      // Look for the first simple assignment to the variable.\n      for (Reference maybeAssign : getAssignments()) {\n        if (maybeAssign.isInBlockAfter(use)) {\n          return false;\n        }\n        // Ignore initializations before the variable was used.\n        if (maybeAssign.isInitializingAssignmentToName()\n            && maybeAssign.getIndex() < use.getIndex()) {\n          continue;\n        }\n        // Check for a simple (non-compound) assignment to the variable.\n        JsExpression assignRhs = maybeAssign.getRhs();\n        if (assignRhs instanceof JsNameRef\n            && ((JsNameRef) assignRhs).getName().equals(name)\n            && assignRhs.getQualifier() == null\n            && maybeAssign.isInBlockAfter(ref)) {\n          return false;\n        }\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4fc359bb 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref.isVarDeclaration()) {\n+        return true;\n+      }\n+\n+      // Look for the first simple assignment to the variable.\n+      for (Reference maybeAssign : getAssignments()) {\n+        if (maybeAssign.isInBlockAfter(use)) {\n+          return false;\n+        }\n+        // Ignore initializations before the variable was used.\n+        if (maybeAssign.isInitializingAssignmentToName()\n+            && maybeAssign.getIndex() < use.getIndex()) {\n+          continue;\n+        }\n+        // Check for a simple (non-compound) assignment to the variable.\n+        JsExpression assignRhs = maybeAssign.getRhs();\n+        if (assignRhs instanceof JsNameRef\n+            && ((JsNameRef) assignRhs).getName().equals(name)\n+            && assignRhs.getQualifier() == null\n+            && maybeAssign.isInBlockAfter(ref)) {\n+          return false;\n+        }\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}