{
    "patch": "    List<Node> toRemove = new ArrayList<>();\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node arg : argList.children()) {\n        if (arg.isParamList()) {\n          continue;\n        }\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          toRemove.add(arg);\n        } else {\n          // Arguments are added to a Set so that it's easier to do a look-up.\n          referenced.add(var);\n        }\n      }\n      for (Node arg : toRemove) {\n        arg.detach();\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b4defb4d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> toRemove = new ArrayList<>();\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node arg : argList.children()) {\n+        if (arg.isParamList()) {\n+          continue;\n+        }\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          toRemove.add(arg);\n+        } else {\n+          // Arguments are added to a Set so that it's easier to do a look-up.\n+          referenced.add(var);\n+        }\n+      }\n+      for (Node arg : toRemove) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}