{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n\n    if (flags.process_closure_primitives) {\n        options.setCollapsingProperties(true); // enable property collapsing\n        options.setCollapseObjectLiterals(true); // enable object literal collapsing\n        options.setComputeFunctionSideEffects(true); // compute function side effects\n        options.setInlineConstantVars(true); // enable inline constant variables\n        options.setInlineFunctions(CompilerOptions.Reach.LOCAL_ONLY); // enable local function inlining\n\n        // set maximum lines of code in one block for collapse method\n        options.collapseAnonymousFunctionsMaxLines = 1000; \n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..146963a4 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,36 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n \n     WarningLevel wLevel = flags.warning_level;\n     wLevel.setOptionsForWarningLevel(options);\n+\n     for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n+        formattingOption.applyToOptions(options);\n     }\n+\n     if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+        options.setCollapsingProperties(true); // enable property collapsing\n+        options.setCollapseObjectLiterals(true); // enable object literal collapsing\n+        options.setComputeFunctionSideEffects(true); // compute function side effects\n+        options.setInlineConstantVars(true); // enable inline constant variables\n+        options.setInlineFunctions(CompilerOptions.Reach.LOCAL_ONLY); // enable local function inlining\n+\n+        // set maximum lines of code in one block for collapse method\n+        options.collapseAnonymousFunctionsMaxLines = 1000; \n     }\n \n     initOptionsFromFlags(options);\n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}