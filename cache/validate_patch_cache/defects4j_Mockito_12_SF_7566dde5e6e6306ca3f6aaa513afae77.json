{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic != null && generic instanceof ParameterizedType) {\n        Type type = generic;\n        while (type instanceof ParameterizedType) {\n            Type[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();\n            if (typeArguments.length == 0) {\n                break;\n            }\n            Type typeArgument = typeArguments[0];\n            if (typeArgument instanceof ParameterizedType) {\n                type = typeArgument;\n            } else if (typeArgument instanceof Class) {\n                return (Class<?>) typeArgument;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..a817b1a9f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,26 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type generic = field.getGenericType();\n+    if (generic != null && generic instanceof ParameterizedType) {\n+        Type type = generic;\n+        while (type instanceof ParameterizedType) {\n+            Type[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+            if (typeArguments.length == 0) {\n+                break;\n+            }\n+            Type typeArgument = typeArguments[0];\n+            if (typeArgument instanceof ParameterizedType) {\n+                type = typeArgument;\n+            } else if (typeArgument instanceof Class) {\n+                return (Class<?>) typeArgument;\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+\n+    return Object.class;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<interface java.util.Set> but was:<class java.lang.String>",
    "test_result": "FAIL"
}