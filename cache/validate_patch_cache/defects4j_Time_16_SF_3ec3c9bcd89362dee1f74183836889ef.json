{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    Chronology chrono = instant.getChronology();\n    DateTimeZone originalZone = null;\n    if (!chrono.isFixed()) {\n        originalZone = chrono.getZone();\n        chrono = selectChronology(originalZone);\n    }\n    DateTimeParserBucket bucket;\n    if (iOffsetParsed) {\n        bucket = new DateTimeParserBucket(\n                0, chrono.withUTC(), iLocale, iPivotYear, iDefaultYear);\n    } else {\n        bucket = new DateTimeParserBucket(\n                chrono, iLocale, iPivotYear, iDefaultYear);\n    }\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() == null) {\n                throw new IllegalArgumentException(\"Parsed timestamp without offset\");\n            }\n            instant.setMillis(bucket.computeMillis());\n            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()));\n        } else {\n            if (bucket.getZone() == null) {\n                bucket.setZone(originalZone);\n            }\n            instant.setMillis(bucket.computeMillis(originalZone));\n            if (!chrono.equals(originalZone)) {\n                instant.setZone(bucket.getZone());\n            }\n        }\n        return newPos;\n    } else {\n        instant.setMillis(bucket.getMillis()); // Sets the correct millisecond instant even when the parser fails to parse all text.\n        if (iOffsetParsed) {\n            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()));\n        } else if (!chrono.equals(originalZone)) {\n            instant.setZone(originalZone);\n        }\n        return newPos;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..eb62c9e1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,53 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone originalZone = null;\n+    if (!chrono.isFixed()) {\n+        originalZone = chrono.getZone();\n+        chrono = selectChronology(originalZone);\n+    }\n+    DateTimeParserBucket bucket;\n+    if (iOffsetParsed) {\n+        bucket = new DateTimeParserBucket(\n+                0, chrono.withUTC(), iLocale, iPivotYear, iDefaultYear);\n+    } else {\n+        bucket = new DateTimeParserBucket(\n+                chrono, iLocale, iPivotYear, iDefaultYear);\n+    }\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() == null) {\n+                throw new IllegalArgumentException(\"Parsed timestamp without offset\");\n+            }\n+            instant.setMillis(bucket.computeMillis());\n+            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()));\n+        } else {\n+            if (bucket.getZone() == null) {\n+                bucket.setZone(originalZone);\n+            }\n+            instant.setMillis(bucket.computeMillis(originalZone));\n+            if (!chrono.equals(originalZone)) {\n+                instant.setZone(bucket.getZone());\n+            }\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        return newPos;\n+    } else {\n+        instant.setMillis(bucket.getMillis()); // Sets the correct millisecond instant even when the parser fails to parse all text.\n+        if (iOffsetParsed) {\n+            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()));\n+        } else if (!chrono.equals(originalZone)) {\n+            instant.setZone(originalZone);\n         }\n         return newPos;\n     }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}