{
    "patch": "          // Check that the assignment happens only once.\n          int assignCount = 0;\n          for (Reference r : getVariableReferences()) {\n            if (r.isAssignmentToName()) {\n              assignCount++;\n            }\n          }\n          if (assignCount > 1) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..606e2d4e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Check that the assignment happens only once.\n+          int assignCount = 0;\n+          for (Reference r : getVariableReferences()) {\n+            if (r.isAssignmentToName()) {\n+              assignCount++;\n+            }\n+          }\n+          if (assignCount > 1) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}