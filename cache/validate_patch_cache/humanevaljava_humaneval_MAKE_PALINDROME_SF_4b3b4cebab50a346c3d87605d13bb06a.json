{
    "patch": "public static String make_palindrome(String str) {\n    if (str.length() == 0)\n        return \"\";\n\n    int left = 0, right = str.length() - 1;\n    while(left <= right) {\n        if(str.charAt(left) != str.charAt(right)) {\n            StringBuilder sb = new StringBuilder(str.substring(left, right+1));\n            if(is_palindrome(sb.toString() + str.substring(0, left))) {\n                return sb.reverse().toString() + str;\n            } else if (is_palindrome(str.substring(right, str.length()) + sb.toString())) {\n                return str + sb.toString() + str.substring(right, str.length());\n            } \n            return str + str.substring(0, left) + str.charAt(left) + make_palindrome(str.substring(left+1, right)) + str.charAt(left) + str.substring(right, str.length());\n        }\n        left++;\n        right--;\n    }\n    return str;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\nindex 05f44d8..e9fcdaa 100644\n--- a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n+++ b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n@@ -9,17 +9,24 @@ public class MAKE_PALINDROME {\n         return true;\n     }\n \n-    public static String make_palindrome(String str){\n-        if (str.length() == 0)\n-            return \"\";\n+public static String make_palindrome(String str) {\n+    if (str.length() == 0)\n+        return \"\";\n \n-        int beginning_of_suffix = 0;\n-        while (! is_palindrome(str.substring(beginning_of_suffix))){\n-            beginning_of_suffix += 1;\n+    int left = 0, right = str.length() - 1;\n+    while(left <= right) {\n+        if(str.charAt(left) != str.charAt(right)) {\n+            StringBuilder sb = new StringBuilder(str.substring(left, right+1));\n+            if(is_palindrome(sb.toString() + str.substring(0, left))) {\n+                return sb.reverse().toString() + str;\n+            } else if (is_palindrome(str.substring(right, str.length()) + sb.toString())) {\n+                return str + sb.toString() + str.substring(right, str.length());\n+            } \n+            return str + str.substring(0, left) + str.charAt(left) + make_palindrome(str.substring(left+1, right)) + str.charAt(left) + str.substring(right, str.length());\n         }\n-        \n-        String result = str;\n-        result += str.substring(0, beginning_of_suffix);\n-        return result;\n+        left++;\n+        right--;\n     }\n+    return str;\n+}\n }",
    "result_reason": "   TEST_MAKE_PALINDROME.test_2:23 expected:<xyz[xyxz]> but was:<xyz[yx]>",
    "test_result": "FAIL"
}