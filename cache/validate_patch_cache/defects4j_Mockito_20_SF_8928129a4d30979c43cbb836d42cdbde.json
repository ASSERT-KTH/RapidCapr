{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    SerializableMode serializableMode = settings.getSerializableMode();\n    if (serializableMode != null && serializableMode == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        if (mockInstance == null) {\n            throw new MockitoException(\"Failed to instantiate mock of type \" + mockedProxyType.getName());\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        T mock = ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n        return mock;\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    }\n}\n\nprivate class MockMethodInterceptor implements InvocationHandlerAdapter {\n\n    private final RemoteInvocationHandler mockitoInterceptor;\n    private final MockCreationSettings<?> settings;\n\n    public MockMethodInterceptor(RemoteInvocationHandler mockitoInterceptor, MockCreationSettings<?> settings) {\n        this.mockitoInterceptor = mockitoInterceptor;\n        this.settings = settings;\n    }\n\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (settings.isSerializable()) { // if serializable, call through to MockitoWrapper\n            return invokeViaMockitoWrapper(method, args);\n        }\n        if (isGroovyMethod(method)) {\n            return handleGroovyMethod(method, args);\n        }\n\n        // call the default implementation before invoking our mock method handler\n        Object result = null;\n        try {\n            result = superMethod.invoke(proxy, args);\n        } catch (InvocationTargetException e) {\n            Throwable cause = e.getCause();\n            throw cause != null ? cause : e;\n        } catch (IllegalAccessException e) {\n            throw new MockitoException(\"Error invoking super method\", e);\n        }\n\n        return mockitoInterceptor.handle(new InterceptedInvocation(proxy, method, args, SuperMethod.isSuperMethod(result), MethodMockBehavior.getByteBuddyMockHandler(), mockitoInterceptor));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..7cbcb16a5 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,75 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    SerializableMode serializableMode = settings.getSerializableMode();\n+    if (serializableMode != null && serializableMode == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    T mockInstance = null;\n+    try {\n+        mockInstance = classInstantiator.instantiate(mockedProxyType);\n+        if (mockInstance == null) {\n+            throw new MockitoException(\"Failed to instantiate mock of type \" + mockedProxyType.getName());\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        T mock = ensureMockIsAssignableToMockedType(settings, mockInstance);\n+\n+        return mock;\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mockito mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(settings.getTypeToMock()),\n+                \"  proxy instance class : \" + describeClass(mockInstance),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+                \"\"\n+        ),cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    }\n+}\n+\n+private class MockMethodInterceptor implements InvocationHandlerAdapter {\n+\n+    private final RemoteInvocationHandler mockitoInterceptor;\n+    private final MockCreationSettings<?> settings;\n+\n+    public MockMethodInterceptor(RemoteInvocationHandler mockitoInterceptor, MockCreationSettings<?> settings) {\n+        this.mockitoInterceptor = mockitoInterceptor;\n+        this.settings = settings;\n+    }\n+\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        if (settings.isSerializable()) { // if serializable, call through to MockitoWrapper\n+            return invokeViaMockitoWrapper(method, args);\n         }\n+        if (isGroovyMethod(method)) {\n+            return handleGroovyMethod(method, args);\n+        }\n+\n+        // call the default implementation before invoking our mock method handler\n+        Object result = null;\n+        try {\n+            result = superMethod.invoke(proxy, args);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            throw cause != null ? cause : e;\n+        } catch (IllegalAccessException e) {\n+            throw new MockitoException(\"Error invoking super method\", e);\n+        }\n+\n+        return mockitoInterceptor.handle(new InterceptedInvocation(proxy, method, args, SuperMethod.isSuperMethod(result), MethodMockBehavior.getByteBuddyMockHandler(), mockitoInterceptor));\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}