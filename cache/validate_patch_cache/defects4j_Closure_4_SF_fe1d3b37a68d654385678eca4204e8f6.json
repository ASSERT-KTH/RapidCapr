{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Check for implicit prototype cycles before attempting to resolve the type\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    boolean resolved = false;\n\n    // Try to resolve the type using the registry\n    resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      // If the type was resolved, call super.resolveInternal and finish the property continuations\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      // Return the resolved type, or this if it couldn't be resolved\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    } else {\n      // If the type couldn't be resolved via the registry, try to resolve it via properties\n      resolveViaProperties(t, enclosing);\n      if (isResolved()) {\n        // If the type was resolved, call super.resolveInternal and finish the property continuations\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        // Return the resolved type\n        return this;\n      } else {\n        // If the type couldn't be resolved via properties either, return this\n        return this;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..f2937cdb 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,34 +181,37 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    // Check for implicit prototype cycles before attempting to resolve the type\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    boolean resolved = false;\n+\n+    // Try to resolve the type using the registry\n+    resolved = resolveViaRegistry(t, enclosing);\n     if (resolved) {\n+      // If the type was resolved, call super.resolveInternal and finish the property continuations\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      // Return the resolved type, or this if it couldn't be resolved\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n+    } else {\n+      // If the type couldn't be resolved via the registry, try to resolve it via properties\n+      resolveViaProperties(t, enclosing);\n+      if (isResolved()) {\n+        // If the type was resolved, call super.resolveInternal and finish the property continuations\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        // Return the resolved type\n+        return this;\n+      } else {\n+        // If the type couldn't be resolved via properties either, return this\n+        return this;\n+      }\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}