{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n\n        int size = elementPairs.size();\n        Separator sep = null;\n        List<Object> subList = new ArrayList<Object>();\n        for (Object obj : elementPairs) {\n            if (obj instanceof Separator) {\n                sep = (Separator) obj;\n            } else {\n                subList.add(obj);\n            }\n        }\n\n        if (sep != null) {\n            PeriodFormatter formatter = toFormatter(subList, notPrinter, notParser);\n            PeriodPrinter printer = formatter.getPrinter() == null ? null : sep.finish(formatter.getPrinter(), null);\n            PeriodParser parser = formatter.getParser() == null ? null : sep.finish(null, formatter.getParser());\n            return new PeriodFormatter(printer, parser);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..490bc53d 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,27 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n+\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        Separator sep = null;\n+        List<Object> subList = new ArrayList<Object>();\n+        for (Object obj : elementPairs) {\n+            if (obj instanceof Separator) {\n+                sep = (Separator) obj;\n+            } else {\n+                subList.add(obj);\n+            }\n         }\n-    }\n+\n+        if (sep != null) {\n+            PeriodFormatter formatter = toFormatter(subList, notPrinter, notParser);\n+            PeriodPrinter printer = formatter.getPrinter() == null ? null : sep.finish(formatter.getPrinter(), null);\n+            PeriodParser parser = formatter.getParser() == null ? null : sep.finish(null, formatter.getParser());\n+            return new PeriodFormatter(printer, parser);\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}