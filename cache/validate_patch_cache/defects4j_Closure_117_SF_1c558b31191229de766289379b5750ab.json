{
    "patch": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() || type.isConstructor()) {\n      ObjectType obj = type.toObjectType();\n      // If the function has a named constructor, display the name instead of the\n      // ANONYMOUS_CONSTRUCTOR_PROPERTY\n      if (obj != null && obj.hasProperty(ANONYMOUS_CONSTRUCTOR_PROPERTY)) {\n        String constructorName = obj.getUnqualifiedName();\n        if (!constructorName.isEmpty()) {\n          return constructorName;\n        }\n      }\n\n      // Fall back to anonymous function names.\n      return \"function\";\n    }\n    if (type.isInterface()) {\n      ObjectType obj = type.toMaybeObjectType();\n      if (obj != null && obj.getReferenceName() != null) {\n        return obj.getReferenceName();\n      }\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else {\n      return type.toString();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..b7cac754 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -760,17 +760,29 @@ class TypeValidator {\n         type = dereferenced;\n       }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+    if (type.isFunctionPrototypeType() || type.isConstructor()) {\n+      ObjectType obj = type.toObjectType();\n+      // If the function has a named constructor, display the name instead of the\n+      // ANONYMOUS_CONSTRUCTOR_PROPERTY\n+      if (obj != null && obj.hasProperty(ANONYMOUS_CONSTRUCTOR_PROPERTY)) {\n+        String constructorName = obj.getUnqualifiedName();\n+        if (!constructorName.isEmpty()) {\n+          return constructorName;\n+        }\n+      }\n+\n+      // Fall back to anonymous function names.\n+      return \"function\";\n+    }\n+    if (type.isInterface()) {\n+      ObjectType obj = type.toMaybeObjectType();\n+      if (obj != null && obj.getReferenceName() != null) {\n+        return obj.getReferenceName();\n+      }\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n     } else {\n       return type.toString();\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}