{
    "patch": "} else if (parent != null && parent.isCall() && parent.getParent().isExprResult() && parent.getFirstChild() == n) {\n      // Exclude the rhs of the call expression from being associated with the lhs.\n      recordDepScope(parent.getFirstChild().getNext(), ns);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..7e2e7db7 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,9 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+} else if (parent != null && parent.isCall() && parent.getParent().isExprResult() && parent.getFirstChild() == n) {\n+      // Exclude the rhs of the call expression from being associated with the lhs.\n+      recordDepScope(parent.getFirstChild().getNext(), ns);\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}