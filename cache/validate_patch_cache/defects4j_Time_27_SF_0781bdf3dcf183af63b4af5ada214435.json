{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);                \n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], new MyPeriodParser((PeriodParser) comp[1]));\n        }\n}\n\nprivate static class MyPeriodParser implements PeriodParser {\n    private static final long MAX_VALUE = (long) Integer.MAX_VALUE * PeriodType.standard().getFieldTypes()[6].getUnitMillis();\n    private final PeriodParser wrapped;\n\n    public MyPeriodParser(PeriodParser wrapped) {\n        this.wrapped = wrapped;\n    }\n\n    @Override\n    public int parseInto(ReadWritablePeriod period, String text, int position, Locale locale) {\n        int newPos = wrapped.parseInto(period, text, position, locale);\n\n        // check if the period has overshot the maximum value of an integer\n        if (period.toDurationFrom(null).getMillis() > MAX_VALUE) {\n            throw new IllegalArgumentException(\"Duration is too large\");\n        }\n\n        return newPos;\n    }\n\n    @Override\n    public void parseInto(MutablePeriod period, String text, int position, Locale locale) {\n        wrapped.parseInto(period, text, position, locale);\n\n        // check if the period has overshot the maximum value of an integer\n        if (period.toDurationFrom(null).getMillis() > MAX_VALUE) {\n            throw new IllegalArgumentException(\"Duration is too large\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..340dd57b 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,59 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            Separator sep = (Separator) elementPairs.get(0);                \n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n+\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter((PeriodPrinter) comp[0], new MyPeriodParser((PeriodParser) comp[1]));\n+        }\n+}\n+\n+private static class MyPeriodParser implements PeriodParser {\n+    private static final long MAX_VALUE = (long) Integer.MAX_VALUE * PeriodType.standard().getFieldTypes()[6].getUnitMillis();\n+    private final PeriodParser wrapped;\n+\n+    public MyPeriodParser(PeriodParser wrapped) {\n+        this.wrapped = wrapped;\n+    }\n+\n+    @Override\n+    public int parseInto(ReadWritablePeriod period, String text, int position, Locale locale) {\n+        int newPos = wrapped.parseInto(period, text, position, locale);\n+\n+        // check if the period has overshot the maximum value of an integer\n+        if (period.toDurationFrom(null).getMillis() > MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Duration is too large\");\n         }\n+\n+        return newPos;\n     }\n \n+    @Override\n+    public void parseInto(MutablePeriod period, String text, int position, Locale locale) {\n+        wrapped.parseInto(period, text, position, locale);\n+\n+        // check if the period has overshot the maximum value of an integer\n+        if (period.toDurationFrom(null).getMillis() > MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Duration is too large\");\n+        }\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}