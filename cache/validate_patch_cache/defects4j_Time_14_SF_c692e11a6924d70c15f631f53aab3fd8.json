{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Adjust result if necessary to handle invalid dates\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            int monthIndex = DateTimeUtils.indexOfType(partial, DateTimeFieldType.monthOfYear());\n            if (monthIndex >= 0) {\n                int month = iChronology.monthOfYear().get(instant);\n                int year = iChronology.year().get(instant);\n                int maxDay = iChronology.monthOfYear().getLastDayOfMonth(year, month);\n                int dayIndex = DateTimeUtils.indexOfType(partial, DateTimeFieldType.dayOfMonth());\n                if (dayIndex >= 0) {\n                    int day = Math.min(maxDay, values[dayIndex]);\n                    instant = iChronology.dayOfMonth().set(instant, day);\n                }\n                int lastValidMonth = month - 1;\n                while (true) {\n                    try {\n                        return iChronology.get(partial, instant);\n                    } catch (IllegalFieldValueException ex) {\n                        if (month <= 1) {\n                            throw ex;\n                        }\n                        month--;\n                        lastValidMonth = month - 1;\n                        maxDay = iChronology.monthOfYear().getLastDayOfMonth(year, month);\n                        instant = iChronology.monthOfYear().set(instant, month);\n                        instant = iChronology.dayOfMonth().set(instant, Math.min(maxDay, values[dayIndex]));\n                    }\n                }\n            } else {\n                throw e;\n            }\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b4e3fd54 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,57 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+\n+        // Adjust result if necessary to handle invalid dates\n+        try {\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalFieldValueException e) {\n+            int monthIndex = DateTimeUtils.indexOfType(partial, DateTimeFieldType.monthOfYear());\n+            if (monthIndex >= 0) {\n+                int month = iChronology.monthOfYear().get(instant);\n+                int year = iChronology.year().get(instant);\n+                int maxDay = iChronology.monthOfYear().getLastDayOfMonth(year, month);\n+                int dayIndex = DateTimeUtils.indexOfType(partial, DateTimeFieldType.dayOfMonth());\n+                if (dayIndex >= 0) {\n+                    int day = Math.min(maxDay, values[dayIndex]);\n+                    instant = iChronology.dayOfMonth().set(instant, day);\n+                }\n+                int lastValidMonth = month - 1;\n+                while (true) {\n+                    try {\n+                        return iChronology.get(partial, instant);\n+                    } catch (IllegalFieldValueException ex) {\n+                        if (month <= 1) {\n+                            throw ex;\n+                        }\n+                        month--;\n+                        lastValidMonth = month - 1;\n+                        maxDay = iChronology.monthOfYear().getLastDayOfMonth(year, month);\n+                        instant = iChronology.monthOfYear().set(instant, month);\n+                        instant = iChronology.dayOfMonth().set(instant, Math.min(maxDay, values[dayIndex]));\n+                    }\n+                }\n+            } else {\n+                throw e;\n+            }\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}