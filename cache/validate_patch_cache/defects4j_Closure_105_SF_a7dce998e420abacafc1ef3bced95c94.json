{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left, \"join\") || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  List<Node> arrayFoldedChildren = new ArrayList<>();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  int nonEmptyStringCount = 0;\n  boolean hasEmptyString = false;\n\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (!NodeUtil.isImmutableValue(elem)) {\n      if (nonEmptyStringCount > 0 && sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n        nonEmptyStringCount = 0;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    } else {\n      String str = NodeUtil.getStringValue(elem);\n      if (str.isEmpty()) {\n        hasEmptyString = true;\n      } else {\n        if (sb.length() > 0) {\n          sb.append(NodeUtil.getStringValue(right));\n        }\n        sb.append(str);\n        nonEmptyStringCount++;\n      }\n    }\n  }\n\n  if (nonEmptyStringCount > 0) {\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n  } else if (hasEmptyString) {\n    Node emptyStringNode = Node.newString(\"\");\n    parent.replaceChild(n, emptyStringNode);\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  if (arrayFoldedChildren.size() == 0) {\n    return;\n  }\n\n  // one for each comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  if (arrayFoldedChildren.size() == 1) {\n    Node foldedStringNode = arrayFoldedChildren.remove(0);\n    if (foldedSize > originalSize) {\n      return;\n    }\n    arrayNode.replaceWith(foldedStringNode.detach());\n  } else {\n    // No folding could actually be performed.\n    if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n      return;\n    }\n    int kJoinOverhead = \"[].join()\".length();\n    foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n    if (foldedSize > originalSize) {\n      return;\n    }\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n      arrayNode.addChildToBack(node);\n    }\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..b5934b17 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,87 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n-\n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left, \"join\") || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n+  Node arrayNode = left.getFirstChild();\n+  List<Node> arrayFoldedChildren = new ArrayList<>();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+  int nonEmptyStringCount = 0;\n+  boolean hasEmptyString = false;\n+\n+  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n+    if (!NodeUtil.isImmutableValue(elem)) {\n+      if (nonEmptyStringCount > 0 && sb.length() > 0) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+        nonEmptyStringCount = 0;\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n+    } else {\n+      String str = NodeUtil.getStringValue(elem);\n+      if (str.isEmpty()) {\n+        hasEmptyString = true;\n       } else {\n         if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+          sb.append(NodeUtil.getStringValue(right));\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        sb.append(str);\n+        nonEmptyStringCount++;\n       }\n-      elem = elem.getNext();\n     }\n+  }\n \n+  if (nonEmptyStringCount > 0) {\n     if (sb.length() > 0) {\n       // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  } else if (hasEmptyString) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    parent.replaceChild(n, emptyStringNode);\n+    t.getCompiler().reportCodeChange();\n+    return;\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (arrayFoldedChildren.size() == 0) {\n+    return;\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  // one for each comma.\n+  foldedSize += arrayFoldedChildren.size() - 1;\n+  int originalSize = InlineCostEstimator.getCost(n);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  if (arrayFoldedChildren.size() == 1) {\n+    Node foldedStringNode = arrayFoldedChildren.remove(0);\n+    if (foldedSize > originalSize) {\n+      return;\n+    }\n+    arrayNode.replaceWith(foldedStringNode.detach());\n+  } else {\n+    // No folding could actually be performed.\n+    if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+      return;\n+    }\n+    int kJoinOverhead = \"[].join()\".length();\n+    foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n+    if (foldedSize > originalSize) {\n+      return;\n+    }\n+    arrayNode.detachChildren();\n+    for (Node node : arrayFoldedChildren) {\n+      arrayNode.addChildToBack(node);\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n+  t.getCompiler().reportCodeChange();\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: method isGetProp in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}