{
    "patch": "      Preconditions.checkState(value != null);\n      if (NodeUtil.isFunctionDeclaration(value)) {\n        return false;\n      }\n\n      if (value.isFunction() || NodeUtil.isClassExpression(value)) {\n        Node callNode = reference.getParent();\n        Node argumentList = callNode.getSecondChild();\n        if (argumentList.getChildCount() > 0) {\n          // If the function/class is invoked with arguments, don't inline it.\n          return false;\n        }\n        CodingConvention convention = compiler.getCodingConvention();\n        SubclassRelationship relationship =\n            convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n          return false;\n        }\n        // Don't inline singleton getter methods calls as this confused\n        // class-removing logic.\n        String methodName = convention.getSingletonGetterClassName(callNode);\n        if (methodName != null) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..e69cce85 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,31 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      Preconditions.checkState(value != null);\n+      if (NodeUtil.isFunctionDeclaration(value)) {\n+        return false;\n+      }\n+\n+      if (value.isFunction() || NodeUtil.isClassExpression(value)) {\n+        Node callNode = reference.getParent();\n+        Node argumentList = callNode.getSecondChild();\n+        if (argumentList.getChildCount() > 0) {\n+          // If the function/class is invoked with arguments, don't inline it.\n+          return false;\n+        }\n+        CodingConvention convention = compiler.getCodingConvention();\n+        SubclassRelationship relationship =\n+            convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+          return false;\n+        }\n+        // Don't inline singleton getter methods calls as this confused\n+        // class-removing logic.\n+        String methodName = convention.getSingletonGetterClassName(callNode);\n+        if (methodName != null) {\n+          return false;\n+        }\n+      }\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}