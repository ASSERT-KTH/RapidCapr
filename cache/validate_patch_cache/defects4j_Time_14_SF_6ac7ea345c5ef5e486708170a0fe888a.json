{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        try {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // if there's no February 29 to worry about, just add the value\n            if (instant != DateTimeConstants.MILLIS_PER_DAY * iChronology.dayOfMonth().withMaximumValue().get(DateTimeFieldType.millisOfSecond())) {\n                instant = add(instant, valueToAdd);\n            } else {\n                // if there is a February 29 to worry about, add all the months except the last one\n                // then, if the result is February 28, add the last month so that the result is February 29\n                long newInstant = add(instant, valueToAdd * DateTimeConstants.MILLIS_PER_MONTH * (partial.getValue(1) - 1L));\n                if (iChronology.dayOfMonth().get(newInstant) < 29) {\n                    newInstant = iChronology.monthOfYear().set(newInstant, partial.getValue(1)).getMillis();\n                } else {\n                    newInstant = add(newInstant, DateTimeConstants.MILLIS_PER_MONTH);\n                }\n                instant = newInstant;\n            }\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException ignored) {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f355aa3a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        try {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+            // if there's no February 29 to worry about, just add the value\n+            if (instant != DateTimeConstants.MILLIS_PER_DAY * iChronology.dayOfMonth().withMaximumValue().get(DateTimeFieldType.millisOfSecond())) {\n+                instant = add(instant, valueToAdd);\n+            } else {\n+                // if there is a February 29 to worry about, add all the months except the last one\n+                // then, if the result is February 28, add the last month so that the result is February 29\n+                long newInstant = add(instant, valueToAdd * DateTimeConstants.MILLIS_PER_MONTH * (partial.getValue(1) - 1L));\n+                if (iChronology.dayOfMonth().get(newInstant) < 29) {\n+                    newInstant = iChronology.monthOfYear().set(newInstant, partial.getValue(1)).getMillis();\n+                } else {\n+                    newInstant = add(newInstant, DateTimeConstants.MILLIS_PER_MONTH);\n+                }\n+                instant = newInstant;\n+            }\n             return iChronology.get(partial, instant);\n-        } else {\n+        } catch (IllegalArgumentException ignored) {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}