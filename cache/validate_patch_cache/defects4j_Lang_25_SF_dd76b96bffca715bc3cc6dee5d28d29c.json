{
    "patch": "public String escapeIso8859_1(String str) {\n    StringBuilder sbUnicode = new StringBuilder();\n    StringBuilder sbRaw = new StringBuilder();\n    boolean success = true;\n    for (int i = 0; i < str.length(); i++) {\n        char chr = str.charAt(i);\n        if (chr <= 255) {\n            sbRaw.append(chr);\n        } else {\n            try {\n                String unicode = String.format(\"\\\\u%04x\", (int) chr);\n                sbUnicode.append(unicode);\n            } catch (Exception e) {\n                success = false;\n            }\n        }\n    }\n    if (success) {\n        return sbRaw.toString();\n    } else {\n        return sbUnicode.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1c2f18d8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,29 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String escapeIso8859_1(String str) {\n+    StringBuilder sbUnicode = new StringBuilder();\n+    StringBuilder sbRaw = new StringBuilder();\n+    boolean success = true;\n+    for (int i = 0; i < str.length(); i++) {\n+        char chr = str.charAt(i);\n+        if (chr <= 255) {\n+            sbRaw.append(chr);\n+        } else {\n+            try {\n+                String unicode = String.format(\"\\\\u%04x\", (int) chr);\n+                sbUnicode.append(unicode);\n+            } catch (Exception e) {\n+                success = false;\n+            }\n+        }\n+    }\n+    if (success) {\n+        return sbRaw.toString();\n+    } else {\n+        return sbUnicode.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}