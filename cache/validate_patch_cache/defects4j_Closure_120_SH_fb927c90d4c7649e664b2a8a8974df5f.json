{
    "patch": "      // At this point, we have found the one and only assignment to the variable.\n      // Check that it is not a compound assignment (`+=`, `-=`, etc.) and that it is\n      // not a post-increment or post-decrement (`a++`, `a--`).\n      if (!ref.isDirectlyAssigned() ||\n          ref.getNode().getType() == Token.ASSIGN_ADD ||\n          ref.getNode().getType() == Token.ASSIGN_SUB ||\n          ref.getNode().getType() == Token.ASSIGN_DIV ||\n          ref.getNode().getType() == Token.ASSIGN_MOD ||\n          ref.getNode().getType() == Token.ASSIGN_MUL ||\n          ref.getNode().getType() == Token.ASSIGN_BITAND ||\n          ref.getNode().getType() == Token.ASSIGN_BITOR ||\n          ref.getNode().getType() == Token.ASSIGN_BITXOR ||\n          ref.getNode().getType() == Token.ASSIGN_LSH ||\n          ref.getNode().getType() == Token.ASSIGN_RSH ||\n          ref.getNode().getType() == Token.ASSIGN_BITOR ||\n          ref.getNode().getType() == Token.ASSIGN_URSH ||\n          ref.isPostfix() ||\n          ref.isPrefix()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..56990270 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // At this point, we have found the one and only assignment to the variable.\n+      // Check that it is not a compound assignment (`+=`, `-=`, etc.) and that it is\n+      // not a post-increment or post-decrement (`a++`, `a--`).\n+      if (!ref.isDirectlyAssigned() ||\n+          ref.getNode().getType() == Token.ASSIGN_ADD ||\n+          ref.getNode().getType() == Token.ASSIGN_SUB ||\n+          ref.getNode().getType() == Token.ASSIGN_DIV ||\n+          ref.getNode().getType() == Token.ASSIGN_MOD ||\n+          ref.getNode().getType() == Token.ASSIGN_MUL ||\n+          ref.getNode().getType() == Token.ASSIGN_BITAND ||\n+          ref.getNode().getType() == Token.ASSIGN_BITOR ||\n+          ref.getNode().getType() == Token.ASSIGN_BITXOR ||\n+          ref.getNode().getType() == Token.ASSIGN_LSH ||\n+          ref.getNode().getType() == Token.ASSIGN_RSH ||\n+          ref.getNode().getType() == Token.ASSIGN_BITOR ||\n+          ref.getNode().getType() == Token.ASSIGN_URSH ||\n+          ref.isPostfix() ||\n+          ref.isPrefix()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}