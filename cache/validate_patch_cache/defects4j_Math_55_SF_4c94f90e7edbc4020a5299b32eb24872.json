{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n  double v1X = v1.getX();\n  double v1Y = v1.getY();\n  double v1Z = v1.getZ();\n  double v2X = v2.getX();\n  double v2Y = v2.getY();\n  double v2Z = v2.getZ();\n\n  // rescale both vectors without losing precision,\n  // to ensure their norm are the same order of magnitude\n  double factor1 = FastMath.max(FastMath.max(FastMath.abs(v1X), FastMath.abs(v1Y)), FastMath.abs(v1Z));\n  double factor2 = FastMath.max(FastMath.max(FastMath.abs(v2X), FastMath.abs(v2Y)), FastMath.abs(v2Z));\n  v1X /= factor1;\n  v1Y /= factor1;\n  v1Z /= factor1;\n  v2X /= factor2;\n  v2Y /= factor2;\n  v2Z /= factor2;\n\n  // we reduce cancellation errors by preconditioning,\n  // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n  // v3 without loss of precision. See Kahan lecture\n  // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n  // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n  // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n  double rho = ((v1X * v2X + v1Y * v2Y) + v1Z * v2Z) / ((v2X * v2X + v2Y * v2Y) + v2Z * v2Z);\n  double v3X = v1X - rho * v2X;\n  double v3Y = v1Y - rho * v2Y;\n  double v3Z = v1Z - rho * v2Z;\n\n  // compute cross product from v3 and v2 instead of v1 and v2\n  return new Vector3D(v3Y * v2Z - v3Z * v2Y, v3Z * v2X - v3X * v2Z, v3X * v2Y - v3Y * v2X).normalize().scalarMultiply(\n      factor1 * factor2);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..3b9622360 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,42 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+  double v1X = v1.getX();\n+  double v1Y = v1.getY();\n+  double v1Z = v1.getZ();\n+  double v2X = v2.getX();\n+  double v2Y = v2.getY();\n+  double v2Z = v2.getZ();\n+\n+  // rescale both vectors without losing precision,\n+  // to ensure their norm are the same order of magnitude\n+  double factor1 = FastMath.max(FastMath.max(FastMath.abs(v1X), FastMath.abs(v1Y)), FastMath.abs(v1Z));\n+  double factor2 = FastMath.max(FastMath.max(FastMath.abs(v2X), FastMath.abs(v2Y)), FastMath.abs(v2Z));\n+  v1X /= factor1;\n+  v1Y /= factor1;\n+  v1Z /= factor1;\n+  v2X /= factor2;\n+  v2Y /= factor2;\n+  v2Z /= factor2;\n+\n+  // we reduce cancellation errors by preconditioning,\n+  // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+  // v3 without loss of precision. See Kahan lecture\n+  // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+  // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+  // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+  double rho = ((v1X * v2X + v1Y * v2Y) + v1Z * v2Z) / ((v2X * v2X + v2Y * v2Y) + v2Z * v2Z);\n+  double v3X = v1X - rho * v2X;\n+  double v3Y = v1Y - rho * v2Y;\n+  double v3Z = v1Z - rho * v2Z;\n+\n+  // compute cross product from v3 and v2 instead of v1 and v2\n+  return new Vector3D(v3Y * v2Z - v3Z * v2Y, v3Z * v2X - v3X * v2Z, v3X * v2Y - v3Y * v2X).normalize().scalarMultiply(\n+      factor1 * factor2);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.289686993997119>",
    "test_result": "FAIL"
}