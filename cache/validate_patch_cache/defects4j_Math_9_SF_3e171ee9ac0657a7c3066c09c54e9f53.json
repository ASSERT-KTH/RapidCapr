{
    "patch": "    @Test\n    public void testRevert() {\n        final Vector3D expectedDirection = new Vector3D(0.028581782127907646, -0.6692001761273673, 0.7428625920328036);\n        final Line expectedLine = new Line(new Vector3D(0, 0, 0), expectedDirection);\n        final Line revertedLine = line.revert();\n        assertTrue(revertedLine.getDirection().equals(expectedDirection));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..e71db4b71 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,12 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+    @Test\n+    public void testRevert() {\n+        final Vector3D expectedDirection = new Vector3D(0.028581782127907646, -0.6692001761273673, 0.7428625920328036);\n+        final Line expectedLine = new Line(new Vector3D(0, 0, 0), expectedDirection);\n+        final Line revertedLine = line.revert();\n+        assertTrue(revertedLine.getDirection().equals(expectedDirection));\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}