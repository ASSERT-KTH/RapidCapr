{
    "patch": "    Set<String> referencedParameterNames = Sets.newHashSet();\n    for (Var referencedVar : referenced) {\n        if (referencedVar.getParentNode().isParamList()) {\n            referencedParameterNames.add(referencedVar.getName());\n        }\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String paramName = lastArg.getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referencedParameterNames.contains(paramName)) {\n          argList.removeChild(lastArg);\n          fnScope.undeclare(var);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n   } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n   }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..958f9b8c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedParameterNames = Sets.newHashSet();\n+    for (Var referencedVar : referenced) {\n+        if (referencedVar.getParentNode().isParamList()) {\n+            referencedParameterNames.add(referencedVar.getName());\n+        }\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String paramName = lastArg.getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referencedParameterNames.contains(paramName)) {\n+          argList.removeChild(lastArg);\n+          fnScope.undeclare(var);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+   } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+   }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}