{
    "patch": "Chronology newChronology = iChronology == null ? ISOChronology.getInstanceUTC() : iChronology;\nDateTimeField[] newFields = new DateTimeField[newTypes.length];\nfor (int i = 0; i < newTypes.length; i++) {\n    newFields[i] = newTypes[i].getField(newChronology);\n}\nPartial newPartial = new Partial(newFields, newValues);\nnewPartial = newPartial.withChronologyRetainFields(iChronology);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..8b06a7a8 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,13 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Chronology newChronology = iChronology == null ? ISOChronology.getInstanceUTC() : iChronology;\n+DateTimeField[] newFields = new DateTimeField[newTypes.length];\n+for (int i = 0; i < newTypes.length; i++) {\n+    newFields[i] = newTypes[i].getField(newChronology);\n+}\n+Partial newPartial = new Partial(newFields, newValues);\n+newPartial = newPartial.withChronologyRetainFields(iChronology);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}