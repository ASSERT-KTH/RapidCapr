{
    "patch": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.time.DateParser;\nimport org.apache.commons.lang3.time.FastDateParser;\nimport org.apache.commons.lang3.time.FastDateParser.Strategy;\nimport org.apache.commons.lang3.time.FastDateParser.TimeUnit;\n\n\nprivate void init() {\n    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n    StringBuilder regex= new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher= formatPattern.matcher(pattern);\n    if(!patternMatcher.lookingAt()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    currentFormatField= patternMatcher.group();\n    Strategy currentStrategy= getStrategy(currentFormatField);\n    for(;;) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if(!patternMatcher.lookingAt()) {\n            currentStrategy = null;\n            break;\n        }\n        String nextFormatField= patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= nextFormatField;\n        currentStrategy= nextStrategy;\n    }\n\n    if(currentStrategy != null) {\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentStrategy.reset(this);\n        nextStrategy = null;\n    }\n    currentFormatField= null;\n    strategies= collector.toArray(new Strategy[0]);\n    parsePattern= Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..f247ba47 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,55 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.commons.lang3.time.DateParser;\n+import org.apache.commons.lang3.time.FastDateParser;\n+import org.apache.commons.lang3.time.FastDateParser.Strategy;\n+import org.apache.commons.lang3.time.FastDateParser.TimeUnit;\n+\n+\n+private void init() {\n+    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+\n+    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+\n+    StringBuilder regex= new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n+\n+    Matcher patternMatcher= formatPattern.matcher(pattern);\n+    if(!patternMatcher.lookingAt()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+\n+    currentFormatField= patternMatcher.group();\n+    Strategy currentStrategy= getStrategy(currentFormatField);\n+    for(;;) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if(!patternMatcher.lookingAt()) {\n+            currentStrategy = null;\n+            break;\n+        }\n+        String nextFormatField= patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField= nextFormatField;\n+        currentStrategy= nextStrategy;\n+    }\n+\n+    if(currentStrategy != null) {\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentStrategy.reset(this);\n+        nextStrategy = null;\n+    }\n+    currentFormatField= null;\n+    strategies= collector.toArray(new Strategy[0]);\n+    parsePattern= Pattern.compile(regex.toString());\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}