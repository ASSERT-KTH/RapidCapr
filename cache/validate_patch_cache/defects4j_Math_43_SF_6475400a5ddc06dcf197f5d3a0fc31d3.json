{
    "patch": "public void addValue(double value) {\n    // Increment all tracking implementations with the latest value\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance, or geoMean have been overridden, we use them\n    // directly as long as the input value is not NaN or negative (for geoMean)\n    if (meanImpl instanceof Mean && !Double.isNaN(value)) {\n        meanImpl.increment(value);\n    } else {\n        if (meanImpl == null) {\n            meanImpl = new Mean(); // Default implementation\n            meanImpl.increment(value);\n        }\n    }\n    if (varianceImpl instanceof Variance && !Double.isNaN(value)) {\n        varianceImpl.increment(value);\n    } else {\n        if (varianceImpl == null) {\n            varianceImpl = new Variance(); // Default implementation\n            varianceImpl.increment(value);\n\n            // Need to update sum and n for variance computation\n            double mean = (meanImpl != null) ? meanImpl.getResult() : 0;\n            double diff = value - mean;\n            sumsqImpl.increment(diff * diff);\n            n++;\n        } \n    }\n    if (geoMeanImpl instanceof GeometricMean && value > 0) {\n        geoMeanImpl.increment(value);\n    } else {\n        if (geoMeanImpl == null) {\n            geoMeanImpl = new GeometricMean(); // Default implementation\n            if (value > 0) {\n                geoMeanImpl.increment(value);\n            }\n        }\n    }\n\n    // Update n regardless\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..d1621ee37 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,54 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    // Increment all tracking implementations with the latest value\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance, or geoMean have been overridden, we use them\n+    // directly as long as the input value is not NaN or negative (for geoMean)\n+    if (meanImpl instanceof Mean && !Double.isNaN(value)) {\n+        meanImpl.increment(value);\n+    } else {\n+        if (meanImpl == null) {\n+            meanImpl = new Mean(); // Default implementation\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+    }\n+    if (varianceImpl instanceof Variance && !Double.isNaN(value)) {\n+        varianceImpl.increment(value);\n+    } else {\n+        if (varianceImpl == null) {\n+            varianceImpl = new Variance(); // Default implementation\n             varianceImpl.increment(value);\n+\n+            // Need to update sum and n for variance computation\n+            double mean = (meanImpl != null) ? meanImpl.getResult() : 0;\n+            double diff = value - mean;\n+            sumsqImpl.increment(diff * diff);\n+            n++;\n+        } \n+    }\n+    if (geoMeanImpl instanceof GeometricMean && value > 0) {\n+        geoMeanImpl.increment(value);\n+    } else {\n+        if (geoMeanImpl == null) {\n+            geoMeanImpl = new GeometricMean(); // Default implementation\n+            if (value > 0) {\n+                geoMeanImpl.increment(value);\n+            }\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n     }\n \n+    // Update n regardless\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<4.0> but was:<0.0>",
    "test_result": "FAIL"
}