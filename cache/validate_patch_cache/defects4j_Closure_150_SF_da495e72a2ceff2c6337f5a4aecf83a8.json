{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n        if (parent != null && n.isBlock() && parent.isFunction()) {\n            handleFunctionMeta(n, parent);\n        }\n        switch (n.getToken()) {\n            case FUNCTION:\n                if (parent != null) {  // parent==null and FUNCTION implies the root notes\n                    handleFunction(n, parent);\n                    return;\n                }\n                break;\n            case CATCH:\n                if (parent.isBlock()) {  // Parent must be a BLOCK, not an LP.\n                    handleCatch(n, parent);\n                    return;\n                }\n                break;\n            case VAR:\n                handleVar(n, parent);\n                return;\n            case LET:\n                handleLet(n, parent);\n                return;\n            case CONST:\n                handleConst(n, parent);\n                return;\n            default:\n                // fall through to noteLiteralType\n        }\n        if (NodeUtil.isExpressionNode(n) || n.isTemplateLit()) {\n            noteExpressionType(n, parent);\n        } else {\n            noteLiteralType(n);\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..86c448ca 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1441,28 +1441,39 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param parent The parent of n\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        if (parent != null && n.isBlock() && parent.isFunction()) {\n+            handleFunctionMeta(n, parent);\n+        }\n+        switch (n.getToken()) {\n+            case FUNCTION:\n+                if (parent != null) {  // parent==null and FUNCTION implies the root notes\n+                    handleFunction(n, parent);\n+                    return;\n+                }\n+                break;\n+            case CATCH:\n+                if (parent.isBlock()) {  // Parent must be a BLOCK, not an LP.\n+                    handleCatch(n, parent);\n+                    return;\n+                }\n+                break;\n+            case VAR:\n+                handleVar(n, parent);\n+                return;\n+            case LET:\n+                handleLet(n, parent);\n+                return;\n+            case CONST:\n+                handleConst(n, parent);\n+                return;\n+            default:\n+                // fall through to noteLiteralType\n+        }\n+        if (NodeUtil.isExpressionNode(n) || n.isTemplateLit()) {\n+            noteExpressionType(n, parent);\n+        } else {\n+            noteLiteralType(n);\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}