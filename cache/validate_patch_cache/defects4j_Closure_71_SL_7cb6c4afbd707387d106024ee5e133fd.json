{
    "patch": "      boolean isOverride = parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop ||\n          t.getScope().isGlobal() &&\n          !parent.isVar() &&\n          !parent.isFunction() &&\n          isPrototypeAssignment(getprop, parent) &&\n          objectType != null && objectType.hasReferenceToSuperClass() &&\n          !objectType.isConstructor() && !objectType.isInterface() &&\n          isSuperProperty(getprop, parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..f61a85bf 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,14 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop ||\n+          t.getScope().isGlobal() &&\n+          !parent.isVar() &&\n+          !parent.isFunction() &&\n+          isPrototypeAssignment(getprop, parent) &&\n+          objectType != null && objectType.hasReferenceToSuperClass() &&\n+          !objectType.isConstructor() && !objectType.isInterface() &&\n+          isSuperProperty(getprop, parent);\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}