{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            int year = iDefaultYear;\n            int month = iChrono.monthOfYear().get(millis);\n            int day = iChrono.dayOfMonth().get(millis);\n            if (iChrono.year().isLeap(year)) {\n                if (month == 1 && day > 29) {\n                    // Adjust for February being too short\n                    day = 29;\n                }\n            } else {\n                if (month == 1 && day > 28) {\n                    // Adjust for February being too short\n                    day = 28;\n                }\n            }\n            DurationFieldType field = savedFields[0].iField.getType();\n            year = iChrono.weekyear().get(millis);\n            iDefaultYear = year; // Store default year to use for leap year calculation\n            if (field.equals(DateTimeFieldType.weekyear())) {\n                // Already converted to primary field\n            } else if (field.equals(DateTimeFieldType.weekOfWeekyear())) {\n                iDefaultYear = iChrono.weekyear().add(year, 0); // Default to current week year\n            } else if (field.equals(DateTimeFieldType.yearOfCentury()) || field.equals(DateTimeFieldType.year())) {\n                // Go to nearest century boundary\n                iDefaultYear = iChrono.yearOfCentury().add(year, -year % 100);\n                if (field.equals(DateTimeFieldType.year())) {\n                    // Default to beginning of century\n                    iDefaultYear = iChrono.year().set(iDefaultYear, 0);\n                }\n            } else if (field.equals(DateTimeFieldType.centuryOfEra())) {\n                // Go to nearest century boundary\n                iDefaultYear = iChrono.centuryOfEra().add(year, -year % 100);\n            } else if (field.equals(DateTimeFieldType.era())) {\n                // Determine whether to use current era or its predecessor.\n                saveField(DateTimeFieldType.year(), (year < 1 ? 1 : 0));\n                return computeMillis(resetFields, text);\n            } else if (field.equals(DateTimeFieldType.weekyearOfCentury())) {\n                iDefaultYear = iChrono.weekyear().set(iDefaultYear, iChrono.weekyearOfCentury().get(year) - 1);\n            } else if (field.equals(DateTimeFieldType.weekyearOfCentury())) {\n                iDefaultYear = iChrono.weekyear().add(iChrono.centuryOfEra().get(year), iChrono.weekyearOfCentury().get(year) - 1);\n            } else {\n                return iMillis;\n            }\n            // Recalculate millis with updated default year\n            millis = getChronology().year().set(millis, iDefaultYear);\n            millis = getChronology().millisOfDay().set(millis, 0); // Set time to midnight\n            millis = getChronology().monthOfYear().set(millis, month);\n            millis = getChronology().dayOfMonth().set(millis, day);\n        }\n    }\n    \n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    \n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1ee90973 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,55 +328,99 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            int year = iDefaultYear;\n+            int month = iChrono.monthOfYear().get(millis);\n+            int day = iChrono.dayOfMonth().get(millis);\n+            if (iChrono.year().isLeap(year)) {\n+                if (month == 1 && day > 29) {\n+                    // Adjust for February being too short\n+                    day = 29;\n+                }\n+            } else {\n+                if (month == 1 && day > 28) {\n+                    // Adjust for February being too short\n+                    day = 28;\n+                }\n+            }\n+            DurationFieldType field = savedFields[0].iField.getType();\n+            year = iChrono.weekyear().get(millis);\n+            iDefaultYear = year; // Store default year to use for leap year calculation\n+            if (field.equals(DateTimeFieldType.weekyear())) {\n+                // Already converted to primary field\n+            } else if (field.equals(DateTimeFieldType.weekOfWeekyear())) {\n+                iDefaultYear = iChrono.weekyear().add(year, 0); // Default to current week year\n+            } else if (field.equals(DateTimeFieldType.yearOfCentury()) || field.equals(DateTimeFieldType.year())) {\n+                // Go to nearest century boundary\n+                iDefaultYear = iChrono.yearOfCentury().add(year, -year % 100);\n+                if (field.equals(DateTimeFieldType.year())) {\n+                    // Default to beginning of century\n+                    iDefaultYear = iChrono.year().set(iDefaultYear, 0);\n+                }\n+            } else if (field.equals(DateTimeFieldType.centuryOfEra())) {\n+                // Go to nearest century boundary\n+                iDefaultYear = iChrono.centuryOfEra().add(year, -year % 100);\n+            } else if (field.equals(DateTimeFieldType.era())) {\n+                // Determine whether to use current era or its predecessor.\n+                saveField(DateTimeFieldType.year(), (year < 1 ? 1 : 0));\n                 return computeMillis(resetFields, text);\n+            } else if (field.equals(DateTimeFieldType.weekyearOfCentury())) {\n+                iDefaultYear = iChrono.weekyear().set(iDefaultYear, iChrono.weekyearOfCentury().get(year) - 1);\n+            } else if (field.equals(DateTimeFieldType.weekyearOfCentury())) {\n+                iDefaultYear = iChrono.weekyear().add(iChrono.centuryOfEra().get(year), iChrono.weekyearOfCentury().get(year) - 1);\n+            } else {\n+                return iMillis;\n             }\n+            // Recalculate millis with updated default year\n+            millis = getChronology().year().set(millis, iDefaultYear);\n+            millis = getChronology().millisOfDay().set(millis, 0); // Set time to midnight\n+            millis = getChronology().monthOfYear().set(millis, month);\n+            millis = getChronology().dayOfMonth().set(millis, day);\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    }\n+    \n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    \n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n     \n+    return millis;\n+}\n+    \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right\n      * choice since it always creates an internal copy of the array, even if it",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}