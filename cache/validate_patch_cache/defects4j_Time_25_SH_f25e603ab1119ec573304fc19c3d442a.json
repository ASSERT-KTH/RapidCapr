{
    "patch": "                final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n                final int maxOffsetAdjusted = offsetAdjusted;\n                if (minOffsetAdjusted != maxOffsetAdjusted) {\n                    long prevTransition = previousTransition(instantAdjusted);\n                    if (prevTransition == instantAdjusted - 1L) {\n                        // a duplicate local time\n                        prevTransition = previousTransition(prevTransition);\n                    }\n                    if (prevTransition < instantLocal - 1L &&\n                            getOffset(prevTransition) == maxOffsetAdjusted) {\n                        // gap bridged\n                        return maxOffsetAdjusted;\n                    }\n                    else {\n                        return minOffsetAdjusted;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9a548b8a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n+                final int maxOffsetAdjusted = offsetAdjusted;\n+                if (minOffsetAdjusted != maxOffsetAdjusted) {\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    if (prevTransition == instantAdjusted - 1L) {\n+                        // a duplicate local time\n+                        prevTransition = previousTransition(prevTransition);\n+                    }\n+                    if (prevTransition < instantLocal - 1L &&\n+                            getOffset(prevTransition) == maxOffsetAdjusted) {\n+                        // gap bridged\n+                        return maxOffsetAdjusted;\n+                    }\n+                    else {\n+                        return minOffsetAdjusted;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}