{
    "patch": "      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT:\n        // Unary operators cast their argument to a primitive and only non-object\n        // literals and pure local values of those primitives are OK.\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.GT:\n      case Token.LT:\n      case Token.GE:\n      case Token.LE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            || evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.CONDITION:\n        return evaluatesToLocalValue(value.getSecondChild(), locals)\n            || evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..bbb591fe 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,54 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literals objects with non-literal children are allowed.\n         return true;\n+      case Token.IN:\n+        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n+        return true;\n+      case Token.INSTANCEOF:\n+      case Token.TYPEOF:\n+      case Token.VOID:\n+      case Token.NOT:\n+      case Token.NEG:\n+      case Token.BITNOT:\n+        // Unary operators cast their argument to a primitive and only non-object\n+        // literals and pure local values of those primitives are OK.\n+        return evaluatesToLocalValue(value.getFirstChild(), locals);\n+      case Token.BITOR:\n+      case Token.BITXOR:\n+      case Token.BITAND:\n+      case Token.LSH:\n+      case Token.RSH:\n+      case Token.URSH:\n+      case Token.ADD:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.GT:\n+      case Token.LT:\n+      case Token.GE:\n+      case Token.LE:\n+      case Token.EQ:\n+      case Token.NE:\n+      case Token.SHEQ:\n+      case Token.SHNE:\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            || evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.CONDITION:\n+        return evaluatesToLocalValue(value.getSecondChild(), locals)\n+            || evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}