{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null || name.length() == 0) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // The left paren might not be on the same line as the function keyword,\n        // so the following logic tries to find the left paren and calculate its\n        // charno.\n        int functionPosition = functionNode.getAbsolutePosition();\n        int lpOffset = functionNode.getPositionOfLeftParen();\n        for (int i = lpOffset; i >= 0 && i <= functionPosition; i++) {\n          if (getSource(i) == '(') {\n            lpOffset = i;\n            break;\n          }\n        }\n        newName.setCharno(position2charno(lpOffset));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getPositionOfLeftParen();\n      if (isUnnamedFunction) {\n        // If the function is unnamed, then we already calculated the location of\n        // the left paren above.\n        lp.setCharno(position2charno(lparenCharno));\n      } else {\n        // If the function is named, we need to find the location of the function\n        // keyword and use that to compute the location of the left paren.\n        int functionPosition = functionNode.getAbsolutePosition();\n        lp.setCharno(position2charno(functionPosition + \"function\".length()));\n      }\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..e88323d9 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,70 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      Boolean isUnnamedFunction = false;\n+      if (name == null || name.length() == 0) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+        // The left paren might not be on the same line as the function keyword,\n+        // so the following logic tries to find the left paren and calculate its\n+        // charno.\n+        int functionPosition = functionNode.getAbsolutePosition();\n+        int lpOffset = functionNode.getPositionOfLeftParen();\n+        for (int i = lpOffset; i >= 0 && i <= functionPosition; i++) {\n+          if (getSource(i) == '(') {\n+            lpOffset = i;\n+            break;\n+          }\n+        }\n+        newName.setCharno(position2charno(lpOffset));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      // The left paren's complicated because it's not represented by an\n+      // AstNode, so there's nothing that has the actual line number that it\n+      // appeared on.  We know the paren has to appear on the same line as the\n+      // function name (or else a semicolon will be inserted.)  If there's no\n+      // function name, assume the paren was on the same line as the function.\n+      // TODO(bowdidge): Mark line number of paren correctly.\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      int lparenCharno = functionNode.getPositionOfLeftParen();\n+      if (isUnnamedFunction) {\n+        // If the function is unnamed, then we already calculated the location of\n+        // the left paren above.\n+        lp.setCharno(position2charno(lparenCharno));\n+      } else {\n+        // If the function is named, we need to find the location of the function\n+        // keyword and use that to compute the location of the left paren.\n+        int functionPosition = functionNode.getAbsolutePosition();\n+        lp.setCharno(position2charno(functionPosition + \"function\".length()));\n+      }\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+      return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}