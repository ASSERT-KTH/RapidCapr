{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    FunctionType ct = constructorType.restrictByNotNullOrUndefined().toMaybeFunctionType();\n    if (ct != null && ct.isConstructor()) {\n      // Fix: get the instance type of the constructor.\n      JSType instanceType = ct.getInstanceType();\n      if (instanceType == null) {\n        // If the instance type is null, get the type of \"this\".\n        JSType thisType = ct.getTypeOfThis();\n        if (thisType != null && !thisType.isUnknownType() && !thisType.isEmptyType()) {\n          instanceType = thisType;\n        } else {\n          // If the constructor's type is uncertain and it is 'Object', we consider any\n          // type as possible.\n          JSType objectType = getNativeType(OBJECT_TYPE);\n          if (constructor.matchesQualifiedName(\"Object\") && scope.isGlobalVar(\"Object\", false)) {\n            instanceType = objectType;\n          } else {\n            // If \"this\" type is unknown, get an unknown type.\n            instanceType = getNativeType(UNKNOWN_TYPE);\n          }\n        }\n      }\n      // Prevents invalid 'null' unions\n      if (instanceType == null || instanceType.isUnknownType() || instanceType.isEmptyType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        type = instanceType.restrictByNotNullOrUndefined();\n      }\n    } else {\n      // If the constructor's type is unknown or empty, get an unknown type.\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..9ed37739 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,49 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    FunctionType ct = constructorType.restrictByNotNullOrUndefined().toMaybeFunctionType();\n+    if (ct != null && ct.isConstructor()) {\n+      // Fix: get the instance type of the constructor.\n+      JSType instanceType = ct.getInstanceType();\n+      if (instanceType == null) {\n+        // If the instance type is null, get the type of \"this\".\n+        JSType thisType = ct.getTypeOfThis();\n+        if (thisType != null && !thisType.isUnknownType() && !thisType.isEmptyType()) {\n+          instanceType = thisType;\n+        } else {\n+          // If the constructor's type is uncertain and it is 'Object', we consider any\n+          // type as possible.\n+          JSType objectType = getNativeType(OBJECT_TYPE);\n+          if (constructor.matchesQualifiedName(\"Object\") && scope.isGlobalVar(\"Object\", false)) {\n+            instanceType = objectType;\n+          } else {\n+            // If \"this\" type is unknown, get an unknown type.\n+            instanceType = getNativeType(UNKNOWN_TYPE);\n+          }\n+        }\n+      }\n+      // Prevents invalid 'null' unions\n+      if (instanceType == null || instanceType.isUnknownType() || instanceType.isEmptyType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        type = instanceType.restrictByNotNullOrUndefined();\n       }\n+    } else {\n+      // If the constructor's type is unknown or empty, get an unknown type.\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}