{
    "patch": "      Node assign = NodeUtil.getEnclosingAssignment(parent);\n      if (assign != null) {\n        if (NodeUtil.isGet(assign.getFirstChild())) {\n          Node objectOfAssigment = assign.getFirstFirstChild();\n          if (!objectOfAssigment.isThis()) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8728d519 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,14 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node assign = NodeUtil.getEnclosingAssignment(parent);\n+      if (assign != null) {\n+        if (NodeUtil.isGet(assign.getFirstChild())) {\n+          Node objectOfAssigment = assign.getFirstFirstChild();\n+          if (!objectOfAssigment.isThis()) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}