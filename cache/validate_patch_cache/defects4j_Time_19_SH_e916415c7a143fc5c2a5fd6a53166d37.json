{
    "patch": "        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            return (offsetLocal == offsetAdjusted) ? offsetAdjusted :\n                    (getOffset(nextTransition(instantAdjusted)) == offsetLocal) ? offsetLocal :\n                    (getOffset(previousTransition(instantLocal - offsetAdjusted)) == offsetAdjusted) ? offsetAdjusted : offsetLocal;\n        } else {\n            long prevTransition = previousTransition(instantLocal - offsetLocal);\n            long nextTransition = nextTransition(instantLocal - offsetLocal);\n            boolean prevLocal = (prevTransition + getOffset(prevTransition)) < instantLocal - offsetLocal;\n            boolean nextLocal = (nextTransition +  getOffset(nextTransition)) <= instantLocal - offsetLocal;\n            if (prevLocal == nextLocal) {\n                return offsetLocal;\n            } else {\n                return nextLocal ? getOffset(nextTransition) : getOffset(prevTransition);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..fa7cf6d7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            return (offsetLocal == offsetAdjusted) ? offsetAdjusted :\n+                    (getOffset(nextTransition(instantAdjusted)) == offsetLocal) ? offsetLocal :\n+                    (getOffset(previousTransition(instantLocal - offsetAdjusted)) == offsetAdjusted) ? offsetAdjusted : offsetLocal;\n+        } else {\n+            long prevTransition = previousTransition(instantLocal - offsetLocal);\n+            long nextTransition = nextTransition(instantLocal - offsetLocal);\n+            boolean prevLocal = (prevTransition + getOffset(prevTransition)) < instantLocal - offsetLocal;\n+            boolean nextLocal = (nextTransition +  getOffset(nextTransition)) <= instantLocal - offsetLocal;\n+            if (prevLocal == nextLocal) {\n+                return offsetLocal;\n+            } else {\n+                return nextLocal ? getOffset(nextTransition) : getOffset(prevTransition);\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}