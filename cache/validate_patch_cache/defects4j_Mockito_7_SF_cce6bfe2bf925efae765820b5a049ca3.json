{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable.getOwnerType() instanceof Class) {\n        Class<?> ownerClass = (Class<?>) typeVariable.getOwnerType();\n        for (TypeVariable<? extends Class<?>> typeParam : ownerClass.getTypeParameters()) {\n            if (typeVariable.getName().equals(typeParam.getName())) {\n                Type actualTypeArgument = typeVariable.getActualTypeArguments()[Arrays.asList(ownerClass.getTypeParameters()).indexOf(typeParam)];\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    } else if (typeVariable instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) typeVariable;\n        for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..058bea6a6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable.getOwnerType() instanceof Class) {\n+        Class<?> ownerClass = (Class<?>) typeVariable.getOwnerType();\n+        for (TypeVariable<? extends Class<?>> typeParam : ownerClass.getTypeParameters()) {\n+            if (typeVariable.getName().equals(typeParam.getName())) {\n+                Type actualTypeArgument = typeVariable.getActualTypeArguments()[Arrays.asList(ownerClass.getTypeParameters()).indexOf(typeParam)];\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    } else if (typeVariable instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) typeVariable;\n+        for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}