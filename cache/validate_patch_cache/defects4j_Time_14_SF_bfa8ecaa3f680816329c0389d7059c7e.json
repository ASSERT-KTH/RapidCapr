{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            int monthOverflow = iChronology.monthOfYear().getDurationField().getRangeDurationField().get(instant);        \n            int monthOfYear = iChronology.monthOfYear().get(instant);\n            // calculate the new year and month\n            int newMonth = ((monthOfYear - 1 + valueToAdd) % 12) + 1;\n            int monthOverflowDelta = (monthOfYear - 1 + valueToAdd) / 12;\n            int newYear = iChronology.year().get(instant) + monthOverflowDelta;\n            if (newMonth < 1) {\n                newMonth += 12;\n                newYear -= 1;\n            }\n            while (!iChronology.isLeapYear(newYear) && newMonth == 2 && monthOverflow > 28) {\n                monthOverflow -= 1;\n            }\n            if (newMonth == 2 && monthOverflow == 29 && !iChronology.isLeapYear(newYear)) {\n                monthOverflow = 28;\n            }\n            \n            instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n            for (int i = 0; i < values.length; i++) {\n                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                    continue;\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0ee136ee 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -201,18 +201,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     //-----------------------------------------------------------------------\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        // month is largest field and being added to, such as month-day\n+        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+            int monthOverflow = iChronology.monthOfYear().getDurationField().getRangeDurationField().get(instant);        \n+            int monthOfYear = iChronology.monthOfYear().get(instant);\n+            // calculate the new year and month\n+            int newMonth = ((monthOfYear - 1 + valueToAdd) % 12) + 1;\n+            int monthOverflowDelta = (monthOfYear - 1 + valueToAdd) / 12;\n+            int newYear = iChronology.year().get(instant) + monthOverflowDelta;\n+            if (newMonth < 1) {\n+                newMonth += 12;\n+                newYear -= 1;\n+            }\n+            while (!iChronology.isLeapYear(newYear) && newMonth == 2 && monthOverflow > 28) {\n+                monthOverflow -= 1;\n+            }\n+            if (newMonth == 2 && monthOverflow == 29 && !iChronology.isLeapYear(newYear)) {\n+                monthOverflow = 28;\n+            }\n+            \n+            instant = iChronology.monthOfYear().set(iChronology.year().set(0L, newYear), newMonth);\n+            for (int i = 0; i < values.length; i++) {\n+                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                    continue;\n+                }\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            }\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}