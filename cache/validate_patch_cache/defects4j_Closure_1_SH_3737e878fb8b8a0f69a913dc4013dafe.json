{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\n\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n    final AbstractCompiler compilerCopy = compiler;\n    final Scope fnScopeCopy = fnScope;\n    NodeUtil.visitPostOrder(argList, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n            if (!node.isName()) {\n                return;\n            }\n\n            String argName = node.getString();\n            Var var = fnScopeCopy.getVar(argName);\n            if (!referenced.contains(var)) {\n                NodeUtil.removeNode(node, compilerCopy);\n                compilerCopy.reportCodeChange();\n            }\n        }\n    });\n} else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0300f9e0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+    final AbstractCompiler compilerCopy = compiler;\n+    final Scope fnScopeCopy = fnScope;\n+    NodeUtil.visitPostOrder(argList, new NodeUtil.Visitor() {\n+        @Override\n+        public void visit(Node node) {\n+            if (!node.isName()) {\n+                return;\n+            }\n+\n+            String argName = node.getString();\n+            Var var = fnScopeCopy.getVar(argName);\n+            if (!referenced.contains(var)) {\n+                NodeUtil.removeNode(node, compilerCopy);\n+                compilerCopy.reportCodeChange();\n+            }\n+        }\n+    });\n+} else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}