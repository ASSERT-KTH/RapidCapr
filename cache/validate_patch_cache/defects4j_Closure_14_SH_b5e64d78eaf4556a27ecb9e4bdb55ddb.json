{
    "patch": "if (parent.getLastChild() == node) {\n  if (cfa != null) {\n    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n\n      // If we have a finally block, create an unconditional edge to the\n      // end of it. The fall-through edge will be created implicitly.\n      List<DiGraphEdge<Node, Branch>> outEdges =\n          cfa.getControlFlowGraph().getOutEdges(finallyNode);\n      for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n        if (outEdge.getValue() == Branch.UNCOND) {\n          cfa.createEdge(finallyNode, Branch.UNCOND, outEdge.getDest());\n          break;\n        }\n      }\n    }\n  }\n  return computeFollowNode(fromNode, parent, cfa);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..992d0fe8 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,25 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (parent.getLastChild() == node) {\n+  if (cfa != null) {\n+    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+\n+      // If we have a finally block, create an unconditional edge to the\n+      // end of it. The fall-through edge will be created implicitly.\n+      List<DiGraphEdge<Node, Branch>> outEdges =\n+          cfa.getControlFlowGraph().getOutEdges(finallyNode);\n+      for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+        if (outEdge.getValue() == Branch.UNCOND) {\n+          cfa.createEdge(finallyNode, Branch.UNCOND, outEdge.getDest());\n+          break;\n+        }\n+      }\n+    }\n+  }\n+  return computeFollowNode(fromNode, parent, cfa);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}