{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    Node body = n.getLastChild();\n    return NodeUtil.isFunctionExpression(n) && !(body.isBlock() && body.getLastChild() != null && !body.hasChildren() && !body.getLastChild().isFunction());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..b4af2bbe 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,10 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    Node body = n.getLastChild();\n+    return NodeUtil.isFunctionExpression(n) && !(body.isBlock() && body.getLastChild() != null && !body.hasChildren() && !body.getLastChild().isFunction());\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}