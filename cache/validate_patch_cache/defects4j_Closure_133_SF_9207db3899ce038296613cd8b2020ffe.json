{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result.contains(\"JSC_TYPE_PARSE_ERROR\")) {\n        result = \"\";\n    }\n    result = result.replaceAll(\"@[A-Za-z_]+\\\\s+(\\\\{[^}]*\\\\})?\", \"\"); // remove type annotations\n    return result.trim().replaceAll(\"\\\\[(\\\\s+)\\\\]\", \"[$1]\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..0139f8db 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,14 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+    if (result.contains(\"JSC_TYPE_PARSE_ERROR\")) {\n+        result = \"\";\n+    }\n+    result = result.replaceAll(\"@[A-Za-z_]+\\\\s+(\\\\{[^}]*\\\\})?\", \"\"); // remove type annotations\n+    return result.trim().replaceAll(\"\\\\[(\\\\s+)\\\\]\", \"[$1]\");\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}