{
    "patch": "public class MyIterable<T> implements Iterable<T> {\n    private final List<T> list;\n\n    public MyIterable(List<T> list) {\n        this.list = list;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        if (list != null) {\n            return list.iterator();\n        } else {\n            return Collections.emptyList().iterator();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..0f58bc79a 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyIterable<T> implements Iterable<T> {\n+    private final List<T> list;\n+\n+    public MyIterable(List<T> list) {\n+        this.list = list;\n+    }\n+\n+    @Override\n+    public Iterator<T> iterator() {\n+        if (list != null) {\n+            return list.iterator();\n+        } else {\n+            return Collections.emptyList().iterator();\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}