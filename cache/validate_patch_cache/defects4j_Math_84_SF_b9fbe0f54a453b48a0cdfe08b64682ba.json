{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = contract(original[0], gamma, comparator);\n                }\n\n            } else {\n                simplex = contract(original[0], beta, comparator);\n            }\n\n            final RealPointValuePair newBest = simplex[0];\n            if (comparator.compare(newBest, best) == 0) {\n                incrementIterationsCounter();\n            } else {\n                incrementIterationsCounter();\n                incrementIterationsCounter();\n            }\n\n            // check convergence\n            if (converged(getConvergenceChecker(), simplex, original)) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a98b98c33 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,13 +58,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n-            incrementIterationsCounter();\n-\n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n             final RealPointValuePair best = original[0];\n@@ -79,24 +76,24 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original[0], gamma, comparator);\n                 }\n \n-                return;\n-\n+            } else {\n+                simplex = contract(original[0], beta, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            final RealPointValuePair newBest = simplex[0];\n+            if (comparator.compare(newBest, best) == 0) {\n+                incrementIterationsCounter();\n+            } else {\n+                incrementIterationsCounter();\n+                incrementIterationsCounter();\n             }\n \n-        }\n-\n-    }\n+            // check convergence\n+            if (converged(getConvergenceChecker(), simplex, original)) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}