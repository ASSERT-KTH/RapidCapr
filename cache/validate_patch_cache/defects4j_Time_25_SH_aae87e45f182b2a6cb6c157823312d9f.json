{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    int nextLocalOffset = getOffset(nextLocal);\n    int nextAdjustedOffset = getOffset(nextAdjusted);\n    if (nextLocalOffset == offsetLocal) {\n        return offsetLocal;\n    } else if (nextAdjustedOffset == offsetAdjusted) {\n        return offsetAdjusted;\n    } else {\n        if (nextLocalOffset > nextAdjustedOffset && nextLocal - instantAdjusted < nextLocalOffset - offsetLocal) {\n            return offsetLocal;\n        } else if (nextLocalOffset < nextAdjustedOffset && nextAdjusted - instantLocal < nextAdjustedOffset - offsetAdjusted) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cbbc8aef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    int nextLocalOffset = getOffset(nextLocal);\n+    int nextAdjustedOffset = getOffset(nextAdjusted);\n+    if (nextLocalOffset == offsetLocal) {\n+        return offsetLocal;\n+    } else if (nextAdjustedOffset == offsetAdjusted) {\n+        return offsetAdjusted;\n+    } else {\n+        if (nextLocalOffset > nextAdjustedOffset && nextLocal - instantAdjusted < nextLocalOffset - offsetLocal) {\n+            return offsetLocal;\n+        } else if (nextLocalOffset < nextAdjustedOffset && nextAdjusted - instantLocal < nextAdjustedOffset - offsetAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}