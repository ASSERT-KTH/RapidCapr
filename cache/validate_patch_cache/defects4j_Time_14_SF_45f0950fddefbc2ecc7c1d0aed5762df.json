{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (fieldIndex == 1) {\n        int month = values[0];\n        int dayOfMonth = values[1];\n        int year = partial.get(DateTimeFieldType.year());\n\n        // get current year-month-day as LocalDate\n        LocalDate currentDate = new LocalDate(year, month, dayOfMonth, iChronology);\n\n        try {\n            // add/subtract the valueToAdd months using LocalDate\n            LocalDate newDate = currentDate.plusMonths(valueToAdd);\n\n            // get the resulting year-month-day as an array of ints\n            int[] newValues = new int[partial.size()];\n            newValues[0] = newDate.getMonthOfYear();\n            newValues[1] = newDate.getDayOfMonth();\n            for (int i = 2; i < newValues.length; i++) {\n                newValues[i] = partial.getValue(i);\n            }\n\n            return newValues;\n        } catch (IllegalFieldValueException e) {\n            // if adding valueToAdd months results in an invalid date,\n            // add the maximum/minimum number of years to get a valid date\n            int yearsToAdd = (valueToAdd > 0 ? 1 : -1);\n            LocalDate newDate = currentDate;\n            while (true) {\n                try {\n                    newDate = newDate.plusYears(yearsToAdd);\n                    newDate = newDate.plusMonths(valueToAdd % 12);\n\n                    // get the resulting year-month-day as an array of ints\n                    int[] newValues = new int[partial.size()];\n                    newValues[0] = newDate.getMonthOfYear();\n                    newValues[1] = newDate.getDayOfMonth();\n                    for (int i = 2; i < newValues.length; i++) {\n                        newValues[i] = partial.getValue(i);\n                    }\n\n                    return newValues;\n                } catch (IllegalFieldValueException inner) {\n                    // continue looping until a valid date is found\n                }\n            }\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..81ac0d0a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,61 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (fieldIndex == 1) {\n+        int month = values[0];\n+        int dayOfMonth = values[1];\n+        int year = partial.get(DateTimeFieldType.year());\n+\n+        // get current year-month-day as LocalDate\n+        LocalDate currentDate = new LocalDate(year, month, dayOfMonth, iChronology);\n+\n+        try {\n+            // add/subtract the valueToAdd months using LocalDate\n+            LocalDate newDate = currentDate.plusMonths(valueToAdd);\n+\n+            // get the resulting year-month-day as an array of ints\n+            int[] newValues = new int[partial.size()];\n+            newValues[0] = newDate.getMonthOfYear();\n+            newValues[1] = newDate.getDayOfMonth();\n+            for (int i = 2; i < newValues.length; i++) {\n+                newValues[i] = partial.getValue(i);\n+            }\n+\n+            return newValues;\n+        } catch (IllegalFieldValueException e) {\n+            // if adding valueToAdd months results in an invalid date,\n+            // add the maximum/minimum number of years to get a valid date\n+            int yearsToAdd = (valueToAdd > 0 ? 1 : -1);\n+            LocalDate newDate = currentDate;\n+            while (true) {\n+                try {\n+                    newDate = newDate.plusYears(yearsToAdd);\n+                    newDate = newDate.plusMonths(valueToAdd % 12);\n+\n+                    // get the resulting year-month-day as an array of ints\n+                    int[] newValues = new int[partial.size()];\n+                    newValues[0] = newDate.getMonthOfYear();\n+                    newValues[1] = newDate.getDayOfMonth();\n+                    for (int i = 2; i < newValues.length; i++) {\n+                        newValues[i] = partial.getValue(i);\n+                    }\n+\n+                    return newValues;\n+                } catch (IllegalFieldValueException inner) {\n+                    // continue looping until a valid date is found\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}