{
    "patch": "if (NodeUtil.isObjectLitKeyType(child)) {\n  String name = child.getString();\n  // Convert property name to an AST_VAR so that we can\n  // typecheck it.\n  Node fakeDeclaration = new Node(Token.VAR, new Node(Token.NAME, name));\n  if (getScope() != null) {\n    fakeDeclaration.putProp(Node.ORIGINALNAME_PROP, name);\n    typeSystem.getType(getScope(), fakeDeclaration, name);\n  }\n\n  T type = typeSystem.getType(getScope(), n, name);\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n      processProperty(t, prop, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..509cb14e 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,28 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (NodeUtil.isObjectLitKeyType(child)) {\n+  String name = child.getString();\n+  // Convert property name to an AST_VAR so that we can\n+  // typecheck it.\n+  Node fakeDeclaration = new Node(Token.VAR, new Node(Token.NAME, name));\n+  if (getScope() != null) {\n+    fakeDeclaration.putProp(Node.ORIGINALNAME_PROP, name);\n+    typeSystem.getType(getScope(), fakeDeclaration, name);\n+  }\n+\n+  T type = typeSystem.getType(getScope(), n, name);\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+      processProperty(t, prop, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}