{
    "patch": "        if (block.isFunction) {\n          boolean firstInFunction = getInitializingReference() == ref;\n          boolean onlyDeclaredOnce = isDeclaration() && isAssignedOnceInLifetime();\n          boolean onlyAssignedOnce = getOneAndOnlyAssignment() == ref;\n          return (firstInFunction || onlyDeclaredOnce || onlyAssignedOnce);\n        } else if (block.isLoop && block != ref.getBasicBlock()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d09927c4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          boolean firstInFunction = getInitializingReference() == ref;\n+          boolean onlyDeclaredOnce = isDeclaration() && isAssignedOnceInLifetime();\n+          boolean onlyAssignedOnce = getOneAndOnlyAssignment() == ref;\n+          return (firstInFunction || onlyDeclaredOnce || onlyAssignedOnce);\n+        } else if (block.isLoop && block != ref.getBasicBlock()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}