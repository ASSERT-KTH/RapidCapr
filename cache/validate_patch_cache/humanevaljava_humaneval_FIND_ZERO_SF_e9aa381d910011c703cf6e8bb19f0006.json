{
    "patch": "public static double find_zero(List<Double> xs) {\n    double start = -1.0;\n    double end = 1.0;\n    double tolerance = 1e-10;\n\n    double fStart = poly(xs, start);\n    double fEnd = poly(xs, end);\n\n    if (fStart == 0) {\n        return start;\n    }\n    else if (fEnd == 0) {\n        return end;\n    }\n    else if (fStart * fEnd > 0) {\n        return Double.NaN;\n    }\n\n    double mid = (start + end) / 2.0;\n\n    while (Math.abs(poly(xs, mid)) > tolerance) {\n        if (poly(xs, start) * poly(xs, mid) < 0) {\n            end = mid;\n            fEnd = poly(xs, end);\n        } else {\n            start = mid;\n            fStart = poly(xs, start);\n        }\n        if (fStart == 0) {\n            return start;\n        }\n        else if (fEnd == 0) {\n            return end;\n        }\n        mid = (start + end) / 2.0;\n    }\n\n    return mid;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIND_ZERO.java b/src/main/java/humaneval/buggy/FIND_ZERO.java\nindex 9e2c137..aeb1cc4 100644\n--- a/src/main/java/humaneval/buggy/FIND_ZERO.java\n+++ b/src/main/java/humaneval/buggy/FIND_ZERO.java\n@@ -11,23 +11,43 @@ public class FIND_ZERO {\n         return sum;\n     }\n \n-    public static double find_zero(List<Double> xs){\n-        double begin = -1.;\n-        double end = 1.;\n+public static double find_zero(List<Double> xs) {\n+    double start = -1.0;\n+    double end = 1.0;\n+    double tolerance = 1e-10;\n \n-        while (poly(xs, begin) * poly(xs, end) > 0) {\n-            begin *= 2.;\n-            end *= 2.;\n+    double fStart = poly(xs, start);\n+    double fEnd = poly(xs, end);\n+\n+    if (fStart == 0) {\n+        return start;\n+    }\n+    else if (fEnd == 0) {\n+        return end;\n+    }\n+    else if (fStart * fEnd > 0) {\n+        return Double.NaN;\n+    }\n+\n+    double mid = (start + end) / 2.0;\n+\n+    while (Math.abs(poly(xs, mid)) > tolerance) {\n+        if (poly(xs, start) * poly(xs, mid) < 0) {\n+            end = mid;\n+            fEnd = poly(xs, end);\n+        } else {\n+            start = mid;\n+            fStart = poly(xs, start);\n+        }\n+        if (fStart == 0) {\n+            return start;\n         }\n-        while (end - begin > 1e-10) {\n-            double center = (begin + end) / 2.;\n-            \n-            if (poly(xs, begin) * poly(xs, end) < 0) {\n-                begin = center;\n-            } else {\n-                end = center;\n-            }\n+        else if (fEnd == 0) {\n+            return end;\n         }\n-        return begin;\n+        mid = (start + end) / 2.0;\n     }\n+\n+    return mid;\n+}\n }",
    "result_reason": "   TEST_FIND_ZERO.test_3:39",
    "test_result": "FAIL"
}