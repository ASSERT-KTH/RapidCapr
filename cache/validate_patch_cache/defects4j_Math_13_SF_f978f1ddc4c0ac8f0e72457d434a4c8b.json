{
    "patch": "            if (!dec.getEigenvalues().isDiagonalizable()) {\n                throw new NonSquareMatrixException(dec.getEigenvalues().getRowDimension() + \"x\" + dec.getEigenvalues().getColumnDimension());\n            }\n            final RealMatrix v = dec.getV();\n            final RealMatrix d = dec.getD();\n            final int n = d.getRowDimension();\n            final Matrix squareRoot = new BlockRealMatrix(n, n);\n            \n            for (int i = 0; i < n; i++) {\n                final double factor = FastMath.sqrt(d.getEntry(i, i));\n                for (int j = 0; j < n; j++) {\n                    squareRoot.setEntry(i, j, factor * v.getEntry(i, j));\n                }\n            }\n\n            return new Array2DRowRealMatrix(squareRoot.getDataRef(), false);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..df6adfe02 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+            if (!dec.getEigenvalues().isDiagonalizable()) {\n+                throw new NonSquareMatrixException(dec.getEigenvalues().getRowDimension() + \"x\" + dec.getEigenvalues().getColumnDimension());\n+            }\n+            final RealMatrix v = dec.getV();\n+            final RealMatrix d = dec.getD();\n+            final int n = d.getRowDimension();\n+            final Matrix squareRoot = new BlockRealMatrix(n, n);\n+            \n+            for (int i = 0; i < n; i++) {\n+                final double factor = FastMath.sqrt(d.getEntry(i, i));\n+                for (int j = 0; j < n; j++) {\n+                    squareRoot.setEntry(i, j, factor * v.getEntry(i, j));\n+                }\n+            }\n+\n+            return new Array2DRowRealMatrix(squareRoot.getDataRef(), false);\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}