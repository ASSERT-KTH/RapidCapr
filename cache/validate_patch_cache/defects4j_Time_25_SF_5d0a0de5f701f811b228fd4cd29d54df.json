{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // determine the initial offset\n    int initialOffset = getOffset(instantLocal);\n\n    // find the transition just before the local time\n    long prevTransitionLocal = previousTransition(instantLocal + initialOffset);\n\n    // check if the local time is in a gap\n    long prevTransitionAdjusted = previousTransition(instantLocal);\n    int prevOffset = getOffset(prevTransitionLocal);\n    int prevOffsetAdjusted = getOffset(prevTransitionAdjusted);\n\n    if (prevOffset != prevOffsetAdjusted) {\n        // the local time is in a gap\n        return prevOffset;\n    }\n\n    // check if the local time is in an overlap\n    long nextTransitionLocal = nextTransition(instantLocal + initialOffset);\n    long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset);\n    int nextOffset = getOffset(nextTransitionLocal);\n    int nextOffsetAdjusted = getOffset(nextTransitionAdjusted);\n\n    if (nextOffset != nextOffsetAdjusted) {\n        // the local time is in an overlap\n        if (initialOffset < 0) {\n            // the initial offset is before the overlap\n            return nextOffset;\n        } else if (initialOffset > 0) {\n            // the initial offset is after the overlap\n            return prevOffset;\n        } else {\n            // the local time is ambiguous\n            if (nextTransitionLocal - instantLocal < instantLocal - prevTransitionLocal) {\n                return nextOffset;\n            } else {\n                return prevOffset;\n            }\n        }\n    }\n\n    // the local time is not in a gap or an overlap\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8da41a99 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // determine the initial offset\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // find the transition just before the local time\n+    long prevTransitionLocal = previousTransition(instantLocal + initialOffset);\n+\n+    // check if the local time is in a gap\n+    long prevTransitionAdjusted = previousTransition(instantLocal);\n+    int prevOffset = getOffset(prevTransitionLocal);\n+    int prevOffsetAdjusted = getOffset(prevTransitionAdjusted);\n+\n+    if (prevOffset != prevOffsetAdjusted) {\n+        // the local time is in a gap\n+        return prevOffset;\n+    }\n+\n+    // check if the local time is in an overlap\n+    long nextTransitionLocal = nextTransition(instantLocal + initialOffset);\n+    long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset);\n+    int nextOffset = getOffset(nextTransitionLocal);\n+    int nextOffsetAdjusted = getOffset(nextTransitionAdjusted);\n+\n+    if (nextOffset != nextOffsetAdjusted) {\n+        // the local time is in an overlap\n+        if (initialOffset < 0) {\n+            // the initial offset is before the overlap\n+            return nextOffset;\n+        } else if (initialOffset > 0) {\n+            // the initial offset is after the overlap\n+            return prevOffset;\n+        } else {\n+            // the local time is ambiguous\n+            if (nextTransitionLocal - instantLocal < instantLocal - prevTransitionLocal) {\n+                return nextOffset;\n+            } else {\n+                return prevOffset;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    // the local time is not in a gap or an overlap\n+    return initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-11T01:00:00.000-05:00 expected:<2007-03-11T0[3:00:00.000-04]:00> but was:<2007-03-11T0[1:00:00.000-05]:00>",
    "test_result": "FAIL"
}