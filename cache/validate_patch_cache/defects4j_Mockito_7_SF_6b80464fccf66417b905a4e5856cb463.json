{
    "patch": "private void readTypeVariables() {\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n\n    if (actualTypeArg != null) {\n        registerTypeVariablesOn(actualTypeArg);\n    } else {\n        Type[] bounds = typeVariable.getBounds();\n\n        if (bounds.length == 0) {\n            registerTypeVariablesOn(typeVariable);\n        } else if (bounds.length == 1) {\n            registerTypeVariablesOn(bounds[0]);\n        } else {\n            for (Type type : bounds) {\n                if (!type.equals(Object.class)) {\n                    registerTypeVariablesOn(type);\n                }\n            }\n\n            registerTypeVariablesOn(typeVariable);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c35979db4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+\n+    if (actualTypeArg != null) {\n+        registerTypeVariablesOn(actualTypeArg);\n+    } else {\n+        Type[] bounds = typeVariable.getBounds();\n+\n+        if (bounds.length == 0) {\n+            registerTypeVariablesOn(typeVariable);\n+        } else if (bounds.length == 1) {\n+            registerTypeVariablesOn(bounds[0]);\n+        } else {\n+            for (Type type : bounds) {\n+                if (!type.equals(Object.class)) {\n+                    registerTypeVariablesOn(type);\n+                }\n+            }\n+\n+            registerTypeVariablesOn(typeVariable);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}