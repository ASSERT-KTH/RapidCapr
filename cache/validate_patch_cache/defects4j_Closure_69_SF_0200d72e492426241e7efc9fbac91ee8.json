{
    "patch": "import com.google.javascript.rhino.Node;\n\nprivate void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  FunctionType ft = childType.toMaybeFunctionType();\n  \n  if (ft != null && ft.isConstructor()) {\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = ft.getJSDocInfo();\n    if (functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceFileName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource.isExtern();\n    }\n\n    if (!ft.isNativeObjectType() && \n            (ft.getReturnType().isUnknownType() || \n             ft.getReturnType().isVoidType() || \n             !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    } \n\n    if (ft.getTypeOfThis() != null) {\n      JSType thisType = ft.getTypeOfThis();\n      Node callerNode = n.getParent();\n      if (callerNode.isGetProp() || callerNode.isGetElem()) {\n        ensureTyped(t, callerNode.getFirstChild(), thisType);\n      } else {\n        report(t, n, INVALID_THIS_TYPE);\n        ensureTyped(t, n);\n        return;\n      }\n    }\n\n    // Validate argument types.\n    visitParameterList(t, n, ft);\n    ensureTyped(t, n, ft.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..610d41cb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,53 +1541,55 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+import com.google.javascript.rhino.Node;\n \n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n+private void visitCall(NodeTraversal t, Node n) {\n+  Node child = n.getFirstChild();\n+  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n-\n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n-      }\n+  if (!childType.canBeCalled()) {\n+    report(t, n, NOT_CALLABLE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+  FunctionType ft = childType.toMaybeFunctionType();\n+  \n+  if (ft != null && ft.isConstructor()) {\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = ft.getJSDocInfo();\n+    if (functionJSDocInfo != null) {\n+      String sourceName = functionJSDocInfo.getSourceFileName();\n+      CompilerInput functionSource = compiler.getInput(sourceName);\n+      isExtern = functionSource.isExtern();\n+    }\n \n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n+    if (!ft.isNativeObjectType() && \n+            (ft.getReturnType().isUnknownType() || \n+             ft.getReturnType().isVoidType() || \n+             !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    } \n+\n+    if (ft.getTypeOfThis() != null) {\n+      JSType thisType = ft.getTypeOfThis();\n+      Node callerNode = n.getParent();\n+      if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+        ensureTyped(t, callerNode.getFirstChild(), thisType);\n+      } else {\n+        report(t, n, INVALID_THIS_TYPE);\n+        ensureTyped(t, n);\n+        return;\n+      }\n     }\n \n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n+    // Validate argument types.\n+    visitParameterList(t, n, ft);\n+    ensureTyped(t, n, ft.getReturnType());\n+  } else {\n+    ensureTyped(t, n);\n   }\n+}\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}