{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parametersList = functionType.getParameters();\n    Iterator<Node> parameters = parametersList.iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext()) {\n        argument = arguments.next();\n        if (!parameters.hasNext()) {\n            // varargs - nothing more to do\n            break;\n        }\n      \n        parameter = parameters.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int maxArgs = functionType.getMaxArguments();\n\n    if (numArgs < functionType.getMinArguments()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    } else if (maxArgs != -1 && numArgs > maxArgs && !parameters.hasNext()) {\n        // there should be varargs here if there are more than max arguments\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n            \" and no more than \" + maxArgs + \" argument(s)\");\n    } else {\n        // for varargs, there must be at least the number of non-optional arguments, and\n        // at most the total number of arguments\n        while (parameters.hasNext()) {\n            parameter = parameters.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(\n                t, null /* no argument */, getNativeType(JSType.UNDEFINED), getJSType(parameter), call, ordinal);\n        }\n        // Check if varargs have a minimum or maximum count of arguments.\n        if (maxArgs != -1 && numArgs - parametersList.size() > maxArgs) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n                \" and no more than \" + maxArgs + \" argument(s)\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..bd859c8e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,63 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    List<Node> parametersList = functionType.getParameters();\n+    Iterator<Node> parameters = parametersList.iterator();\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (arguments.hasNext()) {\n+        argument = arguments.next();\n+        if (!parameters.hasNext()) {\n+            // varargs - nothing more to do\n+            break;\n+        }\n+      \n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    if (numArgs < functionType.getMinArguments()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    } else if (maxArgs != -1 && numArgs > maxArgs && !parameters.hasNext()) {\n+        // there should be varargs here if there are more than max arguments\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+            \" and no more than \" + maxArgs + \" argument(s)\");\n+    } else {\n+        // for varargs, there must be at least the number of non-optional arguments, and\n+        // at most the total number of arguments\n+        while (parameters.hasNext()) {\n+            parameter = parameters.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(\n+                t, null /* no argument */, getNativeType(JSType.UNDEFINED), getJSType(parameter), call, ordinal);\n+        }\n+        // Check if varargs have a minimum or maximum count of arguments.\n+        if (maxArgs != -1 && numArgs - parametersList.size() > maxArgs) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+                \" and no more than \" + maxArgs + \" argument(s)\");\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}