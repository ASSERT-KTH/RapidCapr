{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    String line = stream.getRemainingJSDocLine();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    boolean ignoreSpaceAfterLinebreak = false;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n          } else {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n            ignoreSpaceAfterLinebreak = true;\n          } else {\n            ignoreSpaceAfterLinebreak = false;\n          }\n          ignoreStar = false;\n          token = next();\n          continue;\n\n        case ANNOTATION:\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC || token == JsDocToken.EOF\n              || (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = trimEnd(multilineText);\n              multilineText = multilineText.replaceAll(\"\\\\r\\\\n\", \"\\n\");\n              multilineText = multilineText.replaceAll(\"\\\\n\\\\s+\", \" \");\n              multilineText = multilineText.replaceAll(\"\\\\n\", System.lineSeparator());\n            }\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n            }\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0 && !ignoreStar) {\n            if (!ignoreSpaceAfterLinebreak) {\n              builder.append(' ');\n            }\n          }\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n\n          builder.append(line);\n          ignoreSpaceAfterLinebreak = false;\n          token = next();\n          continue;\n      }\n    } while (true);\n  }\n\n  private String trimEnd(String str) {\n    StringBuilder sb = new StringBuilder(str.trim());\n    while (sb.length() > 0 && (sb.charAt(sb.length() - 1) == '\\n' || sb.charAt(sb.length() - 1) == '\\r')) {\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    return sb.toString();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..cc664538 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,8 +1326,7 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n         token == JsDocToken.EOF) {\n@@ -1335,11 +1334,10 @@ public final class JsDocInfoParser {\n     }\n \n     stream.update();\n+    String line = stream.getRemainingJSDocLine();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n       line = line.trim();\n     }\n@@ -1351,10 +1349,7 @@ public final class JsDocInfoParser {\n     token = next();\n \n     boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+    boolean ignoreSpaceAfterLinebreak = false;\n \n     do {\n       switch (token) {\n@@ -1362,72 +1357,77 @@ public final class JsDocInfoParser {\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n           } else {\n-            // The star is part of the comment.\n             if (builder.length() > 0) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n           }\n-\n+          ignoreStar = true;\n           token = next();\n           continue;\n \n         case EOL:\n           if (option != WhitespaceOption.SINGLE_LINE) {\n             builder.append(\"\\n\");\n+            ignoreSpaceAfterLinebreak = true;\n+          } else {\n+            ignoreSpaceAfterLinebreak = false;\n           }\n-\n-          ignoreStar = true;\n+          ignoreStar = false;\n           token = next();\n           continue;\n \n+        case ANNOTATION:\n         default:\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n+          if (token == JsDocToken.EOC || token == JsDocToken.EOF\n+              || (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n-\n             if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n+              multilineText = trimEnd(multilineText);\n+              multilineText = multilineText.replaceAll(\"\\\\r\\\\n\", \"\\n\");\n+              multilineText = multilineText.replaceAll(\"\\\\n\\\\s+\", \" \");\n+              multilineText = multilineText.replaceAll(\"\\\\n\", System.lineSeparator());\n             }\n-\n             int endLineno = stream.getLineno();\n             int endCharno = stream.getCharno();\n-\n             if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n+              jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n             }\n-\n             return new ExtractionInfo(multilineText, token);\n           }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n+          if (builder.length() > 0 && !ignoreStar) {\n+            if (!ignoreSpaceAfterLinebreak) {\n+              builder.append(' ');\n+            }\n           }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n           }\n \n           builder.append(line);\n+          ignoreSpaceAfterLinebreak = false;\n           token = next();\n+          continue;\n       }\n     } while (true);\n   }\n \n+  private String trimEnd(String str) {\n+    StringBuilder sb = new StringBuilder(str.trim());\n+    while (sb.length() > 0 && (sb.charAt(sb.length() - 1) == '\\n' || sb.charAt(sb.length() - 1) == '\\r')) {\n+      sb.deleteCharAt(sb.length() - 1);\n+    }\n+    return sb.toString();\n+  }\n+\n \n   /**\n    * Extracts the top-level block comment from the JsDoc comment, if any.",
    "result_reason": "error: method trimEnd(String) is already defined in class JsDocInfoParser",
    "test_result": "ERROR"
}