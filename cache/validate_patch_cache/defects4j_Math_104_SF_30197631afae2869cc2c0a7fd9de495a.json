{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        double b = x + 1.0 - a;\n        double c = 1.0 / 1.0;\n        double d = 1.0 / b;\n        double h = d;\n        double an = 1.0 / 1.0;\n        for (int i = 1; i <= 100; i++) {\n            final double a1 = 2 * i - a;\n            final double a2 = i * b;\n            final double c1 = an * a * c;\n            final double c2 = c1 + d;\n            if (Math.abs(c2) < Double.MIN_NORMAL) {\n                c2 = Double.MIN_NORMAL;\n            }\n            d = c1 / c2;\n            h *= d;\n            an = a1 * an * i / a2;\n            if (Math.abs(d - 1.0) < 10e-15) {\n                return 1.0 - Math.exp(-x + a * Math.log(x) - org.apache.commons.math4.util.FastMath.logGamma(a)) * h / a;\n            }\n        }\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    } else {\n        double b = x / a;\n        double c = 1.0 / 1.0;\n        double d = 1.0 / (1.0 + b);\n        double h = d;\n        for (int i = 1; i <= 100; i++) {\n            final double an = -i * (i - a);\n            final double b1 = i * 2.0 + 1.0;\n            final double c1 = an * c;\n            final double c2 = c1 + d;\n            if (Math.abs(c2) < Double.MIN_NORMAL) {\n                c2 = Double.MIN_NORMAL;\n            }\n            d = c1 / c2;\n            h *= d;\n            final double b2 = i * 2.0 + 2.0;\n            final double delta = an * b - b1 * a;\n            b = delta / b2;\n            if (Math.abs(delta / x) < 10e-15) {\n                return Math.exp(-x + a * Math.log(x) - org.apache.commons.math4.util.FastMath.logGamma(a)) * h;\n            }\n        }\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f120fc459 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,60 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / 1.0;\n+        double d = 1.0 / b;\n+        double h = d;\n+        double an = 1.0 / 1.0;\n+        for (int i = 1; i <= 100; i++) {\n+            final double a1 = 2 * i - a;\n+            final double a2 = i * b;\n+            final double c1 = an * a * c;\n+            final double c2 = c1 + d;\n+            if (Math.abs(c2) < Double.MIN_NORMAL) {\n+                c2 = Double.MIN_NORMAL;\n+            }\n+            d = c1 / c2;\n+            h *= d;\n+            an = a1 * an * i / a2;\n+            if (Math.abs(d - 1.0) < 10e-15) {\n+                return 1.0 - Math.exp(-x + a * Math.log(x) - org.apache.commons.math4.util.FastMath.logGamma(a)) * h / a;\n+            }\n+        }\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    } else {\n+        double b = x / a;\n+        double c = 1.0 / 1.0;\n+        double d = 1.0 / (1.0 + b);\n+        double h = d;\n+        for (int i = 1; i <= 100; i++) {\n+            final double an = -i * (i - a);\n+            final double b1 = i * 2.0 + 1.0;\n+            final double c1 = an * c;\n+            final double c2 = c1 + d;\n+            if (Math.abs(c2) < Double.MIN_NORMAL) {\n+                c2 = Double.MIN_NORMAL;\n+            }\n+            d = c1 / c2;\n+            h *= d;\n+            final double b2 = i * 2.0 + 2.0;\n+            final double delta = an * b - b1 * a;\n+            b = delta / b2;\n+            if (Math.abs(delta / x) < 10e-15) {\n+                return Math.exp(-x + a * Math.log(x) - org.apache.commons.math4.util.FastMath.logGamma(a)) * h;\n+            }\n+        }\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}