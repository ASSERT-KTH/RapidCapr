{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        double ret;\n        if (x < mean - standardDeviation * 40.0 ||\n                x > mean + standardDeviation * 40.0) {\n            if (x < mean) {\n                ret = 0.0;\n            } else {\n                ret = 1.0;\n            }\n        } else {\n            ret = 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        }\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..1a6f35995 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,19 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n+        double ret;\n+        if (x < mean - standardDeviation * 40.0 ||\n+                x > mean + standardDeviation * 40.0) {\n+            if (x < mean) {\n+                ret = 0.0;\n+            } else {\n+                ret = 1.0;\n+            }\n+        } else {\n+            ret = 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n+        }\n+        return ret;\n     }\n     \n     /**",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_result": "FAIL"
}