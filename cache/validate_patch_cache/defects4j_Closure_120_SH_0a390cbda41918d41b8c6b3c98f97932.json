{
    "patch": "          // Consider the lifetime of the variable to be the lifetime of the function.\n          if (!block.equals(ref.getBasicBlock())) {\n            // Check assignments in inner function scopes may be executed\n            // multiple times.\n            BasicBlock currentBlock = block;\n            while (currentBlock != null && !currentBlock.equals(ref.getBasicBlock())) {\n              if (currentBlock.isLoop) {\n                return false;\n              }\n              currentBlock = currentBlock.getParent();\n            }\n            if (currentBlock == null) {\n              return false;\n            }\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1fa8cfc5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Consider the lifetime of the variable to be the lifetime of the function.\n+          if (!block.equals(ref.getBasicBlock())) {\n+            // Check assignments in inner function scopes may be executed\n+            // multiple times.\n+            BasicBlock currentBlock = block;\n+            while (currentBlock != null && !currentBlock.equals(ref.getBasicBlock())) {\n+              if (currentBlock.isLoop) {\n+                return false;\n+              }\n+              currentBlock = currentBlock.getParent();\n+            }\n+            if (currentBlock == null) {\n+              return false;\n+            }\n+            break;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}