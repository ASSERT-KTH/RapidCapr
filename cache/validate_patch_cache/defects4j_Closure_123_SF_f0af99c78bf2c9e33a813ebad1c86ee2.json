{
    "patch": "String fixCode(String code) {\n    int index = code.indexOf(\"in\");\n    while (index != -1) {\n        int endIndex = index + 2;\n        while (endIndex < code.length() && Character.isWhitespace(code.charAt(endIndex))) {\n            endIndex++;\n        }\n        code = code.substring(0, endIndex) + \")\" + code.substring(endIndex);\n        int startIndex = index - 1;\n        while (startIndex >= 0 && Character.isWhitespace(code.charAt(startIndex))) {\n            startIndex--;\n        }\n        code = code.substring(0, startIndex + 1) + \"(\" + code.substring(startIndex + 1);\n        index = code.indexOf(\"in\", endIndex + 2);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..e0a68c2f 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,23 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+String fixCode(String code) {\n+    int index = code.indexOf(\"in\");\n+    while (index != -1) {\n+        int endIndex = index + 2;\n+        while (endIndex < code.length() && Character.isWhitespace(code.charAt(endIndex))) {\n+            endIndex++;\n+        }\n+        code = code.substring(0, endIndex) + \")\" + code.substring(endIndex);\n+        int startIndex = index - 1;\n+        while (startIndex >= 0 && Character.isWhitespace(code.charAt(startIndex))) {\n+            startIndex--;\n+        }\n+        code = code.substring(0, startIndex + 1) + \"(\" + code.substring(startIndex + 1);\n+        index = code.indexOf(\"in\", endIndex + 2);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}