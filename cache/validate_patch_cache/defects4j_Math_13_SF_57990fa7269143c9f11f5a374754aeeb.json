{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix vt = v.transpose();\n    final int n = m.getRowDimension();\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    final double tol = 1e-14;\n\n    // Check if any eigenvalue is negative or zero. If so, set it to zero with some tolerance.\n    boolean wasNegativeOrZero = false;\n    for (int i = 0; i < eigenvalues.length; i++) {\n        double eVal = eigenvalues[i];\n        if (eVal <= 0) {\n            if (eVal < -tol) {\n                throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n            }\n\n            eigenvalues[i] = 0.0;\n            wasNegativeOrZero = true;\n        }\n    }\n\n    // If any eigenvalue is negative or zero, reconstruct the square root matrix\n    if (wasNegativeOrZero) {\n        final RealMatrix newD = MatrixUtils.createRealDiagonalMatrix(FastMath.sqrt(eigenvalues));\n        RealMatrix newSquareRoot = v.multiply(newD).multiply(vt);\n\n        // Check if the reconstructed matrix is symmetric. If not, raise an exception.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (FastMath.abs(newSquareRoot.getEntry(i, j) - newSquareRoot.getEntry(j, i)) > tol) {\n                    throw new IllegalArgumentException(\"Reconstructed square root matrix is not symmetric\");\n                }\n            }\n        }\n\n        return newSquareRoot;\n    } else {\n        // If all eigenvalues are positive, return the square root matrix from the EigenDecomposition object\n\n        final RealMatrix sqrt = dec.getSquareRoot();\n\n        // Check if the matrix is symmetric. If not, raise an exception.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (FastMath.abs(sqrt.getEntry(i, j) - sqrt.getEntry(j, i)) > tol) {\n                    throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n                }\n            }\n        }\n\n        return sqrt;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..03b45e108 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,58 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vt = v.transpose();\n+    final int n = m.getRowDimension();\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    final double tol = 1e-14;\n+\n+    // Check if any eigenvalue is negative or zero. If so, set it to zero with some tolerance.\n+    boolean wasNegativeOrZero = false;\n+    for (int i = 0; i < eigenvalues.length; i++) {\n+        double eVal = eigenvalues[i];\n+        if (eVal <= 0) {\n+            if (eVal < -tol) {\n+                throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n+            }\n+\n+            eigenvalues[i] = 0.0;\n+            wasNegativeOrZero = true;\n+        }\n+    }\n+\n+    // If any eigenvalue is negative or zero, reconstruct the square root matrix\n+    if (wasNegativeOrZero) {\n+        final RealMatrix newD = MatrixUtils.createRealDiagonalMatrix(FastMath.sqrt(eigenvalues));\n+        RealMatrix newSquareRoot = v.multiply(newD).multiply(vt);\n+\n+        // Check if the reconstructed matrix is symmetric. If not, raise an exception.\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < i; j++) {\n+                if (FastMath.abs(newSquareRoot.getEntry(i, j) - newSquareRoot.getEntry(j, i)) > tol) {\n+                    throw new IllegalArgumentException(\"Reconstructed square root matrix is not symmetric\");\n+                }\n+            }\n+        }\n+\n+        return newSquareRoot;\n+    } else {\n+        // If all eigenvalues are positive, return the square root matrix from the EigenDecomposition object\n+\n+        final RealMatrix sqrt = dec.getSquareRoot();\n+\n+        // Check if the matrix is symmetric. If not, raise an exception.\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < i; j++) {\n+                if (FastMath.abs(sqrt.getEntry(i, j) - sqrt.getEntry(j, i)) > tol) {\n+                    throw new IllegalArgumentException(\"Square root matrix is not symmetric\");\n+                }\n+            }\n+        }\n+\n+        return sqrt;\n     }\n }\n+}",
    "result_reason": "error: method sqrt in class FastMath cannot be applied to given types;",
    "test_result": "ERROR"
}