{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    // Cast 'this' and 'other' to ArrowType instances.\n    ArrowType thisArrowType = (ArrowType) this;\n    ArrowType otherArrowType = (ArrowType) other;\n\n    // Check if the return type is a subtype.\n    if (!thisArrowType.returnType.isSubtype(otherArrowType.returnType)) {\n        return false;\n    }\n\n    // Get the parameters of 'this' and 'other' functions.\n    Node thisParam = thisArrowType.parameters.getFirstChild();\n    Node otherParam = otherArrowType.parameters.getFirstChild();\n\n    // Iterate over each parameter to compare their types.\n    while (thisParam != null && otherParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType otherParamType = otherParam.getJSType();\n\n        if (thisParamType == null && otherParamType == null) {\n            // Both have reached the end of their parameter lists.\n            break;\n        }\n\n        // Check for variability with the varargs property flag\n        boolean isThisVarArgs = thisParam.isVarArgs();\n        boolean isOtherVarArgs = otherParam.isVarArgs();\n        boolean paramMatches;\n\n        if (isThisVarArgs && isOtherVarArgs) {\n            // Both parameters are varargs, so they match.\n            break;\n        } else if (!isThisVarArgs && isOtherVarArgs) {\n            // Since THIS is a non-varargs function, yet OTHER has varargs,\n            // advance only otherParam.\n            otherParam = otherParam.getNext();\n            continue;\n        } else if (isThisVarArgs && !isOtherVarArgs) {\n            // Since OTHER is a non-varargs function, yet THIS has varargs,\n            // the match is potentially valid, so act as if the current param\n            // on the other function is also a varargs, and handle below.\n            paramMatches = true;\n            otherParamType = otherArrowType.getRestType();\n        } else {\n            // Both parameters are non-varargs, so compare their types.\n            paramMatches = thisParamType.isSubtype(otherParamType);\n        }\n\n        // If the types of the parameters don't match, then return false.\n        if (!paramMatches) {\n            return false;\n        }\n\n        thisParam = thisParam.getNext();\n        otherParam = otherParam.getNext();\n    }\n\n    // If we have reached the end of 'other' parameter list\n    // but there are more non-varargs parameters left in 'this',\n    // then they are incompatible. Otherwise, they are compatible.\n    if (thisParam != null && !thisParam.isVarArgs()) {\n        return false;\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..eff155fe 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,76 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n-    ArrowType that = (ArrowType) other;\n-\n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+    // Cast 'this' and 'other' to ArrowType instances.\n+    ArrowType thisArrowType = (ArrowType) this;\n+    ArrowType otherArrowType = (ArrowType) other;\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+    // Check if the return type is a subtype.\n+    if (!thisArrowType.returnType.isSubtype(otherArrowType.returnType)) {\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+    // Get the parameters of 'this' and 'other' functions.\n+    Node thisParam = thisArrowType.parameters.getFirstChild();\n+    Node otherParam = otherArrowType.parameters.getFirstChild();\n+\n+    // Iterate over each parameter to compare their types.\n+    while (thisParam != null && otherParam != null) {\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType otherParamType = otherParam.getJSType();\n+\n+        if (thisParamType == null && otherParamType == null) {\n+            // Both have reached the end of their parameter lists.\n+            break;\n         }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        // Check for variability with the varargs property flag\n+        boolean isThisVarArgs = thisParam.isVarArgs();\n+        boolean isOtherVarArgs = otherParam.isVarArgs();\n+        boolean paramMatches;\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        if (isThisVarArgs && isOtherVarArgs) {\n+            // Both parameters are varargs, so they match.\n+            break;\n+        } else if (!isThisVarArgs && isOtherVarArgs) {\n+            // Since THIS is a non-varargs function, yet OTHER has varargs,\n+            // advance only otherParam.\n+            otherParam = otherParam.getNext();\n+            continue;\n+        } else if (isThisVarArgs && !isOtherVarArgs) {\n+            // Since OTHER is a non-varargs function, yet THIS has varargs,\n+            // the match is potentially valid, so act as if the current param\n+            // on the other function is also a varargs, and handle below.\n+            paramMatches = true;\n+            otherParamType = otherArrowType.getRestType();\n+        } else {\n+            // Both parameters are non-varargs, so compare their types.\n+            paramMatches = thisParamType.isSubtype(otherParamType);\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+        // If the types of the parameters don't match, then return false.\n+        if (!paramMatches) {\n+            return false;\n+        }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+        thisParam = thisParam.getNext();\n+        otherParam = otherParam.getNext();\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If we have reached the end of 'other' parameter list\n+    // but there are more non-varargs parameters left in 'this',\n+    // then they are incompatible. Otherwise, they are compatible.\n+    if (thisParam != null && !thisParam.isVarArgs()) {\n+        return false;\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}