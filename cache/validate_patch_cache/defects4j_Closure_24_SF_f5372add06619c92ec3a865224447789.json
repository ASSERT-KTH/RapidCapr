{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n != null ? n.getParent() : null;\n    if (parent == null || !parent.isVar()) {\n      // If the node isn't a variable declaration, skip it.\n      continue;\n    }\n    Node initializer = n.getFirstChild();\n    if (initializer == null || !initializer.isQualifiedName()) {\n      // If the initializer isn't a qualified name, skip this as a namespace\n      // alias.\n      continue;\n    }\n    String name = n.getString();\n    Var aliasVar = scope.getVar(name);\n    if (aliasVar != null && aliasVar.getInitialValue() != null) {\n      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n      if (qualifiedName != null) {\n        aliases.put(name, aliasVar);\n        transformation.addAlias(name, qualifiedName);\n      } else {\n        // If the alias variable doesn't have a qualified name, it's treated\n        // as an alias to \"undefined\".\n        transformation.addAlias(name, \"undefined\");\n      }\n    } else if (n.getJSDocInfo() != null && n.getJSDocInfo().isConstructor()) {\n      // If the variable is a constructor function, add an alias to the\n      // constructor function and its prototype.\n      Node fn = initializer.getFirstChild();\n      if (fn != null && fn.isFunction()) {\n        String className = name;\n        if (n.getQualifiedName() != null) {\n          className = n.getQualifiedName();\n        }\n        String fnName = NodeUtil.getName(fn);\n        String constructorName = className + \".\" + fnName;\n        aliases.put(className, aliasVar);\n        aliases.put(fnName, aliasVar);\n        transformation.addAlias(className, constructorName);\n        transformation.addAlias(fnName, constructorName + \".prototype\");\n      }\n    } else {\n      // If the variable isn't an alias or a constructor function, report\n      // an error.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6c1ec84a 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,56 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n != null ? n.getParent() : null;\n+    if (parent == null || !parent.isVar()) {\n+      // If the node isn't a variable declaration, skip it.\n+      continue;\n+    }\n+    Node initializer = n.getFirstChild();\n+    if (initializer == null || !initializer.isQualifiedName()) {\n+      // If the initializer isn't a qualified name, skip this as a namespace\n+      // alias.\n+      continue;\n+    }\n+    String name = n.getString();\n+    Var aliasVar = scope.getVar(name);\n+    if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+      if (qualifiedName != null) {\n+        aliases.put(name, aliasVar);\n+        transformation.addAlias(name, qualifiedName);\n+      } else {\n+        // If the alias variable doesn't have a qualified name, it's treated\n+        // as an alias to \"undefined\".\n+        transformation.addAlias(name, \"undefined\");\n+      }\n+    } else if (n.getJSDocInfo() != null && n.getJSDocInfo().isConstructor()) {\n+      // If the variable is a constructor function, add an alias to the\n+      // constructor function and its prototype.\n+      Node fn = initializer.getFirstChild();\n+      if (fn != null && fn.isFunction()) {\n+        String className = name;\n+        if (n.getQualifiedName() != null) {\n+          className = n.getQualifiedName();\n         }\n+        String fnName = NodeUtil.getName(fn);\n+        String constructorName = className + \".\" + fnName;\n+        aliases.put(className, aliasVar);\n+        aliases.put(fnName, aliasVar);\n+        transformation.addAlias(className, constructorName);\n+        transformation.addAlias(fnName, constructorName + \".prototype\");\n       }\n+    } else {\n+      // If the variable isn't an alias or a constructor function, report\n+      // an error.\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}