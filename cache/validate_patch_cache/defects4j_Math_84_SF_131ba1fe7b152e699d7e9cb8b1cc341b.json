{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflected;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n                simplex = contracted;\n\n            } else {\n\n                // perform a shrink step\n                final RealPointValuePair[] shrinkedSimplex = contractInside(original, comparator);\n                simplex = shrinkedSimplex;\n\n            }\n\n            // check convergence\n            final double v1 = original[0].getValue();\n            final double[] x1 = original[0].getPoint();\n            final double[] diff = new double[x1.length];\n            for (int i = 0; i < x1.length; i++) {\n                diff[i] = Math.abs(x1[i] - getStartPoint()[i]);\n            }\n            Arrays.sort(diff);\n            final double v2 = original[diff.length - 1].getValue();\n            final double[] x2 = original[diff.length - 1].getPoint();\n            for (int i = 0; i < x2.length; i++) {\n                diff[i] = Math.abs(x2[i] - getStartPoint()[i]);\n            }\n            Arrays.sort(diff);\n            final double simplexSize = getContractionCoefficient() * diff[diff.length - 1];\n            if ((v2 - v1) <= getRelativeThreshold() * (Math.abs(v1) + Math.abs(v2)) + getAbsoluteThreshold()) {\n                return;\n            } else if (simplexSize < getAbsoluteThreshold()) {\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d0169749a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,6 +79,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = reflected;\n                 }\n \n                 return;\n@@ -90,7 +93,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n+                simplex = contracted;\n+\n+            } else {\n+\n+                // perform a shrink step\n+                final RealPointValuePair[] shrinkedSimplex = contractInside(original, comparator);\n+                simplex = shrinkedSimplex;\n+\n+            }\n+\n             // check convergence\n+            final double v1 = original[0].getValue();\n+            final double[] x1 = original[0].getPoint();\n+            final double[] diff = new double[x1.length];\n+            for (int i = 0; i < x1.length; i++) {\n+                diff[i] = Math.abs(x1[i] - getStartPoint()[i]);\n+            }\n+            Arrays.sort(diff);\n+            final double v2 = original[diff.length - 1].getValue();\n+            final double[] x2 = original[diff.length - 1].getPoint();\n+            for (int i = 0; i < x2.length; i++) {\n+                diff[i] = Math.abs(x2[i] - getStartPoint()[i]);\n+            }\n+            Arrays.sort(diff);\n+            final double simplexSize = getContractionCoefficient() * diff[diff.length - 1];\n+            if ((v2 - v1) <= getRelativeThreshold() * (Math.abs(v1) + Math.abs(v2)) + getAbsoluteThreshold()) {\n+                return;\n+            } else if (simplexSize < getAbsoluteThreshold()) {\n                 return;\n             }\n ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}