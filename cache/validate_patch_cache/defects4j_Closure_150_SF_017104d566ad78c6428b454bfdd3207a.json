{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  int type = n.getType();\n\n  if (type == Token.FUNCTION) {\n    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n      return; // Ignore function expressions.\n    } else if (parent != null && parent.getType() == Token.NAME &&\n        parent.getString().equals(\"goog\") &&\n        n.getFirstChild().getNext().getNext().getType() == Token.NAME &&\n        n.getFirstChild().getNext().getNext().getString().equals(\"inherits\")) {\n      // Ignore goog.inherits() subclass definitions.\n      return;\n    }\n    defineDeclaredFunction(n, parent);\n    return;\n  }\n\n  if (type == Token.VAR) {\n    defineVar(n, parent);\n    return;\n  }\n\n  if (type == Token.CATCH) {\n    defineCatch(n, parent);\n    return;\n  }\n\n  if (type == Token.LP) {\n    Node grandparent = parent.getParent();\n    int grandparentType = grandparent != null ? grandparent.getType() : -1;\n\n    if (parent.getType() == Token.EXPR_RESULT ||\n        parent.getType() == Token.ASSIGN ||\n        parent.getType() == Token.CALL ||\n        parent.getType() == Token.NEW) {\n      handleFunctionInputs(n);\n      return;\n    // Treat top-level functions as if they were in a variable declaration.\n    } else if (grandparentType == Token.SCRIPT) {\n      defineVar(n, parent);\n      return;\n    } else if (parent.getType() == Token.PARAM_LIST &&\n        grandparent.getType() == Token.FUNCTION) {\n      handleFunctionInputs(parent);\n      return;\n    }\n  }\n\n  attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..afab4951 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,57 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  int type = n.getType();\n+\n+  if (type == Token.FUNCTION) {\n+    if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+      return; // Ignore function expressions.\n+    } else if (parent != null && parent.getType() == Token.NAME &&\n+        parent.getString().equals(\"goog\") &&\n+        n.getFirstChild().getNext().getNext().getType() == Token.NAME &&\n+        n.getFirstChild().getNext().getNext().getString().equals(\"inherits\")) {\n+      // Ignore goog.inherits() subclass definitions.\n+      return;\n+    }\n+    defineDeclaredFunction(n, parent);\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  if (type == Token.VAR) {\n+    defineVar(n, parent);\n+    return;\n+  }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+  if (type == Token.CATCH) {\n+    defineCatch(n, parent);\n+    return;\n+  }\n+\n+  if (type == Token.LP) {\n+    Node grandparent = parent.getParent();\n+    int grandparentType = grandparent != null ? grandparent.getType() : -1;\n+\n+    if (parent.getType() == Token.EXPR_RESULT ||\n+        parent.getType() == Token.ASSIGN ||\n+        parent.getType() == Token.CALL ||\n+        parent.getType() == Token.NEW) {\n+      handleFunctionInputs(n);\n+      return;\n+    // Treat top-level functions as if they were in a variable declaration.\n+    } else if (grandparentType == Token.SCRIPT) {\n+      defineVar(n, parent);\n+      return;\n+    } else if (parent.getType() == Token.PARAM_LIST &&\n+        grandparent.getType() == Token.FUNCTION) {\n+      handleFunctionInputs(parent);\n+      return;\n     }\n+  }\n+\n+  attachLiteralTypes(n);\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}