{
    "patch": "import java.util.Arrays;\n\npublic class Distribution {\n\n    private final double[] values;\n    private final double[] probabilities;\n    private final double[] prefixSums;\n\n    public Distribution(double[] values, double[] probabilities) {\n        this.values = values;\n        this.probabilities = probabilities;\n        this.prefixSums = new double[probabilities.length];\n        computePrefixSums();\n    }\n\n    public double expectedValue() {\n        double expectedValue = 0.0;\n        double totalProbability = 1.0;\n\n        for (int i = 0; i < probabilities.length; i++) {\n            double probability = probabilities[i];\n            double value = values[i];\n            double remainingProbability = totalProbability - probability;\n\n            double subExpectation = value * probability + remainingProbability * expectedValue;\n            expectedValue = expectedValue + subExpectation;\n            totalProbability = totalProbability - probability;\n        }\n\n        return expectedValue;\n    }\n\n    public Distribution clone() {\n        double[] cloneValues = Arrays.copyOf(values, values.length);\n        double[] cloneProbabilities = Arrays.copyOf(probabilities, probabilities.length);\n        return new Distribution(cloneValues, cloneProbabilities);\n    }\n\n    private void computePrefixSums() {\n        double prefixSum = 0.0;\n        for (int i = 0; i < probabilities.length; i++) {\n            prefixSum += probabilities[i];\n            prefixSums[i] = prefixSum;\n        }\n    }\n\n    public double get(double x) {\n        if (x < values[0] || x > values[values.length - 1]) {\n            return 0.0;\n        }\n\n        int l = 0;\n        int r = values.length - 1;\n        while (l < r) {\n            int m = (l + r) >> 1;\n            if (values[m] < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n\n        if (values[l] == x) {\n            return probabilities[l];\n        }\n\n        double a = l == 0 ? 0.0 : prefixSums[l - 1];\n        return probabilities[l] * (values[l] - x) / (values[l] - values[l - 1])\n                + probabilities[l - 1] * (x - values[l - 1]) / (values[l] - values[l - 1]);\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}