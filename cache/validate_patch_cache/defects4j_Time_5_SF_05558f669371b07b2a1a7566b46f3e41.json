{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    ISOChronology chrono = ISOChronology.getInstanceUTC();\n\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(millis, type, chrono);\n\n    int totalDays = getDays() + (getWeeks() * 7);\n    int totalMonths = getMonths() + (getYears() * 12);\n\n    if (type.isSupported(DurationFieldType.months())) {\n        int remainingMonths = totalDays / 30;\n        totalMonths += remainingMonths;\n        totalDays = totalDays % 30;\n\n        if (totalDays < 0) {\n            totalDays += 30;\n            totalMonths--;\n        }\n\n        if (totalMonths != getMonths() || totalMonths / 12 != getYears()) {\n            result = result.withMonths(totalMonths % 12);\n            result = result.withYears(totalMonths / 12);\n        }\n    }\n\n    if (type.isSupported(DurationFieldType.days()) && totalDays != getDays()) {\n        result = result.withDays(totalDays);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0a297097 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,43 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    ISOChronology chrono = ISOChronology.getInstanceUTC();\n+\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    Period result = new Period(millis, type, chrono);\n+\n+    int totalDays = getDays() + (getWeeks() * 7);\n+    int totalMonths = getMonths() + (getYears() * 12);\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        int remainingMonths = totalDays / 30;\n+        totalMonths += remainingMonths;\n+        totalDays = totalDays % 30;\n+\n+        if (totalDays < 0) {\n+            totalDays += 30;\n+            totalMonths--;\n+        }\n+\n+        if (totalMonths != getMonths() || totalMonths / 12 != getYears()) {\n+            result = result.withMonths(totalMonths % 12);\n+            result = result.withYears(totalMonths / 12);\n         }\n-        return result;\n     }\n \n+    if (type.isSupported(DurationFieldType.days()) && totalDays != getDays()) {\n+        result = result.withDays(totalDays);\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P2W19D>",
    "test_result": "FAIL"
}