{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    for (String id : ALL_IDS) {\n        int idx = text.indexOf(id, position);\n        while (idx != -1) {\n            int idLen = id.length();\n            if ((idx == position || Character.isWhitespace(text.charAt(idx - 1))) &&\n                (idx + idLen == text.length() || text.charAt(idx + idLen) == '/' || Character.isWhitespace(text.charAt(idx + idLen)))) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return idx + idLen;\n            }\n            idx = text.indexOf(id, idx + 1);\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..f80965df 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,22 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    for (String id : ALL_IDS) {\n+        int idx = text.indexOf(id, position);\n+        while (idx != -1) {\n+            int idLen = id.length();\n+            if ((idx == position || Character.isWhitespace(text.charAt(idx - 1))) &&\n+                (idx + idLen == text.length() || text.charAt(idx + idLen) == '/' || Character.isWhitespace(text.charAt(idx + idLen)))) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return idx + idLen;\n             }\n-            return ~position;\n+            idx = text.indexOf(id, idx + 1);\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}