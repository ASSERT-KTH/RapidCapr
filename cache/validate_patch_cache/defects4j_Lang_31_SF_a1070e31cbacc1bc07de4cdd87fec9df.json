{
    "patch": "public class StringUtils {\n    public static boolean containsAny(char[] str, char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        for (int i = 0; i < str.length; i++) {\n            char ch = str[i];\n            if (Character.isHighSurrogate(ch) && i + 1 < str.length) {\n                char ch2 = str[i + 1];\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                    i++;\n                }\n            }\n            if (contains(searchChars, ch)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean contains(char[] array, char target) {\n        for (char element : array) {\n            if (element == target) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..96b1053a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,36 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    public static boolean containsAny(char[] str, char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        for (int i = 0; i < str.length; i++) {\n+            char ch = str[i];\n+            if (Character.isHighSurrogate(ch) && i + 1 < str.length) {\n+                char ch2 = str[i + 1];\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                    i++;\n+                }\n+            }\n+            if (contains(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean contains(char[] array, char target) {\n+        for (char element : array) {\n+            if (element == target) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}