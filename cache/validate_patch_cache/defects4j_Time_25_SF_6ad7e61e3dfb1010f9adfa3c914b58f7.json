{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offset;\n\n    // get the initial offset; if it is non-zero, return it immediately\n    if ((offset = getOffset(instantLocal)) != 0) {\n        return offset;\n    }\n\n    // get the previous and next transitions\n    long nextTransition = nextTransition(instantLocal);\n    long prevTransition = previousTransition(instantLocal);\n\n    // if there is no previous transition, return the next one\n    if (prevTransition == Long.MIN_VALUE) {\n        return getOffset(nextTransition);\n    }\n\n    // get the offsets before and after the next transition\n    int prevOffset = getOffset(prevTransition);\n    int nextOffset = getOffset(nextTransition);\n\n    // check if there is an overlap between the two transitions\n    boolean overlap = (nextTransition - prevTransition) == (prevOffset - nextOffset) * DateTimeConstants.MILLIS_PER_HOUR;\n\n    // if the previous offset is greater than the next offset, we are in a gap\n    if (prevOffset > nextOffset) {\n        // if the local time is before the gap, return the previous offset\n        if (instantLocal < nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n            return prevOffset;\n        }\n        // if the local time is during the gap, throw exception\n        else if (instantLocal < nextTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal, DateTimeZone.forOffsetMillis(prevOffset)));\n        }\n    }\n\n    // if overlap is true, and the local time is during the overlap, return the earlier offset\n    else if (overlap && instantLocal >= nextTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR && instantLocal < nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n        return prevOffset;\n    }\n\n    // if all else fails, return the next offset\n    return nextOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..66e15fed 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offset;\n+\n+    // get the initial offset; if it is non-zero, return it immediately\n+    if ((offset = getOffset(instantLocal)) != 0) {\n+        return offset;\n+    }\n+\n+    // get the previous and next transitions\n+    long nextTransition = nextTransition(instantLocal);\n+    long prevTransition = previousTransition(instantLocal);\n+\n+    // if there is no previous transition, return the next one\n+    if (prevTransition == Long.MIN_VALUE) {\n+        return getOffset(nextTransition);\n+    }\n+\n+    // get the offsets before and after the next transition\n+    int prevOffset = getOffset(prevTransition);\n+    int nextOffset = getOffset(nextTransition);\n+\n+    // check if there is an overlap between the two transitions\n+    boolean overlap = (nextTransition - prevTransition) == (prevOffset - nextOffset) * DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    // if the previous offset is greater than the next offset, we are in a gap\n+    if (prevOffset > nextOffset) {\n+        // if the local time is before the gap, return the previous offset\n+        if (instantLocal < nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n+            return prevOffset;\n+        }\n+        // if the local time is during the gap, throw exception\n+        else if (instantLocal < nextTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n+            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal, DateTimeZone.forOffsetMillis(prevOffset)));\n         }\n-        return offsetAdjusted;\n     }\n \n+    // if overlap is true, and the local time is during the overlap, return the earlier offset\n+    else if (overlap && instantLocal >= nextTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR && instantLocal < nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n+        return prevOffset;\n+    }\n+\n+    // if all else fails, return the next offset\n+    return nextOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2010-01-01T23:00:00.000",
    "test_result": "FAIL"
}