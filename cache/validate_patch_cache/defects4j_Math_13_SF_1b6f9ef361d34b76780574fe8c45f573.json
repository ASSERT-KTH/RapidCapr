{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (!m.isSquare()) {\n        throw new IllegalArgumentException(\"Matrix must be square.\");\n    }\n\n    // Get the dimensions of the matrix\n    final int n = m.getRowDimension();\n\n    // Calculate the matrix square root using Higham's method\n    EigenDecomposition dec = new EigenDecomposition(m);\n\n    RealMatrix x = dec.getV();\n    RealMatrix d = dec.getD();\n    double[] dArr = new double[d.getRowDimension()];\n\n    for (int i = 0; i < n; i++) {\n        dArr[i] = FastMath.sqrt(d.getEntry(i, i));\n    }\n\n    RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(dArr);\n    RealMatrix dInvSqrt = MatrixUtils.createRealDiagonalMatrix(FastMathUtils.normalizeArray(dArr));\n\n    RealMatrix ans = x.multiply(dSqrt).multiply(dInvSqrt);\n\n    return ans;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..74fbbf02f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (!m.isSquare()) {\n+        throw new IllegalArgumentException(\"Matrix must be square.\");\n     }\n+\n+    // Get the dimensions of the matrix\n+    final int n = m.getRowDimension();\n+\n+    // Calculate the matrix square root using Higham's method\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    RealMatrix x = dec.getV();\n+    RealMatrix d = dec.getD();\n+    double[] dArr = new double[d.getRowDimension()];\n+\n+    for (int i = 0; i < n; i++) {\n+        dArr[i] = FastMath.sqrt(d.getEntry(i, i));\n+    }\n+\n+    RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(dArr);\n+    RealMatrix dInvSqrt = MatrixUtils.createRealDiagonalMatrix(FastMathUtils.normalizeArray(dArr));\n+\n+    RealMatrix ans = x.multiply(dSqrt).multiply(dInvSqrt);\n+\n+    return ans;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}