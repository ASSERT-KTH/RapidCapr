{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double epsilon = 10e-15;\n\n    if (a <= 0.0 || x <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x < 1.0 + a) {\n        // use series representation\n        double term = 1 / a;\n        double sum = term;\n        int n = 1;\n        while (Math.abs(term) > epsilon * Math.abs(sum)) {\n            term *= x / (a + n);\n            sum += term;\n            n++;\n        }\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    } else {\n        // use continued fraction representation\n        ContinuedFraction fraction = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                if (n % 2 == 0) {\n                    return n / 2.0 - 1.0 + a;\n                } else {\n                    return x;\n                }\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                return n / 2.0;\n            }\n        };\n\n        double y = 1.0 + x - a;\n        return Math.exp(-y + a * Math.log(y) - logGamma(a)) / fraction.evaluate(y, epsilon);\n    }\n}\n\nprivate static double logGamma(double x) {\n    return Gamma.logGamma(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..098b6ac07 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,50 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double epsilon = 10e-15;\n+\n+    if (a <= 0.0 || x <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < 1.0 + a) {\n+        // use series representation\n+        double term = 1 / a;\n+        double sum = term;\n+        int n = 1;\n+        while (Math.abs(term) > epsilon * Math.abs(sum)) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n++;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    } else {\n+        // use continued fraction representation\n+        ContinuedFraction fraction = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                if (n % 2 == 0) {\n+                    return n / 2.0 - 1.0 + a;\n+                } else {\n+                    return x;\n+                }\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                return n / 2.0;\n+            }\n+        };\n+\n+        double y = 1.0 + x - a;\n+        return Math.exp(-y + a * Math.log(y) - logGamma(a)) / fraction.evaluate(y, epsilon);\n+    }\n+}\n+\n+private static double logGamma(double x) {\n+    return Gamma.logGamma(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}