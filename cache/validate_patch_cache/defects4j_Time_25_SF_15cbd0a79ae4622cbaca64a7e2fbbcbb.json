{
    "patch": "public static int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - initialOffset;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (initialOffset == offsetAdjusted) {\n        return initialOffset;\n    }\n    long instantBeforeGap = findIntervalBefore(instantAdjusted, initialOffset);\n    long instantAfterGap = findIntervalAfter(instantAdjusted, offsetAdjusted);\n    int offsetBeforeGap = getOffset(instantBeforeGap);\n    if (offsetBeforeGap < offsetAdjusted) {\n        return offsetBeforeGap;\n    }\n    int offsetAfterGap = getOffset(instantAfterGap);\n    if (offsetAdjusted < offsetAfterGap) {\n        return offsetAfterGap;\n    }\n    return offsetAdjusted;\n}\n\nprivate static long findIntervalBefore(long instant, int offset) {\n    long guess = instant - offset;\n    int guessOffset = getOffset(guess);\n    if (guessOffset < offset) {\n        long next = nextTransition(guess);\n        if (next == guess) {\n            return guess;\n        }\n        return findIntervalBefore(next, offset);\n    }\n    long prev = prevTransition(guess - 1);\n    if (prev == instant - offset) {\n        return prev + offset;\n    }\n    return findIntervalBefore(prev, offset);\n}\n\nprivate static long findIntervalAfter(long instant, int offset) {\n    long guess = instant - offset;\n    int guessOffset = getOffset(guess);\n    if (guessOffset > offset) {\n        long prev = prevTransition(guess - 1);\n        if (prev == guess - offset) {\n            return instant;\n        }\n        return findIntervalAfter(prev + offset, offset);\n    }\n    long next = nextTransition(guess);\n    if (next == instant - offset) {\n        return instant;\n    }\n    return findIntervalAfter(next, offset);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..692f8ed2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,59 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public static int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - initialOffset;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    if (initialOffset == offsetAdjusted) {\n+        return initialOffset;\n+    }\n+    long instantBeforeGap = findIntervalBefore(instantAdjusted, initialOffset);\n+    long instantAfterGap = findIntervalAfter(instantAdjusted, offsetAdjusted);\n+    int offsetBeforeGap = getOffset(instantBeforeGap);\n+    if (offsetBeforeGap < offsetAdjusted) {\n+        return offsetBeforeGap;\n+    }\n+    int offsetAfterGap = getOffset(instantAfterGap);\n+    if (offsetAdjusted < offsetAfterGap) {\n+        return offsetAfterGap;\n+    }\n+    return offsetAdjusted;\n+}\n+\n+private static long findIntervalBefore(long instant, int offset) {\n+    long guess = instant - offset;\n+    int guessOffset = getOffset(guess);\n+    if (guessOffset < offset) {\n+        long next = nextTransition(guess);\n+        if (next == guess) {\n+            return guess;\n         }\n-        return offsetAdjusted;\n+        return findIntervalBefore(next, offset);\n+    }\n+    long prev = prevTransition(guess - 1);\n+    if (prev == instant - offset) {\n+        return prev + offset;\n     }\n+    return findIntervalBefore(prev, offset);\n+}\n+\n+private static long findIntervalAfter(long instant, int offset) {\n+    long guess = instant - offset;\n+    int guessOffset = getOffset(guess);\n+    if (guessOffset > offset) {\n+        long prev = prevTransition(guess - 1);\n+        if (prev == guess - offset) {\n+            return instant;\n+        }\n+        return findIntervalAfter(prev + offset, offset);\n+    }\n+    long next = nextTransition(guess);\n+    if (next == instant - offset) {\n+        return instant;\n+    }\n+    return findIntervalAfter(next, offset);\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: non-static method getOffset(long) cannot be referenced from a static context",
    "test_result": "ERROR"
}