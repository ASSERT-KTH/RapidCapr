{
    "patch": "        if (ref.getBlock().isFunction()) {\n          // The variable is assigned in a function.\n          // We don't know how many times the function will be called,\n          // so assume the variable will be assigned more than once.\n          return false;\n        } else if (ref.getBlock().isLoop()) {\n          // The variable is assigned in a loop.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a67750b9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref.getBlock().isFunction()) {\n+          // The variable is assigned in a function.\n+          // We don't know how many times the function will be called,\n+          // so assume the variable will be assigned more than once.\n+          return false;\n+        } else if (ref.getBlock().isLoop()) {\n+          // The variable is assigned in a loop.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}