{
    "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Character> stack = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        char bracket = brackets.charAt(i);\n        if(bracket == '[') {\n            stack.add(bracket);\n        } else if(bracket == ']') {\n            if(stack.isEmpty() || stack.get(stack.size()-1) != '[') {\n                return false;\n            }\n            stack.remove(stack.size()-1);\n        } else {\n            // invalid bracket character\n            return false;\n        }\n    }\n    // check if there are any opening brackets left on the stack\n    return stack.isEmpty();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/IS_NESTED.java b/src/main/java/humaneval/buggy/IS_NESTED.java\nindex 28b9704..9cafedf 100644\n--- a/src/main/java/humaneval/buggy/IS_NESTED.java\n+++ b/src/main/java/humaneval/buggy/IS_NESTED.java\n@@ -18,21 +18,23 @@ import java.util.Collections;\n  */\n \n public class IS_NESTED {\n-    public static boolean is_nested(String brackets) {\n-        ArrayList<Integer> opening_brackets = new ArrayList<>();\n-        ArrayList<Integer> closing_brackets = new ArrayList<>();\n-        for(int i = 0; i < brackets.length(); i++) {\n-            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n-            else closing_brackets.add(i);\n-        }\n-        Collections.reverse(opening_brackets);\n-        int cnt = 0, i = 0, l = opening_brackets.size();\n-        for(int idx : closing_brackets) {\n-            if(i < l || idx >= opening_brackets.get(i)) {\n-                i++;\n-                cnt++;\n+public static boolean is_nested(String brackets) {\n+    ArrayList<Character> stack = new ArrayList<>();\n+    for(int i = 0; i < brackets.length(); i++) {\n+        char bracket = brackets.charAt(i);\n+        if(bracket == '[') {\n+            stack.add(bracket);\n+        } else if(bracket == ']') {\n+            if(stack.isEmpty() || stack.get(stack.size()-1) != '[') {\n+                return false;\n             }\n+            stack.remove(stack.size()-1);\n+        } else {\n+            // invalid bracket character\n+            return false;\n         }\n-        return cnt >= 2;\n     }\n+    // check if there are any opening brackets left on the stack\n+    return stack.isEmpty();\n+}\n }",
    "result_reason": "   TEST_IS_NESTED.test_11:50 expected:<false> but was:<true>",
    "test_result": "FAIL"
}