{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if child node is an EXPR_RESULT\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        return false;\n      }\n\n      // Check if child node is an expression node\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        Node parent = n.getParent();\n        while (parent != null) {\n          if (parent.getType() == Token.HOOK) {\n            // If parent is a HOOK, check if expression is the condition\n            return parent.getFirstChild() == maybeExpr;\n          } else if (parent.getType() == Token.IF) {\n            // If parent is an IF, check if expression is the condition\n            return NodeUtil.getConditionExpression(parent) == maybeExpr;\n          } else if (parent.getType() == Token.AND || parent.getType() == Token.OR) {\n            // If parent is an AND/OR, check if expression is the condition\n            return parent.getFirstChild() == maybeExpr || parent.getLastChild() == maybeExpr;\n          } else if (NodeUtil.isLoopStructure(parent)) {\n            // If parent is a loop (FOR/WHILE/DO), check if expression is in the condition\n            Node condition = NodeUtil.getConditionExpression(parent);\n            if (condition != null) {\n              if (NodeUtil.containsExpression(condition, maybeExpr)) {\n                return false;\n              }\n            }\n            break;\n          }\n\n          // Move up the tree\n          parent = parent.getParent();\n        }\n\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..12819f58 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,50 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if child node is an EXPR_RESULT\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        return false;\n       }\n-    }\n \n-    return false;\n+      // Check if child node is an expression node\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        Node parent = n.getParent();\n+        while (parent != null) {\n+          if (parent.getType() == Token.HOOK) {\n+            // If parent is a HOOK, check if expression is the condition\n+            return parent.getFirstChild() == maybeExpr;\n+          } else if (parent.getType() == Token.IF) {\n+            // If parent is an IF, check if expression is the condition\n+            return NodeUtil.getConditionExpression(parent) == maybeExpr;\n+          } else if (parent.getType() == Token.AND || parent.getType() == Token.OR) {\n+            // If parent is an AND/OR, check if expression is the condition\n+            return parent.getFirstChild() == maybeExpr || parent.getLastChild() == maybeExpr;\n+          } else if (NodeUtil.isLoopStructure(parent)) {\n+            // If parent is a loop (FOR/WHILE/DO), check if expression is in the condition\n+            Node condition = NodeUtil.getConditionExpression(parent);\n+            if (condition != null) {\n+              if (NodeUtil.containsExpression(condition, maybeExpr)) {\n+                return false;\n+              }\n+            }\n+            break;\n+          }\n+\n+          // Move up the tree\n+          parent = parent.getParent();\n+        }\n+\n+        return true;\n+      }\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}