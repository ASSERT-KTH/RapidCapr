{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode() || !(parent == null || NodeUtil.isStatementBlock(parent))) {\n    return;\n  }\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n)) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n          defineDeclaredFunction(n, grandparent);\n        }\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.LP:\n      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(n.getNext().getFirstChild());\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e415cfc7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,38 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode() || !(parent == null || NodeUtil.isStatementBlock(parent))) {\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n)) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+          defineDeclaredFunction(n, grandparent);\n+        }\n       }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.LP:\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.FUNCTION) {\n+        handleFunctionInputs(n.getNext().getFirstChild());\n       }\n-    }\n+      break;\n+    default:\n+      attachLiteralTypes(n);\n+      break;\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}