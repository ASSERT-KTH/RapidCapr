{
    "patch": "public void function() {\n    // Code that may produce a warning\n    // ...\n\n    // If a warning is produced:\n    System.out.println(\"WARNING: <warning message>\");\n\n    // Test to verify that a warning was produced\n    String[] warnings = <function that returns an array of Strings containing all warnings produced>;\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..5b447a13 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void function() {\n+    // Code that may produce a warning\n+    // ...\n+\n+    // If a warning is produced:\n+    System.out.println(\"WARNING: <warning message>\");\n+\n+    // Test to verify that a warning was produced\n+    String[] warnings = <function that returns an array of Strings containing all warnings produced>;\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: > expected",
    "test_result": "ERROR"
}