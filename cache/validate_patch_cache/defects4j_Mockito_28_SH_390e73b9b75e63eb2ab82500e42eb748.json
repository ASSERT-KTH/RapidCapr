{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); // get the candidate to inject\nif(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) { // if the candidate is not null and is assignable to the field type\n    try {\n        field.setAccessible(true); // make the field accessible\n        field.set(fieldInstance, candidate); // inject the candidate into the field\n        mocks.remove(candidate); // remove the used mock from the set of available mocks\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n    }\n} else if (candidate != null) { // if the candidate is not null and is not assignable to the field type\n    String errorMsg = String.format(\"Unable to assign mock candidate of type %s to field of type %s\",\n                                    candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n    throw new RuntimeException(errorMsg);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..be37de2a3 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,23 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); // get the candidate to inject\n+if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) { // if the candidate is not null and is assignable to the field type\n+    try {\n+        field.setAccessible(true); // make the field accessible\n+        field.set(fieldInstance, candidate); // inject the candidate into the field\n+        mocks.remove(candidate); // remove the used mock from the set of available mocks\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+    }\n+} else if (candidate != null) { // if the candidate is not null and is not assignable to the field type\n+    String errorMsg = String.format(\"Unable to assign mock candidate of type %s to field of type %s\",\n+                                    candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n+    throw new RuntimeException(errorMsg);\n+}\n         }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}