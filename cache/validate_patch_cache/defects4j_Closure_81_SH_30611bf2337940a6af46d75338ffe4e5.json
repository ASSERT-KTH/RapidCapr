{
    "patch": "      Name name = functionNode.getFunctionName();\n      Node node;\n      if (name == null) {\n        node = newNode(Token.FUNCTION);\n      } else {\n        node = newNode(Token.FUNCTION, transform(name));\n      }\n      Node lp = newNode(Token.LP);\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      lp.addChildToBack(newNode(Token.RP));\n      node.addChildToBack(lp);\n      node.addChildToBack(transform(functionNode.getBody()));\n      return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..05bb7923 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,21 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Name name = functionNode.getFunctionName();\n+      Node node;\n+      if (name == null) {\n+        node = newNode(Token.FUNCTION);\n+      } else {\n+        node = newNode(Token.FUNCTION, transform(name));\n+      }\n+      Node lp = newNode(Token.LP);\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      lp.addChildToBack(newNode(Token.RP));\n+      node.addChildToBack(lp);\n+      node.addChildToBack(transform(functionNode.getBody()));\n+      return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}