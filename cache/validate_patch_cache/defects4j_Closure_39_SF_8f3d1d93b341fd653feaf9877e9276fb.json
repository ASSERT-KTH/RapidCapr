{
    "patch": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Collect a list of all property names inherited from the prototype chain.\n        List<String> propertyNames = new ArrayList<>();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType();\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        // If there are too many inherited properties, sort them for display\n        // but only display the first MAX_PRETTY_PRINTED_PROPERTIES.\n        if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n            Collections.sort(propertyNames);\n            propertyNames = propertyNames.subList(0, MAX_PRETTY_PRINTED_PROPERTIES);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        boolean first = true;\n        for (String property : propertyNames) {\n            if (!first) {\n                sb.append(\", \");\n            } else {\n                first = false;\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(getPropertyType(property).toString());\n        }\n\n        if (!first) {\n            sb.append(\", ...\");\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..c2f5a22c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,57 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        // Collect a list of all property names inherited from the prototype chain.\n+        List<String> propertyNames = new ArrayList<>();\n+        for (ObjectType current = this;\n+             current != null && !current.isNativeObjectType();\n+             current = current.getImplicitPrototype()) {\n+            propertyNames.addAll(current.getOwnPropertyNames());\n+        }\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        // If there are too many inherited properties, sort them for display\n+        // but only display the first MAX_PRETTY_PRINTED_PROPERTIES.\n+        if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n+            Collections.sort(propertyNames);\n+            propertyNames = propertyNames.subList(0, MAX_PRETTY_PRINTED_PROPERTIES);\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        boolean first = true;\n+        for (String property : propertyNames) {\n+            if (!first) {\n+                sb.append(\", \");\n+            } else {\n+                first = false;\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+            sb.append(getPropertyType(property).toString());\n+        }\n+\n+        if (!first) {\n+            sb.append(\", ...\");\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}