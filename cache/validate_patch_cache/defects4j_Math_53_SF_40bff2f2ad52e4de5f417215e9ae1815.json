{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double r = real + rhs.getReal();\n    double i = imaginary + rhs.getImaginary();\n    \n    if (Double.isFinite(r) && Double.isFinite(i)) {\n        return createComplex(r, i);\n    }\n    \n    if (!Double.isFinite(real) && !Double.isFinite(imaginary)) {\n        return createComplex(real, imaginary);\n    }\n    \n    if (!Double.isFinite(rhs.getReal()) && !Double.isFinite(rhs.getImaginary())) {\n        return createComplex(rhs.getReal(), rhs.getImaginary());\n    }\n    \n    return createComplex(Double.NaN, Double.NaN);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..1530668cf 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,25 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double r = real + rhs.getReal();\n+    double i = imaginary + rhs.getImaginary();\n+    \n+    if (Double.isFinite(r) && Double.isFinite(i)) {\n+        return createComplex(r, i);\n+    }\n+    \n+    if (!Double.isFinite(real) && !Double.isFinite(imaginary)) {\n+        return createComplex(real, imaginary);\n+    }\n+    \n+    if (!Double.isFinite(rhs.getReal()) && !Double.isFinite(rhs.getImaginary())) {\n+        return createComplex(rhs.getReal(), rhs.getImaginary());\n     }\n+    \n+    return createComplex(Double.NaN, Double.NaN);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<NaN> but was:<Infinity>",
    "test_result": "FAIL"
}