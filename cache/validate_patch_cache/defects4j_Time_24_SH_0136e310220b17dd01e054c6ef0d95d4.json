{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis != millis) {\n            if (i>0) {\n                SavedField previousField = savedFields[i-1];\n                DurationField previousDurationField = previousField.iField.getDurationField();\n                // If the previous field is a day of month, the current is a month, and the month is December, we adjust the year\n                if (previousDurationField != null && previousDurationField.getType() == DateTimeFieldType.dayOfMonth())\n                {\n                   LocalDate previousDateTime = new LocalDate(previousField.iField.set(millis, iDefaultYear), iChrono);\n                   if (previousDateTime.getMonthOfYear() == 12 && savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear())\n                   {\n                      iDefaultYear = previousDateTime.getYear() + 1;\n                   }\n                }\n            }\n            else if (i == 0) {\n                throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition (\" + iZone + ')');\n            }\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4417c397 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,35 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis != millis) {\n+            if (i>0) {\n+                SavedField previousField = savedFields[i-1];\n+                DurationField previousDurationField = previousField.iField.getDurationField();\n+                // If the previous field is a day of month, the current is a month, and the month is December, we adjust the year\n+                if (previousDurationField != null && previousDurationField.getType() == DateTimeFieldType.dayOfMonth())\n+                {\n+                   LocalDate previousDateTime = new LocalDate(previousField.iField.set(millis, iDefaultYear), iChrono);\n+                   if (previousDateTime.getMonthOfYear() == 12 && savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear())\n+                   {\n+                      iDefaultYear = previousDateTime.getYear() + 1;\n+                   }\n+                }\n+            }\n+            else if (i == 0) {\n+                throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition (\" + iZone + ')');\n+            }\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incomparable types: DurationFieldType and DateTimeFieldType",
    "test_result": "ERROR"
}