{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n      throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long localMillis = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        localMillis, chrono, iLocale, iPivotYear, chrono.year().get(localMillis));\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n      long parsedMillis = bucket.computeMillis(true, text);\n      if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger().intValue();\n        zone = DateTimeZone.forOffsetMillis(parsedOffset);\n        if (!zone.equals(instant.getZone())) {\n          instant = instant.withZone(zone);\n          localMillis = parsedMillis + parsedOffset;\n        } else {\n          localMillis = parsedMillis;\n        }\n      } else {\n        zone = bucket.getZone();\n        if (zone != null) {\n          instant = instant.withZone(zone);\n          localMillis = parsedMillis + zone.getOffset(parsedMillis);\n        } else {\n          localMillis = parsedMillis;\n        }\n      }\n      instant.setMillis(localMillis);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..5804e0fb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,44 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+      throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long localMillis = instantMillis + zone.getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        localMillis, chrono, iLocale, iPivotYear, chrono.year().get(localMillis));\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+      long parsedMillis = bucket.computeMillis(true, text);\n+      if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger().intValue();\n+        zone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        if (!zone.equals(instant.getZone())) {\n+          instant = instant.withZone(zone);\n+          localMillis = parsedMillis + parsedOffset;\n+        } else {\n+          localMillis = parsedMillis;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+      } else {\n+        zone = bucket.getZone();\n+        if (zone != null) {\n+          instant = instant.withZone(zone);\n+          localMillis = parsedMillis + zone.getOffset(parsedMillis);\n+        } else {\n+          localMillis = parsedMillis;\n         }\n-        return newPos;\n+      }\n+      instant.setMillis(localMillis);\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}