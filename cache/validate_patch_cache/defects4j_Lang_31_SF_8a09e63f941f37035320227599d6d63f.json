{
    "patch": "public static boolean containsAny(CharSequence haystack, char... needles) {\n    if (haystack == null || needles == null) {\n        return false;\n    }\n\n    int needleLength = needles.length;\n    if (needleLength == 0) {\n        return false;\n    }\n\n    if (haystack instanceof String) {\n        String haystackString = (String) haystack;\n        int haystackLength = haystackString.length();\n\n        if (haystackLength == 0) {\n            return false;\n        }\n\n        if (needleLength == 1) {\n            return haystackString.indexOf(needles[0]) != -1;\n        }\n\n        outer:\n        for (int i = 0; i < haystackLength; i++) {\n            char ch = haystackString.charAt(i);\n            for (int j = 0; j < needleLength; j++) {\n                if (needles[j] == ch) {\n                    if (Character.isLowSurrogate(ch)) {\n                        if (i < 1) {\n                            return false;\n                        }\n                        char prev = haystackString.charAt(i - 1);\n                        if (Character.isHighSurrogate(prev)) {\n                            continue outer;\n                        }\n                        return false;\n                    } else if (Character.isHighSurrogate(ch)) {\n                        if (i == haystackLength - 1) {\n                            return false;\n                        }\n                        char next = haystackString.charAt(i + 1);\n                        if (Character.isLowSurrogate(next)) {\n                            int codePoint = Character.toCodePoint(ch, next);\n                            if (contains(needles, codePoint)) {\n                                return true;\n                            }\n                        } else {\n                            return false;\n                        }\n                        i++;\n                        continue outer;\n                    } else {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    } else {\n        int haystackLength = haystack.length();\n\n        if (haystackLength == 0) {\n            return false;\n        }\n\n        if (needleLength == 1) {\n            return contains(haystack, needles[0]);\n        }\n\n        outer:\n        for (int i = 0; i < haystackLength; i++) {\n            char ch = haystack.charAt(i);\n            for (int j = 0; j < needleLength; j++) {\n                if (needles[j] == ch) {\n                    if (Character.isLowSurrogate(ch)) {\n                        if (i < 1) {\n                            return false;\n                        }\n                        char prev = haystack.charAt(i - 1);\n                        if (Character.isHighSurrogate(prev)) {\n                            continue outer;\n                        }\n                        return false;\n                    } else if (Character.isHighSurrogate(ch)) {\n                        if (i == haystackLength - 1) {\n                            return false;\n                        }\n                        char next = haystack.charAt(i + 1);\n                        if (Character.isLowSurrogate(next)) {\n                            int codePoint = Character.toCodePoint(ch, next);\n                            if (contains(needles, codePoint)) {\n                                return true;\n                            }\n                        } else {\n                            return false;\n                        }\n                        i++;\n                        continue outer;\n                    } else {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\nprivate static boolean contains(char[] array, int valueToFind) {\n    for (char element : array) {\n        if (element == valueToFind) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..5ee90585 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,122 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence haystack, char... needles) {\n+    if (haystack == null || needles == null) {\n+        return false;\n+    }\n+\n+    int needleLength = needles.length;\n+    if (needleLength == 0) {\n+        return false;\n+    }\n+\n+    if (haystack instanceof String) {\n+        String haystackString = (String) haystack;\n+        int haystackLength = haystackString.length();\n+\n+        if (haystackLength == 0) {\n+            return false;\n+        }\n+\n+        if (needleLength == 1) {\n+            return haystackString.indexOf(needles[0]) != -1;\n+        }\n+\n+        outer:\n+        for (int i = 0; i < haystackLength; i++) {\n+            char ch = haystackString.charAt(i);\n+            for (int j = 0; j < needleLength; j++) {\n+                if (needles[j] == ch) {\n+                    if (Character.isLowSurrogate(ch)) {\n+                        if (i < 1) {\n+                            return false;\n+                        }\n+                        char prev = haystackString.charAt(i - 1);\n+                        if (Character.isHighSurrogate(prev)) {\n+                            continue outer;\n+                        }\n+                        return false;\n+                    } else if (Character.isHighSurrogate(ch)) {\n+                        if (i == haystackLength - 1) {\n+                            return false;\n+                        }\n+                        char next = haystackString.charAt(i + 1);\n+                        if (Character.isLowSurrogate(next)) {\n+                            int codePoint = Character.toCodePoint(ch, next);\n+                            if (contains(needles, codePoint)) {\n+                                return true;\n+                            }\n+                        } else {\n+                            return false;\n+                        }\n+                        i++;\n+                        continue outer;\n+                    } else {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    } else {\n+        int haystackLength = haystack.length();\n+\n+        if (haystackLength == 0) {\n+            return false;\n+        }\n+\n+        if (needleLength == 1) {\n+            return contains(haystack, needles[0]);\n+        }\n+\n+        outer:\n+        for (int i = 0; i < haystackLength; i++) {\n+            char ch = haystack.charAt(i);\n+            for (int j = 0; j < needleLength; j++) {\n+                if (needles[j] == ch) {\n+                    if (Character.isLowSurrogate(ch)) {\n+                        if (i < 1) {\n+                            return false;\n+                        }\n+                        char prev = haystack.charAt(i - 1);\n+                        if (Character.isHighSurrogate(prev)) {\n+                            continue outer;\n+                        }\n+                        return false;\n+                    } else if (Character.isHighSurrogate(ch)) {\n+                        if (i == haystackLength - 1) {\n+                            return false;\n+                        }\n+                        char next = haystack.charAt(i + 1);\n+                        if (Character.isLowSurrogate(next)) {\n+                            int codePoint = Character.toCodePoint(ch, next);\n+                            if (contains(needles, codePoint)) {\n+                                return true;\n+                            }\n+                        } else {\n+                            return false;\n+                        }\n+                        i++;\n+                        continue outer;\n+                    } else {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n+\n+private static boolean contains(char[] array, int valueToFind) {\n+    for (char element : array) {\n+        if (element == valueToFind) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}