{
    "patch": "protected final double doSolve() {\n    // Get initial solution\n    final double min = getMin();\n    final double max = getMax();\n    final double fmin = computeObjectiveValue(min);\n    final double fmax = computeObjectiveValue(max);\n\n    // If one of the bounds is the exact root, return it.\n    if (fmin == 0.0) {\n        return min;\n    }\n    if (fmax == 0.0) {\n        return max;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(min, max);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep finding better approximations.\n    double x = 0;\n    double fx = 0;\n    double delta = 0;\n    double m = 0;\n    double fm = 0;\n    double fminDiverged = fmin;\n    double fmaxDiverged = fmax;\n    int numIterations = 0;\n    while (true) {\n        // Calculate the next approximation.\n        delta = (max - min) / 2;\n        x = min + delta;\n        fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        if (fx > 0) {\n            fmaxDiverged = fx;\n        } else {\n            fminDiverged = fx;\n        }\n\n        // Update optimal values.\n        if ((numIterations == 0) || (FastMath.abs(fx) < FastMath.abs(fm))) {\n            m = x;\n            fm = fx;\n        }\n\n        // If the current interval is within the given accuracies, we\n        // are satisfied with the current approximation.\n        if (FastMath.abs(delta) < FastMath.max(rtol * FastMath.abs(m),\n                                                atol)) {\n            if (allowed == AllowedSolution.ANY_SIDE) {\n                return x;\n            } else if (allowed == AllowedSolution.LEFT_SIDE) {\n                if (fx * fm <= 0) {\n                    max = x;\n                    fmax = fx;\n                } else {\n                    min = x;\n                    fmin = fx;\n                }\n                return m;\n            } else if (allowed == AllowedSolution.RIGHT_SIDE) {\n                if (fx * fm <= 0) {\n                    min = x;\n                    fmin = fx;\n                } else {\n                    max = x;\n                    fmax = fx;\n                }\n                return m;\n            } else if (allowed == AllowedSolution.BELOW_SIDE) {\n                if (fx <= 0) {\n                   return x;\n                } else if (FastMath.abs(fminDiverged) < FastMath.abs(fmaxDiverged)) {\n                    return min;\n                } else {\n                    return max;\n                }\n            } else if (allowed == AllowedSolution.ABOVE_SIDE) {\n                if (fx >= 0) {\n                    return x;\n                } else if (FastMath.abs(fminDiverged) < FastMath.abs(fmaxDiverged)) {\n                    return min;\n                } else {\n                    return max;\n                }\n            }\n        }\n\n        // If the function value of the approximation is too small,\n        // given the function value accuracy, then we can't get closer to\n        // the root than we already are.\n        if (FastMath.abs(fx) <= ftol) {\n            if (allowed == AllowedSolution.ANY_SIDE) {\n                return x;\n            } else if (allowed == AllowedSolution.LEFT_SIDE) {\n                if (fx * fm <= 0) {\n                    max = x;\n                    fmax = fx;\n                } else {\n                    min = x;\n                    fmin = fx;\n                }\n                return m;\n            } else if (allowed == AllowedSolution.RIGHT_SIDE) {\n                if (fx * fm <= 0) {\n                    min = x;\n                    fmin = fx;\n                } else {\n                    max = x;\n                    fmax = fx;\n                }\n                return m;\n            } else if (allowed == AllowedSolution.BELOW_SIDE) {\n                if (fminDiverged <= 0) {\n                    return min;\n                } else {\n                    return max;\n                }\n            } else if (allowed == AllowedSolution.ABOVE_SIDE) {\n                if (fminDiverged >= 0) {\n                    return min;\n                }\n            }\n        }\n\n        // Update the bounds with the new approximation.\n        if (fx * fmin < 0) {\n            max = x;\n            fmax = fx;\n        } else {\n            min = x;\n            fmin = fx;\n        }\n\n        // Check for convergence and force bisection if progress is slow.\n        ++numIterations;\n        if ((numIterations >= 2) && (FastMath.abs(delta) <= rtol * FastMath.abs(m))) {\n            delta = (delta > 0) ? rtol * FastMath.abs(m) : -rtol * FastMath.abs(m);\n        }\n        if (numIterations >= maximalIterationCount) {\n            throw new TooManyIterationsException(maximalIterationCount);\n        }\n\n        // If the interval is inverted, throw an exception.\n        if (min >= max) {\n            throw new NoBracketingException(min, max, fmin, fmax);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..11a82e306 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,164 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected final double doSolve() {\n+    // Get initial solution\n+    final double min = getMin();\n+    final double max = getMax();\n+    final double fmin = computeObjectiveValue(min);\n+    final double fmax = computeObjectiveValue(max);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+    // If one of the bounds is the exact root, return it.\n+    if (fmin == 0.0) {\n+        return min;\n+    }\n+    if (fmax == 0.0) {\n+        return max;\n+    }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    // Verify bracketing of initial solution.\n+    verifyBracketing(min, max);\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    // Get accuracies.\n+    final double ftol = getFunctionValueAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+    final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    // Keep finding better approximations.\n+    double x = 0;\n+    double fx = 0;\n+    double delta = 0;\n+    double m = 0;\n+    double fm = 0;\n+    double fminDiverged = fmin;\n+    double fmaxDiverged = fmax;\n+    int numIterations = 0;\n+    while (true) {\n+        // Calculate the next approximation.\n+        delta = (max - min) / 2;\n+        x = min + delta;\n+        fx = computeObjectiveValue(x);\n+        if (fx == 0.0) {\n+            return x;\n+        }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+        // Update the bounds with the new approximation.\n+        if (fx > 0) {\n+            fmaxDiverged = fx;\n+        } else {\n+            fminDiverged = fx;\n+        }\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+        // Update optimal values.\n+        if ((numIterations == 0) || (FastMath.abs(fx) < FastMath.abs(fm))) {\n+            m = x;\n+            fm = fx;\n+        }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n+        // If the current interval is within the given accuracies, we\n+        // are satisfied with the current approximation.\n+        if (FastMath.abs(delta) < FastMath.max(rtol * FastMath.abs(m),\n+                                                atol)) {\n+            if (allowed == AllowedSolution.ANY_SIDE) {\n+                return x;\n+            } else if (allowed == AllowedSolution.LEFT_SIDE) {\n+                if (fx * fm <= 0) {\n+                    max = x;\n+                    fmax = fx;\n+                } else {\n+                    min = x;\n+                    fmin = fx;\n                 }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n+                return m;\n+            } else if (allowed == AllowedSolution.RIGHT_SIDE) {\n+                if (fx * fm <= 0) {\n+                    min = x;\n+                    fmin = fx;\n+                } else {\n+                    max = x;\n+                    fmax = fx;\n+                }\n+                return m;\n+            } else if (allowed == AllowedSolution.BELOW_SIDE) {\n+                if (fx <= 0) {\n+                   return x;\n+                } else if (FastMath.abs(fminDiverged) < FastMath.abs(fmaxDiverged)) {\n+                    return min;\n+                } else {\n+                    return max;\n+                }\n+            } else if (allowed == AllowedSolution.ABOVE_SIDE) {\n+                if (fx >= 0) {\n+                    return x;\n+                } else if (FastMath.abs(fminDiverged) < FastMath.abs(fmaxDiverged)) {\n+                    return min;\n+                } else {\n+                    return max;\n                 }\n             }\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+        // If the function value of the approximation is too small,\n+        // given the function value accuracy, then we can't get closer to\n+        // the root than we already are.\n+        if (FastMath.abs(fx) <= ftol) {\n+            if (allowed == AllowedSolution.ANY_SIDE) {\n+                return x;\n+            } else if (allowed == AllowedSolution.LEFT_SIDE) {\n+                if (fx * fm <= 0) {\n+                    max = x;\n+                    fmax = fx;\n+                } else {\n+                    min = x;\n+                    fmin = fx;\n+                }\n+                return m;\n+            } else if (allowed == AllowedSolution.RIGHT_SIDE) {\n+                if (fx * fm <= 0) {\n+                    min = x;\n+                    fmin = fx;\n+                } else {\n+                    max = x;\n+                    fmax = fx;\n+                }\n+                return m;\n+            } else if (allowed == AllowedSolution.BELOW_SIDE) {\n+                if (fminDiverged <= 0) {\n+                    return min;\n+                } else {\n+                    return max;\n+                }\n+            } else if (allowed == AllowedSolution.ABOVE_SIDE) {\n+                if (fminDiverged >= 0) {\n+                    return min;\n                 }\n             }\n         }\n+\n+        // Update the bounds with the new approximation.\n+        if (fx * fmin < 0) {\n+            max = x;\n+            fmax = fx;\n+        } else {\n+            min = x;\n+            fmin = fx;\n+        }\n+\n+        // Check for convergence and force bisection if progress is slow.\n+        ++numIterations;\n+        if ((numIterations >= 2) && (FastMath.abs(delta) <= rtol * FastMath.abs(m))) {\n+            delta = (delta > 0) ? rtol * FastMath.abs(m) : -rtol * FastMath.abs(m);\n+        }\n+        if (numIterations >= maximalIterationCount) {\n+            throw new TooManyIterationsException(maximalIterationCount);\n+        }\n+\n+        // If the interval is inverted, throw an exception.\n+        if (min >= max) {\n+            throw new NoBracketingException(min, max, fmin, fmax);\n+        }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: cannot assign a value to final variable max",
    "test_result": "ERROR"
}