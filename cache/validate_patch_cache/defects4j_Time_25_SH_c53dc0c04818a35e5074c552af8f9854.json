{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // if the gap is more than 24 hours, give up\n        int diff = offsetAdjusted - offsetLocal;\n        if (Math.abs(diff) > 24) {\n            return offsetLocal;\n        }\n        if ((nextAdjusted < nextLocal) && (nextLocal < instantLocal)) {\n            return offsetLocal;\n        }\n    } else {\n        // get the correct offset for the true local time\n        int offset = getOffset(nextLocal);\n        if (offset == offsetAdjusted) {\n            // use the earlier estimate since it was OK\n            return offsetLocal;\n        } else {\n            return offset;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3e9450cf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // if the gap is more than 24 hours, give up\n+        int diff = offsetAdjusted - offsetLocal;\n+        if (Math.abs(diff) > 24) {\n+            return offsetLocal;\n+        }\n+        if ((nextAdjusted < nextLocal) && (nextLocal < instantLocal)) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        // get the correct offset for the true local time\n+        int offset = getOffset(nextLocal);\n+        if (offset == offsetAdjusted) {\n+            // use the earlier estimate since it was OK\n+            return offsetLocal;\n+        } else {\n+            return offset;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}