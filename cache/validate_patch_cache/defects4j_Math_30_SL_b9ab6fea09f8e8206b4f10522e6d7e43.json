{
    "patch": "1. final long n1n2prod = (long)n1 * (long)n2;\n2. final double n1n2prod = (double)n1 * (double)n2;\n3. final double n1n2prod = n1 * (double)n2;\n4. final double n1n2prod = (double)n1 * n2;\n5. final double n1n2prod = (double) n1 * (double) n2;\n6. final long n1n2prod = (long) n1 * n2;\n7. final long n1n2prod = (long)n1 * (long)n2;\n8. final long n1n2prod = (long) n1 * (long) n2;\n9. final long n1n2prod = ((long)n1) * ((long)n2);\n10. final double n1n2prod = (double) n1 * n2;\n11. final double n1n2prod = (double)n1 * (double)n2;\n12. final double n1n2prod = n1 * (double)n2;\n13. final long n1n2prod = (long)n1 * (long)(n2 & Integer.MAX_VALUE);\n14. final long n1n2prod = ((long)n1) * n2;\n15. final long n1n2prod = ((long) n1) * ((long) n2);\n16. final long n1Long = (long) n1;\n    final long n1n2prod = n1Long * n2;\n17. final long n1n2prod = (long)n1 * n2;\n18. final long n1n2prod = ((long) n1) * n2;\n19. final long n1n2prod = Math.multiplyExact(n1, n2);\n20. final long n1n2prod = (long) Math.multiplyExact(n1, n2);\n21. final double n1n2prod = (double) Math.multiplyExact(n1, n2);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..5e023607f 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -170,7 +170,28 @@ public class MannWhitneyUTest {\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+1. final long n1n2prod = (long)n1 * (long)n2;\n+2. final double n1n2prod = (double)n1 * (double)n2;\n+3. final double n1n2prod = n1 * (double)n2;\n+4. final double n1n2prod = (double)n1 * n2;\n+5. final double n1n2prod = (double) n1 * (double) n2;\n+6. final long n1n2prod = (long) n1 * n2;\n+7. final long n1n2prod = (long)n1 * (long)n2;\n+8. final long n1n2prod = (long) n1 * (long) n2;\n+9. final long n1n2prod = ((long)n1) * ((long)n2);\n+10. final double n1n2prod = (double) n1 * n2;\n+11. final double n1n2prod = (double)n1 * (double)n2;\n+12. final double n1n2prod = n1 * (double)n2;\n+13. final long n1n2prod = (long)n1 * (long)(n2 & Integer.MAX_VALUE);\n+14. final long n1n2prod = ((long)n1) * n2;\n+15. final long n1n2prod = ((long) n1) * ((long) n2);\n+16. final long n1Long = (long) n1;\n+    final long n1n2prod = n1Long * n2;\n+17. final long n1n2prod = (long)n1 * n2;\n+18. final long n1n2prod = ((long) n1) * n2;\n+19. final long n1n2prod = Math.multiplyExact(n1, n2);\n+20. final long n1n2prod = (long) Math.multiplyExact(n1, n2);\n+21. final double n1n2prod = (double) Math.multiplyExact(n1, n2);\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}