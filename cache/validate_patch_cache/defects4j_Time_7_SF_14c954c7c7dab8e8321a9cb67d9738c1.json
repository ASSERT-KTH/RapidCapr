{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n\n    private Chronology selectChronology(Chronology original) {\n        if (iChrono != null) {\n            return iChrono;\n        }\n        if (original != null) {\n            DateTimeZone zone = original.getZone();\n            if (zone != null) {\n                try {\n                    Chronology chrono = original.withUTC();\n                    chrono.year().set(2002, 1);\n                    chrono.dayOfMonth().set(29, 2);\n                    return chrono;\n                } catch (IllegalArgumentException ex) {\n                }\n            }\n        }\n        return ISOChronology.getInstanceUTC();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..a73ba8ac 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,18 +697,18 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n         DateTimeParser parser = requireParser();\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n@@ -727,6 +727,24 @@ public class DateTimeFormatter {\n         return newPos;\n     }\n \n+    private Chronology selectChronology(Chronology original) {\n+        if (iChrono != null) {\n+            return iChrono;\n+        }\n+        if (original != null) {\n+            DateTimeZone zone = original.getZone();\n+            if (zone != null) {\n+                try {\n+                    Chronology chrono = original.withUTC();\n+                    chrono.year().set(2002, 1);\n+                    chrono.dayOfMonth().set(29, 2);\n+                    return chrono;\n+                } catch (IllegalArgumentException ex) {\n+                }\n+            }\n+        }\n+        return ISOChronology.getInstanceUTC();\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}