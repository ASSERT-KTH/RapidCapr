{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS).spiedInstance(mock));\n    Object oldCallback = getField(mock, \"CGLIB$CALLBACK_0\");\n    ((Factory) mock).setCallback(0, newFilter);\n    Object newCallback = getField(mock, \"CGLIB$CALLBACK_0\");\n    if (oldCallback != newCallback) {\n        try {\n            Object oldMock = getField(oldCallback, \"mock\");\n            newMockHandler.setMockInstance(oldMock);\n        } catch (Exception e) {\n            // Could not set mock instance\n        }\n    }\n}\n\nprivate Object getField(Object object, String fieldName) {\n    Class<?> clazz = object.getClass();\n    while (clazz != null) {\n        try {\n            Field field = clazz.getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field.get(object);\n        } catch (NoSuchFieldException e) {\n            clazz = clazz.getSuperclass();\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Access to field not allowed\", e);\n        }\n    }\n    throw new IllegalArgumentException(\"Field \" + fieldName + \" not found in \" + object);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..fa10e1eb2 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,39 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS).spiedInstance(mock));\n+    Object oldCallback = getField(mock, \"CGLIB$CALLBACK_0\");\n+    ((Factory) mock).setCallback(0, newFilter);\n+    Object newCallback = getField(mock, \"CGLIB$CALLBACK_0\");\n+    if (oldCallback != newCallback) {\n+        try {\n+            Object oldMock = getField(oldCallback, \"mock\");\n+            newMockHandler.setMockInstance(oldMock);\n+        } catch (Exception e) {\n+            // Could not set mock instance\n+        }\n+    }\n+}\n+\n+private Object getField(Object object, String fieldName) {\n+    Class<?> clazz = object.getClass();\n+    while (clazz != null) {\n+        try {\n+            Field field = clazz.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            return field.get(object);\n+        } catch (NoSuchFieldException e) {\n+            clazz = clazz.getSuperclass();\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Access to field not allowed\", e);\n+        }\n+    }\n+    throw new IllegalArgumentException(\"Field \" + fieldName + \" not found in \" + object);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}