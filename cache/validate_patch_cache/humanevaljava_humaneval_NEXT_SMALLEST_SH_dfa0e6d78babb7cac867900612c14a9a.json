{
    "patch": "Set<Integer> numbers = new HashSet<Integer>();\nfor (int n : lst) {\n    if (numbers.size() == 0 || n < numbers.iterator().next()) {\n        numbers.clear();\n        numbers.add(n);\n    } else if (n != numbers.iterator().next()) {\n        numbers.add(n);\n    }\n}\nif (numbers.size() < 2)\n    return null;\nreturn numbers.stream().sorted().skip(1).findFirst().get();",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\nindex 7791efd..6c112c6 100644\n--- a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n+++ b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n@@ -13,7 +13,18 @@ next_smallest([1, 1]) == None */\n \n public class NEXT_SMALLEST {\n     public static Integer next_smallest(int[] lst) {\n-        List<Integer> numbers = new ArrayList<Integer>();\n+Set<Integer> numbers = new HashSet<Integer>();\n+for (int n : lst) {\n+    if (numbers.size() == 0 || n < numbers.iterator().next()) {\n+        numbers.clear();\n+        numbers.add(n);\n+    } else if (n != numbers.iterator().next()) {\n+        numbers.add(n);\n+    }\n+}\n+if (numbers.size() < 2)\n+    return null;\n+return numbers.stream().sorted().skip(1).findFirst().get();\n         for (Integer n : lst)\n             numbers.add(n);\n         Integer[] no_duplicate = numbers.toArray(new Integer[] {});",
    "result_reason": " /tmp/humaneval-NEXT_SMALLEST/src/main/java/humaneval/buggy/NEXT_SMALLEST.java:[28,9] unreachable statement",
    "test_result": "ERROR"
}