{
    "patch": "public Iterable<String> getValues(Connection connection) {\n    List<String> values = new ArrayList<>();\n\n    try {\n        Statement statement = connection.createStatement();\n        ResultSet rs = statement.executeQuery(\"SELECT value FROM table\");\n        while (rs.next()) {\n            values.add(rs.getString(\"value\"));\n        }\n    } catch (SQLException e) {\n        // handle exception\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..27d6fad12 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<String> getValues(Connection connection) {\n+    List<String> values = new ArrayList<>();\n+\n+    try {\n+        Statement statement = connection.createStatement();\n+        ResultSet rs = statement.executeQuery(\"SELECT value FROM table\");\n+        while (rs.next()) {\n+            values.add(rs.getString(\"value\"));\n+        }\n+    } catch (SQLException e) {\n+        // handle exception\n+    }\n+\n+    return values;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}