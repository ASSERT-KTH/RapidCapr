{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] result = Arrays.copyOf(values, values.length);  // copy input array to \"result\" array\n    int fieldAddedTo = partial.getFieldType(fieldIndex).getDurationType().getFieldIndex();  // get the duration type of the field being added to (e.g. months, days, hours, etc) and its index\n    result[fieldAddedTo] += valueToAdd;  // add the value to the appropriate field in \"result\"\n\n    // iterate over the fields to check if any fields need to be adjusted\n    for (int i = partial.size() - 1; i > fieldIndex; i--) {\n        DateTimeFieldType fieldType = partial.getFieldType(i);\n        int newFieldValue = fieldType.getField(iChronology).getMaximumValue(instant); //get maximum value\n        int currentValue = result[i]; // get current value from result\n        if (currentValue > newFieldValue) {\n            throw new org.joda.time.IllegalFieldValueException(fieldType, String.valueOf(currentValue));\n        }\n        else if (currentValue < fieldType.getField(iChronology).getMinimumValue(instant)) {  //get minimum value\n            throw new org.joda.time.IllegalFieldValueException(fieldType, String.valueOf(currentValue));\n        }\n        else {\n            result[i] = currentValue; // update result array\n        }\n    }\n\n    // if partial is contiguous, return the result array; otherwise, delegate to super method\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0; i < result.length; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, result[i]);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d3870a91 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] result = Arrays.copyOf(values, values.length);  // copy input array to \"result\" array\n+    int fieldAddedTo = partial.getFieldType(fieldIndex).getDurationType().getFieldIndex();  // get the duration type of the field being added to (e.g. months, days, hours, etc) and its index\n+    result[fieldAddedTo] += valueToAdd;  // add the value to the appropriate field in \"result\"\n+\n+    // iterate over the fields to check if any fields need to be adjusted\n+    for (int i = partial.size() - 1; i > fieldIndex; i--) {\n+        DateTimeFieldType fieldType = partial.getFieldType(i);\n+        int newFieldValue = fieldType.getField(iChronology).getMaximumValue(instant); //get maximum value\n+        int currentValue = result[i]; // get current value from result\n+        if (currentValue > newFieldValue) {\n+            throw new org.joda.time.IllegalFieldValueException(fieldType, String.valueOf(currentValue));\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        else if (currentValue < fieldType.getField(iChronology).getMinimumValue(instant)) {  //get minimum value\n+            throw new org.joda.time.IllegalFieldValueException(fieldType, String.valueOf(currentValue));\n+        }\n+        else {\n+            result[i] = currentValue; // update result array\n         }\n     }\n \n+    // if partial is contiguous, return the result array; otherwise, delegate to super method\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0; i < result.length; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, result[i]);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}