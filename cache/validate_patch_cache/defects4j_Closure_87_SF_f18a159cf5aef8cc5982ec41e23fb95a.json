{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild() && n.getParent().getType() != Token.IF) {\n        Node maybeExpr = n.getFirstChild();\n        if (!NodeUtil.isFunctionDeclaration(maybeExpr) && !NodeUtil.isFunctionExpression(maybeExpr) && !NodeUtil.isAssignable(maybeExpr) && !NodeUtil.mayHaveSideEffects(maybeExpr) && !NodeUtil.mayHaveSideEffects(n)) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n\n          return NodeUtil.isExpressionNode(maybeExpr);\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a6118f06 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,10 +516,11 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+      if (n.hasOneChild() && n.getParent().getType() != Token.IF) {\n         Node maybeExpr = n.getFirstChild();\n+        if (!NodeUtil.isFunctionDeclaration(maybeExpr) && !NodeUtil.isFunctionExpression(maybeExpr) && !NodeUtil.isAssignable(maybeExpr) && !NodeUtil.mayHaveSideEffects(maybeExpr) && !NodeUtil.mayHaveSideEffects(n)) {\n           // IE has a bug where event handlers behave differently when\n           // their return value is used vs. when their return value is in\n           // an EXPR_RESULT. It's pretty freaking weird. See:\n@@ -527,10 +528,11 @@ public class PeepholeSubstituteAlternateSyntax\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+          // We only have to worry about methods with an implicit 'this'\n+          // param, or this doesn't happen.\n \n           return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}