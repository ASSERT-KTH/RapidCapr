{
    "patch": "public static String unescapeCsv(String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    if (len == 0) {\n        return input;\n    }\n    // Check if input is enclosed in quotes\n    boolean enclosedInQuotes = (input.charAt(0) == CSV_QUOTE) && (input.charAt(len - 1) == CSV_QUOTE);\n    if (enclosedInQuotes) {\n        len--;\n    }\n    StringBuilder builder = new StringBuilder(len);\n    for (int i = 0; i < len; ) {\n        char c = input.charAt(i++);\n        if (c == CSV_QUOTE) {\n            // If quote is followed by another quote, add a single quote to output\n            if (enclosedInQuotes && (i < len) && (input.charAt(i) == CSV_QUOTE)) {\n                builder.append(CSV_QUOTE);\n                i++;\n            } else {\n                enclosedInQuotes = !enclosedInQuotes;\n            }\n        } else if (c == CSV_DELIMITER && !enclosedInQuotes) {\n            builder.append(',');\n        } else if (c == CR && i < len && input.charAt(i) == LF) {\n            // Handle '\\r\\n' newline sequence\n            builder.append('\\n');\n            i++;\n        } else {\n            builder.append(c);\n        }\n    }\n    return builder.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..96434948 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,42 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String unescapeCsv(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    if (len == 0) {\n+        return input;\n+    }\n+    // Check if input is enclosed in quotes\n+    boolean enclosedInQuotes = (input.charAt(0) == CSV_QUOTE) && (input.charAt(len - 1) == CSV_QUOTE);\n+    if (enclosedInQuotes) {\n+        len--;\n+    }\n+    StringBuilder builder = new StringBuilder(len);\n+    for (int i = 0; i < len; ) {\n+        char c = input.charAt(i++);\n+        if (c == CSV_QUOTE) {\n+            // If quote is followed by another quote, add a single quote to output\n+            if (enclosedInQuotes && (i < len) && (input.charAt(i) == CSV_QUOTE)) {\n+                builder.append(CSV_QUOTE);\n+                i++;\n+            } else {\n+                enclosedInQuotes = !enclosedInQuotes;\n             }\n+        } else if (c == CSV_DELIMITER && !enclosedInQuotes) {\n+            builder.append(',');\n+        } else if (c == CR && i < len && input.charAt(i) == LF) {\n+            // Handle '\\r\\n' newline sequence\n+            builder.append('\\n');\n+            i++;\n+        } else {\n+            builder.append(c);\n         }\n     }\n+    return builder.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}