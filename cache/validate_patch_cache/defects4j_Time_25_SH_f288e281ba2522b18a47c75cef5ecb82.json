{
    "patch": "if (Math.abs(offsetLocal - offsetAdjusted) >= 2) {\n    // We're near a DST boundary and the difference in offsets is two or more.\n    // Check if the instant local is in a gap period and adjust accordingly.\n    final int nextOffset = getOffset(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n    if (nextOffset == offsetAdjusted) {\n        // We're in a gap period, adjust instantAdjusted and offsetAdjusted accordingly.\n        final long nextLocal = nextTransition(instantAdjusted);\n        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            int diff = (int) Math.max(instantLocal - nextLocal, nextAdjusted - instantLocal);\n            long adjustedLocal = (diff < Integer.MAX_VALUE) ? (instantLocal - diff) : Long.MIN_VALUE;\n            int adjustedOffset = getOffset(adjustedLocal);\n            if (offsetAdjusted == adjustedOffset) {\n                return adjustedOffset;\n            }\n        }\n     }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d75dbc3e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (Math.abs(offsetLocal - offsetAdjusted) >= 2) {\n+    // We're near a DST boundary and the difference in offsets is two or more.\n+    // Check if the instant local is in a gap period and adjust accordingly.\n+    final int nextOffset = getOffset(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+    if (nextOffset == offsetAdjusted) {\n+        // We're in a gap period, adjust instantAdjusted and offsetAdjusted accordingly.\n+        final long nextLocal = nextTransition(instantAdjusted);\n+        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            int diff = (int) Math.max(instantLocal - nextLocal, nextAdjusted - instantLocal);\n+            long adjustedLocal = (diff < Integer.MAX_VALUE) ? (instantLocal - diff) : Long.MIN_VALUE;\n+            int adjustedOffset = getOffset(adjustedLocal);\n+            if (offsetAdjusted == adjustedOffset) {\n+                return adjustedOffset;\n+            }\n+        }\n+     }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}