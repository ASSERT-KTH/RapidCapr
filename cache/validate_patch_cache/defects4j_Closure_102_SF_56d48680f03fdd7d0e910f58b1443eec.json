{
    "patch": "public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        NodeTraversal t = new NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n\n    removeDuplicateDeclarations(externs);\n    removeDuplicateDeclarations(root);\n    \n    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..4de3f56a 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,17 +84,20 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n+public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n+\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n-      NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n+        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n+        NodeTraversal t = new NodeTraversal(compiler, renamer);\n+        t.traverseRoots(externs, root);\n     }\n+\n+    removeDuplicateDeclarations(externs);\n     removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n-  }\n+    \n+    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n+}\n \n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}