{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node functionNode = fnScope.getRootNode();\n  Preconditions.checkState(functionNode.isFunction());\n\n  // Check if the function can have its callers modified.\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(functionNode);\n\n  if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(functionNode);\n\n  if (!modifyCallers) {\n    // If there is only one argument, and it is unreferenced, we can remove it.\n    // Otherwise, we strip unreferenced arguments off the end of the argument list.\n    Node arg = argList.getFirstChild();\n    if (arg == null) {\n      return;\n    } else if (arg.getNext() == null) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && lastArg.isName()) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastArg = argList.getLastChild();\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e8c3aa9c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,32 +366,35 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node functionNode = fnScope.getRootNode();\n+  Preconditions.checkState(functionNode.isFunction());\n+\n+  // Check if the function can have its callers modified.\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(functionNode);\n+\n+  if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(functionNode);\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n+  if (!modifyCallers) {\n+    // If there is only one argument, and it is unreferenced, we can remove it.\n+    // Otherwise, we strip unreferenced arguments off the end of the argument list.\n+    Node arg = argList.getFirstChild();\n+    if (arg == null) {\n+      return;\n+    } else if (arg.getNext() == null) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && lastArg.isName()) {\n         Var var = fnScope.getVar(lastArg.getString());\n         if (!referenced.contains(var)) {\n           argList.removeChild(lastArg);\n@@ -399,11 +402,13 @@ class RemoveUnusedVars\n         } else {\n           break;\n         }\n+        lastArg = argList.getLastChild();\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}