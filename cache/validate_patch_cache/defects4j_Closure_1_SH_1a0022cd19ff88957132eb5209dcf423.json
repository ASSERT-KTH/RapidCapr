{
    "patch": "// Remove unused function arguments\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    // Initialize a set to store the referenced variables in the function's scope.\n    Set<Var> referenced = Sets.newHashSet();\n    NodeTraversal.traverse(compiler, function, new AbstractScopedCallback() {\n        @Override\n        public void enterScope(NodeTraversal t) {\n            // Use this opportunity to add all free variables in this scope to \"referenced\".\n            for (Var v : t.getScope().getVarIterable()) {\n                if (!v.isLocal() && v.isReferenced()) {\n                    referenced.add(v);\n                }\n            }\n        }\n\n        @Override\n        public void exitScope(NodeTraversal t) {\n        }\n    });\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n        int numArgs = argList.getChildCount();\n        for (int i = 0; i < numArgs; i++) {\n            Node arg = argList.getChildAtIndex(i);\n            Var var = fnScope.getVar(arg.getString());\n\n            // Check whether the argument is referenced\n            if (!referenced.contains(var)) {\n                arg.detach();\n                numArgs--;\n                i--;\n                compiler.reportCodeChange();\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..241577ce 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,56 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove unused function arguments\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    // Initialize a set to store the referenced variables in the function's scope.\n+    Set<Var> referenced = Sets.newHashSet();\n+    NodeTraversal.traverse(compiler, function, new AbstractScopedCallback() {\n+        @Override\n+        public void enterScope(NodeTraversal t) {\n+            // Use this opportunity to add all free variables in this scope to \"referenced\".\n+            for (Var v : t.getScope().getVarIterable()) {\n+                if (!v.isLocal() && v.isReferenced()) {\n+                    referenced.add(v);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void exitScope(NodeTraversal t) {\n+        }\n+    });\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+        int numArgs = argList.getChildCount();\n+        for (int i = 0; i < numArgs; i++) {\n+            Node arg = argList.getChildAtIndex(i);\n+            Var var = fnScope.getVar(arg.getString());\n+\n+            // Check whether the argument is referenced\n+            if (!referenced.contains(var)) {\n+                arg.detach();\n+                numArgs--;\n+                i--;\n+                compiler.reportCodeChange();\n+            }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}