{
    "patch": "        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n        long localMillis = instantMillis + offsetMillis;\n        long newOffsetMillis = parser.parseInto(bucket, text, position);\n        if (offsetMillis != newOffsetMillis) {\n            localMillis = instantMillis + newOffsetMillis;\n        }\n        instant.setMillis(localMillis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..6bb304d5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,13 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n+        long localMillis = instantMillis + offsetMillis;\n+        long newOffsetMillis = parser.parseInto(bucket, text, position);\n+        if (offsetMillis != newOffsetMillis) {\n+            localMillis = instantMillis + newOffsetMillis;\n+        }\n+        instant.setMillis(localMillis);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}