{
    "patch": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Values {\n    Map<Class<?>,Object> map = new HashMap<Class<?>,Object>();\n\n    public <T> void addReturnValue(Class<T> clazz, T returnValue){\n        map.put(clazz, returnValue);\n    }\n\n    public <T> T returnValueFor(Class<T> clazz){\n        return clazz.cast(map.get(clazz));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8206f6357 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class Values {\n+    Map<Class<?>,Object> map = new HashMap<Class<?>,Object>();\n+\n+    public <T> void addReturnValue(Class<T> clazz, T returnValue){\n+        map.put(clazz, returnValue);\n+    }\n+\n+    public <T> T returnValueFor(Class<T> clazz){\n+        return clazz.cast(map.get(clazz));\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}