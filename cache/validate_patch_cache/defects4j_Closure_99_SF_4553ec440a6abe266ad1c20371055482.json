{
    "patch": "private boolean isPropertyOfMethod(NodeTraversal t, Node n) {\n    Node parent = n.getParent();\n\n    // Check if this is a property of a function or a method in a class\n    if (parent.getType() != Token.MEMBER_FUNCTION_DEF &&\n            parent.getType() != Token.STRING_KEY &&\n            parent.getType() != Token.GETTER_DEF &&\n            parent.getType() != Token.SETTER_DEF) {\n        return false;\n    }\n\n    Node grandparent = parent.getParent();\n\n    // Check if the parent is a class member\n    if (grandparent == null || !grandparent.isClass()) {\n        // Check if this is a property of a regular function\n        if (grandparent != null && grandparent.isFunction()) {\n            JSDocInfo jsDoc = getFunctionJsDocInfo(grandparent);\n            if (jsDoc != null && jsDoc.hasThisType()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    JSDocInfo classJsDoc = getClassJsDocInfo(grandparent);\n\n    // Check if the class is using the `@this` annotation\n    if (classJsDoc != null && classJsDoc.getThisType() != null) {\n        return true;\n    }\n\n    // Check if this property is a member of an inner class\n    Node functionParent = NodeUtil.getEnclosingFunction(n);\n    while (functionParent != null) {\n        if (functionParent.isClass()) {\n            JSDocInfo innerClassJsDoc = getClassJsDocInfo(functionParent);\n            if (innerClassJsDoc != null && innerClassJsDoc.getThisType() != null) {\n                return true;\n            }\n        }\n        functionParent = NodeUtil.getEnclosingFunction(functionParent.getParent());\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..14b5b582 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,52 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+private boolean isPropertyOfMethod(NodeTraversal t, Node n) {\n+    Node parent = n.getParent();\n+\n+    // Check if this is a property of a function or a method in a class\n+    if (parent.getType() != Token.MEMBER_FUNCTION_DEF &&\n+            parent.getType() != Token.STRING_KEY &&\n+            parent.getType() != Token.GETTER_DEF &&\n+            parent.getType() != Token.SETTER_DEF) {\n         return false;\n-      }\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+    Node grandparent = parent.getParent();\n+\n+    // Check if the parent is a class member\n+    if (grandparent == null || !grandparent.isClass()) {\n+        // Check if this is a property of a regular function\n+        if (grandparent != null && grandparent.isFunction()) {\n+            JSDocInfo jsDoc = getFunctionJsDocInfo(grandparent);\n+            if (jsDoc != null && jsDoc.hasThisType()) {\n+                return true;\n+            }\n+        }\n         return false;\n-      }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    JSDocInfo classJsDoc = getClassJsDocInfo(grandparent);\n+\n+    // Check if the class is using the `@this` annotation\n+    if (classJsDoc != null && classJsDoc.getThisType() != null) {\n+        return true;\n+    }\n+\n+    // Check if this property is a member of an inner class\n+    Node functionParent = NodeUtil.getEnclosingFunction(n);\n+    while (functionParent != null) {\n+        if (functionParent.isClass()) {\n+            JSDocInfo innerClassJsDoc = getClassJsDocInfo(functionParent);\n+            if (innerClassJsDoc != null && innerClassJsDoc.getThisType() != null) {\n+                return true;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n+        functionParent = NodeUtil.getEnclosingFunction(functionParent.getParent());\n     }\n \n-    return true;\n-  }\n+    return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: CheckGlobalThis is not abstract and does not override abstract method shouldTraverse(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}