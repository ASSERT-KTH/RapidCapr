{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> validProperties = Sets.newHashSet();\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null || !val.isObjectLit()) {\n          // We're looking for object literal assignments only.\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          validProperties.add(child.getString());\n\n          Node childVal = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // Rename object literal properties in name collisions.\n        Scope scope = ref.getScope();\n        if (scope != null) {\n          List<String> renamedVars = new ArrayList<>();\n          for (Node child = val.getFirstChild(); child != null;\n              child = child.getNext()) {\n            String propName = child.getString();\n            if (validProperties.contains(propName)) {\n              String newName = scope.getUniqueName(propName + \"_\");\n              child.setString(newName);\n              renamedVars.add(newName);\n              validProperties.add(newName);\n            } else {\n              validProperties.add(propName);\n            }\n          }\n\n          // Update all references to renamed properties.\n          for (Reference t : refs) {\n            Node refNode = t.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              Node refName = null;\n              if (refNode.isGetProp()\n                  && (refName = refNode.getFirstChild()).getString()\n                         .equals(child.getString())) {\n                String newName = renamedVars.get(0);\n                refName.setString(newName);\n                renamedVars.remove(newName);\n                if (renamedVars.isEmpty()) {\n                  break;\n                }\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..823e03a3 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,102 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+    private boolean isInlinableObject(List<Reference> refs) {\n+      boolean ret = false;\n+      Set<String> validProperties = Sets.newHashSet();\n+      for (Reference ref : refs) {\n+        Node name = ref.getNode();\n+        Node parent = ref.getParent();\n+        Node gramps = ref.getGrandparent();\n+\n+        if (!isVarOrAssignExprLhs(name)) {\n+           return false;\n+        }\n+\n+        Node val = ref.getAssignedValue();\n+        if (val == null || !val.isObjectLit()) {\n+          // We're looking for object literal assignments only.\n+          return false;\n+        }\n+\n+        // Make sure that the value is not self-referential. IOW,\n+        // disallow things like x = {b: x.a}.\n+        //\n+        // TODO: Only exclude unorderable self-referential\n+        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+        // but x = {a: 1, b: x.a} is.\n+        //\n+        // Also, ES5 getters/setters aren't handled by this pass.\n+        for (Node child = val.getFirstChild(); child != null;\n+             child = child.getNext()) {\n+          if (child.isGetterDef() ||\n+              child.isSetterDef()) {\n+            // ES5 get/set not supported.\n+            return false;\n+          }\n+\n+          validProperties.add(child.getString());\n+\n+          Node childVal = child.getFirstChild();\n+          // Check if childVal is the parent of any of the passed in\n+          // references, as that is how self-referential assignments\n+          // will happen.\n+          for (Reference t : refs) {\n+            Node refNode = t.getParent();\n+            while (!NodeUtil.isStatementBlock(refNode)) {\n+              if (refNode == childVal) {\n+                // There's a self-referential assignment\n+                return false;\n+              }\n+              refNode = refNode.getParent();\n+            }\n+          }\n+        }\n+\n+        // Rename object literal properties in name collisions.\n+        Scope scope = ref.getScope();\n+        if (scope != null) {\n+          List<String> renamedVars = new ArrayList<>();\n+          for (Node child = val.getFirstChild(); child != null;\n+              child = child.getNext()) {\n+            String propName = child.getString();\n+            if (validProperties.contains(propName)) {\n+              String newName = scope.getUniqueName(propName + \"_\");\n+              child.setString(newName);\n+              renamedVars.add(newName);\n+              validProperties.add(newName);\n+            } else {\n+              validProperties.add(propName);\n+            }\n+          }\n+\n+          // Update all references to renamed properties.\n+          for (Reference t : refs) {\n+            Node refNode = t.getParent();\n+            while (!NodeUtil.isStatementBlock(refNode)) {\n+              Node refName = null;\n+              if (refNode.isGetProp()\n+                  && (refName = refNode.getFirstChild()).getString()\n+                         .equals(child.getString())) {\n+                String newName = renamedVars.get(0);\n+                refName.setString(newName);\n+                renamedVars.remove(newName);\n+                if (renamedVars.isEmpty()) {\n+                  break;\n+                }\n+              }\n+              refNode = refNode.getParent();\n+            }\n+          }\n+        }\n+\n+        // We have found an acceptable object literal assignment. As\n+        // long as there are no other assignments that mess things up,\n+        // we can inline.\n+        ret = true;\n+      }\n+      return ret;\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}