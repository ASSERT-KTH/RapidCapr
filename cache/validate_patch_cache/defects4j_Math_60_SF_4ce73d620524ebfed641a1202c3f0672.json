{
    "patch": "        if (Double.isNaN(x)) {\n            throw new MathException(\"Input argument is NaN\");\n        }\n        if (x < mean - 40 * standardDeviation) {\n            return 0.0;\n        } else if (x > mean + 40 * standardDeviation) {\n            return 1.0;\n        } else {\n            final double dev = x - mean;\n            try {\n                final double ret = 0.5 * Erf.erfc(-dev / (standardDeviation * FastMath.sqrt(2)));\n                if (Double.isNaN(ret)) {\n                    throw new MathException(\"cdf(x) is NaN\");\n                }\n                return ret;\n            } catch (MaxIterationsExceededException ex) {\n                throw new MathException(ex);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..763146c34 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,25 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n+        if (Double.isNaN(x)) {\n+            throw new MathException(\"Input argument is NaN\");\n+        }\n+        if (x < mean - 40 * standardDeviation) {\n+            return 0.0;\n+        } else if (x > mean + 40 * standardDeviation) {\n+            return 1.0;\n+        } else {\n+            final double dev = x - mean;\n+            try {\n+                final double ret = 0.5 * Erf.erfc(-dev / (standardDeviation * FastMath.sqrt(2)));\n+                if (Double.isNaN(ret)) {\n+                    throw new MathException(\"cdf(x) is NaN\");\n+                }\n+                return ret;\n+            } catch (MaxIterationsExceededException ex) {\n+                throw new MathException(ex);\n             }\n         }\n-    }\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}