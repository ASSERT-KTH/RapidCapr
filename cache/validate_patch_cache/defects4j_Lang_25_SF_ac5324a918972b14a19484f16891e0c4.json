{
    "patch": "public static String unescapeJava(String input) {\n    if (input == null || input.indexOf('\\\\') == -1) {\n        return input;\n    }\n\n    StringBuilder output = new StringBuilder(input.length());\n\n    for (int i = 0; i < input.length(); i++) {\n        char currentChar = input.charAt(i);\n        if (currentChar == '\\\\') {\n            if (i < input.length() - 1) {\n                i++;\n                currentChar = input.charAt(i);\n                switch (currentChar) {\n                    case 'b':\n                        output.append('\\b');\n                        break;\n                    case 't':\n                        output.append('\\t');\n                        break;\n                    case 'n':\n                        output.append('\\n');\n                        break;\n                    case 'f':\n                        output.append('\\f');\n                        break;\n                    case 'r':\n                        output.append('\\r');\n                        break;\n                    case '\\\"':\n                        output.append('\\\"');\n                        break;\n                    case '\\'':\n                        output.append('\\'');\n                        break;\n                    case '\\\\':\n                        output.append('\\\\');\n                        break;\n                    case 'u':\n                        if (i < input.length() - 5) {\n                            int codePoint = Integer.parseInt(input.substring(i + 1, i + 5), 16);\n                            output.append((char) codePoint);\n                            i += 4;\n                        } else {\n                            output.append(\"\\\\u\");\n                        }\n                        break;\n                    default:\n                        output.append(\"\\\\\");\n                        output.append(currentChar);\n                        break;\n                }\n            } else {\n                output.append('\\\\');\n            }\n        } else {\n            output.append(currentChar);\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..bc52e0a7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,67 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String input) {\n+    if (input == null || input.indexOf('\\\\') == -1) {\n+        return input;\n+    }\n+\n+    StringBuilder output = new StringBuilder(input.length());\n+\n+    for (int i = 0; i < input.length(); i++) {\n+        char currentChar = input.charAt(i);\n+        if (currentChar == '\\\\') {\n+            if (i < input.length() - 1) {\n+                i++;\n+                currentChar = input.charAt(i);\n+                switch (currentChar) {\n+                    case 'b':\n+                        output.append('\\b');\n+                        break;\n+                    case 't':\n+                        output.append('\\t');\n+                        break;\n+                    case 'n':\n+                        output.append('\\n');\n+                        break;\n+                    case 'f':\n+                        output.append('\\f');\n+                        break;\n+                    case 'r':\n+                        output.append('\\r');\n+                        break;\n+                    case '\\\"':\n+                        output.append('\\\"');\n+                        break;\n+                    case '\\'':\n+                        output.append('\\'');\n+                        break;\n+                    case '\\\\':\n+                        output.append('\\\\');\n+                        break;\n+                    case 'u':\n+                        if (i < input.length() - 5) {\n+                            int codePoint = Integer.parseInt(input.substring(i + 1, i + 5), 16);\n+                            output.append((char) codePoint);\n+                            i += 4;\n+                        } else {\n+                            output.append(\"\\\\u\");\n+                        }\n+                        break;\n+                    default:\n+                        output.append(\"\\\\\");\n+                        output.append(currentChar);\n+                        break;\n+                }\n+            } else {\n+                output.append('\\\\');\n+            }\n+        } else {\n+            output.append(currentChar);\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}