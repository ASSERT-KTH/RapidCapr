{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.VAR:\n        case Token.LET:\n        case Token.CONST:\n          defineVar(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n      }\n\n      if (n.getType() == Token.PARAM_LIST && NodeUtil.isFunctionExpression(parent)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..b19290cc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,18 +1451,19 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n           defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n         case Token.VAR:\n+        case Token.LET:\n+        case Token.CONST:\n           defineVar(n, parent);\n           break;\n+        case Token.CATCH:\n+          defineCatch(n, parent);\n+          break;\n       }\n+\n+      if (n.getType() == Token.PARAM_LIST && NodeUtil.isFunctionExpression(parent)) {\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}