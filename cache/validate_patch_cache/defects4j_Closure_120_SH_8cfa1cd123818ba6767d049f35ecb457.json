{
    "patch": "else if (maybeDecl.isFunctionDeclaration()) {\n    // Function declarations are also initializing declarations.\n    Reference maybeInit = references.get(index);\n    if (maybeInit.isFunctionExpression()) {\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..33d68092 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+else if (maybeDecl.isFunctionDeclaration()) {\n+    // Function declarations are also initializing declarations.\n+    Reference maybeInit = references.get(index);\n+    if (maybeInit.isFunctionExpression()) {\n+        return true;\n+    }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}