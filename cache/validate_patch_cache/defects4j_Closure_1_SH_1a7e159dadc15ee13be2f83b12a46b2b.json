{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Collect the set of unused arguments.\n    int numUnusedArgs = 0;\n    int numArgs = 0;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext(), numArgs++) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        numUnusedArgs = numArgs + 1;\n      } else {\n        numUnusedArgs = 0;\n      }\n    }\n\n    if (numUnusedArgs > 0) {\n      // It's possible that an unused argument is actually a reference to an argument\n      // whose name collided with the unused argument's name. Since renaming is\n      // forbidden, we'll remove the unused argument and let the simulator sort that out.\n      while (numUnusedArgs-- > 0) {\n        argList.removeChild(argList.getLastChild());\n        compiler.reportCodeChange();\n      }\n    }\n    \n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c17452ff 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Collect the set of unused arguments.\n+    int numUnusedArgs = 0;\n+    int numArgs = 0;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext(), numArgs++) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        numUnusedArgs = numArgs + 1;\n+      } else {\n+        numUnusedArgs = 0;\n+      }\n+    }\n+\n+    if (numUnusedArgs > 0) {\n+      // It's possible that an unused argument is actually a reference to an argument\n+      // whose name collided with the unused argument's name. Since renaming is\n+      // forbidden, we'll remove the unused argument and let the simulator sort that out.\n+      while (numUnusedArgs-- > 0) {\n+        argList.removeChild(argList.getLastChild());\n+        compiler.reportCodeChange();\n+      }\n+    }\n+    \n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}