{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null) {\n          if (grandparent.getType() == Token.ASSIGN) {\n            Node assignParent = grandparent.getParent();\n            if (assignParent != null && assignParent.getType() == Token.EXPR_RESULT) {\n              Node callParent = assignParent.getParent();\n              if (callParent != null && callParent.getType() == Token.CALL) {\n                Node callee = callParent.getFirstChild();\n                if (callee.getType() == Token.GETPROP &&\n                    callee.getLastChild().getString().equals(\"prototype\")) {\n                  return false;\n                }\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7997a691 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null) {\n+          if (grandparent.getType() == Token.ASSIGN) {\n+            Node assignParent = grandparent.getParent();\n+            if (assignParent != null && assignParent.getType() == Token.EXPR_RESULT) {\n+              Node callParent = assignParent.getParent();\n+              if (callParent != null && callParent.getType() == Token.CALL) {\n+                Node callee = callParent.getFirstChild();\n+                if (callee.getType() == Token.GETPROP &&\n+                    callee.getLastChild().getString().equals(\"prototype\")) {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}