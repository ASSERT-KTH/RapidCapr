{
    "patch": "public String getProperty(String key) {\n  String value = null;\n  InputStream inputStream = null;\n  try {\n    Properties prop = new Properties();\n    String propFileName = \"config.properties\";\n    inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n    if (inputStream != null) {\n      prop.load(inputStream);\n    } else {\n      throw new FileNotFoundException(\"Property file '\" + propFileName + \"' not found in the classpath\");\n    }\n    value = prop.getProperty(key);\n  } catch (Exception e) {\n    System.out.println(\"Exception: \" + e);\n  } finally {\n    try {\n      inputStream.close();\n    } catch (IOException e) {\n      System.out.println(\"Exception: \" + e);\n    }\n  }\n  return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..898de55a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String key) {\n+  String value = null;\n+  InputStream inputStream = null;\n+  try {\n+    Properties prop = new Properties();\n+    String propFileName = \"config.properties\";\n+    inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n+    if (inputStream != null) {\n+      prop.load(inputStream);\n+    } else {\n+      throw new FileNotFoundException(\"Property file '\" + propFileName + \"' not found in the classpath\");\n+    }\n+    value = prop.getProperty(key);\n+  } catch (Exception e) {\n+    System.out.println(\"Exception: \" + e);\n+  } finally {\n+    try {\n+      inputStream.close();\n+    } catch (IOException e) {\n+      System.out.println(\"Exception: \" + e);\n+    }\n+  }\n+  return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}