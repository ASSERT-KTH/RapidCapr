{
    "patch": "public boolean hasSameMethod(Invocation candidate) {\n    if (invocation == null || candidate == null) {\n        return false;\n    }\n\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    if (!m1.getName().equals(m2.getName())) {\n        return false;\n    }\n\n    Class<?>[] m1Params = m1.getParameterTypes();\n    Class<?>[] m2Params = m2.getParameterTypes();\n\n    if (m1Params.length != m2Params.length) {\n        return false;\n    }\n\n    for (int i = 0; i < m1Params.length; i++) {\n        if (m1Params[i] != m2Params[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..a124defc5 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,15 +89,33 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+public boolean hasSameMethod(Invocation candidate) {\n+    if (invocation == null || candidate == null) {\n+        return false;\n+    }\n+\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+\n+    if (!m1.getName().equals(m2.getName())) {\n+        return false;\n+    }\n+\n+    Class<?>[] m1Params = m1.getParameterTypes();\n+    Class<?>[] m2Params = m2.getParameterTypes();\n+\n+    if (m1Params.length != m2Params.length) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < m1Params.length; i++) {\n+        if (m1Params[i] != m2Params[i]) {\n+            return false;\n+        }\n     }\n+\n+    return true;\n+}\n     \n     public Location getLocation() {\n         return invocation.getLocation();\n@@ -126,4 +144,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}