{
    "patch": "            // Ignore exception if we are trying to reset fields\n            if (resetFields) {\n                throw e;\n            }\n            \n            // Find the invalid field\n            String fieldName = e.getDateTimeFieldType().getName();\n            for (int i = 0; i < count; i++) {\n                if (fieldName.equals(savedFields[i].iField.getName())) {\n                    // Reset the value and try again\n                    savedFields[i].initPartial(iChrono);\n                    savedFields[i].setValue(iDefaultYear);\n                    return computeMillis(true, text);\n                }\n            }\n            \n            // Couldn't find the invalid field - rethrow the exception",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..975e7c5a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // Ignore exception if we are trying to reset fields\n+            if (resetFields) {\n+                throw e;\n+            }\n+            \n+            // Find the invalid field\n+            String fieldName = e.getDateTimeFieldType().getName();\n+            for (int i = 0; i < count; i++) {\n+                if (fieldName.equals(savedFields[i].iField.getName())) {\n+                    // Reset the value and try again\n+                    savedFields[i].initPartial(iChrono);\n+                    savedFields[i].setValue(iDefaultYear);\n+                    return computeMillis(true, text);\n+                }\n+            }\n+            \n+            // Couldn't find the invalid field - rethrow the exception\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}