{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n      int colIndex = columnLabels.indexOf(\"x\" + i);\n      if (colIndex < 0) {\n        coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n        continue;\n      }\n      Integer basicRow = getBasicRow(colIndex);\n      if (basicRow == null) {\n        coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n      } else {\n        if (basicRows.contains(basicRow)) {\n          coefficients[i] = 0;\n        } else {\n          basicRows.add(basicRow);\n          coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n        }\n\n        int j = i + 1;\n        while(j < coefficients.length) {\n          int colIndex2 = columnLabels.indexOf(\"x\" + j);\n          if (colIndex2 < 0) {\n            coefficients[j] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n            j++;\n            continue;\n          }\n          Integer basicRow2 = getBasicRow(colIndex2);\n          if (basicRow2 != null && basicRow2.equals(basicRow)) {\n            coefficients[j] = 0;\n          } else {\n            coefficients[j] = (basicRow2 == null ? 0 - (restrictToNonNegative ? 0 : mostNegative)\n                                    : getEntry(basicRow2, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);\n          }\n          j++;\n        }\n      }\n    }\n    // If the optimal solution contains an unconstrained negative variable, the value should be negative infinity.\n    if (negativeVarBasicRow != null) {\n      double rhsValue = getEntry(negativeVarBasicRow, getRhsOffset());\n      if (rhsValue < 0) {\n        for (int i = 0; i < coefficients.length; i++) {\n          if (columnLabels.indexOf(\"x\" + i) == negativeVarColumn) {\n            coefficients[i] = Double.NEGATIVE_INFINITY;\n            break;\n          }\n        }\n      }\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..4c4a2853f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,37 +393,67 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+\n+    Set<Integer> basicRows = new HashSet<Integer>();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    for (int i = 0; i < coefficients.length; i++) {\n+      int colIndex = columnLabels.indexOf(\"x\" + i);\n+      if (colIndex < 0) {\n+        coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+        continue;\n+      }\n+      Integer basicRow = getBasicRow(colIndex);\n+      if (basicRow == null) {\n+        coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+      } else {\n+        if (basicRows.contains(basicRow)) {\n+          coefficients[i] = 0;\n+        } else {\n+          basicRows.add(basicRow);\n+          coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                  (restrictToNonNegative ? 0 : mostNegative);\n+        }\n+\n+        int j = i + 1;\n+        while(j < coefficients.length) {\n+          int colIndex2 = columnLabels.indexOf(\"x\" + j);\n+          if (colIndex2 < 0) {\n+            coefficients[j] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+            j++;\n             continue;\n           }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+          Integer basicRow2 = getBasicRow(colIndex2);\n+          if (basicRow2 != null && basicRow2.equals(basicRow)) {\n+            coefficients[j] = 0;\n           } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+            coefficients[j] = (basicRow2 == null ? 0 - (restrictToNonNegative ? 0 : mostNegative)\n+                                    : getEntry(basicRow2, getRhsOffset())) -\n+                    (restrictToNonNegative ? 0 : mostNegative);\n+          }\n+          j++;\n+        }\n+      }\n+    }\n+    // If the optimal solution contains an unconstrained negative variable, the value should be negative infinity.\n+    if (negativeVarBasicRow != null) {\n+      double rhsValue = getEntry(negativeVarBasicRow, getRhsOffset());\n+      if (rhsValue < 0) {\n+        for (int i = 0; i < coefficients.length; i++) {\n+          if (columnLabels.indexOf(\"x\" + i) == negativeVarColumn) {\n+            coefficients[i] = Double.NEGATIVE_INFINITY;\n+            break;\n           }\n+        }\n       }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n \n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}