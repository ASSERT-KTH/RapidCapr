{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap, this happens naturally for positive offsets, but not for negative\n        boolean isNegativeOffset = offsetAdjusted < offsetLocal; // Indicates if current DST transition is spring or autumn\n        if (isNegativeOffset) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            // For autumn DST transition, we need to compare previous local transition with previous adjusted transition\n            if (prevLocal != prevAdjusted) {\n                int prevAdjustOffset = getOffset(prevAdjusted);\n                if (prevAdjustOffset < offsetAdjusted) {\n                    // If previous adjusted transition has a smaller offset, then return original offset\n                    return offsetAdjusted;\n                } else {\n                    // If previous adjusted transition has a same or greater offset, then we need to \n                    // get previous transition in local time zone till we find an compatible offset for\n                    // which next adjusted transition has Same or Greater offset. \n                    do {\n                        prevLocal = previousTransition(prevLocal);\n                        if (prevLocal == prevAdjusted) {\n                            // This condition will be true if it reaches the already calculated transition (prevAdjusted)\n                            return offsetAdjusted;\n                        }\n                    } while (getOffset(prevLocal) < offsetLocal);\n                    long nextPrevLocal = nextTransition(prevLocal);\n                    long nextPrevAdjusted = nextTransition(prevAdjusted);\n                    if (nextPrevLocal != nextPrevAdjusted) {\n                        int nextPrevAdjustedOffset = getOffset(nextPrevAdjusted);\n                        if (nextPrevAdjustedOffset > offsetLocal) {\n                            return nextPrevAdjustedOffset;\n                        } else {\n                            long nextNextPrevLocal = nextTransition(nextPrevLocal);\n                            long nextNextPrevAdjusted = nextTransition(nextPrevAdjusted);\n                            if (nextNextPrevLocal == nextNextPrevAdjusted) {\n                                return offsetLocal;\n                            } else {\n                                int nextNextPrevAdjustedOffset = getOffset(nextNextPrevAdjusted);\n                                if (nextNextPrevAdjustedOffset > offsetLocal) {\n                                    return nextNextPrevAdjustedOffset;\n                                } else {\n                                    return offsetLocal;\n                                }\n                            }\n                        }\n                    } else {\n                        return offsetLocal;\n                    }\n                }\n            }\n        } else {\n            // For spring DST transition, we need to compare next local transition with next adjusted transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                int nextLocalOffset = getOffset(nextLocal);\n                if (nextLocalOffset > offsetLocal) {\n                    // If next local transition has greater offset than original, then return next local offset\n                    return nextLocalOffset;\n                } else {\n                    // If next local transition has same or smaller offset than original, we need to find the next local\n                    // transition where the compatible offset is same or greater than the original offset.\n                    do {\n                        nextLocal = nextTransition(nextLocal);\n                        if (nextLocal == nextAdjusted) {\n                            // This condition will be true if it reaches the already calculated transition (nextAdjusted)\n                            return offsetAdjusted;\n                        }\n                    } while (getOffset(nextLocal) < offsetLocal);\n                    long prevNextLocal = previousTransition(nextLocal);\n                    long prevNextAdjusted = previousTransition(nextAdjusted);\n                    if (prevNextLocal != prevNextAdjusted) {\n                        int prevNextAdjustedOffset = getOffset(prevNextAdjusted);\n                        if (prevNextAdjustedOffset < offsetAdjusted) {\n                            return prevNextAdjustedOffset;\n                        } else {\n                            long prevPrevNextLocal = previousTransition(prevNextLocal);\n                            long prevPrevNextAdjusted = previousTransition(prevNextAdjusted);\n                            if (prevPrevNextLocal == prevPrevNextAdjusted) {\n                                return offsetAdjusted;\n                            } else {\n                                int prevPrevNextAdjustedOffset = getOffset(prevPrevNextAdjusted);\n                                if (prevPrevNextAdjustedOffset < offsetAdjusted) {\n                                    return prevPrevNextAdjustedOffset;\n                                } else {\n                                    return offsetAdjusted;\n                                }\n                            }\n                        }\n                    } else {\n                        return offsetAdjusted;\n                    }\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..53f061da 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,109 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap, this happens naturally for positive offsets, but not for negative\n+        boolean isNegativeOffset = offsetAdjusted < offsetLocal; // Indicates if current DST transition is spring or autumn\n+        if (isNegativeOffset) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            // For autumn DST transition, we need to compare previous local transition with previous adjusted transition\n+            if (prevLocal != prevAdjusted) {\n+                int prevAdjustOffset = getOffset(prevAdjusted);\n+                if (prevAdjustOffset < offsetAdjusted) {\n+                    // If previous adjusted transition has a smaller offset, then return original offset\n+                    return offsetAdjusted;\n+                } else {\n+                    // If previous adjusted transition has a same or greater offset, then we need to \n+                    // get previous transition in local time zone till we find an compatible offset for\n+                    // which next adjusted transition has Same or Greater offset. \n+                    do {\n+                        prevLocal = previousTransition(prevLocal);\n+                        if (prevLocal == prevAdjusted) {\n+                            // This condition will be true if it reaches the already calculated transition (prevAdjusted)\n+                            return offsetAdjusted;\n+                        }\n+                    } while (getOffset(prevLocal) < offsetLocal);\n+                    long nextPrevLocal = nextTransition(prevLocal);\n+                    long nextPrevAdjusted = nextTransition(prevAdjusted);\n+                    if (nextPrevLocal != nextPrevAdjusted) {\n+                        int nextPrevAdjustedOffset = getOffset(nextPrevAdjusted);\n+                        if (nextPrevAdjustedOffset > offsetLocal) {\n+                            return nextPrevAdjustedOffset;\n+                        } else {\n+                            long nextNextPrevLocal = nextTransition(nextPrevLocal);\n+                            long nextNextPrevAdjusted = nextTransition(nextPrevAdjusted);\n+                            if (nextNextPrevLocal == nextNextPrevAdjusted) {\n+                                return offsetLocal;\n+                            } else {\n+                                int nextNextPrevAdjustedOffset = getOffset(nextNextPrevAdjusted);\n+                                if (nextNextPrevAdjustedOffset > offsetLocal) {\n+                                    return nextNextPrevAdjustedOffset;\n+                                } else {\n+                                    return offsetLocal;\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n+        } else {\n+            // For spring DST transition, we need to compare next local transition with next adjusted transition\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                int nextLocalOffset = getOffset(nextLocal);\n+                if (nextLocalOffset > offsetLocal) {\n+                    // If next local transition has greater offset than original, then return next local offset\n+                    return nextLocalOffset;\n+                } else {\n+                    // If next local transition has same or smaller offset than original, we need to find the next local\n+                    // transition where the compatible offset is same or greater than the original offset.\n+                    do {\n+                        nextLocal = nextTransition(nextLocal);\n+                        if (nextLocal == nextAdjusted) {\n+                            // This condition will be true if it reaches the already calculated transition (nextAdjusted)\n+                            return offsetAdjusted;\n+                        }\n+                    } while (getOffset(nextLocal) < offsetLocal);\n+                    long prevNextLocal = previousTransition(nextLocal);\n+                    long prevNextAdjusted = previousTransition(nextAdjusted);\n+                    if (prevNextLocal != prevNextAdjusted) {\n+                        int prevNextAdjustedOffset = getOffset(prevNextAdjusted);\n+                        if (prevNextAdjustedOffset < offsetAdjusted) {\n+                            return prevNextAdjustedOffset;\n+                        } else {\n+                            long prevPrevNextLocal = previousTransition(prevNextLocal);\n+                            long prevPrevNextAdjusted = previousTransition(prevNextAdjusted);\n+                            if (prevPrevNextLocal == prevPrevNextAdjusted) {\n+                                return offsetAdjusted;\n+                            } else {\n+                                int prevPrevNextAdjustedOffset = getOffset(prevPrevNextAdjusted);\n+                                if (prevPrevNextAdjustedOffset < offsetAdjusted) {\n+                                    return prevPrevNextAdjustedOffset;\n+                                } else {\n+                                    return offsetAdjusted;\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}