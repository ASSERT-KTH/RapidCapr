{
    "patch": "@Override\npublic ReturnValue apply(TestCase input) {\n    List<Integer> values = input.getIntList(\"values\");\n    int target = input.getInt(\"target\");\n\n    // Your code here\n    int length = values.size(); \n    int value1 = 0;     \n    int value2 = 0;\n\n    for (int i = 0; i < length; i++) {\n        for (int j = i + 1; j < length; j++) {\n            if (values.get(i) + values.get(j) == target) {\n                value1 = values.get(i);\n                value2 = values.get(j);\n                break;\n            }\n        }\n    }\n\n    if (value1 == 0 && value2 == 0) {\n        return ReturnValue.builder()\n                .setBoolean(false)\n                .build();\n    } else {\n        return ReturnValue.builder()\n                .setBoolean(true)\n                .setInt(\"value1\", value1)\n                .setInt(\"value2\", value2)\n                .build();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}