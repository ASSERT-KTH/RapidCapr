{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName()\n            && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n\n      // This no-op statement was there so that JSDoc information could\n      // be attached to the name. This check should not complain about it.\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4\n        && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n      } else {\n        return;\n      }\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      }\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString() && (isFirstNodeInStatement(n, parent) || isFirstNodeInStatement(parent, parent.getParent()))) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n      }\n\n      Compiler compiler = t.getCompiler();\n      JSError error = compiler.getInput(n.getInputId()).getSourceFile().getName().endsWith(\".mjs\")\n              ? compiler.getErrorHandler().createSingleWarningMessage(msg, n)\n              : t.makeError(n, level, USELESS_CODE_ERROR, msg);\n      compiler.report(error);\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n\n  private boolean isFirstNodeInStatement(Node n, Node parent) {\n    checkNotNull(n);\n    checkNotNull(parent);\n\n    if (n.isFirstInStatement()) {\n      return true;\n    }\n\n    Node previous = n.getPrevious();\n    if (parent.isSwitch() && previous == null) {\n      return true;\n    }\n\n    // Due to function hoisting\n    if (previous != null && NodeUtil.isFunctionDeclaration(previous)) {\n      previous = previous.getPrevious();\n    }\n\n    return previous == null || previous.isBlock() || parent.isCase();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..74b64c26 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,13 +81,12 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    if (n.isEmpty() || n.isComma()) {\n       return;\n     }\n \n@@ -101,51 +100,50 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     if (parent.getType() == Token.COMMA) {\n       Node gramps = parent.getParent();\n       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName()\n+            && \"eval\".equals(n.getNext().getString())) {\n+          return;\n         }\n-    }\n+      }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n+      // This no-op statement was there so that JSDoc information could\n+      // be attached to the name. This check should not complain about it.\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n+      if (parent.getType() == Token.FOR && parent.getChildCount() == 4\n+        && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n       } else {\n-      return;\n+        return;\n       }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n         return;\n       } else if (n.isExprResult()) {\n         return;\n       }\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n+      if (n.isString() && (isFirstNodeInStatement(n, parent) || isFirstNodeInStatement(parent, parent.getParent()))) {\n         msg = \"Is there a missing '+' on the previous line?\";\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      Compiler compiler = t.getCompiler();\n+      JSError error = compiler.getInput(n.getInputId()).getSourceFile().getName().endsWith(\".mjs\")\n+              ? compiler.getErrorHandler().createSingleWarningMessage(msg, n)\n+              : t.makeError(n, level, USELESS_CODE_ERROR, msg);\n+      compiler.report(error);\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {\n@@ -154,6 +152,26 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     }\n   }\n \n+  private boolean isFirstNodeInStatement(Node n, Node parent) {\n+    checkNotNull(n);\n+    checkNotNull(parent);\n+\n+    if (n.isFirstInStatement()) {\n+      return true;\n+    }\n+\n+    Node previous = n.getPrevious();\n+    if (parent.isSwitch() && previous == null) {\n+      return true;\n+    }\n+\n+    // Due to function hoisting\n+    if (previous != null && NodeUtil.isFunctionDeclaration(previous)) {\n+      previous = previous.getPrevious();\n+    }\n+\n+    return previous == null || previous.isBlock() || parent.isCase();\n+\n   /**\n    * Protect side-effect free nodes by making them parameters\n    * to a extern function call.  This call will be removed",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}