{
    "patch": "    if (!constraintObj.isNominalConstructor()) {\n      return;\n    }\n\n    NominalType constructor = constraintObj.nominalType;\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constructor.isRecordType()) {\n      for (String prop : constructor.getOwnPropertyNames()) {\n        JSType propType = constructor.getInstanceProp(prop);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..bfdbf92c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,24 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!constraintObj.isNominalConstructor()) {\n+      return;\n+    }\n+\n+    NominalType constructor = constraintObj.nominalType;\n+\n+    // Handle the case where the constraint object is a record type.\n+    //\n+    // param constraintObj {{prop: (number|undefined)}}\n+    // function f(constraintObj) {}\n+    // f({});\n+    //\n+    // We want to modify the object literal to match the constraint, by\n+    // taking any each property on the record and trying to match\n+    // properties on this object.\n+    if (constructor.isRecordType()) {\n+      for (String prop : constructor.getOwnPropertyNames()) {\n+        JSType propType = constructor.getInstanceProp(prop);\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}