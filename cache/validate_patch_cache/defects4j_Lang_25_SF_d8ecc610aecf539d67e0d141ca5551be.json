{
    "patch": "import java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\n\npublic class StringUtils {\n  \n    public static String iso8859_1_escape(String input) {\n        byte[] bytes = input.getBytes(StandardCharsets.ISO_8859_1);\n        StringBuilder output = new StringBuilder();\n        for (byte b : bytes) {\n            if (b < 0) {\n                int i = b + 256;\n                output.append(\"\\\\\");\n                output.append(Integer.toOctalString(i / 64));\n                output.append(Integer.toOctalString((i / 8) % 8));\n                output.append(Integer.toOctalString(i % 8));\n            } else {\n                char c = (char) b;\n                switch (c) {\n                    case '\\t':\n                        output.append(\"\\\\t\");\n                        break;\n                    case '\\n':\n                        output.append(\"\\\\n\");\n                        break;\n                    case '\\r':\n                        output.append(\"\\\\r\");\n                        break;\n                    case '\\b':\n                        output.append(\"\\\\b\");\n                        break;\n                    case '\\f':\n                        output.append(\"\\\\f\");\n                        break;\n                    case '\\\\':\n                        output.append(\"\\\\\\\\\");\n                        break;\n                    case '\\'':\n                        output.append(\"\\\\'\");\n                        break;\n                    default:\n                        output.append(c);\n                }\n            }\n        }\n        return output.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..224b3e8b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,54 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+  \n+    public static String iso8859_1_escape(String input) {\n+        byte[] bytes = input.getBytes(StandardCharsets.ISO_8859_1);\n+        StringBuilder output = new StringBuilder();\n+        for (byte b : bytes) {\n+            if (b < 0) {\n+                int i = b + 256;\n+                output.append(\"\\\\\");\n+                output.append(Integer.toOctalString(i / 64));\n+                output.append(Integer.toOctalString((i / 8) % 8));\n+                output.append(Integer.toOctalString(i % 8));\n+            } else {\n+                char c = (char) b;\n+                switch (c) {\n+                    case '\\t':\n+                        output.append(\"\\\\t\");\n+                        break;\n+                    case '\\n':\n+                        output.append(\"\\\\n\");\n+                        break;\n+                    case '\\r':\n+                        output.append(\"\\\\r\");\n+                        break;\n+                    case '\\b':\n+                        output.append(\"\\\\b\");\n+                        break;\n+                    case '\\f':\n+                        output.append(\"\\\\f\");\n+                        break;\n+                    case '\\\\':\n+                        output.append(\"\\\\\\\\\");\n+                        break;\n+                    case '\\'':\n+                        output.append(\"\\\\'\");\n+                        break;\n+                    default:\n+                        output.append(c);\n+                }\n+            }\n+        }\n+        return output.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}