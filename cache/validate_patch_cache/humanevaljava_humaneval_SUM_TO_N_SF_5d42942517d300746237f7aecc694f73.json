{
    "patch": "```\npublic static int sum_to_n(int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"n must be a non-negative integer\");\n    }\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n```\nExplanation: This solution simply uses a loop to iterate from 1 up to n and adds up the values of i in each iteration. This approach is easy to understand and avoids the mistake in the original implementation. Also, it does not rely on any complex arithmetic formula or recursion.",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/SUM_TO_N.java b/src/main/java/humaneval/buggy/SUM_TO_N.java\nindex 319b248..3c8db8b 100644\n--- a/src/main/java/humaneval/buggy/SUM_TO_N.java\n+++ b/src/main/java/humaneval/buggy/SUM_TO_N.java\n@@ -13,7 +13,17 @@ package humaneval.buggy;\n 1 */\n \n public class SUM_TO_N {\n-    public static int sum_to_n(int n) {\n-        return (n + 1) * (n / 2);\n+```\n+public static int sum_to_n(int n) {\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"n must be a non-negative integer\");\n     }\n+    int sum = 0;\n+    for (int i = 1; i <= n; i++) {\n+        sum += i;\n+    }\n+    return sum;\n+}\n+```\n+Explanation: This solution simply uses a loop to iterate from 1 up to n and adds up the values of i in each iteration. This approach is easy to understand and avoids the mistake in the original implementation. Also, it does not rely on any complex arithmetic formula or recursion.\n }",
    "result_reason": " /tmp/humaneval-SUM_TO_N/src/main/java/humaneval/buggy/SUM_TO_N.java:[16,1] illegal character: '`'",
    "test_result": "ERROR"
}