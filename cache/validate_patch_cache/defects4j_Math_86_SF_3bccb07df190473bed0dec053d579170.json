{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n            throws NonSquareMatrixException,\n                   NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        final double[][] ltData = matrix.getData();\n        lTData   = ltData;\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            if (ltI[i] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // check off-diagonal elements (and reset them to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double[] ltJ = lTData[j];\n                final double ltIJ = ltI[j];\n                final double ltJI = ltJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * FastMath.max(FastMath.abs(ltIJ), FastMath.abs(ltJI));\n                if (FastMath.abs(ltIJ - ltJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                ltJ[i] = 0;\n           }\n        }\n\n        // transform the matrix\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // check diagonal element\n\n            final double invLii = 1.0 / FastMath.sqrt(ltI[i]);\n            ltI[i] = invLii;\n            final double[] ltJ = lTData[i];\n            for (int j = i + 1; j < order; ++j) {\n                ltJ[j] *= invLii;\n            }\n\n            for (int j = i + 1; j < order; ++j) {\n\n                final double[] ltJ1 = lTData[j];\n                for (int k = j; k < order; ++k) {\n                    ltJ1[k] -= ltJ[i] * ltJ1[j];",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..2a91390ab 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,11 +90,11 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                      final double relativeSymmetryThreshold,\n                                      final double absolutePositivityThreshold)\n-        throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n+            throws NonSquareMatrixException,\n+                   NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n         if (!matrix.isSquare()) {\n             throw new NonSquareMatrixException(matrix.getRowDimension(),\n@@ -102,29 +102,31 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n         }\n \n         final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n+        final double[][] ltData = matrix.getData();\n+        lTData   = ltData;\n         cachedL  = null;\n         cachedLT = null;\n \n         // check the matrix before transformation\n         for (int i = 0; i < order; ++i) {\n \n-            final double[] lI = lTData[i];\n+            final double[] ltI = lTData[i];\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n+            if (ltI[i] <= absolutePositivityThreshold) {\n                 throw new NotPositiveDefiniteMatrixException();\n             }\n+\n             // check off-diagonal elements (and reset them to 0)\n             for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n+                final double[] ltJ = lTData[j];\n+                final double ltIJ = ltI[j];\n+                final double ltJI = ltJ[i];\n                 final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n+                    relativeSymmetryThreshold * FastMath.max(FastMath.abs(ltIJ), FastMath.abs(ltJI));\n+                if (FastMath.abs(ltIJ - ltJI) > maxDelta) {\n                     throw new NotSymmetricMatrixException();\n                 }\n-                lJ[i] = 0;\n+                ltJ[i] = 0;\n            }\n         }\n \n@@ -135,20 +137,18 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n \n             // check diagonal element\n \n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n-\n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n-                }\n+            final double invLii = 1.0 / FastMath.sqrt(ltI[i]);\n+            ltI[i] = invLii;\n+            final double[] ltJ = lTData[i];\n+            for (int j = i + 1; j < order; ++j) {\n+                ltJ[j] *= invLii;\n             }\n \n-        }\n+            for (int j = i + 1; j < order; ++j) {\n \n-    }\n+                final double[] ltJ1 = lTData[j];\n+                for (int k = j; k < order; ++k) {\n+                    ltJ1[k] -= ltJ[i] * ltJ1[j];\n \n     /** {@inheritDoc} */\n     public RealMatrix getL() {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}