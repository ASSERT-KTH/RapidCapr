{
    "patch": "public String getprop(String key) {\n     try {\n         Properties prop = new Properties();\n         InputStream input = null;\n         input = new FileInputStream(\"config.properties\");\n         prop.load(input);\n         input.close();\n         return prop.getProperty(key);\n     } catch (Exception e) {\n         System.out.println(\"Exception: \" + e);\n         return \"\";\n     }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3ab0e4d5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key) {\n+     try {\n+         Properties prop = new Properties();\n+         InputStream input = null;\n+         input = new FileInputStream(\"config.properties\");\n+         prop.load(input);\n+         input.close();\n+         return prop.getProperty(key);\n+     } catch (Exception e) {\n+         System.out.println(\"Exception: \" + e);\n+         return \"\";\n+     }\n+ }\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}