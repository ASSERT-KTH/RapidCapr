{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (!resetFields) {\n                    throw e;\n                }\n                // reset the fields and try again\n                int savedCount = iSavedFieldsCount;\n                SavedField[] savedFields = iSavedFields;\n                iSavedFields = new SavedField[savedCount];\n                iSavedFieldsCount = 0;\n                for (int i = 0; i < savedCount; i++) {\n                    try {\n                        iSavedFields[i] = new SavedField(savedFields[i].iField.getType(),\n                                                          savedFields[i].iValue);\n                    } catch (IllegalArgumentException ex) {\n                        // ignore and skip bad value\n                    }\n                }\n                return computeMillis(false, text);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9c5de509 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (!resetFields) {\n+                    throw e;\n+                }\n+                // reset the fields and try again\n+                int savedCount = iSavedFieldsCount;\n+                SavedField[] savedFields = iSavedFields;\n+                iSavedFields = new SavedField[savedCount];\n+                iSavedFieldsCount = 0;\n+                for (int i = 0; i < savedCount; i++) {\n+                    try {\n+                        iSavedFields[i] = new SavedField(savedFields[i].iField.getType(),\n+                                                          savedFields[i].iValue);\n+                    } catch (IllegalArgumentException ex) {\n+                        // ignore and skip bad value\n+                    }\n+                }\n+                return computeMillis(false, text);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}