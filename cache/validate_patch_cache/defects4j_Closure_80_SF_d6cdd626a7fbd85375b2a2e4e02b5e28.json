{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\n\nimport java.util.function.Predicate;\n\npublic class FixBug {\n    static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n        switch (value.getType()) {\n            case Token.ASSIGN:\n                // A result that is aliased by a non-local name, is the effectively the same as returning a non-local name,\n                // but this doesn't matter if the value is immutable.\n                return NodeUtil.isImmutableValue(value.getLastChild()) ||\n                        (locals.test(value) &&\n                                evaluatesToLocalValue(value.getLastChild(), locals));\n            case Token.COMMA:\n                return evaluatesToLocalValue(value.getLastChild(), locals);\n            case Token.AND:\n            case Token.OR:\n                return evaluatesToLocalValue(value.getFirstChild(), locals)\n                        && evaluatesToLocalValue(value.getLastChild(), locals);\n            case Token.HOOK:\n                return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                        && evaluatesToLocalValue(value.getLastChild(), locals);\n            case Token.INC:\n            case Token.DEC:\n                if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                    return evaluatesToLocalValue(value.getFirstChild(), locals);\n                } else {\n                    return true;\n                }\n            case Token.THIS:\n                return locals.test(value);\n            case Token.NAME:\n                return isImmutableValue(value) || locals.test(value);\n            case Token.GETELEM:\n            case Token.GETPROP:\n                // There is no information about the locality of object properties.\n                return locals.test(value);\n            case Token.CALL:\n                return callHasLocalResult(value) ||\n                        isToStringMethodCall(value) ||\n                        locals.test(value);\n            case Token.NEW:\n                return newHasLocalResult(value) ||\n                        locals.test(value);\n            case Token.FUNCTION:\n            case Token.REGEXP:\n            case Token.ARRAYLIT:\n            case Token.OBJECTLIT:\n                // Literal objects with non-literal children are allowed.\n                return true;\n            case Token.IN:\n                // The 'IN' operator checks if the left-hand side operand is a property of the right-hand side operand.\n                // For example, '1 in [1,2,3]' returns true. Here we check that the right-hand operand\n                // is a local variable or evaluates to a local value.\n                return evaluatesToLocalValue(value.getFirstChild(), locals) &&\n                        evaluatesToLocalValue(value.getLastChild(), locals);\n            default:\n                // Other ops force a local value:\n                // x = '' + g (x is now a local string)\n                // x -= g (x is now a local number)\n                if (isAssignmentOp(value) ||\n                        isSimpleOperator(value) ||\n                        isImmutableValue(value)) {\n                    return true;\n                }\n\n                throw new IllegalStateException(\n                        \"Unexpected expression node \" + value +\n                                \"\\n parent: \" + value.getParent());\n        }\n    }\n\n    static boolean isImmutableValue(Node value) {\n        switch (value.getType()) {\n            case Token.TRUE:\n            case Token.FALSE:\n            case Token.NULL:\n            case Token.NUMBER:\n            case Token.STRING:\n            case Token.NAME:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    static boolean callHasLocalResult(Node value) {\n        Node target = value.getFirstChild();\n        if (target.getType() == Token.GETPROP) {\n            target = target.getFirstChild();\n        }\n        return target.getType() == Token.NAME && \"Number\".equals(target.getString());\n    }\n\n    static boolean newHasLocalResult(Node value) {\n        Node target = value.getFirstChild();\n        return target.getType() == Token.NAME && \"RegExp\".equals(target.getString());\n    }\n\n    static boolean isSimpleOperator(Node n) {\n        switch (n.getType()) {\n            case Token.BITAND:\n            case Token.BITOR:\n            case Token.BITXOR:\n            case Token.DIV:\n            case Token.EQ:\n            case Token.GE:\n            case Token.GT:\n            case Token.INSTANCEOF:\n            case Token.LE:\n            case Token.LSH:\n            case Token.LT:\n            case Token.MOD:\n            case Token.MUL:\n            case Token.NE:\n            case Token.RSH:\n            case Token.SHEQ:\n            case Token.SHNE:\n            case Token.SUB:\n            case Token.URSH:\n            case Token.VOID:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    static boolean isAssignmentOp(Node n) {\n        switch (n.getType()) {\n            case Token.ASSIGN:\n            case Token.ASSIGN_ADD:\n            case Token.ASSIGN_BITAND:\n            case Token.ASSIGN_BITOR:\n            case Token.ASSIGN_BITXOR:\n            case Token.ASSIGN_DIV:\n            case Token.ASSIGN_LSH:\n            case Token.ASSIGN_MOD:\n            case Token.ASSIGN_MUL:\n            case Token.ASSIGN_RSH:\n            case Token.ASSIGN_SUB:\n            case Token.ASSIGN_URSH:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    static boolean isToStringMethodCall(Node value) {\n        if (value.getType() != Token.CALL) {\n            return false;\n        }\n        Node target = value.getFirstChild();\n        return target.getType() == Token.GETPROP &&\n                target.getLastChild().getString().equals(\"toString\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..95eb89ee 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,163 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n-        return true;\n-      default:\n-        return false;\n-    }\n-  }\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n \n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+import java.util.function.Predicate;\n+\n+public class FixBug {\n+    static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+        switch (value.getType()) {\n+            case Token.ASSIGN:\n+                // A result that is aliased by a non-local name, is the effectively the same as returning a non-local name,\n+                // but this doesn't matter if the value is immutable.\n+                return NodeUtil.isImmutableValue(value.getLastChild()) ||\n+                        (locals.test(value) &&\n+                                evaluatesToLocalValue(value.getLastChild(), locals));\n+            case Token.COMMA:\n+                return evaluatesToLocalValue(value.getLastChild(), locals);\n+            case Token.AND:\n+            case Token.OR:\n+                return evaluatesToLocalValue(value.getFirstChild(), locals)\n+                        && evaluatesToLocalValue(value.getLastChild(), locals);\n+            case Token.HOOK:\n+                return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+                        && evaluatesToLocalValue(value.getLastChild(), locals);\n+            case Token.INC:\n+            case Token.DEC:\n+                if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+                    return evaluatesToLocalValue(value.getFirstChild(), locals);\n+                } else {\n+                    return true;\n+                }\n+            case Token.THIS:\n+                return locals.test(value);\n+            case Token.NAME:\n+                return isImmutableValue(value) || locals.test(value);\n+            case Token.GETELEM:\n+            case Token.GETPROP:\n+                // There is no information about the locality of object properties.\n+                return locals.test(value);\n+            case Token.CALL:\n+                return callHasLocalResult(value) ||\n+                        isToStringMethodCall(value) ||\n+                        locals.test(value);\n+            case Token.NEW:\n+                return newHasLocalResult(value) ||\n+                        locals.test(value);\n+            case Token.FUNCTION:\n+            case Token.REGEXP:\n+            case Token.ARRAYLIT:\n+            case Token.OBJECTLIT:\n+                // Literal objects with non-literal children are allowed.\n+                return true;\n+            case Token.IN:\n+                // The 'IN' operator checks if the left-hand side operand is a property of the right-hand side operand.\n+                // For example, '1 in [1,2,3]' returns true. Here we check that the right-hand operand\n+                // is a local variable or evaluates to a local value.\n+                return evaluatesToLocalValue(value.getFirstChild(), locals) &&\n+                        evaluatesToLocalValue(value.getLastChild(), locals);\n+            default:\n+                // Other ops force a local value:\n+                // x = '' + g (x is now a local string)\n+                // x -= g (x is now a local number)\n+                if (isAssignmentOp(value) ||\n+                        isSimpleOperator(value) ||\n+                        isImmutableValue(value)) {\n+                    return true;\n+                }\n+\n+                throw new IllegalStateException(\n+                        \"Unexpected expression node \" + value +\n+                                \"\\n parent: \" + value.getParent());\n+        }\n     }\n-    return false;\n-  }\n-\n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n-\n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n-  }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+    static boolean isImmutableValue(Node value) {\n+        switch (value.getType()) {\n+            case Token.TRUE:\n+            case Token.FALSE:\n+            case Token.NULL:\n+            case Token.NUMBER:\n+            case Token.STRING:\n+            case Token.NAME:\n+                return true;\n+            default:\n+                return false;\n+        }\n     }\n-  }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+    static boolean callHasLocalResult(Node value) {\n+        Node target = value.getFirstChild();\n+        if (target.getType() == Token.GETPROP) {\n+            target = target.getFirstChild();\n+        }\n+        return target.getType() == Token.NAME && \"Number\".equals(target.getString());\n+    }\n+\n+    static boolean newHasLocalResult(Node value) {\n+        Node target = value.getFirstChild();\n+        return target.getType() == Token.NAME && \"RegExp\".equals(target.getString());\n+    }\n+\n+    static boolean isSimpleOperator(Node n) {\n+        switch (n.getType()) {\n+            case Token.BITAND:\n+            case Token.BITOR:\n+            case Token.BITXOR:\n+            case Token.DIV:\n+            case Token.EQ:\n+            case Token.GE:\n+            case Token.GT:\n+            case Token.INSTANCEOF:\n+            case Token.LE:\n+            case Token.LSH:\n+            case Token.LT:\n+            case Token.MOD:\n+            case Token.MUL:\n+            case Token.NE:\n+            case Token.RSH:\n+            case Token.SHEQ:\n+            case Token.SHNE:\n+            case Token.SUB:\n+            case Token.URSH:\n+            case Token.VOID:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n-  }\n+    static boolean isAssignmentOp(Node n) {\n+        switch (n.getType()) {\n+            case Token.ASSIGN:\n+            case Token.ASSIGN_ADD:\n+            case Token.ASSIGN_BITAND:\n+            case Token.ASSIGN_BITOR:\n+            case Token.ASSIGN_BITXOR:\n+            case Token.ASSIGN_DIV:\n+            case Token.ASSIGN_LSH:\n+            case Token.ASSIGN_MOD:\n+            case Token.ASSIGN_MUL:\n+            case Token.ASSIGN_RSH:\n+            case Token.ASSIGN_SUB:\n+            case Token.ASSIGN_URSH:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+    static boolean isToStringMethodCall(Node value) {\n+        if (value.getType() != Token.CALL) {\n+            return false;\n+        }\n+        Node target = value.getFirstChild();\n+        return target.getType() == Token.GETPROP &&\n+                target.getLastChild().getString().equals(\"toString\");\n+    }\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}