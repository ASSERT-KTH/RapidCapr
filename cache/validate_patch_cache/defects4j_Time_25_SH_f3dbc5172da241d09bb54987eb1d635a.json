{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if ((offsetLocal < 0 && offsetAdjusted >= 0) || \n        (offsetLocal >= 0 && offsetAdjusted < 0 && instantLocal >= 0) ||\n        (offsetAdjusted > 0 && offsetLocal <= 0)) {\n        // handle transition from non-DST to DST or vice versa\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            // we are near a DST boundary, so adjust the time accordingly\n            if (offsetLocal < offsetAdjusted) {\n                // we are transitioning from non-DST to DST, so move forward\n                return getOffset(nextLocal);\n            } else {\n                // we are transitioning from DST to non-DST, so move backward\n                return getOffset(previousTransition(instantLocal - offsetAdjusted));\n            }\n        }\n    } else {\n        if (offsetLocal > 0 && offsetAdjusted > 0) {\n            // both offsets are positive (i.e., in DST), so choose the earlier transition\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            long prevLocal = previousTransition(instantAdjusted);\n            if (prevLocal < prevAdjusted) {\n               return offsetLocal;\n            } else if (getOffset(prevLocal) == offsetLocal) {\n               return offsetLocal;\n            } else {\n               // we are near a DST boundary, so adjust the time accordingly\n               return getOffset(previousTransition(adjustedTime));\n            }\n        } else if (offsetLocal < 0 && offsetAdjusted < 0) {\n            // both offsets are negative (i.e., not in DST), so choose the later transition\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            long nextLocal = nextTransition(instantAdjusted);\n            if (nextLocal > nextAdjusted) {\n               return offsetLocal;\n            } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n               return offsetAdjusted;\n            } else {\n               // we are near a DST boundary, so adjust the time accordingly\n               return getOffset(nextTransition(instantLocal - offsetAdjusted));\n            }\n        } else {\n            // handle non-DST offset change (e.g., UTC to GMT+1)\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            long nextLocal = nextTransition(instantAdjusted);\n            if (nextLocal != nextAdjusted) {\n                // we are near a transition point, so adjust the time accordingly\n                long prev = previousTransition(instantLocal - offsetAdjusted);\n                if (prev < instantAdjusted && instantAdjusted - prev <= DateTimeConstants.MILLIS_PER_HOUR) {\n                    // we are within an hour of the transition, so use the old offset\n                    return offsetLocal;\n                } else {\n                    // use the new offset\n                    return offsetAdjusted;\n                }\n            } else {\n                // we are not near a transition point, so use the new offset\n                return offsetAdjusted;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8ce75082 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,69 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if ((offsetLocal < 0 && offsetAdjusted >= 0) || \n+        (offsetLocal >= 0 && offsetAdjusted < 0 && instantLocal >= 0) ||\n+        (offsetAdjusted > 0 && offsetLocal <= 0)) {\n+        // handle transition from non-DST to DST or vice versa\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            // we are near a DST boundary, so adjust the time accordingly\n+            if (offsetLocal < offsetAdjusted) {\n+                // we are transitioning from non-DST to DST, so move forward\n+                return getOffset(nextLocal);\n+            } else {\n+                // we are transitioning from DST to non-DST, so move backward\n+                return getOffset(previousTransition(instantLocal - offsetAdjusted));\n+            }\n+        }\n+    } else {\n+        if (offsetLocal > 0 && offsetAdjusted > 0) {\n+            // both offsets are positive (i.e., in DST), so choose the earlier transition\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            long prevLocal = previousTransition(instantAdjusted);\n+            if (prevLocal < prevAdjusted) {\n+               return offsetLocal;\n+            } else if (getOffset(prevLocal) == offsetLocal) {\n+               return offsetLocal;\n+            } else {\n+               // we are near a DST boundary, so adjust the time accordingly\n+               return getOffset(previousTransition(adjustedTime));\n+            }\n+        } else if (offsetLocal < 0 && offsetAdjusted < 0) {\n+            // both offsets are negative (i.e., not in DST), so choose the later transition\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextLocal = nextTransition(instantAdjusted);\n+            if (nextLocal > nextAdjusted) {\n+               return offsetLocal;\n+            } else if (getOffset(nextAdjusted) == offsetAdjusted) {\n+               return offsetAdjusted;\n+            } else {\n+               // we are near a DST boundary, so adjust the time accordingly\n+               return getOffset(nextTransition(instantLocal - offsetAdjusted));\n+            }\n+        } else {\n+            // handle non-DST offset change (e.g., UTC to GMT+1)\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextLocal = nextTransition(instantAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                // we are near a transition point, so adjust the time accordingly\n+                long prev = previousTransition(instantLocal - offsetAdjusted);\n+                if (prev < instantAdjusted && instantAdjusted - prev <= DateTimeConstants.MILLIS_PER_HOUR) {\n+                    // we are within an hour of the transition, so use the old offset\n+                    return offsetLocal;\n+                } else {\n+                    // use the new offset\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                // we are not near a transition point, so use the new offset\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}