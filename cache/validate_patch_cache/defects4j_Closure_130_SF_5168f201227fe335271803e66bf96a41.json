{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n    if (name.aliasingGets == 1 && name.globalSets == 1 && name.localSets == 0\n            && name.type != Name.Type.EXPORT) {\n      List<Ref> refs = new ArrayList<>(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            // If we inlined an alias, there might be more aliases we can inline.\n            // Add the name back to the work list so we can process it again.\n            workList.push(name);\n            name.removeRef(ref);\n            break;\n          }\n        }\n      }\n    }\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n            && name.aliasingGets == 0 && name.globalSets == 1 && name.localSets == 0\n            && name.type != Name.Type.EXPORT) {\n      boolean allPropsMeetConditionA = true; // condition (a)\n      boolean allPropsMeetConditionB = true; // condition (b)\n      for (Name prop : name.props) {\n        if (prop.type == Name.Type.OBJECTLIT || prop.type == Name.Type.FUNCTION) {\n          if (prop.aliasingGets != 0 || prop.localSets != 0\n                  || prop.type == Name.Type.EXPORT) {\n            allPropsMeetConditionA = false;\n            break;\n          }\n          if (prop.globalSets != 1) {\n            allPropsMeetConditionB = false;\n          }\n        }\n      }\n      if (allPropsMeetConditionA || allPropsMeetConditionB && name.type == Name.Type.FUNCTION) {\n        workList.addAll(name.props);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..4e7e4aa5 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,52 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+    if (name.aliasingGets == 1 && name.globalSets == 1 && name.localSets == 0\n+            && name.type != Name.Type.EXPORT) {\n+      List<Ref> refs = new ArrayList<>(name.getRefs());\n+      for (Ref ref : refs) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            // If we inlined an alias, there might be more aliases we can inline.\n+            // Add the name back to the work list so we can process it again.\n+            workList.push(name);\n+            name.removeRef(ref);\n+            break;\n+          }\n+        }\n       }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+    }\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+            && name.aliasingGets == 0 && name.globalSets == 1 && name.localSets == 0\n+            && name.type != Name.Type.EXPORT) {\n+      boolean allPropsMeetConditionA = true; // condition (a)\n+      boolean allPropsMeetConditionB = true; // condition (b)\n+      for (Name prop : name.props) {\n+        if (prop.type == Name.Type.OBJECTLIT || prop.type == Name.Type.FUNCTION) {\n+          if (prop.aliasingGets != 0 || prop.localSets != 0\n+                  || prop.type == Name.Type.EXPORT) {\n+            allPropsMeetConditionA = false;\n+            break;\n+          }\n+          if (prop.globalSets != 1) {\n+            allPropsMeetConditionB = false;\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n+      if (allPropsMeetConditionA || allPropsMeetConditionB && name.type == Name.Type.FUNCTION) {\n         workList.addAll(name.props);\n       }\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}