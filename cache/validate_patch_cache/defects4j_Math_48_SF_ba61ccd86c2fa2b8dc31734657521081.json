{
    "patch": "import org.apache.commons.math3.analysis.RealFieldUnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\nimport org.apache.commons.math3.analysis.solvers.BracketedRealFieldUnivariateSolver;\nimport org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver;\nimport org.apache.commons.math3.analysis.solvers.FieldIncrementor;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.exception.NumberIsTooSmallException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.Field;\nimport org.apache.commons.math3.RealFieldElement;\n\npublic class BracketedRealFieldUnivariateSolver<T extends RealFieldElement<T>> extends BaseAbstractUnivariateSolver<T> implements BracketedRealFieldUnivariateSolver<T> {\n\n    /** Default maximum order. */\n    public static final int DEFAULT_MAX_ORDER = UnivariateSolverUtils.DEFAULT_MAXIMAL_ORDER;\n\n    /** Maximum order. */\n    private final int maximalOrder;\n\n    /** Abcissae of the previous evaluations. */\n    private final T[] abs;\n\n    /** Function values at previous abscissae. */\n    private final T[] vals;\n\n    /**\n     * Construct a solver with given absolute accuracy.\n     *\n     * @param field field to which the function argument and value belong\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy) {\n        super(field.getZero().add(absoluteAccuracy));\n        maximalOrder = DEFAULT_MAX_ORDER;\n        abs = MathArrays.buildArray(field, maximalOrder + 1);\n        vals = MathArrays.buildArray(field, maximalOrder + 1);\n    }\n\n    /**\n     * Construct a solver with given arguments.\n     *\n     * @param field field to which the function argument and value belong\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param maximalOrder Maximum order.\n     */\n    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy,\n                                              final int maximalOrder) {\n        super(field.getZero().add(absoluteAccuracy));\n        this.maximalOrder = maximalOrder;\n        abs = MathArrays.buildArray(field, maximalOrder + 1);\n        vals = MathArrays.buildArray(field, maximalOrder + 1);\n    }\n\n    /**\n     * Construct a solver with given arguments.\n     *\n     * @param field field to which the function argument and value belong\n     * @param function Function.\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public BracketedRealFieldUnivariateSolver(final Field<T> field, final RealFieldUnivariateFunction<T> function,\n                                              final double absoluteAccuracy) {\n        super(function, field.getZero().add(absoluteAccuracy));\n        maximalOrder = DEFAULT_MAX_ORDER;\n        abs = MathArrays.buildArray(field, maximalOrder + 1);\n        vals = MathArrays.buildArray(field, maximalOrder + 1);\n    }\n\n    /**\n     * Construct a solver with given arguments.\n     *\n     * @param field field to which the function argument and value belong\n     * @param function Function.\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param maximalOrder Maximum order.\n     */\n    public BracketedRealFieldUnivariateSolver(final Field<T> field, final RealFieldUnivariateFunction<T> function,\n                                              final double absoluteAccuracy,\n                                              final int maximalOrder) {\n        super(function, field.getZero().add(absoluteAccuracy));\n        this.maximalOrder = maximalOrder;\n        abs = MathArrays.buildArray(field, maximalOrder + 1);\n        vals = MathArrays.buildArray(field, maximalOrder + 1);\n    }\n\n    /**\n     * Construct a solver with given arguments.\n     *\n     * @param field field to which the function argument and value belong\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param relativeAccuracy Maximum relative error.\n     */\n    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy,\n                                              final double relativeAccuracy) {\n        super(field.getZero().add(absoluteAccuracy), relativeAccuracy);\n        maximalOrder = DEFAULT_MAX_ORDER;\n        abs = MathArrays.buildArray(field, maximalOrder + 1);\n        vals = MathArrays.buildArray(field, maximalOrder + 1);\n    }\n\n    /**\n     * Construct a solver with given arguments.\n     *\n     * @param field field to which the function argument and value belong\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param relativeAccuracy Maximum relative error.\n     * @param maximalOrder Maximum order.\n     */\n    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy,\n                                              final double relativeAccuracy,\n                                              final int maximalOrder) {\n        super(field.getZero().add(absoluteAccuracy), relativeAccuracy);\n        this.maximalOrder = maximalOrder;\n        abs = MathArrays.buildArray(field, maximalOrder + 1);\n        vals = MathArrays.buildArray(field, maximalOrder + 1);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int getMaximalOrder() {\n        return maximalOrder;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public T solve(int maxEval, RealFieldUnivariateFunction<T> f, T x0, T x1, Field&ftight) {\n        // Reset.\n        final FieldIncrementor evals = getField().getZero().getField().getIncrementor();\n        evals.setMaximalCount(maxEval);\n        final T ftol = getFunctionValueAccuracy();\n        final T atol = getAbsoluteAccuracy();\n        final T rtol = getRelativeAccuracy();\n        MathArrays.fill(abs, getField().getZero());\n        MathArrays.fill(vals, getField().getZero());\n        T ftolPlusAtol = ftol.add(atol);\n\n        // Verify initial interval.\n        final T m = x0.getAbs().add(x1.getAbs()).multiply(0.5);\n        final T f0 = f.value(x0);\n        final T f1 = f.value(x1);\n        verifyBracketing(x0, f0, x1, f1, m);\n\n        // Prepare arrays with the first 2 evaluations.\n        abs[0] = x0;\n        abs[1] = x1;\n        vals[0] = f0;\n        vals[1] = f1;\n        boolean inverted = false;\n        T min = x0.min(x1);\n        T max = x0.max(x1);\n        while (true) {\n            // Identify tightest bracketing triplet.\n            int iLo;\n            int iHi;\n            int iMid;\n            if (vals[0].lt(vals[1])) {\n                iLo = 0;\n                iHi = 1;\n            } else {\n                iLo = 1;\n                iHi = 0;\n            }\n            if (vals[2].lt(vals[iLo])) {\n                iMid = iLo;\n                iLo = 2;\n            } else if (vals[2].gt(vals[iHi])) {\n                iMid = iHi;\n                iHi = 2;\n            } else {\n                iMid = 2;\n            }\n            final T a = abs[iLo];\n            final T fa = vals[iLo];\n            final T b = abs[iHi];\n            final T fb = vals[iHi];\n            final T m = abs[iMid];\n            final T fm = vals[iMid];\n\n            // Prepare next approximation as the min point of the quadratic that\n            // goes through (a,fa), (b,fb) and (m,fm).\n            final T q = (b.subtract(m)).multiply(fm.subtract(fa)).subtract(a.subtract(m).multiply(fb.subtract(fm)));\n            final T r = (a.subtract(m)).multiply(fb.subtract(fm)).subtract(b.subtract(m).multiply(fa.subtract(fm)));\n            final T denom = (a.subtract(b)).multiply(a.subtract(m)).multiply(b.subtract(m));\n\n            boolean limitReached = false;\n            T next;\n            if (denom.eq(getField().getZero())) {\n                // The quadratic is degenerated. Force a bisection step.\n                next = a.add(b).multiply(0.5);\n                inverted = false;\n            } else {\n                next = m.subtract(q.multiply(2)).divide(r.multiply(2).negate());\n                if (next.lessThan(min) || next.greaterThan(max)) {\n                    // The next approximation is out of the search interval, so it\n                    // must be discarded. A bisection step is performed instead of\n                    // trying again with the extrapolation procedure.\n                    next = a.add(b).multiply(0.5);\n                    inverted = false;\n                } else {\n                    inverted = !inverted;\n                }\n            }\n\n            final T fnext = f.value(next);\n            evals.incrementCount();\n            tightestBracket(fnext, fm, ftolPlusAtol, inverted, newTight, oldTight);\n\n            // Update array",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..87fc8bf3f 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -126,129 +126,224 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n-\n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+import org.apache.commons.math3.analysis.RealFieldUnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\n+import org.apache.commons.math3.analysis.solvers.BracketedRealFieldUnivariateSolver;\n+import org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver;\n+import org.apache.commons.math3.analysis.solvers.FieldIncrementor;\n+import org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils;\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.NoBracketingException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathArrays;\n+import org.apache.commons.math3.Field;\n+import org.apache.commons.math3.RealFieldElement;\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+public class BracketedRealFieldUnivariateSolver<T extends RealFieldElement<T>> extends BaseAbstractUnivariateSolver<T> implements BracketedRealFieldUnivariateSolver<T> {\n+\n+    /** Default maximum order. */\n+    public static final int DEFAULT_MAX_ORDER = UnivariateSolverUtils.DEFAULT_MAXIMAL_ORDER;\n+\n+    /** Maximum order. */\n+    private final int maximalOrder;\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+    /** Abcissae of the previous evaluations. */\n+    private final T[] abs;\n+\n+    /** Function values at previous abscissae. */\n+    private final T[] vals;\n+\n+    /**\n+     * Construct a solver with given absolute accuracy.\n+     *\n+     * @param field field to which the function argument and value belong\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy) {\n+        super(field.getZero().add(absoluteAccuracy));\n+        maximalOrder = DEFAULT_MAX_ORDER;\n+        abs = MathArrays.buildArray(field, maximalOrder + 1);\n+        vals = MathArrays.buildArray(field, maximalOrder + 1);\n+    }\n+\n+    /**\n+     * Construct a solver with given arguments.\n+     *\n+     * @param field field to which the function argument and value belong\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param maximalOrder Maximum order.\n+     */\n+    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy,\n+                                              final int maximalOrder) {\n+        super(field.getZero().add(absoluteAccuracy));\n+        this.maximalOrder = maximalOrder;\n+        abs = MathArrays.buildArray(field, maximalOrder + 1);\n+        vals = MathArrays.buildArray(field, maximalOrder + 1);\n+    }\n+\n+    /**\n+     * Construct a solver with given arguments.\n+     *\n+     * @param field field to which the function argument and value belong\n+     * @param function Function.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public BracketedRealFieldUnivariateSolver(final Field<T> field, final RealFieldUnivariateFunction<T> function,\n+                                              final double absoluteAccuracy) {\n+        super(function, field.getZero().add(absoluteAccuracy));\n+        maximalOrder = DEFAULT_MAX_ORDER;\n+        abs = MathArrays.buildArray(field, maximalOrder + 1);\n+        vals = MathArrays.buildArray(field, maximalOrder + 1);\n+    }\n+\n+    /**\n+     * Construct a solver with given arguments.\n+     *\n+     * @param field field to which the function argument and value belong\n+     * @param function Function.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param maximalOrder Maximum order.\n+     */\n+    public BracketedRealFieldUnivariateSolver(final Field<T> field, final RealFieldUnivariateFunction<T> function,\n+                                              final double absoluteAccuracy,\n+                                              final int maximalOrder) {\n+        super(function, field.getZero().add(absoluteAccuracy));\n+        this.maximalOrder = maximalOrder;\n+        abs = MathArrays.buildArray(field, maximalOrder + 1);\n+        vals = MathArrays.buildArray(field, maximalOrder + 1);\n+    }\n+\n+    /**\n+     * Construct a solver with given arguments.\n+     *\n+     * @param field field to which the function argument and value belong\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param relativeAccuracy Maximum relative error.\n+     */\n+    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy,\n+                                              final double relativeAccuracy) {\n+        super(field.getZero().add(absoluteAccuracy), relativeAccuracy);\n+        maximalOrder = DEFAULT_MAX_ORDER;\n+        abs = MathArrays.buildArray(field, maximalOrder + 1);\n+        vals = MathArrays.buildArray(field, maximalOrder + 1);\n+    }\n+\n+    /**\n+     * Construct a solver with given arguments.\n+     *\n+     * @param field field to which the function argument and value belong\n+     * @param absoluteAccuracy Maximum absolute error.\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param maximalOrder Maximum order.\n+     */\n+    public BracketedRealFieldUnivariateSolver(final Field<T> field, final double absoluteAccuracy,\n+                                              final double relativeAccuracy,\n+                                              final int maximalOrder) {\n+        super(field.getZero().add(absoluteAccuracy), relativeAccuracy);\n+        this.maximalOrder = maximalOrder;\n+        abs = MathArrays.buildArray(field, maximalOrder + 1);\n+        vals = MathArrays.buildArray(field, maximalOrder + 1);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getMaximalOrder() {\n+        return maximalOrder;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public T solve(int maxEval, RealFieldUnivariateFunction<T> f, T x0, T x1, Field&ftight) {\n+        // Reset.\n+        final FieldIncrementor evals = getField().getZero().getField().getIncrementor();\n+        evals.setMaximalCount(maxEval);\n+        final T ftol = getFunctionValueAccuracy();\n+        final T atol = getAbsoluteAccuracy();\n+        final T rtol = getRelativeAccuracy();\n+        MathArrays.fill(abs, getField().getZero());\n+        MathArrays.fill(vals, getField().getZero());\n+        T ftolPlusAtol = ftol.add(atol);\n+\n+        // Verify initial interval.\n+        final T m = x0.getAbs().add(x1.getAbs()).multiply(0.5);\n+        final T f0 = f.value(x0);\n+        final T f1 = f.value(x1);\n+        verifyBracketing(x0, f0, x1, f1, m);\n+\n+        // Prepare arrays with the first 2 evaluations.\n+        abs[0] = x0;\n+        abs[1] = x1;\n+        vals[0] = f0;\n+        vals[1] = f1;\n+        boolean inverted = false;\n+        T min = x0.min(x1);\n+        T max = x0.max(x1);\n+        while (true) {\n+            // Identify tightest bracketing triplet.\n+            int iLo;\n+            int iHi;\n+            int iMid;\n+            if (vals[0].lt(vals[1])) {\n+                iLo = 0;\n+                iHi = 1;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Detect early that algorithm is stuck, instead of waiting\n-                    // for the maximum number of iterations to be exceeded.\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n+                iLo = 1;\n+                iHi = 0;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (vals[2].lt(vals[iLo])) {\n+                iMid = iLo;\n+                iLo = 2;\n+            } else if (vals[2].gt(vals[iHi])) {\n+                iMid = iHi;\n+                iHi = 2;\n+            } else {\n+                iMid = 2;\n             }\n+            final T a = abs[iLo];\n+            final T fa = vals[iLo];\n+            final T b = abs[iHi];\n+            final T fb = vals[iHi];\n+            final T m = abs[iMid];\n+            final T fm = vals[iMid];\n+\n+            // Prepare next approximation as the min point of the quadratic that\n+            // goes through (a,fa), (b,fb) and (m,fm).\n+            final T q = (b.subtract(m)).multiply(fm.subtract(fa)).subtract(a.subtract(m).multiply(fb.subtract(fm)));\n+            final T r = (a.subtract(m)).multiply(fb.subtract(fm)).subtract(b.subtract(m).multiply(fa.subtract(fm)));\n+            final T denom = (a.subtract(b)).multiply(a.subtract(m)).multiply(b.subtract(m));\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+            boolean limitReached = false;\n+            T next;\n+            if (denom.eq(getField().getZero())) {\n+                // The quadratic is degenerated. Force a bisection step.\n+                next = a.add(b).multiply(0.5);\n+                inverted = false;\n+            } else {\n+                next = m.subtract(q.multiply(2)).divide(r.multiply(2).negate());\n+                if (next.lessThan(min) || next.greaterThan(max)) {\n+                    // The next approximation is out of the search interval, so it\n+                    // must be discarded. A bisection step is performed instead of\n+                    // trying again with the extrapolation procedure.\n+                    next = a.add(b).multiply(0.5);\n+                    inverted = false;\n+                } else {\n+                    inverted = !inverted;\n                 }\n             }\n-        }\n-    }\n+\n+            final T fnext = f.value(next);\n+            evals.incrementCount();\n+            tightestBracket(fnext, fm, ftolPlusAtol, inverted, newTight, oldTight);\n+\n+            // Update array\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}