{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid a or x\");\n    }\n\n    double gamma = gamma(a);\n    double g = 0.0;\n    double gp = 0.0;\n    double tolerance = 1E-15;\n    int maxIterations = 10000;\n\n    if (x < a+1.0) {\n        g = gammaSeries(a, x, tolerance, maxIterations);\n        return g/gamma;\n    }\n    else {\n        gp = gammaContinuedFraction(a, x, tolerance, maxIterations);\n        return 1.0 - gp/gamma;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bbae8eaf9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,26 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid a or x\");\n+    }\n+\n+    double gamma = gamma(a);\n+    double g = 0.0;\n+    double gp = 0.0;\n+    double tolerance = 1E-15;\n+    int maxIterations = 10000;\n+\n+    if (x < a+1.0) {\n+        g = gammaSeries(a, x, tolerance, maxIterations);\n+        return g/gamma;\n+    }\n+    else {\n+        gp = gammaContinuedFraction(a, x, tolerance, maxIterations);\n+        return 1.0 - gp/gamma;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}