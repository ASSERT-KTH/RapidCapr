{
    "patch": "        // check if any input value is NaN or Infinite\n        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial)\n                || Double.isNaN(min) || Double.isNaN(max) || Double.isNaN(initial)\n                || Double.isInfinite(min) || Double.isInfinite(max) || Double.isInfinite(initial)\n                || Double.isNaN(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax)\n                || Double.isInfinite(yInitial) || Double.isInfinite(yMin) || Double.isInfinite(yMax)) {\n\n            throw new IllegalArgumentException(\"One or more input values are NaN or infinite. Endpoints: [\" + min + \",\" + max + \"], Initial guess value: \" + initial + \", Function values: [\" + yMin + \", \" + yMax + \", \" + yInitial + \"]\");\n        }\n\n        // ensure endpoints bracket the root\n        if (yMin * yMax >= 0) {\n            throw new IllegalArgumentException(\"Endpoints do not bracket the root. Endpoints: [\" + min + \", \" + max + \"], Function values: [\" + yMin + \", \" + yMax + \"]\");\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..355cdfa9d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,23 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if any input value is NaN or Infinite\n+        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial)\n+                || Double.isNaN(min) || Double.isNaN(max) || Double.isNaN(initial)\n+                || Double.isInfinite(min) || Double.isInfinite(max) || Double.isInfinite(initial)\n+                || Double.isNaN(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax)\n+                || Double.isInfinite(yInitial) || Double.isInfinite(yMin) || Double.isInfinite(yMax)) {\n+\n+            throw new IllegalArgumentException(\"One or more input values are NaN or infinite. Endpoints: [\" + min + \",\" + max + \"], Initial guess value: \" + initial + \", Function values: [\" + yMin + \", \" + yMax + \", \" + yInitial + \"]\");\n+        }\n+\n+        // ensure endpoints bracket the root\n+        if (yMin * yMax >= 0) {\n+            throw new IllegalArgumentException(\"Endpoints do not bracket the root. Endpoints: [\" + min + \", \" + max + \"], Function values: [\" + yMin + \", \" + yMax + \"]\");\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}