{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          } else if (NodeUtil.isFunctionDeclaration(n)) {\n            if (NodeUtil.isStatementBlock(parent)) {\n              defineDeclaredFunction(n, parent);\n            }\n          } else {\n            if (parent.getType() != Token.ASSIGN && parent.getType() != Token.COLON) {\n              Var var = defineVar(n, parent);\n              if (var != null) {\n                parent.putBooleanProp(Node.DECLARED_TYPE, true);\n              }\n            }\n          }\n          break;\n        case Token.CATCH:\n          if (parent.getType() == Token.BLOCK) {\n            defineCatch(n, parent);\n          }\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9291d25d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1453,16 +1453,27 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n+          } else if (NodeUtil.isFunctionDeclaration(n)) {\n+            if (NodeUtil.isStatementBlock(parent)) {\n+              defineDeclaredFunction(n, parent);\n+            }\n+          } else {\n+            if (parent.getType() != Token.ASSIGN && parent.getType() != Token.COLON) {\n+              Var var = defineVar(n, parent);\n+              if (var != null) {\n+                parent.putBooleanProp(Node.DECLARED_TYPE, true);\n+              }\n+            }\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n+          if (parent.getType() == Token.BLOCK) {\n+            defineCatch(n, parent);\n+          }\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}