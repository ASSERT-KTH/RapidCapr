{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Try to resolve the type using the registry\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n  // If we have resolved the type or there was no cycle, proceed with the usual resolution process\n  if (isResolved() || !detectImplicitPrototypeCycle()) {\n    // If we have resolved the type, call super.resolveInternal() and finish property continuations\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n    }\n\n    // Return the resolved type if we have resolved it and we're in the last registry generation, otherwise, return this\n    return isResolved() ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n  }\n\n  // If the type was not resolved via registry but there was a cycle, try to resolve it using properties\n  resolveViaProperties(t, enclosing);\n\n  // Call super.resolveInternal() and finish property continuations only if we have resolved the type\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n\n  // Return the resolved type if we have resolved it and we're in the last registry generation, otherwise, return this\n  return isResolved() ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..b3c793a8 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,35 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Try to resolve the type using the registry\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n \n-    if (resolved) {\n+  // If we have resolved the type or there was no cycle, proceed with the usual resolution process\n+  if (isResolved() || !detectImplicitPrototypeCycle()) {\n+    // If we have resolved the type, call super.resolveInternal() and finish property continuations\n+    if (isResolved()) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+    // Return the resolved type if we have resolved it and we're in the last registry generation, otherwise, return this\n+    return isResolved() ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n+  }\n \n+  // If the type was not resolved via registry but there was a cycle, try to resolve it using properties\n+  resolveViaProperties(t, enclosing);\n+\n+  // Call super.resolveInternal() and finish property continuations only if we have resolved the type\n+  if (isResolved()) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n   }\n \n+  // Return the resolved type if we have resolved it and we're in the last registry generation, otherwise, return this\n+  return isResolved() ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "junit.framework.AssertionFailedError: Expected exactly one warning or error Errors:",
    "test_result": "FAIL"
}