{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean inYearPattern = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        if (inYearPattern && (c == 'G' || c == 'y' || c == 'M' || c == 'd' || c == 'h' || c == 'a' ||\n                              c == 'H' || c == 'm' || c == 's' || c == 'S' || c == 'z' || c == 'Z')) {\n            inYearPattern = false;\n            regex.append(')');\n        }\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if ((i + 1) < value.length()) {\n                        c = value.charAt(++i);\n                    }\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n            case ':':\n            case '/':\n            case '#':\n            case '@':\n                regex.append('\\\\');\n                break;\n            case 'G':\n            case 'y':\n            case 'M':\n            case 'd':\n            case 'h':\n            case 'a':\n            case 'H':\n            case 'm':\n            case 's':\n            case 'S':\n            case 'z':\n            case 'Z':\n                if (!inYearPattern) {\n                    inYearPattern = true;\n                    regex.append(\"(?:\");\n                }\n                break;\n            default:\n                if (!Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) {\n                    regex.append(\"\\\\\");\n                }\n                regex.append(c);\n                break;\n        }\n    }\n    if (inYearPattern) {\n        regex.append(')');\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..ee622617 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,30 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean inYearPattern = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        if (inYearPattern && (c == 'G' || c == 'y' || c == 'M' || c == 'd' || c == 'h' || c == 'a' ||\n+                              c == 'H' || c == 'm' || c == 's' || c == 'S' || c == 'z' || c == 'Z')) {\n+            inYearPattern = false;\n+            regex.append(')');\n+        }\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    if ((i + 1) < value.length()) {\n+                        c = value.charAt(++i);\n                     }\n-                    c= value.charAt(i);\n                 }\n                 break;\n             case '?':\n@@ -335,12 +340,42 @@ public class FastDateParser implements DateParser, Serializable {\n             case '^':\n             case '$':\n             case '.':\n+            case ':':\n+            case '/':\n+            case '#':\n+            case '@':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                break;\n+            case 'G':\n+            case 'y':\n+            case 'M':\n+            case 'd':\n+            case 'h':\n+            case 'a':\n+            case 'H':\n+            case 'm':\n+            case 's':\n+            case 'S':\n+            case 'z':\n+            case 'Z':\n+                if (!inYearPattern) {\n+                    inYearPattern = true;\n+                    regex.append(\"(?:\");\n+                }\n+                break;\n+            default:\n+                if (!Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) {\n+                    regex.append(\"\\\\\");\n+                }\n+                regex.append(c);\n+                break;\n         }\n-        return regex;\n     }\n+    if (inYearPattern) {\n+        regex.append(')');\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}