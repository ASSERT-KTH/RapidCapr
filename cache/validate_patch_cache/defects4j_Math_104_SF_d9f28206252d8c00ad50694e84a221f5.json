{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        // Use the continued fraction representation.\n        double b0 = 0.0;\n        double b1 = 1.0;\n        double bm = b1;\n        double am = 1.0;\n        double az = a;\n        double qab = a - x;\n        double qap = a + 1.0;\n        double qam = a - 1.0;\n        double bz = qap;\n        double m = 1.0;\n        double eps = 3.0e-16;\n        double q1 = bm;\n        double aa = 0.0;\n\n        for (;;) {\n            aa += 1.0;\n            double em = aa * (a - aa);\n            double tem = m + em;\n            if (Math.abs(m - 1.0) < eps) {\n                b0 = bm / bz;\n                double retval = b0 * az / am;\n                return Math.exp(qab * Math.log(x) - x - logGamma(a)) * retval;\n            }\n            double d = 1.0 / tem;\n            double h = d - aa * h;\n            bm = bz + h * bm;\n            double d1 = Math.abs(d);\n            if (d1 < 3.0e-16) {\n                d = 3.0e-16;\n            }\n            h = 1.0 / d1;\n            double h2 = h * h;\n            bz = qap + em * bz * h2;\n            az = qap + em * az * h2;\n            d = h * bz - 1.0;\n            if (Math.abs(d) > 1.0e-30) {\n                m = az / d;\n            }\n            d = h * bm - 1.0;\n            if (Math.abs(d) > 1.0e-30) {\n                double t = az / d;\n                q1 = qab * t - qam * bm;\n                qab = qap * t - qaz * am;\n                qam = t;\n                double qab1 = q1 / qab;\n                if (Math.abs(qab1 - 1.0) < 3.0e-16) {\n                    break;\n                }\n            }\n        }\n    }\n\n    // Use the series representation.\n    double sum = 1.0 / a;\n    double term = 1.0 / a;\n    for (int n = 1; n <= 100; n++) {\n        term *= x / (a + n);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * 1.0e-15) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n        }\n    }\n\n    return Double.NaN;\n }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e9a9da7e6 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,82 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        // Use the continued fraction representation.\n+        double b0 = 0.0;\n+        double b1 = 1.0;\n+        double bm = b1;\n+        double am = 1.0;\n+        double az = a;\n+        double qab = a - x;\n+        double qap = a + 1.0;\n+        double qam = a - 1.0;\n+        double bz = qap;\n+        double m = 1.0;\n+        double eps = 3.0e-16;\n+        double q1 = bm;\n+        double aa = 0.0;\n+\n+        for (;;) {\n+            aa += 1.0;\n+            double em = aa * (a - aa);\n+            double tem = m + em;\n+            if (Math.abs(m - 1.0) < eps) {\n+                b0 = bm / bz;\n+                double retval = b0 * az / am;\n+                return Math.exp(qab * Math.log(x) - x - logGamma(a)) * retval;\n+            }\n+            double d = 1.0 / tem;\n+            double h = d - aa * h;\n+            bm = bz + h * bm;\n+            double d1 = Math.abs(d);\n+            if (d1 < 3.0e-16) {\n+                d = 3.0e-16;\n+            }\n+            h = 1.0 / d1;\n+            double h2 = h * h;\n+            bz = qap + em * bz * h2;\n+            az = qap + em * az * h2;\n+            d = h * bz - 1.0;\n+            if (Math.abs(d) > 1.0e-30) {\n+                m = az / d;\n+            }\n+            d = h * bm - 1.0;\n+            if (Math.abs(d) > 1.0e-30) {\n+                double t = az / d;\n+                q1 = qab * t - qam * bm;\n+                qab = qap * t - qaz * am;\n+                qam = t;\n+                double qab1 = q1 / qab;\n+                if (Math.abs(qab1 - 1.0) < 3.0e-16) {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    // Use the series representation.\n+    double sum = 1.0 / a;\n+    double term = 1.0 / a;\n+    for (int n = 1; n <= 100; n++) {\n+        term *= x / (a + n);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * 1.0e-15) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+        }\n+    }\n+\n+    return Double.NaN;\n+ }\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}