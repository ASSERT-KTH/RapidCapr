{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            double totalMemory = Runtime.getRuntime().totalMemory();\n            double maxMemory = 0.9 * Runtime.getRuntime().maxMemory();\n            double freeMemory = Runtime.getRuntime().freeMemory();\n            double usedMemory = totalMemory - freeMemory;\n            if (usedMemory >= maxMemory * 0.8) {\n                System.gc();\n                System.runFinalization();\n            }\n            return dec.getSquareRoot();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3d254bedc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -560,6 +560,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n+            double totalMemory = Runtime.getRuntime().totalMemory();\n+            double maxMemory = 0.9 * Runtime.getRuntime().maxMemory();\n+            double freeMemory = Runtime.getRuntime().freeMemory();\n+            double usedMemory = totalMemory - freeMemory;\n+            if (usedMemory >= maxMemory * 0.8) {\n+                System.gc();\n+                System.runFinalization();\n+            }\n             return dec.getSquareRoot();\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}