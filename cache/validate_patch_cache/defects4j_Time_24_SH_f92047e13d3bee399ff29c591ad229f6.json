{
    "patch": "int year = iDefaultYear;\nfor (int i = 0; i < count; i++) {\n    DateTimeField field = savedFields[i].iField;\n    int value = savedFields[i].iValue;\n    try {\n        millis = field.set(millis, value);\n    } catch (IllegalArgumentException ex) {\n        if (field.getType() == DateTimeFieldType.year()) {\n            year = getOverflowYear(value);\n            if (year != iDefaultYear) {\n                try {\n                    millis = field.set(millis, year);\n                } catch (IllegalArgumentException e) {\n                    String message = \"Cannot parse \\\"\" + text + \"\\\": Invalid year value: \" + year;\n                    throw new IllegalArgumentException(message, e);\n                }\n            } else {\n                throw ex;\n            }\n        } else {\n            throw ex;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7aacb0f1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+int year = iDefaultYear;\n+for (int i = 0; i < count; i++) {\n+    DateTimeField field = savedFields[i].iField;\n+    int value = savedFields[i].iValue;\n+    try {\n+        millis = field.set(millis, value);\n+    } catch (IllegalArgumentException ex) {\n+        if (field.getType() == DateTimeFieldType.year()) {\n+            year = getOverflowYear(value);\n+            if (year != iDefaultYear) {\n+                try {\n+                    millis = field.set(millis, year);\n+                } catch (IllegalArgumentException e) {\n+                    String message = \"Cannot parse \\\"\" + text + \"\\\": Invalid year value: \" + year;\n+                    throw new IllegalArgumentException(message, e);\n+                }\n+            } else {\n+                throw ex;\n+            }\n+        } else {\n+            throw ex;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}