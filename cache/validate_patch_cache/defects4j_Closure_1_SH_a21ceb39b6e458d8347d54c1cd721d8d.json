{
    "patch": "        for (Node param : argList.children()) {\n            if (param == null) break;\n            String paramName = param.getString();\n            if (!referenced.contains(fnScope.getVar(paramName))) {\n                Node defaultValue = getDefaultValue(param);\n                if (defaultValue == null) {\n                    // Remove the unreferenced parameter.\n                    argList.removeChild(param);\n                    compiler.reportCodeChange();\n                } else {\n                    // Replace the unreferenced parameter with the default value.\n                    Node defaultValueClone = defaultValue.cloneTree();\n                    defaultValueClone.copyInformationFrom(param);\n                    replaceWithDefaultValue(param, defaultValueClone);\n                    compiler.reportCodeChange();\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..37f01fcf 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        for (Node param : argList.children()) {\n+            if (param == null) break;\n+            String paramName = param.getString();\n+            if (!referenced.contains(fnScope.getVar(paramName))) {\n+                Node defaultValue = getDefaultValue(param);\n+                if (defaultValue == null) {\n+                    // Remove the unreferenced parameter.\n+                    argList.removeChild(param);\n+                    compiler.reportCodeChange();\n+                } else {\n+                    // Replace the unreferenced parameter with the default value.\n+                    Node defaultValueClone = defaultValue.cloneTree();\n+                    defaultValueClone.copyInformationFrom(param);\n+                    replaceWithDefaultValue(param, defaultValueClone);\n+                    compiler.reportCodeChange();\n+                }\n+            }\n+        }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}