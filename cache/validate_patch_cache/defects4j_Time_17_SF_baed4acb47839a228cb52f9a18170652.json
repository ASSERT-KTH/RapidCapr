{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        long local = convertUTCToLocal(instant);\n        int offsetBefore = getOffset(instant - DateTimeConstants.MILLIS_PER_SECOND);\n        int offsetAfter = getOffset(instant + DateTimeConstants.MILLIS_PER_SECOND);\n        if (offsetBefore == offsetAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        if (earlierOrLater) {\n            if (local + offsetBefore >= 0) {\n                return instant - offsetBefore;\n            } else {\n                return instant - offsetAfter;\n            }\n        } else {\n            if (local + offsetAfter >= 0) {\n                return instant - offsetAfter;\n            } else {\n                return instant - offsetBefore;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..8a30cbaa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1161,22 +1161,25 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the adjusted instant millis\n      */\n     public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n+        long local = convertUTCToLocal(instant);\n+        int offsetBefore = getOffset(instant - DateTimeConstants.MILLIS_PER_SECOND);\n+        int offsetAfter = getOffset(instant + DateTimeConstants.MILLIS_PER_SECOND);\n+        if (offsetBefore == offsetAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+        if (earlierOrLater) {\n+            if (local + offsetBefore >= 0) {\n+                return instant - offsetBefore;\n+            } else {\n+                return instant - offsetAfter;\n+            }\n+        } else {\n+            if (local + offsetAfter >= 0) {\n+                return instant - offsetAfter;\n+            } else {\n+                return instant - offsetBefore;\n+            }\n+        }\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}