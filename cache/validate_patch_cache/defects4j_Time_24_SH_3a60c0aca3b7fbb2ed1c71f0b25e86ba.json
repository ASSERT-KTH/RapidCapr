{
    "patch": "        Arrays.sort(savedFields, 0, count);\n        long originalMillis = millis;\n        boolean changed = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n                if (millis != originalMillis) {\n                    if (i == 0 && savedFields[i].getType() == DateTimeFieldType.monthOfYear() && savedFields[i+1].getType() == DateTimeFieldType.dayOfMonth()) {\n                        // some calendar systems use the year of first field if it is a month for parsing week-based values\n                        DurationField first = savedFields[0].iField.getDurationField();\n                        DurationField months = DurationFieldType.months().getField(iChrono);\n                        if (compareReverse(first, months) >= 0 && compareReverse(first, DurationFieldType.weeks().getField(iChrono)) < 0) {\n                            return computeMillis(resetFields, text);\n                        }\n                    }\n                    changed = true;\n                }\n                originalMillis = millis;\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n        if (changed) {\n            millis = originalMillis;\n            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1847f935 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,54 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        Arrays.sort(savedFields, 0, count);\n+        long originalMillis = millis;\n+        boolean changed = false;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (millis != originalMillis) {\n+                    if (i == 0 && savedFields[i].getType() == DateTimeFieldType.monthOfYear() && savedFields[i+1].getType() == DateTimeFieldType.dayOfMonth()) {\n+                        // some calendar systems use the year of first field if it is a month for parsing week-based values\n+                        DurationField first = savedFields[0].iField.getDurationField();\n+                        DurationField months = DurationFieldType.months().getField(iChrono);\n+                        if (compareReverse(first, months) >= 0 && compareReverse(first, DurationFieldType.weeks().getField(iChrono)) < 0) {\n+                            return computeMillis(resetFields, text);\n+                        }\n+                    }\n+                    changed = true;\n+                }\n+                originalMillis = millis;\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+        if (changed) {\n+            millis = originalMillis;\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}