{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.mayBeObjectLitKey(maybeExpr)) {\n        return false;\n      }\n      if (maybeExpr.isString() || maybeExpr.isNumber()) {\n        // These primitives may cause issues when folded\n        return false;\n      }\n      // Skip IIFEs, style stripping expressions or constant declarations\n      if (maybeExpr.getType() == Token.SCRIPT || NodeUtil.isCallOrNew(maybeExpr)) {\n        return false;\n      }\n      // Skip if expressions that use the ?: operator with non-constant expressions\n      if (NodeUtil.isName(maybeExpr) || NodeUtil.isGet(maybeExpr)) {\n        return false;\n      }\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n      if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild()) {\n        maybeExpr = maybeExpr.getFirstChild();\n      }\n\n      // We only have to worry about methods with an implicit 'this'\n      // param, or this doesn't happen.\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..f8c103ef 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,42 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.mayBeObjectLitKey(maybeExpr)) {\n+        return false;\n+      }\n+      if (maybeExpr.isString() || maybeExpr.isNumber()) {\n+        // These primitives may cause issues when folded\n+        return false;\n+      }\n+      // Skip IIFEs, style stripping expressions or constant declarations\n+      if (maybeExpr.getType() == Token.SCRIPT || NodeUtil.isCallOrNew(maybeExpr)) {\n+        return false;\n+      }\n+      // Skip if expressions that use the ?: operator with non-constant expressions\n+      if (NodeUtil.isName(maybeExpr) || NodeUtil.isGet(maybeExpr)) {\n+        return false;\n+      }\n+      // IE has a bug where event handlers behave differently when\n+      // their return value is used vs. when their return value is in\n+      // an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs\n+      // into other expressions.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild()) {\n+        maybeExpr = maybeExpr.getFirstChild();\n       }\n-    }\n \n-    return false;\n+      // We only have to worry about methods with an implicit 'this'\n+      // param, or this doesn't happen.\n+      return NodeUtil.isExpressionNode(maybeExpr);\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}