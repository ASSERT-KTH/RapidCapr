{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m);\n\n    final double[] eigenvalues = eig.getRealEigenvalues();\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite to compute square root.\");\n        }\n    }\n\n    final RealMatrix v = eig.getV();\n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrtEigenvalues.setEntry(i, i, Math.sqrt(eigenvalues[i]));\n    }\n    final RealMatrix sqrtM = v.multiply(sqrtEigenvalues).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ba4c8f1b9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+\n+    final double[] eigenvalues = eig.getRealEigenvalues();\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite to compute square root.\");\n+        }\n+    }\n+\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrtEigenvalues.setEntry(i, i, Math.sqrt(eigenvalues[i]));\n     }\n+    final RealMatrix sqrtM = v.multiply(sqrtEigenvalues).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}