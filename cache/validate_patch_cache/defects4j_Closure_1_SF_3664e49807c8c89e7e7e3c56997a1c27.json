{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      if (!removeExtraParams(fnScope, argList)) {\n        Node lastChild = function.getLastChild();\n        while (lastChild != null\n            && (lastChild.isEmpty() || lastChild.isBlock())) {\n          lastChild = lastChild.getPrevious();\n        }\n        if (lastChild != null && lastChild.isReturn()) {\n          Node lastArgInReturn = getFunctionArgList(lastChild).getLastChild();\n          boolean retCountUpdated = countReturnReferences(argList) !=\n              countReturnReferences(getFunctionArgList(lastChild.getParent()));\n          if (lastArgInReturn != null &&\n              (retCountUpdated ||\n              requiresComplexExtraction(fnScope, argList, lastArgInReturn))) {\n            String newArgName = hmScriptVarName(\"newArg\");\n            Node newArg = IR.name(newArgName).srcref(lastArgInReturn);\n            argList.addChildToBack(IR.param(newArg).srcref(lastArgInReturn));\n            lastArgInReturn.replaceWith(newArg);\n            compiler.reportCodeChange();\n            argNames.add(newArgName);\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7b17aeb1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -400,6 +400,28 @@ class RemoveUnusedVars\n           break;\n         }\n       }\n+      if (!removeExtraParams(fnScope, argList)) {\n+        Node lastChild = function.getLastChild();\n+        while (lastChild != null\n+            && (lastChild.isEmpty() || lastChild.isBlock())) {\n+          lastChild = lastChild.getPrevious();\n+        }\n+        if (lastChild != null && lastChild.isReturn()) {\n+          Node lastArgInReturn = getFunctionArgList(lastChild).getLastChild();\n+          boolean retCountUpdated = countReturnReferences(argList) !=\n+              countReturnReferences(getFunctionArgList(lastChild.getParent()));\n+          if (lastArgInReturn != null &&\n+              (retCountUpdated ||\n+              requiresComplexExtraction(fnScope, argList, lastArgInReturn))) {\n+            String newArgName = hmScriptVarName(\"newArg\");\n+            Node newArg = IR.name(newArgName).srcref(lastArgInReturn);\n+            argList.addChildToBack(IR.param(newArg).srcref(lastArgInReturn));\n+            lastArgInReturn.replaceWith(newArg);\n+            compiler.reportCodeChange();\n+            argNames.add(newArgName);\n+          }\n+        }\n+      }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}