{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtM = dec.getSquareRoot();\n\n    if (sqrtM == null) {\n        throw new RuntimeException(\"Square root matrix is null.\");\n    }\n\n    RealMatrix[] factors = dec.getFactorization();\n    RealMatrix transformedSqrtM = factors[1].multiply(sqrtM).multiply(factors[1].transpose());\n    final RealMatrix result = factors[0].multiply(transformedSqrtM).multiply(factors[0].transpose());\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6153d3997 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtM = dec.getSquareRoot();\n+\n+    if (sqrtM == null) {\n+        throw new RuntimeException(\"Square root matrix is null.\");\n     }\n+\n+    RealMatrix[] factors = dec.getFactorization();\n+    RealMatrix transformedSqrtM = factors[1].multiply(sqrtM).multiply(factors[1].transpose());\n+    final RealMatrix result = factors[0].multiply(transformedSqrtM).multiply(factors[0].transpose());\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}