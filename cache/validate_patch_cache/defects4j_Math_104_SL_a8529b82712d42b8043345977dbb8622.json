{
    "patch": "public class MyClass {\n    private static final double DEFAULT_EPSILON = 1e-9;\n\n    public static double regularizedGammaP(double a, double x) {\n        if (x < 0 || a <= 0) {\n            throw new IllegalArgumentException(\"Invalid input arguments: a=\" + a + \", x=\" + x);\n        }\n        if (x == 0) {\n            return 0.0;\n        } else if (x >= a + 1) {\n            return 1 - regularizedGammaQ(a, x);\n        } else {\n            double sum = 1;\n            double term = 1 / a;\n            int n = 1;\n            while (Math.abs(term) > DEFAULT_EPSILON * Math.abs(sum)) {\n                term *= x / (a + n);\n                sum += term;\n                n++;\n            }\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n        }\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        if (x < 0 || a <= 0) {\n            throw new IllegalArgumentException(\"Invalid input arguments: a=\" + a + \", x=\" + x);\n        }\n        if (x == 0) {\n            return 1.0;\n        } else if (x < a + 1) {\n            return 1 - regularizedGammaP(a, x);\n        } else {\n            double b0 = 1;\n            double b1 = x + 1 - a;\n            double b2 = x;\n            double a0 = 1;\n            double a1 = x;\n            double a2 = x + 1 - a;\n            double factor = 1 / b1;\n            double delta = factor;\n            int n = 2;\n            double maxIter = 1000;\n            while (Math.abs(delta) > DEFAULT_EPSILON * Math.abs(b1) && n < maxIter) {\n                double num = n * (a + n - 1);\n                double a3 = num * a2 + x * a1;\n                double b3 = num * b2 + x * b1;\n                factor = 1 / b3;\n                delta = factor * a3;\n                a0 = a1;\n                a1 = a2;\n                a2 = b3;\n                b0 = b1;\n                b1 = b2;\n                b2 = b3;\n                a2 *= factor;\n                b2 *= factor;\n                n++;\n            }\n\n            if (n >= maxIter) {\n                throw new RuntimeException(\"Maximum number of iterations exceeded.\");\n            }\n            double result = delta * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            return result;\n        }\n    }\n\n    private static double logGamma(double x) {\n        if (x <= 0.0) {\n            throw new IllegalArgumentException(\"Invalid input argument: x must be positive.\");\n        }\n\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double series = 1.0 + 76.18009172947146 / (x + 0) - 86.50532032941677 / (x + 1) +\n                24.01409824083091 / (x + 2) - 1.231739572450155 / (x + 3) +\n                0.001208650973866179 / (x + 4) - 0.000005395239384953 / (x + 5);\n        return tmp + Math.log(Math.sqrt(2 * Math.PI) * series / x);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}