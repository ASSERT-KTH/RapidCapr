{
    "patch": "    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      Node currentArg = argList.getFirstChild();\n      while (currentArg != null) {\n        Node nextArg = currentArg.getNext();\n        if (!referenced.contains(fnScope.getVar(currentArg.getString()))) {\n          if (currentArg == lastArg) {\n            argList.removeChild(currentArg);\n          } else {\n            argList.replaceChild(currentArg, IR.empty().srcref(currentArg));\n          }\n          compiler.reportCodeChange();\n        }\n        currentArg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3725ab83 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      Node currentArg = argList.getFirstChild();\n+      while (currentArg != null) {\n+        Node nextArg = currentArg.getNext();\n+        if (!referenced.contains(fnScope.getVar(currentArg.getString()))) {\n+          if (currentArg == lastArg) {\n+            argList.removeChild(currentArg);\n+          } else {\n+            argList.replaceChild(currentArg, IR.empty().srcref(currentArg));\n+          }\n+          compiler.reportCodeChange();\n+        }\n+        currentArg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}