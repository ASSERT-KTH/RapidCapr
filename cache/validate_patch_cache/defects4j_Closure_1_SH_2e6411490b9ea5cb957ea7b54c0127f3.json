{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    // Find nodes in the function body that reference the function's parameters.\n    Set<String> referencedParams = Sets.newHashSet();\n    NodeTraversal.traverseScopeRoot(\n        function,\n        new AbstractShallowStatementCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isParamList()) {\n              return;\n            }\n            if (n.isName() && isParameterName(n.getString())) {\n              referencedParams.add(n.getString());\n            }\n          }\n        });\n      \n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      if (!referenced.contains(fnScope.getVar(argName)) &&\n          !referencedParams.contains(argName)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8d0d974e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    // Find nodes in the function body that reference the function's parameters.\n+    Set<String> referencedParams = Sets.newHashSet();\n+    NodeTraversal.traverseScopeRoot(\n+        function,\n+        new AbstractShallowStatementCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isParamList()) {\n+              return;\n+            }\n+            if (n.isName() && isParameterName(n.getString())) {\n+              referencedParams.add(n.getString());\n+            }\n+          }\n+        });\n+      \n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      if (!referenced.contains(fnScope.getVar(argName)) &&\n+          !referencedParams.contains(argName)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}