{
    "patch": "public boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n\n  if (NodeUtil.isCallOrNew(n)) {\n    if (NodeUtil.mayEffectMutableState(n)) {\n      return true;\n    } else {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (apply(child)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  if (n.isDelProp()) {\n    return true;\n  }\n\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n      return true;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..8ecbfda0 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,35 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+public boolean apply(Node n) {\n+  if (n == null) {\n+    return false;\n+  }\n+\n+  if (NodeUtil.isCallOrNew(n)) {\n+    if (NodeUtil.mayEffectMutableState(n)) {\n+      return true;\n+    } else {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (apply(child)) {\n+          return true;\n+        }\n+      }\n+    }\n+  }\n+\n+  if (n.isDelProp()) {\n+    return true;\n+  }\n+\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n+      return true;\n+    }\n+  }\n+\n+  return false;\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}