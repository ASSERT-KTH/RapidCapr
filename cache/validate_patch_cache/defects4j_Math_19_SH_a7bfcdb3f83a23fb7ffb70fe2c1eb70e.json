{
    "patch": "            } else if (boundaries != null) {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Check if normalization will overflow.\n                final double[] lowerInfiniteNorm = new double[init.length];\n                final double[] upperInfiniteNorm = new double[init.length];\n                for (int i = 0; i < init.length; i++) {\n                    lowerInfiniteNorm[i] = Double.POSITIVE_INFINITY;\n                    upperInfiniteNorm[i] = Double.NEGATIVE_INFINITY;\n                }\n                final PointValuePair pair = new PointValuePair(lowerInfiniteNorm, Double.NaN);\n                final double normLow = getObjectiveFunction().value(decoder.decode(pair.getPoint()));\n                pair.setPoint(upperInfiniteNorm);\n                final double normHigh = getObjectiveFunction().value(decoder.decode(pair.getPoint()));\n                if (Double.isInfinite(normLow) || Double.isInfinite(normHigh)) {\n                    throw new MathIllegalStateException();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..7dc35cac6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,25 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            } else if (boundaries != null) {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Check if normalization will overflow.\n+                final double[] lowerInfiniteNorm = new double[init.length];\n+                final double[] upperInfiniteNorm = new double[init.length];\n+                for (int i = 0; i < init.length; i++) {\n+                    lowerInfiniteNorm[i] = Double.POSITIVE_INFINITY;\n+                    upperInfiniteNorm[i] = Double.NEGATIVE_INFINITY;\n+                }\n+                final PointValuePair pair = new PointValuePair(lowerInfiniteNorm, Double.NaN);\n+                final double normLow = getObjectiveFunction().value(decoder.decode(pair.getPoint()));\n+                pair.setPoint(upperInfiniteNorm);\n+                final double normHigh = getObjectiveFunction().value(decoder.decode(pair.getPoint()));\n+                if (Double.isInfinite(normLow) || Double.isInfinite(normHigh)) {\n+                    throw new MathIllegalStateException();\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}