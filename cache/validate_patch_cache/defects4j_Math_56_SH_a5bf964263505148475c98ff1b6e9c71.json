{
    "patch": "int remainingIndex = index;\nfor (int i = 0; i < dimension - 1; i++) {\n    int idx = remainingIndex / uniCounterOffset[i];\n    indices[i] = idx;\n    remainingIndex -= idx * uniCounterOffset[i];\n}\nindices[last - 1] = remainingIndex;\n\nint sum = 0;\nfor (int i = 0; i < last - 1; i++) {\n    final int offset = uniCounterOffset[i];\n    sum += indices[i] * offset;\n}\n\nif (sum + indices[last - 1] > index) {\n    indices[last - 2] += 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..89ef947a2 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,23 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int remainingIndex = index;\n+for (int i = 0; i < dimension - 1; i++) {\n+    int idx = remainingIndex / uniCounterOffset[i];\n+    indices[i] = idx;\n+    remainingIndex -= idx * uniCounterOffset[i];\n+}\n+indices[last - 1] = remainingIndex;\n+\n+int sum = 0;\n+for (int i = 0; i < last - 1; i++) {\n+    final int offset = uniCounterOffset[i];\n+    sum += indices[i] * offset;\n+}\n+\n+if (sum + indices[last - 1] > index) {\n+    indices[last - 2] += 1;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][1] expected:<0> but was:<1>",
    "test_result": "FAIL"
}