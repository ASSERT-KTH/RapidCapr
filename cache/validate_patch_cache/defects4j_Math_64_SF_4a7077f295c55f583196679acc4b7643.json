{
    "patch": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.TooManyIterationsException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.DiagonalMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\npublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n\n    private static final double TWO_EPS_SQ = 2.0 * FastMath.sqrt(FastMath.sqrt(Precision.SAFE_MIN));\n\n    /** Levenberg-Marquardt parameter. */\n    private double lmPar;\n\n    /** Parameters evolution direction. */\n    private RealMatrix jacobianTranspose;\n\n    /** Diagonal of the normal equations. */\n    private double[] diag;\n\n    /** Threshold for QR ranking. */\n    private final double qrRankingThreshold;\n\n    /**\n     * Constructor with default threshold for QR ranking of 1e-6.\n     * @param checker Convergence checker.\n     */\n    public LevenbergMarquardtOptimizer(ConvergenceChecker<PointValuePair> checker) {\n        this(checker, 1.0e-6);\n    }\n\n    /**\n     * Constructor.\n     * @param checker Convergence checker.\n     * @param qrRankingThreshold Threshold used to determine the rank of the QR\n     * decomposition.\n     */\n    public LevenbergMarquardtOptimizer(ConvergenceChecker<PointValuePair> checker,\n                                       final double qrRankingThreshold) {\n        super(checker);\n        this.qrRankingThreshold = qrRankingThreshold;\n    }\n\n    /**\n     * Perform the optimization.\n     *\n     * @param maxEval Maximum number of evaluations.\n     * @param f Objective function.\n     * @param jacobian Jacobian of the function.\n     * @param targetValues Target value for the function.\n     * @param startPoint Start point for the optimization\n     * @return the point/value pair giving the optimal value of the objective function.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     * @throws TooManyIterationsException if the maximal number of iterations is exceeded.\n     */\n    @Override\n    protected PointValuePair doOptimize() {\n        double[][] weightedJacobian = computeWeightedJacobian(getTarget(),\n                                                               getWeight(),\n                                                               getPoint());\n        double[] residuals = computeResiduals(getTarget(),\n                                              getWeight(),\n                                              getPoint());\n        final double cost = computeCost(residuals);\n\n        // initialize iteration counter and flag\n        int k = 0;\n        boolean converged = false;\n\n        final double[] point = getPoint();\n        final int n = point.length;\n        final int m = residuals.length;\n\n        final RealMatrix weightedResiduals = new Array2DRowRealMatrix(residuals);\n\n        lmPar = 0.0;\n        // outer loop\n        while (!converged) {\n            k++;\n\n            // Evaluate the function at the current point\n            PointValuePair current = new PointValuePair(point, cost);\n            if (getConvergenceChecker() != null &&\n                    getConvergenceChecker().converged(k, current, null)) {\n                return current;\n            }\n\n            // Compute the Jacobian matrix\n            RealMatrix weightedJacobianMatrix = new Array2DRowRealMatrix(weightedJacobian);\n\n            // Build the normal equations matrix\n            RealMatrix lhs = weightedJacobianMatrix.transpose().multiply(weightedJacobianMatrix);\n            for (int diagIndex = 0; diagIndex < lhs.getColumnDimension(); diagIndex++) {\n                lhs.addToEntry(diagIndex, diagIndex, lmPar);\n            }\n\n            // Solve the normal equations\n            RealMatrix rhs = weightedJacobianMatrix.transpose().multiply(weightedResiduals);\n\n            RealMatrix solution;\n            try {\n                solution = new QRDecomposition(lhs, qrRankingThreshold).getSolver().solve(rhs);\n            } catch (SingularMatrixException e) {\n                // Singular matrix: Moore-Penrose pseudoinverse\n                final double[][] pseudoInv =\n                    new SingularValueDecomposition(weightedJacobianMatrix, getTolerance()).getSolver()\n                        .getInverse().getData();\n                solution = new Array2DRowRealMatrix(pseudoInv.length, rhs.getColumnDimension());\n                solution.setSubMatrix(pseudoInv, 0, 0);\n                solution = solution.multiply(weightedResiduals);\n            }\n\n            double[] dX = solution.getColumn(0);\n\n            // Update the estimated values\n            final double[] oldPoint = point.clone();\n            double[] newPoint = point.clone();\n            for (int i = 0; i < point.length; i++) {\n                newPoint[i] += dX[i];\n            }\n\n            // Update the errors\n            double[] newResiduals = computeResiduals(getTarget(),\n                                                     getWeight(),\n                                                     newPoint);\n            final double newCost = computeCost(newResiduals);\n\n            // Evaluate the next iteration and exit loop if convergence is reached\n            if (shouldStop(oldPoint, newPoint, oldPoint, newResiduals, cost, newCost)) {\n                converged = true;\n                current = new PointValuePair(newPoint, newCost);\n            } else {\n                // update jacobian and residuals\n                weightedJacobian = computeWeightedJacobian(getTarget(),\n                                                            getWeight(),\n                                                            newPoint);\n                residuals = computeResiduals(getTarget(),\n                                             getWeight(),\n                                             newPoint);\n                cost = newCost;\n                weightedResiduals.setColumnVector(0, residuals);\n                jacobianTranspose = weightedJacobianMatrix.transpose();\n                diag = new double[lhs.getColumnDimension()];\n                for (int i = 0; i < diag.length; ++i) {\n                    diag[i] = lhs.getEntry(i, i);\n                }\n\n                // Determine LM parameter\n                lmPar = determineLMParameter(weightedJacobian,\n                                             residuals,\n                                             diag,\n                                             oldRes,\n                                             oldSsq,\n                                             dX,\n                                             lmPar,\n                                             cost);\n\n                // If the LM parameter makes the cost worse, revert to previous point and error\n                if (isCostRelativeToleranceAchieved(cost, newCost) || cost < newCost) {\n                    System.arraycopy(oldPoint, 0, point, 0, point.length);\n                    weightedJacobian = computeWeightedJacobian(getTarget(),\n                                                                getWeight(),\n                                                                point);\n                    residuals = oldRes;\n                    cost = oldCost;\n                    weightedResiduals.setColumnVector(0, residuals);\n                    lmPar = 0;\n                } else {\n                    // Update oldX, oldRes, oldSsq\n                    System.arraycopy(point, 0, oldPoint, 0, point.length);\n                    oldRes = residuals.clone();\n                    oldCost = cost;\n                    oldSsq = computeSsq(oldRes);\n                }\n            }\n\n            if (k >= getMaxEvaluations()) {\n                throw new TooManyIterationsException(getMaxEvaluations());\n            }\n        }\n\n        return new PointValuePair(point, cost);\n    }\n\n    /**\n     * Determine the Levenberg-Marquardt parameter.\n     *\n     * @param weightedJacobian Weighted Jacobian matrix.\n     * @param residuals Residuals.\n     * @param diag Diagonal of the normal matrix, before adding Levenberg-Marquardt parameter.\n     * @param oldRes Old residuals.\n     * @param oldSsq Sum of the squared old residuals.\n     * @param delta  Evolution direction.\n     * @param par Current value of the Levenberg-Marquardt parameter.\n     * @param cost Current value of cost function.\n     */\n    private double determineLMParameter(final double[][] weightedJacobian,\n                                         final double[] residuals,\n                                         final double[] diag,\n                                         final double[] oldRes,\n                                         final double oldSsq,\n                                         final double[] delta,\n                                         double par,\n                                         final double cost) {\n\n        // Compute the new sum of squares\n        double tempPar;\n        final RealMatrix weightedResiduals = new Array2DRowRealMatrix(residuals);\n        final RealMatrix lhs = jacobianTranspose.multiply(jacobianTranspose.transpose());\n        for (int i = 0; i < lhs.getColumnDimension(); i++) {\n            lhs.addToEntry(i, i, par);\n        }\n        RealMatrix rhs = jacobianTranspose.multiply(weightedResiduals);\n        RealMatrix dX = new QRDecomposition(lhs, qrRankingThreshold).getSolver().solve(rh",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 50914932e..48a63b9b2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -238,231 +238,225 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected VectorialPointValuePair doOptimize()\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        // arrays shared with the other private methods\n-        solvedCols  = Math.min(rows, cols);\n-        diagR       = new double[cols];\n-        jacNorm     = new double[cols];\n-        beta        = new double[cols];\n-        permutation = new int[cols];\n-        lmDir       = new double[cols];\n-\n-        // local point\n-        double   delta   = 0;\n-        double   xNorm   = 0;\n-        double[] diag    = new double[cols];\n-        double[] oldX    = new double[cols];\n-        double[] oldRes  = new double[rows];\n-        double[] work1   = new double[cols];\n-        double[] work2   = new double[cols];\n-        double[] work3   = new double[cols];\n-\n-        // evaluate the function at the starting point and calculate its norm\n-        updateResidualsAndCost();\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.TooManyIterationsException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.DiagonalMatrix;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.optim.ConvergenceChecker;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathArrays;\n \n-        // outer loop\n-        lmPar = 0;\n-        boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n-        while (true) {\n-            incrementIterationsCounter();\n-\n-            // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n-            updateJacobian();\n-            qrDecomposition();\n-\n-            // compute Qt.res\n-            qTy(residuals);\n-            // now we don't need Q anymore,\n-            // so let jacobian contain the R matrix with its diagonal elements\n-            for (int k = 0; k < solvedCols; ++k) {\n-                int pk = permutation[k];\n-                jacobian[k][pk] = diagR[pk];\n-            }\n+public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n-            if (firstIteration) {\n+    private static final double TWO_EPS_SQ = 2.0 * FastMath.sqrt(FastMath.sqrt(Precision.SAFE_MIN));\n \n-                // scale the point according to the norms of the columns\n-                // of the initial jacobian\n-                xNorm = 0;\n-                for (int k = 0; k < cols; ++k) {\n-                    double dk = jacNorm[k];\n-                    if (dk == 0) {\n-                        dk = 1.0;\n-                    }\n-                    double xk = dk * point[k];\n-                    xNorm  += xk * xk;\n-                    diag[k] = dk;\n-                }\n-                xNorm = Math.sqrt(xNorm);\n+    /** Levenberg-Marquardt parameter. */\n+    private double lmPar;\n \n-                // initialize the step bound delta\n-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n+    /** Parameters evolution direction. */\n+    private RealMatrix jacobianTranspose;\n \n-            }\n+    /** Diagonal of the normal equations. */\n+    private double[] diag;\n \n-            // check orthogonality between function vector and jacobian columns\n-            double maxCosine = 0;\n-            if (cost != 0) {\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int    pj = permutation[j];\n-                    double s  = jacNorm[pj];\n-                    if (s != 0) {\n-                        double sum = 0;\n-                        for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n-                        }\n-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n-                    }\n-                }\n-            }\n-            if (maxCosine <= orthoTolerance) {\n-                // convergence has been reached\n+    /** Threshold for QR ranking. */\n+    private final double qrRankingThreshold;\n+\n+    /**\n+     * Constructor with default threshold for QR ranking of 1e-6.\n+     * @param checker Convergence checker.\n+     */\n+    public LevenbergMarquardtOptimizer(ConvergenceChecker<PointValuePair> checker) {\n+        this(checker, 1.0e-6);\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param checker Convergence checker.\n+     * @param qrRankingThreshold Threshold used to determine the rank of the QR\n+     * decomposition.\n+     */\n+    public LevenbergMarquardtOptimizer(ConvergenceChecker<PointValuePair> checker,\n+                                       final double qrRankingThreshold) {\n+        super(checker);\n+        this.qrRankingThreshold = qrRankingThreshold;\n+    }\n+\n+    /**\n+     * Perform the optimization.\n+     *\n+     * @param maxEval Maximum number of evaluations.\n+     * @param f Objective function.\n+     * @param jacobian Jacobian of the function.\n+     * @param targetValues Target value for the function.\n+     * @param startPoint Start point for the optimization\n+     * @return the point/value pair giving the optimal value of the objective function.\n+     * @throws ConvergenceException if the algorithm fails to converge.\n+     * @throws TooManyIterationsException if the maximal number of iterations is exceeded.\n+     */\n+    @Override\n+    protected PointValuePair doOptimize() {\n+        double[][] weightedJacobian = computeWeightedJacobian(getTarget(),\n+                                                               getWeight(),\n+                                                               getPoint());\n+        double[] residuals = computeResiduals(getTarget(),\n+                                              getWeight(),\n+                                              getPoint());\n+        final double cost = computeCost(residuals);\n+\n+        // initialize iteration counter and flag\n+        int k = 0;\n+        boolean converged = false;\n+\n+        final double[] point = getPoint();\n+        final int n = point.length;\n+        final int m = residuals.length;\n+\n+        final RealMatrix weightedResiduals = new Array2DRowRealMatrix(residuals);\n+\n+        lmPar = 0.0;\n+        // outer loop\n+        while (!converged) {\n+            k++;\n+\n+            // Evaluate the function at the current point\n+            PointValuePair current = new PointValuePair(point, cost);\n+            if (getConvergenceChecker() != null &&\n+                    getConvergenceChecker().converged(k, current, null)) {\n                 return current;\n             }\n \n-            // rescale if necessary\n-            for (int j = 0; j < cols; ++j) {\n-                diag[j] = Math.max(diag[j], jacNorm[j]);\n-            }\n+            // Compute the Jacobian matrix\n+            RealMatrix weightedJacobianMatrix = new Array2DRowRealMatrix(weightedJacobian);\n \n-            // inner loop\n-            for (double ratio = 0; ratio < 1.0e-4;) {\n+            // Build the normal equations matrix\n+            RealMatrix lhs = weightedJacobianMatrix.transpose().multiply(weightedJacobianMatrix);\n+            for (int diagIndex = 0; diagIndex < lhs.getColumnDimension(); diagIndex++) {\n+                lhs.addToEntry(diagIndex, diagIndex, lmPar);\n+            }\n \n-                // save the state\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    oldX[pj] = point[pj];\n-                }\n-                double previousCost = cost;\n-                double[] tmpVec = residuals;\n-                residuals = oldRes;\n-                oldRes    = tmpVec;\n-\n-                // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n-\n-                // compute the new point and the norm of the evolution direction\n-                double lmNorm = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    lmDir[pj] = -lmDir[pj];\n-                    point[pj] = oldX[pj] + lmDir[pj];\n-                    double s = diag[pj] * lmDir[pj];\n-                    lmNorm  += s * s;\n-                }\n-                lmNorm = Math.sqrt(lmNorm);\n-                // on the first iteration, adjust the initial step bound.\n-                if (firstIteration) {\n-                    delta = Math.min(delta, lmNorm);\n-                }\n+            // Solve the normal equations\n+            RealMatrix rhs = weightedJacobianMatrix.transpose().multiply(weightedResiduals);\n+\n+            RealMatrix solution;\n+            try {\n+                solution = new QRDecomposition(lhs, qrRankingThreshold).getSolver().solve(rhs);\n+            } catch (SingularMatrixException e) {\n+                // Singular matrix: Moore-Penrose pseudoinverse\n+                final double[][] pseudoInv =\n+                    new SingularValueDecomposition(weightedJacobianMatrix, getTolerance()).getSolver()\n+                        .getInverse().getData();\n+                solution = new Array2DRowRealMatrix(pseudoInv.length, rhs.getColumnDimension());\n+                solution.setSubMatrix(pseudoInv, 0, 0);\n+                solution = solution.multiply(weightedResiduals);\n+            }\n \n-                // evaluate the function at x + p and calculate its norm\n-                updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n+            double[] dX = solution.getColumn(0);\n \n-                // compute the scaled actual reduction\n-                double actRed = -1.0;\n-                if (0.1 * cost < previousCost) {\n-                    double r = cost / previousCost;\n-                    actRed = 1.0 - r * r;\n-                }\n+            // Update the estimated values\n+            final double[] oldPoint = point.clone();\n+            double[] newPoint = point.clone();\n+            for (int i = 0; i < point.length; i++) {\n+                newPoint[i] += dX[i];\n+            }\n \n-                // compute the scaled predicted reduction\n-                // and the scaled directional derivative\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    double dirJ = lmDir[pj];\n-                    work1[j] = 0;\n-                    for (int i = 0; i <= j; ++i) {\n-                        work1[i] += jacobian[i][pj] * dirJ;\n-                    }\n-                }\n-                double coeff1 = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    coeff1 += work1[j] * work1[j];\n+            // Update the errors\n+            double[] newResiduals = computeResiduals(getTarget(),\n+                                                     getWeight(),\n+                                                     newPoint);\n+            final double newCost = computeCost(newResiduals);\n+\n+            // Evaluate the next iteration and exit loop if convergence is reached\n+            if (shouldStop(oldPoint, newPoint, oldPoint, newResiduals, cost, newCost)) {\n+                converged = true;\n+                current = new PointValuePair(newPoint, newCost);\n+            } else {\n+                // update jacobian and residuals\n+                weightedJacobian = computeWeightedJacobian(getTarget(),\n+                                                            getWeight(),\n+                                                            newPoint);\n+                residuals = computeResiduals(getTarget(),\n+                                             getWeight(),\n+                                             newPoint);\n+                cost = newCost;\n+                weightedResiduals.setColumnVector(0, residuals);\n+                jacobianTranspose = weightedJacobianMatrix.transpose();\n+                diag = new double[lhs.getColumnDimension()];\n+                for (int i = 0; i < diag.length; ++i) {\n+                    diag[i] = lhs.getEntry(i, i);\n                 }\n-                double pc2 = previousCost * previousCost;\n-                coeff1 = coeff1 / pc2;\n-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n-                double preRed = coeff1 + 2 * coeff2;\n-                double dirDer = -(coeff1 + coeff2);\n-\n-                // ratio of the actual to the predicted reduction\n-                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n-\n-                // update the step bound\n-                if (ratio <= 0.25) {\n-                    double tmp =\n-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n-                            tmp = 0.1;\n-                        }\n-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n-                        lmPar /= tmp;\n-                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n-                    delta = 2 * lmNorm;\n-                    lmPar *= 0.5;\n-                }\n-\n-                // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n-                    // successful iteration, update the norm\n-                    firstIteration = false;\n-                    xNorm = 0;\n-                    for (int k = 0; k < cols; ++k) {\n-                        double xK = diag[k] * point[k];\n-                        xNorm    += xK * xK;\n-                    }\n-                    xNorm = Math.sqrt(xNorm);\n \n-                    // tests for convergence.\n-                    // we use the vectorial convergence checker\n-                } else {\n-                    // failed iteration, reset the previous values\n-                    cost = previousCost;\n-                    for (int j = 0; j < solvedCols; ++j) {\n-                        int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n-                    }\n-                    tmpVec    = residuals;\n+                // Determine LM parameter\n+                lmPar = determineLMParameter(weightedJacobian,\n+                                             residuals,\n+                                             diag,\n+                                             oldRes,\n+                                             oldSsq,\n+                                             dX,\n+                                             lmPar,\n+                                             cost);\n+\n+                // If the LM parameter makes the cost worse, revert to previous point and error\n+                if (isCostRelativeToleranceAchieved(cost, newCost) || cost < newCost) {\n+                    System.arraycopy(oldPoint, 0, point, 0, point.length);\n+                    weightedJacobian = computeWeightedJacobian(getTarget(),\n+                                                                getWeight(),\n+                                                                point);\n                     residuals = oldRes;\n-                    oldRes    = tmpVec;\n-                }\n-                if (checker==null) {\n-                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                        (preRed <= costRelativeTolerance) &&\n-                        (ratio <= 2.0)) ||\n-                       (delta <= parRelativeTolerance * xNorm)) {\n-                       return current;\n-                   }\n+                    cost = oldCost;\n+                    weightedResiduals.setColumnVector(0, residuals);\n+                    lmPar = 0;\n                 } else {\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n-                    }\n+                    // Update oldX, oldRes, oldSsq\n+                    System.arraycopy(point, 0, oldPoint, 0, point.length);\n+                    oldRes = residuals.clone();\n+                    oldCost = cost;\n+                    oldSsq = computeSsq(oldRes);\n                 }\n-                // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n-                            costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n-                            parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n-                            orthoTolerance);\n-                }\n-\n             }\n \n+            if (k >= getMaxEvaluations()) {\n+                throw new TooManyIterationsException(getMaxEvaluations());\n+            }\n         }\n \n+        return new PointValuePair(point, cost);\n     }\n \n+    /**\n+     * Determine the Levenberg-Marquardt parameter.\n+     *\n+     * @param weightedJacobian Weighted Jacobian matrix.\n+     * @param residuals Residuals.\n+     * @param diag Diagonal of the normal matrix, before adding Levenberg-Marquardt parameter.\n+     * @param oldRes Old residuals.\n+     * @param oldSsq Sum of the squared old residuals.\n+     * @param delta  Evolution direction.\n+     * @param par Current value of the Levenberg-Marquardt parameter.\n+     * @param cost Current value of cost function.\n+     */\n+    private double determineLMParameter(final double[][] weightedJacobian,\n+                                         final double[] residuals,\n+                                         final double[] diag,\n+                                         final double[] oldRes,\n+                                         final double oldSsq,\n+                                         final double[] delta,\n+                                         double par,\n+                                         final double cost) {\n+\n+        // Compute the new sum of squares\n+        double tempPar;\n+        final RealMatrix weightedResiduals = new Array2DRowRealMatrix(residuals);\n+        final RealMatrix lhs = jacobianTranspose.multiply(jacobianTranspose.transpose());\n+        for (int i = 0; i < lhs.getColumnDimension(); i++) {\n+            lhs.addToEntry(i, i, par);\n+        }\n+        RealMatrix rhs = jacobianTranspose.multiply(weightedResiduals);\n+        RealMatrix dX = new QRDecomposition(lhs, qrRankingThreshold).getSolver().solve(rh\n+\n     /**\n      * Determine the Levenberg-Marquardt parameter.\n      * <p>This implementation is a translation in Java of the MINPACK",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}