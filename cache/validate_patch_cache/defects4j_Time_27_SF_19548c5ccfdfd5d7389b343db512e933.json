{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    }\n    if (elementPairs.size() == 1 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        return new PeriodFormatter(sep, sep);\n    }\n    Iterator<Object> iterator = elementPairs.iterator();\n    Separator sep = null;\n    List<Object> tail = new ArrayList<>();\n    while (iterator.hasNext()) {\n        Object current = iterator.next();\n        if (current instanceof Separator) {\n            if (sep == null) {\n                sep = (Separator) current;\n            } else {\n                PeriodFormatter f = toFormatter(tail, notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                tail.clear();\n                tail.add(sep);\n                sep = (Separator) current;\n            }\n        } else {\n            tail.add(current);\n        }\n    }\n    Object[] comp = createComposite(tail);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..cc3d8296 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,45 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (elementPairs.size() == 1 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        return new PeriodFormatter(sep, sep);\n+    }\n+    Iterator<Object> iterator = elementPairs.iterator();\n+    Separator sep = null;\n+    List<Object> tail = new ArrayList<>();\n+    while (iterator.hasNext()) {\n+        Object current = iterator.next();\n+        if (current instanceof Separator) {\n+            if (sep == null) {\n+                sep = (Separator) current;\n+            } else {\n+                PeriodFormatter f = toFormatter(tail, notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+                tail.clear();\n+                tail.add(sep);\n+                sep = (Separator) current;\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            tail.add(current);\n         }\n     }\n+    Object[] comp = createComposite(tail);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}