{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // We detect the case where there is a bug in IE where an event handler behaves\n      // differently when its return value is used vs. when its return value is in an\n      // EXPR_RESULT.\n      if (NodeUtil.isExitStatement(maybeExpr)) {\n        // EXPR_RESULT can be followed by at most one label\n        if (n.getFirstChild().getNext() != null) {\n          return false;\n        }\n        if (NodeUtil.isLabeledStatement(n.getParent())) {\n          return false;\n        }\n      }\n\n      // Sometimes EXPR_RESULTs shouldn't be folded into other expressions.\n      // The list of nodes here is from the rhino LinkedHashMap in its Parser.java\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        switch (maybeExpr.getType()) {\n          case Token.ARRAYLIT:\n          case Token.BLOCK:\n          case Token.CALL:\n          case Token.CASE:\n          case Token.CATCH:\n          case Token.COMMA:\n          case Token.DEBUGGER:\n          case Token.DEFAULT:\n          case Token.DELETE:\n          case Token.DO:\n          case Token.EMPTY:\n          case Token.EXPR_RESULT:\n          case Token.FALSE:\n          case Token.FOR:\n          case Token.FUNCTION:\n          case Token.HOOK:\n          case Token.IFEQ:\n          case Token.IFNE:\n          case Token.INSTANCEOF:\n          case Token.LABEL:\n          case Token.NEG:\n          case Token.NEW:\n          case Token.NOT:\n          case Token.NULL:\n          case Token.NUMBER:\n          case Token.OBJECTLIT:\n          case Token.REGEXP:\n          case Token.RETURN:\n          case Token.SHEQ:\n          case Token.SHNE:\n          case Token.STRING:\n          case Token.SWITCH:\n          case Token.THIS:\n          case Token.TRUE:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.WHILE:\n          case Token.WITH:\n            return true;\n\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a7518b67 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,78 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // We detect the case where there is a bug in IE where an event handler behaves\n+      // differently when its return value is used vs. when its return value is in an\n+      // EXPR_RESULT.\n+      if (NodeUtil.isExitStatement(maybeExpr)) {\n+        // EXPR_RESULT can be followed by at most one label\n+        if (n.getFirstChild().getNext() != null) {\n+          return false;\n+        }\n+        if (NodeUtil.isLabeledStatement(n.getParent())) {\n+          return false;\n+        }\n       }\n-    }\n \n-    return false;\n+      // Sometimes EXPR_RESULTs shouldn't be folded into other expressions.\n+      // The list of nodes here is from the rhino LinkedHashMap in its Parser.java\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        switch (maybeExpr.getType()) {\n+          case Token.ARRAYLIT:\n+          case Token.BLOCK:\n+          case Token.CALL:\n+          case Token.CASE:\n+          case Token.CATCH:\n+          case Token.COMMA:\n+          case Token.DEBUGGER:\n+          case Token.DEFAULT:\n+          case Token.DELETE:\n+          case Token.DO:\n+          case Token.EMPTY:\n+          case Token.EXPR_RESULT:\n+          case Token.FALSE:\n+          case Token.FOR:\n+          case Token.FUNCTION:\n+          case Token.HOOK:\n+          case Token.IFEQ:\n+          case Token.IFNE:\n+          case Token.INSTANCEOF:\n+          case Token.LABEL:\n+          case Token.NEG:\n+          case Token.NEW:\n+          case Token.NOT:\n+          case Token.NULL:\n+          case Token.NUMBER:\n+          case Token.OBJECTLIT:\n+          case Token.REGEXP:\n+          case Token.RETURN:\n+          case Token.SHEQ:\n+          case Token.SHNE:\n+          case Token.STRING:\n+          case Token.SWITCH:\n+          case Token.THIS:\n+          case Token.TRUE:\n+          case Token.TYPEOF:\n+          case Token.VOID:\n+          case Token.WHILE:\n+          case Token.WITH:\n+            return true;\n+\n+          default:\n+            break;\n+        }\n+      }\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}