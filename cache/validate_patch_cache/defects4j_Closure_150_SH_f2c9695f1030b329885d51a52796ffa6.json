{
    "patch": "Node firstChild = n.getFirstChild();\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (!NodeUtil.isFunctionExpression(n)) {\n            if (parent != null && parent.getType() == Token.NAME) {\n                // Named function expressions are already handled.\n                return;\n            } else if (parent != null && parent.getType() == Token.ASSIGN &&\n                       firstChild != null && firstChild.getType() == Token.GETPROP) {\n                // Named function expressions that are assigned to a property are already handled\n                return;\n            }\n        }\n        if (scope.isVarDeclared(parent)) {\n            if (scope.isNamespaceDecl(parent)) {\n                defineNamespace(n, parent);\n            }\n            defineDeclaredFunction(n, parent);\n        } else if (parent != null && parent.getType() == Token.CALL) {\n            defineDeclaredFunction(n, parent);\n        } else if (parent != null && parent.getType() == Token.ASSIGN) {\n            defineDeclaredFunction(n, parent);\n        }\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    default:\n        break;\n}\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..91836cb2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,40 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+Node firstChild = n.getFirstChild();\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (!NodeUtil.isFunctionExpression(n)) {\n+            if (parent != null && parent.getType() == Token.NAME) {\n+                // Named function expressions are already handled.\n+                return;\n+            } else if (parent != null && parent.getType() == Token.ASSIGN &&\n+                       firstChild != null && firstChild.getType() == Token.GETPROP) {\n+                // Named function expressions that are assigned to a property are already handled\n+                return;\n+            }\n+        }\n+        if (scope.isVarDeclared(parent)) {\n+            if (scope.isNamespaceDecl(parent)) {\n+                defineNamespace(n, parent);\n+            }\n+            defineDeclaredFunction(n, parent);\n+        } else if (parent != null && parent.getType() == Token.CALL) {\n+            defineDeclaredFunction(n, parent);\n+        } else if (parent != null && parent.getType() == Token.ASSIGN) {\n+            defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    default:\n+        break;\n+}\n+attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}