{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n\n        // check that newMillis value is within valid range\n        DateTimeField field = savedFields[i].iField;\n        int value = field.get(newMillis);\n        if (value != savedFields[i].iValue) {\n            // The new value is different from the parsed value\n            // This could happen e.g. if the parsed value is too large for the field\n            // Attempt to repair by moving the excess value to the next field\n\n            // we only check era field here. This is because there is no direct way of handling era field values that are out of range\n            if (field.getType() == DateTimeFieldType.era()) {\n                if (value == 0 && savedFields[i].iValue == 1) {\n                    newMillis = field.add(newMillis, -1);\n                } else if (value == 1 && savedFields[i].iValue == 0) {\n                    newMillis = field.add(newMillis, 1);\n                } else {\n                    throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n                }\n            } else {\n                DateTimeField nextField = null;\n                int excessValue = value - savedFields[i].iValue;\n                for (int j = i + 1; excessValue > 0 && j < count; j++) {\n                    DateTimeField f = savedFields[j].iField;\n                    if (f.getDurationField().getType() == field.getDurationField().getType()) {\n                        // found next field of the same type\n                        nextField = f;\n                        break;\n                    }\n                }\n                if (nextField != null) {\n                    // move excessValue to nextField\n                    int nextValue = nextField.get(newMillis);\n                    int maxNextValue = nextField.getMaximumValue();\n                    int moveValue = Math.min(excessValue, maxNextValue - nextValue);\n                    excessValue -= moveValue;\n                    newMillis = nextField.set(newMillis, nextValue + moveValue);\n                }\n\n                if (excessValue != 0 || !field.isValidValue(newMillis)) {\n                    throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n                }\n            }\n        }\n\n        // Check that all fields are consistent with each other\n        for (int j = 0; j < i; j++) {\n            DurationField f1 = savedFields[i].iField.getDurationField();\n            DurationField f2 = savedFields[j].iField.getDurationField();\n            // Only check fields of the same type\n            if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n                continue;\n            }\n            int v1 = savedFields[i].iField.get(newMillis);\n            int v2 = savedFields[j].iField.get(newMillis);\n            if (v1 != v2) {\n                throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i].iField.getName() +\n                        \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n            }\n        }\n\n        // Validate newMillis value\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..03d13362 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,78 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+\n+        // check that newMillis value is within valid range\n+        DateTimeField field = savedFields[i].iField;\n+        int value = field.get(newMillis);\n+        if (value != savedFields[i].iValue) {\n+            // The new value is different from the parsed value\n+            // This could happen e.g. if the parsed value is too large for the field\n+            // Attempt to repair by moving the excess value to the next field\n+\n+            // we only check era field here. This is because there is no direct way of handling era field values that are out of range\n+            if (field.getType() == DateTimeFieldType.era()) {\n+                if (value == 0 && savedFields[i].iValue == 1) {\n+                    newMillis = field.add(newMillis, -1);\n+                } else if (value == 1 && savedFields[i].iValue == 0) {\n+                    newMillis = field.add(newMillis, 1);\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n+                }\n+            } else {\n+                DateTimeField nextField = null;\n+                int excessValue = value - savedFields[i].iValue;\n+                for (int j = i + 1; excessValue > 0 && j < count; j++) {\n+                    DateTimeField f = savedFields[j].iField;\n+                    if (f.getDurationField().getType() == field.getDurationField().getType()) {\n+                        // found next field of the same type\n+                        nextField = f;\n+                        break;\n+                    }\n+                }\n+                if (nextField != null) {\n+                    // move excessValue to nextField\n+                    int nextValue = nextField.get(newMillis);\n+                    int maxNextValue = nextField.getMaximumValue();\n+                    int moveValue = Math.min(excessValue, maxNextValue - nextValue);\n+                    excessValue -= moveValue;\n+                    newMillis = nextField.set(newMillis, nextValue + moveValue);\n+                }\n+\n+                if (excessValue != 0 || !field.isValidValue(newMillis)) {\n+                    throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n+                }\n+            }\n+        }\n+\n+        // Check that all fields are consistent with each other\n+        for (int j = 0; j < i; j++) {\n+            DurationField f1 = savedFields[i].iField.getDurationField();\n+            DurationField f2 = savedFields[j].iField.getDurationField();\n+            // Only check fields of the same type\n+            if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n+                continue;\n+            }\n+            int v1 = savedFields[i].iField.get(newMillis);\n+            int v2 = savedFields[j].iField.get(newMillis);\n+            if (v1 != v2) {\n+                throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i].iField.getName() +\n+                        \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+            }\n+        }\n+\n+        // Validate newMillis value\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}