{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double s1 = v1.getNorm();\n    final double s2 = v2.getNorm();\n    if (s1 == 0 || s2 == 0) {\n        return Vector3D.ZERO;\n    }\n \n    final double normProduct = s1 * s2;\n    final double scale = FastMath.sqrt(normProduct);\n    final double invCrossNorm = 1.0 / scale;\n   \n    final double v1x = v1.getX() * invCrossNorm;\n    final double v1y = v1.getY() * invCrossNorm;\n    final double v1z = v1.getZ() * invCrossNorm;\n\n    final double v2x = v2.getX() * invCrossNorm;\n    final double v2y = v2.getY() * invCrossNorm;\n    final double v2z = v2.getZ() * invCrossNorm;\n\n    // replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n    final double dotProduct = v1x * v2x + v1y * v2y + v1z * v2z;\n    final double v3x = v1x - dotProduct * v2x;\n    final double v3y = v1y - dotProduct * v2y;\n    final double v3z = v1z - dotProduct * v2z;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..2a3a2cc73 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,41 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double s1 = v1.getNorm();\n+    final double s2 = v2.getNorm();\n+    if (s1 == 0 || s2 == 0) {\n+        return Vector3D.ZERO;\n+    }\n+ \n+    final double normProduct = s1 * s2;\n+    final double scale = FastMath.sqrt(normProduct);\n+    final double invCrossNorm = 1.0 / scale;\n+   \n+    final double v1x = v1.getX() * invCrossNorm;\n+    final double v1y = v1.getY() * invCrossNorm;\n+    final double v1z = v1.getZ() * invCrossNorm;\n+\n+    final double v2x = v2.getX() * invCrossNorm;\n+    final double v2y = v2.getY() * invCrossNorm;\n+    final double v2z = v2.getZ() * invCrossNorm;\n+\n+    // replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double dotProduct = v1x * v2x + v1y * v2y + v1z * v2z;\n+    final double v3x = v1x - dotProduct * v2x;\n+    final double v3y = v1y - dotProduct * v2y;\n+    final double v3z = v1z - dotProduct * v2z;\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.19738550848793074>",
    "test_result": "FAIL"
}