{
    "patch": "    // Use initial value as a starting point for the solver, or the midpoint if it's outside the range\n    if (initial < min || initial > max) {\n        initial = (min + max) / 2.0;\n    }\n\n    // Check if function values at min and max have opposite signs\n    if (f.value(min) * f.value(max) >= 0) {\n        throw new IllegalArgumentException(\"Invalid range: function values at min and max must have opposite signs\");\n    }\n\n    // Create a new instance of the solver and set the tolerance and maximum iterations\n    BrentSolver solver = new BrentSolver();\n    solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n    solver.setMaximalIterationCount(getMaximalIterationCount());\n\n    // Solve the function using the given solver\n    return solver.solve(f, min, max, initial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..d75355bf4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,23 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    // Use initial value as a starting point for the solver, or the midpoint if it's outside the range\n+    if (initial < min || initial > max) {\n+        initial = (min + max) / 2.0;\n+    }\n+\n+    // Check if function values at min and max have opposite signs\n+    if (f.value(min) * f.value(max) >= 0) {\n+        throw new IllegalArgumentException(\"Invalid range: function values at min and max must have opposite signs\");\n+    }\n+\n+    // Create a new instance of the solver and set the tolerance and maximum iterations\n+    BrentSolver solver = new BrentSolver();\n+    solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n+    solver.setMaximalIterationCount(getMaximalIterationCount());\n+\n+    // Solve the function using the given solver\n+    return solver.solve(f, min, max, initial);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}