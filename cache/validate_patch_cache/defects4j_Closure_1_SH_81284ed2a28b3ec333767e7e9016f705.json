{
    "patch": "    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // Make a note of the last required argument (if any) and the highest\n    // parameter number.\n    Node argumentList = function.getFirstChild().getNext();\n    final int lastRequiredArg = NodeUtil.findLastNonOptionalParameterIndex(argumentList);\n    final int numParams = argumentList.getChildCount();\n\n    int numArgsToRemove = 0;\n    for (int i = numParams - 1; i >= 0; i--) {\n      Node currentArgNode = argumentList.getChildAtIndex(i);\n      String name = currentArgNode.getString();\n      if (i > lastRequiredArg && !referenced.contains(fnScope.getVar(name))) {\n        numArgsToRemove++;\n      } else if (numArgsToRemove > 0) {\n        // Remove the unused args from the param list and body.\n        Node next = currentArgNode.getNext();\n        argList.removeChild(currentArgNode);\n        function.getLastChild().removeChild(next.getParent());\n        compiler.reportCodeChange();\n      }\n\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4d710d13 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Make a note of the last required argument (if any) and the highest\n+    // parameter number.\n+    Node argumentList = function.getFirstChild().getNext();\n+    final int lastRequiredArg = NodeUtil.findLastNonOptionalParameterIndex(argumentList);\n+    final int numParams = argumentList.getChildCount();\n+\n+    int numArgsToRemove = 0;\n+    for (int i = numParams - 1; i >= 0; i--) {\n+      Node currentArgNode = argumentList.getChildAtIndex(i);\n+      String name = currentArgNode.getString();\n+      if (i > lastRequiredArg && !referenced.contains(fnScope.getVar(name))) {\n+        numArgsToRemove++;\n+      } else if (numArgsToRemove > 0) {\n+        // Remove the unused args from the param list and body.\n+        Node next = currentArgNode.getNext();\n+        argList.removeChild(currentArgNode);\n+        function.getLastChild().removeChild(next.getParent());\n+        compiler.reportCodeChange();\n+      }\n+\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}