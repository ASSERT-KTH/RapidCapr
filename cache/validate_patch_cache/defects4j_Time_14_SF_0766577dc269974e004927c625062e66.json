{
    "patch": "        boolean keepTime = false;\n        for (int i = 0; i < fieldIndex; i++) {\n            if (values[i] != 0) {\n                keepTime = true;\n                break;\n            }\n        }\n\n        if (keepTime) {\n            long instant = 0L;\n            for (int i = 0; i < fieldIndex; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            Partial filled = partial.getChronology().set(partial, instant);\n            filled = filled.plusMonths(valueToAdd);\n            int[] newValues = new int[values.length];\n            for (int i = 0; i < fieldIndex; i++) {\n                newValues[i] = filled.getValue(i);\n            }\n            for (int i = fieldIndex; i < newValues.length; i++) {\n                newValues[i] = values[i];\n            }\n            if (!DateTimeUtils.isContiguous(partial)) {\n                newValues = partial.getChronology().retain(filled, newValues);\n            }\n            return newValues;\n        } else {\n            Chronology chrono = partial.getChronology().withUTC();\n            long instant = 0L;\n            for (int i = 0; i < fieldIndex; i++) {\n                instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] newValues = chrono.get(partial, instant);\n            if (!DateTimeUtils.isContiguous(partial)) {\n                newValues = partial.getChronology().retain(chrono, newValues);\n            }\n            return newValues;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2ea3cf58 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,44 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+        boolean keepTime = false;\n+        for (int i = 0; i < fieldIndex; i++) {\n+            if (values[i] != 0) {\n+                keepTime = true;\n+                break;\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+\n+        if (keepTime) {\n             long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            for (int i = 0; i < fieldIndex; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            Partial filled = partial.getChronology().set(partial, instant);\n+            filled = filled.plusMonths(valueToAdd);\n+            int[] newValues = new int[values.length];\n+            for (int i = 0; i < fieldIndex; i++) {\n+                newValues[i] = filled.getValue(i);\n+            }\n+            for (int i = fieldIndex; i < newValues.length; i++) {\n+                newValues[i] = values[i];\n+            }\n+            if (!DateTimeUtils.isContiguous(partial)) {\n+                newValues = partial.getChronology().retain(filled, newValues);\n+            }\n+            return newValues;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            Chronology chrono = partial.getChronology().withUTC();\n+            long instant = 0L;\n+            for (int i = 0; i < fieldIndex; i++) {\n+                instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n+            }\n+            instant = add(instant, valueToAdd);\n+            int[] newValues = chrono.get(partial, instant);\n+            if (!DateTimeUtils.isContiguous(partial)) {\n+                newValues = partial.getChronology().retain(chrono, newValues);\n+            }\n+            return newValues;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}