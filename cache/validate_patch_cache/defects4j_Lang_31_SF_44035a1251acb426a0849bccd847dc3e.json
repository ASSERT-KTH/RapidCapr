{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n        return false;\n    }\n\n    final int length = sequence.length();\n    final int searchLength = searchCharacters.length;\n\n    if (searchLength == 1) {\n        final char searchChar = searchCharacters[0];\n        for (int i = 0; i < length; i++) {\n            if (sequence.charAt(i) == searchChar) {\n                return true;\n            }\n        }\n    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n        // Character.isSurrogatePair() has 2 overloaded methods which take either 2 chars or 1 int\n        final int cp = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n        for (int i = 0; i < length; i++) {\n            final int charAt = Character.codePointAt(sequence, i);\n            if (charAt == cp) {\n                return true;\n            }\n            i += Character.charCount(charAt) - 1;\n        }\n    } else {\n        final Set<Integer> set = new HashSet<Integer>(searchLength);\n        for (final char ch : searchCharacters) {\n            set.add((int) ch);\n        }\n        final int[] codePoints = getCodePoints(sequence, length);\n        final int codePointLength = codePoints.length;\n        for (int i = 0; i < codePointLength; i++) {\n            if (set.contains(codePoints[i])) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static int[] getCodePoints(final CharSequence sequence, final int length) {\n    final int[] result = new int[length];\n    int index = 0;\n    for (int i = 0; i < length; i++) {\n        final char ch = sequence.charAt(i);\n        if (Character.isHighSurrogate(ch) && i < length - 1) {\n            final char ch2 = sequence.charAt(i + 1);\n            if (Character.isLowSurrogate(ch2)) {\n                result[index++] = Character.toCodePoint(ch, ch2);\n                i++;\n            } else {\n                result[index++] = ch;\n            }\n        } else {\n            result[index++] = ch;\n        }\n    }\n    if (result.length != index) {\n        result = Arrays.copyOf(result, index);\n    }\n    return result;\n}\n\npublic static boolean isEmpty(CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..81783d29 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,73 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+        return false;\n+    }\n+\n+    final int length = sequence.length();\n+    final int searchLength = searchCharacters.length;\n+\n+    if (searchLength == 1) {\n+        final char searchChar = searchCharacters[0];\n+        for (int i = 0; i < length; i++) {\n+            if (sequence.charAt(i) == searchChar) {\n+                return true;\n+            }\n+        }\n+    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n+        // Character.isSurrogatePair() has 2 overloaded methods which take either 2 chars or 1 int\n+        final int cp = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n+        for (int i = 0; i < length; i++) {\n+            final int charAt = Character.codePointAt(sequence, i);\n+            if (charAt == cp) {\n+                return true;\n+            }\n+            i += Character.charCount(charAt) - 1;\n+        }\n+    } else {\n+        final Set<Integer> set = new HashSet<Integer>(searchLength);\n+        for (final char ch : searchCharacters) {\n+            set.add((int) ch);\n+        }\n+        final int[] codePoints = getCodePoints(sequence, length);\n+        final int codePointLength = codePoints.length;\n+        for (int i = 0; i < codePointLength; i++) {\n+            if (set.contains(codePoints[i])) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int[] getCodePoints(final CharSequence sequence, final int length) {\n+    final int[] result = new int[length];\n+    int index = 0;\n+    for (int i = 0; i < length; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (Character.isHighSurrogate(ch) && i < length - 1) {\n+            final char ch2 = sequence.charAt(i + 1);\n+            if (Character.isLowSurrogate(ch2)) {\n+                result[index++] = Character.toCodePoint(ch, ch2);\n+                i++;\n+            } else {\n+                result[index++] = ch;\n+            }\n+        } else {\n+            result[index++] = ch;\n+        }\n+    }\n+    if (result.length != index) {\n+        result = Arrays.copyOf(result, index);\n+    }\n+    return result;\n+}\n+\n+public static boolean isEmpty(CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}