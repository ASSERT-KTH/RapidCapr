{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (parent.getType() == Token.FINALLY) {\n        if (fromNode != null) {\n          cfa.createEdge(fromNode, Branch.UNCOND, node);\n        }\n        if (cfa != null) {\n          for (Node exitNode : cfa.finallyMap.get(parent.getParent())) {\n            cfa.createEdge(node, Branch.UNCOND, exitNode);\n          }\n        }\n        return computeFollowNode(fromNode, parent.getParent(), cfa);\n      }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..50eeb8a8 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -769,6 +769,39 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n+      } else if (parent.getType() == Token.FINALLY) {\n+        if (fromNode != null) {\n+          cfa.createEdge(fromNode, Branch.UNCOND, node);\n+        }\n+        if (cfa != null) {\n+          for (Node exitNode : cfa.finallyMap.get(parent.getParent())) {\n+            cfa.createEdge(node, Branch.UNCOND, exitNode);\n+          }\n+        }\n+        return computeFollowNode(fromNode, parent.getParent(), cfa);\n+      }\n+    }\n+\n+    // Now that we are done with the special cases follow should be its\n+    // immediate sibling, unless its sibling is a function\n+    Node nextSibling = node.getNext();\n+\n+    // Skip function declarations because control doesn't get pass into it.\n+    while (nextSibling != null && nextSibling.isFunction()) {\n+      nextSibling = nextSibling.getNext();\n+    }\n+\n+    if (nextSibling != null) {\n+      return computeFallThrough(nextSibling);\n+    } else {\n+      // If there are no more siblings, control is transferred up the AST.\n+      return computeFollowNode(fromNode, parent, cfa);\n+    }\n+  }\n+            }\n+          }\n+          return computeFollowNode(fromNode, parent, cfa);\n+        }\n     }\n \n     // Now that we are done with the special cases follow should be its",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}