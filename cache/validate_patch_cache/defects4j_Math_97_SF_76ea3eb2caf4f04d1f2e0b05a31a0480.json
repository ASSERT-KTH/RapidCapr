{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either endpoint is a root\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        ret = min;\n    } else if (yMax == 0.0) {\n        setResult(max, 0);\n        ret = max;\n    } else {\n        // Verify bracketing\n        double sign = yMin * yMax;\n\n        if (sign >= 0.0) {\n            // check if either value is close to a zero\n            double yMid = f.value((min + max) / 2.0);\n            if (yMid == 0.0) {\n                setResult((min + max) / 2.0, 0);\n                ret = (min + max) / 2.0;\n            } else if (yMid * yMin < 0.0) {\n                ret = solve(min, (min + max) / 2.0);\n            } else {\n                ret = solve((min + max) / 2.0, max);\n            }\n        } else {\n            // Check for non-bracketing\n            double oldMid = Double.POSITIVE_INFINITY;\n            double yMid = Double.POSITIVE_INFINITY;\n            double mid = Double.POSITIVE_INFINITY;\n\n            for (int i = 0; i < DEFAULT_MAXIMAL_ITERATIONS; ++i) {\n                mid = (min + max) / 2.0;\n                yMid = f.value(mid);\n\n                if (yMid == 0.0) {\n                    setResult(mid, 0);\n                    ret = mid;\n                    break;\n                }\n\n                if ((yMid > 0.0) == (yMin > 0.0)) {\n                    yMin = yMid;\n                    min = mid;\n                } else {\n                    max = mid;\n                }\n\n                if (i > 0 && Math.abs(yMid) >= Math.abs(oldMid)) {\n                    throw new IllegalArgumentException(\"Function values are not converging.\");\n                }\n\n                if (Math.abs(max - min) <= absoluteAccuracy) {\n                    setResult(mid, yMid);\n                    ret = mid;\n                    break;\n                }\n\n                oldMid = yMid;\n            }\n\n            if (Double.isNaN(ret)) {\n                throw new MaxIterationsExceededException(DEFAULT_MAXIMAL_ITERATIONS);\n            }\n        }\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..db7d3e96b 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,83 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Check if either endpoint is a root\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        ret = min;\n+    } else if (yMax == 0.0) {\n+        setResult(max, 0);\n+        ret = max;\n+    } else {\n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n+\n+        if (sign >= 0.0) {\n             // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            double yMid = f.value((min + max) / 2.0);\n+            if (yMid == 0.0) {\n+                setResult((min + max) / 2.0, 0);\n+                ret = (min + max) / 2.0;\n+            } else if (yMid * yMin < 0.0) {\n+                ret = solve(min, (min + max) / 2.0);\n+            } else {\n+                ret = solve((min + max) / 2.0, max);\n+            }\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+            // Check for non-bracketing\n+            double oldMid = Double.POSITIVE_INFINITY;\n+            double yMid = Double.POSITIVE_INFINITY;\n+            double mid = Double.POSITIVE_INFINITY;\n+\n+            for (int i = 0; i < DEFAULT_MAXIMAL_ITERATIONS; ++i) {\n+                mid = (min + max) / 2.0;\n+                yMid = f.value(mid);\n \n-        return ret;\n+                if (yMid == 0.0) {\n+                    setResult(mid, 0);\n+                    ret = mid;\n+                    break;\n+                }\n+\n+                if ((yMid > 0.0) == (yMin > 0.0)) {\n+                    yMin = yMid;\n+                    min = mid;\n+                } else {\n+                    max = mid;\n+                }\n+\n+                if (i > 0 && Math.abs(yMid) >= Math.abs(oldMid)) {\n+                    throw new IllegalArgumentException(\"Function values are not converging.\");\n+                }\n+\n+                if (Math.abs(max - min) <= absoluteAccuracy) {\n+                    setResult(mid, yMid);\n+                    ret = mid;\n+                    break;\n+                }\n+\n+                oldMid = yMid;\n+            }\n+\n+            if (Double.isNaN(ret)) {\n+                throw new MaxIterationsExceededException(DEFAULT_MAXIMAL_ITERATIONS);\n+            }\n+        }\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}