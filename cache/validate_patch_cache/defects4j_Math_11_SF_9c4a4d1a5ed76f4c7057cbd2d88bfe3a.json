{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    final double normalizationFactor = Math.pow(2 * Math.PI, -dim / 2.0) / Math.sqrt(Math.abs(covarianceMatrixDeterminant));\n\n    if (Double.isNaN(normalizationFactor) || Double.isInfinite(normalizationFactor)) {\n        // handle large or small normalizationFactor values that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    double exponentTerm = getExponentTerm(vals);\n    \n    if (Double.isNaN(exponentTerm) || Double.isInfinite(exponentTerm)) {\n        // handle large or small exponentTerm values that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    final double result = normalizationFactor * exponentTerm;\n    \n    if (Double.isNaN(result) || Double.isInfinite(result)) {\n        // handle large or small result values that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..9a04282de 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,36 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n+\n+    final double normalizationFactor = Math.pow(2 * Math.PI, -dim / 2.0) / Math.sqrt(Math.abs(covarianceMatrixDeterminant));\n+\n+    if (Double.isNaN(normalizationFactor) || Double.isInfinite(normalizationFactor)) {\n+        // handle large or small normalizationFactor values that might cause an overflow or underflow\n+        return 0.0;\n+    }\n+\n+    double exponentTerm = getExponentTerm(vals);\n+    \n+    if (Double.isNaN(exponentTerm) || Double.isInfinite(exponentTerm)) {\n+        // handle large or small exponentTerm values that might cause an overflow or underflow\n+        return 0.0;\n+    }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    final double result = normalizationFactor * exponentTerm;\n+    \n+    if (Double.isNaN(result) || Double.isInfinite(result)) {\n+        // handle large or small result values that might cause an overflow or underflow\n+        return 0.0;\n     }\n \n+    return result;\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}