{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    for (Type type : typeVariable.getBounds()) {\n        if (type != null) {\n            registerTypeVariablesOn(type);\n        }\n    }\n\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class<?> cls = (Class<?>) typeVariable.getGenericDeclaration();\n        TypeVariable<?>[] typeParameters = cls.getTypeParameters();\n        for (TypeVariable<?> typeParam : typeParameters) {\n            if(typeParam.getName().equals(typeVariable.getName())) {\n                Type actualTypeArgument = getActualTypeArgumentFor(typeParam);\n                if (actualTypeArgument instanceof TypeVariable) {\n                    registerTypeVariablesFromTypeVariable((TypeVariable) actualTypeArgument);\n                } else if (actualTypeArgument != null) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n                return;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b3a1ec801 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type != null) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class<?> cls = (Class<?>) typeVariable.getGenericDeclaration();\n+        TypeVariable<?>[] typeParameters = cls.getTypeParameters();\n+        for (TypeVariable<?> typeParam : typeParameters) {\n+            if(typeParam.getName().equals(typeVariable.getName())) {\n+                Type actualTypeArgument = getActualTypeArgumentFor(typeParam);\n+                if (actualTypeArgument instanceof TypeVariable) {\n+                    registerTypeVariablesFromTypeVariable((TypeVariable) actualTypeArgument);\n+                } else if (actualTypeArgument != null) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+                return;\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}