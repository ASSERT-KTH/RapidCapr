{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      Node maybeName = NodeUtil.getEnclosingNode(n.getParent(),\n          new NodeUtil.MatchFunction() {\n            @Override\n            public boolean shouldContinue(NodeTraversal traversal, Node n, Node parent) {\n              return n.getType() == Token.EXPR_RESULT ||\n                  // Could be a variable declaration with multiple variables being declared.\n                  n.getType() == Token.VAR;\n            }\n          });\n      if (maybeName != null &&\n          isGetLValue(maybeName.getFirstChild()) &&\n          isPrototypePropertyGet(maybeName.getFirstChild())) {\n        // This is a function that is being lent to a prototype, e.g., Foo.prototype.bar = fn;\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..05cd8cd9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node maybeName = NodeUtil.getEnclosingNode(n.getParent(),\n+          new NodeUtil.MatchFunction() {\n+            @Override\n+            public boolean shouldContinue(NodeTraversal traversal, Node n, Node parent) {\n+              return n.getType() == Token.EXPR_RESULT ||\n+                  // Could be a variable declaration with multiple variables being declared.\n+                  n.getType() == Token.VAR;\n+            }\n+          });\n+      if (maybeName != null &&\n+          isGetLValue(maybeName.getFirstChild()) &&\n+          isPrototypePropertyGet(maybeName.getFirstChild())) {\n+        // This is a function that is being lent to a prototype, e.g., Foo.prototype.bar = fn;\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}