{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.jscomp.NodeUtil;\n\nimport java.util.function.Predicate;\n\npublic class Program {\n    static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n      switch (value.getType()) {\n          case Token.ASSIGN:\n              // A result that is aliased by a non-local name, is the effectively the\n              // same as returning a non-local name, but this doesn't matter if the\n              // value is immutable.\n              return NodeUtil.isImmutableValue(value.getLastChild())\n                      || (locals.apply(value)\n                      && evaluatesToLocalValue(value.getLastChild(), locals));\n          case Token.COMMA:\n              return evaluatesToLocalValue(value.getLastChild(), locals);\n          case Token.AND:\n          case Token.OR:\n              return evaluatesToLocalValue(value.getFirstChild(), locals)\n                      && evaluatesToLocalValue(value.getLastChild(), locals);\n          case Token.HOOK:\n              return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                      && evaluatesToLocalValue(value.getLastChild(), locals);\n          case Token.INC:\n          case Token.DEC:\n              if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                  return evaluatesToLocalValue(value.getFirstChild(), locals);\n              } else {\n                  return true;\n              }\n          case Token.THIS:\n              return locals.apply(value);\n          case Token.NAME:\n              return isImmutableValue(value) || locals.apply(value);\n          case Token.GETELEM:\n          case Token.GETPROP:\n              // There is no information about the locality of object properties.\n              return locals.apply(value);\n          case Token.CALL:\n              return callHasLocalResult(value)\n                      || isToStringMethodCall(value)\n                      || locals.apply(value);\n          case Token.NEW:\n              return newHasLocalResult(value)\n                      || locals.apply(value);\n          case Token.FUNCTION:\n          case Token.REGEXP:\n          case Token.ARRAYLIT:\n          case Token.OBJECTLIT:\n              // Literals objects with non-literal children are allowed.\n              return true;\n          case Token.IN:\n              // The left-hand side of the IN operator should evaluate to a local value.\n              return evaluatesToLocalValue(value.getFirstChild(), locals);\n          default:\n              // Other op force a local value:\n              //  x = '' + g (x is now an local string)\n              //  x -= g (x is now an local number)\n              if (isAssignmentOp(value)\n                      || isSimpleOperator(value)\n                      || isImmutableValue(value)) {\n                  return true;\n              }\n\n              throw new IllegalStateException(\n                      \"Unexpected expression node\" + value +\n                              \"\\n parent:\" + value.getParent());\n      }\n    }\n\n    private static boolean isImmutableValue(Node value) {\n      return NodeUtil.isImmutableValue(value);\n    }\n\n    private static boolean isToStringMethodCall(Node n) {\n        if (n.getFirstChild().getType() == Token.STRING\n                && n.getFirstChild().getString().equals(\"toString\")\n                && n.getFirstChild().getNext() == null) {\n            return n.getType() == Token.CALL;\n        } else {\n            return false;\n        }\n    }\n\n    private static boolean newHasLocalResult(Node n) {\n        return true;\n    }\n\n    private static boolean callHasLocalResult(Node n) {\n        return true;\n    }\n\n    private static boolean isSimpleOperator(Node n) {\n      return NodeUtil.isSimpleOperatorType(n.getType());\n    }\n\n    private static boolean isAssignmentOp(Node n) {\n      return NodeUtil.isAssignmentOp(n.getType());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..5441f39b 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,108 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n-        return true;\n-      default:\n-        return false;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.jscomp.NodeUtil;\n+\n+import java.util.function.Predicate;\n+\n+public class Program {\n+    static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+      switch (value.getType()) {\n+          case Token.ASSIGN:\n+              // A result that is aliased by a non-local name, is the effectively the\n+              // same as returning a non-local name, but this doesn't matter if the\n+              // value is immutable.\n+              return NodeUtil.isImmutableValue(value.getLastChild())\n+                      || (locals.apply(value)\n+                      && evaluatesToLocalValue(value.getLastChild(), locals));\n+          case Token.COMMA:\n+              return evaluatesToLocalValue(value.getLastChild(), locals);\n+          case Token.AND:\n+          case Token.OR:\n+              return evaluatesToLocalValue(value.getFirstChild(), locals)\n+                      && evaluatesToLocalValue(value.getLastChild(), locals);\n+          case Token.HOOK:\n+              return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+                      && evaluatesToLocalValue(value.getLastChild(), locals);\n+          case Token.INC:\n+          case Token.DEC:\n+              if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+                  return evaluatesToLocalValue(value.getFirstChild(), locals);\n+              } else {\n+                  return true;\n+              }\n+          case Token.THIS:\n+              return locals.apply(value);\n+          case Token.NAME:\n+              return isImmutableValue(value) || locals.apply(value);\n+          case Token.GETELEM:\n+          case Token.GETPROP:\n+              // There is no information about the locality of object properties.\n+              return locals.apply(value);\n+          case Token.CALL:\n+              return callHasLocalResult(value)\n+                      || isToStringMethodCall(value)\n+                      || locals.apply(value);\n+          case Token.NEW:\n+              return newHasLocalResult(value)\n+                      || locals.apply(value);\n+          case Token.FUNCTION:\n+          case Token.REGEXP:\n+          case Token.ARRAYLIT:\n+          case Token.OBJECTLIT:\n+              // Literals objects with non-literal children are allowed.\n+              return true;\n+          case Token.IN:\n+              // The left-hand side of the IN operator should evaluate to a local value.\n+              return evaluatesToLocalValue(value.getFirstChild(), locals);\n+          default:\n+              // Other op force a local value:\n+              //  x = '' + g (x is now an local string)\n+              //  x -= g (x is now an local number)\n+              if (isAssignmentOp(value)\n+                      || isSimpleOperator(value)\n+                      || isImmutableValue(value)) {\n+                  return true;\n+              }\n+\n+              throw new IllegalStateException(\n+                      \"Unexpected expression node\" + value +\n+                              \"\\n parent:\" + value.getParent());\n+      }\n     }\n-  }\n \n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+    private static boolean isImmutableValue(Node value) {\n+      return NodeUtil.isImmutableValue(value);\n     }\n-    return false;\n-  }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n-\n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n-  }\n+    private static boolean isToStringMethodCall(Node n) {\n+        if (n.getFirstChild().getType() == Token.STRING\n+                && n.getFirstChild().getString().equals(\"toString\")\n+                && n.getFirstChild().getNext() == null) {\n+            return n.getType() == Token.CALL;\n+        } else {\n+            return false;\n+        }\n+    }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+    private static boolean newHasLocalResult(Node n) {\n+        return true;\n     }\n-  }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+    private static boolean callHasLocalResult(Node n) {\n+        return true;\n+    }\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n-  }\n+    private static boolean isSimpleOperator(Node n) {\n+      return NodeUtil.isSimpleOperatorType(n.getType());\n+    }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+    private static boolean isAssignmentOp(Node n) {\n+      return NodeUtil.isAssignmentOp(n.getType());\n+    }\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}