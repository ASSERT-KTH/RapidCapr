{
    "patch": "       removeLast:\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          for (Node node = function.getLastChild().getFirstChild();\n              node != null; node = node.getNext()) {\n            if (NodeUtil.isName(node) && node.getString().equals(lastArg.getString())) {\n              for (Node argParent = lastArg.getParent(); argParent != null && node.getNext() != null;\n                   argParent = argParent.getParent()) {\n                if (argParent.isCall() || argParent.isNew()) {\n                  Node nextArg = node.getNext();\n                  node.removeChild();\n                  argParent.addChildAfter(nextArg, lastArg);\n                  continue removeLast;\n                }\n              }\n              lastArg.detach();\n              break;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f959cd43 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+       removeLast:\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          for (Node node = function.getLastChild().getFirstChild();\n+              node != null; node = node.getNext()) {\n+            if (NodeUtil.isName(node) && node.getString().equals(lastArg.getString())) {\n+              for (Node argParent = lastArg.getParent(); argParent != null && node.getNext() != null;\n+                   argParent = argParent.getParent()) {\n+                if (argParent.isCall() || argParent.isNew()) {\n+                  Node nextArg = node.getNext();\n+                  node.removeChild();\n+                  argParent.addChildAfter(nextArg, lastArg);\n+                  continue removeLast;\n+                }\n+              }\n+              lastArg.detach();\n+              break;\n+            }\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}