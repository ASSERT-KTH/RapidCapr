{
    "patch": "            boolean dstLocal = isDaylightSavings(instantLocal - offsetLocal);\n            boolean dstAdjusted = isDaylightSavings(instantAdjusted - offsetAdjusted);\n            if (dstLocal != dstAdjusted) {\n                if (dstLocal && nextTransition(instantLocal - offsetLocal) == instantAdjusted - offsetAdjusted) {\n                    return offsetLocal;\n                } else if (dstAdjusted && previousTransition(instantAdjusted - offsetAdjusted) == instantLocal - offsetLocal) {\n                    return offsetAdjusted;\n                } else {\n                    throw new IllegalStateException(\"The datetime zone gave a different offset to the calculated one\");\n                }\n            } else {\n                if (offsetLocal > offsetAdjusted && dstLocal) {\n                    long prevAdjusted = previousTransition(instantAdjusted);\n                    if (prevAdjusted < instantLocal - offsetLocal) {\n                        return offsetLocal;\n                    }\n                } else {\n                    long nextAdjusted = nextTransition(instantAdjusted);\n                    if (nextAdjusted <= instantLocal - offsetLocal) {\n                        return offsetAdjusted;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..11f3a4eb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            boolean dstLocal = isDaylightSavings(instantLocal - offsetLocal);\n+            boolean dstAdjusted = isDaylightSavings(instantAdjusted - offsetAdjusted);\n+            if (dstLocal != dstAdjusted) {\n+                if (dstLocal && nextTransition(instantLocal - offsetLocal) == instantAdjusted - offsetAdjusted) {\n+                    return offsetLocal;\n+                } else if (dstAdjusted && previousTransition(instantAdjusted - offsetAdjusted) == instantLocal - offsetLocal) {\n+                    return offsetAdjusted;\n+                } else {\n+                    throw new IllegalStateException(\"The datetime zone gave a different offset to the calculated one\");\n+                }\n+            } else {\n+                if (offsetLocal > offsetAdjusted && dstLocal) {\n+                    long prevAdjusted = previousTransition(instantAdjusted);\n+                    if (prevAdjusted < instantLocal - offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    long nextAdjusted = nextTransition(instantAdjusted);\n+                    if (nextAdjusted <= instantLocal - offsetLocal) {\n+                        return offsetAdjusted;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}