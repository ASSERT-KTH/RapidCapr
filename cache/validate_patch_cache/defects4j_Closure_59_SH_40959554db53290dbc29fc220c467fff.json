{
    "patch": "// Set the warning level for GLOBAL_THIS based on checkGlobalThisLevel\nif (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n}\n\n// Turn off GLOBAL_THIS warning if checkGlobalThisLevel is not enabled\nif (options.checkGlobalThisLevel == CheckLevel.OFF) {\n    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF));\n} else {\n    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..b774ccb9 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,21 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+// Set the warning level for GLOBAL_THIS based on checkGlobalThisLevel\n+if (options.checkGlobalThisLevel.isOn()) {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        options.checkGlobalThisLevel);\n+}\n+\n+// Turn off GLOBAL_THIS warning if checkGlobalThisLevel is not enabled\n+if (options.checkGlobalThisLevel == CheckLevel.OFF) {\n+    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n+        DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF));\n+} else {\n+    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n+        DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel));\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}