{
    "patch": "Apologies for my previous response. Try replacing the `INFILL` with this code:\n```\n    boolean isOverride = parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop &&\n        parent.getParent().getType() != Token.EXPR_RESULT &&\n        !NodeUtil.isExpressionStatement(parent);\n``` \nThis ensures that the condition for `isOverride` is only true when the `getprop` is on the left-hand side of an assignment that is not an expression statement.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..84a38987 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,14 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+Apologies for my previous response. Try replacing the `INFILL` with this code:\n+```\n+    boolean isOverride = parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop &&\n+        parent.getParent().getType() != Token.EXPR_RESULT &&\n+        !NodeUtil.isExpressionStatement(parent);\n+``` \n+This ensures that the condition for `isOverride` is only true when the `getprop` is on the left-hand side of an assignment that is not an expression statement.\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}