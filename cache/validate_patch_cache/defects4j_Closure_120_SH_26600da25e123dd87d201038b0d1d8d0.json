{
    "patch": "      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          Node cfgNode = block.getCfg().getBaseGraph().getNode(ref.getNode().getId());\n          List<DiGraphEdge<Node, Branch>> branchEdges = block.getCfg().getOutEdges(cfgNode);\n          boolean foundAssignmentInLoop = false;\n          for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n            if (edge.getValue() == Branch.NORMAL) {\n              Node successorNode = edge.getTarget();\n              int successorIndex = successorNode.getIndexOfReference(ref);\n              if (isInitializingAssignmentAt(successorIndex)) {\n                foundAssignmentInLoop = true;\n                break;\n              }\n            }\n          }\n          return !foundAssignmentInLoop;\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5f1bc943 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          Node cfgNode = block.getCfg().getBaseGraph().getNode(ref.getNode().getId());\n+          List<DiGraphEdge<Node, Branch>> branchEdges = block.getCfg().getOutEdges(cfgNode);\n+          boolean foundAssignmentInLoop = false;\n+          for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+            if (edge.getValue() == Branch.NORMAL) {\n+              Node successorNode = edge.getTarget();\n+              int successorIndex = successorNode.getIndexOfReference(ref);\n+              if (isInitializingAssignmentAt(successorIndex)) {\n+                foundAssignmentInLoop = true;\n+                break;\n+              }\n+            }\n+          }\n+          return !foundAssignmentInLoop;\n+        }\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}