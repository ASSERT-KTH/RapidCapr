{
    "patch": "import org.apache.commons.math.exception.MathIllegalStateException;\nimport org.apache.commons.math.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\n\npublic class BisectionSolver extends BaseAbstractUnivariateSolver {\n\n    /**\n     * Construct a solver.\n     */\n    public BisectionSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public BisectionSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Relative accuracy.\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public BisectionSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Relative accuracy.\n     * @param absoluteAccuracy Absolute accuracy.\n     * @param functionValueAccuracy Function value accuracy.\n     */\n    public BisectionSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy,\n                           final double functionValueAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Find a zero near the midpoint of {@code min} and {@code max}.\n     *\n     * @param min Lower bound for the interval.\n     * @param max Upper bound for the interval.\n     * @param function Function to solve.\n     * @return the value where the function is zero, within the given\n     * tolerance.\n     * @throws org.apache.commons.math.FunctionEvaluationException if an error occurs evaluating\n     * the function.\n     * @throws org.apache.commons.math.MaxIterationsExceededException if the maximum number of\n     * iterations is exceeded.\n     * @throws IllegalArgumentException if min > max or the endpoints do not\n     * bracket a zero.\n     */\n    public double solve(final double min, final double max,\n                        final UnivariateFunction function)\n        throws TooManyEvaluationsException {\n        clearResult();\n        validate(min,max);\n        int i = 0;\n        double m;\n        double fm; // initializations to make compiler happy\n        while (i < maximalIterationCount) {\n            // calculate the midpoint\n            m = UnivariateSolverUtils.midpoint(min, max);\n            fm = computeObjectiveValue(m);\n\n            final double fmin = computeObjectiveValue(min);\n            if (fm * fmin <= 0.0) {\n                // solution in [min, m]\n                max = m;\n            } else {\n                // solution in [m, max]\n                min = m;\n            }\n\n            i++;\n            if (FastMath.abs(max - min) <= absoluteAccuracy ||\n                FastMath.abs(fm) <= functionValueAccuracy) {\n                m = UnivariateSolverUtils.midpoint(min, max);\n                setResult(m, i);\n                return m;\n            }\n        }\n        throw new TooManyEvaluationsException(maximalIterationCount);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation of this method is based on the bisection algorithm.\n     */\n    protected double doSolve()\n        throws MathIllegalStateException, TooManyEvaluationsException {\n\n        double min = getMin();\n        double max = getMax();\n        verifyInterval(min, max);\n\n        double ret = Double.NaN;\n        double oldDelta = max - min;\n        double newDelta = oldDelta;\n\n        double fmin = computeObjectiveValue(min);\n        if (fmin == 0.0) {\n            setResult(min, 0);\n            return min;\n        }\n        double fmax = computeObjectiveValue(max);\n        if (fmax == 0.0) {\n            setResult(max, 0);\n            return max;\n        }\n\n        // ensure the root bracketing\n        verifyBracketing(min, max);\n\n        int i = 0;\n        while (i < maximalIterationCount) {\n            // compute the midpoint\n            final double m = UnivariateSolverUtils.midpoint(min, max);\n            final double fmid = computeObjectiveValue(m);\n\n            // check if the midpoint is a root\n            final double delta = (max - min) / 2;\n            if (fmid == 0.0 || (delta < absoluteAccuracy && FastMath.abs(fmid) <= functionValueAccuracy)) {\n                ret = m;\n                break;\n            }\n\n            // check for termination\n            if (FastMath.abs(delta) < FastMath.max(relativeAccuracy * FastMath.abs(m), absoluteAccuracy)) {\n                ret = UnivariateSolverUtils.midpoint(min, max);\n                break;\n            }\n\n            // update the interval\n            if (fmid * fmin > 0) {\n                // the min side is the old interval\n                oldDelta = max - min;\n                min = m;\n                fmin = fmid;\n            } else {\n                // the max side is the old interval\n                oldDelta = max - min;\n                max = m;\n                fmax = fmid;\n            }\n\n            // if the bisection point is the same as the last iteration, check if\n            // we have bisected by enough and return the last computed m\n            newDelta = max - min;\n            if (i > 0 && oldDelta <= newDelta) {\n                if (FastMath.abs(delta) <= relativeAccuracy * FastMath.abs(ret) ||\n                        FastMath.abs(fmid) <= functionValueAccuracy) {\n                    break;\n                }\n            }\n            i++;\n        }\n\n        if (i >= maximalIterationCount) {\n            throw new TooManyEvaluationsException(maximalIterationCount);\n        }\n\n        setResult(ret, i);\n        return ret;\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..8e2958287 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,186 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+import org.apache.commons.math.exception.MathIllegalStateException;\n+import org.apache.commons.math.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\n+\n+public class BisectionSolver extends BaseAbstractUnivariateSolver {\n+\n+    /**\n+     * Construct a solver.\n+     */\n+    public BisectionSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public BisectionSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy, Method.BISECTION);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public BisectionSolver(final double relativeAccuracy,\n+                           final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, Method.BISECTION);\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param functionValueAccuracy Function value accuracy.\n+     */\n+    public BisectionSolver(final double relativeAccuracy,\n+                           final double absoluteAccuracy,\n+                           final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.BISECTION);\n+    }\n+\n+    /**\n+     * Find a zero near the midpoint of {@code min} and {@code max}.\n+     *\n+     * @param min Lower bound for the interval.\n+     * @param max Upper bound for the interval.\n+     * @param function Function to solve.\n+     * @return the value where the function is zero, within the given\n+     * tolerance.\n+     * @throws org.apache.commons.math.FunctionEvaluationException if an error occurs evaluating\n+     * the function.\n+     * @throws org.apache.commons.math.MaxIterationsExceededException if the maximum number of\n+     * iterations is exceeded.\n+     * @throws IllegalArgumentException if min > max or the endpoints do not\n+     * bracket a zero.\n+     */\n+    public double solve(final double min, final double max,\n+                        final UnivariateFunction function)\n+        throws TooManyEvaluationsException {\n+        clearResult();\n+        validate(min,max);\n+        int i = 0;\n+        double m;\n+        double fm; // initializations to make compiler happy\n+        while (i < maximalIterationCount) {\n+            // calculate the midpoint\n+            m = UnivariateSolverUtils.midpoint(min, max);\n+            fm = computeObjectiveValue(m);\n+\n+            final double fmin = computeObjectiveValue(min);\n+            if (fm * fmin <= 0.0) {\n+                // solution in [min, m]\n+                max = m;\n+            } else {\n+                // solution in [m, max]\n+                min = m;\n+            }\n+\n+            i++;\n+            if (FastMath.abs(max - min) <= absoluteAccuracy ||\n+                FastMath.abs(fm) <= functionValueAccuracy) {\n+                m = UnivariateSolverUtils.midpoint(min, max);\n+                setResult(m, i);\n+                return m;\n+            }\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        throw new TooManyEvaluationsException(maximalIterationCount);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The implementation of this method is based on the bisection algorithm.\n+     */\n+    protected double doSolve()\n+        throws MathIllegalStateException, TooManyEvaluationsException {\n+\n+        double min = getMin();\n+        double max = getMax();\n+        verifyInterval(min, max);\n+\n+        double ret = Double.NaN;\n+        double oldDelta = max - min;\n+        double newDelta = oldDelta;\n+\n+        double fmin = computeObjectiveValue(min);\n+        if (fmin == 0.0) {\n+            setResult(min, 0);\n+            return min;\n+        }\n+        double fmax = computeObjectiveValue(max);\n+        if (fmax == 0.0) {\n+            setResult(max, 0);\n+            return max;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n-\n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n-\n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n-\n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+        // ensure the root bracketing\n+        verifyBracketing(min, max);\n+\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            // compute the midpoint\n+            final double m = UnivariateSolverUtils.midpoint(min, max);\n+            final double fmid = computeObjectiveValue(m);\n+\n+            // check if the midpoint is a root\n+            final double delta = (max - min) / 2;\n+            if (fmid == 0.0 || (delta < absoluteAccuracy && FastMath.abs(fmid) <= functionValueAccuracy)) {\n+                ret = m;\n+                break;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            // check for termination\n+            if (FastMath.abs(delta) < FastMath.max(relativeAccuracy * FastMath.abs(m), absoluteAccuracy)) {\n+                ret = UnivariateSolverUtils.midpoint(min, max);\n+                break;\n+            }\n+\n+            // update the interval\n+            if (fmid * fmin > 0) {\n+                // the min side is the old interval\n+                oldDelta = max - min;\n+                min = m;\n+                fmin = fmid;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                // the max side is the old interval\n+                oldDelta = max - min;\n+                max = m;\n+                fmax = fmid;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n+\n+            // if the bisection point is the same as the last iteration, check if\n+            // we have bisected by enough and return the last computed m\n+            newDelta = max - min;\n+            if (i > 0 && oldDelta <= newDelta) {\n+                if (FastMath.abs(delta) <= relativeAccuracy * FastMath.abs(ret) ||\n+                        FastMath.abs(fmid) <= functionValueAccuracy) {\n                     break;\n-                default:\n-                    throw new MathInternalError();\n                 }\n             }\n+            i++;\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n+        if (i >= maximalIterationCount) {\n+            throw new TooManyEvaluationsException(maximalIterationCount);\n         }\n+\n+        setResult(ret, i);\n+        return ret;\n+\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}