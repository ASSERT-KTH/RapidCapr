{
    "patch": "    Node function = fnScope.getRootNode();\n    // Check if this is the parameters object literal setter, as its arguments\n    // cannot be removed.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    if (modifyCallSites\n          && (callSiteOptimizationMode == CallSiteOptimizationMode.LAZY ||\n              callSiteOptimizer.canModifyCallers(function))) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } else {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      int unusedArgCount = 0;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          unusedArgCount++;\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // Don't delete unused parameters when there is only one.\n      if (unusedArgCount > 1) {\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0663d65d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    // Check if this is the parameters object literal setter, as its arguments\n+    // cannot be removed.\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    if (modifyCallSites\n+          && (callSiteOptimizationMode == CallSiteOptimizationMode.LAZY ||\n+              callSiteOptimizer.canModifyCallers(function))) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      int unusedArgCount = 0;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          unusedArgCount++;\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // Don't delete unused parameters when there is only one.\n+      if (unusedArgCount > 1) {\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}