{
    "patch": "Context rhsContext = Context.OTHER;\nif (ast[i] instanceof InfixExpression) {\n    InfixExpression ie = (InfixExpression) ast[i];\n    if (ie.getOperator() == Operator.EQUALS\n            && ie.getRightOperand() instanceof ArrayInitializer) {\n        rhsContext = Context.ARRAY_LITERAL;\n    } else if (ie.getOperator() == Operator.IN) {\n        rhsContext = Context.NOT_EXPRESSION;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}