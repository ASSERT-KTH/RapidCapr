{
    "patch": "import org.mockito.Mockito;\nimport org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\npublic class InnerClassSpyHack implements Answer<Object> {\n    private final Object outer;\n\n    public InnerClassSpyHack(Object outer) {\n        this.outer = outer;\n    }\n\n    @Override\n    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n        Class<?> clazz = (Class<?>) invocationOnMock.getArguments()[0];\n        if (clazz.isAnonymousClass() || !clazz.isMemberClass()) {\n            return Mockito.RETURNS_DEFAULTS.answer(invocationOnMock);\n        }\n        Object object = Mockito.mock(clazz, new MockSettingsImpl().defaultAnswer(this));\n        new MockUtil().getMockHandler(object).setExternalMockitoMock(outer);\n        return object;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..b69ff2933 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,30 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+import org.mockito.Mockito;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+public class InnerClassSpyHack implements Answer<Object> {\n+    private final Object outer;\n+\n+    public InnerClassSpyHack(Object outer) {\n+        this.outer = outer;\n+    }\n+\n+    @Override\n+    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n+        Class<?> clazz = (Class<?>) invocationOnMock.getArguments()[0];\n+        if (clazz.isAnonymousClass() || !clazz.isMemberClass()) {\n+            return Mockito.RETURNS_DEFAULTS.answer(invocationOnMock);\n         }\n+        Object object = Mockito.mock(clazz, new MockSettingsImpl().defaultAnswer(this));\n+        new MockUtil().getMockHandler(object).setExternalMockitoMock(outer);\n+        return object;\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}