{
    "patch": "        SavedField lastSavedField = null;\n        int yearFieldIdx = -1;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            if (lastSavedField != null) {\n                if (lastSavedField.compareTo(savedField) > 0) {\n                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + lastSavedField.iField.getName() + \" -> \" + savedField.iField.getName());\n                }\n            }\n            try {\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n                    if (yearFieldIdx == -1 || yearFieldIdx == i - 1) {\n                        // Year is occasionally interpreted wrong due to Gregorian Reform\n                        iDefaultYear = -iDefaultYear;\n                        long instant = savedField.iField.set(0L, iDefaultYear);\n                        millis = savedField.iField.set(instant, savedField.iValue);\n                        yearFieldIdx = i;\n                    } else {\n                        throw e;\n                    }\n                } else {\n                    throw e;\n                }\n            }\n            lastSavedField = savedField;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3cddf7c6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastSavedField = null;\n+        int yearFieldIdx = -1;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            if (lastSavedField != null) {\n+                if (lastSavedField.compareTo(savedField) > 0) {\n+                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + lastSavedField.iField.getName() + \" -> \" + savedField.iField.getName());\n+                }\n+            }\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n+                    if (yearFieldIdx == -1 || yearFieldIdx == i - 1) {\n+                        // Year is occasionally interpreted wrong due to Gregorian Reform\n+                        iDefaultYear = -iDefaultYear;\n+                        long instant = savedField.iField.set(0L, iDefaultYear);\n+                        millis = savedField.iField.set(instant, savedField.iValue);\n+                        yearFieldIdx = i;\n+                    } else {\n+                        throw e;\n+                    }\n+                } else {\n+                    throw e;\n+                }\n+            }\n+            lastSavedField = savedField;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}