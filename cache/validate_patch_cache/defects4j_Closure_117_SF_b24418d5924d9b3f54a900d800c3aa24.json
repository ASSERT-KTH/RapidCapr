{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n                objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n                  objectType, propName);\n        } else {\n          // classes\n          ObjectType inherited = objectType;\n          while (inherited != null) {\n            // check the exact class for the property\n            if (inherited.hasOwnProperty(propName)) {\n              objectType = inherited;\n              break;\n            }\n            inherited = inherited.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n                (objectType.getConstructor() != null ||\n                        objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n            (type.toObjectType() != null &&\n                    type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..471dcd69 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,7 +721,7 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n@@ -733,21 +733,27 @@ class TypeValidator {\n       if (objectType != null) {\n         String propName = n.getLastChild().getString();\n         if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n+                objectType.getConstructor().isInterface()) {\n           objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n+                  objectType, propName);\n         } else {\n           // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n+          ObjectType inherited = objectType;\n+          while (inherited != null) {\n+            // check the exact class for the property\n+            if (inherited.hasOwnProperty(propName)) {\n+              objectType = inherited;\n+              break;\n+            }\n+            inherited = inherited.getImplicitPrototype();\n           }\n         }\n \n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n         if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n+                (objectType.getConstructor() != null ||\n+                        objectType.isFunctionPrototypeType())) {\n           return objectType.toString() + \".\" + propName;\n         }\n       }\n@@ -761,8 +767,8 @@ class TypeValidator {\n       }\n     }\n     if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n+            (type.toObjectType() != null &&\n+                    type.toObjectType().getConstructor() != null)) {\n       return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...p never defined on C[2]> but was:<...p never defined on C[3.c2_]>",
    "test_result": "FAIL"
}