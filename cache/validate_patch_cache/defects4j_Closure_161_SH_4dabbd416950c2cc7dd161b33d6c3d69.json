{
    "patch": "if (left.getType() == Token.ARRAYLIT && left.getChildCount() == 0) {\n  if (NodeUtil.isAssignmentOp(parent)) {\n    return n;\n  } else {\n    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n    parent.replaceChild(n, undefinedNode);\n    reportCodeChange();\n    return undefinedNode;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..f269a0ea 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,16 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() == Token.ARRAYLIT && left.getChildCount() == 0) {\n+  if (NodeUtil.isAssignmentOp(parent)) {\n+    return n;\n+  } else {\n+    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+    parent.replaceChild(n, undefinedNode);\n+    reportCodeChange();\n+    return undefinedNode;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}