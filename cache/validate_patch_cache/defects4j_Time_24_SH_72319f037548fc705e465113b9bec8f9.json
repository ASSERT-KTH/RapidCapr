{
    "patch": "        SortedSet<DurationField> sortedFields = new TreeSet<>(new Comparator<DurationField>() {\n            @Override\n            public int compare(DurationField field1, DurationField field2) {\n                long difference = field1.getUnitMillis() - field2.getUnitMillis();\n                if (difference == 0) {\n                    String fieldName1 = field1.getName();\n                    String fieldName2 = field2.getName();\n                    if (\"year\".equals(fieldName2)) {\n                        return -1;\n                    }\n                    if (\"year\".equals(fieldName1)) {\n                        return 1;\n                    }\n                    if (\"month\".equals(fieldName2) || \"weekyear\".equals(fieldName2)) {\n                        return -1;\n                    }\n                    if (\"month\".equals(fieldName1) || \"weekyear\".equals(fieldName1)) {\n                        return 1;\n                    }\n                    if (\"day\".equals(fieldName2) || \"week\".equals(fieldName2)) {\n                        return -1;\n                    }\n                    if (\"day\".equals(fieldName1) || \"week\".equals(fieldName1)) {\n                        return 1;\n                    }\n                }\n                return (difference < 0) ? -1 : (difference > 0) ? 1 : 0;\n            }\n        });\n        for (int i = 0; i < count; i++) {\n            DurationField durationField = savedFields[i].iField.getDurationField();\n            if (durationField != null) {\n                sortedFields.add(durationField);\n            }\n        }\n        for (DurationField durationField : sortedFields) {\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getDurationField() == durationField) {\n                    long newMillis = savedFields[i].set(millis, resetFields);\n                    if (newMillis == Long.MIN_VALUE) {\n                        throw new IllegalArgumentException(\"Provided date is out of range: too small\");\n                    }\n                    if (newMillis == Long.MAX_VALUE) {\n                        throw new IllegalArgumentException(\"Provided date is out of range: too large\");\n                    }\n                    millis = newMillis;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..443dab6a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,55 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SortedSet<DurationField> sortedFields = new TreeSet<>(new Comparator<DurationField>() {\n+            @Override\n+            public int compare(DurationField field1, DurationField field2) {\n+                long difference = field1.getUnitMillis() - field2.getUnitMillis();\n+                if (difference == 0) {\n+                    String fieldName1 = field1.getName();\n+                    String fieldName2 = field2.getName();\n+                    if (\"year\".equals(fieldName2)) {\n+                        return -1;\n+                    }\n+                    if (\"year\".equals(fieldName1)) {\n+                        return 1;\n+                    }\n+                    if (\"month\".equals(fieldName2) || \"weekyear\".equals(fieldName2)) {\n+                        return -1;\n+                    }\n+                    if (\"month\".equals(fieldName1) || \"weekyear\".equals(fieldName1)) {\n+                        return 1;\n+                    }\n+                    if (\"day\".equals(fieldName2) || \"week\".equals(fieldName2)) {\n+                        return -1;\n+                    }\n+                    if (\"day\".equals(fieldName1) || \"week\".equals(fieldName1)) {\n+                        return 1;\n+                    }\n+                }\n+                return (difference < 0) ? -1 : (difference > 0) ? 1 : 0;\n+            }\n+        });\n+        for (int i = 0; i < count; i++) {\n+            DurationField durationField = savedFields[i].iField.getDurationField();\n+            if (durationField != null) {\n+                sortedFields.add(durationField);\n+            }\n+        }\n+        for (DurationField durationField : sortedFields) {\n+            for (int i = 0; i < count; i++) {\n+                if (savedFields[i].iField.getDurationField() == durationField) {\n+                    long newMillis = savedFields[i].set(millis, resetFields);\n+                    if (newMillis == Long.MIN_VALUE) {\n+                        throw new IllegalArgumentException(\"Provided date is out of range: too small\");\n+                    }\n+                    if (newMillis == Long.MAX_VALUE) {\n+                        throw new IllegalArgumentException(\"Provided date is out of range: too large\");\n+                    }\n+                    millis = newMillis;\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}