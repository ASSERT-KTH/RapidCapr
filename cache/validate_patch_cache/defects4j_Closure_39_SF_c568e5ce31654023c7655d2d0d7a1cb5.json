{
    "patch": "  public boolean canBeCalled() {\n    return isFunctionType() || isConstructor();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this; current != null && !current.isNativeObjectType() &&\n          propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        // Use getOwnPropertyNames(), which includes enumerable properties only.\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      Map<String, JSType> propertyTypes = Maps.newLinkedHashMap();\n      for (String property : propertyNames) {\n        JSType propertyType = getPropertyType(property);\n        if (!propertyType.isEmptyType()) {\n          // Only add the property if it is not empty\n          // This avoids duplicates with incorrect types.\n          propertyTypes.put(property, propertyType);\n        }\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n      int i = 0;\n      int mapSize = propertyTypes.size();\n      for (Map.Entry<String, JSType> entry : propertyTypes.entrySet()) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(entry.getKey());\n        sb.append(\": \");\n        sb.append(entry.getValue().toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES && i != mapSize) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..e04a3e20 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,7 +346,7 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return isFunctionType() || isConstructor();\n   }\n \n   @Override\n@@ -359,28 +359,38 @@ class PrototypeObjectType extends ObjectType {\n \n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+      for (ObjectType current = this; current != null && !current.isNativeObjectType() &&\n+          propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n+        // Use getOwnPropertyNames(), which includes enumerable properties only.\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n+      Map<String, JSType> propertyTypes = Maps.newLinkedHashMap();\n+      for (String property : propertyNames) {\n+        JSType propertyType = getPropertyType(property);\n+        if (!propertyType.isEmptyType()) {\n+          // Only add the property if it is not empty\n+          // This avoids duplicates with incorrect types.\n+          propertyTypes.put(property, propertyType);\n+        }\n+      }\n+\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n-\n       int i = 0;\n-      for (String property : propertyNames) {\n+      int mapSize = propertyTypes.size();\n+      for (Map.Entry<String, JSType> entry : propertyTypes.entrySet()) {\n         if (i > 0) {\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n+        sb.append(entry.getKey());\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(entry.getValue().toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && i != mapSize) {\n           sb.append(\", ...\");\n           break;\n         }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}