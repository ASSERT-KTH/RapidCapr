{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        \n        if (nextLocal != nextAdjusted) {\n            int offsetBefore = getOffset(nextAdjusted-1);\n            int offsetAfter = getOffset(nextAdjusted);\n            if (offsetBefore < offsetAfter) {\n                return offsetLocal;\n            }\n            else {\n                // allow for a positive DST transition gap\n                long afterOffsetLocal = nextTransition(nextAdjusted);\n                if (afterOffsetLocal == nextAdjusted + offsetLocal) {\n                    return offsetAdjusted;\n                }\n            }\n        }\n    } else {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        \n        if (prevLocal != prevAdjusted) {\n            int prevOffsetBefore = getOffset(prevLocal-1);\n            int prevOffsetAfter = getOffset(prevLocal);\n            if (prevOffsetBefore < prevOffsetAfter) {\n                return offsetAdjusted;\n            }\n            else {\n                // allow for a positive DST transition gap\n                long afterOffsetLocal = nextTransition(prevLocal);\n                if (afterOffsetLocal == prevLocal - offsetLocal) {\n                    return offsetLocal;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4d55cd40 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,46 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        \n+        if (nextLocal != nextAdjusted) {\n+            int offsetBefore = getOffset(nextAdjusted-1);\n+            int offsetAfter = getOffset(nextAdjusted);\n+            if (offsetBefore < offsetAfter) {\n+                return offsetLocal;\n+            }\n+            else {\n+                // allow for a positive DST transition gap\n+                long afterOffsetLocal = nextTransition(nextAdjusted);\n+                if (afterOffsetLocal == nextAdjusted + offsetLocal) {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        }\n+    } else {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        \n+        if (prevLocal != prevAdjusted) {\n+            int prevOffsetBefore = getOffset(prevLocal-1);\n+            int prevOffsetAfter = getOffset(prevLocal);\n+            if (prevOffsetBefore < prevOffsetAfter) {\n+                return offsetAdjusted;\n+            }\n+            else {\n+                // allow for a positive DST transition gap\n+                long afterOffsetLocal = nextTransition(prevLocal);\n+                if (afterOffsetLocal == prevLocal - offsetLocal) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}