{
    "patch": "class IRFactory {\n  private final String sourceName;\n  private final ErrorReporter errorReporter;\n\n  IRFactory(String sourceName, ErrorReporter errorReporter) {\n    this.sourceName = sourceName;\n    this.errorReporter = errorReporter;\n  }\n\n  Node transform(AstNode node) {\n    TransformDispatcher dispatcher = new TransformDispatcher();\n    return dispatcher.transform(node);\n  }\n\n  private class TransformDispatcher implements NodeVisitor<Node> {\n\n    @Override\n    public Node visit(AstNode node) {\n      return node.accept(this);\n    }\n\n    @Override\n    public Node visit(ArrayComprehension node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visit(ArrayComprehensionLoop node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visit(Assignment node) {\n      return newNode(\n          transformTokenType(node.getType()),\n          transform(node.getLeft()),\n          transform(node.getRight()));\n    }\n\n    @Override\n    public Node visit(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    public Node visit(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visit(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    public Node visit(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    public Node visit(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visit(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    @Override\n    public Node visit(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    public Node visit(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n\n    @Override\n    public Node visit(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    public Node visit(ForInLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    public Node visit(ForLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    public Node visit(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()));\n      node.addChildToBack(transform(callNode.getTarget()));\n      for (AstNode arg : callNode.getArguments()) {\n        node.addChildToBack(transform(arg));\n      }\n      return node;\n    }\n\n    @Override\n    public Node visit(FunctionNode functionNode) {\n      Node node = processGeneric(functionNode);\n      node.setIsArrowFunction(functionNode.isArrowFunction());\n      return node;\n    }\n\n    @Override\n    public Node visit(GeneratorExpression node) {\n      throw new UnsupportedOperationException(\"Generator expressions not supported\");\n    }\n\n    @Override\n    public Node visit(IfStatement statementNode) {\n      return newNode(\n          Token.IF,\n          transform(statementNode.getCondition()),\n          transformBlock(statementNode.getThenPart()),\n          transformBlock(statementNode.getElsePart()));\n    }\n\n    @Override\n    public Node visit(InfixExpression node) {\n      if (node.isLogicalOperator()) {\n        Token type;\n        if (node.getType() == Token.AND) {\n          type = Token.AND;\n        } else if (node.getType() == Token.OR) {\n          type = Token.OR;\n        } else {\n          throw new IllegalStateException(\"Unexpected operator: \" + node.getType());\n        }\n        return newNode(\n            type,\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      } else {\n        return newNode(\n            transformTokenType(node.getType()),\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      }\n    }\n\n    @Override\n    public Node visit(KeywordLiteral node) {\n      return newNode(transformTokenType(node.getType()));\n    }\n\n    @Override\n    public Node visit(LabeledStatement statementNode) {\n      return newNode(\n          Token.LABEL,\n          transform(statementNode.getStatement()),\n          newString(statementNode.getLabel()));\n    }\n\n    @Override\n    public Node visit(LetNode node) {\n      throw new UnsupportedOperationException(\"Let nodes not supported\");\n    }\n\n    @Override\n    public Node visit(Name nameNode) {\n      String identifier = nameNode.getIdentifier();\n      if (isDirective(nameNode.getParent())) {\n        // Directives are not statements and their arguments are not subject to\n        // semicolon insertion. The relevant ECMA-262 sections are 7.4, 10.1.1,\n        // 12.1.1 and 14.1.\n        if (identifier.equals(\"use strict\")) {\n          return newNode(Token.USE_STRICT);\n        } else {\n          errorReporter.warning(\n              \"Unsupported directive: \" + identifier,\n              sourceName,\n              nameNode.getLineno(), \"\", 0);\n          return newString(identifier);\n        }\n      } else {\n        return newString(identifier);\n      }\n    }\n\n    @Override\n    public Node visit(NewExpression newExpressionNode) {\n      Node node;\n      if (newExpressionNode.getInitializer() == null) {\n        node = newNode(Token.NEW, transform(newExpressionNode.getTarget()));\n      } else {\n        node = newNode(\n            Token.NEW_WITH_ARGS,\n            transform(newExpressionNode.getTarget()),\n            transform(newExpressionNode.getInitializer()));\n      }\n      return node;\n    }\n\n    @Override\n    public Node visit(NumberLiteral literalNode) {\n      return newNode(Token.NUMBER, Double.parseDouble(literalNode.getValue()));\n    }\n\n    @Override\n    public Node visit(ObjectLiteral objectNode) {\n      Node objectLitNode = newNode(Token.OBJECTLIT);\n      for (ObjectProperty prop : objectNode.getElements()) {\n        if (prop.getType() == Token.GETTER_DEF || prop.getType() == Token.SETTER_DEF) {\n          String accessType = (prop.getType() == Token.GETTER_DEF) ? \"get\" : \"set\";\n          String name = ((FunctionNode) prop.getRight()).getName();\n          Node keyNode = newNode(Token.STRING, newString(accessType + \" \" + name));\n          objectLitNode.addChildToBack(newNode(Token.MEMBER_DEF, keyNode, transform(prop.getRight())));\n        } else {\n          objectLitNode.addChildToBack(transform(prop));\n        }\n      }\n      return objectLitNode;\n    }\n\n    @Override\n    public Node visit(ObjectProperty propNode) {\n      Token type = propNode.isGetter() ? Token.GETTER_DEF : propNode.isSetter() ? Token.SETTER_DEF : Token.STRING;\n      Node keyNode = (type == Token.STRING) ? newString(propNode.getLeft().getString()) : null;\n      return newNode(\n          Token.MEMBER_DEF,\n          keyNode,\n          transform(propNode.getRight()));\n    }\n\n    @Override\n    public Node visit(ParenthesizedExpression expressionNode) {\n      return processGeneric(expressionNode);\n    }\n\n    @Override\n    public Node visit(RegExpLiteral literalNode) {\n      return newNode(Token.REGEXP, literalNode.getValue(), literalNode.getFlags());\n    }\n\n    @Override\n    public Node visit(ReturnStatement statementNode) {\n      Node node = newNode(Token.RETURN);\n      if (statementNode.getReturnValue() != null) {\n        node.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return node;\n    }\n\n    @Override\n    public Node visit(ScriptNode scriptNode) {\n      Node scriptRootNode = newNode(Token.SCRIPT);\n      for (AstNode child : scriptNode) {\n        scriptRootNode.addChildToBack(transform(child));\n      }\n      return scriptRootNode;\n    }\n\n    @Override\n    public Node visit(StringLiteral stringNode) {\n      return newNode(Token.STRING, newString(stringNode.getValue()));\n    }\n\n    @Override\n    public Node visit(SwitchCase caseNode) {\n      return newNode(\n          Token.CASE,\n          transform(caseNode.getExpression()),\n          transform(caseNode.getStatements()));\n    }\n\n    @Override\n    public Node visit(SwitchStatement statementNode) {\n      Node node = newNode(\n          Token.SWITCH,\n          transform(statementNode.getExpression()));\n      for (SwitchCase caseClause : statementNode.getCases()) {\n        node.addChildToBack(transform(caseClause));\n      }\n      return node;\n    }\n\n    @Override\n    public Node visit(TryStatement statementNode) {\n      Node node = newNode(\n          Token.TRY,\n        ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..e8b26e30 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,22 +473,52 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class IRFactory {\n+  private final String sourceName;\n+  private final ErrorReporter errorReporter;\n+\n+  IRFactory(String sourceName, ErrorReporter errorReporter) {\n+    this.sourceName = sourceName;\n+    this.errorReporter = errorReporter;\n+  }\n+\n+  Node transform(AstNode node) {\n+    TransformDispatcher dispatcher = new TransformDispatcher();\n+    return dispatcher.transform(node);\n+  }\n+\n+  private class TransformDispatcher implements NodeVisitor<Node> {\n+\n+    @Override\n+    public Node visit(AstNode node) {\n+      return node.accept(this);\n+    }\n+\n+    @Override\n+    public Node visit(ArrayComprehension node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n+\n+    @Override\n+    public Node visit(ArrayComprehensionLoop node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    @Override\n+    public Node visit(Assignment node) {\n+      return newNode(\n+          transformTokenType(node.getType()),\n+          transform(node.getLeft()),\n+          transform(node.getRight()));\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n+    public Node visit(Block blockNode) {\n       return processGeneric(blockNode);\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n+    public Node visit(BreakStatement statementNode) {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n@@ -500,7 +530,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n+    public Node visit(CatchClause clauseNode) {\n       AstNode catchVar = clauseNode.getVarName();\n       Node node = newNode(Token.CATCH, transform(catchVar));\n       if (clauseNode.getCatchCondition() != null) {\n@@ -514,7 +544,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n+    public Node visit(ConditionalExpression exprNode) {\n       return newNode(\n           Token.HOOK,\n           transform(exprNode.getTestExpression()),\n@@ -523,7 +553,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n+    public Node visit(ContinueStatement statementNode) {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n@@ -535,7 +565,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n+    public Node visit(DoLoop loopNode) {\n       return newNode(\n           Token.DO,\n           transformBlock(loopNode.getBody()),\n@@ -543,7 +573,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n+    public Node visit(ElementGet getNode) {\n       return newNode(\n           Token.GETELEM,\n           transform(getNode.getTarget()),\n@@ -551,22 +581,20 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n+    public Node visit(EmptyExpression exprNode) {\n       Node node = newNode(Token.EMPTY);\n       return node;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n+    public Node visit(ExpressionStatement statementNode) {\n       Node node = newNode(transformTokenType(statementNode.getType()));\n       node.addChildToBack(transform(statementNode.getExpression()));\n       return node;\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n+    public Node visit(ForInLoop loopNode) {\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n@@ -574,6 +602,212 @@ class IRFactory {\n           transformBlock(loopNode.getBody()));\n     }\n \n+    @Override\n+    public Node visit(ForLoop loopNode) {\n+      return newNode(\n+          Token.FOR,\n+          transform(loopNode.getInitializer()),\n+          transform(loopNode.getCondition()),\n+          transform(loopNode.getIncrement()),\n+          transformBlock(loopNode.getBody()));\n+    }\n+\n+    @Override\n+    public Node visit(FunctionCall callNode) {\n+      Node node = newNode(transformTokenType(callNode.getType()));\n+      node.addChildToBack(transform(callNode.getTarget()));\n+      for (AstNode arg : callNode.getArguments()) {\n+        node.addChildToBack(transform(arg));\n+      }\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visit(FunctionNode functionNode) {\n+      Node node = processGeneric(functionNode);\n+      node.setIsArrowFunction(functionNode.isArrowFunction());\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visit(GeneratorExpression node) {\n+      throw new UnsupportedOperationException(\"Generator expressions not supported\");\n+    }\n+\n+    @Override\n+    public Node visit(IfStatement statementNode) {\n+      return newNode(\n+          Token.IF,\n+          transform(statementNode.getCondition()),\n+          transformBlock(statementNode.getThenPart()),\n+          transformBlock(statementNode.getElsePart()));\n+    }\n+\n+    @Override\n+    public Node visit(InfixExpression node) {\n+      if (node.isLogicalOperator()) {\n+        Token type;\n+        if (node.getType() == Token.AND) {\n+          type = Token.AND;\n+        } else if (node.getType() == Token.OR) {\n+          type = Token.OR;\n+        } else {\n+          throw new IllegalStateException(\"Unexpected operator: \" + node.getType());\n+        }\n+        return newNode(\n+            type,\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      } else {\n+        return newNode(\n+            transformTokenType(node.getType()),\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      }\n+    }\n+\n+    @Override\n+    public Node visit(KeywordLiteral node) {\n+      return newNode(transformTokenType(node.getType()));\n+    }\n+\n+    @Override\n+    public Node visit(LabeledStatement statementNode) {\n+      return newNode(\n+          Token.LABEL,\n+          transform(statementNode.getStatement()),\n+          newString(statementNode.getLabel()));\n+    }\n+\n+    @Override\n+    public Node visit(LetNode node) {\n+      throw new UnsupportedOperationException(\"Let nodes not supported\");\n+    }\n+\n+    @Override\n+    public Node visit(Name nameNode) {\n+      String identifier = nameNode.getIdentifier();\n+      if (isDirective(nameNode.getParent())) {\n+        // Directives are not statements and their arguments are not subject to\n+        // semicolon insertion. The relevant ECMA-262 sections are 7.4, 10.1.1,\n+        // 12.1.1 and 14.1.\n+        if (identifier.equals(\"use strict\")) {\n+          return newNode(Token.USE_STRICT);\n+        } else {\n+          errorReporter.warning(\n+              \"Unsupported directive: \" + identifier,\n+              sourceName,\n+              nameNode.getLineno(), \"\", 0);\n+          return newString(identifier);\n+        }\n+      } else {\n+        return newString(identifier);\n+      }\n+    }\n+\n+    @Override\n+    public Node visit(NewExpression newExpressionNode) {\n+      Node node;\n+      if (newExpressionNode.getInitializer() == null) {\n+        node = newNode(Token.NEW, transform(newExpressionNode.getTarget()));\n+      } else {\n+        node = newNode(\n+            Token.NEW_WITH_ARGS,\n+            transform(newExpressionNode.getTarget()),\n+            transform(newExpressionNode.getInitializer()));\n+      }\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visit(NumberLiteral literalNode) {\n+      return newNode(Token.NUMBER, Double.parseDouble(literalNode.getValue()));\n+    }\n+\n+    @Override\n+    public Node visit(ObjectLiteral objectNode) {\n+      Node objectLitNode = newNode(Token.OBJECTLIT);\n+      for (ObjectProperty prop : objectNode.getElements()) {\n+        if (prop.getType() == Token.GETTER_DEF || prop.getType() == Token.SETTER_DEF) {\n+          String accessType = (prop.getType() == Token.GETTER_DEF) ? \"get\" : \"set\";\n+          String name = ((FunctionNode) prop.getRight()).getName();\n+          Node keyNode = newNode(Token.STRING, newString(accessType + \" \" + name));\n+          objectLitNode.addChildToBack(newNode(Token.MEMBER_DEF, keyNode, transform(prop.getRight())));\n+        } else {\n+          objectLitNode.addChildToBack(transform(prop));\n+        }\n+      }\n+      return objectLitNode;\n+    }\n+\n+    @Override\n+    public Node visit(ObjectProperty propNode) {\n+      Token type = propNode.isGetter() ? Token.GETTER_DEF : propNode.isSetter() ? Token.SETTER_DEF : Token.STRING;\n+      Node keyNode = (type == Token.STRING) ? newString(propNode.getLeft().getString()) : null;\n+      return newNode(\n+          Token.MEMBER_DEF,\n+          keyNode,\n+          transform(propNode.getRight()));\n+    }\n+\n+    @Override\n+    public Node visit(ParenthesizedExpression expressionNode) {\n+      return processGeneric(expressionNode);\n+    }\n+\n+    @Override\n+    public Node visit(RegExpLiteral literalNode) {\n+      return newNode(Token.REGEXP, literalNode.getValue(), literalNode.getFlags());\n+    }\n+\n+    @Override\n+    public Node visit(ReturnStatement statementNode) {\n+      Node node = newNode(Token.RETURN);\n+      if (statementNode.getReturnValue() != null) {\n+        node.addChildToBack(transform(statementNode.getReturnValue()));\n+      }\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visit(ScriptNode scriptNode) {\n+      Node scriptRootNode = newNode(Token.SCRIPT);\n+      for (AstNode child : scriptNode) {\n+        scriptRootNode.addChildToBack(transform(child));\n+      }\n+      return scriptRootNode;\n+    }\n+\n+    @Override\n+    public Node visit(StringLiteral stringNode) {\n+      return newNode(Token.STRING, newString(stringNode.getValue()));\n+    }\n+\n+    @Override\n+    public Node visit(SwitchCase caseNode) {\n+      return newNode(\n+          Token.CASE,\n+          transform(caseNode.getExpression()),\n+          transform(caseNode.getStatements()));\n+    }\n+\n+    @Override\n+    public Node visit(SwitchStatement statementNode) {\n+      Node node = newNode(\n+          Token.SWITCH,\n+          transform(statementNode.getExpression()));\n+      for (SwitchCase caseClause : statementNode.getCases()) {\n+        node.addChildToBack(transform(caseClause));\n+      }\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visit(TryStatement statementNode) {\n+      Node node = newNode(\n+          Token.TRY,\n+        \n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}