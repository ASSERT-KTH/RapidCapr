{
    "patch": "public Line revert() {\n     final Line reverted = new Line(zero, direction.negate());\n     if (Double.compare(reverted.direction.getX(), 0.0) == 0) {\n         if (Double.compare(reverted.direction.getY(), 0.0) > 0) {\n             // direction vector is vertical (pointing up)\n             // rotate it by 180 degrees\n             reverted.direction = new Vector(-reverted.direction.getX(), -reverted.direction.getY());\n         } else {\n             // direction vector is vertical (pointing down)\n             // rotate it by 180 degrees\n             reverted.direction = new Vector(-reverted.direction.getX(), -reverted.direction.getY());\n         }\n     } else if (Double.compare(reverted.direction.getX(), 0.0) < 0) {\n         // direction vector is pointing left\n         // rotate it by 180 degrees\n         reverted.direction = new Vector(-reverted.direction.getX(), -reverted.direction.getY());\n     }\n     return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..e2493293d 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,25 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+     final Line reverted = new Line(zero, direction.negate());\n+     if (Double.compare(reverted.direction.getX(), 0.0) == 0) {\n+         if (Double.compare(reverted.direction.getY(), 0.0) > 0) {\n+             // direction vector is vertical (pointing up)\n+             // rotate it by 180 degrees\n+             reverted.direction = new Vector(-reverted.direction.getX(), -reverted.direction.getY());\n+         } else {\n+             // direction vector is vertical (pointing down)\n+             // rotate it by 180 degrees\n+             reverted.direction = new Vector(-reverted.direction.getX(), -reverted.direction.getY());\n+         }\n+     } else if (Double.compare(reverted.direction.getX(), 0.0) < 0) {\n+         // direction vector is pointing left\n+         // rotate it by 180 degrees\n+         reverted.direction = new Vector(-reverted.direction.getX(), -reverted.direction.getY());\n+     }\n+     return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: Vector is abstract; cannot be instantiated",
    "test_result": "ERROR"
}