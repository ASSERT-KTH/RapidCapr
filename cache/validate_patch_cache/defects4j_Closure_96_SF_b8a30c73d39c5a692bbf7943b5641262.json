{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parameters = functionType.getParameters();\n    int numParams = parameters.size();\n    Node argument = null;\n    int numArgs = call.getChildCount() - 1;\n    int maxArgs = functionType.getMaxArguments();\n\n    // Process each parameter in order\n    for (int i = 0; i < numParams; i++) {\n        if (!arguments.hasNext()) {\n            // Too few arguments for function call\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(i), String.valueOf(functionType.getMinArguments()),\n                    functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n            return;\n        }\n\n        Node parameter = parameters.get(i);\n        argument = arguments.next();\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, i + 1);\n    }\n\n    // There may be extra arguments if the function has var_args\n    if (arguments.hasNext()) {\n        // Check if the function has var_args\n        Node lastParameter = parameters.get(numParams - 1);\n        if (lastParameter.isVarArgs()) {\n            while (arguments.hasNext()) {\n                argument = arguments.next();\n                validator.expectArgumentMatchesParameter(t, argument,\n                        getJSType(argument), lastParameter.getJSType(), call, numParams++);\n            }\n        } else {\n            // Too many arguments for function call\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n                    functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        }\n    } else if (numArgs < functionType.getMinArguments() || numArgs > maxArgs) {\n        // Too few or too many arguments for function call\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n                functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..ad4594e1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,62 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n+    List<Node> parameters = functionType.getParameters();\n+    int numParams = parameters.size();\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n     int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    // Process each parameter in order\n+    for (int i = 0; i < numParams; i++) {\n+        if (!arguments.hasNext()) {\n+            // Too few arguments for function call\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(i), String.valueOf(functionType.getMinArguments()),\n+                    functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+            return;\n+        }\n+\n+        Node parameter = parameters.get(i);\n+        argument = arguments.next();\n+\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, i + 1);\n     }\n-  }\n+\n+    // There may be extra arguments if the function has var_args\n+    if (arguments.hasNext()) {\n+        // Check if the function has var_args\n+        Node lastParameter = parameters.get(numParams - 1);\n+        if (lastParameter.isVarArgs()) {\n+            while (arguments.hasNext()) {\n+                argument = arguments.next();\n+                validator.expectArgumentMatchesParameter(t, argument,\n+                        getJSType(argument), lastParameter.getJSType(), call, numParams++);\n+            }\n+        } else {\n+            // Too many arguments for function call\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+                    functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                            \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        }\n+    } else if (numArgs < functionType.getMinArguments() || numArgs > maxArgs) {\n+        // Too few or too many arguments for function call\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+                functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}