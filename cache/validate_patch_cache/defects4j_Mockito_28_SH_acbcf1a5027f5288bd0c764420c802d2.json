{
    "patch": "for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n    Optional<MockCandidateFilter.Candidate> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n    if (candidate.isPresent()) {\n        candidate.get().thenInject();\n        continue;\n    }\n    ...\n} ",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2344f8578 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,17 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+    Optional<MockCandidateFilter.Candidate> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+    if (candidate.isPresent()) {\n+        candidate.get().thenInject();\n+        continue;\n+    }\n+    ...\n+} \n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}