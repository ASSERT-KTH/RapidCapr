{
    "patch": "    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent != null && parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.NAME:\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.LP:\n        if(parent == null || parent.getType() != Token.EXPR_RESULT || parent.getParent().getType() != Token.BLOCK) {\n            return;\n        }\n        handleFunctionInputs(parent.getParent());\n        break;\n      default:\n        break;\n    }\n\n    attachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..51fd7a0b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent != null && parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.NAME:\n+        if (NodeUtil.isFunctionExpression(n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.LP:\n+        if(parent == null || parent.getType() != Token.EXPR_RESULT || parent.getParent().getType() != Token.BLOCK) {\n+            return;\n+        }\n+        handleFunctionInputs(parent.getParent());\n+        break;\n+      default:\n+        break;\n+    }\n+\n+    attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}