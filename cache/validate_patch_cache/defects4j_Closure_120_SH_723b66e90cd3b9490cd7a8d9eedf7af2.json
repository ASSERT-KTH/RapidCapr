{
    "patch": "        if (block.isFunction) {\n          // If a variable is assigned inside a nested function, assume it could be assigned\n          // arbitrarily.\n          if (!block.equals(ref.getBasicBlock())) {\n            return false;\n          }\n          // If a variable is assigned in a function different than where its defined, assume it\n          // could be changed arbitrarily as well since we know nothing about the function's\n          // behaviour.\n          if (!ref.getName().isObfuscatable() && !ref.getName().isFunctionDeclaration()) {\n            return false;\n          }\n          boolean isAssignedOnce = true;\n          for (BasicBlock currentBlock = block; currentBlock != null;\n               currentBlock = currentBlock.getParent()) {\n            if (currentBlock.getAssignments().contains(ref)) {\n              if (!isAssignedOnce) {\n                return false;\n              }\n              isAssignedOnce = false;\n            }\n          }\n          return true;\n        } else if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..37cf3fb1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // If a variable is assigned inside a nested function, assume it could be assigned\n+          // arbitrarily.\n+          if (!block.equals(ref.getBasicBlock())) {\n+            return false;\n+          }\n+          // If a variable is assigned in a function different than where its defined, assume it\n+          // could be changed arbitrarily as well since we know nothing about the function's\n+          // behaviour.\n+          if (!ref.getName().isObfuscatable() && !ref.getName().isFunctionDeclaration()) {\n+            return false;\n+          }\n+          boolean isAssignedOnce = true;\n+          for (BasicBlock currentBlock = block; currentBlock != null;\n+               currentBlock = currentBlock.getParent()) {\n+            if (currentBlock.getAssignments().contains(ref)) {\n+              if (!isAssignedOnce) {\n+                return false;\n+              }\n+              isAssignedOnce = false;\n+            }\n+          }\n+          return true;\n+        } else if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}