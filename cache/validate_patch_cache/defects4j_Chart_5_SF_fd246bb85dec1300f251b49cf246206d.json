{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null || y == null) {\n        throw new IllegalArgumentException(\"Null 'x' or 'y' argument.\");\n    }\n\n    XYDataItem itemToUpdate = null;\n    boolean updatingExisting = false;\n\n    if (!this.allowDuplicateXValues) {\n        // If duplicates are not allowed, check if a point with the same x value already exists\n        int index = this.indexOf(x);\n        if (index >= 0) {\n            // If it does, save a reference to the existing point for possible later update\n            itemToUpdate = (XYDataItem) this.data.get(index);\n            updatingExisting = true;\n        }\n    }\n\n    // Create a new point with the specified x and y values, and add it to the appropriate position\n    XYDataItem newItem = new XYDataItem(x, y);\n\n    if (this.autoSort) {\n        // If auto-sort is enabled, use binary search to find the insertion point for the new point\n        int insertionIndex = Collections.binarySearch(this.data, newItem);\n\n        if (insertionIndex < 0) {\n            // If the new point is not already in the list, insert it at the appropriate position to maintain sorted order\n            insertionIndex = -insertionIndex - 1;\n            this.data.add(insertionIndex, newItem);\n        } else if (!this.allowDuplicateXValues) {\n            // If duplicates are not allowed and the new point is already in the list, update the existing point and return it\n            itemToUpdate = this.data.get(insertionIndex);\n            itemToUpdate.setY(y);\n            updatingExisting = true;\n        } else {\n            // If duplicates are allowed, insert the new point immediately after the existing point with the same x value\n            int nextIndex = insertionIndex + 1;\n            while (nextIndex < this.getItemCount() && newItem.getX().equals(\n                    ((XYDataItem) this.data.get(nextIndex)).getX())) {\n                nextIndex++;\n            }\n            this.data.add(nextIndex, newItem);\n        }\n    } else {\n        // If auto-sort is not enabled, simply append the new point to the end of the list\n        this.data.add(newItem);\n    }\n\n    if (this.getItemCount() > this.maximumItemCount) {\n        // If the new point exceeds the maximum item count, remove the oldest point in the list\n        this.data.remove(0);\n    }\n\n    // If an existing point was updated, return a reference to it\n    if (updatingExisting && itemToUpdate != null) {\n        fireSeriesChanged();\n        return new XYDataItem(itemToUpdate.getX(), itemToUpdate.getY());\n    }\n\n    fireSeriesChanged();\n    return null;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..13335d7 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,68 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null || y == null) {\n+        throw new IllegalArgumentException(\"Null 'x' or 'y' argument.\");\n+    }\n+\n+    XYDataItem itemToUpdate = null;\n+    boolean updatingExisting = false;\n+\n+    if (!this.allowDuplicateXValues) {\n+        // If duplicates are not allowed, check if a point with the same x value already exists\n+        int index = this.indexOf(x);\n+        if (index >= 0) {\n+            // If it does, save a reference to the existing point for possible later update\n+            itemToUpdate = (XYDataItem) this.data.get(index);\n+            updatingExisting = true;\n+        }\n+    }\n+\n+    // Create a new point with the specified x and y values, and add it to the appropriate position\n+    XYDataItem newItem = new XYDataItem(x, y);\n+\n+    if (this.autoSort) {\n+        // If auto-sort is enabled, use binary search to find the insertion point for the new point\n+        int insertionIndex = Collections.binarySearch(this.data, newItem);\n+\n+        if (insertionIndex < 0) {\n+            // If the new point is not already in the list, insert it at the appropriate position to maintain sorted order\n+            insertionIndex = -insertionIndex - 1;\n+            this.data.add(insertionIndex, newItem);\n+        } else if (!this.allowDuplicateXValues) {\n+            // If duplicates are not allowed and the new point is already in the list, update the existing point and return it\n+            itemToUpdate = this.data.get(insertionIndex);\n+            itemToUpdate.setY(y);\n+            updatingExisting = true;\n+        } else {\n+            // If duplicates are allowed, insert the new point immediately after the existing point with the same x value\n+            int nextIndex = insertionIndex + 1;\n+            while (nextIndex < this.getItemCount() && newItem.getX().equals(\n+                    ((XYDataItem) this.data.get(nextIndex)).getX())) {\n+                nextIndex++;\n+            }\n+            this.data.add(nextIndex, newItem);\n+        }\n+    } else {\n+        // If auto-sort is not enabled, simply append the new point to the end of the list\n+        this.data.add(newItem);\n+    }\n+\n+    if (this.getItemCount() > this.maximumItemCount) {\n+        // If the new point exceeds the maximum item count, remove the oldest point in the list\n+        this.data.remove(0);\n+    }\n+\n+    // If an existing point was updated, return a reference to it\n+    if (updatingExisting && itemToUpdate != null) {\n+        fireSeriesChanged();\n+        return new XYDataItem(itemToUpdate.getX(), itemToUpdate.getY());\n+    }\n+\n+    fireSeriesChanged();\n+    return null;\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}