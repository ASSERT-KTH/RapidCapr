{
    "patch": "        final int n = m.getRowDimension();\n        final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n\n        // Compute the square root of the matrix using the Newton-Schulz algorithm\n        RealMatrix x = m;\n        int iter = 0;\n        while (true) {\n            RealMatrix y = x.add(eye).scalarMultiply(0.5);\n            RealMatrix z = MatrixUtils.inverse(y);\n            x = y.multiply(z);\n            if (isConverged(m, x)) {\n                break;\n            }\n            iter++;\n            if (iter > 100) {\n                throw new RuntimeException(\"Failed to converge\");\n            }\n        }\n        \n        return x;\n    }\n\n    private boolean isConverged(RealMatrix m, RealMatrix x) {\n        // Check if x is a good approximation of sqrt(m)\n        RealMatrix mApprox = x.multiply(x);\n        double normRatio = m.subtract(mApprox).getFrobeniusNorm() / m.getFrobeniusNorm();\n        return normRatio < 1e-9;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e9a365036 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getRowDimension();\n+        final RealMatrix eye = MatrixUtils.createRealIdentityMatrix(n);\n+\n+        // Compute the square root of the matrix using the Newton-Schulz algorithm\n+        RealMatrix x = m;\n+        int iter = 0;\n+        while (true) {\n+            RealMatrix y = x.add(eye).scalarMultiply(0.5);\n+            RealMatrix z = MatrixUtils.inverse(y);\n+            x = y.multiply(z);\n+            if (isConverged(m, x)) {\n+                break;\n+            }\n+            iter++;\n+            if (iter > 100) {\n+                throw new RuntimeException(\"Failed to converge\");\n+            }\n+        }\n+        \n+        return x;\n     }\n+\n+    private boolean isConverged(RealMatrix m, RealMatrix x) {\n+        // Check if x is a good approximation of sqrt(m)\n+        RealMatrix mApprox = x.multiply(x);\n+        double normRatio = m.subtract(mApprox).getFrobeniusNorm() / m.getFrobeniusNorm();\n+        return normRatio < 1e-9;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}