{
    "patch": "      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n        return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n        if (val.getString() != null) {\n          return defines.contains(val.getString());\n        }\n        break;\n\n      case Token.GETPROP:\n        String qualifier = val.getFirstChild().getString();\n        String property = val.getLastChild().getString();\n        return defines.contains(qualifier + \".\" + property);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..0132f94b 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,38 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n+      case Token.ADD:\n+      case Token.SUB:\n+      case Token.MUL:\n+      case Token.DIV:\n+      case Token.MOD:\n+      case Token.LSH:\n+      case Token.RSH:\n+      case Token.URSH:\n+      case Token.LT:\n+      case Token.LE:\n+      case Token.GT:\n+      case Token.GE:\n+      case Token.EQ:\n+      case Token.NE:\n+        return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n \n-      // Uniary operators are valid if the child is valid.\n+      // Unary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n       case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+        if (val.getString() != null) {\n+          return defines.contains(val.getString());\n         }\n-    }\n-    return false;\n-  }\n+        break;\n+\n+      case Token.GETPROP:\n+        String qualifier = val.getFirstChild().getString();\n+        String property = val.getLastChild().getString();\n+        return defines.contains(qualifier + \".\" + property);\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}