{
    "patch": "private void readTypeVariables() {\n    if (typeVariable.getBounds() == null || typeVariable.getBounds().length == 0) {\n        // No bounds, skip registration\n        return;\n    }\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds[0] instanceof Class) {\n        // Only extends class, skip registration\n        return;\n    }\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable) {\n            // Recursive registration of type variables\n            readTypeVariables((TypeVariable<?>) bound);\n        } else {\n            // Register bounded types\n            registerTypeVariablesOn(bound);\n        }\n    }\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b23aa598b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable.getBounds() == null || typeVariable.getBounds().length == 0) {\n+        // No bounds, skip registration\n+        return;\n+    }\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds[0] instanceof Class) {\n+        // Only extends class, skip registration\n+        return;\n+    }\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable) {\n+            // Recursive registration of type variables\n+            readTypeVariables((TypeVariable<?>) bound);\n+        } else {\n+            // Register bounded types\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}