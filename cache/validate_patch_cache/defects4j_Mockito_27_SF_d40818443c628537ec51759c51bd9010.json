{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockAccess;\nimport org.mockito.internal.handler.MockHandler;\nimport org.mockito.internal.handler.MockHandlerInterface;\nimport org.mockito.internal.handler.MethodInterceptorFilter;\nimport org.mockito.invocation.Invocation;\nimport org.mockito.invocation.InvocationListener;\nimport org.mockito.invocation.Location;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.plugins.MockMaker;\nimport org.mockito.plugins.MockitoPlugin;\n\nimport java.util.List;\n\npublic class CustomMockMaker implements MockMaker, MockitoPlugin, InvocationListener {\n\n    public <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        return ((MockAccess) mock).getMockHandler();\n    }\n\n    @Override\n    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        T mock = super.createMock(settings, handler);\n        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n        return mock;\n    }\n\n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n    }\n\n    @Override\n    public void reportInvocation(Invocation invocation) {\n        //implementation for reportInvocation\n    }\n\n    @Override\n    public void onInvocation(Invocation invocation) {\n        //implementation for onInvocation\n    }\n\n    @Override\n    public void stubbingStarted(List<Invocation> list) {\n        //implementation for stubbingStarted\n    }\n\n    @Override\n    public void stubbingCompleted(List<Invocation> list) {\n        //implementation for stubbingCompleted\n    }\n\n    @Override\n    public void stubbedAnswer(Invocation invocation, Object o) {\n        //implementation for stubbedAnswer\n    }\n\n    @Override\n    public void verifyStarted(List<Invocation> list) {\n        //implementation for verifyStarted\n    }\n\n    @Override\n    public void verifyCompleted(List<Invocation> list) {\n        //implementation for verifyCompleted\n    }\n\n    @Override\n    public void verificationStarted(List<Invocation> list) {\n        //implementation for verificationStarted\n    }\n\n    @Override\n    public void cleanUp() {\n        //implementation for cleanUp\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..28851f237 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,85 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockAccess;\n+import org.mockito.internal.handler.MockHandler;\n+import org.mockito.internal.handler.MockHandlerInterface;\n+import org.mockito.internal.handler.MethodInterceptorFilter;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.InvocationListener;\n+import org.mockito.invocation.Location;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.plugins.MockMaker;\n+import org.mockito.plugins.MockitoPlugin;\n+\n+import java.util.List;\n+\n+public class CustomMockMaker implements MockMaker, MockitoPlugin, InvocationListener {\n+\n+    public <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        return ((MockAccess) mock).getMockHandler();\n+    }\n+\n+    @Override\n+    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+        T mock = super.createMock(settings, handler);\n+        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n+        return mock;\n+    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((MockAccess) mock).setMockitoInterceptor(newFilter);\n+    }\n+\n+    @Override\n+    public void reportInvocation(Invocation invocation) {\n+        //implementation for reportInvocation\n+    }\n+\n+    @Override\n+    public void onInvocation(Invocation invocation) {\n+        //implementation for onInvocation\n+    }\n+\n+    @Override\n+    public void stubbingStarted(List<Invocation> list) {\n+        //implementation for stubbingStarted\n+    }\n+\n+    @Override\n+    public void stubbingCompleted(List<Invocation> list) {\n+        //implementation for stubbingCompleted\n+    }\n+\n+    @Override\n+    public void stubbedAnswer(Invocation invocation, Object o) {\n+        //implementation for stubbedAnswer\n+    }\n+\n+    @Override\n+    public void verifyStarted(List<Invocation> list) {\n+        //implementation for verifyStarted\n+    }\n+\n+    @Override\n+    public void verifyCompleted(List<Invocation> list) {\n+        //implementation for verifyCompleted\n+    }\n+\n+    @Override\n+    public void verificationStarted(List<Invocation> list) {\n+        //implementation for verificationStarted\n+    }\n+\n+    @Override\n+    public void cleanUp() {\n+        //implementation for cleanUp\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}