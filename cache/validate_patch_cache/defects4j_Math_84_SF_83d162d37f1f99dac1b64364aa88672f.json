{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // check for convergence before returning\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n            } else {\n                // compute the shrunken simplex\n                final RealPointValuePair[] shrunkenSimplex = shrink(original, comparator);\n                // if the shrunken simplex is better than the current, accept it\n                if (comparator.compare(shrunkenSimplex[0], original[0]) < 0) {\n                    simplex = shrunkenSimplex;\n                } else {\n                    // no improvement, terminate\n                    return;\n                }\n            }\n\n            // check for convergence before returning\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n        }\n    }\n}\n\n/**\n * Computes the shrunken simplex.\n *\n * @param     original Simplex to shrink.\n * @param comparator Comparator for the values.\n * @return Shrunken simplex.\n */\nprivate RealPointValuePair[] shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n\n    final int n = original.length;\n    final RealPointValuePair best = original[0];\n\n    final RealPointValuePair[] shrunken = new RealPointValuePair[n];\n\n    // shrink every point except the best\n    for (int i = 1; i < n; i++) {\n        final double[] one = original[i].getPoint();\n\n        final double[] shrunk = new double[one.length];\n        for (int j = 0; j < one.length; j++) {\n            shrunk[j] = best.getPoint()[j] + sigma * (one[j] - best.getPoint()[j]);\n        }\n\n        final RealPointValuePair shrunkVertex = new RealPointValuePair(shrunk, Double.NaN);\n        shrunken[i] = shrunkVertex;\n    }\n\n    shrunken[0] = best;\n    Arrays.sort(shrunken, comparator);\n\n    return shrunken;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6dc0581bd 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,97 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n \n+            // check for convergence before returning\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n-\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+            } else {\n+                // compute the shrunken simplex\n+                final RealPointValuePair[] shrunkenSimplex = shrink(original, comparator);\n+                // if the shrunken simplex is better than the current, accept it\n+                if (comparator.compare(shrunkenSimplex[0], original[0]) < 0) {\n+                    simplex = shrunkenSimplex;\n+                } else {\n+                    // no improvement, terminate\n+                    return;\n+                }\n+            }\n \n-            // check convergence\n+            // check for convergence before returning\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n             }\n+        }\n+    }\n+}\n \n+/**\n+ * Computes the shrunken simplex.\n+ *\n+ * @param     original Simplex to shrink.\n+ * @param comparator Comparator for the values.\n+ * @return Shrunken simplex.\n+ */\n+private RealPointValuePair[] shrink(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator) {\n+\n+    final int n = original.length;\n+    final RealPointValuePair best = original[0];\n+\n+    final RealPointValuePair[] shrunken = new RealPointValuePair[n];\n+\n+    // shrink every point except the best\n+    for (int i = 1; i < n; i++) {\n+        final double[] one = original[i].getPoint();\n+\n+        final double[] shrunk = new double[one.length];\n+        for (int j = 0; j < one.length; j++) {\n+            shrunk[j] = best.getPoint()[j] + sigma * (one[j] - best.getPoint()[j]);\n         }\n \n+        final RealPointValuePair shrunkVertex = new RealPointValuePair(shrunk, Double.NaN);\n+        shrunken[i] = shrunkVertex;\n     }\n \n+    shrunken[0] = best;\n+    Arrays.sort(shrunken, comparator);\n+\n+    return shrunken;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}