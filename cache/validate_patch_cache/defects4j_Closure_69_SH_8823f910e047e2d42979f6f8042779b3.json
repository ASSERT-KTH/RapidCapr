{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM, or in a functional context.\n      if (functionType.getTypeOfThis() != null &&\n          !NodeUtil.isGet(child.getParent()) &&\n          !NodeUtil.isFunctionalContext(child)) {\n        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..46679b0a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM, or in a functional context.\n+      if (functionType.getTypeOfThis() != null &&\n+          !NodeUtil.isGet(child.getParent()) &&\n+          !NodeUtil.isFunctionalContext(child)) {\n+        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}