{
    "patch": "private void readTypeVariables() {\n    if (typeVariable.getBounds().length == 0 && typeVariable.getGenericDeclaration() instanceof Class<?>) {\n        // Type variable has no bounds and is declared in a class, so check the superclass\n        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n        Type superclassType = declaringClass.getGenericSuperclass();\n        if (superclassType instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType) superclassType).getActualTypeArguments();\n            for (Type actualTypeArgument : actualTypeArguments) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    } else {\n        // Type variable has bounds, so check them\n        for (Type type : typeVariable.getBounds()) {\n            if (type instanceof TypeVariable<?>) {\n                // Recursive type variable.\n                // Do not register yet, since it may not have captured generic types correctly yet.\n                // Instead, handle the recursive type variable separately at the end.\n                recursiveTypeVariables.add((TypeVariable<?>) type);\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n        // Now that all other type variables have been handled, process the recursive ones\n        for (TypeVariable<?> recursiveTypeVariable : recursiveTypeVariables) {\n            for (Type type : recursiveTypeVariable.getBounds()) {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..fb16607b9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,38 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable.getBounds().length == 0 && typeVariable.getGenericDeclaration() instanceof Class<?>) {\n+        // Type variable has no bounds and is declared in a class, so check the superclass\n+        Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n+        Type superclassType = declaringClass.getGenericSuperclass();\n+        if (superclassType instanceof ParameterizedType) {\n+            Type[] actualTypeArguments = ((ParameterizedType) superclassType).getActualTypeArguments();\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    } else {\n+        // Type variable has bounds, so check them\n+        for (Type type : typeVariable.getBounds()) {\n+            if (type instanceof TypeVariable<?>) {\n+                // Recursive type variable.\n+                // Do not register yet, since it may not have captured generic types correctly yet.\n+                // Instead, handle the recursive type variable separately at the end.\n+                recursiveTypeVariables.add((TypeVariable<?>) type);\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+        // Now that all other type variables have been handled, process the recursive ones\n+        for (TypeVariable<?> recursiveTypeVariable : recursiveTypeVariables) {\n+            for (Type type : recursiveTypeVariable.getBounds()) {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}