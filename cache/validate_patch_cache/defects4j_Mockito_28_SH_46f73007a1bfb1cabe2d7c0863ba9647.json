{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n                try {\n                    boolean wasAccessible = field.canAccess(fieldInstance);\n                    if (!wasAccessible) {\n                        field.setAccessible(true);\n                    }\n                    field.set(fieldInstance, candidate);\n                    if (!wasAccessible) {\n                        field.setAccessible(false);\n                    }\n                    return;\n                } catch (IllegalAccessException ex) {\n                    throw new RuntimeException(ex);\n                } catch (IllegalArgumentException illegalArgumentException) {\n                    throw new RuntimeException(\"Failed to set field: \" + field, illegalArgumentException);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..82bfba72e 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,27 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+                try {\n+                    boolean wasAccessible = field.canAccess(fieldInstance);\n+                    if (!wasAccessible) {\n+                        field.setAccessible(true);\n+                    }\n+                    field.set(fieldInstance, candidate);\n+                    if (!wasAccessible) {\n+                        field.setAccessible(false);\n+                    }\n+                    return;\n+                } catch (IllegalAccessException ex) {\n+                    throw new RuntimeException(ex);\n+                } catch (IllegalArgumentException illegalArgumentException) {\n+                    throw new RuntimeException(\"Failed to set field: \" + field, illegalArgumentException);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}