{
    "patch": "public static Iterable<String> filterEmptyStrings(Iterable<String> iterable) {\n    List<String> nonEmptyStrings = new ArrayList<>();\n    for (String s : iterable) {\n        if (s != null && !s.isEmpty()) {\n            nonEmptyStrings.add(s);\n        }\n    }\n    return nonEmptyStrings;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..3df72657d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> filterEmptyStrings(Iterable<String> iterable) {\n+    List<String> nonEmptyStrings = new ArrayList<>();\n+    for (String s : iterable) {\n+        if (s != null && !s.isEmpty()) {\n+            nonEmptyStrings.add(s);\n+        }\n+    }\n+    return nonEmptyStrings;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}