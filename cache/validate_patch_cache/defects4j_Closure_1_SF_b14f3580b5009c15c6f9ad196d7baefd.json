{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        return;\n    }\n\n    Node argList = function.getSecondChild();\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    int argCount = argList.getChildCount();\n\n    for (int i = 0; i < argCount; i++) {\n        Node arg = argList.getChildAtIndex(i);\n\n        if (!arg.isName()) {\n            Preconditions.checkState(arg.isDefaultValue());\n            arg = arg.getFirstChild(); //default value is attached to a NAME node\n        }\n\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n            Node defaultValue = arg.getFirstChild();\n            if (defaultValue != null && defaultValue.isFunction()) {\n                // this is a function expression - cannot remove!\n                continue;\n            }\n            argList.removeChild(arg);\n            if (defaultValue != null) {\n                defaultValue.detach();\n                argList.addChildBefore(defaultValue, argList.getNext());\n            }\n            i--;\n            argCount--;\n            compiler.reportCodeChange();\n        }\n    }\n\n    if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0ff02334 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,48 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+        return;\n+    }\n+\n+    Node argList = function.getSecondChild();\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    int argCount = argList.getChildCount();\n+\n+    for (int i = 0; i < argCount; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+\n+        if (!arg.isName()) {\n+            Preconditions.checkState(arg.isDefaultValue());\n+            arg = arg.getFirstChild(); //default value is attached to a NAME node\n+        }\n+\n+        Var var = fnScope.getVar(arg.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+            Node defaultValue = arg.getFirstChild();\n+            if (defaultValue != null && defaultValue.isFunction()) {\n+                // this is a function expression - cannot remove!\n+                continue;\n+            }\n+            argList.removeChild(arg);\n+            if (defaultValue != null) {\n+                defaultValue.detach();\n+                argList.addChildBefore(defaultValue, argList.getNext());\n+            }\n+            i--;\n+            argCount--;\n+            compiler.reportCodeChange();\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+\n+    if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}