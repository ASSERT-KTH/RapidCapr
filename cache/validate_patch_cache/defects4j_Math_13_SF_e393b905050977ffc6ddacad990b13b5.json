{
    "patch": "private RealMatrix squareRoot(final RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealVector eigenValues = dec.getRealEigenvalues();\n    for (int i = 0; i < eigenValues.getDimension(); i++) {\n        final double eigenValue = eigenValues.getEntry(i);\n        if (eigenValue < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n        }\n        eigenValues.setEntry(i, Math.sqrt(eigenValue));\n    }\n    final RealMatrix sqrt = v.multiply(MatrixUtils.createRealDiagonalMatrix(eigenValues.toArray())).multiply(v.transpose());\n    final double[][] data = sqrt.getData();\n    for (int i = 0; i < m.getRowDimension(); ++i) {\n        for (int j = 0; j < m.getColumnDimension(); ++j) {\n            data[i][j] = Math.max(data[i][j], 0.0);\n        }\n    }\n    return MatrixUtils.createRealMatrix(data);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..91b4f16a6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(final RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealVector eigenValues = dec.getRealEigenvalues();\n+    for (int i = 0; i < eigenValues.getDimension(); i++) {\n+        final double eigenValue = eigenValues.getEntry(i);\n+        if (eigenValue < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n+        }\n+        eigenValues.setEntry(i, Math.sqrt(eigenValue));\n+    }\n+    final RealMatrix sqrt = v.multiply(MatrixUtils.createRealDiagonalMatrix(eigenValues.toArray())).multiply(v.transpose());\n+    final double[][] data = sqrt.getData();\n+    for (int i = 0; i < m.getRowDimension(); ++i) {\n+        for (int j = 0; j < m.getColumnDimension(); ++j) {\n+            data[i][j] = Math.max(data[i][j], 0.0);\n+        }\n     }\n+    return MatrixUtils.createRealMatrix(data);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}