{
    "patch": "public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) (getWeeks() * 7)) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n        int years = 0;\n        int months = 0;\n\n        if (type.isSupported(DurationFieldType.years())) {\n            years += getYears();\n            months += getMonths();\n            if (months >= 12) {\n                years += months / 12;\n                months = months % 12;\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            months += getMonths();\n            years += months / 12;\n            months = months % 12;\n        }\n\n        if (type.isSupported(DurationFieldType.weeks()) && getWeeks() != 0) {\n            Period weekPeriod = Period.weeks(getWeeks());\n            Period restPeriod = new Period(millis, type, ISOChronology.getInstanceUTC())\n                    .withWeeks(0).withYears(0).withMonths(0).normalizedStandard(type);\n            return weekPeriod.plus(restPeriod).normalizedStandard(type);\n        }\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n                .withWeeks(0).withYears(years).withMonths(months)\n                .normalizedStandard(type);\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..b0bb5b37 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,27 +1613,41 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n+public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        long millis = getMillis();\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+        millis += (((long) (getWeeks() * 7)) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+\n+        int years = 0;\n+        int months = 0;\n+\n+        if (type.isSupported(DurationFieldType.years())) {\n+            years += getYears();\n+            months += getMonths();\n+            if (months >= 12) {\n+                years += months / 12;\n+                months = months % 12;\n             }\n+        } else if (type.isSupported(DurationFieldType.months())) {\n+            months += getMonths();\n+            years += months / 12;\n+            months = months % 12;\n         }\n+\n+        if (type.isSupported(DurationFieldType.weeks()) && getWeeks() != 0) {\n+            Period weekPeriod = Period.weeks(getWeeks());\n+            Period restPeriod = new Period(millis, type, ISOChronology.getInstanceUTC())\n+                    .withWeeks(0).withYears(0).withMonths(0).normalizedStandard(type);\n+            return weekPeriod.plus(restPeriod).normalizedStandard(type);\n+        }\n+\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+                .withWeeks(0).withYears(years).withMonths(months)\n+                .normalizedStandard(type);\n         return result;\n     }\n ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}