{
    "patch": "public Fraction reduce() {\n    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n    int reducedNumerator = numerator / gcd;\n    int reducedDenominator = denominator / gcd;\n    if (reducedDenominator < 0) {\n        reducedNumerator *= -1;\n        reducedDenominator *= -1;\n    }\n    return new Fraction(reducedNumerator, reducedDenominator);\n}\n\nprivate int greatestCommonDivisor(int a, int b) {\n    while(b != 0 ) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return Math.abs(a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..8c249de4 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,25 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+    int reducedNumerator = numerator / gcd;\n+    int reducedDenominator = denominator / gcd;\n+    if (reducedDenominator < 0) {\n+        reducedNumerator *= -1;\n+        reducedDenominator *= -1;\n+    }\n+    return new Fraction(reducedNumerator, reducedDenominator);\n+}\n+\n+private int greatestCommonDivisor(int a, int b) {\n+    while(b != 0 ) {\n+        int temp = a % b;\n+        a = b;\n+        b = temp;\n+    }\n+    return Math.abs(a);\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}