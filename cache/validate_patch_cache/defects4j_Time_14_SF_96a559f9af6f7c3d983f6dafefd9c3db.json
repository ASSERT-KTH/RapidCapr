{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // Determine whether the field being added to is the largest contiguous field (e.g. month-day)\n    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n\n    if (isContiguousField) {\n        long instant = 0L;\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n        int originalDayOfMonth = iChronology.dayOfMonth().get(values[fieldIndex]);\n\n        // Add months to the field value\n        int newFieldValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n\n        // Check if the new value is out of range\n        if (newFieldValue < iChronology.monthOfYear().getMinimumValue() ||\n                newFieldValue > iChronology.monthOfYear().getMaximumValue()) {\n            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n        }\n\n        // Get the number of days in the previous month\n        int prevMonth = iChronology.monthOfYear().get(values[fieldIndex]);\n        int prevMonthDays = iChronology.monthOfYear().getDaysInMonth(\n                iChronology.year().get(instant),\n                iChronology.monthOfYear().subtract(prevMonth, 1));\n\n        // Calculate the new day of month\n        int newDayOfMonth = Math.min(originalDayOfMonth, iChronology.dayOfMonth().getMaximumValue(newFieldValue));\n\n        // Check if the new day of month is valid for the new month\n        if (newDayOfMonth > iChronology.dayOfMonth().getMaximumValue(newFieldValue)) {\n            // Subtract enough days to get to the end of the previous month\n            int daysToAdd = newDayOfMonth - iChronology.dayOfMonth().getMaximumValue(newFieldValue);\n            newFieldValue = FieldUtils.safeAdd(newFieldValue, 1);\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n            instant = iChronology.dayOfMonth().set(instant, 1);\n            instant = iChronology.millisOfDay().add(instant, -1);\n            instant = iChronology.monthOfYear().getField(iChronology).add(instant, 1);\n            instant = iChronology.dayOfMonth().set(instant, prevMonthDays - daysToAdd + 1);\n        } else {\n            // Set the new value for the field being added to\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ec0b476c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,61 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // Determine whether the field being added to is the largest contiguous field (e.g. month-day)\n+    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n+            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n+\n+    if (isContiguousField) {\n+        long instant = 0L;\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n+        int originalDayOfMonth = iChronology.dayOfMonth().get(values[fieldIndex]);\n+\n+        // Add months to the field value\n+        int newFieldValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+\n+        // Check if the new value is out of range\n+        if (newFieldValue < iChronology.monthOfYear().getMinimumValue() ||\n+                newFieldValue > iChronology.monthOfYear().getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+        // Get the number of days in the previous month\n+        int prevMonth = iChronology.monthOfYear().get(values[fieldIndex]);\n+        int prevMonthDays = iChronology.monthOfYear().getDaysInMonth(\n+                iChronology.year().get(instant),\n+                iChronology.monthOfYear().subtract(prevMonth, 1));\n+\n+        // Calculate the new day of month\n+        int newDayOfMonth = Math.min(originalDayOfMonth, iChronology.dayOfMonth().getMaximumValue(newFieldValue));\n+\n+        // Check if the new day of month is valid for the new month\n+        if (newDayOfMonth > iChronology.dayOfMonth().getMaximumValue(newFieldValue)) {\n+            // Subtract enough days to get to the end of the previous month\n+            int daysToAdd = newDayOfMonth - iChronology.dayOfMonth().getMaximumValue(newFieldValue);\n+            newFieldValue = FieldUtils.safeAdd(newFieldValue, 1);\n+            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n+            instant = iChronology.dayOfMonth().set(instant, 1);\n+            instant = iChronology.millisOfDay().add(instant, -1);\n+            instant = iChronology.monthOfYear().getField(iChronology).add(instant, 1);\n+            instant = iChronology.dayOfMonth().set(instant, prevMonthDays - daysToAdd + 1);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Set the new value for the field being added to\n+            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, newFieldValue);\n+            instant = iChronology.dayOfMonth().set(instant, newDayOfMonth);\n         }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}