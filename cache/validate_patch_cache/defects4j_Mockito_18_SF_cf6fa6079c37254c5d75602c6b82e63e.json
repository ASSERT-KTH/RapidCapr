{
    "patch": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class NumberRange {\n\n    public static List<Integer> range(int start, int end) {\n        if (start > end) {\n            return Collections.emptyList();\n        }\n \n        List<Integer> range = new ArrayList<>();\n        for (int i = start; i <= end; i++) {\n            range.add(i);\n        }\n        return range;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..267b870e4 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class NumberRange {\n+\n+    public static List<Integer> range(int start, int end) {\n+        if (start > end) {\n+            return Collections.emptyList();\n+        }\n+ \n+        List<Integer> range = new ArrayList<>();\n+        for (int i = start; i <= end; i++) {\n+            range.add(i);\n+        }\n+        return range;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}