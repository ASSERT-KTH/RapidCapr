{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n            final LUDecomposition dec = new LUDecomposition(m);\n            RealMatrix l = dec.getL();\n            RealMatrix u = dec.getU();\n            RealMatrix sqrtL = SquareRootDecomposition(sqrt(l)).getL();\n            RealMatrix sqrtU = SquareRootDecomposition(sqrt(u)).getU();\n            return sqrtL.multiply(sqrtU);\n    }\n    \n    private RealMatrix sqrt(RealMatrix m) {\n            double[][] sqrte = new double[m.getRowDimension()][m.getColumnDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                for (int j = 0; j < m.getColumnDimension(); j++) {\n                    sqrte[i][j] = FastMath.sqrt(m.getEntry(i, j));\n                }\n            }\n            return new Array2DRowRealMatrix(sqrte);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..520b4229f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            final LUDecomposition dec = new LUDecomposition(m);\n+            RealMatrix l = dec.getL();\n+            RealMatrix u = dec.getU();\n+            RealMatrix sqrtL = SquareRootDecomposition(sqrt(l)).getL();\n+            RealMatrix sqrtU = SquareRootDecomposition(sqrt(u)).getU();\n+            return sqrtL.multiply(sqrtU);\n+    }\n+    \n+    private RealMatrix sqrt(RealMatrix m) {\n+            double[][] sqrte = new double[m.getRowDimension()][m.getColumnDimension()];\n+            for (int i = 0; i < m.getRowDimension(); i++) {\n+                for (int j = 0; j < m.getColumnDimension(); j++) {\n+                    sqrte[i][j] = FastMath.sqrt(m.getEntry(i, j));\n+                }\n+            }\n+            return new Array2DRowRealMatrix(sqrte);\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}