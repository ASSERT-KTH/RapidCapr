{
    "patch": "                if (nextLocal == nextAdjusted) {\n                    return offsetAdjusted;\n                }\n                // now we are past the DST gap\n                int offsetAfter = getOffset(nextLocal);\n                int offsetDiff = offsetAdjusted - offsetAfter;\n                if (offsetDiff >= 0) {\n                    return offsetAdjusted;\n                }\n                long diff = nextLocal - instantAdjusted;\n                if (diff >= (long) offsetDiff * DateTimeConstants.MILLIS_PER_HOUR) {\n                    // normal case\n                    return offsetAdjusted - offsetDiff;\n                }\n                if (findPreviousTransition(nextLocal, nextAdjusted) < 0) {\n                    // big gap, revert to first estimate\n                    return offsetLocal;\n                }\n                // there is a smaller gap where we could still have the right answer,\n                // but to find it we'd need to iterate (and we don't do that yet).\n                return offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b7bd8ee9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetAdjusted;\n+                }\n+                // now we are past the DST gap\n+                int offsetAfter = getOffset(nextLocal);\n+                int offsetDiff = offsetAdjusted - offsetAfter;\n+                if (offsetDiff >= 0) {\n+                    return offsetAdjusted;\n+                }\n+                long diff = nextLocal - instantAdjusted;\n+                if (diff >= (long) offsetDiff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    // normal case\n+                    return offsetAdjusted - offsetDiff;\n+                }\n+                if (findPreviousTransition(nextLocal, nextAdjusted) < 0) {\n+                    // big gap, revert to first estimate\n+                    return offsetLocal;\n+                }\n+                // there is a smaller gap where we could still have the right answer,\n+                // but to find it we'd need to iterate (and we don't do that yet).\n+                return offsetLocal;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}