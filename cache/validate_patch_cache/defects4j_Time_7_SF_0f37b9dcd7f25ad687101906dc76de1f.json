{
    "patch": "\n        DateTimeParserBucket bucket;\n        if (instant.getChronology() != null) {\n            bucket = new DateTimeParserBucket(\n                    instant.getMillis(), instant.getChronology(), iLocale, iPivotYear, null);\n        } else {\n            bucket = new DateTimeParserBucket(\n                    null, ISOChronology.getInstanceUTC(), iLocale, iPivotYear, null);\n        }\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            if (iZone != null) {\n                bucket.setZone(iZone);\n            }\n            if (iOffsetParsed) {\n                if (bucket.getOffsetInteger() != null) {\n                    bucket.saveField(DateTimeFieldType.zone(), bucket.getZone());\n                } else if (bucket.getZone() != null) {\n                    bucket.setOffset(bucket.getZone().getOffsetFromLocal(bucket.getMillis()));\n                }\n            }\n            instant.setMillis(bucket.computeMillis());\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            instant.setChronology(bucket.getChronology());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..db1bf352 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,32 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+\n+        DateTimeParserBucket bucket;\n+        if (instant.getChronology() != null) {\n+            bucket = new DateTimeParserBucket(\n+                    instant.getMillis(), instant.getChronology(), iLocale, iPivotYear, null);\n+        } else {\n+            bucket = new DateTimeParserBucket(\n+                    null, ISOChronology.getInstanceUTC(), iLocale, iPivotYear, null);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+        if (newPos >= 0) {\n+            if (iZone != null) {\n+                bucket.setZone(iZone);\n+            }\n+            if (iOffsetParsed) {\n+                if (bucket.getOffsetInteger() != null) {\n+                    bucket.saveField(DateTimeFieldType.zone(), bucket.getZone());\n+                } else if (bucket.getZone() != null) {\n+                    bucket.setOffset(bucket.getZone().getOffsetFromLocal(bucket.getMillis()));\n+                }\n+            }\n+            instant.setMillis(bucket.computeMillis());\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            instant.setChronology(bucket.getChronology());\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}