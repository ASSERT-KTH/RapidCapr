{
    "patch": "if (ref.getBasicBlock() == null) {\n  return false;\n}\n\n// Make sure the assignment is not inside a nested block\nBasicBlock functionBlock = ref.getBasicBlock().getFunction();\nBasicBlock block = ref.getBasicBlock();\n\nwhile (block != functionBlock) {\n  if (block.isLoop) {\n    return false;\n  }\n  block = block.getParent();\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2561b9f5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref.getBasicBlock() == null) {\n+  return false;\n+}\n+\n+// Make sure the assignment is not inside a nested block\n+BasicBlock functionBlock = ref.getBasicBlock().getFunction();\n+BasicBlock block = ref.getBasicBlock();\n+\n+while (block != functionBlock) {\n+  if (block.isLoop) {\n+    return false;\n+  }\n+  block = block.getParent();\n+}\n+\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}