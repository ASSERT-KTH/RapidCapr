{
    "patch": "        if (block.isFunction) {\n            return false;\n        } else if (block.isLoop) {\n            while (ref.getBasicBlock() == block) {\n                ref = ref.getNext();\n                if (!ref.isAssignmentToName(name)) { // definitely assigned elsewhere\n                    return false;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b000afe9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+            return false;\n+        } else if (block.isLoop) {\n+            while (ref.getBasicBlock() == block) {\n+                ref = ref.getNext();\n+                if (!ref.isAssignmentToName(name)) { // definitely assigned elsewhere\n+                    return false;\n+                }\n+            }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}