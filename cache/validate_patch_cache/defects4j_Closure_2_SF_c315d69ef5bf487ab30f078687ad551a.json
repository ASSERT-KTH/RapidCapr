{
    "patch": "  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, Map<String, ObjectType> properties,\n      Map<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto == null) {\n      // The implicit prototype can be null if interfaceType is a proxy to a\n      // non-existent object (which indicates a bad type annotation),\n      // but we should not crash in this case.\n      return;\n    }\n    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n        JSType oTypePropertyType = oType.getPropertyType(name);\n        if (!arePropertyTypesCompatible(interfaceTypePropertyType, oTypePropertyType)) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(), interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    for (ObjectType nestedType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, nestedType);\n    }\n  }\n\n  /**\n   * Checks if two types representing a property are equivalent or have compatible types.\n   *\n   * @param typeA The type of the first property.\n   * @param typeB The type of the second property.\n   * @return true if the two provided types are equivalent, or if both are defined and one subtype\n   *     of the other.\n   */\n  private boolean arePropertyTypesCompatible(JSType typeA, JSType typeB) {\n    if (typeA == null || typeB == null) {\n      return false;\n    }\n    return typeA.isEquivalentTo(typeB) || typeA.isSubtypeOf(typeB) || typeB.isSubtypeOf(typeA);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..c1a3e2a3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1564,31 +1564,49 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param interfaceType The super interface that is being visited\n    */\n   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n-      String functionName, HashMap<String, ObjectType> properties,\n-      HashMap<String, ObjectType> currentProperties,\n+      String functionName, Map<String, ObjectType> properties,\n+      Map<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (implicitProto == null) {\n+      // The implicit prototype can be null if interfaceType is a proxy to a\n+      // non-existent object (which indicates a bad type annotation),\n+      // but we should not crash in this case.\n+      return;\n+    }\n+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+        JSType oTypePropertyType = oType.getPropertyType(name);\n+        if (!arePropertyTypesCompatible(interfaceTypePropertyType, oTypePropertyType)) {\n           compiler.report(\n               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n+                  functionName, name, oType.toString(), interfaceType.toString()));\n         }\n       }\n       currentProperties.put(name, interfaceType);\n     }\n-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n+    for (ObjectType nestedType : interfaceType.getCtorExtendedInterfaces()) {\n       checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n+          currentProperties, nestedType);\n+    }\n+  }\n+\n+  /**\n+   * Checks if two types representing a property are equivalent or have compatible types.\n+   *\n+   * @param typeA The type of the first property.\n+   * @param typeB The type of the second property.\n+   * @return true if the two provided types are equivalent, or if both are defined and one subtype\n+   *     of the other.\n+   */\n+  private boolean arePropertyTypesCompatible(JSType typeA, JSType typeB) {\n+    if (typeA == null || typeB == null) {\n+      return false;\n     }\n+    return typeA.isEquivalentTo(typeB) || typeA.isSubtypeOf(typeB) || typeB.isSubtypeOf(typeA);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}