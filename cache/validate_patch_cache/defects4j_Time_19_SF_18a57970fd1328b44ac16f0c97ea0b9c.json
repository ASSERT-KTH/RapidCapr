{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int[] fields = new int[6];\n    long localMillis = getLocalMillis(instantLocal, fields);\n\n    // if before last recurrence\n    if (localMillis < iZone.getLastMillis()) {\n        int offsetBefore = iZone.getOffset(localMillis - 1);\n        long nextLocal = nextTransition(localMillis - offsetBefore);\n        if (nextLocal == (localMillis - offsetBefore)) {\n            nextLocal = Long.MAX_VALUE;\n        }\n        long nextAdjusted = nextTransition(localMillis - iZone.getOffset(nextLocal - 1) - 1);\n        if (nextAdjusted == (localMillis - iZone.getOffset(localMillis - 1))) {\n            // Typically not possible\n            nextLocal = nextTransition(nextLocal);\n        }\n        if (nextAdjusted > nextLocal) {\n            nextAdjusted = nextLocal;\n        }\n        int offsetAfter = iZone.getOffset(nextAdjusted - 1);\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n    } else {\n        int offsetAfter = iZone.getOffset(localMillis);\n        int offsetBefore = iZone.getOffset(localMillis - 1);\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n    }\n\n    return iZone.getStandardOffset(localMillis);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..6554f9a1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,39 +877,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int[] fields = new int[6];\n+    long localMillis = getLocalMillis(instantLocal, fields);\n+\n+    // if before last recurrence\n+    if (localMillis < iZone.getLastMillis()) {\n+        int offsetBefore = iZone.getOffset(localMillis - 1);\n+        long nextLocal = nextTransition(localMillis - offsetBefore);\n+        if (nextLocal == (localMillis - offsetBefore)) {\n+            nextLocal = Long.MAX_VALUE;\n+        }\n+        long nextAdjusted = nextTransition(localMillis - iZone.getOffset(nextLocal - 1) - 1);\n+        if (nextAdjusted == (localMillis - iZone.getOffset(localMillis - 1))) {\n+            // Typically not possible\n+            nextLocal = nextTransition(nextLocal);\n+        }\n+        if (nextAdjusted > nextLocal) {\n+            nextAdjusted = nextLocal;\n+        }\n+        int offsetAfter = iZone.getOffset(nextAdjusted - 1);\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+    } else {\n+        int offsetAfter = iZone.getOffset(localMillis);\n+        int offsetBefore = iZone.getOffset(localMillis - 1);\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n         }\n-        return offsetAdjusted;\n     }\n \n+    return iZone.getStandardOffset(localMillis);\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}