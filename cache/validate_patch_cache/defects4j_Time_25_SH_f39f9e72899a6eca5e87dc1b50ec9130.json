{
    "patch": "            // adjust instantLocal using the estimate and recalc the offset\n            final long instantAdjusted = instantLocal - offsetLocal;\n            int offsetAdjusted = getOffset(instantAdjusted);\n            // if the offsets differ, we must be near a DST boundary\n            if (offsetLocal != offsetAdjusted) {\n                // check if we are in a DST gap\n                if(offsetLocal < offsetAdjusted) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                    if(nextLocal != nextAdjusted) {\n                            return offsetLocal;\n                    } \n                } else {\n                    // we crossed a DST boundary, recalculate the offset for instantLocal\n                    offsetAdjusted = getOffset(nextTransition(instantAdjusted) - 1);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cf407560 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // adjust instantLocal using the estimate and recalc the offset\n+            final long instantAdjusted = instantLocal - offsetLocal;\n+            int offsetAdjusted = getOffset(instantAdjusted);\n+            // if the offsets differ, we must be near a DST boundary\n+            if (offsetLocal != offsetAdjusted) {\n+                // check if we are in a DST gap\n+                if(offsetLocal < offsetAdjusted) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                    if(nextLocal != nextAdjusted) {\n+                            return offsetLocal;\n+                    } \n+                } else {\n+                    // we crossed a DST boundary, recalculate the offset for instantLocal\n+                    offsetAdjusted = getOffset(nextTransition(instantAdjusted) - 1);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}