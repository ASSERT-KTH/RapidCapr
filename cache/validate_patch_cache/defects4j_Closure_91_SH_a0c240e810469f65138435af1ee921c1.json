{
    "patch": "      if (NodeUtil.isFunctionExpression(n)) {\n        if (NodeUtil.mayHaveSideEffects(n)) {\n          // if this function definition may have side-effects (such as code\n          // generation), then don't traverse it because traversing it now might\n          // interfere with codegen later. E.g., in\n          // var f = function() { return 1; };\n          // a(); f(); b();\n          // if we traverse f(), then we'll move its definition to the top\n          // level, and we'll end up with\n          // var f; a(); f(); b(); f=function(){return1};\n          // f will be invoked prematurely.\n          return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        if (NodeUtil.isGet(parent)) {\n          Node getTarget = parent.getFirstChild();\n          if (getTarget.getLastChild().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ed1c2b96 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        if (NodeUtil.mayHaveSideEffects(n)) {\n+          // if this function definition may have side-effects (such as code\n+          // generation), then don't traverse it because traversing it now might\n+          // interfere with codegen later. E.g., in\n+          // var f = function() { return 1; };\n+          // a(); f(); b();\n+          // if we traverse f(), then we'll move its definition to the top\n+          // level, and we'll end up with\n+          // var f; a(); f(); b(); f=function(){return1};\n+          // f will be invoked prematurely.\n+          return false;\n+        }\n+\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (NodeUtil.isGet(parent)) {\n+          Node getTarget = parent.getFirstChild();\n+          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}