{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (elementPairs.size() == 1) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    Separator sep = null;\n    for (int i = 0; i < elementPairs.size(); i++) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof Separator) {\n            sep = (Separator) obj;\n            break;\n        }\n    }\n\n    if (sep != null) {\n        int sepIndex = elementPairs.indexOf(sep);\n        Object[] leftComp = createComposite(elementPairs.subList(0, sepIndex));\n        Object[] rightComp = createComposite(elementPairs.subList(sepIndex + 1, elementPairs.size()));\n        if (notPrinter) {\n            return new PeriodFormatter(null, sep.finish((PeriodParser) leftComp[1], (PeriodParser) rightComp[1]));\n        } else if (notParser) {\n            return new PeriodFormatter(sep.finish((PeriodPrinter) leftComp[0], (PeriodPrinter) rightComp[0]), null);\n        } else {\n            return new PeriodFormatter(\n                    sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]),\n                    sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1])\n            );\n        }\n    } else {\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..abf68610 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,40 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+    if (elementPairs.size() == 1) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+\n+    Separator sep = null;\n+    for (int i = 0; i < elementPairs.size(); i++) {\n+        Object obj = elementPairs.get(i);\n+        if (obj instanceof Separator) {\n+            sep = (Separator) obj;\n+            break;\n+        }\n+    }\n+\n+    if (sep != null) {\n+        int sepIndex = elementPairs.indexOf(sep);\n+        Object[] leftComp = createComposite(elementPairs.subList(0, sepIndex));\n+        Object[] rightComp = createComposite(elementPairs.subList(sepIndex + 1, elementPairs.size()));\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, sep.finish((PeriodParser) leftComp[1], (PeriodParser) rightComp[1]));\n+        } else if (notParser) {\n+            return new PeriodFormatter(sep.finish((PeriodPrinter) leftComp[0], (PeriodPrinter) rightComp[0]), null);\n+        } else {\n+            return new PeriodFormatter(\n+                    sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]),\n+                    sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1])\n+            );\n+        }\n+    } else {\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -811,6 +833,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}