{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int year = 0;\n            int monthOfYear = 0;\n            int dayOfMonth = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeField field = partial.getField(i);\n                int value = values[i];\n                if (field.getType().equals(DateTimeFieldType.year())) {\n                    year = value;\n                } else if (field.getType().equals(DateTimeFieldType.monthOfYear())) {\n                    monthOfYear = value;\n                } else if (field.getType().equals(DateTimeFieldType.dayOfMonth())) {\n                    dayOfMonth = value;\n                }\n            }\n            year += (valueToAdd / 12);\n            monthOfYear += (valueToAdd % 12);\n            if (monthOfYear > 12) {\n                year += (monthOfYear / 12);\n                monthOfYear %= 12;\n            }\n            if (monthOfYear < 1) {\n                year -= (12 / Math.abs(monthOfYear));\n                monthOfYear = 12 - (Math.abs(monthOfYear) % 12);\n            }\n            int maxDay = iChronology.getDaysInMonthMax(year, monthOfYear);\n            if (dayOfMonth > maxDay) {\n                dayOfMonth = maxDay;\n            }\n            LocalDate localDate = new LocalDate(year, monthOfYear, dayOfMonth, iChronology);\n            return iChronology.get(partial, localDate.toDateTimeAtStartOfDay().getMillis());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d701a7bb 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,38 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            int year = 0;\n+            int monthOfYear = 0;\n+            int dayOfMonth = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeField field = partial.getField(i);\n+                int value = values[i];\n+                if (field.getType().equals(DateTimeFieldType.year())) {\n+                    year = value;\n+                } else if (field.getType().equals(DateTimeFieldType.monthOfYear())) {\n+                    monthOfYear = value;\n+                } else if (field.getType().equals(DateTimeFieldType.dayOfMonth())) {\n+                    dayOfMonth = value;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            year += (valueToAdd / 12);\n+            monthOfYear += (valueToAdd % 12);\n+            if (monthOfYear > 12) {\n+                year += (monthOfYear / 12);\n+                monthOfYear %= 12;\n+            }\n+            if (monthOfYear < 1) {\n+                year -= (12 / Math.abs(monthOfYear));\n+                monthOfYear = 12 - (Math.abs(monthOfYear) % 12);\n+            }\n+            int maxDay = iChronology.getDaysInMonthMax(year, monthOfYear);\n+            if (dayOfMonth > maxDay) {\n+                dayOfMonth = maxDay;\n+            }\n+            LocalDate localDate = new LocalDate(year, monthOfYear, dayOfMonth, iChronology);\n+            return iChronology.get(partial, localDate.toDateTimeAtStartOfDay().getMillis());\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}