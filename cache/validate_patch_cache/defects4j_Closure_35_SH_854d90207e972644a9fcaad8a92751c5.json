{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getDeclaredPropertyType(prop);\n          if (propType == null) {\n            propType = constraintObj.getPropertyType(prop);\n          }\n          if (propType == null) {\n            continue;\n          }\n          JSType inferredType = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          if (! objType.hasProperty(prop) || ! objType.getPropertyType(prop).equals(inferredType)) {\n            objType.defineInferredProperty(prop, inferredType, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..675e69e6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1122,17 +1122,18 @@ class TypeInference\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType propType = constraintObj.getDeclaredPropertyType(prop);\n+          if (propType == null) {\n+            propType = constraintObj.getPropertyType(prop);\n+          }\n+          if (propType == null) {\n+            continue;\n+          }\n+          JSType inferredType = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          if (! objType.hasProperty(prop) || ! objType.getPropertyType(prop).equals(inferredType)) {\n+            objType.defineInferredProperty(prop, inferredType, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}