{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double eps = 10e-15;\n    double maxIterations = 1000;\n    double sum = 0;\n    double last = Double.POSITIVE_INFINITY;\n\n    for (int i = 0; i < maxIterations && Math.abs(sum - last) > eps; i++) {\n        last = sum;\n        sum += Math.pow(x, a) / GammaFunctions.gamma(a + 1);\n        a++;\n    }\n\n    if (Math.abs(sum - last) <= eps) {\n        return sum * Math.exp(-x) / x;\n    } else {\n        throw new RuntimeException(\"Failed to converge to regularized gamma function.\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6e1aff02f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 10e-15;\n+    double maxIterations = 1000;\n+    double sum = 0;\n+    double last = Double.POSITIVE_INFINITY;\n+\n+    for (int i = 0; i < maxIterations && Math.abs(sum - last) > eps; i++) {\n+        last = sum;\n+        sum += Math.pow(x, a) / GammaFunctions.gamma(a + 1);\n+        a++;\n+    }\n+\n+    if (Math.abs(sum - last) <= eps) {\n+        return sum * Math.exp(-x) / x;\n+    } else {\n+        throw new RuntimeException(\"Failed to converge to regularized gamma function.\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}