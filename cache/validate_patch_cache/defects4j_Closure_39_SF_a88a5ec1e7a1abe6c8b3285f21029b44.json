{
    "patch": "  \npublic boolean canBeCalled() {\n    return isFunctionType() || isConstructor();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this; current != null && !current.isNativeObjectType() &&\n                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            // Use getOwnPropertyNames(), which includes enumerable properties only.\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        Map<String, JSType> propertyTypes = Maps.newLinkedHashMap();\n        for (String property : propertyNames) {\n            JSType propertyType = getPropertyType(property);\n            if (!propertyType.isEmptyType()) {\n                // Only add the property if it is not empty\n                // This avoids duplicates with incorrect types.\n                propertyTypes.put(property, propertyType);\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        Set<String> propertyKeySet = propertyTypes.keySet();\n        boolean isFirstProperty = true;\n        boolean isTruncated = false;\n        for (String property : propertyKeySet) {\n            if (!isFirstProperty) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(propertyTypes.get(property));\n\n            if (isFirstProperty) {\n                isFirstProperty = false;\n            }\n\n            if (--MAX_PRETTY_PRINTED_PROPERTIES == 0) {\n                isTruncated = true;\n                break;\n            }\n        }\n\n        if (isTruncated) {\n            sb.append(\", ...\");\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..4423078a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,74 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+  \n+public boolean canBeCalled() {\n+    return isFunctionType() || isConstructor();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+\n+        // Use a tree set so that the properties are sorted.\n+        Set<String> propertyNames = Sets.newTreeSet();\n+        for (ObjectType current = this; current != null && !current.isNativeObjectType() &&\n+                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+             current = current.getImplicitPrototype()) {\n+            // Use getOwnPropertyNames(), which includes enumerable properties only.\n+            propertyNames.addAll(current.getOwnPropertyNames());\n+        }\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+        Map<String, JSType> propertyTypes = Maps.newLinkedHashMap();\n+        for (String property : propertyNames) {\n+            JSType propertyType = getPropertyType(property);\n+            if (!propertyType.isEmptyType()) {\n+                // Only add the property if it is not empty\n+                // This avoids duplicates with incorrect types.\n+                propertyTypes.put(property, propertyType);\n+            }\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+        Set<String> propertyKeySet = propertyTypes.keySet();\n+        boolean isFirstProperty = true;\n+        boolean isTruncated = false;\n+        for (String property : propertyKeySet) {\n+            if (!isFirstProperty) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+            sb.append(propertyTypes.get(property));\n+\n+            if (isFirstProperty) {\n+                isFirstProperty = false;\n+            }\n+\n+            if (--MAX_PRETTY_PRINTED_PROPERTIES == 0) {\n+                isTruncated = true;\n+                break;\n+            }\n+        }\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        if (isTruncated) {\n+            sb.append(\", ...\");\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: cannot assign a value to final variable MAX_PRETTY_PRINTED_PROPERTIES",
    "test_result": "ERROR"
}