{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent == null) {\n          // This is a script-scoped variable that is declared outside any block.\n          // It cannot be an alias\n          continue;\n        }\n        if (!parent.isVar()) {\n          // This variable is not declared as a var, so it cannot be an alias.\n          continue;\n        }\n        if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          if (aliasVar == null || aliasVar.getInitialValue() == null) {\n            // This is not an alias declaration\n            continue;\n          }\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          if (qualifiedName.isEmpty()) {\n            // This is not really an alias, just a funny way of using Closure Compiler.\n            continue;\n          }\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..5310885d 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -275,24 +275,32 @@ class ScopedAliases implements HotSwapCompilerPass {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        if (parent == null) {\n+          // This is a script-scoped variable that is declared outside any block.\n+          // It cannot be an alias\n+          continue;\n+        }\n+        if (!parent.isVar()) {\n+          // This variable is not declared as a var, so it cannot be an alias.\n+          continue;\n+        }\n+        if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n+          if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+            // This is not an alias declaration\n+            continue;\n+          }\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+          if (qualifiedName.isEmpty()) {\n+            // This is not really an alias, just a funny way of using Closure Compiler.\n+            continue;\n+          }\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-        }\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}