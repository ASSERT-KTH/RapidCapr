{
    "patch": "public static String unescapeJava(String input) {\n    if (input == null) {\n        return \"\";\n    }\n\n    int len = input.length();\n    StringBuilder sb = new StringBuilder(len);\n    for (int i = 0; i < len; i++) {\n        char ch = input.charAt(i);\n        if (ch != '\\\\') {\n            sb.append(ch);\n        } else {\n            if (++i >= len) {\n                sb.append('\\\\');\n                break;\n            }\n            ch = input.charAt(i);\n            if (ch == '\\\"') {\n                sb.append('\\\"');\n            } else if (ch == '\\'') {\n                sb.append('\\'');\n            } else if (ch == '\\\\') {\n                sb.append('\\\\');\n            } else if (ch == 'r') {\n                sb.append('\\r');\n            } else if (ch == 'f') {\n                sb.append('\\f');\n            } else if (ch == 't') {\n                sb.append('\\t');\n            } else if (ch == 'n') {\n                sb.append('\\n');\n            } else if (ch == 'b') {\n                sb.append('\\b');\n            } else if (ch == 'u') {\n                if (i + 4 < len) {\n                    try {\n                        char unicodeChar = (char) Integer.parseInt(input.substring(i + 1, i + 5), 16);\n                        sb.append(unicodeChar);\n                        i += 4;\n                    } catch (NumberFormatException e) {\n                        sb.append(\"\\\\u\");\n                    }\n                } else {\n                    sb.append(\"\\\\u\");\n                }\n            } else {\n                sb.append('\\\\');\n                sb.append(ch);\n            }\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..8d773d5d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,59 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String input) {\n+    if (input == null) {\n+        return \"\";\n+    }\n+\n+    int len = input.length();\n+    StringBuilder sb = new StringBuilder(len);\n+    for (int i = 0; i < len; i++) {\n+        char ch = input.charAt(i);\n+        if (ch != '\\\\') {\n+            sb.append(ch);\n+        } else {\n+            if (++i >= len) {\n+                sb.append('\\\\');\n+                break;\n+            }\n+            ch = input.charAt(i);\n+            if (ch == '\\\"') {\n+                sb.append('\\\"');\n+            } else if (ch == '\\'') {\n+                sb.append('\\'');\n+            } else if (ch == '\\\\') {\n+                sb.append('\\\\');\n+            } else if (ch == 'r') {\n+                sb.append('\\r');\n+            } else if (ch == 'f') {\n+                sb.append('\\f');\n+            } else if (ch == 't') {\n+                sb.append('\\t');\n+            } else if (ch == 'n') {\n+                sb.append('\\n');\n+            } else if (ch == 'b') {\n+                sb.append('\\b');\n+            } else if (ch == 'u') {\n+                if (i + 4 < len) {\n+                    try {\n+                        char unicodeChar = (char) Integer.parseInt(input.substring(i + 1, i + 5), 16);\n+                        sb.append(unicodeChar);\n+                        i += 4;\n+                    } catch (NumberFormatException e) {\n+                        sb.append(\"\\\\u\");\n+                    }\n+                } else {\n+                    sb.append(\"\\\\u\");\n+                }\n+            } else {\n+                sb.append('\\\\');\n+                sb.append(ch);\n+            }\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}