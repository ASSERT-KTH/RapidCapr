{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class MyClass {\n\n    public static double regularizedGammaP(double a, double x) {\n\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0) {\n            return Double.NaN;\n        }\n\n        if (x < 0.0) {\n            return 0.0;\n        }\n\n        double rgamma = Gamma.regularizedGammaP(a, x);\n\n        if (Double.isNaN(rgamma)) {\n            throw new RuntimeException(\"Failed to compute regularized gamma\");\n        }\n\n        return rgamma;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f7e31c72e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class MyClass {\n+\n+    public static double regularizedGammaP(double a, double x) {\n+\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0) {\n+            return Double.NaN;\n+        }\n+\n+        if (x < 0.0) {\n+            return 0.0;\n+        }\n+\n+        double rgamma = Gamma.regularizedGammaP(a, x);\n+\n+        if (Double.isNaN(rgamma)) {\n+            throw new RuntimeException(\"Failed to compute regularized gamma\");\n+        }\n+\n+        return rgamma;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}