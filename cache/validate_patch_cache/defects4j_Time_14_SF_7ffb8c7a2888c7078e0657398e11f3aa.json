{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n        }\n    }\n    \n    int yearIndex = -1, monthIndex = -1, dayIndex = -1;\n    // Get indices of year, month, and day fields, if present\n    for (int i = 0; i < values.length; i++) {\n        DateTimeFieldType fieldType = partial.getFieldType(i);\n        if (fieldType == DateTimeFieldType.year()) {\n            yearIndex = i;\n        }\n        if (fieldType == DateTimeFieldType.monthOfYear()) {\n            monthIndex = i;\n        }\n        if (fieldType == DateTimeFieldType.dayOfMonth()) {\n            dayIndex = i;\n        }\n    }\n    \n    if (fieldIndex == DateTimeFieldType.year().getFieldIndex()) {\n        int yearValue = values[yearIndex];\n        if (monthIndex >= 0 && dayIndex >= 0) {\n            int monthValue = values[monthIndex];\n            int dayValue = values[dayIndex];\n            int newMonthValue = iChronology.monthOfYear().get(monthValue + valueToAdd);\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, newMonthValue);\n            int newDayValue = Math.min(dayValue, maxDayOfMonth);\n            return new int[] {yearValue + (valueToAdd > 0 && newMonthValue < monthValue ? 1 : (valueToAdd < 0 && newMonthValue > monthValue ? -1 : 0)), newMonthValue, newDayValue};\n        } else if (monthIndex >= 0) {\n            int monthValue = values[monthIndex];\n            return new int[] {yearValue + valueToAdd, iChronology.monthOfYear().get(monthValue + valueToAdd)};\n        } else {\n            return new int[] {yearValue + valueToAdd};\n        }\n    } else if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n        int yearValue = values[yearIndex];\n        int monthValue = values[monthIndex];\n        int maxMonthValue = iChronology.monthOfYear().getMaximumValue(yearValue);\n        int newMonthValue = iChronology.monthOfYear().get(monthValue + valueToAdd);\n        int newYearValue = yearValue + (valueToAdd > 0 && newMonthValue < monthValue ? 1 : (valueToAdd < 0 && newMonthValue > monthValue ? -1 : 0));\n        if (dayIndex >= 0) {\n            int dayValue = values[dayIndex];\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYearValue, newMonthValue);\n            int newDayValue = Math.min(dayValue, maxDayOfMonth);\n            return new int[] {newYearValue, newMonthValue, newDayValue};\n        } else {\n            return new int[] {newYearValue, newMonthValue};\n        }\n    } else if (fieldIndex == DateTimeFieldType.dayOfMonth().getFieldIndex()) {\n        int yearValue = values[yearIndex];\n        int monthValue = values[monthIndex];\n        int dayValue = values[dayIndex];\n        LocalDate date = new LocalDate(yearValue, monthValue, dayValue);\n        date = date.plusMonths(valueToAdd);\n        return new int[] {date.getYear(), date.getMonthOfYear(), date.getDayOfMonth()};\n    } else {\n        throw new IllegalArgumentException(\"Invalid field index: \" + fieldIndex);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e38b7dd6 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,80 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        try {\n             return iChronology.get(partial, instant);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n+        }\n+    }\n+    \n+    int yearIndex = -1, monthIndex = -1, dayIndex = -1;\n+    // Get indices of year, month, and day fields, if present\n+    for (int i = 0; i < values.length; i++) {\n+        DateTimeFieldType fieldType = partial.getFieldType(i);\n+        if (fieldType == DateTimeFieldType.year()) {\n+            yearIndex = i;\n+        }\n+        if (fieldType == DateTimeFieldType.monthOfYear()) {\n+            monthIndex = i;\n+        }\n+        if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+            dayIndex = i;\n+        }\n+    }\n+    \n+    if (fieldIndex == DateTimeFieldType.year().getFieldIndex()) {\n+        int yearValue = values[yearIndex];\n+        if (monthIndex >= 0 && dayIndex >= 0) {\n+            int monthValue = values[monthIndex];\n+            int dayValue = values[dayIndex];\n+            int newMonthValue = iChronology.monthOfYear().get(monthValue + valueToAdd);\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, newMonthValue);\n+            int newDayValue = Math.min(dayValue, maxDayOfMonth);\n+            return new int[] {yearValue + (valueToAdd > 0 && newMonthValue < monthValue ? 1 : (valueToAdd < 0 && newMonthValue > monthValue ? -1 : 0)), newMonthValue, newDayValue};\n+        } else if (monthIndex >= 0) {\n+            int monthValue = values[monthIndex];\n+            return new int[] {yearValue + valueToAdd, iChronology.monthOfYear().get(monthValue + valueToAdd)};\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            return new int[] {yearValue + valueToAdd};\n         }\n+    } else if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+        int yearValue = values[yearIndex];\n+        int monthValue = values[monthIndex];\n+        int maxMonthValue = iChronology.monthOfYear().getMaximumValue(yearValue);\n+        int newMonthValue = iChronology.monthOfYear().get(monthValue + valueToAdd);\n+        int newYearValue = yearValue + (valueToAdd > 0 && newMonthValue < monthValue ? 1 : (valueToAdd < 0 && newMonthValue > monthValue ? -1 : 0));\n+        if (dayIndex >= 0) {\n+            int dayValue = values[dayIndex];\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYearValue, newMonthValue);\n+            int newDayValue = Math.min(dayValue, maxDayOfMonth);\n+            return new int[] {newYearValue, newMonthValue, newDayValue};\n+        } else {\n+            return new int[] {newYearValue, newMonthValue};\n+        }\n+    } else if (fieldIndex == DateTimeFieldType.dayOfMonth().getFieldIndex()) {\n+        int yearValue = values[yearIndex];\n+        int monthValue = values[monthIndex];\n+        int dayValue = values[dayIndex];\n+        LocalDate date = new LocalDate(yearValue, monthValue, dayValue);\n+        date = date.plusMonths(valueToAdd);\n+        return new int[] {date.getYear(), date.getMonthOfYear(), date.getDayOfMonth()};\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid field index: \" + fieldIndex);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}