{
    "patch": "    Iterator<Node> argNodes = argList.children().iterator();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    while (argNodes.hasNext()) {\n      Node argNode = argNodes.next();\n      if (!referenced.contains(fnScope.getVar(argNode.getString()))) {\n        argNodes.remove();\n        compiler.reportCodeChange();\n      } else if (!modifyCallers) {\n        // Only remove unused parameters from the end of the parameter list,\n        // if at least one parameter is retained. This maintains function.length.\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..92f3f13b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Iterator<Node> argNodes = argList.children().iterator();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    while (argNodes.hasNext()) {\n+      Node argNode = argNodes.next();\n+      if (!referenced.contains(fnScope.getVar(argNode.getString()))) {\n+        argNodes.remove();\n+        compiler.reportCodeChange();\n+      } else if (!modifyCallers) {\n+        // Only remove unused parameters from the end of the parameter list,\n+        // if at least one parameter is retained. This maintains function.length.\n+        break;\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}