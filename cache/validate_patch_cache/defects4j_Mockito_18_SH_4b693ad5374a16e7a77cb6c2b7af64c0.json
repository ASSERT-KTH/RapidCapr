{
    "patch": "public ReturnValue execute(Args args) {\n    if (args == null) {\n        return new ReturnValue(false, new IllegalArgumentException(\"args must not be null\"));\n    } else if (args.isEmpty()) {\n        return new ReturnValue(false, new IllegalArgumentException(\"args must not be empty\"));\n    }\n\n    try {\n        Method method = targetClass.getMethod(methodName, argTypes(args));\n        Object result = method.invoke(target, args.toArray());\n        return new ReturnValue(true, result);\n    } catch (NoSuchMethodException ex) {\n        return new ReturnValue(false, ex);\n    } catch (IllegalAccessException | InvocationTargetException ex) {\n        return new ReturnValue(false, ex);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}