{
    "patch": "public static String unescape(String input) {\n    StringBuilder output = new StringBuilder();\n    int i = 0;\n    while (i < input.length()) {\n        char c = input.charAt(i);\n        if (c == '\\\\') {\n            if (i + 1 < input.length()) {\n                i++;\n                c = input.charAt(i);\n                if (c == 'n') {\n                    output.append('\\n');\n                } else if (c == 'r') {\n                    output.append('\\r');\n                } else if (c == 't') {\n                    output.append('\\t');\n                } else if (c == 'f') {\n                    output.append('\\f');\n                } else if (c == 'b') {\n                    output.append('\\b');\n                } else if (c == '\\\\') {\n                    output.append('\\\\');\n                } else if (c == '\\'') {\n                    output.append('\\'');\n                } else if (c == '\\\"') {\n                    output.append('\\\"');\n                } else if (c >= '0' && c <= '7') {\n                    int start = i;\n                    int end = Math.min(i + 3, input.length());\n                    String octal = input.substring(start, end);\n                    int code = Integer.parseInt(octal, 8);\n                    output.append((char) code);\n                    i = end - 1;\n                } else if (c == 'u') {\n                    if (i + 4 < input.length()) {\n                        try {\n                            int code = Integer.parseInt(input.substring(i + 1, i + 5), 16);\n                            output.append((char) code);\n                            i += 4;\n                        } catch (NumberFormatException e) {\n                            output.append(\"\\\\u\");\n                        }\n                    } else {\n                        output.append(\"\\\\u\");\n                    }\n                } else {\n                    output.append('\\\\');\n                    output.append(c);\n                }\n            } else {\n                output.append(c);\n            }\n        } else {\n            output.append(c);\n        }\n        i++;\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..7bd037df 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,64 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    StringBuilder output = new StringBuilder();\n+    int i = 0;\n+    while (i < input.length()) {\n+        char c = input.charAt(i);\n+        if (c == '\\\\') {\n+            if (i + 1 < input.length()) {\n+                i++;\n+                c = input.charAt(i);\n+                if (c == 'n') {\n+                    output.append('\\n');\n+                } else if (c == 'r') {\n+                    output.append('\\r');\n+                } else if (c == 't') {\n+                    output.append('\\t');\n+                } else if (c == 'f') {\n+                    output.append('\\f');\n+                } else if (c == 'b') {\n+                    output.append('\\b');\n+                } else if (c == '\\\\') {\n+                    output.append('\\\\');\n+                } else if (c == '\\'') {\n+                    output.append('\\'');\n+                } else if (c == '\\\"') {\n+                    output.append('\\\"');\n+                } else if (c >= '0' && c <= '7') {\n+                    int start = i;\n+                    int end = Math.min(i + 3, input.length());\n+                    String octal = input.substring(start, end);\n+                    int code = Integer.parseInt(octal, 8);\n+                    output.append((char) code);\n+                    i = end - 1;\n+                } else if (c == 'u') {\n+                    if (i + 4 < input.length()) {\n+                        try {\n+                            int code = Integer.parseInt(input.substring(i + 1, i + 5), 16);\n+                            output.append((char) code);\n+                            i += 4;\n+                        } catch (NumberFormatException e) {\n+                            output.append(\"\\\\u\");\n+                        }\n+                    } else {\n+                        output.append(\"\\\\u\");\n+                    }\n+                } else {\n+                    output.append('\\\\');\n+                    output.append(c);\n+                }\n+            } else {\n+                output.append(c);\n+            }\n+        } else {\n+            output.append(c);\n+        }\n+        i++;\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}