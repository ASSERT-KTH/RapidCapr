{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    List<Number> percentageList = gson.fromJson(jsonStr, new TypeToken<List<Number>>(){}.getType());\n\n    double sum = 0.0;\n    for (Number num : percentageList) {\n        sum += num.doubleValue();\n    }\n\n    return sum / percentageList.size();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..57a770c8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    List<Number> percentageList = gson.fromJson(jsonStr, new TypeToken<List<Number>>(){}.getType());\n+\n+    double sum = 0.0;\n+    for (Number num : percentageList) {\n+        sum += num.doubleValue();\n+    }\n+\n+    return sum / percentageList.size();\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}