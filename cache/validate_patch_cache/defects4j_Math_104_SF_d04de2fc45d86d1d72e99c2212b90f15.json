{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0) {\n        throw new IllegalArgumentException(\"a must be positive\");\n    }\n    if (x < 0.0) {\n        throw new IllegalArgumentException(\"x must be non-negative\");\n    }\n    double small = 1.0e-10;\n    double big = 1.0 / small;\n    double gamma = Gamma.gamma(a);\n    if (x < a + 1.0) {\n        double numerator = Math.pow(x, a) * Math.exp(-x);\n        double sum = 1.0 / a;\n        double term = sum;\n        for (int i = 1; Math.abs(term) > small * Math.abs(sum); i++) {\n            term *= x / (a + i);\n            sum += term;\n        }\n        return numerator / gamma * sum;\n    }\n    else {\n        double factor = Math.exp(a * Math.log(x) - x - Gamma.logGamma(a));\n        double sum = 0.0;\n        double term = 1.0;\n        double del = 0.0;\n        for (int i = 0; i < 100; i++) {\n            del = (a + i) * (del / x) + 1.0 / (a + i + 1.0);\n            term *= del;\n            if (Math.abs(term) < small) {\n                term = small;\n            }\n            if (Math.abs(term) > big) {\n                term = big;\n            }\n            sum += term;\n            if (Math.abs(term / sum) < small) {\n                break;\n            }\n        }\n        return 1.0 - factor * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7dfe076ef 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,48 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0) {\n+        throw new IllegalArgumentException(\"a must be positive\");\n+    }\n+    if (x < 0.0) {\n+        throw new IllegalArgumentException(\"x must be non-negative\");\n+    }\n+    double small = 1.0e-10;\n+    double big = 1.0 / small;\n+    double gamma = Gamma.gamma(a);\n+    if (x < a + 1.0) {\n+        double numerator = Math.pow(x, a) * Math.exp(-x);\n+        double sum = 1.0 / a;\n+        double term = sum;\n+        for (int i = 1; Math.abs(term) > small * Math.abs(sum); i++) {\n+            term *= x / (a + i);\n+            sum += term;\n+        }\n+        return numerator / gamma * sum;\n+    }\n+    else {\n+        double factor = Math.exp(a * Math.log(x) - x - Gamma.logGamma(a));\n+        double sum = 0.0;\n+        double term = 1.0;\n+        double del = 0.0;\n+        for (int i = 0; i < 100; i++) {\n+            del = (a + i) * (del / x) + 1.0 / (a + i + 1.0);\n+            term *= del;\n+            if (Math.abs(term) < small) {\n+                term = small;\n+            }\n+            if (Math.abs(term) > big) {\n+                term = big;\n+            }\n+            sum += term;\n+            if (Math.abs(term / sum) < small) {\n+                break;\n+            }\n+        }\n+        return 1.0 - factor * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}