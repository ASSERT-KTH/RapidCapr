{
    "patch": "        // check if any field alteration can modify the year field\n        boolean mayChangeYear = false;\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iField.getType().equals(DateTimeFieldType.year())) {\n                mayChangeYear = true;\n                break;\n            }\n        }\n\n        long millis = iMillis;\n        boolean yearAltered = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis != millis) {\n                    if (mayChangeYear && !yearAltered) {\n                        DateTimeFieldType firstChangedType = savedFields[i].iField.getType();\n                        if (firstChangedType.equals(DateTimeFieldType.monthOfYear()) || firstChangedType.equals(DateTimeFieldType.dayOfMonth())) {\n                            saveField(DateTimeFieldType.year(), iDefaultYear);\n                            yearAltered = true;\n                            continue;\n                        }\n                    }\n                    millis = newMillis;\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d527fd40 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,29 +328,31 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+        // check if any field alteration can modify the year field\n+        boolean mayChangeYear = false;\n+        for (int i = 0; i < count; i++) {\n+            if (savedFields[i].iField.getType().equals(DateTimeFieldType.year())) {\n+                mayChangeYear = true;\n+                break;\n             }\n         }\n \n         long millis = iMillis;\n+        boolean yearAltered = false;\n         try {\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis != millis) {\n+                    if (mayChangeYear && !yearAltered) {\n+                        DateTimeFieldType firstChangedType = savedFields[i].iField.getType();\n+                        if (firstChangedType.equals(DateTimeFieldType.monthOfYear()) || firstChangedType.equals(DateTimeFieldType.dayOfMonth())) {\n+                            saveField(DateTimeFieldType.year(), iDefaultYear);\n+                            yearAltered = true;\n+                            continue;\n+                        }\n+                    }\n+                    millis = newMillis;\n+                }\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n@@ -358,7 +360,7 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n@@ -366,16 +368,7 @@ public class DateTimeParserBucket {\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n                 String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n-        }\n-        \n-        return millis;\n-    }\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}