{
    "patch": "RefSet potentialAssignments = new RefSet();\n      for (BasicBlock block = ref.getBasicBlock();\n          block != null && block.isFunction;\n          block = block.getParent()) {\n        for (int i = 0; i < block.getInstructions().size(); i++) {\n          Instruction currInst = block.getInstructions().get(i);\n          if (currInst instanceof AstNode\n              && currInst.getLocation().getExtent().contains(ref.getName().getLocation())) {\n            Node currNode = (Node) currInst;\n            if (currNode.getToken() == Token.ASSIGN) {\n              potentialAssignments.add(Reference.fromName(currNode.getFirstChild().getString()));\n            }\n          }\n        }\n      }\n      if (potentialAssignments.size() == 1) {\n        return potentialAssignments.get(0);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..87d5c958 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+RefSet potentialAssignments = new RefSet();\n+      for (BasicBlock block = ref.getBasicBlock();\n+          block != null && block.isFunction;\n+          block = block.getParent()) {\n+        for (int i = 0; i < block.getInstructions().size(); i++) {\n+          Instruction currInst = block.getInstructions().get(i);\n+          if (currInst instanceof AstNode\n+              && currInst.getLocation().getExtent().contains(ref.getName().getLocation())) {\n+            Node currNode = (Node) currInst;\n+            if (currNode.getToken() == Token.ASSIGN) {\n+              potentialAssignments.add(Reference.fromName(currNode.getFirstChild().getString()));\n+            }\n+          }\n+        }\n+      }\n+      if (potentialAssignments.size() == 1) {\n+        return potentialAssignments.get(0);\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}