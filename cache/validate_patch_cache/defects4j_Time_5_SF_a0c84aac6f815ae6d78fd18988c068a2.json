{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n    int weeks = getWeeks();\n    long hours = getHours();\n    long minutes = getMinutes();\n    long seconds = getSeconds();\n    long millis = getMillis();\n\n    if (type.isSupported(DurationFieldType.months())) {\n        int totalMonths = months + (years * 12);\n        months = totalMonths % 12;\n        years = totalMonths / 12;\n    }\n\n    if (type.isSupported(DurationFieldType.days())) {\n        long totalDays = days + (weeks * 7);\n        hours += totalDays * 24;\n        days = (int) (totalDays % 7);\n    } else if (type.isSupported(DurationFieldType.weeks())) {\n        long totalDays = weeks * 7;\n        hours += totalDays * 24;\n        days = (int) totalDays;\n        weeks = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.hours())) {\n        minutes += hours * 60;\n        hours = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.minutes())) {\n        seconds += minutes * 60;\n        minutes = 0;\n    }\n\n    if (type.isSupported(DurationFieldType.seconds())) {\n        millis += seconds * 1000;\n        seconds = 0;\n    }\n\n    if (years != 0 && type.isSupported(DurationFieldType.years())) {\n        if (type.isSupported(DurationFieldType.months())) {\n            return new Period(years, months, 0, days, 0, 0, 0, millis, type);\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported: Months\");\n        }\n    }\n\n    return new Period(0, 0, weeks, days, (int) hours, (int) minutes, (int) seconds, (int) millis, type);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2ddb03a8 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,58 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    long hours = getHours();\n+    long minutes = getMinutes();\n+    long seconds = getSeconds();\n+    long millis = getMillis();\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        int totalMonths = months + (years * 12);\n+        months = totalMonths % 12;\n+        years = totalMonths / 12;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.days())) {\n+        long totalDays = days + (weeks * 7);\n+        hours += totalDays * 24;\n+        days = (int) (totalDays % 7);\n+    } else if (type.isSupported(DurationFieldType.weeks())) {\n+        long totalDays = weeks * 7;\n+        hours += totalDays * 24;\n+        days = (int) totalDays;\n+        weeks = 0;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        minutes += hours * 60;\n+        hours = 0;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        seconds += minutes * 60;\n+        minutes = 0;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        millis += seconds * 1000;\n+        seconds = 0;\n+    }\n+\n+    if (years != 0 && type.isSupported(DurationFieldType.years())) {\n+        if (type.isSupported(DurationFieldType.months())) {\n+            return new Period(years, months, 0, days, 0, 0, 0, millis, type);\n+        } else {\n+            throw new UnsupportedOperationException(\"Field is not supported: Months\");\n         }\n-        return result;\n     }\n \n+    return new Period(0, 0, weeks, days, (int) hours, (int) minutes, (int) seconds, (int) millis, type);\n+}\n+\n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,long,PeriodType)",
    "test_result": "ERROR"
}