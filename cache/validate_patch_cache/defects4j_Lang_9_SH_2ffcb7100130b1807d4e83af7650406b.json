{
    "patch": "while (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n    if (!patternMatcher.lookingAt()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    String nextFormatField= patternMatcher.group();\n    nextStrategy= getStrategy(nextFormatField);\n    if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    currentFormatField= nextFormatField;\n    currentStrategy= nextStrategy;\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n}\nif (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\ncurrentFormatField = null;\nif(collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nstrategies= collector.toArray(new Strategy[0]);\nif (strategies.length == 0) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nparsePattern= Pattern.compile(\"^\" + regex.toString() + \"$\");",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..1e9d3d10 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,31 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+while (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n+    if (!patternMatcher.lookingAt()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    String nextFormatField= patternMatcher.group();\n+    nextStrategy= getStrategy(nextFormatField);\n+    if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    currentFormatField= nextFormatField;\n+    currentStrategy= nextStrategy;\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+}\n+if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+currentFormatField = null;\n+if(collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+strategies= collector.toArray(new Strategy[0]);\n+if (strategies.length == 0) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+parsePattern= Pattern.compile(\"^\" + regex.toString() + \"$\");\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}