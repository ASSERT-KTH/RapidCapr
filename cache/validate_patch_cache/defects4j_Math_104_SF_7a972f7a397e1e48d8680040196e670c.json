{
    "patch": "public static double regularizedGammaQ(final double a, final double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    final double d = a * Math.log(x) - x - Gamma.logGamma(a);\n    if (d < -Precision.LOG_MAX_VALUE) {\n        return 0.0;\n    }\n    return Math.exp(d) * new ContinuedFraction() {\n        @Override\n        protected double getA(final int n, final double x) {\n            return 2.0 * n + 1.0 - a + x;\n        }\n        @Override\n        protected double getB(final int n, final double x) {\n            return n * (a - n);\n        }\n    }.evaluate(x / (a + 1.0));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b208d5b36 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(final double a, final double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    final double d = a * Math.log(x) - x - Gamma.logGamma(a);\n+    if (d < -Precision.LOG_MAX_VALUE) {\n+        return 0.0;\n+    }\n+    return Math.exp(d) * new ContinuedFraction() {\n+        @Override\n+        protected double getA(final int n, final double x) {\n+            return 2.0 * n + 1.0 - a + x;\n+        }\n+        @Override\n+        protected double getB(final int n, final double x) {\n+            return n * (a - n);\n+        }\n+    }.evaluate(x / (a + 1.0));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}