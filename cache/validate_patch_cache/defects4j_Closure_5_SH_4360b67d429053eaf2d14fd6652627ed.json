{
    "patch": "          if (!NodeUtil.referencesVar(name, gramps)) {\n            return false;\n          } else if (!NodeUtil.isDestructuringLhs(parent)) {\n            boolean isSimpleAssign = NodeUtil.isExprAssign(gramps);\n            boolean isVarInit = NodeUtil.isVarDeclaration(gramps.getParent());\n            if (!isSimpleAssign && !isVarInit) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..6728f82f 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,14 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (!NodeUtil.referencesVar(name, gramps)) {\n+            return false;\n+          } else if (!NodeUtil.isDestructuringLhs(parent)) {\n+            boolean isSimpleAssign = NodeUtil.isExprAssign(gramps);\n+            boolean isVarInit = NodeUtil.isVarDeclaration(gramps.getParent());\n+            if (!isSimpleAssign && !isVarInit) {\n+              return false;\n+            }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}