{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        char c = input.charAt(pos);\n        if (consumed == 0) {\n            if (Character.isSurrogate(c)) {\n                out.write(c);\n                pos++;\n                continue;\n            }\n            out.write(c);\n            pos++;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n            int cp = Character.codePointAt(input, pos + pt);\n            // check if the code point is a part of a surrogate pair\n            if (Character.isSupplementaryCodePoint(cp)) {\n                out.write(Character.toChars(cp));\n                continue;\n            }\n            pos += pt;\n            break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ca5ba541 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,40 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        char c = input.charAt(pos);\n+        if (consumed == 0) {\n+            if (Character.isSurrogate(c)) {\n                 out.write(c);\n-                pos+= c.length;\n+                pos++;\n                 continue;\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+            out.write(c);\n+            pos++;\n+            continue;\n+        }\n+        for (int pt = 0; pt < consumed; pt++) {\n+            int cp = Character.codePointAt(input, pos + pt);\n+            // check if the code point is a part of a surrogate pair\n+            if (Character.isSupplementaryCodePoint(cp)) {\n+                out.write(Character.toChars(cp));\n+                continue;\n             }\n+            pos += pt;\n+            break;\n         }\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}