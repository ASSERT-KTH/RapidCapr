{
    "patch": "import org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.SimpleValueChecker;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.util.FastMath;\n\nimport java.util.Comparator;\n\npublic class SimplexOptimizer extends MultivariateOptimizer {\n\n    private final double khi;\n    private final double gamma;\n    private final double rho;\n    private final double sigma;\n\n    private int evaluations;\n\n    private RealPointValuePair[] simplex;\n\n    public SimplexOptimizer(final double relativeThreshold,\n                            final double absoluteThreshold) {\n        this(relativeThreshold, absoluteThreshold, DefaultSettings.KHI, DefaultSettings.GAMMA, DefaultSettings.RHO,\n                DefaultSettings.SIGMA, new SimpleValueChecker());\n    }\n\n    public SimplexOptimizer(final double relativeThreshold,\n                            final double absoluteThreshold,\n                            final double khi,\n                            final double gamma,\n                            final double rho,\n                            final double sigma,\n                            final ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        setRelativeThreshold(relativeThreshold);\n        setAbsoluteThreshold(absoluteThreshold);\n        this.khi = khi;\n        this.gamma = gamma;\n        this.rho = rho;\n        this.sigma = sigma;\n    }\n\n    @Override\n    public PointValuePair optimize(final int maxEval, final FuncMultivariateOptimizer optimumFunction,\n                                    final GoalType goalType, final double[] startPoint) {\n\n        evaluations = 0;\n\n        final int n = optimumFunction.getDimension();\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[n + 1];\n        for (int i = 0; i <= n; i++) {\n            final double[] point = (i == 0) ? startPoint : generateRandomPoint(startPoint, i - 1);\n            final double value = optimumFunction.value(point);\n            newSimplex[i] = new RealPointValuePair(point, value);\n        }\n        sortSimplex(newSimplex, comparatorForDirection(goalType));\n\n        simplex = newSimplex;\n\n        while (true) {\n\n            iterateSimplex(comparatorForDirection(goalType));\n            final RealPointValuePair best = simplex[0];\n\n            final double[] startPointFromBest;\n            startPointFromBest = best.getPoint();\n            setStartPoint(startPointFromBest);\n\n            if (getIterations() > maxEval) {\n                throw new OptimizationException(new MaxIterationsExceededException(maxEval));\n            }\n\n            if (isStopConditionsMet()) {\n                return new PointValuePair(best.getPoint(), best.getValue());\n            }\n\n        }\n\n    }\n\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = expand(reflectedSimplex, rho, comparator);\n                }\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted;\n            } else {\n                // perform a shrinking step\n                simplex = shrink(original, sigma, comparator);\n            }\n\n            // check convergence\n            final boolean isConverged = isConverged(comparator);\n            if (isConverged) {\n                return;\n            }\n\n        }\n\n    }\n\n    /**\n     * Checks convergence wrt the simplex minimum vertex.\n     *\n     * @param comparator used to compare best simplex vertex value with those of the other vertices\n     * @return {@code true} if the algorithm has converged\n     */\n    protected boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n\n        final RealPointValuePair best = simplex[0];\n        final RealPointValuePair worst = simplex[simplex.length - 1];\n\n        final double min = best.getValue();\n        final double max = worst.getValue();\n        final double relativeRange = FastMath.abs(max - min) / (FastMath.abs(max) + getRelativeThreshold());\n\n        /* stopping conditions for verifying absolute and relative convergence */\n        return getConvergenceChecker().converged(getIterations(), best, worst, relativeThreshold, absoluteThreshold)\n                || (getIterations() > 1 && relativeRange <= getRelativeThreshold());\n\n    }\n\n    protected RealPointValuePair[] expand(final RealPointValuePair[] reflectedSimplex, final double rho,\n                                           final Comparator<RealPointValuePair> comparator) {\n\n        final RealPointValuePair best = reflectedSimplex[0];\n        final RealPointValuePair[] expandedSimplex = new RealPointValuePair[simplex.length];\n        expandedSimplex[0] = best;\n\n        final RealPointValuePair worst = reflectedSimplex[reflectedSimplex.length - 1];\n        final double[] worstPoint = worst.getPoint();\n        final double[] bestPoint = best.getPoint();\n\n        final int n = bestPoint.length;\n\n        for (int i = 1; i < simplex.length; i++) {\n\n            final double[] pointI = reflectedSimplex[i].getPoint();\n            final double[] newPointI = new double[n];\n\n            for (int j = 0; j < n; j++) {\n                final double centerJ = bestPoint[j];\n                newPointI[j] = centerJ + rho * (pointI[j] - centerJ);\n            }\n\n            final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n            expandedSimplex[i] = newVertex;\n\n        }\n\n        sortSimplex(expandedSimplex, comparator);\n        return expandedSimplex;\n\n    }\n\n    protected RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                           final double sigma, final Comparator<RealPointValuePair> comparator) {\n\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n        shrunkSimplex[0] = best;\n\n        final double[] bestPoint = best.getPoint();\n\n        final int n = bestPoint.length;\n\n        for (int i = 1; i < simplex.length; i++) {\n\n            final double[] pointI = original[i].getPoint();\n            final double[] newPointI = new double[n];\n\n            for (int j = 0; j < n; j++) {\n                final double centerJ = bestPoint[j];\n                newPointI[j] = centerJ + sigma * (pointI[j] - centerJ);\n            }\n\n            final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n            shrunkSimplex[i] = newVertex;\n\n        }\n\n        sortSimplex(shrunkSimplex, comparator);\n        return shrunkSimplex;\n\n    }\n\n    protected double getRelativeThreshold() {\n        return getConvergenceChecker().getRelativeThreshold();\n    }\n\n    protected ConvergenceChecker<PointValuePair> comparatorForDirection(final GoalType goalType) {\n        if (goalType == GoalType.MINIMIZE) {\n            return new MaximizeForDirectionComparator<PointValuePair>();\n        }\n        return new MinimizeForDirectionComparator<PointValuePair>();\n    }\n\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e07190d86 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,87 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.optim.SimpleValueChecker;\n+import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\n+import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\n+import org.apache.commons.math3.util.FastMath;\n+\n+import java.util.Comparator;\n+\n+public class SimplexOptimizer extends MultivariateOptimizer {\n+\n+    private final double khi;\n+    private final double gamma;\n+    private final double rho;\n+    private final double sigma;\n+\n+    private int evaluations;\n+\n+    private RealPointValuePair[] simplex;\n+\n+    public SimplexOptimizer(final double relativeThreshold,\n+                            final double absoluteThreshold) {\n+        this(relativeThreshold, absoluteThreshold, DefaultSettings.KHI, DefaultSettings.GAMMA, DefaultSettings.RHO,\n+                DefaultSettings.SIGMA, new SimpleValueChecker());\n+    }\n+\n+    public SimplexOptimizer(final double relativeThreshold,\n+                            final double absoluteThreshold,\n+                            final double khi,\n+                            final double gamma,\n+                            final double rho,\n+                            final double sigma,\n+                            final ConvergenceChecker<PointValuePair> checker) {\n+        super(checker);\n+        setRelativeThreshold(relativeThreshold);\n+        setAbsoluteThreshold(absoluteThreshold);\n+        this.khi = khi;\n+        this.gamma = gamma;\n+        this.rho = rho;\n+        this.sigma = sigma;\n+    }\n+\n+    @Override\n+    public PointValuePair optimize(final int maxEval, final FuncMultivariateOptimizer optimumFunction,\n+                                    final GoalType goalType, final double[] startPoint) {\n+\n+        evaluations = 0;\n+\n+        final int n = optimumFunction.getDimension();\n+        final RealPointValuePair[] newSimplex = new RealPointValuePair[n + 1];\n+        for (int i = 0; i <= n; i++) {\n+            final double[] point = (i == 0) ? startPoint : generateRandomPoint(startPoint, i - 1);\n+            final double value = optimumFunction.value(point);\n+            newSimplex[i] = new RealPointValuePair(point, value);\n+        }\n+        sortSimplex(newSimplex, comparatorForDirection(goalType));\n+\n+        simplex = newSimplex;\n+\n+        while (true) {\n+\n+            iterateSimplex(comparatorForDirection(goalType));\n+            final RealPointValuePair best = simplex[0];\n+\n+            final double[] startPointFromBest;\n+            startPointFromBest = best.getPoint();\n+            setStartPoint(startPointFromBest);\n+\n+            if (getIterations() > maxEval) {\n+                throw new OptimizationException(new MaxIterationsExceededException(maxEval));\n+            }\n+\n+            if (isStopConditionsMet()) {\n+                return new PointValuePair(best.getPoint(), best.getValue());\n+            }\n+\n+        }\n+\n+    }\n+\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -79,8 +158,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the expanded simplex\n+                    simplex = expand(reflectedSimplex, rho, comparator);\n                 }\n-\n                 return;\n \n             }\n@@ -89,8 +170,15 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted;\n+            } else {\n+                // perform a shrinking step\n+                simplex = shrink(original, sigma, comparator);\n+            }\n \n             // check convergence\n+            final boolean isConverged = isConverged(comparator);\n+            if (isConverged) {\n                 return;\n             }\n \n@@ -98,6 +186,105 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+    /**\n+     * Checks convergence wrt the simplex minimum vertex.\n+     *\n+     * @param comparator used to compare best simplex vertex value with those of the other vertices\n+     * @return {@code true} if the algorithm has converged\n+     */\n+    protected boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n+\n+        final RealPointValuePair best = simplex[0];\n+        final RealPointValuePair worst = simplex[simplex.length - 1];\n+\n+        final double min = best.getValue();\n+        final double max = worst.getValue();\n+        final double relativeRange = FastMath.abs(max - min) / (FastMath.abs(max) + getRelativeThreshold());\n+\n+        /* stopping conditions for verifying absolute and relative convergence */\n+        return getConvergenceChecker().converged(getIterations(), best, worst, relativeThreshold, absoluteThreshold)\n+                || (getIterations() > 1 && relativeRange <= getRelativeThreshold());\n+\n+    }\n+\n+    protected RealPointValuePair[] expand(final RealPointValuePair[] reflectedSimplex, final double rho,\n+                                           final Comparator<RealPointValuePair> comparator) {\n+\n+        final RealPointValuePair best = reflectedSimplex[0];\n+        final RealPointValuePair[] expandedSimplex = new RealPointValuePair[simplex.length];\n+        expandedSimplex[0] = best;\n+\n+        final RealPointValuePair worst = reflectedSimplex[reflectedSimplex.length - 1];\n+        final double[] worstPoint = worst.getPoint();\n+        final double[] bestPoint = best.getPoint();\n+\n+        final int n = bestPoint.length;\n+\n+        for (int i = 1; i < simplex.length; i++) {\n+\n+            final double[] pointI = reflectedSimplex[i].getPoint();\n+            final double[] newPointI = new double[n];\n+\n+            for (int j = 0; j < n; j++) {\n+                final double centerJ = bestPoint[j];\n+                newPointI[j] = centerJ + rho * (pointI[j] - centerJ);\n+            }\n+\n+            final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n+            expandedSimplex[i] = newVertex;\n+\n+        }\n+\n+        sortSimplex(expandedSimplex, comparator);\n+        return expandedSimplex;\n+\n+    }\n+\n+    protected RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                           final double sigma, final Comparator<RealPointValuePair> comparator) {\n+\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n+        shrunkSimplex[0] = best;\n+\n+        final double[] bestPoint = best.getPoint();\n+\n+        final int n = bestPoint.length;\n+\n+        for (int i = 1; i < simplex.length; i++) {\n+\n+            final double[] pointI = original[i].getPoint();\n+            final double[] newPointI = new double[n];\n+\n+            for (int j = 0; j < n; j++) {\n+                final double centerJ = bestPoint[j];\n+                newPointI[j] = centerJ + sigma * (pointI[j] - centerJ);\n+            }\n+\n+            final RealPointValuePair newVertex = new RealPointValuePair(newPointI, Double.NaN);\n+            shrunkSimplex[i] = newVertex;\n+\n+        }\n+\n+        sortSimplex(shrunkSimplex, comparator);\n+        return shrunkSimplex;\n+\n+    }\n+\n+    protected double getRelativeThreshold() {\n+        return getConvergenceChecker().getRelativeThreshold();\n+    }\n+\n+    protected ConvergenceChecker<PointValuePair> comparatorForDirection(final GoalType goalType) {\n+        if (goalType == GoalType.MINIMIZE) {\n+            return new MaximizeForDirectionComparator<PointValuePair>();\n+        }\n+        return new MinimizeForDirectionComparator<PointValuePair>();\n+    }\n+\n+}\n+\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}