{
    "patch": "public String unescape(String input) {\n    StringBuffer unescaped = new StringBuffer();\n    Matcher matcher = escapePattern.matcher(input);\n    int index = 0;\n    while (matcher.find()) {\n        String match = matcher.group(1);\n        if (match.equals(\"\\\\\")) {\n            unescaped.append(\"\\\\\");\n        } else if (match.equals(\"\\\"\")) {\n            unescaped.append(\"\\\"\");\n        } else if (match.equals(\"'\")) {\n            unescaped.append(\"'\");\n        } else if (match.equals(\"r\")) {\n            unescaped.append(\"\\r\");\n        } else if (match.equals(\"n\")) {\n            unescaped.append(\"\\n\");\n        } else if (match.equals(\"t\")) {\n            unescaped.append(\"\\t\");\n        } else if (match.matches(\"[0-7]{1,3}\")) { //OctalEscape\n            String octalCode = matcher.group(2);\n            int charCode = Integer.parseInt(octalCode, 8);\n            char charFromOctal = (char) charCode;\n            unescaped.append(charFromOctal);\n            index += octalCode.length();\n        } else if (match.compareToIgnoreCase(\"u\") == 0) { //UnicodeEscape\n            String unicodeCode = matcher.group(2);\n            int charCode = Integer.parseInt(unicodeCode, 16);\n            char charFromUnicode = (char) charCode;\n            unescaped.append(charFromUnicode == '\\n' ? '\\n' : charFromUnicode);\n            index += unicodeCode.length();\n        } else if (match.compareToIgnoreCase(\"b\") == 0) { //BackspaceEscape\n            unescaped.append('\\b');\n        } else if (match.compareToIgnoreCase(\"f\") == 0) { //FormfeedEscape\n            unescaped.append('\\f');\n        } else {\n            unescaped.append(match);\n        }\n        index = matcher.end();\n    }\n    if (index < input.length()) {\n        unescaped.append(input.substring(index));\n    }\n    return unescaped.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..632af806 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,50 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String input) {\n+    StringBuffer unescaped = new StringBuffer();\n+    Matcher matcher = escapePattern.matcher(input);\n+    int index = 0;\n+    while (matcher.find()) {\n+        String match = matcher.group(1);\n+        if (match.equals(\"\\\\\")) {\n+            unescaped.append(\"\\\\\");\n+        } else if (match.equals(\"\\\"\")) {\n+            unescaped.append(\"\\\"\");\n+        } else if (match.equals(\"'\")) {\n+            unescaped.append(\"'\");\n+        } else if (match.equals(\"r\")) {\n+            unescaped.append(\"\\r\");\n+        } else if (match.equals(\"n\")) {\n+            unescaped.append(\"\\n\");\n+        } else if (match.equals(\"t\")) {\n+            unescaped.append(\"\\t\");\n+        } else if (match.matches(\"[0-7]{1,3}\")) { //OctalEscape\n+            String octalCode = matcher.group(2);\n+            int charCode = Integer.parseInt(octalCode, 8);\n+            char charFromOctal = (char) charCode;\n+            unescaped.append(charFromOctal);\n+            index += octalCode.length();\n+        } else if (match.compareToIgnoreCase(\"u\") == 0) { //UnicodeEscape\n+            String unicodeCode = matcher.group(2);\n+            int charCode = Integer.parseInt(unicodeCode, 16);\n+            char charFromUnicode = (char) charCode;\n+            unescaped.append(charFromUnicode == '\\n' ? '\\n' : charFromUnicode);\n+            index += unicodeCode.length();\n+        } else if (match.compareToIgnoreCase(\"b\") == 0) { //BackspaceEscape\n+            unescaped.append('\\b');\n+        } else if (match.compareToIgnoreCase(\"f\") == 0) { //FormfeedEscape\n+            unescaped.append('\\f');\n+        } else {\n+            unescaped.append(match);\n+        }\n+        index = matcher.end();\n+    }\n+    if (index < input.length()) {\n+        unescaped.append(input.substring(index));\n+    }\n+    return unescaped.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}