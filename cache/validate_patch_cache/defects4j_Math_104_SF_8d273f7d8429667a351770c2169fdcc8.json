{
    "patch": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class RegularizedGammaFunction {\n    private static final double EPSILON = 10e-15;\n    private static final int MAX_ITERATIONS = 100;\n\n    public static double regularizedGamma(double a, double x) {\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be positive\");\n        }\n\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive\");\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        double term = 1.0 / a;\n        double sum = term;\n\n        for (int i = 1; i <= MAX_ITERATIONS; i++) {\n            term *= x / (a + i);\n            sum += term;\n\n            if (Math.abs(term) < Math.abs(sum) * EPSILON) {\n                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n        }\n\n        throw new IllegalArgumentException(\"Failed to converge after \" + MAX_ITERATIONS + \" iterations\");\n    }\n\n    public static double logGamma(double x) {\n        double[] coeff = { 76.18009172947146, -86.50532032941677, 24.01409824083091,\n                -1.231739572450155, 0.001208650973866179, -0.000005395239384953 };\n        double tmp = x + 5.5;\n        tmp -= (x + 0.5) * Math.log(tmp);\n        double ser = 1.0;\n\n        for (int i = 0; i < coeff.length; i++) {\n            x++;\n            ser += coeff[i] / x;\n        }\n\n        return -tmp + Math.log(2.5066282746310005 * ser);\n    }\n\n    @Test\n    public void testRegularizedGammaPositivePositive() {\n        assertEquals(0.632120558828558, regularizedGamma(0.5, 1.0), EPSILON);\n    }\n\n    @Test\n    public void testRegularizedGammaPositiveException() {\n        try {\n            regularizedGamma(0.0, 1.0);\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"a must be positive\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testRegularizedGammaNegativeException() {\n        try {\n            regularizedGamma(0.5, -1.0);\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"x must be positive\", e.getMessage());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..aae5bcb86 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,79 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+public class RegularizedGammaFunction {\n+    private static final double EPSILON = 10e-15;\n+    private static final int MAX_ITERATIONS = 100;\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be positive\");\n+        }\n+\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        double term = 1.0 / a;\n+        double sum = term;\n+\n+        for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+            term *= x / (a + i);\n+            sum += term;\n+\n+            if (Math.abs(term) < Math.abs(sum) * EPSILON) {\n+                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Failed to converge after \" + MAX_ITERATIONS + \" iterations\");\n+    }\n+\n+    public static double logGamma(double x) {\n+        double[] coeff = { 76.18009172947146, -86.50532032941677, 24.01409824083091,\n+                -1.231739572450155, 0.001208650973866179, -0.000005395239384953 };\n+        double tmp = x + 5.5;\n+        tmp -= (x + 0.5) * Math.log(tmp);\n+        double ser = 1.0;\n+\n+        for (int i = 0; i < coeff.length; i++) {\n+            x++;\n+            ser += coeff[i] / x;\n+        }\n+\n+        return -tmp + Math.log(2.5066282746310005 * ser);\n+    }\n+\n+    @Test\n+    public void testRegularizedGammaPositivePositive() {\n+        assertEquals(0.632120558828558, regularizedGamma(0.5, 1.0), EPSILON);\n+    }\n+\n+    @Test\n+    public void testRegularizedGammaPositiveException() {\n+        try {\n+            regularizedGamma(0.0, 1.0);\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"a must be positive\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void testRegularizedGammaNegativeException() {\n+        try {\n+            regularizedGamma(0.5, -1.0);\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"x must be positive\", e.getMessage());\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}