{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        long oldMillis, newMillis;\n        DurationField field = savedField.iField.getDurationField();\n        int magnitude = field == null ? 1 : field.compareTo(DurationFieldType.years().getField(ISOChronology.getInstanceUTC()));\n        if (magnitude > 0 && millis < 0 && !savedField.iField.isSupported()) { \n            // detecting underflow for absolute fields that don't support negative values\n            oldMillis = 0;\n            newMillis = 0;\n        } else if (magnitude < 0 && millis > 0 && !savedField.iField.isSupported()) { \n            // detecting overflow for absolute fields that don't support positive values\n            oldMillis = 0;\n            newMillis = 0;\n        } else if (millis < 0 && Long.MIN_VALUE / magnitude > field.getUnitMillis()) { \n            // detecting underflow during arithmetic\n            oldMillis = 0;\n            newMillis = Long.MIN_VALUE;\n        } else if (millis > 0 && Long.MAX_VALUE / magnitude < field.getUnitMillis()) { \n            // detecting overflow during arithmetic\n            oldMillis = 0;\n            newMillis = Long.MAX_VALUE;\n        } else { // no overflow detected\n            oldMillis = millis;\n            newMillis = savedField.set(millis, resetFields); // set the new millis value\n        }\n        if (newMillis != oldMillis) { // a change in millisecond value occurred\n            if (millis < 0 && newMillis > 0) { // detected overflow\n                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n            } else if (millis > 0 && newMillis < 0) { // detected underflow\n                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n            }\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b8d91c2e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,47 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        long oldMillis, newMillis;\n+        DurationField field = savedField.iField.getDurationField();\n+        int magnitude = field == null ? 1 : field.compareTo(DurationFieldType.years().getField(ISOChronology.getInstanceUTC()));\n+        if (magnitude > 0 && millis < 0 && !savedField.iField.isSupported()) { \n+            // detecting underflow for absolute fields that don't support negative values\n+            oldMillis = 0;\n+            newMillis = 0;\n+        } else if (magnitude < 0 && millis > 0 && !savedField.iField.isSupported()) { \n+            // detecting overflow for absolute fields that don't support positive values\n+            oldMillis = 0;\n+            newMillis = 0;\n+        } else if (millis < 0 && Long.MIN_VALUE / magnitude > field.getUnitMillis()) { \n+            // detecting underflow during arithmetic\n+            oldMillis = 0;\n+            newMillis = Long.MIN_VALUE;\n+        } else if (millis > 0 && Long.MAX_VALUE / magnitude < field.getUnitMillis()) { \n+            // detecting overflow during arithmetic\n+            oldMillis = 0;\n+            newMillis = Long.MAX_VALUE;\n+        } else { // no overflow detected\n+            oldMillis = millis;\n+            newMillis = savedField.set(millis, resetFields); // set the new millis value\n+        }\n+        if (newMillis != oldMillis) { // a change in millisecond value occurred\n+            if (millis < 0 && newMillis > 0) { // detected overflow\n+                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+            } else if (millis > 0 && newMillis < 0) { // detected underflow\n+                throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+            }\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}