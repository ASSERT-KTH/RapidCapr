{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Objects declared by rest parameter cannot be removed.\n    Node firstRestParam = null;\n    if (argList.hasChildren() &&\n        argList.getLastChild().isRest()) {\n      firstRestParam = argList.getLastChild();\n    }\n\n    // Strip unreferenced arguments\n    Node curParam = argList.getFirstChild();\n    int i = 0;\n    int numNewParams = 0;\n    while (curParam != null) {\n      Var var = fnScope.getVar(curParam.getString());\n\n      if (/* Keep parameters declared by rest parameter. */\n          curParam != firstRestParam &&\n          /* Remove unreferenced parameters. */\n          !referenced.contains(var)) {\n\n        // Must remove node before moving to next node since the node is detached\n        Node next = curParam.getNext();\n        argList.removeChild(curParam);\n        curParam = next;\n        ++numNewParams;\n        compiler.reportCodeChange();\n      } else {\n        curParam.removeProp(Node.IS_UNUSED_PARAMETER);\n        curParam.putIntProp(Node.FUNCTION_OFFSET_ID, i++);\n        curParam = curParam.getNext();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5b36a207 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Objects declared by rest parameter cannot be removed.\n+    Node firstRestParam = null;\n+    if (argList.hasChildren() &&\n+        argList.getLastChild().isRest()) {\n+      firstRestParam = argList.getLastChild();\n+    }\n+\n+    // Strip unreferenced arguments\n+    Node curParam = argList.getFirstChild();\n+    int i = 0;\n+    int numNewParams = 0;\n+    while (curParam != null) {\n+      Var var = fnScope.getVar(curParam.getString());\n+\n+      if (/* Keep parameters declared by rest parameter. */\n+          curParam != firstRestParam &&\n+          /* Remove unreferenced parameters. */\n+          !referenced.contains(var)) {\n+\n+        // Must remove node before moving to next node since the node is detached\n+        Node next = curParam.getNext();\n+        argList.removeChild(curParam);\n+        curParam = next;\n+        ++numNewParams;\n+        compiler.reportCodeChange();\n+      } else {\n+        curParam.removeProp(Node.IS_UNUSED_PARAMETER);\n+        curParam.putIntProp(Node.FUNCTION_OFFSET_ID, i++);\n+        curParam = curParam.getNext();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}