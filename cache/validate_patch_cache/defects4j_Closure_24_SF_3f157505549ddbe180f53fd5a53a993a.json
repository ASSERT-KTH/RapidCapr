{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n\n  // Keeps track of alias names that have already been added to the transformation\n  Set<String> addedAliases = new HashSet<>();\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (!isAliasDefinition(n)) {\n      continue;\n    }\n\n    String aliasName = getAliasName(n);\n    if (addedAliases.contains(aliasName)) {\n      continue;\n    }\n\n    Var aliasVar = scope.getVar(aliasName);\n    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n      continue;\n    }\n\n    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n    if (qualifiedName == null) {\n      continue;\n    }\n\n    // Add the alias to the transformation\n    transformation.addAlias(aliasName, qualifiedName);\n    addedAliases.add(aliasName);\n\n    // Also add any nested aliases defined inside this alias function\n    visitAliasFunction(aliasVar.getInitialValue());\n  }\n}\n\nprivate boolean isAliasDefinition(Node n) {\n  if (n == null || !n.isVar()) {\n    return false;\n  }\n\n  Node firstChild = n.getFirstChild();\n  if (firstChild == null || !firstChild.isName()) {\n    return false;\n  }\n\n  Node secondChild = firstChild.getNext();\n  if (secondChild == null || !secondChild.isCall()) {\n    return false;\n  }\n\n  Node callTarget = secondChild.getFirstChild();\n  if (callTarget == null || !callTarget.isQualifiedName()) {\n    return false;\n  }\n\n  return callTarget.matchesQualifiedName(\"goog.provide\")\n      || callTarget.matchesQualifiedName(\"goog.require\");\n}\n\nprivate String getAliasName(Node n) {\n  return n.getFirstChild().getString();\n}\n\nprivate void visitAliasFunction(Node aliasFn) {\n  NodeTraversal.traverseEs6(getCompiler(), aliasFn.getLastChild(), new NodeTraversal.Callback() {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (!isAliasDefinition(n)) {\n        return;\n      }\n\n      String aliasName = getAliasName(n);\n      if (aliasName.startsWith(\"this.\")) {\n        // Ignore aliases defined under \"this.\" (they will already be added)\n        return;\n      }\n\n      NodeTraversal.traverseEs6(getCompiler(), n, this);\n\n      // Only add the nested alias if it has not already been added\n      if (!addedAliases.contains(aliasName)) {\n        Var aliasVar = t.getScope().getVar(aliasName);\n        if (aliasVar == null || aliasVar.getInitialValue() == null) {\n          return;\n        }\n        addedAliases.add(aliasName);\n        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(aliasName, qualifiedName);\n      }\n    }\n  });\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..7cd86c13 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,99 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+\n+  // Keeps track of alias names that have already been added to the transformation\n+  Set<String> addedAliases = new HashSet<>();\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (!isAliasDefinition(n)) {\n+      continue;\n+    }\n+\n+    String aliasName = getAliasName(n);\n+    if (addedAliases.contains(aliasName)) {\n+      continue;\n+    }\n+\n+    Var aliasVar = scope.getVar(aliasName);\n+    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+      continue;\n+    }\n+\n+    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+    if (qualifiedName == null) {\n+      continue;\n+    }\n+\n+    // Add the alias to the transformation\n+    transformation.addAlias(aliasName, qualifiedName);\n+    addedAliases.add(aliasName);\n+\n+    // Also add any nested aliases defined inside this alias function\n+    visitAliasFunction(aliasVar.getInitialValue());\n+  }\n+}\n+\n+private boolean isAliasDefinition(Node n) {\n+  if (n == null || !n.isVar()) {\n+    return false;\n+  }\n+\n+  Node firstChild = n.getFirstChild();\n+  if (firstChild == null || !firstChild.isName()) {\n+    return false;\n+  }\n+\n+  Node secondChild = firstChild.getNext();\n+  if (secondChild == null || !secondChild.isCall()) {\n+    return false;\n+  }\n+\n+  Node callTarget = secondChild.getFirstChild();\n+  if (callTarget == null || !callTarget.isQualifiedName()) {\n+    return false;\n+  }\n+\n+  return callTarget.matchesQualifiedName(\"goog.provide\")\n+      || callTarget.matchesQualifiedName(\"goog.require\");\n+}\n+\n+private String getAliasName(Node n) {\n+  return n.getFirstChild().getString();\n+}\n+\n+private void visitAliasFunction(Node aliasFn) {\n+  NodeTraversal.traverseEs6(getCompiler(), aliasFn.getLastChild(), new NodeTraversal.Callback() {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (!isAliasDefinition(n)) {\n+        return;\n+      }\n+\n+      String aliasName = getAliasName(n);\n+      if (aliasName.startsWith(\"this.\")) {\n+        // Ignore aliases defined under \"this.\" (they will already be added)\n+        return;\n+      }\n+\n+      NodeTraversal.traverseEs6(getCompiler(), n, this);\n+\n+      // Only add the nested alias if it has not already been added\n+      if (!addedAliases.contains(aliasName)) {\n+        Var aliasVar = t.getScope().getVar(aliasName);\n+        if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+          return;\n         }\n+        addedAliases.add(aliasName);\n+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+        transformation.addAlias(aliasName, qualifiedName);\n       }\n     }\n+  });\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}