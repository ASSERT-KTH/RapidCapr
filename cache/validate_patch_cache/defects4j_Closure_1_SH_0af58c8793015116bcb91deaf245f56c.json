{
    "patch": "// Notice that removing unreferenced function args breaks\n// Function.prototype.length. In advanced mode, we don't really care\n// about this: we consider \"length\" the equivalent of reflecting on\n// the function's lexical source.\n//\n// Rather than create a new option for this, we assume that if the user\n// is removing globals, then it's OK to remove unused function args.\n//\n// See http://code.google.com/p/closure-compiler/issues/detail?id=253\nNode function = fnScope.getRootNode();\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node param = argList.getFirstChild();\n    while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n        Node next = param.getNext();\n        function.removeChild(param);\n        param = next;\n\n        compiler.reportCodeChange();\n    }\n    while (param != null) {\n        Node next = param.getNext();\n        if (!referenced.contains(fnScope.getVar(param.getString()))) {\n            argList.removeChild(param);\n            compiler.reportCodeChange();\n        }\n        param = next;\n    }\n}\nelse {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3063f59a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Notice that removing unreferenced function args breaks\n+// Function.prototype.length. In advanced mode, we don't really care\n+// about this: we consider \"length\" the equivalent of reflecting on\n+// the function's lexical source.\n+//\n+// Rather than create a new option for this, we assume that if the user\n+// is removing globals, then it's OK to remove unused function args.\n+//\n+// See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node param = argList.getFirstChild();\n+    while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n+        Node next = param.getNext();\n+        function.removeChild(param);\n+        param = next;\n+\n+        compiler.reportCodeChange();\n+    }\n+    while (param != null) {\n+        Node next = param.getNext();\n+        if (!referenced.contains(fnScope.getVar(param.getString()))) {\n+            argList.removeChild(param);\n+            compiler.reportCodeChange();\n+        }\n+        param = next;\n+    }\n+}\n+else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}