{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    int numIterations = 0;\n    final int maxIterations = getMaxIterations();\n    while (numIterations < maxIterations) {\n        numIterations++;\n\n        // save the original simplex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // perform an expansion step\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex; // accept the expanded simplex\n            } else {\n                simplex = evaluateNewSimplex(original, 0.5, comparator); // perform a reflection step\n            }\n            continue;\n        }\n\n        // perform a contraction step\n        final RealPointValuePair contracted = evaluateNewSimplex(original, beta, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            simplex = contracted; // accept the contracted simplex\n            continue;\n        }\n\n        // perform a shrink step\n        final RealPointValuePair[] shrinkedSimplex = simplex;\n        for (int i = 1; i < simplex.length; i++) {\n            shrinkedSimplex[i] = new RealPointValuePair(\n                PointValuePair.add(original[i].getPoint(), best.getPoint(), -0.5),\n                Double.NaN); // NaN will be replaced by point fitness\n        }\n        evaluateSimplex(shrinkedSimplex, comparator);\n        if (comparator.compare(shrinkedSimplex[0], best) < 0) {\n            simplex = shrinkedSimplex; // accept the shrinked simplex\n        } else {\n            simplex = new RealPointValuePair[]{best}; // accept the best simplex\n        }\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..fccd36e7e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,54 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+    int numIterations = 0;\n+    final int maxIterations = getMaxIterations();\n+    while (numIterations < maxIterations) {\n+        numIterations++;\n+\n+        // save the original simplex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // perform an expansion step\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex; // accept the expanded simplex\n+            } else {\n+                simplex = evaluateNewSimplex(original, 0.5, comparator); // perform a reflection step\n             }\n+            continue;\n+        }\n \n+        // perform a contraction step\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, beta, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            simplex = contracted; // accept the contracted simplex\n+            continue;\n         }\n \n+        // perform a shrink step\n+        final RealPointValuePair[] shrinkedSimplex = simplex;\n+        for (int i = 1; i < simplex.length; i++) {\n+            shrinkedSimplex[i] = new RealPointValuePair(\n+                PointValuePair.add(original[i].getPoint(), best.getPoint(), -0.5),\n+                Double.NaN); // NaN will be replaced by point fitness\n+        }\n+        evaluateSimplex(shrinkedSimplex, comparator);\n+        if (comparator.compare(shrinkedSimplex[0], best) < 0) {\n+            simplex = shrinkedSimplex; // accept the shrinked simplex\n+        } else {\n+            simplex = new RealPointValuePair[]{best}; // accept the best simplex\n+        }\n+        break;\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}