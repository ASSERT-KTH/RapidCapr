{
    "patch": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class RegularizedGammaFunction {\n\n    /**\n     * Calculates the regularized gamma function (P(a, x)).\n     *\n     * @param a shape parameter of the gamma distribution (must be > 0)\n     * @param x integration end point (must be >= 0)\n     * @return P(a, x)\n     */\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be > 0\");\n        }\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be >= 0\");\n        }\n\n        final double epsilon = 10e-15;\n        double term = 1.0 / a;\n        double sum = term;\n\n        /* Series summation via recurrence relation\n         * P(a, x+1) = P(a+1, x) + x^a * exp(-x)\n         * where a+1 equals a after each iteration\n         */\n        for (int i = 1; i <= 1000; ++i) {\n            term *= x / (a + i);\n            sum += term;\n            if (Math.abs(term) < Math.abs(sum) * epsilon) {\n                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n        }\n        throw new RuntimeException(\"Series did not converge after 1000 iterations.\");\n    }\n\n    /**\n     * Calculates the logarithm of the gamma function (ln(G(a))) for positive a.\n     * The original algorithm is due to Lanczos (1964), and has been adapted from the\n     * implementation in the R statistical computing environment's lgamma.c.\n     *\n     * @param x argument (must be > 0)\n     * @return ln(G(x))\n     */\n    public static double logGamma(double x) {\n        if (x <= 0.0) {\n            throw new IllegalArgumentException(\"Input argument must be positive.\");\n        }\n\n        final double[] lanczosCoeffs = { 0.9999999999998099, 676.5203681218851, -1259.139216722289,\n                771.3234287776531, -176.6150291621406, 12.50734324009056, -0.13857109526572012,\n                9.984369578019571e-6, 1.5056327351493116e-7 };\n\n        double sum = lanczosCoeffs[0];\n        for (int i = 1; i < lanczosCoeffs.length ; i++) {\n            sum += lanczosCoeffs[i] / (x + i);\n        }\n        return 0.5 * Math.log(2 * Math.PI) + Math.log(sum) - (x + 6.5) + (x - 0.5) * Math.log(x + 6.5);\n    }\n\n    @Test\n    public void testRegularizedGammaPositivePositive() {\n        final double a = 4.0;\n        final double x = 5.0;\n        final double expected = 0.7342947822210915;\n        final double actual = regularizedGamma(a, x);\n        final double epsilon = 10e-15;\n        assertEquals(expected, actual, epsilon);\n    }\n\n    @Test\n    public void testRegularizedGammaZeroPositive() {\n        final double a = 0;\n        final double x = 5.0;\n        final double expected = 0;\n        final double actual = regularizedGamma(a, x);\n        final double epsilon = 10e-15;\n        assertEquals(expected, actual, epsilon);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testRegularizedGammaNegativePositive() {\n        final double a = -4.0;\n        final double x = 5.0;\n        regularizedGamma(a, x);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testRegularizedGammaPositiveNegative() {\n        final double a = 4.0;\n        final double x = -5.0;\n        regularizedGamma(a, x);\n    }\n\n    @Test\n    public void testLogGammaPositive() {\n        final double x = 5.5;\n        final double expected = 4.036528198289017;\n        final double actual = logGamma(x);\n        final double epsilon = 10e-14;\n        assertEquals(expected, actual, epsilon);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testLogGammaZero() {\n        final double x = 0.0;\n        logGamma(x);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testLogGammaNegative() {\n        final double x = -5.5;\n        logGamma(x);\n    }\n    \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7dd675cf8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,124 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+public class RegularizedGammaFunction {\n+\n+    /**\n+     * Calculates the regularized gamma function (P(a, x)).\n+     *\n+     * @param a shape parameter of the gamma distribution (must be > 0)\n+     * @param x integration end point (must be >= 0)\n+     * @return P(a, x)\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be > 0\");\n+        }\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be >= 0\");\n+        }\n+\n+        final double epsilon = 10e-15;\n+        double term = 1.0 / a;\n+        double sum = term;\n+\n+        /* Series summation via recurrence relation\n+         * P(a, x+1) = P(a+1, x) + x^a * exp(-x)\n+         * where a+1 equals a after each iteration\n+         */\n+        for (int i = 1; i <= 1000; ++i) {\n+            term *= x / (a + i);\n+            sum += term;\n+            if (Math.abs(term) < Math.abs(sum) * epsilon) {\n+                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+            }\n+        }\n+        throw new RuntimeException(\"Series did not converge after 1000 iterations.\");\n+    }\n+\n+    /**\n+     * Calculates the logarithm of the gamma function (ln(G(a))) for positive a.\n+     * The original algorithm is due to Lanczos (1964), and has been adapted from the\n+     * implementation in the R statistical computing environment's lgamma.c.\n+     *\n+     * @param x argument (must be > 0)\n+     * @return ln(G(x))\n+     */\n+    public static double logGamma(double x) {\n+        if (x <= 0.0) {\n+            throw new IllegalArgumentException(\"Input argument must be positive.\");\n+        }\n+\n+        final double[] lanczosCoeffs = { 0.9999999999998099, 676.5203681218851, -1259.139216722289,\n+                771.3234287776531, -176.6150291621406, 12.50734324009056, -0.13857109526572012,\n+                9.984369578019571e-6, 1.5056327351493116e-7 };\n+\n+        double sum = lanczosCoeffs[0];\n+        for (int i = 1; i < lanczosCoeffs.length ; i++) {\n+            sum += lanczosCoeffs[i] / (x + i);\n+        }\n+        return 0.5 * Math.log(2 * Math.PI) + Math.log(sum) - (x + 6.5) + (x - 0.5) * Math.log(x + 6.5);\n+    }\n+\n+    @Test\n+    public void testRegularizedGammaPositivePositive() {\n+        final double a = 4.0;\n+        final double x = 5.0;\n+        final double expected = 0.7342947822210915;\n+        final double actual = regularizedGamma(a, x);\n+        final double epsilon = 10e-15;\n+        assertEquals(expected, actual, epsilon);\n+    }\n+\n+    @Test\n+    public void testRegularizedGammaZeroPositive() {\n+        final double a = 0;\n+        final double x = 5.0;\n+        final double expected = 0;\n+        final double actual = regularizedGamma(a, x);\n+        final double epsilon = 10e-15;\n+        assertEquals(expected, actual, epsilon);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testRegularizedGammaNegativePositive() {\n+        final double a = -4.0;\n+        final double x = 5.0;\n+        regularizedGamma(a, x);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testRegularizedGammaPositiveNegative() {\n+        final double a = 4.0;\n+        final double x = -5.0;\n+        regularizedGamma(a, x);\n+    }\n+\n+    @Test\n+    public void testLogGammaPositive() {\n+        final double x = 5.5;\n+        final double expected = 4.036528198289017;\n+        final double actual = logGamma(x);\n+        final double epsilon = 10e-14;\n+        assertEquals(expected, actual, epsilon);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testLogGammaZero() {\n+        final double x = 0.0;\n+        logGamma(x);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testLogGammaNegative() {\n+        final double x = -5.5;\n+        logGamma(x);\n+    }\n+    \n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}