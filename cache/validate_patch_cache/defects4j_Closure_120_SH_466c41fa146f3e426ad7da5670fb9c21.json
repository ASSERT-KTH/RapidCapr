{
    "patch": "          // Make sure this assignment is not in a loop, and wasn't updated in\n          // a loop.\n          for (; block != null; block = block.getParent()) {\n            if (block.isFunction) {\n              // Functions share a block with their declaration, which can be an\n              // assignment.  To avoid thinking that the variable is assigned in\n              // these cases, skip this block and continue checking the parent\n              // block.\n              continue;\n            } else if (block.isLoop) {\n              // The block has a loop statement; any change to this variable might\n              // be repeated in subsequent iterations.\n              if (changedInLoop) {\n                return false;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..72ee2b0d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Make sure this assignment is not in a loop, and wasn't updated in\n+          // a loop.\n+          for (; block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+              // Functions share a block with their declaration, which can be an\n+              // assignment.  To avoid thinking that the variable is assigned in\n+              // these cases, skip this block and continue checking the parent\n+              // block.\n+              continue;\n+            } else if (block.isLoop) {\n+              // The block has a loop statement; any change to this variable might\n+              // be repeated in subsequent iterations.\n+              if (changedInLoop) {\n+                return false;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}