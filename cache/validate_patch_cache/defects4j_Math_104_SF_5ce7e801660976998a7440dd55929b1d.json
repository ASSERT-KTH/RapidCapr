{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 10e-15;\n    final int maxIterations = 1000;\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n    if (n >= maxIterations) {\n        throw new MaxIterationsExceededException(maxIterations);\n    }\n    if (sum == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    final double epsilon = 10e-15;\n    final int maxIterations = 1000;\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1 - regularizedGammaP(a, x);\n    }\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getB(int n, double x) {\n            double ret;\n            double m = a + n;\n            ret = ((n % 2) == 0) ?\n                    (n / 2.0) * (-x + m - 1.0) :\n                    ((m - 1.0) / 2.0) * (x + n - m);\n            return ret;\n        }\n\n        @Override\n        protected double getA(int n, double x) {\n            return 1.0;\n        }\n    };\n    return 1.0 / fraction.evaluate(x / a, epsilon, maxIterations);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9a9340765 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,65 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 10e-15;\n+    final int maxIterations = 1000;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    if (n >= maxIterations) {\n+        throw new MaxIterationsExceededException(maxIterations);\n+    }\n+    if (sum == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    final double epsilon = 10e-15;\n+    final int maxIterations = 1000;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getB(int n, double x) {\n+            double ret;\n+            double m = a + n;\n+            ret = ((n % 2) == 0) ?\n+                    (n / 2.0) * (-x + m - 1.0) :\n+                    ((m - 1.0) / 2.0) * (x + n - m);\n+            return ret;\n+        }\n+\n+        @Override\n+        protected double getA(int n, double x) {\n+            return 1.0;\n+        }\n+    };\n+    return 1.0 / fraction.evaluate(x / a, epsilon, maxIterations);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}