{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() != Token.BLOCK) {\n    return false;\n  }\n\n  if (n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    while (maybeExpr.getType() == Token.BLOCK && maybeExpr.hasOneChild()) {\n      maybeExpr = maybeExpr.getFirstChild();\n    }\n\n    if (NodeUtil.isExpressionNode(maybeExpr)) {\n      if (!NodeUtil.mayHaveSideEffects(maybeExpr)) {\n        Node parent = maybeExpr.getParent();\n\n        if (parent != null && parent.getType() == Token.IF) {\n          Node grandparent = parent.getParent();\n\n          if (grandparent != null && grandparent.getType() == Token.IF) {\n            Node next = parent.getNext();\n            Node x = null;\n            Node y = null;\n\n            if (next != null && next.getType() == Token.BLOCK && next.getChildCount() == 2) {\n              x = next.getFirstChild();\n              y = x.getNext();\n              if (y.getNext() != null) {\n                return false;\n              }\n            } else {\n              x = parent.getFirstChild().getNext();\n              y = next;\n            }\n\n            if (x.getType() == Token.NAME && y.getType() == Token.CALL && \n                y.getFirstChild().getType() == Token.TRUE && !NodeUtil.mayHaveSideEffects(x)) {\n              return true;\n            }\n          }\n        }\n\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..c3ca970b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,56 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() != Token.BLOCK) {\n+    return false;\n+  }\n+\n+  if (n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    while (maybeExpr.getType() == Token.BLOCK && maybeExpr.hasOneChild()) {\n+      maybeExpr = maybeExpr.getFirstChild();\n     }\n \n-    return false;\n+    if (NodeUtil.isExpressionNode(maybeExpr)) {\n+      if (!NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+        Node parent = maybeExpr.getParent();\n+\n+        if (parent != null && parent.getType() == Token.IF) {\n+          Node grandparent = parent.getParent();\n+\n+          if (grandparent != null && grandparent.getType() == Token.IF) {\n+            Node next = parent.getNext();\n+            Node x = null;\n+            Node y = null;\n+\n+            if (next != null && next.getType() == Token.BLOCK && next.getChildCount() == 2) {\n+              x = next.getFirstChild();\n+              y = x.getNext();\n+              if (y.getNext() != null) {\n+                return false;\n+              }\n+            } else {\n+              x = parent.getFirstChild().getNext();\n+              y = next;\n+            }\n+\n+            if (x.getType() == Token.NAME && y.getType() == Token.CALL && \n+                y.getFirstChild().getType() == Token.TRUE && !NodeUtil.mayHaveSideEffects(x)) {\n+              return true;\n+            }\n+          }\n+        }\n+\n+        return true;\n+      }\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}