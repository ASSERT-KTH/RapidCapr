{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] expandedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflected.getPoint() != best.getPoint() ?\n                            reflected.getPoint() :\n                            evaluateNewSimplex(original, sigma, comparator).getPoint();\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint();\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[dimension + 1];\n                    shrinkedSimplex[0] = best;\n                    for (int i = 1; i < shrinkedSimplex.length; ++i) {\n                        shrinkedSimplex[i] = evaluateNewSimplex(original[i].getPoint(),\n                                beta,\n                                best.getPoint(),\n                                comparator);\n                    }\n                    simplex = shrinkedSimplex;\n\n                }\n\n            }\n\n            // check convergence\n            final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n            final double delta = FastMath.max(rtol * FastMath.abs(simplex[0].getValue()),\n                    atol);\n            if (comparator.compare(simplex[simplex.length - 1], simplex[0]) >= 0 &&\n                    range <= delta) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..19a93c28b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -74,29 +73,48 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n+                final RealPointValuePair[] expandedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflected.getPoint() != best.getPoint() ?\n+                            reflected.getPoint() :\n+                            evaluateNewSimplex(original, sigma, comparator).getPoint();\n                 }\n \n-                return;\n+            } else {\n+\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint();\n+                } else {\n+\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[dimension + 1];\n+                    shrinkedSimplex[0] = best;\n+                    for (int i = 1; i < shrinkedSimplex.length; ++i) {\n+                        shrinkedSimplex[i] = evaluateNewSimplex(original[i].getPoint(),\n+                                beta,\n+                                best.getPoint(),\n+                                comparator);\n+                    }\n+                    simplex = shrinkedSimplex;\n \n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                }\n \n-            // check convergence\n-                return;\n             }\n \n-        }\n-\n-    }\n+            // check convergence\n+            final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n+            final double delta = FastMath.max(rtol * FastMath.abs(simplex[0].getValue()),\n+                    atol);\n+            if (comparator.compare(simplex[simplex.length - 1], simplex[0]) >= 0 &&\n+                    range <= delta) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}