{
    "patch": "            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                \n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                \n                // at this point, we have determined that the transition occurs\n                // immediately after the instant `instantLocal - offsetAdjusted`.\n                // Therefore, if instantLocal is before the transition, its offset\n                // is offsetLocal, otherwise the offset should be the new offsetAdjusted\n                \n                // adjust instantLocal again to determine the target offset\n                long targetInstantAdjusted = nextTransition(instantLocal - offsetLocal);\n                int targetOffsetAdjusted = getOffset(targetInstantAdjusted);\n                if (targetOffsetAdjusted == offsetLocal) {\n                    return offsetLocal;\n                }\n                return offsetAdjusted;\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..08689aa9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                \n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                \n+                // at this point, we have determined that the transition occurs\n+                // immediately after the instant `instantLocal - offsetAdjusted`.\n+                // Therefore, if instantLocal is before the transition, its offset\n+                // is offsetLocal, otherwise the offset should be the new offsetAdjusted\n+                \n+                // adjust instantLocal again to determine the target offset\n+                long targetInstantAdjusted = nextTransition(instantLocal - offsetLocal);\n+                int targetOffsetAdjusted = getOffset(targetInstantAdjusted);\n+                if (targetOffsetAdjusted == offsetLocal) {\n+                    return offsetLocal;\n+                }\n+                return offsetAdjusted;\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}