{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    String name = v.getName();\n\n    if (n.isName() && parent.isVar()) {\n      Node initialValue = v.getInitialValue();\n      boolean isQualifiedName = false;\n\n      if (initialValue != null) {\n        if (initialValue.isThis()) {\n          continue;\n        } else if (initialValue.isQualifiedName()) {\n          isQualifiedName = true;\n        } else if (initialValue.isFunction() && !NodeUtil.isFunctionExpression(initialValue)) {\n          continue;\n        }\n      }\n\n      if (isQualifiedName) {\n        String qualifiedName = initialValue.getQualifiedName();\n        aliases.put(name, v);\n        transformation.addAlias(name, qualifiedName);\n      } else if (parent.getParent() == null) {\n        continue;\n      } else {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..ad9ef229 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,40 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    String name = v.getName();\n+\n+    if (n.isName() && parent.isVar()) {\n+      Node initialValue = v.getInitialValue();\n+      boolean isQualifiedName = false;\n+\n+      if (initialValue != null) {\n+        if (initialValue.isThis()) {\n+          continue;\n+        } else if (initialValue.isQualifiedName()) {\n+          isQualifiedName = true;\n+        } else if (initialValue.isFunction() && !NodeUtil.isFunctionExpression(initialValue)) {\n+          continue;\n         }\n       }\n+\n+      if (isQualifiedName) {\n+        String qualifiedName = initialValue.getQualifiedName();\n+        aliases.put(name, v);\n+        transformation.addAlias(name, qualifiedName);\n+      } else if (parent.getParent() == null) {\n+        continue;\n+      } else {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+      }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}