{
    "patch": "public static String escape(String s, String encoding) throws UnsupportedEncodingException {\n    StringBuilder sb = new StringBuilder();\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n    OutputStreamWriter writer = new OutputStreamWriter(buf, encoding);\n\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\"':\n                sb.append(\"\\\\\\\"\");\n                break;\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n\n            case '\\'':\n                sb.append(\"\\\\'\");\n                break;\n\n            case '\\\\':\n                sb.append(\"\\\\\\\\\");\n                break;\n            case ',':\n                sb.append(\"\\\\,\");\n                break;\n\n            default:\n                if (Character.isISOControl(c)) {\n                    try {\n                        writer.write(c);\n                        writer.flush();\n                        byte[] ba = buf.toByteArray();\n                        buf.reset();\n                        for (int j = 0; j < ba.length; j++) {\n                            sb.append('\\\\');\n                            sb.append(Integer.toOctalString((ba[j] & 0xff)));\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    sb.append(c);\n                }\n                break;\n        } // end switch\n    } // end for\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..aaed8560 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,70 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escape(String s, String encoding) throws UnsupportedEncodingException {\n+    StringBuilder sb = new StringBuilder();\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    OutputStreamWriter writer = new OutputStreamWriter(buf, encoding);\n+\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        switch (c) {\n+            case '\\n':\n+                sb.append(\"\\\\n\");\n+                break;\n+            case '\\r':\n+                sb.append(\"\\\\r\");\n+                break;\n+            case '\\t':\n+                sb.append(\"\\\\t\");\n+                break;\n+            case '\\\"':\n+                sb.append(\"\\\\\\\"\");\n+                break;\n+            case '&':\n+                sb.append(\"&amp;\");\n+                break;\n+            case '<':\n+                sb.append(\"&lt;\");\n+                break;\n+            case '>':\n+                sb.append(\"&gt;\");\n+                break;\n+\n+            case '\\'':\n+                sb.append(\"\\\\'\");\n+                break;\n+\n+            case '\\\\':\n+                sb.append(\"\\\\\\\\\");\n+                break;\n+            case ',':\n+                sb.append(\"\\\\,\");\n+                break;\n+\n+            default:\n+                if (Character.isISOControl(c)) {\n+                    try {\n+                        writer.write(c);\n+                        writer.flush();\n+                        byte[] ba = buf.toByteArray();\n+                        buf.reset();\n+                        for (int j = 0; j < ba.length; j++) {\n+                            sb.append('\\\\');\n+                            sb.append(Integer.toOctalString((ba[j] & 0xff)));\n+                        }\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                } else {\n+                    sb.append(c);\n+                }\n+                break;\n+        } // end switch\n+    } // end for\n+\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}