{
    "patch": "try {\n    field.set(fieldInstance, candidate);\n} catch (IllegalArgumentException e) {\n    // Ignore exception if we cannot inject the candidate\n} catch (IllegalAccessException e) {\n    // Ignore exception if we cannot inject the candidate\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..8fb1ee47d 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,16 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+try {\n+    field.set(fieldInstance, candidate);\n+} catch (IllegalArgumentException e) {\n+    // Ignore exception if we cannot inject the candidate\n+} catch (IllegalAccessException e) {\n+    // Ignore exception if we cannot inject the candidate\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}