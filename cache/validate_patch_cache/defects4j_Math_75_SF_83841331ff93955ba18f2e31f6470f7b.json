{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Comparable) {\n        SortedSet<Object> sortedSet = new TreeSet<>();\n        sortedSet.add(1);\n        sortedSet.add(2);\n        sortedSet.add(3);\n        sortedSet.add(4);\n        sortedSet.add(5);\n        return getCumPct(sortedSet, v);\n    } else {\n        return 0.0;\n    }\n}\nprivate double getCumPct(SortedSet<Object> sortedSet, Object v) {\n    double size = sortedSet.size();\n    double index = sortedSet.headSet(v).size();\n    return index / size;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..40b6e32e6 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,24 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Comparable) {\n+        SortedSet<Object> sortedSet = new TreeSet<>();\n+        sortedSet.add(1);\n+        sortedSet.add(2);\n+        sortedSet.add(3);\n+        sortedSet.add(4);\n+        sortedSet.add(5);\n+        return getCumPct(sortedSet, v);\n+    } else {\n+        return 0.0;\n     }\n+}\n+private double getCumPct(SortedSet<Object> sortedSet, Object v) {\n+    double size = sortedSet.size();\n+    double index = sortedSet.headSet(v).size();\n+    return index / size;\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}