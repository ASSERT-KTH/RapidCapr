{
    "patch": "      RefTreeBuilder builder = new RefTreeBuilder(options, this.fnNode, references);\n      RefRootExpr root = builder.build();\n      root.consolidateDeclaredNames();\n      for (RefIdentifier declaredName : root.getDeclaredNames()) {\n        if (declaredName.isFunctionName()) {\n          PersistentMap<RefNode, Void> functionAssignments = declaredName.getAllFunctionAssignments();\n          if (functionAssignments.count() > 1) {\n            return false;\n          }\n        } else {\n          List<RefNode> assignments = declaredName.getAllNonLocalAssignments();\n          if (assignments != null && assignments.size() > 1) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..21a2a21a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      RefTreeBuilder builder = new RefTreeBuilder(options, this.fnNode, references);\n+      RefRootExpr root = builder.build();\n+      root.consolidateDeclaredNames();\n+      for (RefIdentifier declaredName : root.getDeclaredNames()) {\n+        if (declaredName.isFunctionName()) {\n+          PersistentMap<RefNode, Void> functionAssignments = declaredName.getAllFunctionAssignments();\n+          if (functionAssignments.count() > 1) {\n+            return false;\n+          }\n+        } else {\n+          List<RefNode> assignments = declaredName.getAllNonLocalAssignments();\n+          if (assignments != null && assignments.size() > 1) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}