{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype,\n    // unless the function has a `@this` annotation or is assigned to a\n    // prototype property.\n    boolean isPrototypeProperty = false;\n    Node current = parent;\n    while (current != null && !isPrototypeProperty) {\n      if (NodeUtil.isGet(current)) {\n        Node getTarget = current.getFirstChild();\n        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n          // The function is being lent to a prototype.\n          isPrototypeProperty = true;\n          if (!jsDocHasThisType(jsDoc)) {\n            // We only want to traverse this function if it has a `@this`\n            // annotation.\n            return false;\n          }\n        }\n      }\n      current = current.getParent();\n    }\n    if (!isPrototypeProperty) {\n      // The function is not being lent to a prototype. We can traverse it.\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    }\n  } else if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n    if (lhs.getType() == Token.GETPROP &&\n        lhs.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n    if (n == lhs && lhs.getType() == Token.NAME) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nprivate boolean jsDocHasThisType(JSDocInfo jsDoc) {\n  return jsDoc != null && jsDoc.getParameterCount() > 0 &&\n         jsDoc.getParameterJSDocInfo(0).getType().toString().equals(\"{this}\");    \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..da5a825e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,72 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n+    // Don't traverse functions that are getting lent to a prototype,\n+    // unless the function has a `@this` annotation or is assigned to a\n+    // prototype property.\n+    boolean isPrototypeProperty = false;\n+    Node current = parent;\n+    while (current != null && !isPrototypeProperty) {\n+      if (NodeUtil.isGet(current)) {\n+        Node getTarget = current.getFirstChild();\n+        if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+          // The function is being lent to a prototype.\n+          isPrototypeProperty = true;\n+          if (!jsDocHasThisType(jsDoc)) {\n+            // We only want to traverse this function if it has a `@this`\n+            // annotation.\n+            return false;\n+          }\n+        }\n       }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n+      current = current.getParent();\n+    }\n+    if (!isPrototypeProperty) {\n+      // The function is not being lent to a prototype. We can traverse it.\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n-\n             // object literal keys\n             pType == Token.STRING ||\n             pType == Token.NUMBER)) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n+  } else if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    if (lhs.getType() == Token.GETPROP &&\n+        lhs.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    }\n+    if (n == lhs && lhs.getType() == Token.NAME) {\n+      return false;\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n+private boolean jsDocHasThisType(JSDocInfo jsDoc) {\n+  return jsDoc != null && jsDoc.getParameterCount() > 0 &&\n+         jsDoc.getParameterJSDocInfo(0).getType().toString().equals(\"{this}\");    \n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}