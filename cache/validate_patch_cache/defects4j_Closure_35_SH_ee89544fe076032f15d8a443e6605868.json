{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else {\n      ObjectType objType = ObjectType.cast(type);\n      if (objType != null) {\n        objType.markConstructorBasedOnly();\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..f5416bcf 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1133,6 +1133,25 @@ class TypeInference\n           }\n         }\n       }\n+    } else {\n+      ObjectType objType = ObjectType.cast(type);\n+      if (objType != null) {\n+        objType.markConstructorBasedOnly();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * If we access a property of a symbol, then that symbol is not\n+   * null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (type != narrowed) {\n+        scope = narrowScope(scope, n, narrowed);\n+      }\n     }\n   }\n ",
    "result_reason": "error: method dereferencePointer(Node,FlowScope) is already defined in class TypeInference",
    "test_result": "ERROR"
}