{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        Chronology chrono = partial.getChronology();\n        int month = chrono.monthOfYear().get(values[fieldIndex]);\n        int year = chrono.year().get(values[fieldIndex]);\n        int dayOfMonth = chrono.dayOfMonth().get(values[fieldIndex]);\n        int hourOfDay = chrono.hourOfDay().get(values[fieldIndex]);\n        int minuteOfHour = chrono.minuteOfHour().get(values[fieldIndex]);\n        int secondOfMinute = chrono.secondOfMinute().get(values[fieldIndex]);\n        int millisOfSecond = chrono.millisOfSecond().get(values[fieldIndex]);\n        MonthDay monthDay = new MonthDay(month, dayOfMonth);\n        YearMonth yearMonth = new YearMonth(year, month);\n        try {\n            yearMonth = yearMonth.plusMonths(valueToAdd);\n            monthDay = monthDay.withYear(yearMonth.getYear());\n        } catch (IllegalArgumentException iae) {\n            if (monthDay.getDayOfMonth() > 28) { // if we are on Feb. 29th, set the day to 28\n                monthDay = new MonthDay(month, 28);\n            }\n            monthDay = monthDay.plusMonths(valueToAdd);\n        }\n        year = yearMonth.getYear();\n        month = monthDay.getMonthOfYear();\n        dayOfMonth = monthDay.getDayOfMonth();\n        int[] newValues = new int[values.length];\n        newValues[fieldIndex] = year;\n        newValues[chrono.monthOfYear().getFieldIndex()] = month;\n        newValues[chrono.dayOfMonth().getFieldIndex()] = dayOfMonth;\n        newValues[chrono.hourOfDay().getFieldIndex()] = hourOfDay;\n        newValues[chrono.minuteOfHour().getFieldIndex()] = minuteOfHour;\n        newValues[chrono.secondOfMinute().getFieldIndex()] = secondOfMinute;\n        newValues[chrono.millisOfSecond().getFieldIndex()] = millisOfSecond;\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..326611e7 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        Chronology chrono = partial.getChronology();\n+        int month = chrono.monthOfYear().get(values[fieldIndex]);\n+        int year = chrono.year().get(values[fieldIndex]);\n+        int dayOfMonth = chrono.dayOfMonth().get(values[fieldIndex]);\n+        int hourOfDay = chrono.hourOfDay().get(values[fieldIndex]);\n+        int minuteOfHour = chrono.minuteOfHour().get(values[fieldIndex]);\n+        int secondOfMinute = chrono.secondOfMinute().get(values[fieldIndex]);\n+        int millisOfSecond = chrono.millisOfSecond().get(values[fieldIndex]);\n+        MonthDay monthDay = new MonthDay(month, dayOfMonth);\n+        YearMonth yearMonth = new YearMonth(year, month);\n+        try {\n+            yearMonth = yearMonth.plusMonths(valueToAdd);\n+            monthDay = monthDay.withYear(yearMonth.getYear());\n+        } catch (IllegalArgumentException iae) {\n+            if (monthDay.getDayOfMonth() > 28) { // if we are on Feb. 29th, set the day to 28\n+                monthDay = new MonthDay(month, 28);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            monthDay = monthDay.plusMonths(valueToAdd);\n         }\n+        year = yearMonth.getYear();\n+        month = monthDay.getMonthOfYear();\n+        dayOfMonth = monthDay.getDayOfMonth();\n+        int[] newValues = new int[values.length];\n+        newValues[fieldIndex] = year;\n+        newValues[chrono.monthOfYear().getFieldIndex()] = month;\n+        newValues[chrono.dayOfMonth().getFieldIndex()] = dayOfMonth;\n+        newValues[chrono.hourOfDay().getFieldIndex()] = hourOfDay;\n+        newValues[chrono.minuteOfHour().getFieldIndex()] = minuteOfHour;\n+        newValues[chrono.secondOfMinute().getFieldIndex()] = secondOfMinute;\n+        newValues[chrono.millisOfSecond().getFieldIndex()] = millisOfSecond;\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}