{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                // when we moved across a DST boundary\n                // and the localized time is before the gap,\n                // we need to push it to after the gap\n                long nextAdjustedList = nextTransition(instantAdjusted + 1);\n                if (instantLocal < nextAdjustedList) {\n                    return offsetAdjusted;\n                }\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ba4effc6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                // when we moved across a DST boundary\n+                // and the localized time is before the gap,\n+                // we need to push it to after the gap\n+                long nextAdjustedList = nextTransition(instantAdjusted + 1);\n+                if (instantLocal < nextAdjustedList) {\n+                    return offsetAdjusted;\n+                }\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}