{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n\n  public static double gamma(double x) {\n    double ret;\n    double sign;\n    if (x <= 0.0) {\n      sign = -1;\n    } else {\n      sign = 1;\n    }\n    if (FastMath.abs(x - FastMath.floor(x)) < 1e-10) {\n      ret = sign * FastMath.abs(Gamma.factorial((int) x - 1));\n    } else {\n      ret = sign * FastMath.exp(Gamma.logGamma(x));\n    }\n    return ret;\n  }\n  \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d3978bb62 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+\n+  public static double gamma(double x) {\n+    double ret;\n+    double sign;\n+    if (x <= 0.0) {\n+      sign = -1;\n+    } else {\n+      sign = 1;\n+    }\n+    if (FastMath.abs(x - FastMath.floor(x)) < 1e-10) {\n+      ret = sign * FastMath.abs(Gamma.factorial((int) x - 1));\n+    } else {\n+      ret = sign * FastMath.exp(Gamma.logGamma(x));\n+    }\n+    return ret;\n+  }\n+  \n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}