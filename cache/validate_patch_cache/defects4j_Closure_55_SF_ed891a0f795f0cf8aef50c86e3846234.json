{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (NodeUtil.isFunctionExpression(n)) {\n        return true;\n    } else if (n.isCall() && n.getFirstChild().isFunction()) {\n        if (n.getLastChild().getBooleanProp(Node.FREE_CALL)) {\n            // A free call to a function expression cannot be reduced.\n            return false;\n        }\n        Node parent = n.getParent();\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n            // A call that is the first child of an assign op cannot be reduced.\n            return false;\n        } else if (parent.isExprResult()) {\n            // A call that is an expression result (not used) cannot be reduced.\n            return false;\n        } else if (NodeUtil.isNameDeclaration(parent)) {\n            // A call that is part of a var, let or const declaration cannot be reduced.\n            return false;\n        }\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..2e76e8dc 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,29 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (NodeUtil.isFunctionExpression(n)) {\n+        return true;\n+    } else if (n.isCall() && n.getFirstChild().isFunction()) {\n+        if (n.getLastChild().getBooleanProp(Node.FREE_CALL)) {\n+            // A free call to a function expression cannot be reduced.\n+            return false;\n+        }\n+        Node parent = n.getParent();\n+        if (parent.isAssign() && parent.getFirstChild() == n) {\n+            // A call that is the first child of an assign op cannot be reduced.\n+            return false;\n+        } else if (parent.isExprResult()) {\n+            // A call that is an expression result (not used) cannot be reduced.\n+            return false;\n+        } else if (NodeUtil.isNameDeclaration(parent)) {\n+            // A call that is part of a var, let or const declaration cannot be reduced.\n+            return false;\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}