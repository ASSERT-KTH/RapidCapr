{
    "patch": "if(currentStrategy != null) {\n    if(currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n}\nif (nextStrategy == null && currentStrategy != null &&\n        currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\ncurrentFormatField = null;\nif (!collector.isEmpty()) {\n    strategies = collector.toArray(new Strategy[0]);\n    parsePattern = Pattern.compile(regex.toString());\n} else {\n    throw new IllegalArgumentException(\"Invalid pattern.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..3d61dec8 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,22 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if(currentStrategy != null) {\n+    if(currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+}\n+if (nextStrategy == null && currentStrategy != null &&\n+        currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+currentFormatField = null;\n+if (!collector.isEmpty()) {\n+    strategies = collector.toArray(new Strategy[0]);\n+    parsePattern = Pattern.compile(regex.toString());\n+} else {\n+    throw new IllegalArgumentException(\"Invalid pattern.\");\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}