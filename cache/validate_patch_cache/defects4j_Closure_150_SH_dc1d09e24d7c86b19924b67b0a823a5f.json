{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getToken()) {\n      case FUNCTION:\n        if (NodeUtil.isFunctionExpression(parent)) {\n          defineDeclaredFunction(n, parent);\n        } else if (NodeUtil.isStatement(n) && !NodeUtil.isLabel(n.getParent())) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case LP:\n        if (parent != null && parent.isCall()) {\n          handleFunctionInputs(parent);\n        } else if (parent == scope.getRootNode()) {\n          handleFunctionInputs(parent);\n        }\n        break;\n      case VAR:\n      case NAME:\n        defineVar(n, parent);\n        break;\n      case CATCH:\n        defineCatch(n, parent);\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9c8c1a2b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,30 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    attachLiteralTypes(n);\n+    switch (n.getToken()) {\n+      case FUNCTION:\n+        if (NodeUtil.isFunctionExpression(parent)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        } else if (NodeUtil.isStatement(n) && !NodeUtil.isLabel(n.getParent())) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      case LP:\n+        if (parent != null && parent.isCall()) {\n+          handleFunctionInputs(parent);\n+        } else if (parent == scope.getRootNode()) {\n+          handleFunctionInputs(parent);\n+        }\n+        break;\n+      case VAR:\n+      case NAME:\n+        defineVar(n, parent);\n+        break;\n+      case CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}