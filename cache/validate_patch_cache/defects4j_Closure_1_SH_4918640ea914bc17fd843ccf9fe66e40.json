{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    ColorGraphNode<Var> parametersNode = cfg.createParametersNode(fnScope);\n    for (Node param : argList.childNodes()) {\n      if (param.isDefaultValue()) {\n        parametersNode.replaceValue(\n            param.getFirstChild().getQualifiedName(), fnScope.createTempVar());\n      } else {\n        parametersNode.addValue(fnScope.getVar(param.getString()));\n      }\n    }\n    boolean canRemoveParams = cfg.removeUnnecessaryParameters();\n    ListIterator<ColorGraphNode<Var>> paramIter = parametersNode.getInputs().listIterator();\n    int paramIndex = 0;\n    while (paramIter.hasNext()) {\n      ColorGraphNode<Var> param = paramIter.next();\n      Node arg = argList.getChildAtIndex(paramIndex++);\n      if (!referenced.contains(param.getValue())) {\n        Preconditions.checkState(arg.isName());\n        String argName = arg.getString();\n        if (canRemoveParams) {\n          fnScope.undeclareFormalParam(argName);\n          arg.detach();\n          modifyParameterList = true;\n        }\n      }\n    }\n    if (modifyParameterList) {\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..214e241c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    ColorGraphNode<Var> parametersNode = cfg.createParametersNode(fnScope);\n+    for (Node param : argList.childNodes()) {\n+      if (param.isDefaultValue()) {\n+        parametersNode.replaceValue(\n+            param.getFirstChild().getQualifiedName(), fnScope.createTempVar());\n+      } else {\n+        parametersNode.addValue(fnScope.getVar(param.getString()));\n+      }\n+    }\n+    boolean canRemoveParams = cfg.removeUnnecessaryParameters();\n+    ListIterator<ColorGraphNode<Var>> paramIter = parametersNode.getInputs().listIterator();\n+    int paramIndex = 0;\n+    while (paramIter.hasNext()) {\n+      ColorGraphNode<Var> param = paramIter.next();\n+      Node arg = argList.getChildAtIndex(paramIndex++);\n+      if (!referenced.contains(param.getValue())) {\n+        Preconditions.checkState(arg.isName());\n+        String argName = arg.getString();\n+        if (canRemoveParams) {\n+          fnScope.undeclareFormalParam(argName);\n+          arg.detach();\n+          modifyParameterList = true;\n+        }\n+      }\n+    }\n+    if (modifyParameterList) {\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}