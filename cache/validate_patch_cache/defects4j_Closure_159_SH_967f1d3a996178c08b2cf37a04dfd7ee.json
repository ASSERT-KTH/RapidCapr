{
    "patch": "    if (NodeUtil.isCallToFunction(node)) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..bc35e37a 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,7 +774,7 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (NodeUtil.isCallToFunction(node)) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}