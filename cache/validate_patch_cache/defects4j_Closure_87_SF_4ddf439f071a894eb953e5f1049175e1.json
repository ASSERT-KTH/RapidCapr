{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Detect issue 291 pattern (logical-and of !x and y()).\n      if (isIssue291Pattern(maybeExpr)) {\n        return false;\n      }\n\n      // Check if the child node is an expression node.\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n\n  return false;\n}\n\n// Return true if the given node is an AST subtree that matches the buggy pattern from issue 291.\nprivate boolean isIssue291Pattern(Node n) {\n  // Pattern is:\n  // !(expr1) && expr2\n  if (n.getType() != Token.AND) {\n    return false;\n  }\n\n  Node lhs = n.getFirstChild();\n  if (lhs.getType() != Token.NOT || !lhs.hasOneChild()) {\n    return false;\n  }\n\n  Node rhs = n.getLastChild();\n  if (!NodeUtil.isExpressionNode(rhs)) {\n    return false;\n  }\n\n  Node expr1 = lhs.getFirstChild();\n  if (!NodeUtil.isExpressionNode(expr1)) {\n    return false;\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..513553d4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,50 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Detect issue 291 pattern (logical-and of !x and y()).\n+      if (isIssue291Pattern(maybeExpr)) {\n+        return false;\n       }\n+\n+      // Check if the child node is an expression node.\n+      return NodeUtil.isExpressionNode(maybeExpr);\n     }\n+  }\n+\n+  return false;\n+}\n+\n+// Return true if the given node is an AST subtree that matches the buggy pattern from issue 291.\n+private boolean isIssue291Pattern(Node n) {\n+  // Pattern is:\n+  // !(expr1) && expr2\n+  if (n.getType() != Token.AND) {\n+    return false;\n+  }\n \n+  Node lhs = n.getFirstChild();\n+  if (lhs.getType() != Token.NOT || !lhs.hasOneChild()) {\n     return false;\n   }\n \n+  Node rhs = n.getLastChild();\n+  if (!NodeUtil.isExpressionNode(rhs)) {\n+    return false;\n+  }\n+\n+  Node expr1 = lhs.getFirstChild();\n+  if (!NodeUtil.isExpressionNode(expr1)) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}