{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - initialOffset;\n    int secondOffset = getOffset(instantAdjusted);\n    if (initialOffset == secondOffset) {\n        return initialOffset;\n    }\n    boolean transitionIsGap = (secondOffset > initialOffset);\n    long transition = (transitionIsGap) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    int transitionOffset = getOffset(transition);\n    if (withinTransitionStartZone(instantLocal, initialOffset, transition, transitionIsGap)) {\n        return (transitionIsGap) ? initialOffset : transitionOffset;\n    }\n    if (withinTransitionEndZone(instantLocal, secondOffset, transition, transitionIsGap)) {\n        return transitionOffset;\n    }\n    return (transitionIsGap) ? initialOffset : transitionOffset;\n}\n\nprivate boolean withinTransitionStartZone(long instant, int offset1, long transition, boolean gap) {\n    long afterTransition = instant - transition;\n    int offset2 = getOffset(transition);\n    return (gap) ? (afterTransition < 0 && (-afterTransition) <= (transition - offset1 - instant)) : (afterTransition >= 0 && afterTransition < (offset2 - transition - instant));\n}\n\nprivate boolean withinTransitionEndZone(long instant, int offset1, long transition, boolean gap) {\n    long afterTransition = instant - transition;\n    int offset2 = getOffset(transition);\n    return (gap) ? (afterTransition >= 0 && afterTransition < (offset2 - transition - instant)) : (afterTransition < 0 && (-afterTransition) <= (transition - offset1 - instant));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9569e227 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,36 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - initialOffset;\n+    int secondOffset = getOffset(instantAdjusted);\n+    if (initialOffset == secondOffset) {\n+        return initialOffset;\n     }\n+    boolean transitionIsGap = (secondOffset > initialOffset);\n+    long transition = (transitionIsGap) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    int transitionOffset = getOffset(transition);\n+    if (withinTransitionStartZone(instantLocal, initialOffset, transition, transitionIsGap)) {\n+        return (transitionIsGap) ? initialOffset : transitionOffset;\n+    }\n+    if (withinTransitionEndZone(instantLocal, secondOffset, transition, transitionIsGap)) {\n+        return transitionOffset;\n+    }\n+    return (transitionIsGap) ? initialOffset : transitionOffset;\n+}\n+\n+private boolean withinTransitionStartZone(long instant, int offset1, long transition, boolean gap) {\n+    long afterTransition = instant - transition;\n+    int offset2 = getOffset(transition);\n+    return (gap) ? (afterTransition < 0 && (-afterTransition) <= (transition - offset1 - instant)) : (afterTransition >= 0 && afterTransition < (offset2 - transition - instant));\n+}\n+\n+private boolean withinTransitionEndZone(long instant, int offset1, long transition, boolean gap) {\n+    long afterTransition = instant - transition;\n+    int offset2 = getOffset(transition);\n+    return (gap) ? (afterTransition >= 0 && afterTransition < (offset2 - transition - instant)) : (afterTransition < 0 && (-afterTransition) <= (transition - offset1 - instant));\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}