{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.isBlockScope()) {\n        scope = scopeCreator.createScope(n, scope);\n    }\n\n    // Attach literal types before anything is modified.\n    attachLiteralTypes(n);\n\n    switch (n.getToken()) {\n        case FUNCTION:\n            if (parent.getToken() == Token.EXPR_RESULT ||\n                    (parent.getToken() == Token.ASSIGN &&\n                            parent.getFirstChild() == n)) {\n                // A function being used as a value when it is part of an\n                // expression statement or assigned to a variable is already\n                // handled by Es6ConvertSuper. Visiting it here again causes a stack\n                // overflow.\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case NAME:\n            if (NodeUtil.isLhsByDestructuring(parent)) {\n                // We do not want to create vars for the LHS of destructuring\n                // assignments and for loop heads.\n                return;\n            }\n            defineVar(n, parent);\n            break;\n        case VAR:\n            // Define each initializer. By picking them up here, we ensure that\n            // destructuring happens in the correct order. A context of FOR is\n            // for 'let' or 'const' inside a for loop.\n            boolean forContext = NodeUtil.isFor(parent);\n            Node nameNode = n.getFirstChild();\n            while (nameNode != null) {\n                if (nameNode.hasChildren()) {\n                    visit(t, nameNode.getFirstChild(), nameNode);\n                }\n                if (forContext && NodeUtil.isNameDeclaration(nameNode)) {\n                    // Do not define variables in for loops as those have block\n                    // scope.\n                    // Define the variable so its references can be inferred.\n                    defineVar(nameNode.getFirstChild(), nameNode);\n                }\n                nameNode = nameNode.getNext();\n            }\n            defineVar(n, parent);\n            break;\n        case CATCH:\n            defineCatch(n, parent);\n            break;\n        case LP:\n            if (parent.getToken() == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n                handleFunctionInputs(parent);\n            } else if (parent == scope.getRootNode()) {\n                handleFunctionInputs(parent);\n            }\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..517a90ac 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,70 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    if (n.isBlockScope()) {\n+        scope = scopeCreator.createScope(n, scope);\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    // Attach literal types before anything is modified.\n+    attachLiteralTypes(n);\n+\n+    switch (n.getToken()) {\n+        case FUNCTION:\n+            if (parent.getToken() == Token.EXPR_RESULT ||\n+                    (parent.getToken() == Token.ASSIGN &&\n+                            parent.getFirstChild() == n)) {\n+                // A function being used as a value when it is part of an\n+                // expression statement or assigned to a variable is already\n+                // handled by Es6ConvertSuper. Visiting it here again causes a stack\n+                // overflow.\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n+        case NAME:\n+            if (NodeUtil.isLhsByDestructuring(parent)) {\n+                // We do not want to create vars for the LHS of destructuring\n+                // assignments and for loop heads.\n+                return;\n+            }\n+            defineVar(n, parent);\n+            break;\n+        case VAR:\n+            // Define each initializer. By picking them up here, we ensure that\n+            // destructuring happens in the correct order. A context of FOR is\n+            // for 'let' or 'const' inside a for loop.\n+            boolean forContext = NodeUtil.isFor(parent);\n+            Node nameNode = n.getFirstChild();\n+            while (nameNode != null) {\n+                if (nameNode.hasChildren()) {\n+                    visit(t, nameNode.getFirstChild(), nameNode);\n+                }\n+                if (forContext && NodeUtil.isNameDeclaration(nameNode)) {\n+                    // Do not define variables in for loops as those have block\n+                    // scope.\n+                    // Define the variable so its references can be inferred.\n+                    defineVar(nameNode.getFirstChild(), nameNode);\n+                }\n+                nameNode = nameNode.getNext();\n+            }\n+            defineVar(n, parent);\n+            break;\n+        case CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        case LP:\n+            if (parent.getToken() == Token.CALL || NodeUtil.isFunctionExpression(parent)) {\n+                handleFunctionInputs(parent);\n+            } else if (parent == scope.getRootNode()) {\n+                handleFunctionInputs(parent);\n+            }\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}