{
    "patch": "    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n      return false;\n    }\n\n    if (NodeUtil.isCallOrNew(n)) {\n      Node functionCall = n.getFirstChild();\n      Node function = NodeUtil.isFunctionCall(functionCall) ? functionCall.getFirstChild() :\n          NodeUtil.isFunctionExpression(functionCall) ? functionCall : null;\n      if (function != null && NodeUtil.mayEffectMutableState(function)) {\n        return true;\n      }\n    }\n\n    if (n.isDelProp()) {\n      return true;\n    }\n\n    // Recurse on child nodes",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..06316d5b 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,26 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without an return statement)\n+    if (n == null) {\n+      return false;\n+    }\n+\n+    if (NodeUtil.isCallOrNew(n)) {\n+      Node functionCall = n.getFirstChild();\n+      Node function = NodeUtil.isFunctionCall(functionCall) ? functionCall.getFirstChild() :\n+          NodeUtil.isFunctionExpression(functionCall) ? functionCall : null;\n+      if (function != null && NodeUtil.mayEffectMutableState(function)) {\n+        return true;\n+      }\n+    }\n+\n+    if (n.isDelProp()) {\n+      return true;\n+    }\n+\n+    // Recurse on child nodes\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}