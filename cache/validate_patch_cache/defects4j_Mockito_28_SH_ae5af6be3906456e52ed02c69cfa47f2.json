{
    "patch": "        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, candidate);\n                if (field.getType() != candidate.getClass()) {\n                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n                }\n            } catch (IllegalAccessException e) {\n                throw new IllegalStateException(\"Could not set field value\", e);\n            }\n        } else {\n            injectMockCandidate(field.getType(), mocks, fieldInstance);",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..e2d1e830e 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, candidate);\n+                if (field.getType() != candidate.getClass()) {\n+                    injectMockCandidate(candidate.getClass(), mocks, candidate);\n+                }\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalStateException(\"Could not set field value\", e);\n+            }\n+        } else {\n+            injectMockCandidate(field.getType(), mocks, fieldInstance);\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}