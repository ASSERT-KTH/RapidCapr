{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments in Gamma.regularizedGammaQ\");\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    double ret;\n\n    if (x < a + 1.0) {\n        ret = integrateQ(a, x) * Math.pow(x, a) * Math.exp(-x) / a;\n    } else {\n        ret = 1.0 - incompleteGammaP(a, x);\n    }\n\n    while(ret > 1e-15 && x + a > 1.1){\n        x -= 1.0;\n        ret = regularizedGammaQ(a, x);\n    }\n\n    return ret;\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a3a15bb8f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,31 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments in Gamma.regularizedGammaQ\");\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    double ret;\n+\n+    if (x < a + 1.0) {\n+        ret = integrateQ(a, x) * Math.pow(x, a) * Math.exp(-x) / a;\n+    } else {\n+        ret = 1.0 - incompleteGammaP(a, x);\n+    }\n+\n+    while(ret > 1e-15 && x + a > 1.1){\n+        x -= 1.0;\n+        ret = regularizedGammaQ(a, x);\n+    }\n+\n+    return ret;\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}