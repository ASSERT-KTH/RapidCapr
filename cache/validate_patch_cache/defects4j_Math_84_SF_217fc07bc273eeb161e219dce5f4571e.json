{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, -1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair[] expandedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, -gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflected.getPoint() != original[0].getPoint() ? reflected.getPoint() : evaluateNewSimplex(original, sigma, comparator).getPoint();\n                }\n            } else {\n                // perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint() != original[0].getPoint() ? contracted.getPoint() : evaluateNewSimplex(original, sigma, comparator).getPoint();\n                } else {\n                    // perform a shrink step\n                    final RealPointValuePair[] shrunk = shrinkSimplex(comparator);\n                    if (comparator.compare(shrunk[0], original[0]) >= 0) {\n                        // if the reduction is still not good enough, we re-order the points\n                        Arrays.sort(original, comparator);\n                        simplex = original;\n                        break;\n                    } else {\n                        // accept the shrunk simplex\n                        simplex = shrunk;\n                    }\n                }\n            }\n\n            // check convergence\n            if (checker != null && checker.converged(getIterations(), original[0], simplex[0])) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..357429f1b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -70,32 +70,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+            final RealPointValuePair reflected = evaluateNewSimplex(original, -1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair[] expandedSimplex = simplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, -gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflected.getPoint() != original[0].getPoint() ? reflected.getPoint() : evaluateNewSimplex(original, sigma, comparator).getPoint();\n+                }\n+            } else {\n+                // perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint() != original[0].getPoint() ? contracted.getPoint() : evaluateNewSimplex(original, sigma, comparator).getPoint();\n+                } else {\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrunk = shrinkSimplex(comparator);\n+                    if (comparator.compare(shrunk[0], original[0]) >= 0) {\n+                        // if the reduction is still not good enough, we re-order the points\n+                        Arrays.sort(original, comparator);\n+                        simplex = original;\n+                        break;\n+                    } else {\n+                        // accept the shrunk simplex\n+                        simplex = shrunk;\n+                    }\n                 }\n-\n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (checker != null && checker.converged(getIterations(), original[0], simplex[0])) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}