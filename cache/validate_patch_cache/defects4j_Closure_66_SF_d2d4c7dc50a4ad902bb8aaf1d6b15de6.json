{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double total = 0.0, typed = 0.0;\n\n    JSONArray data = jsonObject.getJSONArray(\"data\");\n    for (int i = 0; i < data.length(); i++) {\n        JSONObject obj = data.getJSONObject(i);\n        String field = obj.getString(\"field\");\n        if (field.equals(\"total\")) {\n            total = obj.getDouble(\"value\");\n        } else if (field.equals(\"typed\")) {\n            typed = obj.getDouble(\"value\");\n        }\n    }\n\n    return (typed / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..909400c2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double total = 0.0, typed = 0.0;\n+\n+    JSONArray data = jsonObject.getJSONArray(\"data\");\n+    for (int i = 0; i < data.length(); i++) {\n+        JSONObject obj = data.getJSONObject(i);\n+        String field = obj.getString(\"field\");\n+        if (field.equals(\"total\")) {\n+            total = obj.getDouble(\"value\");\n+        } else if (field.equals(\"typed\")) {\n+            typed = obj.getDouble(\"value\");\n+        }\n+    }\n+\n+    return (typed / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}