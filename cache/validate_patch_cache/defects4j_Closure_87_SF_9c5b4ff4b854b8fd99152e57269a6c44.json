{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n    Node child = n.getFirstChild();\n\n    // Traverse up the parent tree and check if the expression is inside a conditional, loop, or hook\n    Node parent = n.getParent();\n    while (parent != null && parent.getType() != Token.SCRIPT) {\n      int type = parent.getType();\n      if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n        return false;\n      }\n      if (NodeUtil.isLoopStructure(parent)) {\n        Node condition = NodeUtil.getConditionExpression(parent);\n        if (condition != null && !NodeUtil.isExpressionNode(condition)) {\n          return false;\n        }\n        break;\n      }\n      if (type == Token.IF) {\n        Node condition = NodeUtil.getConditionExpression(parent);\n        if (condition != null && !NodeUtil.isExpressionNode(condition)) {\n          return false;\n        }\n      }\n      parent = parent.getParent();\n    }\n\n    // Check if child node is an expression node or an EXPR_RESULT containing an expression node\n    if (NodeUtil.isExpressionNode(child)\n        || (child.getType() == Token.EXPR_RESULT\n        && NodeUtil.isExpressionNode(child.getFirstChild()))) {\n\n      // Check for side effects and determine whether the block can be folded\n      if (NodeUtil.mayHaveSideEffects(child)) {\n        return false;\n      } else if (child.getType() == Token.EXPR_RESULT) {\n        Node expr = child.getFirstChild();\n        if (expr.getType() != Token.ASSIGN) {\n          return true;\n        }\n        \n        // Check if the block is the RHS of an assignment\n        Node grandparent = child.getParent().getParent();\n        if (grandparent.getType() == Token.EXPR_RESULT && grandparent.getParent().getType() == Token.BLOCK) {\n          boolean boolVal = grandparent.getParent().getFirstChild() == grandparent;\n          if (!boolVal) {\n            return false;\n          }\n          // Check that parent is an expression statement\n          if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n            // Check that grandparent's parent is an expression statement\n            Node greatGrandparent = grandparent.getParent().getParent();\n            if (greatGrandparent != null && greatGrandparent.getType() == Token.EXPR_RESULT) {\n              // Check that the condition of the conditional expression is a call to goog.asserts.fail\n              Node condition = NodeUtil.getConditionExpression(parent.getParent());\n              if (condition != null && condition.getType() == Token.CALL) {\n                Node callee = condition.getFirstChild();\n                if (callee != null && callee.matchesQualifiedName(\"goog.asserts.fail\")) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n        return false;\n      }\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..90aac2fa 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,77 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+    Node child = n.getFirstChild();\n+\n+    // Traverse up the parent tree and check if the expression is inside a conditional, loop, or hook\n+    Node parent = n.getParent();\n+    while (parent != null && parent.getType() != Token.SCRIPT) {\n+      int type = parent.getType();\n+      if (type == Token.HOOK || type == Token.AND || type == Token.OR) {\n+        return false;\n+      }\n+      if (NodeUtil.isLoopStructure(parent)) {\n+        Node condition = NodeUtil.getConditionExpression(parent);\n+        if (condition != null && !NodeUtil.isExpressionNode(condition)) {\n+          return false;\n+        }\n+        break;\n+      }\n+      if (type == Token.IF) {\n+        Node condition = NodeUtil.getConditionExpression(parent);\n+        if (condition != null && !NodeUtil.isExpressionNode(condition)) {\n+          return false;\n+        }\n       }\n+      parent = parent.getParent();\n     }\n \n-    return false;\n+    // Check if child node is an expression node or an EXPR_RESULT containing an expression node\n+    if (NodeUtil.isExpressionNode(child)\n+        || (child.getType() == Token.EXPR_RESULT\n+        && NodeUtil.isExpressionNode(child.getFirstChild()))) {\n+\n+      // Check for side effects and determine whether the block can be folded\n+      if (NodeUtil.mayHaveSideEffects(child)) {\n+        return false;\n+      } else if (child.getType() == Token.EXPR_RESULT) {\n+        Node expr = child.getFirstChild();\n+        if (expr.getType() != Token.ASSIGN) {\n+          return true;\n+        }\n+        \n+        // Check if the block is the RHS of an assignment\n+        Node grandparent = child.getParent().getParent();\n+        if (grandparent.getType() == Token.EXPR_RESULT && grandparent.getParent().getType() == Token.BLOCK) {\n+          boolean boolVal = grandparent.getParent().getFirstChild() == grandparent;\n+          if (!boolVal) {\n+            return false;\n+          }\n+          // Check that parent is an expression statement\n+          if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+            // Check that grandparent's parent is an expression statement\n+            Node greatGrandparent = grandparent.getParent().getParent();\n+            if (greatGrandparent != null && greatGrandparent.getType() == Token.EXPR_RESULT) {\n+              // Check that the condition of the conditional expression is a call to goog.asserts.fail\n+              Node condition = NodeUtil.getConditionExpression(parent.getParent());\n+              if (condition != null && condition.getType() == Token.CALL) {\n+                Node callee = condition.getFirstChild();\n+                if (callee != null && callee.matchesQualifiedName(\"goog.asserts.fail\")) {\n+                  return true;\n+                }\n+              }\n+            }\n+          }\n+        }\n+        return false;\n+      }\n+      return true;\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}