{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class GammaFunction {\n\n    public static double gamma(double x) {\n        if (x < 0.5) {\n            return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n        } else {\n            return Gamma.gamma(x);\n        }\n    }\n\n    public static void main(String[] args) {\n        double x = 1.0;\n        double expected = 1.0;\n        double actual = gamma(x);\n        double tolerance = 1e-15;\n        System.out.println(\"Test 1: Gamma(1.0)\");\n        check(expected, actual, tolerance);\n\n        x = 0.5;\n        expected = Math.sqrt(Math.PI);\n        actual = gamma(x);\n        System.out.println(\"Test 2: Gamma(0.5)\");\n        check(expected, actual, tolerance);\n\n        x = 5.0;\n        expected = 24.0;\n        actual = gamma(x);\n        System.out.println(\"Test 3: Gamma(5.0)\");\n        check(expected, actual, tolerance);\n\n    }\n\n    public static void check(double expected, double actual, double tolerance) {\n        if (MathUtils.equals(expected, actual, tolerance)) {\n            System.out.println(\"Test passed.\");\n        } else {\n            System.out.println(\"Test failed. Expected: \" + expected + \", actual: \" + actual);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..45279742e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,49 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class GammaFunction {\n+\n+    public static double gamma(double x) {\n+        if (x < 0.5) {\n+            return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n+        } else {\n+            return Gamma.gamma(x);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        double x = 1.0;\n+        double expected = 1.0;\n+        double actual = gamma(x);\n+        double tolerance = 1e-15;\n+        System.out.println(\"Test 1: Gamma(1.0)\");\n+        check(expected, actual, tolerance);\n+\n+        x = 0.5;\n+        expected = Math.sqrt(Math.PI);\n+        actual = gamma(x);\n+        System.out.println(\"Test 2: Gamma(0.5)\");\n+        check(expected, actual, tolerance);\n+\n+        x = 5.0;\n+        expected = 24.0;\n+        actual = gamma(x);\n+        System.out.println(\"Test 3: Gamma(5.0)\");\n+        check(expected, actual, tolerance);\n+\n+    }\n+\n+    public static void check(double expected, double actual, double tolerance) {\n+        if (MathUtils.equals(expected, actual, tolerance)) {\n+            System.out.println(\"Test passed.\");\n+        } else {\n+            System.out.println(\"Test failed. Expected: \" + expected + \", actual: \" + actual);\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}