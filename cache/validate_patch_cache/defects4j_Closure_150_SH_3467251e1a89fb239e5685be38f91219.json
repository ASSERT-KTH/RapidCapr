{
    "patch": "attachLiteralTypes(n);\nif (n.isFunction()) {\n  if (parent != null && parent.isCall()) {\n    handleFunctionInputs(parent);\n  } else if (parent != null && parent.isExprResult()\n    && parent.getFirstChild() == n) {\n      defineVar(n.getFirstChild(), parent);\n  } else if (NodeUtil.isFunctionDeclaration(n)) {\n      defineDeclaredFunction(n, parent);\n  }\n} else if (n.isCatch()) {\n  defineCatch(n, parent);\n} else if (n.isVar() || n.isName()) {\n  defineVar(n, parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4c819c66 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,21 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+if (n.isFunction()) {\n+  if (parent != null && parent.isCall()) {\n+    handleFunctionInputs(parent);\n+  } else if (parent != null && parent.isExprResult()\n+    && parent.getFirstChild() == n) {\n+      defineVar(n.getFirstChild(), parent);\n+  } else if (NodeUtil.isFunctionDeclaration(n)) {\n+      defineDeclaredFunction(n, parent);\n+  }\n+} else if (n.isCatch()) {\n+  defineCatch(n, parent);\n+} else if (n.isVar() || n.isName()) {\n+  defineVar(n, parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}