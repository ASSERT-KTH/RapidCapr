{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n\n    // Don't traverse assignments to prototype properties/subproperties\n    if (NodeUtil.isGet(lhs)) {\n      if (lhs.getType() == Token.GETPROP &&\n          lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n          llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n    } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n      return false;\n    }\n\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n\n  } else {\n    // Only traverse the right side if it's not an assignment to a prototype\n    // property or subproperty.\n\n    // Don't traverse assignments to prototype properties/subproperties\n    if (NodeUtil.isGet(lhs)) {\n      if (lhs.getType() == Token.GETPROP &&\n          lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n          llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n    }\n\n    // Skip traversing catch block parameter assignment\n    if (parent.getParent() != null &&\n        parent.getParent().getType() == Token.CATCH) {\n      return false;\n    }\n\n    // Understands type definitions via lends chains:\n    // - Don't traverse function calls that return functions.\n    // - Don't traverse constructors except when they appear in a name or assignment.\n    JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n    if (jsdoc != null && (jsdoc.isConstructor() || jsdoc.isInterface() ||\n        jsdoc.hasThisType() || jsdoc.isOverride())) {\n      return false;\n    }\n\n    int type = n.getType();\n    if (type == Token.FUNCTION || type == Token.NAME || type == Token.GETPROP) {\n      // Traverse function, name, and getprop definitions on the right side of the assignment\n      return true;\n    } else if (type == Token.CALL) {\n      Node callee = n.getFirstChild();\n\n      // Skip traversing function calls that return functions\n      if (NodeUtil.isFunctionObjectDef(callee)) {\n        return false;\n      }\n\n      if (NodeUtil.isPrototypePropertyDefiner(callee) ||\n          NodeUtil.isObjectDefinePropertiesDefinition(callee)) {\n        // Handles:\n        // - Foo.prototype = {...}\n        // - Object.defineProperties(Foo.prototype, {...})\n        return true;\n      }\n\n      // Only traverse constructors when they appear in a name or an assignment\n      if (callee.getType() == Token.NAME || callee.getType() == Token.ASSIGN) {\n        jsdoc = NodeUtil.getBestJSDocInfo(callee);\n        if (jsdoc != null && jsdoc.isConstructor()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8064f06d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,100 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+\n+    // Don't traverse assignments to prototype properties/subproperties\n+    if (NodeUtil.isGet(lhs)) {\n+      if (lhs.getType() == Token.GETPROP &&\n+          lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+          llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+    } else if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+      return false;\n+    }\n+\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+\n+  } else {\n+    // Only traverse the right side if it's not an assignment to a prototype\n+    // property or subproperty.\n+\n+    // Don't traverse assignments to prototype properties/subproperties\n+    if (NodeUtil.isGet(lhs)) {\n+      if (lhs.getType() == Token.GETPROP &&\n+          lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+          llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+    }\n+\n+    // Skip traversing catch block parameter assignment\n+    if (parent.getParent() != null &&\n+        parent.getParent().getType() == Token.CATCH) {\n+      return false;\n+    }\n+\n+    // Understands type definitions via lends chains:\n+    // - Don't traverse function calls that return functions.\n+    // - Don't traverse constructors except when they appear in a name or assignment.\n+    JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n+    if (jsdoc != null && (jsdoc.isConstructor() || jsdoc.isInterface() ||\n+        jsdoc.hasThisType() || jsdoc.isOverride())) {\n+      return false;\n+    }\n+\n+    int type = n.getType();\n+    if (type == Token.FUNCTION || type == Token.NAME || type == Token.GETPROP) {\n+      // Traverse function, name, and getprop definitions on the right side of the assignment\n+      return true;\n+    } else if (type == Token.CALL) {\n+      Node callee = n.getFirstChild();\n+\n+      // Skip traversing function calls that return functions\n+      if (NodeUtil.isFunctionObjectDef(callee)) {\n+        return false;\n+      }\n+\n+      if (NodeUtil.isPrototypePropertyDefiner(callee) ||\n+          NodeUtil.isObjectDefinePropertiesDefinition(callee)) {\n+        // Handles:\n+        // - Foo.prototype = {...}\n+        // - Object.defineProperties(Foo.prototype, {...})\n+        return true;\n+      }\n+\n+      // Only traverse constructors when they appear in a name or an assignment\n+      if (callee.getType() == Token.NAME || callee.getType() == Token.ASSIGN) {\n+        jsdoc = NodeUtil.getBestJSDocInfo(callee);\n+        if (jsdoc != null && jsdoc.isConstructor()) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    return false;\n+  }\n+}\n+\n+return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}