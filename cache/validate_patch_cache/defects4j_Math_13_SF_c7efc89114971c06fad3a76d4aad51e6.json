{
    "patch": "        final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n        final RealMatrix sqrt = solver.solve(identity);\n        final int n = sqrt.getRowDimension();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                sqrt.setEntry(i, j, 0.0);\n            }\n        }\n        final RealMatrix result = sqrt.transpose().multiply(sqrt);\n        return result;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1ede6604d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final DecompositionSolver solver = new LUDecomposition(m).getSolver();\n+        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+        final RealMatrix sqrt = solver.solve(identity);\n+        final int n = sqrt.getRowDimension();\n+        for (int i = 0; i < n; i++) {\n+            for (int j = i + 1; j < n; j++) {\n+                sqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n+        final RealMatrix result = sqrt.transpose().multiply(sqrt);\n+        return result;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}