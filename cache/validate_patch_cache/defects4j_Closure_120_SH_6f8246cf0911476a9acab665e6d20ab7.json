{
    "patch": "          // Make sure this assignment is not inside a loop.\n          // This is a stricter check than just verifying that block.isLoop is true,\n          // as some loops are marked as blocks without being proper loops.\n          for (BasicBlock successor : block.successors) {\n            if (successor.head.isBackwardGoto()) {\n              // This basic block jumps back to the beginning of the loop, which means\n              // the code inside the loop might be executed again, causing the variable\n              // to be assigned more than once. So we give up checking and return false.\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..4d075b11 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Make sure this assignment is not inside a loop.\n+          // This is a stricter check than just verifying that block.isLoop is true,\n+          // as some loops are marked as blocks without being proper loops.\n+          for (BasicBlock successor : block.successors) {\n+            if (successor.head.isBackwardGoto()) {\n+              // This basic block jumps back to the beginning of the loop, which means\n+              // the code inside the loop might be executed again, causing the variable\n+              // to be assigned more than once. So we give up checking and return false.\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}