{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the initial estimate of the offset\n    int initialOffset = getOffset(instantLocal);\n    // find the adjusted time using the initial estimate\n    long instantAdjusted = instantLocal - initialOffset;\n    // get the adjusted estimate of the offset\n    int adjustedOffset = getOffset(instantAdjusted);\n    // if the estimates are the same, return that estimate\n    if (initialOffset == adjustedOffset) {\n        return initialOffset;\n    }\n\n    // Determine the window around the transition\n    long nextTransition = nextTransition(instantLocal);\n    long prevTransition = previousTransition(instantLocal);\n\n    // Check if the instant is in a transition window\n    if (prevTransition == nextTransition) {\n        return initialOffset;\n    }\n\n    long transDiff = nextTransition - prevTransition;\n    int futureOffset = getOffset(nextTransition);\n    int pastOffset = getOffset(prevTransition);\n\n    if (futureOffset == pastOffset) {\n        // There's no ambiguity, return the future offset\n        return futureOffset;\n    }\n\n    if (futureOffset > pastOffset) {\n        // We are in a gap\n        if (initialOffset < futureOffset && initialOffset >= pastOffset) {\n            // We are in the gap, after the DST offset transition, but before the onset of the new/local standard time\n            // In this case, return the future offset\n            return futureOffset;\n        } else {\n            return initialOffset;\n        }\n    } else {\n        // We are in an overlap\n        long overlapStartLocal = prevTransition + futureOffset - initialOffset;\n        long overlapEndLocal = prevTransition + pastOffset - initialOffset;\n        if (instantLocal >= overlapStartLocal && instantLocal < overlapEndLocal) {\n            // We are in the overlap window, before the first wall-time instant occurs\n            // This means that we should use the previous offset\n            return pastOffset;\n        } else {\n            // We are either before or after the overlap window,\n            // or we are in the overlap window, but after the wall-time instant\n            // In any case, use the future offset\n            return futureOffset;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..70b2c324 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,61 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the initial estimate of the offset\n+    int initialOffset = getOffset(instantLocal);\n+    // find the adjusted time using the initial estimate\n+    long instantAdjusted = instantLocal - initialOffset;\n+    // get the adjusted estimate of the offset\n+    int adjustedOffset = getOffset(instantAdjusted);\n+    // if the estimates are the same, return that estimate\n+    if (initialOffset == adjustedOffset) {\n+        return initialOffset;\n+    }\n+\n+    // Determine the window around the transition\n+    long nextTransition = nextTransition(instantLocal);\n+    long prevTransition = previousTransition(instantLocal);\n+\n+    // Check if the instant is in a transition window\n+    if (prevTransition == nextTransition) {\n+        return initialOffset;\n+    }\n+\n+    long transDiff = nextTransition - prevTransition;\n+    int futureOffset = getOffset(nextTransition);\n+    int pastOffset = getOffset(prevTransition);\n+\n+    if (futureOffset == pastOffset) {\n+        // There's no ambiguity, return the future offset\n+        return futureOffset;\n+    }\n+\n+    if (futureOffset > pastOffset) {\n+        // We are in a gap\n+        if (initialOffset < futureOffset && initialOffset >= pastOffset) {\n+            // We are in the gap, after the DST offset transition, but before the onset of the new/local standard time\n+            // In this case, return the future offset\n+            return futureOffset;\n+        } else {\n+            return initialOffset;\n+        }\n+    } else {\n+        // We are in an overlap\n+        long overlapStartLocal = prevTransition + futureOffset - initialOffset;\n+        long overlapEndLocal = prevTransition + pastOffset - initialOffset;\n+        if (instantLocal >= overlapStartLocal && instantLocal < overlapEndLocal) {\n+            // We are in the overlap window, before the first wall-time instant occurs\n+            // This means that we should use the previous offset\n+            return pastOffset;\n+        } else {\n+            // We are either before or after the overlap window,\n+            // or we are in the overlap window, but after the wall-time instant\n+            // In any case, use the future offset\n+            return futureOffset;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}