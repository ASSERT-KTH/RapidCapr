{
    "patch": " if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.isThisTypeExplicit()) {\n        Node parent = n.getParent();\n        if (parent != null && has(oneOf(Token.GETPROP, Token.GETELEM)).asParentOf(n)) {\n          Node firstChild = parent.getFirstChild();\n          JSType ownerType = getJSType(firstChild);\n          if (!ownerType.isUnknownType() && !ownerType.isAllType()) {\n            // In type checking mode, validate that the nominal type of the owner\n            // object is a subtype of the explicit 'this' type.\n            JSType thisType = functionType.getTypeOfThis();\n            if (!thisType.isUnknownType() && !thisType.isAllType()\n                && !ownerType.isSubtype(thisType)) {\n              report(t, n, ILLEGAL_THIS);\n            }\n          }\n        } else {\n          report(t, n, ILLEGAL_THIS);\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e96f542d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.isThisTypeExplicit()) {\n+        Node parent = n.getParent();\n+        if (parent != null && has(oneOf(Token.GETPROP, Token.GETELEM)).asParentOf(n)) {\n+          Node firstChild = parent.getFirstChild();\n+          JSType ownerType = getJSType(firstChild);\n+          if (!ownerType.isUnknownType() && !ownerType.isAllType()) {\n+            // In type checking mode, validate that the nominal type of the owner\n+            // object is a subtype of the explicit 'this' type.\n+            JSType thisType = functionType.getTypeOfThis();\n+            if (!thisType.isUnknownType() && !thisType.isAllType()\n+                && !ownerType.isSubtype(thisType)) {\n+              report(t, n, ILLEGAL_THIS);\n+            }\n+          }\n+        } else {\n+          report(t, n, ILLEGAL_THIS);\n+        }\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+      ensureTyped(t, n);\n+    }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}