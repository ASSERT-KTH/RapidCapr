{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis()\n            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n    boolean weeksSupported = type.isSupported(DurationFieldType.weeks());\n    boolean daysSupported = type.isSupported(DurationFieldType.days());\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n\n    if (yearsSupported || monthsSupported) {\n        int totalMonths = (years * 12) + months;\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n\n        years = normalizedYears;\n        months = normalizedMonths;\n    }\n\n    if (weeksSupported || daysSupported) {\n\n        int totalDays = (weeks * 7) + days;\n        int normalizedWeeks = totalDays / 7;\n        int normalizedDays = totalDays % 7;\n\n        weeks = normalizedWeeks;\n        days = normalizedDays;\n\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n            .withYears(yearsSupported ? years : 0)\n            .withMonths(monthsSupported ? months : 0)\n            .withWeeks(weeksSupported ? weeks : 0)\n            .withDays(daysSupported ? days : 0);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f9f0a0f1 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,53 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis()\n+            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (getDays() * DateTimeConstants.MILLIS_PER_DAY)\n+            + (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+\n+    boolean yearsSupported = type.isSupported(DurationFieldType.years());\n+    boolean monthsSupported = type.isSupported(DurationFieldType.months());\n+    boolean weeksSupported = type.isSupported(DurationFieldType.weeks());\n+    boolean daysSupported = type.isSupported(DurationFieldType.days());\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    if (yearsSupported || monthsSupported) {\n+        int totalMonths = (years * 12) + months;\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+\n+        years = normalizedYears;\n+        months = normalizedMonths;\n     }\n \n+    if (weeksSupported || daysSupported) {\n+\n+        int totalDays = (weeks * 7) + days;\n+        int normalizedWeeks = totalDays / 7;\n+        int normalizedDays = totalDays % 7;\n+\n+        weeks = normalizedWeeks;\n+        days = normalizedDays;\n+\n+    }\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+            .withYears(yearsSupported ? years : 0)\n+            .withMonths(monthsSupported ? months : 0)\n+            .withWeeks(weeksSupported ? weeks : 0)\n+            .withDays(daysSupported ? days : 0);\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}