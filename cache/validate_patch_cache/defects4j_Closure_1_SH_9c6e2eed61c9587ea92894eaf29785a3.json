{
    "patch": "    Node function = fnScope.getRootNode();\n    List<Node> unusedArgs = new ArrayList<Node>();\n    Node argList = getFunctionArgList(function);\n\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        unusedArgs.add(arg);\n      }\n    }\n\n    // if found unusedArgs, remove it from function node and update parameter count\n    if (!unusedArgs.isEmpty()) {\n      int parameterCount = argList.getChildCount();\n      for (Node unusedArg : unusedArgs) {\n        argList.removeChild(unusedArg);\n        parameterCount--;\n        compiler.reportCodeChange();\n      }\n      function.putIntProp(Node.FUNCTION_LENGTH_PROP, parameterCount);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8851e08b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    List<Node> unusedArgs = new ArrayList<Node>();\n+    Node argList = getFunctionArgList(function);\n+\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        unusedArgs.add(arg);\n+      }\n+    }\n+\n+    // if found unusedArgs, remove it from function node and update parameter count\n+    if (!unusedArgs.isEmpty()) {\n+      int parameterCount = argList.getChildCount();\n+      for (Node unusedArg : unusedArgs) {\n+        argList.removeChild(unusedArg);\n+        parameterCount--;\n+        compiler.reportCodeChange();\n+      }\n+      function.putIntProp(Node.FUNCTION_LENGTH_PROP, parameterCount);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}