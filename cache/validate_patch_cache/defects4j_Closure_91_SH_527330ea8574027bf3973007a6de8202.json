{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        // don't traverse functions if they are part of an object literal property set\n        // e.g., var objectLit = { key1: value1, key2: function() {} };\n        // In the case above, this function should not be traversed.\n        Node grandparent = parent.getParent();\n        return !(grandparent != null &&\n                 grandparent.getType() == Token.OBJECTLIT &&\n                 parent.getFirstChild() != assignLhsChild);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f9a1e4fc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,14 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        // don't traverse functions if they are part of an object literal property set\n+        // e.g., var objectLit = { key1: value1, key2: function() {} };\n+        // In the case above, this function should not be traversed.\n+        Node grandparent = parent.getParent();\n+        return !(grandparent != null &&\n+                 grandparent.getType() == Token.OBJECTLIT &&\n+                 parent.getFirstChild() != assignLhsChild);\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}