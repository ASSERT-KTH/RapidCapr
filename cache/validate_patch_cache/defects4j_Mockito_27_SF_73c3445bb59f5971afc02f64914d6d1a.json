{
    "patch": "import org.mockito.internal.handler.MockHandlerImpl;\nimport org.mockito.internal.stubbing.InvocationContainerImpl;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.Invocation;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\nimport org.mockito.stubbing.Stubbing;\nimport org.mockito.stubbing.StubbingImpl;\nimport org.mockito.stubbing.StubbingStrategy;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic <T> void resetMock(final T mock) {\n\n    final MockUtil mockUtil = new MockUtil();\n    final Object mockInstance = mockUtil.getMockHandler(mock).getMockSettings().getMockInstance();\n    final InvocationContainerImpl invocationContainer = mockUtil.getInvocationContainer(mockInstance);\n    final MockHandlerImpl<T> oldHandler = mockUtil.getMockHandler(mock);\n\n    final List<Stubbing> stubbings = new ArrayList<Stubbing>(oldHandler.getRegisteredStubbings().getStubbings());\n\n    final StubbingStrategy returningDefaultStrategy = org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS).getStubbingStrategy();\n\n    for (Stubbing stubbing : stubbings) {\n        final Invocation invocation = stubbing.getInvocation();\n        final Answer newAnswer = returningDefaultStrategy.answerFor(invocation).getMock();\n        final Stubbing newStubbing = new StubbingImpl(invocation, newAnswer);\n        invocationContainer.removeRegisteredInvocation(stubbing.getInvocation());\n        invocationContainer.addAnswer(newStubbing);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..2da72bc2d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,39 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.handler.MockHandlerImpl;\n+import org.mockito.internal.stubbing.InvocationContainerImpl;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.Stubbing;\n+import org.mockito.stubbing.StubbingImpl;\n+import org.mockito.stubbing.StubbingStrategy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public <T> void resetMock(final T mock) {\n+\n+    final MockUtil mockUtil = new MockUtil();\n+    final Object mockInstance = mockUtil.getMockHandler(mock).getMockSettings().getMockInstance();\n+    final InvocationContainerImpl invocationContainer = mockUtil.getInvocationContainer(mockInstance);\n+    final MockHandlerImpl<T> oldHandler = mockUtil.getMockHandler(mock);\n+\n+    final List<Stubbing> stubbings = new ArrayList<Stubbing>(oldHandler.getRegisteredStubbings().getStubbings());\n+\n+    final StubbingStrategy returningDefaultStrategy = org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS).getStubbingStrategy();\n+\n+    for (Stubbing stubbing : stubbings) {\n+        final Invocation invocation = stubbing.getInvocation();\n+        final Answer newAnswer = returningDefaultStrategy.answerFor(invocation).getMock();\n+        final Stubbing newStubbing = new StubbingImpl(invocation, newAnswer);\n+        invocationContainer.removeRegisteredInvocation(stubbing.getInvocation());\n+        invocationContainer.addAnswer(newStubbing);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}