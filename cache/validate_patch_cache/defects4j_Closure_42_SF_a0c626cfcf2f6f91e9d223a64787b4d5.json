{
    "patch": "@Override\nNode processForInLoop(ForInLoop loopNode) {\n    AstNode iterator = loopNode.getIterator();\n    AstNode iteratedObject = loopNode.getIteratedObject();\n    Node body = transformBlock(loopNode.getBody());\n\n    Node left = transform(iterator);\n    Node right = transform(iteratedObject); \n    Node init = null;\n    Node condition = null;\n    Node increment = null;\n\n    if (left.getType() == Token.VAR) {\n        init = left;\n    } else {\n        // If the left side is not a var declaration, create one\n        init = newNode(Token.VAR, left.cloneNode());\n        init.copyInformationFrom(left);\n    }\n\n    String tempVarName = scope_.createTempName();\n\n    Node tempVar = new Node(Token.NAME, createName(tempVarName), Token.BLOCK);\n\n    condition = newNode(Token.IN, tempVar, right.cloneNode());\n    increment = newNode(\n            Token.EXPR_RESULT,\n            newNode(\n                    Token.ASSIGN,\n                    left.cloneNode(),\n                    newNode(Token.GETPROP, tempVar.cloneNode(), createName(\"next\"))));\n\n    Node forNode = newNode(Token.FOR, init, condition, increment, body);\n\n    Node initAssign = newNode(Token.VAR, tempVar.cloneNode());\n    Node rhs = transform(\n            new FunctionCall(new Name(\"createIterator\"), iteratedObject.getPosition(), ImmutableList.<AstNode>of(iteratedObject)));\n    rhs = transform(new ExpressionStatement(rhs));\n    Node callAssign = newNode(Token.EXPR_RESULT, rhs);\n\n    // Build up the block:\n    //   var tempVar;\n    //   tempVar = createIterator(iteratedObject);\n    //   for (initAssign + condition + increment) { body }\n    Node block = newNode(Token.BLOCK, initAssign, callAssign, forNode);\n    copyInformation(block, loopNode);\n    return block;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..283fbb4c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,54 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+@Override\n+Node processForInLoop(ForInLoop loopNode) {\n+    AstNode iterator = loopNode.getIterator();\n+    AstNode iteratedObject = loopNode.getIteratedObject();\n+    Node body = transformBlock(loopNode.getBody());\n+\n+    Node left = transform(iterator);\n+    Node right = transform(iteratedObject); \n+    Node init = null;\n+    Node condition = null;\n+    Node increment = null;\n+\n+    if (left.getType() == Token.VAR) {\n+        init = left;\n+    } else {\n+        // If the left side is not a var declaration, create one\n+        init = newNode(Token.VAR, left.cloneNode());\n+        init.copyInformationFrom(left);\n+    }\n+\n+    String tempVarName = scope_.createTempName();\n+\n+    Node tempVar = new Node(Token.NAME, createName(tempVarName), Token.BLOCK);\n+\n+    condition = newNode(Token.IN, tempVar, right.cloneNode());\n+    increment = newNode(\n+            Token.EXPR_RESULT,\n+            newNode(\n+                    Token.ASSIGN,\n+                    left.cloneNode(),\n+                    newNode(Token.GETPROP, tempVar.cloneNode(), createName(\"next\"))));\n+\n+    Node forNode = newNode(Token.FOR, init, condition, increment, body);\n+\n+    Node initAssign = newNode(Token.VAR, tempVar.cloneNode());\n+    Node rhs = transform(\n+            new FunctionCall(new Name(\"createIterator\"), iteratedObject.getPosition(), ImmutableList.<AstNode>of(iteratedObject)));\n+    rhs = transform(new ExpressionStatement(rhs));\n+    Node callAssign = newNode(Token.EXPR_RESULT, rhs);\n+\n+    // Build up the block:\n+    //   var tempVar;\n+    //   tempVar = createIterator(iteratedObject);\n+    //   for (initAssign + condition + increment) { body }\n+    Node block = newNode(Token.BLOCK, initAssign, callAssign, forNode);\n+    copyInformation(block, loopNode);\n+    return block;\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processExpressionStatement(ExpressionStatement) in TypeSafeDispatcher",
    "test_result": "ERROR"
}