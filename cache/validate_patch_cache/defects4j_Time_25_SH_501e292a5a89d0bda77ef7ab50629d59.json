{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted + 1);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + 1);\n            // handle the case when we went too far and jumped over the next transition\n            int diff = offsetLocal - offsetAdjusted;\n            if (nextLocal <= instantAdjusted && nextAdjusted > instantLocal) {\n                nextLocal = nextTransition(nextLocal + 1);\n            } else {\n                nextAdjusted = nextTransition(nextAdjusted + 1);\n            }\n            if (nextLocal != nextAdjusted || diff == 0) {\n                return offsetAdjusted;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..645a4651 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+            long nextLocal = nextTransition(instantAdjusted + 1);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + 1);\n+            // handle the case when we went too far and jumped over the next transition\n+            int diff = offsetLocal - offsetAdjusted;\n+            if (nextLocal <= instantAdjusted && nextAdjusted > instantLocal) {\n+                nextLocal = nextTransition(nextLocal + 1);\n+            } else {\n+                nextAdjusted = nextTransition(nextAdjusted + 1);\n+            }\n+            if (nextLocal != nextAdjusted || diff == 0) {\n+                return offsetAdjusted;\n+            }\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}