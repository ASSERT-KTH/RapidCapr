{
    "patch": "            DateTimeField field = savedFields[i].iField;\n            int next = i + 1;\n            if (next < count && savedFields[next].iField == field) {\n                // have two fields of same type next to each other\n                // choose the lowest magnitude one.\n                field = savedFields[next].iField.getRangeDurationField();\n                int idx = i;\n                long min = savedFields[i].getMillis();\n                do {\n                    i = next;\n                    next += 1;\n                    if (next >= count) {\n                        break;\n                    }\n                } while (savedFields[next].iField == field);\n                // found a higher magnitude field, go back one\n                if (savedFields[i].getMillis() != min) {\n                    i -= 1;\n                }\n                // Remove duplicate fields from the saved and cloned list\n                System.arraycopy(savedFields, i + 1, savedFields, i, count - i - 1);\n                count -= 1;\n                System.arraycopy(iSavedFields, i + 1, iSavedFields, i, count - i);\n                iSavedFields[count] = null;\n                i -= 1;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4a72664f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,32 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DateTimeField field = savedFields[i].iField;\n+            int next = i + 1;\n+            if (next < count && savedFields[next].iField == field) {\n+                // have two fields of same type next to each other\n+                // choose the lowest magnitude one.\n+                field = savedFields[next].iField.getRangeDurationField();\n+                int idx = i;\n+                long min = savedFields[i].getMillis();\n+                do {\n+                    i = next;\n+                    next += 1;\n+                    if (next >= count) {\n+                        break;\n+                    }\n+                } while (savedFields[next].iField == field);\n+                // found a higher magnitude field, go back one\n+                if (savedFields[i].getMillis() != min) {\n+                    i -= 1;\n+                }\n+                // Remove duplicate fields from the saved and cloned list\n+                System.arraycopy(savedFields, i + 1, savedFields, i, count - i - 1);\n+                count -= 1;\n+                System.arraycopy(iSavedFields, i + 1, iSavedFields, i, count - i);\n+                iSavedFields[count] = null;\n+                i -= 1;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}