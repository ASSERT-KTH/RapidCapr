{
    "patch": "public static boolean containsAny(CharSequence sequence, char... searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLen = sequence.length();\n    int searchLen = searchChars.length;\n    int strLast = strLen - 1;\n    int searchLast = searchLen - 1;\n    for (int i = 0; i < strLen; i++) {\n        char ch = sequence.charAt(i);\n        if (searchChars[0] == ch && searchLen == 1) {\n            return true;\n        } else if (searchChars[0] == ch) {\n            int k = i + 1;\n            int j = 1;\n            while (j < searchLen && k < strLen) {\n                if (searchChars[j] == sequence.charAt(k)) {\n                    j++;\n                } else {\n                    break;\n                }\n                k++;\n            }\n            if (j == searchLen) {\n                return true;\n            }\n        } else if (Character.isHighSurrogate(ch) && searchLen > 1 && i < strLast) {\n            int k = i + 1;\n            int j = 1;\n            char[] chr = Character.toChars(Character.toCodePoint(ch, sequence.charAt(k)));\n            if (searchChars[0] == chr[0]) {\n                while (j < searchLen && k < strLen) {\n                        if (searchChars[j] != chr[(k - i) % 2]) {\n                            break;\n                        }\n                        j++;\n                        if (Character.isHighSurrogate(sequence.charAt(k)) && k < strLast) {\n                            k++;\n                            chr = Character.toChars(Character.toCodePoint(ch, sequence.charAt(k)));\n                        } else {\n                            k++;\n                            chr = new char[]{sequence.charAt(k)};\n                        }\n                }\n                if (j == searchLen) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..fd7d8e86 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,58 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char... searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLen = sequence.length();\n+    int searchLen = searchChars.length;\n+    int strLast = strLen - 1;\n+    int searchLast = searchLen - 1;\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = sequence.charAt(i);\n+        if (searchChars[0] == ch && searchLen == 1) {\n+            return true;\n+        } else if (searchChars[0] == ch) {\n+            int k = i + 1;\n+            int j = 1;\n+            while (j < searchLen && k < strLen) {\n+                if (searchChars[j] == sequence.charAt(k)) {\n+                    j++;\n+                } else {\n+                    break;\n+                }\n+                k++;\n+            }\n+            if (j == searchLen) {\n+                return true;\n+            }\n+        } else if (Character.isHighSurrogate(ch) && searchLen > 1 && i < strLast) {\n+            int k = i + 1;\n+            int j = 1;\n+            char[] chr = Character.toChars(Character.toCodePoint(ch, sequence.charAt(k)));\n+            if (searchChars[0] == chr[0]) {\n+                while (j < searchLen && k < strLen) {\n+                        if (searchChars[j] != chr[(k - i) % 2]) {\n+                            break;\n+                        }\n+                        j++;\n+                        if (Character.isHighSurrogate(sequence.charAt(k)) && k < strLast) {\n+                            k++;\n+                            chr = Character.toChars(Character.toCodePoint(ch, sequence.charAt(k)));\n+                        } else {\n+                            k++;\n+                            chr = new char[]{sequence.charAt(k)};\n+                        }\n+                }\n+                if (j == searchLen) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}