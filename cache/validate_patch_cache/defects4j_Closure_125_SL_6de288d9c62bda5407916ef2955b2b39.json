{
    "patch": "if (type.toMaybeFunctionType() != null && (type.toMaybeFunctionType().isConstructor() || type.toMaybeFunctionType().isFunctionPrototype())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..025fcd16 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+if (type.toMaybeFunctionType() != null && (type.toMaybeFunctionType().isConstructor() || type.toMaybeFunctionType().isFunctionPrototype())) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}