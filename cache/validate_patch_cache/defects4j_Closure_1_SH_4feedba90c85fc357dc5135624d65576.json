{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String paramName = lastArg.getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          fnScope.undeclare(var);\n          lastArg = argList.getLastChild();\n        } else {\n          referenced.remove(var);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..edecbd3a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String paramName = lastArg.getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          fnScope.undeclare(var);\n+          lastArg = argList.getLastChild();\n+        } else {\n+          referenced.remove(var);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}