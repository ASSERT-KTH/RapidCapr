{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetAdjusted < offsetLocal) {\n        long nextInstant = nextTransition(instantAdjusted);\n        long nextAdjustedInstant = nextTransition(instantLocal - offsetAdjusted);\n        if ((nextInstant == nextAdjustedInstant) && (offsetAdjusted == -3)) {\n            long nextOffsetInstant = nextTransition(nextInstant);\n            long dstGapSize = nextOffsetInstant - nextInstant;\n            long dueToMoscowSpecialRule = Math.min(1800000L, dstGapSize / 2L); // 30-minute rule for Moscow\n            long dstGapEnd = nextInstant + dstGapSize - dueToMoscowSpecialRule;\n            if ((instantLocal < dstGapEnd) || (nextAdjustedInstant > (dstGapEnd + dueToMoscowSpecialRule))) {\n                return offsetLocal;\n            }\n        }\n        if ((nextInstant - instantAdjusted) < (nextAdjustedInstant - instantLocal)) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    } else {\n        long prevInstant = previousTransition(instantAdjusted);\n        long prevAdjustedInstant = previousTransition(instantLocal - offsetLocal);\n        if ((instantAdjusted - prevInstant) < (instantLocal - prevAdjustedInstant)) {\n            return offsetAdjusted;\n        }\n        return offsetLocal;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5b832503 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetAdjusted < offsetLocal) {\n+        long nextInstant = nextTransition(instantAdjusted);\n+        long nextAdjustedInstant = nextTransition(instantLocal - offsetAdjusted);\n+        if ((nextInstant == nextAdjustedInstant) && (offsetAdjusted == -3)) {\n+            long nextOffsetInstant = nextTransition(nextInstant);\n+            long dstGapSize = nextOffsetInstant - nextInstant;\n+            long dueToMoscowSpecialRule = Math.min(1800000L, dstGapSize / 2L); // 30-minute rule for Moscow\n+            long dstGapEnd = nextInstant + dstGapSize - dueToMoscowSpecialRule;\n+            if ((instantLocal < dstGapEnd) || (nextAdjustedInstant > (dstGapEnd + dueToMoscowSpecialRule))) {\n+                return offsetLocal;\n+            }\n+        }\n+        if ((nextInstant - instantAdjusted) < (nextAdjustedInstant - instantLocal)) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    } else {\n+        long prevInstant = previousTransition(instantAdjusted);\n+        long prevAdjustedInstant = previousTransition(instantLocal - offsetLocal);\n+        if ((instantAdjusted - prevInstant) < (instantLocal - prevAdjustedInstant)) {\n+            return offsetAdjusted;\n+        }\n+        return offsetLocal;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}