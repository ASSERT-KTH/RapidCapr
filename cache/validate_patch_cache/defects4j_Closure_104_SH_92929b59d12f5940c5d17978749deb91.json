{
    "patch": "    if (result != null) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }\n\n  /**\n   * Returns true if every alternate was an object type.\n   */\n  private boolean isPureObjectUnion() {\n    for (JSType alternate : this.alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n      // If one alternate is a non-object, and we're looking at the last alternate, then this\n      // UnionType isn't a pure object union.\n    }\n    return true;\n  }\n\n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    return isPureObjectUnion();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..d7ff0f5d 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -297,6 +297,56 @@ public class UnionType extends JSType {\n     }\n   }\n \n+  /**\n+   * Returns true if every alternate was an object type.\n+   */\n+  private boolean isPureObjectUnion() {\n+    for (JSType alternate : this.alternates) {\n+      if (!alternate.isObject()) {\n+        return false;\n+      }\n+      // If one alternate is a non-object, and we're looking at the last alternate, then this\n+      // UnionType isn't a pure object union.\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Two union types are equal if they have the same number of alternates\n+   * and all alternates are equal.\n+   */\n+  @Override\n+  public boolean equals(Object object) {\n+    if (object instanceof UnionType) {\n+      UnionType that = (UnionType) object;\n+      return alternates.equals(that.alternates);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return alternates.hashCode();\n+  }\n+\n+  @Override\n+  public boolean isUnionType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isObject() {\n+    return isPureObjectUnion();\n+  }\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n+\n   /**\n    * Two union types are equal if they have the same number of alternates\n    * and all alternates are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}