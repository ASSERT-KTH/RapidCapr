{
    "patch": "    @Override\n    public RealVector doOptimize() throws OptimizationException {\n        final double[] targetValues = getTarget();\n        final int nR = targetValues.length;\n        final int nC = start.getDimension();\n        final double[] residualsWeights = getWeight() == null ? new double[nR] : getWeight().getWeights();\n        final double[] sortedResidualsWeights = residualsWeights.clone();\n        Arrays.sort(sortedResidualsWeights);\n\n        final double[] sortedResiduals = new double[nR];\n        final int[] index = new int[nR];\n        final double[] weights = new double[nR];\n        final double[] currentPoint = start.toArray();\n        final double[] lowerBound = getLowerBound();\n        final double[] upperBound = getUpperBound();\n\n        // Compute the initial residual\n        double[] currentResiduals = computeResiduals(currentPoint);\n        double currentCost = computeCost(currentResiduals);\n\n        final int maxEvaluations = getMaxEvaluations();\n        int evaluation = 0;\n        final int nE = getCurrentEvaluationCount();\n        double delta = 0;\n        while (evaluation < maxEvaluations && nE < maxEvaluations) {\n            ++evaluation;\n            // sort the residuals by absolute value (in descending order)\n            for (int i = 0; i < nR; ++i) {\n                index[i] = i;\n                sortedResiduals[i] = Math.abs(currentResiduals[i]) * sortedResidualsWeights[i];\n            }\n            Arrays.sort(index, new Comparator<Integer>() {\n                @Override\n                public int compare(final Integer o1, final Integer o2) {\n                    return -Double.compare(sortedResiduals[o1], sortedResiduals[o2]);\n                }\n            });\n\n            int[] cols = model.cols(currentPoint);\n            RealMatrix weightedJacobian = model.jacobian(currentPoint);\n            for (int i = 0; i < cols.length; ++i) {\n                weightedJacobian.setColumnVector(i, weightedJacobian.getColumnVector(i).mapMultiply(residualsWeights));\n            }\n\n            final double[] currentPointWithBoundaries = project(currentPoint, weightedJacobian);\n            final double[] modelResiduals = computeResiduals(currentPointWithBoundaries);\n            RealVector b = new ArrayRealVector(nR);\n            for (int i = 0; i < nR; ++i) {\n                b.setEntry(i, modelResiduals[index[i]] * residualsWeights[index[i]]);\n\n                // resorting arrays due to them being sorted before\n                sortedResiduals[index[i]] = Math.abs(modelResiduals[index[i]]) * sortedResidualsWeights[index[i]];\n                weights[i] = sortedResiduals[index[i]] == 0 ? 0 : 1.0 / sqrt(sortedResiduals[index[i]]);\n            }\n\n            RealMatrix weightedJacobianP = new Array2DRowRealMatrix(cols.length, nR);\n            for (int k = 0; k < cols.length; ++k) {\n                final int j = cols[k];\n                for (int i = 0; i < nR; ++i) {\n                    weightedJacobianP.setEntry(k, i, weightedJacobian.getEntry(index[i], j) * weights[index[i]]);\n                }\n            }\n            RealMatrix jPj = weightedJacobianP.transpose().multiply(weightedJacobianP);\n\n            for (int i = 0; i < weightedJacobianP.getColumnDimension(); i++) {\n                double d = jPj.getEntry(i, i);\n                d = d * (1 + eps);\n                delta = Math.max(delta, d);\n            }\n\n            double[] newPoint = currentPoint.clone();\n            double rho = 0;\n            for (double ratio = 0; ratio < 1.e-4;) {\n                final RealVector residual = new ArrayRealVector(b.toArray(), false);\n                final DecompositionSolver solver = new CholeskyDecomposition(jPj, delta).getSolver();\n                RealVector dX = solver.solve(residual);\n                RealVector dP = new ArrayRealVector(currentPoint.length);\n                for (int i = 0; i < cols.length; ++i) {\n                    final int j = cols[i];\n                    dP.setEntry(j, dX.getEntry(i));\n                }\n                rho = (computeCost(computeResiduals(currentPoint.add(dP.toArray()))) - currentCost) / (dX.dotProduct(delta * dX + residual));\n                if (Double.isNaN(rho)) {\n                    delta *= 4;\n                } else if (rho >= 0) {\n                    for (int i = 0; i < newPoint.length; ++i) {\n                        newPoint[i] = currentPoint[i] + dP.getEntry(i);\n                    }\n                    double[] newResiduals = computeResiduals(newPoint);\n                    double newCost = computeCost(newResiduals);\n                    if (newCost < currentCost) {\n                        delta *= 1.0/3.0;\n                        double tmp = currentCost; currentCost = newCost; newCost = tmp;\n                        double[] tmpR = currentResiduals; currentResiduals = newResiduals; newResiduals = tmpR;\n                        final double[] tmpP = currentPoint; currentPoint = newPoint; newPoint = tmpP;\n                        setCurrentEvaluationCount(nE + nR);\n                        break; // the inner loop\n                    } else {\n                        delta *= 4;\n                    }\n                } else {\n                    delta *= 4;\n                }\n            }\n            if (rho >= 0) {\n                // update point with the new one\n                setCurrentEvaluationCount(nE + nR);\n                currentPoint = newPoint;\n            }\n        }\n\n        if (evaluation >= maxEvaluations) {\n            throw new OptimizationException(LocalizedFormats.TOO_MANY_EVALUATIONS_EXCEEDED);\n        }\n\n        return new ArrayRealVector(currentPoint);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 50914932e..536dfabab 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -238,229 +238,122 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected VectorialPointValuePair doOptimize()\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        // arrays shared with the other private methods\n-        solvedCols  = Math.min(rows, cols);\n-        diagR       = new double[cols];\n-        jacNorm     = new double[cols];\n-        beta        = new double[cols];\n-        permutation = new int[cols];\n-        lmDir       = new double[cols];\n-\n-        // local point\n-        double   delta   = 0;\n-        double   xNorm   = 0;\n-        double[] diag    = new double[cols];\n-        double[] oldX    = new double[cols];\n-        double[] oldRes  = new double[rows];\n-        double[] work1   = new double[cols];\n-        double[] work2   = new double[cols];\n-        double[] work3   = new double[cols];\n-\n-        // evaluate the function at the starting point and calculate its norm\n-        updateResidualsAndCost();\n-\n-        // outer loop\n-        lmPar = 0;\n-        boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n-        while (true) {\n-            incrementIterationsCounter();\n-\n-            // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n-            updateJacobian();\n-            qrDecomposition();\n-\n-            // compute Qt.res\n-            qTy(residuals);\n-            // now we don't need Q anymore,\n-            // so let jacobian contain the R matrix with its diagonal elements\n-            for (int k = 0; k < solvedCols; ++k) {\n-                int pk = permutation[k];\n-                jacobian[k][pk] = diagR[pk];\n+    @Override\n+    public RealVector doOptimize() throws OptimizationException {\n+        final double[] targetValues = getTarget();\n+        final int nR = targetValues.length;\n+        final int nC = start.getDimension();\n+        final double[] residualsWeights = getWeight() == null ? new double[nR] : getWeight().getWeights();\n+        final double[] sortedResidualsWeights = residualsWeights.clone();\n+        Arrays.sort(sortedResidualsWeights);\n+\n+        final double[] sortedResiduals = new double[nR];\n+        final int[] index = new int[nR];\n+        final double[] weights = new double[nR];\n+        final double[] currentPoint = start.toArray();\n+        final double[] lowerBound = getLowerBound();\n+        final double[] upperBound = getUpperBound();\n+\n+        // Compute the initial residual\n+        double[] currentResiduals = computeResiduals(currentPoint);\n+        double currentCost = computeCost(currentResiduals);\n+\n+        final int maxEvaluations = getMaxEvaluations();\n+        int evaluation = 0;\n+        final int nE = getCurrentEvaluationCount();\n+        double delta = 0;\n+        while (evaluation < maxEvaluations && nE < maxEvaluations) {\n+            ++evaluation;\n+            // sort the residuals by absolute value (in descending order)\n+            for (int i = 0; i < nR; ++i) {\n+                index[i] = i;\n+                sortedResiduals[i] = Math.abs(currentResiduals[i]) * sortedResidualsWeights[i];\n             }\n-\n-            if (firstIteration) {\n-\n-                // scale the point according to the norms of the columns\n-                // of the initial jacobian\n-                xNorm = 0;\n-                for (int k = 0; k < cols; ++k) {\n-                    double dk = jacNorm[k];\n-                    if (dk == 0) {\n-                        dk = 1.0;\n-                    }\n-                    double xk = dk * point[k];\n-                    xNorm  += xk * xk;\n-                    diag[k] = dk;\n+            Arrays.sort(index, new Comparator<Integer>() {\n+                @Override\n+                public int compare(final Integer o1, final Integer o2) {\n+                    return -Double.compare(sortedResiduals[o1], sortedResiduals[o2]);\n                 }\n-                xNorm = Math.sqrt(xNorm);\n-\n-                // initialize the step bound delta\n-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n+            });\n \n+            int[] cols = model.cols(currentPoint);\n+            RealMatrix weightedJacobian = model.jacobian(currentPoint);\n+            for (int i = 0; i < cols.length; ++i) {\n+                weightedJacobian.setColumnVector(i, weightedJacobian.getColumnVector(i).mapMultiply(residualsWeights));\n             }\n \n-            // check orthogonality between function vector and jacobian columns\n-            double maxCosine = 0;\n-            if (cost != 0) {\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int    pj = permutation[j];\n-                    double s  = jacNorm[pj];\n-                    if (s != 0) {\n-                        double sum = 0;\n-                        for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n-                        }\n-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n-                    }\n-                }\n-            }\n-            if (maxCosine <= orthoTolerance) {\n-                // convergence has been reached\n-                return current;\n-            }\n+            final double[] currentPointWithBoundaries = project(currentPoint, weightedJacobian);\n+            final double[] modelResiduals = computeResiduals(currentPointWithBoundaries);\n+            RealVector b = new ArrayRealVector(nR);\n+            for (int i = 0; i < nR; ++i) {\n+                b.setEntry(i, modelResiduals[index[i]] * residualsWeights[index[i]]);\n \n-            // rescale if necessary\n-            for (int j = 0; j < cols; ++j) {\n-                diag[j] = Math.max(diag[j], jacNorm[j]);\n+                // resorting arrays due to them being sorted before\n+                sortedResiduals[index[i]] = Math.abs(modelResiduals[index[i]]) * sortedResidualsWeights[index[i]];\n+                weights[i] = sortedResiduals[index[i]] == 0 ? 0 : 1.0 / sqrt(sortedResiduals[index[i]]);\n             }\n \n-            // inner loop\n-            for (double ratio = 0; ratio < 1.0e-4;) {\n-\n-                // save the state\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    oldX[pj] = point[pj];\n-                }\n-                double previousCost = cost;\n-                double[] tmpVec = residuals;\n-                residuals = oldRes;\n-                oldRes    = tmpVec;\n-\n-                // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n-\n-                // compute the new point and the norm of the evolution direction\n-                double lmNorm = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    lmDir[pj] = -lmDir[pj];\n-                    point[pj] = oldX[pj] + lmDir[pj];\n-                    double s = diag[pj] * lmDir[pj];\n-                    lmNorm  += s * s;\n+            RealMatrix weightedJacobianP = new Array2DRowRealMatrix(cols.length, nR);\n+            for (int k = 0; k < cols.length; ++k) {\n+                final int j = cols[k];\n+                for (int i = 0; i < nR; ++i) {\n+                    weightedJacobianP.setEntry(k, i, weightedJacobian.getEntry(index[i], j) * weights[index[i]]);\n                 }\n-                lmNorm = Math.sqrt(lmNorm);\n-                // on the first iteration, adjust the initial step bound.\n-                if (firstIteration) {\n-                    delta = Math.min(delta, lmNorm);\n-                }\n-\n-                // evaluate the function at x + p and calculate its norm\n-                updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n+            }\n+            RealMatrix jPj = weightedJacobianP.transpose().multiply(weightedJacobianP);\n \n-                // compute the scaled actual reduction\n-                double actRed = -1.0;\n-                if (0.1 * cost < previousCost) {\n-                    double r = cost / previousCost;\n-                    actRed = 1.0 - r * r;\n-                }\n+            for (int i = 0; i < weightedJacobianP.getColumnDimension(); i++) {\n+                double d = jPj.getEntry(i, i);\n+                d = d * (1 + eps);\n+                delta = Math.max(delta, d);\n+            }\n \n-                // compute the scaled predicted reduction\n-                // and the scaled directional derivative\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    double dirJ = lmDir[pj];\n-                    work1[j] = 0;\n-                    for (int i = 0; i <= j; ++i) {\n-                        work1[i] += jacobian[i][pj] * dirJ;\n-                    }\n-                }\n-                double coeff1 = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    coeff1 += work1[j] * work1[j];\n+            double[] newPoint = currentPoint.clone();\n+            double rho = 0;\n+            for (double ratio = 0; ratio < 1.e-4;) {\n+                final RealVector residual = new ArrayRealVector(b.toArray(), false);\n+                final DecompositionSolver solver = new CholeskyDecomposition(jPj, delta).getSolver();\n+                RealVector dX = solver.solve(residual);\n+                RealVector dP = new ArrayRealVector(currentPoint.length);\n+                for (int i = 0; i < cols.length; ++i) {\n+                    final int j = cols[i];\n+                    dP.setEntry(j, dX.getEntry(i));\n                 }\n-                double pc2 = previousCost * previousCost;\n-                coeff1 = coeff1 / pc2;\n-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n-                double preRed = coeff1 + 2 * coeff2;\n-                double dirDer = -(coeff1 + coeff2);\n-\n-                // ratio of the actual to the predicted reduction\n-                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n-\n-                // update the step bound\n-                if (ratio <= 0.25) {\n-                    double tmp =\n-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n-                            tmp = 0.1;\n-                        }\n-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n-                        lmPar /= tmp;\n-                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n-                    delta = 2 * lmNorm;\n-                    lmPar *= 0.5;\n-                }\n-\n-                // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n-                    // successful iteration, update the norm\n-                    firstIteration = false;\n-                    xNorm = 0;\n-                    for (int k = 0; k < cols; ++k) {\n-                        double xK = diag[k] * point[k];\n-                        xNorm    += xK * xK;\n+                rho = (computeCost(computeResiduals(currentPoint.add(dP.toArray()))) - currentCost) / (dX.dotProduct(delta * dX + residual));\n+                if (Double.isNaN(rho)) {\n+                    delta *= 4;\n+                } else if (rho >= 0) {\n+                    for (int i = 0; i < newPoint.length; ++i) {\n+                        newPoint[i] = currentPoint[i] + dP.getEntry(i);\n                     }\n-                    xNorm = Math.sqrt(xNorm);\n-\n-                    // tests for convergence.\n-                    // we use the vectorial convergence checker\n-                } else {\n-                    // failed iteration, reset the previous values\n-                    cost = previousCost;\n-                    for (int j = 0; j < solvedCols; ++j) {\n-                        int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n+                    double[] newResiduals = computeResiduals(newPoint);\n+                    double newCost = computeCost(newResiduals);\n+                    if (newCost < currentCost) {\n+                        delta *= 1.0/3.0;\n+                        double tmp = currentCost; currentCost = newCost; newCost = tmp;\n+                        double[] tmpR = currentResiduals; currentResiduals = newResiduals; newResiduals = tmpR;\n+                        final double[] tmpP = currentPoint; currentPoint = newPoint; newPoint = tmpP;\n+                        setCurrentEvaluationCount(nE + nR);\n+                        break; // the inner loop\n+                    } else {\n+                        delta *= 4;\n                     }\n-                    tmpVec    = residuals;\n-                    residuals = oldRes;\n-                    oldRes    = tmpVec;\n-                }\n-                if (checker==null) {\n-                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                        (preRed <= costRelativeTolerance) &&\n-                        (ratio <= 2.0)) ||\n-                       (delta <= parRelativeTolerance * xNorm)) {\n-                       return current;\n-                   }\n                 } else {\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n-                    }\n-                }\n-                // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n-                            costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n-                            parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n-                            orthoTolerance);\n+                    delta *= 4;\n                 }\n-\n             }\n+            if (rho >= 0) {\n+                // update point with the new one\n+                setCurrentEvaluationCount(nE + nR);\n+                currentPoint = newPoint;\n+            }\n+        }\n \n+        if (evaluation >= maxEvaluations) {\n+            throw new OptimizationException(LocalizedFormats.TOO_MANY_EVALUATIONS_EXCEEDED);\n         }\n \n+        return new ArrayRealVector(currentPoint);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}