{
    "patch": "  public boolean canBeCalled() {\n    return !isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      Set<ObjectType> visited = new HashSet<>();\n      StringBuilder sb = new StringBuilder();\n      toStringBuilder(visited, sb, propertyNames);\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n\n  private void toStringBuilder(Set<ObjectType> visited, StringBuilder sb,\n      Set<String> propertyNames) {\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n\n      Object propertyType = getPropertyType(property);\n      if (propertyType instanceof ObjectType) {\n        ObjectType objectType = (ObjectType) propertyType;\n        if (visited.contains(objectType)) {\n          sb.append(\"{...}\");\n        } else {\n          visited.add(objectType);\n          objectType.toStringBuilder(visited, sb, objectType.getOwnPropertyNames());\n          visited.remove(objectType);\n        }\n      } else {\n        sb.append(propertyType.toString());\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..b6eba485 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,7 +346,7 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n   @Override\n@@ -366,33 +366,52 @@ class PrototypeObjectType extends ObjectType {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n+      Set<ObjectType> visited = new HashSet<>();\n       StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+      toStringBuilder(visited, sb, propertyNames);\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+      prettyPrint = true;\n+      return sb.toString();\n+    } else {\n+      return \"{...}\";\n+    }\n+  }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+  private void toStringBuilder(Set<ObjectType> visited, StringBuilder sb,\n+      Set<String> propertyNames) {\n+    sb.append(\"{\");\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+    int i = 0;\n+    for (String property : propertyNames) {\n+      if (i > 0) {\n+        sb.append(\", \");\n       }\n \n-      sb.append(\"}\");\n+      sb.append(property);\n+      sb.append(\": \");\n+\n+      Object propertyType = getPropertyType(property);\n+      if (propertyType instanceof ObjectType) {\n+        ObjectType objectType = (ObjectType) propertyType;\n+        if (visited.contains(objectType)) {\n+          sb.append(\"{...}\");\n+        } else {\n+          visited.add(objectType);\n+          objectType.toStringBuilder(visited, sb, objectType.getOwnPropertyNames());\n+          visited.remove(objectType);\n+        }\n+      } else {\n+        sb.append(propertyType.toString());\n+      }\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n+      }\n     }\n+\n+    sb.append(\"}\");\n   }\n \n   void setPrettyPrint(boolean prettyPrint) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}