{
    "patch": "private void readTypeVariables() {\n    TypeVariable<? extends Class<?>>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (TypeVariable<? extends Class<?>> tv : typeParameters) {\n        if (tv.getName().equals(typeVariable.getName())) {\n            Type[] bounds = tv.getBounds();\n            for (Type bound : bounds) {\n                if (!bound.equals(Object.class)) {\n                    registerTypeVariablesOn(bound);\n                }\n            }\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else {\n                registerTypeVariablesOn(typeVariable);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c82dbda8d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    TypeVariable<? extends Class<?>>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (TypeVariable<? extends Class<?>> tv : typeParameters) {\n+        if (tv.getName().equals(typeVariable.getName())) {\n+            Type[] bounds = tv.getBounds();\n+            for (Type bound : bounds) {\n+                if (!bound.equals(Object.class)) {\n+                    registerTypeVariablesOn(bound);\n+                }\n+            }\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else {\n+                registerTypeVariablesOn(typeVariable);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: TypeVariable<?>[] cannot be converted to TypeVariable<? extends Class<?>>[]",
    "test_result": "ERROR"
}