{
    "patch": "        int parsedYear = 0;\n        boolean leapYear = false; // Check if parsed year is a leap year\n        if (iPivotYear != null) { // Use pivot year if available\n            int defaultYear = chrono.year().get(instantLocal);\n            parsedYear = iPivotYear + defaultYear - (defaultYear % 100);\n            if (parsedYear < defaultYear) {\n                parsedYear += 100;\n            }\n            leapYear = new GregorianCalendar().isLeapYear(parsedYear);\n        } else {\n            parsedYear = chrono.year().get(instantLocal);\n            if (parsedYear < 0) {\n                parsedYear = 1 - parsedYear;\n            }\n            leapYear = chrono.year().isLeap(parsedYear);\n        }\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, parsedYear, leapYear); // Pass leap year to bucket",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..d7d7d3c6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,24 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+        int parsedYear = 0;\n+        boolean leapYear = false; // Check if parsed year is a leap year\n+        if (iPivotYear != null) { // Use pivot year if available\n+            int defaultYear = chrono.year().get(instantLocal);\n+            parsedYear = iPivotYear + defaultYear - (defaultYear % 100);\n+            if (parsedYear < defaultYear) {\n+                parsedYear += 100;\n+            }\n+            leapYear = new GregorianCalendar().isLeapYear(parsedYear);\n+        } else {\n+            parsedYear = chrono.year().get(instantLocal);\n+            if (parsedYear < 0) {\n+                parsedYear = 1 - parsedYear;\n+            }\n+            leapYear = chrono.year().isLeap(parsedYear);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+                instantLocal, chrono, iLocale, iPivotYear, parsedYear, leapYear); // Pass leap year to bucket\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}