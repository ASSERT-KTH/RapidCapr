{
    "patch": "        int idx = 0;\n        int remainingIndex = index;\n        for(int i=0; i<last; i++) {\n            final int offset = uniCounterOffset[i];\n            while(remainingIndex >= offset) {\n                remainingIndex -= offset;\n                idx++;\n            }\n            indices[i] = idx;\n        }\n        indices[last] = remainingIndex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..a31300fb9 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,17 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int idx = 0;\n+        int remainingIndex = index;\n+        for(int i=0; i<last; i++) {\n+            final int offset = uniCounterOffset[i];\n+            while(remainingIndex >= offset) {\n+                remainingIndex -= offset;\n+                idx++;\n+            }\n+            indices[i] = idx;\n         }\n-        --idx;\n-        indices[last] = idx;\n+        indices[last] = remainingIndex;\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [12][1] expected:<0> but was:<1>",
    "test_result": "FAIL"
}