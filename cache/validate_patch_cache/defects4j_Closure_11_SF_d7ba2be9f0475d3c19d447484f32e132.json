{
    "patch": "import java.util.Properties;\nimport java.io.*;\n\npublic class MyClass {\n\n    public static String getProp(String propertyName) {\n        String propValue = null;\n        try {\n            Properties prop = new Properties();\n            InputStream input = new FileInputStream(\"config.properties\");\n            prop.load(input);\n            propValue = prop.getProperty(propertyName);\n            input.close();\n        } catch (IOException e) {\n            System.out.println(\"Cannot open or read config file: \" + e);\n        }\n        return propValue;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..28768794 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.util.Properties;\n+import java.io.*;\n+\n+public class MyClass {\n+\n+    public static String getProp(String propertyName) {\n+        String propValue = null;\n+        try {\n+            Properties prop = new Properties();\n+            InputStream input = new FileInputStream(\"config.properties\");\n+            prop.load(input);\n+            propValue = prop.getProperty(propertyName);\n+            input.close();\n+        } catch (IOException e) {\n+            System.out.println(\"Cannot open or read config file: \" + e);\n+        }\n+        return propValue;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}