{
    "patch": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      if (nType == Token.EXPR_RESULT) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild != null && firstChild.isString() && ALLOWED_DIRECTIVES.contains(firstChild.getString())) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n      return processGenericChildren(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transform(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n      // Use `newNodeWithChildren` instead of the no-parameter `newNode`\n      return newNodeWithChildren(Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      return newNode(Token.EMPTY);\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      return newNode(Token.FORIN, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..fef6db2b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -477,14 +477,18 @@ class IRFactory {\n       if (n == null) return false;\n \n       int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+      if (nType == Token.EXPR_RESULT) {\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild != null && firstChild.isString() && ALLOWED_DIRECTIVES.contains(firstChild.getString())) {\n+          return true;\n+        }\n+      }\n+      return false;\n     }\n \n     @Override\n     Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+      return processGenericChildren(blockNode);\n     }\n \n     @Override\n@@ -492,7 +496,6 @@ class IRFactory {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n         labelName.setType(Token.LABEL_NAME);\n         node.addChildToBack(labelName);\n       }\n@@ -509,7 +512,7 @@ class IRFactory {\n             sourceName,\n             clauseNode.getCatchCondition().getLineno(), \"\", 0);\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n+      node.addChildToBack(transform(clauseNode.getBody()));\n       return node;\n     }\n \n@@ -527,7 +530,6 @@ class IRFactory {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n         labelName.setType(Token.LABEL_NAME);\n         node.addChildToBack(labelName);\n       }\n@@ -536,8 +538,8 @@ class IRFactory {\n \n     @Override\n     Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n+      // Use `newNodeWithChildren` instead of the no-parameter `newNode`\n+      return newNodeWithChildren(Token.DO,\n           transformBlock(loopNode.getBody()),\n           transform(loopNode.getCondition()));\n     }\n@@ -552,8 +554,7 @@ class IRFactory {\n \n     @Override\n     Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+      return newNode(Token.EMPTY);\n     }\n \n     @Override\n@@ -565,12 +566,7 @@ class IRFactory {\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n+      return newNode(Token.FORIN, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()),\n           transformBlock(loopNode.getBody()));\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}