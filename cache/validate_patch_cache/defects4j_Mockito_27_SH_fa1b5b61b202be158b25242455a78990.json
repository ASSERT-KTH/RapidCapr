{
    "patch": "        if (oldMockHandler == null) {\n            return;\n        }\n        \n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockSettingsImpl settings = new MockSettingsImpl();\n        settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n        settings.spiedInstance(mock);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n\n        Field field;\n        try {\n            field = mock.getClass().getDeclaredField(\"$CGLIB_DELEGATE\");\n            field.setAccessible(true);\n            Object delegate = field.get(mock);\n            field = delegate.getClass().getDeclaredField(\"callbacks\");\n            field.setAccessible(true);\n            Callback[] callbacks = (Callback[]) field.get(delegate);\n            for (int i = 0; i < callbacks.length; i++) {\n                if (callbacks[i] instanceof MethodInterceptorFilter) {\n                    callbacks[i] = newFilter;\n                    break;\n                }\n            }\n            field.set(delegate, callbacks);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not set interceptor filter\", e);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e1001a934 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,37 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (oldMockHandler == null) {\n+            return;\n+        }\n+        \n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockSettingsImpl settings = new MockSettingsImpl();\n+        settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+        settings.spiedInstance(mock);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+\n+        Field field;\n+        try {\n+            field = mock.getClass().getDeclaredField(\"$CGLIB_DELEGATE\");\n+            field.setAccessible(true);\n+            Object delegate = field.get(mock);\n+            field = delegate.getClass().getDeclaredField(\"callbacks\");\n+            field.setAccessible(true);\n+            Callback[] callbacks = (Callback[]) field.get(delegate);\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                    callbacks[i] = newFilter;\n+                    break;\n+                }\n+            }\n+            field.set(delegate, callbacks);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not set interceptor filter\", e);\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}