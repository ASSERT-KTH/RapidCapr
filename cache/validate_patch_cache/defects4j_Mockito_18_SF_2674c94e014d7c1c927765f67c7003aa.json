{
    "patch": "public Iterable getValuesOfType(ReturnValues values, Class<?> type) {\n    Object returnValue = values.returnValueFor(type);\n    if (returnValue == null) {\n        return Collections.emptyList();\n    } else if (returnValue instanceof Iterable) {\n        return (Iterable) returnValue;\n    } else if (type.isArray()) {\n        List<Object> list = new ArrayList<>();\n        for (int i = 0; i < Array.getLength(returnValue); i++) {\n            list.add(Array.get(returnValue, i));\n        }\n        return list;\n    } else {\n        return Collections.singletonList(returnValue);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..b82657a14 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable getValuesOfType(ReturnValues values, Class<?> type) {\n+    Object returnValue = values.returnValueFor(type);\n+    if (returnValue == null) {\n+        return Collections.emptyList();\n+    } else if (returnValue instanceof Iterable) {\n+        return (Iterable) returnValue;\n+    } else if (type.isArray()) {\n+        List<Object> list = new ArrayList<>();\n+        for (int i = 0; i < Array.getLength(returnValue); i++) {\n+            list.add(Array.get(returnValue, i));\n+        }\n+        return list;\n+    } else {\n+        return Collections.singletonList(returnValue);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}