{
    "patch": "            // we are near a DST boundary and need to recheck\n            long prevAdjusted = previousTransition(instantAdjusted);\n            if (prevAdjusted == instantAdjusted) {\n                // we're on a DST gap, need to skip forward\n                prevAdjusted = nextTransition(instantAdjusted);\n            }\n            final int offsetPrev = getOffset(prevAdjusted);\n            if (offsetPrev == offsetLocal) {\n                // previous transition has no effect, so we can use\n                // our current estimate and keep its offset\n                return offsetLocal;\n            }\n            // the offset has changed, retry\n            return getOffsetFromLocal(instantLocal + (offsetLocal - offsetPrev));",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ef7cad16 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we are near a DST boundary and need to recheck\n+            long prevAdjusted = previousTransition(instantAdjusted);\n+            if (prevAdjusted == instantAdjusted) {\n+                // we're on a DST gap, need to skip forward\n+                prevAdjusted = nextTransition(instantAdjusted);\n+            }\n+            final int offsetPrev = getOffset(prevAdjusted);\n+            if (offsetPrev == offsetLocal) {\n+                // previous transition has no effect, so we can use\n+                // our current estimate and keep its offset\n+                return offsetLocal;\n+            }\n+            // the offset has changed, retry\n+            return getOffsetFromLocal(instantLocal + (offsetLocal - offsetPrev));\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}