{
    "patch": "if (Double.isNaN(result[resultOffset])){\n    // special cases for NaNs\n    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n    Arrays.fill(result, resultOffset + 1, resultOffset + result.length, result[resultOffset]);\n} else if(Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])){\n    // special cases for infinities\n    double v = FastMath.PI / 2;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..04a086399 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,13 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])){\n+    // special cases for NaNs\n+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+    Arrays.fill(result, resultOffset + 1, resultOffset + result.length, result[resultOffset]);\n+} else if(Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])){\n+    // special cases for infinities\n+    double v = FastMath.PI / 2;\n \n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}