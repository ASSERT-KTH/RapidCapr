{
    "patch": "if (this.isUnknownType() || that.isUnknownType()) {\n    return new TypePair(null, null);\n}\n\nTypePair types = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n\nif (types.typeA.isEquivalentTo(types.typeB)) {\n    return new TypePair(types.typeA, types.typeB);\n}\n\nreturn types;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..f7162ef6 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,17 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+if (this.isUnknownType() || that.isUnknownType()) {\n+    return new TypePair(null, null);\n+}\n+\n+TypePair types = new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+\n+if (types.typeA.isEquivalentTo(types.typeB)) {\n+    return new TypePair(types.typeA, types.typeB);\n+}\n+\n+return types;\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}