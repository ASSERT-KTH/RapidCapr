{
    "patch": "      Boolean isFunctionExpression = functionNode.getType() == Token.FUNCTION;\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        if (isFunctionExpression) {\n          // Name is not mandatory for function expressions\n          name = new Name();\n          name.setIdentifier(\"\");\n          isUnnamedFunction = true;\n        } else {\n          errorReporter.error(\n              \"Function Declaration name missing\", sourceName, functionNode.getLineno(), \"\", 0);\n        }\n      } else if (!isFunctionDeclaration) {\n        // Name is not allowed for function expressions\n        errorReporter.error(\n            \"Function Expression name provided\",\n            sourceName,\n            functionNode.getLineno(),\n            \"\",\n            0);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..57898952 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,27 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Boolean isFunctionExpression = functionNode.getType() == Token.FUNCTION;\n+      Name name = functionNode.getFunctionName();\n+      Boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        if (isFunctionExpression) {\n+          // Name is not mandatory for function expressions\n+          name = new Name();\n+          name.setIdentifier(\"\");\n+          isUnnamedFunction = true;\n+        } else {\n+          errorReporter.error(\n+              \"Function Declaration name missing\", sourceName, functionNode.getLineno(), \"\", 0);\n+        }\n+      } else if (!isFunctionDeclaration) {\n+        // Name is not allowed for function expressions\n+        errorReporter.error(\n+            \"Function Expression name provided\",\n+            sourceName,\n+            functionNode.getLineno(),\n+            \"\",\n+            0);\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}