{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a < 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a == 0.0) {\n        return 1.0;\n    }\n\n    double param = x / a;\n    double sum = 1.0 / a;\n    double incr = sum;\n    for (int i = 1; i <= maxIterations; i++) {\n        incr *= param / (i + a);\n        sum += incr;\n        if (Math.abs(incr) < Math.abs(sum) * epsilon) {\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n        }\n    }\n    throw new ArithmeticException(\"Too many iterations\");\n}\n\npublic static double regularizedGammaP(double a, double x) {\n    return regularizedGammaP(a, x, Precision.EPSILON, Integer.MAX_VALUE);\n}\n\npublic static double logGamma(double xx) {\n    double x = xx - 1.0;\n    double[] cof = {76.18009172947146, -86.50532032941677,\n                    24.01409824083091, -1.231739572450155,\n                    0.1208650973866179e-2, -0.5395239384953e-5};\n    double y = x + 5.5;\n    double tmp = (x + 0.5) * Math.log(y) - y;\n    double ser = 1.000000000190015;\n    for (int j = 0; j < 6; j++) {\n        y++;\n        ser += cof[j] / y;\n    }\n    return tmp + Math.log(2.5066282746310005 * ser);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..86df14f6c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,48 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a < 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a == 0.0) {\n+        return 1.0;\n+    }\n+\n+    double param = x / a;\n+    double sum = 1.0 / a;\n+    double incr = sum;\n+    for (int i = 1; i <= maxIterations; i++) {\n+        incr *= param / (i + a);\n+        sum += incr;\n+        if (Math.abs(incr) < Math.abs(sum) * epsilon) {\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+        }\n+    }\n+    throw new ArithmeticException(\"Too many iterations\");\n+}\n+\n+public static double regularizedGammaP(double a, double x) {\n+    return regularizedGammaP(a, x, Precision.EPSILON, Integer.MAX_VALUE);\n+}\n+\n+public static double logGamma(double xx) {\n+    double x = xx - 1.0;\n+    double[] cof = {76.18009172947146, -86.50532032941677,\n+                    24.01409824083091, -1.231739572450155,\n+                    0.1208650973866179e-2, -0.5395239384953e-5};\n+    double y = x + 5.5;\n+    double tmp = (x + 0.5) * Math.log(y) - y;\n+    double ser = 1.000000000190015;\n+    for (int j = 0; j < 6; j++) {\n+        y++;\n+        ser += cof[j] / y;\n+    }\n+    return tmp + Math.log(2.5066282746310005 * ser);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}