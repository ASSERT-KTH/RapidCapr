{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  boolean isSimpleName = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n    isSimpleName = true;\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n  String variableName = null;\n  if (isSimpleName) {\n    variableName = n.getString();\n    Preconditions.checkArgument(!variableName.isEmpty());\n  } else {\n    variableName = n.getLastChild().getString();\n    Preconditions.checkArgument(!variableName.isEmpty());\n  }\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  Scope scopeToDeclareIn = scope;\n\n  // Declare a variable in the closest scope if it hasn't already been declared.\n  if (isSimpleName) {\n    boolean variableDeclared = scopeToDeclareIn.isDeclared(variableName, false);\n    if (variableDeclared) {\n      // The variable is already declared in the scope, so it can't be defined again with the same type.\n      Var oldVar = scopeToDeclareIn.getClosestDeclaration(variableName);\n      if (oldVar.getNode() != parent) {\n        validator.expectDuplicateVariableDeclaration(\n            sourceName, n, parent, variableName, type, oldVar.getType());\n      }\n    } else {\n      // The variable hasn't been declared in the scope yet, so we can define it here.\n      if (!inferred) {\n        setDeferredType(n, type);\n      }\n      CompilerInput input = compiler.getInput(sourceName);\n      scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n      if (shouldDeclareOnGlobalThis) {\n        ObjectType globalThis =\n            typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n        boolean isExtern = input.isExtern();\n        if (inferred) {\n          globalThis.defineInferredProperty(variableName,\n              type == null ?\n                  getNativeType(JSTypeNative.NO_TYPE) :\n                  type,\n              isExtern);\n        } else {\n          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n        }\n      }\n\n      // If we're in the global scope, also declare var.prototype\n      // in the scope chain for constructor or interface functions.\n      if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n        FunctionType fnType = (FunctionType) type;\n        if (fnType.isConstructor() || fnType.isInterface()) {\n          FunctionType superClassCtor = fnType.getSuperClassConstructor();\n          boolean declared =\n              superClassCtor == null || superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE));\n          scopeToDeclareIn.declare(variableName + \".prototype\", n,\n              fnType.getPrototype(), input, declared);\n        }\n      }\n    }\n  } else {\n    // Qualified names are always declared in the global scope.\n    Scope globalScope = scope.getGlobalScope();\n    boolean variableDeclared = globalScope.isDeclared(variableName, false);\n    if (variableDeclared) {\n      // The variable is already declared in the global scope, so it can't be defined again with the same type.\n      Var oldVar = globalScope.getClosestDeclaration(variableName);\n      if (oldVar.getNode() != parent) {\n        validator.expectDuplicateVariableDeclaration(\n            sourceName, n, parent, variableName, type, oldVar.getType());\n      }\n    } else {\n      // The variable hasn't been declared in the global scope yet, so we can define it here.\n      if (!inferred) {\n        setDeferredType(n, type);\n      }\n      CompilerInput input = compiler.getInput(sourceName);\n      globalScope.declare(variableName, n, type, input, inferred);\n\n      // Define the property on the native object.\n      ObjectType globalObject =\n          typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalObject.defineInferredProperty(variableName,\n            type == null ?\n                getNativeType(JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        globalObject.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..3a4dcf2f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,124 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+  boolean isSimpleName = false;\n+  if (n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(\n+        parent.getType() == Token.FUNCTION ||\n+        parent.getType() == Token.VAR ||\n+        parent.getType() == Token.LP ||\n+        parent.getType() == Token.CATCH);\n+    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+        (parent.getType() == Token.VAR ||\n+         parent.getType() == Token.FUNCTION);\n+    isSimpleName = true;\n+  } else {\n+    Preconditions.checkArgument(\n+        n.getType() == Token.GETPROP &&\n+        (parent.getType() == Token.ASSIGN ||\n+         parent.getType() == Token.EXPR_RESULT));\n+  }\n+  String variableName = null;\n+  if (isSimpleName) {\n+    variableName = n.getString();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+  } else {\n+    variableName = n.getLastChild().getString();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+  }\n+\n+  // If n is a property, then we should really declare it in the\n+  // scope where the root object appears. This helps out people\n+  // who declare \"global\" names in an anonymous namespace.\n+  Scope scopeToDeclareIn = scope;\n+\n+  // Declare a variable in the closest scope if it hasn't already been declared.\n+  if (isSimpleName) {\n+    boolean variableDeclared = scopeToDeclareIn.isDeclared(variableName, false);\n+    if (variableDeclared) {\n+      // The variable is already declared in the scope, so it can't be defined again with the same type.\n+      Var oldVar = scopeToDeclareIn.getClosestDeclaration(variableName);\n+      if (oldVar.getNode() != parent) {\n+        validator.expectDuplicateVariableDeclaration(\n+            sourceName, n, parent, variableName, type, oldVar.getType());\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+    } else {\n+      // The variable hasn't been declared in the scope yet, so we can define it here.\n+      if (!inferred) {\n+        setDeferredType(n, type);\n+      }\n+      CompilerInput input = compiler.getInput(sourceName);\n+      scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+      if (shouldDeclareOnGlobalThis) {\n+        ObjectType globalThis =\n+            typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+        boolean isExtern = input.isExtern();\n+        if (inferred) {\n+          globalThis.defineInferredProperty(variableName,\n+              type == null ?\n+                  getNativeType(JSTypeNative.NO_TYPE) :\n+                  type,\n+              isExtern);\n+        } else {\n+          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n         }\n+      }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+      // If we're in the global scope, also declare var.prototype\n+      // in the scope chain for constructor or interface functions.\n+      if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        FunctionType fnType = (FunctionType) type;\n+        if (fnType.isConstructor() || fnType.isInterface()) {\n+          FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+          boolean declared =\n+              superClassCtor == null || superClassCtor.getInstanceType().equals(\n+                  getNativeType(OBJECT_TYPE));\n+          scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+              fnType.getPrototype(), input, declared);\n         }\n       }\n     }\n+  } else {\n+    // Qualified names are always declared in the global scope.\n+    Scope globalScope = scope.getGlobalScope();\n+    boolean variableDeclared = globalScope.isDeclared(variableName, false);\n+    if (variableDeclared) {\n+      // The variable is already declared in the global scope, so it can't be defined again with the same type.\n+      Var oldVar = globalScope.getClosestDeclaration(variableName);\n+      if (oldVar.getNode() != parent) {\n+        validator.expectDuplicateVariableDeclaration(\n+            sourceName, n, parent, variableName, type, oldVar.getType());\n+      }\n+    } else {\n+      // The variable hasn't been declared in the global scope yet, so we can define it here.\n+      if (!inferred) {\n+        setDeferredType(n, type);\n+      }\n+      CompilerInput input = compiler.getInput(sourceName);\n+      globalScope.declare(variableName, n, type, input, inferred);\n+\n+      // Define the property on the native object.\n+      ObjectType globalObject =\n+          typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalObject.defineInferredProperty(variableName,\n+            type == null ?\n+                getNativeType(JSTypeNative.NO_TYPE) :\n+                type,\n+            isExtern);\n+      } else {\n+        globalObject.defineDeclaredProperty(variableName, type, isExtern);\n+      }\n+    }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}