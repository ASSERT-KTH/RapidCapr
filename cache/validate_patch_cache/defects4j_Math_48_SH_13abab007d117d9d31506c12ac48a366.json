{
    "patch": "// Detect early that algorithm is stuck, instead of waiting for\n// the maximum number of iterations to be exceeded.\nfinal double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\nif (FastMath.abs(x - x1) < 0.5 * delta) {\n    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n        x0 = x1;\n        f0 = f1;\n    }\n    return x1;\n}\n\n// Update the bounds with the new approximation.\nif (f1 * fx < 0) {\n    x0 = x1;\n    f0 = f1;\n} else {\n    if (f0 * fx < 0) {\n        x1 = x;\n        f1 = fx;\n    } else {\n        // We have converged to a point where f(x) = 0,\n        // but it does not strictly lie within the interval [x0, x1].\n        throw new ConvergenceException(LocalizedFormats.SIMPLE_ZERO,\n                                       x, x0, x1);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..657cfbbcb 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,32 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting for\n+// the maximum number of iterations to be exceeded.\n+final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+if (FastMath.abs(x - x1) < 0.5 * delta) {\n+    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+        x0 = x1;\n+        f0 = f1;\n+    }\n+    return x1;\n+}\n+\n+// Update the bounds with the new approximation.\n+if (f1 * fx < 0) {\n+    x0 = x1;\n+    f0 = f1;\n+} else {\n+    if (f0 * fx < 0) {\n+        x1 = x;\n+        f1 = fx;\n+    } else {\n+        // We have converged to a point where f(x) = 0,\n+        // but it does not strictly lie within the interval [x0, x1].\n+        throw new ConvergenceException(LocalizedFormats.SIMPLE_ZERO,\n+                                       x, x0, x1);\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}