{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n  if (NodeUtil.isExprAssign(assign) && NodeUtil.isGet(assign.getFirstChild())) {\n    Node leftChild = assign.getFirstChild();\n    Node rightChild = leftChild.getNext();\n    if (leftChild.getLastChild() != null) {\n      Node propNode = leftChild.getLastChild();\n      if (propNode.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..e5607aac 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -311,27 +311,19 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getParent().getType() == Token.NAME);\n     }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+  if (NodeUtil.isExprAssign(assign) && NodeUtil.isGet(assign.getFirstChild())) {\n+    Node leftChild = assign.getFirstChild();\n+    Node rightChild = leftChild.getNext();\n+    if (leftChild.getLastChild() != null) {\n+      Node propNode = leftChild.getLastChild();\n+      if (propNode.getString().equals(\"prototype\")) {\n+        return true;\n       }\n-\n-      return false;\n     }\n+  }\n+  return false;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}