{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally be able\n    // to have a @this annotation associated with them.\n    Node fnNameNode = n.getFirstChild();\n    if (fnNameNode == null) {\n      return false;\n    }\n    String fnName;\n    if (fnNameNode.getType() == Token.GETPROP) {\n      fnName = fnNameNode.getLastChild().getString();\n    } else if (fnNameNode.getType() == Token.NAME) {\n      fnName = fnNameNode.getString();\n    } else if ((fnNameNode.getType() == Token.CALL || fnNameNode.getType() == Token.NEW) &&\n        fnNameNode.getFirstChild() != null) {\n      // handle anonymous functions\n      fnNameNode = fnNameNode.getFirstChild();\n      if (fnNameNode.getType() == Token.GETPROP) {\n        fnName = fnNameNode.getLastChild().getString();\n      } else if (fnNameNode.getType() == Token.NAME) {\n        fnName = fnNameNode.getString();\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    if (fnName.startsWith(\"test\") ||\n        fnName.equals(\"assert\") ||\n        fnName.equals(\"asyncAssert\")) {\n      return false;\n    }\n\n    int pType = parent.getType();\n    if (fnNameNode.getType() == Token.NAME) {\n      // Don't traverse if parent is an IIFE in Rhino\n      if (pType == Token.LP) {\n        Node pp = parent.getParent();\n        if (pp != null && pp.getType() == Token.CALL &&\n            pp.getLastChild() == parent) {\n          pp = pp.getParent();\n          if (pp != null && pp.getType() == Token.FUNCTION) {\n            String fnQualifiedName =\n                NodeUtil.getFunctionName(pp, true);\n            if (fnQualifiedName != null &&\n                fnQualifiedName.startsWith(\"goog.scope.\")) {\n              return false;\n            } else if (pp.getParent() != null &&\n                pp.getParent().getType() == Token.EXPR_RESULT &&\n                pp.getGrandparent().getType() == Token.SCRIPT) {\n              // There was no goog.scope parent.\n              return false;\n            }\n          }\n        }\n      }\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.VAR ||\n            pType == Token.EXPR_RESULT ||\n            fnName.equals(\"goog.exportSymbol\") ||\n            fnName.equals(\"goog.module\") ||\n            fnName.equals(\"goog.module.declareLegacyNamespace\") ||\n            fnName.equals(\"goog.scope\") ||\n            fnName.equals(\"module$exports\") ||\n            fnName.equals(\"module$contents$\"))) {\n        return false;\n      }\n    } else if (fnNameNode.getType() == Token.GETPROP) {\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        Node classNode = NodeUtil.getEnclosingClass(parent);\n        if (classNode != null && parent.getParent() == classNode) {\n          // Don't traverse if GETPROP is a direct child of class node and the\n          // function is a constructor\n          return false;\n        }\n      } else if (jsDoc != null && jsDoc.isInterface()) {\n        if (NodeUtil.isObjectLitKey(parent)) {\n          // Don't traverse if GETPROP is a key of an object literal\n          return false;\n        }\n      } else if (!(pType == Token.BLOCK ||\n                   pType == Token.SCRIPT ||\n                   (pType == Token.ASSIGN &&\n                    parent.getFirstChild() == parent.getLastChild() &&\n                    parent.getFirstChild().getType() == Token.GETPROP))) {\n        return false;\n      }\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (NodeUtil.isGet(n.getParent()) &&\n        n.getNext() != null && n.getNext().getType() == Token.STRING) {\n      String propName = n.getNext().getString();\n      if (propName.equals(\"prototype\")) {\n        return false;\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).myProp = b;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..717199ab 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,145 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions unless they would normally be able\n+    // to have a @this annotation associated with them.\n+    Node fnNameNode = n.getFirstChild();\n+    if (fnNameNode == null) {\n+      return false;\n+    }\n+    String fnName;\n+    if (fnNameNode.getType() == Token.GETPROP) {\n+      fnName = fnNameNode.getLastChild().getString();\n+    } else if (fnNameNode.getType() == Token.NAME) {\n+      fnName = fnNameNode.getString();\n+    } else if ((fnNameNode.getType() == Token.CALL || fnNameNode.getType() == Token.NEW) &&\n+        fnNameNode.getFirstChild() != null) {\n+      // handle anonymous functions\n+      fnNameNode = fnNameNode.getFirstChild();\n+      if (fnNameNode.getType() == Token.GETPROP) {\n+        fnName = fnNameNode.getLastChild().getString();\n+      } else if (fnNameNode.getType() == Token.NAME) {\n+        fnName = fnNameNode.getString();\n+      } else {\n         return false;\n       }\n+    } else {\n+      return false;\n+    }\n+\n+    if (fnName.startsWith(\"test\") ||\n+        fnName.equals(\"assert\") ||\n+        fnName.equals(\"asyncAssert\")) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n+    int pType = parent.getType();\n+    if (fnNameNode.getType() == Token.NAME) {\n+      // Don't traverse if parent is an IIFE in Rhino\n+      if (pType == Token.LP) {\n+        Node pp = parent.getParent();\n+        if (pp != null && pp.getType() == Token.CALL &&\n+            pp.getLastChild() == parent) {\n+          pp = pp.getParent();\n+          if (pp != null && pp.getType() == Token.FUNCTION) {\n+            String fnQualifiedName =\n+                NodeUtil.getFunctionName(pp, true);\n+            if (fnQualifiedName != null &&\n+                fnQualifiedName.startsWith(\"goog.scope.\")) {\n+              return false;\n+            } else if (pp.getParent() != null &&\n+                pp.getParent().getType() == Token.EXPR_RESULT &&\n+                pp.getGrandparent().getType() == Token.SCRIPT) {\n+              // There was no goog.scope parent.\n+              return false;\n+            }\n+          }\n+        }\n+      }\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+            pType == Token.VAR ||\n+            pType == Token.EXPR_RESULT ||\n+            fnName.equals(\"goog.exportSymbol\") ||\n+            fnName.equals(\"goog.module\") ||\n+            fnName.equals(\"goog.module.declareLegacyNamespace\") ||\n+            fnName.equals(\"goog.scope\") ||\n+            fnName.equals(\"module$exports\") ||\n+            fnName.equals(\"module$contents$\"))) {\n         return false;\n       }\n+    } else if (fnNameNode.getType() == Token.GETPROP) {\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n+        Node classNode = NodeUtil.getEnclosingClass(parent);\n+        if (classNode != null && parent.getParent() == classNode) {\n+          // Don't traverse if GETPROP is a direct child of class node and the\n+          // function is a constructor\n+          return false;\n+        }\n+      } else if (jsDoc != null && jsDoc.isInterface()) {\n+        if (NodeUtil.isObjectLitKey(parent)) {\n+          // Don't traverse if GETPROP is a key of an object literal\n+          return false;\n+        }\n+      } else if (!(pType == Token.BLOCK ||\n+                   pType == Token.SCRIPT ||\n+                   (pType == Token.ASSIGN &&\n+                    parent.getFirstChild() == parent.getLastChild() &&\n+                    parent.getFirstChild().getType() == Token.GETPROP))) {\n+        return false;\n+      }\n+    }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isGet(n.getParent()) &&\n+        n.getNext() != null && n.getNext().getType() == Token.STRING) {\n+      String propName = n.getNext().getString();\n+      if (propName.equals(\"prototype\")) {\n+        return false;\n+      }\n     }\n+  }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).myProp = b;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n       }\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: method getFunctionName in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}