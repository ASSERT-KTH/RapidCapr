{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    for (Object element : elementPairs) {\n        if (element instanceof Separator) {\n            Separator sep = (Separator) element;\n            PeriodFormatter format = toFormatter(elementPairs.subList(1, elementPairs.size()), notPrinter, notParser);\n            return new PeriodFormatter(sep.finish(format.getPrinter(), format.getParser()),\n                sep.finish(format.getPrinter(), format.getParser()));\n        } else {\n            Object[] comp = createComposite(Collections.singletonList(element));\n            if (notPrinter) {\n                parser = (PeriodParser) comp[1];\n            } else if (notParser) {\n                printer = (PeriodPrinter) comp[0];\n            } else {\n                printer = (PeriodPrinter) comp[0];\n                parser = (PeriodParser) comp[1];\n            }\n        }\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2bd001b8 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,36 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    for (Object element : elementPairs) {\n+        if (element instanceof Separator) {\n+            Separator sep = (Separator) element;\n+            PeriodFormatter format = toFormatter(elementPairs.subList(1, elementPairs.size()), notPrinter, notParser);\n+            return new PeriodFormatter(sep.finish(format.getPrinter(), format.getParser()),\n+                sep.finish(format.getPrinter(), format.getParser()));\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(Collections.singletonList(element));\n+            if (notPrinter) {\n+                parser = (PeriodParser) comp[1];\n+            } else if (notParser) {\n+                printer = (PeriodPrinter) comp[0];\n+            } else {\n+                printer = (PeriodPrinter) comp[0];\n+                parser = (PeriodParser) comp[1];\n+            }\n         }\n     }\n \n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 1, Size: 1",
    "test_result": "FAIL"
}