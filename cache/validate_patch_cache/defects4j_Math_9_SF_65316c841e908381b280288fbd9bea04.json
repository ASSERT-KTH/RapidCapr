{
    "patch": "public Line revert() {\n    Vector3D zero = Vector3D.ZERO;\n    Vector3D revertedDirection = direction.negate();\n    Line reverted = new Line(zero, revertedDirection);\n    // Check that the reverted direction is close to the original direction\n    double delta = 1e-9;\n    assertEquals(direction.getX(), -revertedDirection.getX(), delta);\n    assertEquals(direction.getY(), -revertedDirection.getY(), delta);\n    assertEquals(direction.getZ(), -revertedDirection.getZ(), delta);\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..bdb3f3d4a 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,17 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    Vector3D zero = Vector3D.ZERO;\n+    Vector3D revertedDirection = direction.negate();\n+    Line reverted = new Line(zero, revertedDirection);\n+    // Check that the reverted direction is close to the original direction\n+    double delta = 1e-9;\n+    assertEquals(direction.getX(), -revertedDirection.getX(), delta);\n+    assertEquals(direction.getY(), -revertedDirection.getY(), delta);\n+    assertEquals(direction.getZ(), -revertedDirection.getZ(), delta);\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}