{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n                    for (int i = 0; i < shrinked.length; i++) {\n                        shrinked[i] = new RealPointValuePair(best.getPoint(),\n                                                              best.getValue() + sigma * (original[i].getValue()\n                                                                                            - best.getValue()));\n                    }\n                    evaluateSimplex(shrinked, comparator);\n                    if (comparator.compare(shrinked[0], best) < 0) {\n                        // accept the shrinked simplex\n                        simplex = shrinked;\n                    } else {\n                        // accept the contracted simplex\n                        simplex = contractedSimplex;\n                    }\n\n                }\n            }\n\n            // check convergence\n            if (getConvergenceChecker() != null) {\n                boolean converged = true;\n                for (int i = 1; i < simplex.length; i++) {\n                    converged &= getConvergenceChecker().converged(getIterations(), original[i - 1], simplex[i]);\n                }\n                if (converged) {\n                    return;\n                }\n            }\n\n            if (getEvaluations() >= maxEvaluations) {\n                throw new OptimizationException(new TooManyEvaluationsException(maxEvaluations));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e3fee2308 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,56 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n+\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex;\n+                } else {\n+\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+                    for (int i = 0; i < shrinked.length; i++) {\n+                        shrinked[i] = new RealPointValuePair(best.getPoint(),\n+                                                              best.getValue() + sigma * (original[i].getValue()\n+                                                                                            - best.getValue()));\n+                    }\n+                    evaluateSimplex(shrinked, comparator);\n+                    if (comparator.compare(shrinked[0], best) < 0) {\n+                        // accept the shrinked simplex\n+                        simplex = shrinked;\n+                    } else {\n+                        // accept the contracted simplex\n+                        simplex = contractedSimplex;\n+                    }\n \n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n+            if (getConvergenceChecker() != null) {\n+                boolean converged = true;\n+                for (int i = 1; i < simplex.length; i++) {\n+                    converged &= getConvergenceChecker().converged(getIterations(), original[i - 1], simplex[i]);\n+                }\n+                if (converged) {\n+                    return;\n+                }\n             }\n \n-        }\n-\n-    }\n+            if (getEvaluations() >= maxEvaluations) {\n+                throw new OptimizationException(new TooManyEvaluationsException(maxEvaluations));\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}