{
    "patch": "Type[] boundTypes = typeVariable.getBounds();\nList<Type> actualTypes = getActualTypeArgumentsFor(typeVariable);\nif (actualTypes != null) {\n    for (Type actualType : actualTypes) {\n        if (!actualType.getTypeName().equals(\"java.lang.Object\")) {\n            registerTypeVariablesOn(actualType);\n        }\n    }\n} else if (boundTypes.length > 0) {\n    for (Type type : boundTypes) {\n        if (!type.getTypeName().equals(\"java.lang.Object\")) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..20eb342c0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] boundTypes = typeVariable.getBounds();\n+List<Type> actualTypes = getActualTypeArgumentsFor(typeVariable);\n+if (actualTypes != null) {\n+    for (Type actualType : actualTypes) {\n+        if (!actualType.getTypeName().equals(\"java.lang.Object\")) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n+} else if (boundTypes.length > 0) {\n+    for (Type type : boundTypes) {\n+        if (!type.getTypeName().equals(\"java.lang.Object\")) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}