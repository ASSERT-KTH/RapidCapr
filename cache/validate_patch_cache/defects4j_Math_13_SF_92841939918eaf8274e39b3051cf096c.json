{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n       if (m.getRowDimension() * m.getColumnDimension() > Integer.MAX_VALUE / 2) {\n           return matrixIterativeSquareRoot(m);\n       } else {\n           final EigenDecomposition dec = new EigenDecomposition(m, 1e-9);\n           return dec.getSquareRoot();\n       }\n    }\n\n    private RealMatrix matrixIterativeSquareRoot(final RealMatrix m) {\n       final int n = m.getRowDimension();\n       RealMatrix x = m;\n       RealMatrix y = MatrixUtils.createRealIdentityMatrix(n);\n       RealMatrix z = MatrixUtils.createRealIdentityMatrix(n);\n       final double tol = 1e-12;\n       double norm = 1.0;\n       while (norm > tol) {\n           final RealMatrix xPrev = x;\n           final RealMatrix yPrev = y;\n           x = (x.add(y)).scalarMultiply(0.5);\n           final RealMatrix invX = new LUDecomposition(x).getSolver().getInverse();\n           y = invX.multiply(yPrev);\n           z = x.multiply(z).multiply(invX);\n           norm = x.subtract(xPrev).getFrobeniusNorm();\n       }\n       return z;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f4f48db3b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+       if (m.getRowDimension() * m.getColumnDimension() > Integer.MAX_VALUE / 2) {\n+           return matrixIterativeSquareRoot(m);\n+       } else {\n+           final EigenDecomposition dec = new EigenDecomposition(m, 1e-9);\n+           return dec.getSquareRoot();\n+       }\n+    }\n+\n+    private RealMatrix matrixIterativeSquareRoot(final RealMatrix m) {\n+       final int n = m.getRowDimension();\n+       RealMatrix x = m;\n+       RealMatrix y = MatrixUtils.createRealIdentityMatrix(n);\n+       RealMatrix z = MatrixUtils.createRealIdentityMatrix(n);\n+       final double tol = 1e-12;\n+       double norm = 1.0;\n+       while (norm > tol) {\n+           final RealMatrix xPrev = x;\n+           final RealMatrix yPrev = y;\n+           x = (x.add(y)).scalarMultiply(0.5);\n+           final RealMatrix invX = new LUDecomposition(x).getSolver().getInverse();\n+           y = invX.multiply(yPrev);\n+           z = x.multiply(z).multiply(invX);\n+           norm = x.subtract(xPrev).getFrobeniusNorm();\n+       }\n+       return z;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}