{
    "patch": "import com.google.javascript.jscomp.type.ObjectType;\n\n...\n\nif (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              JSType typeToInfer = propType;\n              if (!objType.hasProperty(prop)) {\n                if (propType.isConstructor()) {\n                  FunctionType constructorFn = propType.toMaybeFunctionType();\n                  JSType returnType = constructorFn.getReturnType();\n                  typeToInfer = returnType;\n                } else {\n                  typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(\n                      propType.getContainedTypeOrDefault(getNativeType(UNKNOWN_TYPE)));\n                }\n                objType.defineInferredProperty(prop, typeToInfer, null, false);\n             }\n          }\n       }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..adf0d987 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,32 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+import com.google.javascript.jscomp.type.ObjectType;\n+\n+...\n+\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!objType.isPropertyTypeDeclared(prop)) {\n+              JSType typeToInfer = propType;\n+              if (!objType.hasProperty(prop)) {\n+                if (propType.isConstructor()) {\n+                  FunctionType constructorFn = propType.toMaybeFunctionType();\n+                  JSType returnType = constructorFn.getReturnType();\n+                  typeToInfer = returnType;\n+                } else {\n+                  typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(\n+                      propType.getContainedTypeOrDefault(getNativeType(UNKNOWN_TYPE)));\n+                }\n+                objType.defineInferredProperty(prop, typeToInfer, null, false);\n+             }\n           }\n-        }\n-      }\n+       }\n+    }\n+}\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}