{
    "patch": "public static String unescape(String s) {\n    StringBuilder sbuf = new StringBuilder ();\n    int i = 0;\n    int len = s.length();\n    while (i < len) {\n        char c = s.charAt(i++);\n        if (c == '\\\\') {\n            if (i < len) {\n                c = s.charAt(i++);\n                if (c == 'n') c = '\\n';\n                else if (c == 'r') c = '\\r';\n                else if (c == 't') c = '\\t';\n                else if (c == 'f') c = '\\f';\n                else if (c == '\\\\') c = '\\\\';\n                else if (c == '\\'') c = '\\'';\n                else if (c == '\\\"') c = '\\\"';\n                else if (c >= '0' && c <= '7') {\n                    char oct = c;\n                    int octVal = c - '0';\n                    if (i < len && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n                        octVal = octVal*8 + s.charAt(i++) - '0';\n                        if (oct <= '3' && i < len && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n                            octVal = octVal*8 + s.charAt(i++) - '0';\n                        }\n                    }\n                    c = (char)octVal;\n                } else {\n                    // Error condition, we keep the backslash and the character\n                    // unchanged\n                    i--;\n                }\n            }\n        }\n        sbuf.append(c);\n    }\n    return sbuf.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..db0e6bf0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,43 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    StringBuilder sbuf = new StringBuilder ();\n+    int i = 0;\n+    int len = s.length();\n+    while (i < len) {\n+        char c = s.charAt(i++);\n+        if (c == '\\\\') {\n+            if (i < len) {\n+                c = s.charAt(i++);\n+                if (c == 'n') c = '\\n';\n+                else if (c == 'r') c = '\\r';\n+                else if (c == 't') c = '\\t';\n+                else if (c == 'f') c = '\\f';\n+                else if (c == '\\\\') c = '\\\\';\n+                else if (c == '\\'') c = '\\'';\n+                else if (c == '\\\"') c = '\\\"';\n+                else if (c >= '0' && c <= '7') {\n+                    char oct = c;\n+                    int octVal = c - '0';\n+                    if (i < len && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n+                        octVal = octVal*8 + s.charAt(i++) - '0';\n+                        if (oct <= '3' && i < len && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n+                            octVal = octVal*8 + s.charAt(i++) - '0';\n+                        }\n+                    }\n+                    c = (char)octVal;\n+                } else {\n+                    // Error condition, we keep the backslash and the character\n+                    // unchanged\n+                    i--;\n+                }\n+            }\n+        }\n+        sbuf.append(c);\n+    }\n+    return sbuf.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}