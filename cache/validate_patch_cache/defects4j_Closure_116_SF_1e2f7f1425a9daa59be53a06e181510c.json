{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // FUNCTIONS called VIA 'CALL' and 'APPLY' has a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO (johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  boolean seenNamedParam = false;\n  Set<String> namesSet = new HashSet<>();\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = fnParams.getFirstChild();\n  while (cArg != null || (fnParam != null && fnParam.isName())) {\n    // For each named parameter, check if the argument is valid.\n    // If a named parameter has no corresponding argument, it is skipped.\n    if (fnParam != null && fnParam.isName()) {\n      seenNamedParam = true;\n      String paramName = fnParam.getString();\n      if (!namesSet.add(paramName)) {\n        return CanInlineResult.NO;\n      }\n      if (!NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        if (!isNameUsedMoreThanOnce(paramName, cArg, block)) {\n          cArg = cArg.getNext();\n          fnParam = fnParam.getNext();\n          continue;\n        }\n      }\n      if (NodeUtil.getNameReferenceCount(block, paramName) > 0) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n    } else {\n      // For each anonymous argument\n      if (seenNamedParam || NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  // If there are any extra arguments, return NO.\n  if (cArg != null) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}\n\nprivate boolean isNameUsedMoreThanOnce(String paramName, Node argNode, Node block) {\n  int nameCount = 0;\n  for (Node n : NodeUtil.getNameNodes(block, paramName)) {\n    if (n == argNode) {\n      nameCount++;\n    }\n    if (nameCount > 1) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..64c74bab 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,87 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n+  Node block = fnNode.getLastChild();\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  // FUNCTIONS called VIA 'CALL' and 'APPLY' has a this-object as\n+  // the first parameter, but this is not part of the called function's\n+  // parameter list.\n+  if (!callNode.getFirstChild().isName()) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      // TODO (johnlenz): Support replace this with a value.\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n       }\n+      cArg = cArg.getNext();\n+    } else {\n+      // \".apply\" call should be filtered before this.\n+      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n     }\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  boolean seenNamedParam = false;\n+  Set<String> namesSet = new HashSet<>();\n+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n+  Node fnParam = fnParams.getFirstChild();\n+  while (cArg != null || (fnParam != null && fnParam.isName())) {\n+    // For each named parameter, check if the argument is valid.\n+    // If a named parameter has no corresponding argument, it is skipped.\n+    if (fnParam != null && fnParam.isName()) {\n+      seenNamedParam = true;\n+      String paramName = fnParam.getString();\n+      if (!namesSet.add(paramName)) {\n+        return CanInlineResult.NO;\n       }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+      if (!NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        if (!isNameUsedMoreThanOnce(paramName, cArg, block)) {\n+          cArg = cArg.getNext();\n+          fnParam = fnParam.getNext();\n+          continue;\n         }\n-        cArg = cArg.getNext();\n       }\n+      if (NodeUtil.getNameReferenceCount(block, paramName) > 0) {\n+        return CanInlineResult.NO;\n+      }\n+      fnParam = fnParam.getNext();\n+    } else {\n+      // For each anonymous argument\n+      if (seenNamedParam || NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+      cArg = cArg.getNext();\n     }\n+  }\n \n-    return CanInlineResult.YES;\n+  // If there are any extra arguments, return NO.\n+  if (cArg != null) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n+private boolean isNameUsedMoreThanOnce(String paramName, Node argNode, Node block) {\n+  int nameCount = 0;\n+  for (Node n : NodeUtil.getNameNodes(block, paramName)) {\n+    if (n == argNode) {\n+      nameCount++;\n+    }\n+    if (nameCount > 1) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}