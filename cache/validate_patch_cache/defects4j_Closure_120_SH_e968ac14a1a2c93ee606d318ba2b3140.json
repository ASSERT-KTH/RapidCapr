{
    "patch": "if (block.isFunction) {\n  if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n    return true;\n  } else if (ref == getInitializingReferenceForConstants()) {\n    return true;\n  } else {\n    // This is an assignment, so return false.\n    return false;\n  }\n} else if (block.isLoop) {\n  // If the reference we found is the initializing reference (from the declaration,\n  // or first assignment), then do not report an error. Otherwise, if not in\n  // the initialization loop, then report.\n  if (ref == getInitializingReference()) {\n    return true;\n  } else if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n    return true;\n  } else if (!block.contains(getInitializingReference())\n             && !isInitializingAssignmentAt(references.indexOf(ref))) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..452af138 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+  if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+    return true;\n+  } else if (ref == getInitializingReferenceForConstants()) {\n+    return true;\n+  } else {\n+    // This is an assignment, so return false.\n+    return false;\n+  }\n+} else if (block.isLoop) {\n+  // If the reference we found is the initializing reference (from the declaration,\n+  // or first assignment), then do not report an error. Otherwise, if not in\n+  // the initialization loop, then report.\n+  if (ref == getInitializingReference()) {\n+    return true;\n+  } else if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+    return true;\n+  } else if (!block.contains(getInitializingReference())\n+             && !isInitializingAssignmentAt(references.indexOf(ref))) {\n+    return false;\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}