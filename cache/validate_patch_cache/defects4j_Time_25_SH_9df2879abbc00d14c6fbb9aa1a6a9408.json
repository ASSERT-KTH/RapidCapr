{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    long prevTransition = previousTransition(instantAdjusted);\n    int offsetPrev = getOffset(prevTransition);\n    if (offsetPrev < offsetAdjusted) {\n        return offsetPrev;\n    }\n} else if (offsetLocal < offsetAdjusted) {\n    long nextTransition = nextTransition(instantAdjusted);\n    int offsetNext = getOffset(nextTransition);\n    if (offsetNext == offsetAdjusted) {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0978bff9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    long prevTransition = previousTransition(instantAdjusted);\n+    int offsetPrev = getOffset(prevTransition);\n+    if (offsetPrev < offsetAdjusted) {\n+        return offsetPrev;\n+    }\n+} else if (offsetLocal < offsetAdjusted) {\n+    long nextTransition = nextTransition(instantAdjusted);\n+    int offsetNext = getOffset(nextTransition);\n+    if (offsetNext == offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-04-01T02:00:00.000-04:00 expected:<2007-04-01T0[1]:00:00.000-04:00> but was:<2007-04-01T0[2]:00:00.000-04:00>",
    "test_result": "FAIL"
}