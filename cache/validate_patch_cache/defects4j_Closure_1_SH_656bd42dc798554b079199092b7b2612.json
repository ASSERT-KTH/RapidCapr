{
    "patch": "    Node function = fnScope.getRootNode();\n    Node parent = function.getParent();\n\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(parent)) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      if (function.isArrowFunction()) {\n        // Arrow functions can omit parens for a single arg, so if that arg is\n        // unused, `argList` will be null. In that case we don't want to strip\n        // it because otherwise the number of arguments will change.\n        if (!argList.hasChildren()) {\n          return;\n        }\n      }\n\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = lastArg.getDeclaredTypeExpression() != null\n            ? null\n            : fnScope.getVar(lastArg.getString());\n        if (var == null || !referenced.contains(var)) {\n          Node prev = lastArg.getPrevious();\n          argList.removeChild(lastArg);\n          if (lastArg.getJSDocInfo() != null) {\n            argList.setJSDocInfo(lastArg.getJSDocInfo());\n            lastArg.setJSDocInfo(null);\n          }\n          lastArg = prev;\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4fbd2a92 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Node parent = function.getParent();\n+\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(parent)) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      if (function.isArrowFunction()) {\n+        // Arrow functions can omit parens for a single arg, so if that arg is\n+        // unused, `argList` will be null. In that case we don't want to strip\n+        // it because otherwise the number of arguments will change.\n+        if (!argList.hasChildren()) {\n+          return;\n+        }\n+      }\n+\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = lastArg.getDeclaredTypeExpression() != null\n+            ? null\n+            : fnScope.getVar(lastArg.getString());\n+        if (var == null || !referenced.contains(var)) {\n+          Node prev = lastArg.getPrevious();\n+          argList.removeChild(lastArg);\n+          if (lastArg.getJSDocInfo() != null) {\n+            argList.setJSDocInfo(lastArg.getJSDocInfo());\n+            lastArg.setJSDocInfo(null);\n+          }\n+          lastArg = prev;\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}