{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                YearInfo info = iChrono.year().getYearInfo(millis);\n                if (info.iText == null) {\n                    int year = info.iYear;\n                    if (year < 0) {\n                        year = -year;\n                    }\n                    int base = (year / 100) * 100;\n                    if (year % 100 < iTwoDigitYear) {\n                        base -= 100;\n                    }\n                    millis = iChrono.year().set(millis, base + year);\n                } else {\n                    millis = iChrono.year().set(millis, info.iText, resetFields);\n                }\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..07dcc8ab 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                YearInfo info = iChrono.year().getYearInfo(millis);\n+                if (info.iText == null) {\n+                    int year = info.iYear;\n+                    if (year < 0) {\n+                        year = -year;\n+                    }\n+                    int base = (year / 100) * 100;\n+                    if (year % 100 < iTwoDigitYear) {\n+                        base -= 100;\n+                    }\n+                    millis = iChrono.year().set(millis, base + year);\n+                } else {\n+                    millis = iChrono.year().set(millis, info.iText, resetFields);\n+                }\n+            } else {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}