{
    "patch": "public static String fixCode(String code) {\n    // replace 'in' inside foor loops with notIn or isIn operator\n    StringBuilder sb = new StringBuilder();\n    String[] lines = code.split(System.lineSeparator());\n    for (String line : lines) {\n        sb.append(line.replaceAll(\"for\\\\((.*);(.*);(.*)\\\\)\", \"for($1;%s$2;%s$3)\")\n                .replaceAll(\"\\\\[\\\\[(.*) in (.*)\\\\]\\\\]\", \"[[$1 %s $2]]\"))\n                .append(System.lineSeparator());\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..02452423 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,17 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    // replace 'in' inside foor loops with notIn or isIn operator\n+    StringBuilder sb = new StringBuilder();\n+    String[] lines = code.split(System.lineSeparator());\n+    for (String line : lines) {\n+        sb.append(line.replaceAll(\"for\\\\((.*);(.*);(.*)\\\\)\", \"for($1;%s$2;%s$3)\")\n+                .replaceAll(\"\\\\[\\\\[(.*) in (.*)\\\\]\\\\]\", \"[[$1 %s $2]]\"))\n+                .append(System.lineSeparator());\n+    }\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}