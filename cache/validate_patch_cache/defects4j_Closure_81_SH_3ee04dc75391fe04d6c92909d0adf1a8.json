{
    "patch": "    private boolean hasExceptionHandler(Node cfgNode) {\n      if (cfgNode.getType() != Token.TRY) return false;\n\n      // Look for a catch block.\n      for (Node child : cfgNode.getLastChild().children()) {\n        if (child.getType() == Token.CATCH) {\n          return true;\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..43ddffda 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,17 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    private boolean hasExceptionHandler(Node cfgNode) {\n+      if (cfgNode.getType() != Token.TRY) return false;\n+\n+      // Look for a catch block.\n+      for (Node child : cfgNode.getLastChild().children()) {\n+        if (child.getType() == Token.CATCH) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}