{
    "patch": "public String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder(input.length());\n    int i = 0;\n    while (i < input.length()) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\' && i + 1 < input.length()) {\n            char nextChar = input.charAt(i + 1);\n            if (nextChar == 'n') {\n                sb.append('\\n');\n                i += 2;\n                continue;\n            } else if (nextChar == 'r') {\n                sb.append('\\r');\n                i += 2;\n                continue;\n            } else if (nextChar == 't') {\n                sb.append('\\t');\n                i += 2;\n                continue;\n            } else if (nextChar == 'f') {\n                sb.append('\\f');\n                i += 2;\n                continue;\n            } else if (nextChar == 'b') {\n                sb.append('\\b');\n                i += 2;\n                continue;\n            } else if (nextChar == '\\'') {\n                sb.append('\\'');\n                i += 2;\n                continue;\n            } else if (nextChar == '\\\"') {\n                sb.append('\\\"');\n                i += 2;\n                continue;\n            } else if (nextChar == '\\\\') {\n                sb.append('\\\\');\n                i += 2;\n                continue;\n            } else if (nextChar >= '0' && nextChar <= '7') {\n                // Octal escape\n                int start = i + 1;\n                int end = Math.min(i + 4, input.length());\n                int value = Integer.parseInt(input.substring(start, end), 8);\n                sb.append((char) value);\n                i = end;\n                continue;\n            } else if (nextChar == 'u' && i + 5 < input.length()) {\n                // Unicode escape\n                int start = i + 2;\n                int end = i + 6;\n                int value = Integer.parseInt(input.substring(start, end), 16);\n                sb.append((char) value);\n                i = end;\n                continue;\n            }\n        }\n        sb.append(ch);\n        i++;\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..43b98577 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,71 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder(input.length());\n+    int i = 0;\n+    while (i < input.length()) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\' && i + 1 < input.length()) {\n+            char nextChar = input.charAt(i + 1);\n+            if (nextChar == 'n') {\n+                sb.append('\\n');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == 'r') {\n+                sb.append('\\r');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == 't') {\n+                sb.append('\\t');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == 'f') {\n+                sb.append('\\f');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == 'b') {\n+                sb.append('\\b');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == '\\'') {\n+                sb.append('\\'');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == '\\\"') {\n+                sb.append('\\\"');\n+                i += 2;\n+                continue;\n+            } else if (nextChar == '\\\\') {\n+                sb.append('\\\\');\n+                i += 2;\n+                continue;\n+            } else if (nextChar >= '0' && nextChar <= '7') {\n+                // Octal escape\n+                int start = i + 1;\n+                int end = Math.min(i + 4, input.length());\n+                int value = Integer.parseInt(input.substring(start, end), 8);\n+                sb.append((char) value);\n+                i = end;\n+                continue;\n+            } else if (nextChar == 'u' && i + 5 < input.length()) {\n+                // Unicode escape\n+                int start = i + 2;\n+                int end = i + 6;\n+                int value = Integer.parseInt(input.substring(start, end), 16);\n+                sb.append((char) value);\n+                i = end;\n+                continue;\n+            }\n+        }\n+        sb.append(ch);\n+        i++;\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}