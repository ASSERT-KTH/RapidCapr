{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    boolean isFunctionObjectCall = NodeUtil.isFunctionObjectCall(callNode);\n    boolean isFunctionObjectApply = NodeUtil.isFunctionObjectApply(callNode);\n    if (cArg != null && !callNode.getFirstChild().isName()) {\n      boolean isThisTarget = cArg.isThis();\n      cArg = cArg.getNext();\n      if (isFunctionObjectCall) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (!isThisTarget) {\n          return CanInlineResult.NO;\n        }\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!isFunctionObjectApply);\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg == null) {\n          return CanInlineResult.NO;\n        }\n\n        // Check for arguments that are evaluated more than once.\n        // Note: Unlike block inlining, there it is not possible that a\n        // parameter reference will be in a loop.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(\n                block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n\n        // Move to the next named parameter.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..d3780a43 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -694,23 +694,25 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n+    boolean isFunctionObjectCall = NodeUtil.isFunctionObjectCall(callNode);\n+    boolean isFunctionObjectApply = NodeUtil.isFunctionObjectApply(callNode);\n+    if (cArg != null && !callNode.getFirstChild().isName()) {\n+      boolean isThisTarget = cArg.isThis();\n+      cArg = cArg.getNext();\n+      if (isFunctionObjectCall) {\n         // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+        if (!isThisTarget) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       } else {\n         // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Preconditions.checkState(!isFunctionObjectApply);\n       }\n     }\n \n@@ -719,19 +721,20 @@ class FunctionInjector {\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+        if (cArg == null) {\n+          return CanInlineResult.NO;\n+        }\n+\n+        // Check for arguments that are evaluated more than once.\n+        // Note: Unlike block inlining, there it is not possible that a\n+        // parameter reference will be in a loop.\n+        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+            && NodeUtil.getNameReferenceCount(\n+                block, fnParam.getString()) > 1) {\n+          return CanInlineResult.NO;\n         }\n \n-        // Move to the next name.\n+        // Move to the next named parameter.\n         fnParam = fnParam.getNext();\n       }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<NO> but was:<YES>",
    "test_result": "FAIL"
}