{
    "patch": "private void init() {\n    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n    StringBuilder regex= new StringBuilder();\n    List<Strategy> collector = new ArrayList<>();\n\n    Matcher patternMatcher= formatPattern.matcher(pattern);\n    if(!patternMatcher.matches()) {  // change from lookingAt() to matches()\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    currentFormatField = patternMatcher.group();\n    Strategy currentStrategy = getStrategy(currentFormatField);\n    for(;;) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if(!patternMatcher.lookingAt()) {\n            nextStrategy = null;\n            break;\n        }\n        String nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n    }\n    /** Add the following block of code to resolve the issue **/\n    if(currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    int size = collector.size();\n    if(size > 0) {\n        // Add already created strategies to 'collector'\n        for(int i = size - 1; i > 0; i--) {\n            if(collector.get(i).getVariableRange() == collector.get(i-1).getVariableRange()) {\n                collector.get(i-1).next = collector.get(i);\n            }\n        }\n        strategies = new Strategy[] { collector.get(0) };\n    } else {\n        strategies = new Strategy[0]; // empty array\n    }\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..fdd10af6 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,51 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+private void init() {\n+    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    StringBuilder regex= new StringBuilder();\n+    List<Strategy> collector = new ArrayList<>();\n+\n+    Matcher patternMatcher= formatPattern.matcher(pattern);\n+    if(!patternMatcher.matches()) {  // change from lookingAt() to matches()\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n+    currentFormatField = patternMatcher.group();\n+    Strategy currentStrategy = getStrategy(currentFormatField);\n+    for(;;) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n         if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n-\n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n+            nextStrategy = null;\n+            break;\n         }\n+        String nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n     }\n+    /** Add the following block of code to resolve the issue **/\n+    if(currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    int size = collector.size();\n+    if(size > 0) {\n+        // Add already created strategies to 'collector'\n+        for(int i = size - 1; i > 0; i--) {\n+            if(collector.get(i).getVariableRange() == collector.get(i-1).getVariableRange()) {\n+                collector.get(i-1).next = collector.get(i);\n+            }\n+        }\n+        strategies = new Strategy[] { collector.get(0) };\n+    } else {\n+        strategies = new Strategy[0]; // empty array\n+    }\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}