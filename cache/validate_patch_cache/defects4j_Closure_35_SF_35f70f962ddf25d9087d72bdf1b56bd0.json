{
    "patch": "   * Infers property types of an object type based on the types of properties in a constraint type.\n   * For any property in the constraint type that is not declared in the object type, we define an inferred\n   * property with the same name and type as the constraint property.\n   * @param type the object type whose properties will be inferred.\n   * @param constraint the type whose properties will be used as constraint for the object type.\n   */\n  private void inferPropertyTypes(ObjectType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!type.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!type.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          type.defineInferredProperty(prop, typeToInfer, null);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ef14f7d3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,7 +1111,13 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+   * Infers property types of an object type based on the types of properties in a constraint type.\n+   * For any property in the constraint type that is not declared in the object type, we define an inferred\n+   * property with the same name and type as the constraint property.\n+   * @param type the object type whose properties will be inferred.\n+   * @param constraint the type whose properties will be used as constraint for the object type.\n+   */\n+  private void inferPropertyTypes(ObjectType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n@@ -1119,34 +1125,16 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!type.isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!type.hasProperty(prop)) {\n+            typeToInfer =\n+                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n           }\n+          type.defineInferredProperty(prop, typeToInfer, null);\n         }\n-      }\n-    }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}