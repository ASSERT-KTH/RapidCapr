{
    "patch": "private void visitParameterList(\n    NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  // Expect at least minArgs arguments, and at most maxArgs arguments.\n  int expectedNumArgs;\n  String missingOrExtra;\n  if (minArgs == maxArgs) {\n    expectedNumArgs = minArgs;\n    missingOrExtra = \" argument\" + (minArgs == 1 ? \"\" : \"s\") + \".\";\n  } else if (maxArgs == Integer.MAX_VALUE) {\n    expectedNumArgs = minArgs;\n    missingOrExtra = \" at least \" + minArgs + \" argument\" + (minArgs == 1 ? \"\" : \"s\") + \".\";\n  } else {\n    expectedNumArgs = maxArgs;\n    missingOrExtra = \" between \" + minArgs + \" and \" + maxArgs + \" argument\" +\n        ((maxArgs > 1 || minArgs > 1) ? \"s\" : \"\") + \".\";\n  }\n\n  if (numArgs < expectedNumArgs) {\n    int numMissingArgs = expectedNumArgs - numArgs;\n    String errorMsg = validator.getReadableJSTypeName(call.getFirstChild(), false) +\n        \" is called with \" + numArgs + \" argument\" + (numArgs == 1 ? \"\" : \"s\") +\n        \", but expects \" + missingOrExtra;\n    if (numMissingArgs == 1) {\n      errorMsg += \" \" + numMissingArgs + \" argument is missing.\";\n    } else {\n      errorMsg += \" \" + numMissingArgs + \" arguments are missing.\";\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n    return;\n  }\n\n  if (numArgs > maxArgs) {\n    int numExtraArgs = numArgs - maxArgs;\n    String errorMsg = validator.getReadableJSTypeName(call.getFirstChild(), false) +\n        \" is called with \" + numArgs + \" argument\" + (numArgs == 1 ? \"\" : \"s\") +\n        \", but expects \" + missingOrExtra;\n    if (numExtraArgs == 1) {\n      errorMsg += \" \" + numExtraArgs + \" argument is too many.\";\n    } else {\n      errorMsg += \" \" + numExtraArgs + \" arguments are too many.\";\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n    return;\n  }\n\n  // All arguments are present and accounted for.\n  int ordinal = 0;\n  Node parameter;\n  Node argument;\n  while (parameters.hasNext() && arguments.hasNext()) {\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..d5b3fad9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,71 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(\n+    NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  // Expect at least minArgs arguments, and at most maxArgs arguments.\n+  int expectedNumArgs;\n+  String missingOrExtra;\n+  if (minArgs == maxArgs) {\n+    expectedNumArgs = minArgs;\n+    missingOrExtra = \" argument\" + (minArgs == 1 ? \"\" : \"s\") + \".\";\n+  } else if (maxArgs == Integer.MAX_VALUE) {\n+    expectedNumArgs = minArgs;\n+    missingOrExtra = \" at least \" + minArgs + \" argument\" + (minArgs == 1 ? \"\" : \"s\") + \".\";\n+  } else {\n+    expectedNumArgs = maxArgs;\n+    missingOrExtra = \" between \" + minArgs + \" and \" + maxArgs + \" argument\" +\n+        ((maxArgs > 1 || minArgs > 1) ? \"s\" : \"\") + \".\";\n+  }\n+\n+  if (numArgs < expectedNumArgs) {\n+    int numMissingArgs = expectedNumArgs - numArgs;\n+    String errorMsg = validator.getReadableJSTypeName(call.getFirstChild(), false) +\n+        \" is called with \" + numArgs + \" argument\" + (numArgs == 1 ? \"\" : \"s\") +\n+        \", but expects \" + missingOrExtra;\n+    if (numMissingArgs == 1) {\n+      errorMsg += \" \" + numMissingArgs + \" argument is missing.\";\n+    } else {\n+      errorMsg += \" \" + numMissingArgs + \" arguments are missing.\";\n     }\n+    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n+    return;\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  if (numArgs > maxArgs) {\n+    int numExtraArgs = numArgs - maxArgs;\n+    String errorMsg = validator.getReadableJSTypeName(call.getFirstChild(), false) +\n+        \" is called with \" + numArgs + \" argument\" + (numArgs == 1 ? \"\" : \"s\") +\n+        \", but expects \" + missingOrExtra;\n+    if (numExtraArgs == 1) {\n+      errorMsg += \" \" + numExtraArgs + \" argument is too many.\";\n+    } else {\n+      errorMsg += \" \" + numExtraArgs + \" arguments are too many.\";\n     }\n+    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n+    return;\n+  }\n+\n+  // All arguments are present and accounted for.\n+  int ordinal = 0;\n+  Node parameter;\n+  Node argument;\n+  while (parameters.hasNext() && arguments.hasNext()) {\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}