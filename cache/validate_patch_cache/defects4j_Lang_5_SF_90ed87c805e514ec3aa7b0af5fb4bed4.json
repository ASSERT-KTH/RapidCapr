{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n    String[] tokens = str.split(\"_\", -1);\n    int len = tokens.length;\n    if (len > 3 || len == 0 || !isValidCode(tokens[0])) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = tokens[0];\n    String country = \"\";\n    String variant = \"\";\n    if (len > 1) {\n        if (isValidCode(tokens[1])) {\n            country = tokens[1];\n            if (len > 2 && isValidCode(tokens[2])) {\n                variant = tokens[2];\n            }\n        } else if (len > 2 && isValidCode(tokens[2])) {\n            variant = tokens[1];\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(String code) {\n    String pattern = \"^[a-zA-Z0-9]+$\";\n    return code.matches(pattern);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..a34301b5 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,37 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n+public static Locale toLocale(String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+    String[] tokens = str.split(\"_\", -1);\n+    int len = tokens.length;\n+    if (len > 3 || len == 0 || !isValidCode(tokens[0])) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    String language = tokens[0];\n+    String country = \"\";\n+    String variant = \"\";\n+    if (len > 1) {\n+        if (isValidCode(tokens[1])) {\n+            country = tokens[1];\n+            if (len > 2 && isValidCode(tokens[2])) {\n+                variant = tokens[2];\n+            }\n+        } else if (len > 2 && isValidCode(tokens[2])) {\n+            variant = tokens[1];\n+        } else {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(String code) {\n+    String pattern = \"^[a-zA-Z0-9]+$\";\n+    return code.matches(pattern);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[P]> but was:<[]>",
    "test_result": "FAIL"
}