{
    "patch": "public static String escapeText(String input) {\n    StringBuilder output = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n        switch(ch) {\n            case '<':\n                output.append(\"&lt;\");\n                break;\n            case '>':\n                output.append(\"&gt;\");\n                break;\n            case '&':\n                output.append(\"&amp;\");\n                break;\n            case '\\\"':\n                output.append(\"&quot;\");\n                break;\n            case '\\n':\n                output.append(\"<br>\");\n                break;\n            case '\\r':\n                break;\n            default:\n                if (ch <= 0x1f || (ch >= 0x7f && ch <= 0x9f)) {\n                    // Control characters and reserved characters, as per RFC 2045\n                    // Don't include DEL, even though it's technically a control character\n                    output.append(\"&#\")\n                          .append((int)ch)\n                          .append(\";\");\n                } else {\n                    output.append(ch);\n                }\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..e703aceb 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,42 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeText(String input) {\n+    StringBuilder output = new StringBuilder();\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+        switch(ch) {\n+            case '<':\n+                output.append(\"&lt;\");\n+                break;\n+            case '>':\n+                output.append(\"&gt;\");\n+                break;\n+            case '&':\n+                output.append(\"&amp;\");\n+                break;\n+            case '\\\"':\n+                output.append(\"&quot;\");\n+                break;\n+            case '\\n':\n+                output.append(\"<br>\");\n+                break;\n+            case '\\r':\n+                break;\n+            default:\n+                if (ch <= 0x1f || (ch >= 0x7f && ch <= 0x9f)) {\n+                    // Control characters and reserved characters, as per RFC 2045\n+                    // Don't include DEL, even though it's technically a control character\n+                    output.append(\"&#\")\n+                          .append((int)ch)\n+                          .append(\";\");\n+                } else {\n+                    output.append(ch);\n+                }\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}