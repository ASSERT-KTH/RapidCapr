{
    "patch": "          if (references.indexOf(ref) == 0) {\n            return true;\n          } else if (ref == getInitializingReference()) {\n            // If we are in the function boundary and the assignment was done during the\n            // declaration, then it's a one-time reassignment.\n            return true;\n          } else {\n            return false;\n          }\n        } else if (block.isLoop) {\n          // loop assignment is not ok since it may execute multiple times",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..19f3d6c1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (references.indexOf(ref) == 0) {\n+            return true;\n+          } else if (ref == getInitializingReference()) {\n+            // If we are in the function boundary and the assignment was done during the\n+            // declaration, then it's a one-time reassignment.\n+            return true;\n+          } else {\n+            return false;\n+          }\n+        } else if (block.isLoop) {\n+          // loop assignment is not ok since it may execute multiple times\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}