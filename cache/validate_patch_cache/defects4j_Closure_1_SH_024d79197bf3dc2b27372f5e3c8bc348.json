{
    "patch": "    boolean keepGoing = true;\n    while (keepGoing) {\n      keepGoing = false;\n      for (Node arg : argList.children()) {\n        if (!arg.hasMoreThanOneChild()) {\n          Var var = fnScope.getVar(arg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n            keepGoing = true;\n            break;\n          }\n        }\n      }\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..63636f0c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean keepGoing = true;\n+    while (keepGoing) {\n+      keepGoing = false;\n+      for (Node arg : argList.children()) {\n+        if (!arg.hasMoreThanOneChild()) {\n+          Var var = fnScope.getVar(arg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+            keepGoing = true;\n+            break;\n+          }\n+        }\n+      }\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}