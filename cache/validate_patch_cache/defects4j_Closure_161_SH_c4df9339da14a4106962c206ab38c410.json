{
    "patch": "// Check if left operand is an empty array literal, return undefined or skip folding if it's not appropriate\nif (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n  if (parent.getType() == Token.ASSIGN) {\n    return n;\n  }\n  return NodeUtil.newUndefinedNode(n);\n} else if (left.getType() == Token.ARRAYLIT) {\n  // If left operand is a non-empty array literal, check if the index is out of bounds\n  int numElements = left.getChildCount();\n  if (right.getType() != Token.NUMBER) {\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index || intIndex >= numElements || intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  }\n\n  // Replace the entire GETELEM with the value\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n} else {\n  // If left operand is not an array literal, return the original node\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..e736592b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,39 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if left operand is an empty array literal, return undefined or skip folding if it's not appropriate\n+if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+  if (parent.getType() == Token.ASSIGN) {\n+    return n;\n+  }\n+  return NodeUtil.newUndefinedNode(n);\n+} else if (left.getType() == Token.ARRAYLIT) {\n+  // If left operand is a non-empty array literal, check if the index is out of bounds\n+  int numElements = left.getChildCount();\n+  if (right.getType() != Token.NUMBER) {\n+    return n;\n+  }\n+\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index || intIndex >= numElements || intIndex < 0) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+\n+  Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n+  if (elem.getType() == Token.EMPTY) {\n+    elem = NodeUtil.newUndefinedNode(elem);\n+  }\n+\n+  // Replace the entire GETELEM with the value\n+  n.getParent().replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+} else {\n+  // If left operand is not an array literal, return the original node\n+  return n;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}