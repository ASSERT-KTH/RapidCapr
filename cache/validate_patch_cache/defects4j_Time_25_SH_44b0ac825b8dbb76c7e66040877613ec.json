{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > offsetAdjusted) {\n        long prevAdjusted = previousTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantAdjusted);\n        if (prevAdjusted == instantAdjusted - offsetAdjusted || nextAdjusted == instantAdjusted - offsetAdjusted) {\n            return offsetLocal;\n        }\n    } else {\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long nextLocal = nextTransition(instantAdjusted);\n        if ((prevAdjusted == instantLocal - offsetAdjusted && nextAdjusted <= instantAdjusted - offsetLocal)\n                || (nextAdjusted == instantLocal - offsetAdjusted && prevAdjusted >= instantAdjusted - offsetLocal)) {\n            return offsetLocal;\n        } else if (nextLocal == nextAdjusted && nextLocal != nextTransition(instantLocal)) {\n            return offsetLocal;\n        }\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b06b5829 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > offsetAdjusted) {\n+        long prevAdjusted = previousTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantAdjusted);\n+        if (prevAdjusted == instantAdjusted - offsetAdjusted || nextAdjusted == instantAdjusted - offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long nextLocal = nextTransition(instantAdjusted);\n+        if ((prevAdjusted == instantLocal - offsetAdjusted && nextAdjusted <= instantAdjusted - offsetLocal)\n+                || (nextAdjusted == instantLocal - offsetAdjusted && prevAdjusted >= instantAdjusted - offsetLocal)) {\n+            return offsetLocal;\n+        } else if (nextLocal == nextAdjusted && nextLocal != nextTransition(instantLocal)) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}