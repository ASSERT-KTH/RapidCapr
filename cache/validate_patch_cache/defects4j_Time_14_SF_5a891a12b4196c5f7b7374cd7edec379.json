{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // bug fix [3271944]\n            DateTimeZone zone = iChronology.getZone();\n            Chronology chrono = iChronology.withUTC();\n            try {\n                instant = chrono.addMonths(instant, valueToAdd);\n            } catch (IllegalFieldValueException e) {\n                if (e.getIllegalFieldValueFailureType() != IllegalFieldValueException.DAY_OF_MONTH) {\n                    throw e;\n                }\n                LocalDate localDate = new LocalDate(instant, chrono);\n                int day = localDate.getDayOfMonth();\n                int maxDay = localDate.dayOfMonth().getMaximumValue();\n                boolean lenient = (day > maxDay);\n                if (lenient) {\n                    instant = localDate.plusMonths(valueToAdd).toDateMidnight().toDateTime(zone).getMillis();\n                } else {\n                    throw e;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1184d349 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            // bug fix [3271944]\n+            DateTimeZone zone = iChronology.getZone();\n+            Chronology chrono = iChronology.withUTC();\n+            try {\n+                instant = chrono.addMonths(instant, valueToAdd);\n+            } catch (IllegalFieldValueException e) {\n+                if (e.getIllegalFieldValueFailureType() != IllegalFieldValueException.DAY_OF_MONTH) {\n+                    throw e;\n+                }\n+                LocalDate localDate = new LocalDate(instant, chrono);\n+                int day = localDate.getDayOfMonth();\n+                int maxDay = localDate.dayOfMonth().getMaximumValue();\n+                boolean lenient = (day > maxDay);\n+                if (lenient) {\n+                    instant = localDate.plusMonths(valueToAdd).toDateMidnight().toDateTime(zone).getMillis();\n+                } else {\n+                    throw e;\n+                }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}