{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial) && partial.isSupported(DateTimeFieldType.monthOfYear())) {\n            int monthsToAdd = valueToAdd % 12;\n            int yearsToAdd = valueToAdd / 12;\n            \n            int month = partial.get(DateTimeFieldType.monthOfYear());\n            int year = partial.get(DateTimeFieldType.year());\n            year += yearsToAdd;\n            // Adjust for leap year.\n            if (month == 2 && partial.get(DateTimeFieldType.dayOfMonth()) > 28) {\n                int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year);\n                values = iChronology.dayOfMonth().set(partial, fieldIndex, values, lastDayOfMonth);\n            }\n            year += (month + monthsToAdd - 1) / 12;\n            month = ((month + monthsToAdd) % 12 + 12) % 12 + 1;\n            int day = Math.min(partial.get(DateTimeFieldType.dayOfMonth()), iChronology.dayOfMonth().getMaximumValue(year, month));\n            values = iChronology.monthOfYear().set(partial, fieldIndex, values, month);\n            values = iChronology.year().set(partial, fieldIndex, values, year);\n            values = iChronology.dayOfMonth().set(partial, fieldIndex, values, day);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..cb6a9f1f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,25 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // month is largest field and being added to, such as month-day\n+        if (DateTimeUtils.isContiguous(partial) && partial.isSupported(DateTimeFieldType.monthOfYear())) {\n+            int monthsToAdd = valueToAdd % 12;\n+            int yearsToAdd = valueToAdd / 12;\n+            \n+            int month = partial.get(DateTimeFieldType.monthOfYear());\n+            int year = partial.get(DateTimeFieldType.year());\n+            year += yearsToAdd;\n+            // Adjust for leap year.\n+            if (month == 2 && partial.get(DateTimeFieldType.dayOfMonth()) > 28) {\n+                int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year);\n+                values = iChronology.dayOfMonth().set(partial, fieldIndex, values, lastDayOfMonth);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            year += (month + monthsToAdd - 1) / 12;\n+            month = ((month + monthsToAdd) % 12 + 12) % 12 + 1;\n+            int day = Math.min(partial.get(DateTimeFieldType.dayOfMonth()), iChronology.dayOfMonth().getMaximumValue(year, month));\n+            values = iChronology.monthOfYear().set(partial, fieldIndex, values, month);\n+            values = iChronology.year().set(partial, fieldIndex, values, year);\n+            values = iChronology.dayOfMonth().set(partial, fieldIndex, values, day);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}