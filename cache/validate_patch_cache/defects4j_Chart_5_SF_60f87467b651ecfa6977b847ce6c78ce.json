{
    "patch": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // if the series is sorted, the negative index is a result from\n            // Collections.binarySearch() and tells us where to insert the\n            // new item...otherwise we have to search for the insertion\n            // position manually...\n            int itemCount = getItemCount();\n            if (this.autoSort) {\n                if (itemCount > 0) {\n                    // look for first item with higher x-value...\n                    int i = 0;\n                    while (i < itemCount && x.doubleValue() > ((XYDataItem) this.data.get(i)).getXValue().doubleValue()) {\n                        i++;\n                    }\n\n                    if (i < itemCount) {\n                        // replace item with duplicate X value...\n                        if (x.equals(((XYDataItem) this.data.get(i)).getX())) {\n                            XYDataItem existing = (XYDataItem) this.data.get(i);\n                            try {\n                                overwritten = (XYDataItem) existing.clone();\n                            }\n                            catch (CloneNotSupportedException e) {\n                                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                            }\n                            existing.setY(y);\n                        }\n                        else {\n                            this.data.add(i, new XYDataItem(x, y));\n                        }\n                    }\n                    else {\n                        // add to end...\n                        this.data.add(new XYDataItem(x, y));\n                    }\n                }\n                else {\n                    this.data.add(new XYDataItem(x, y));\n                }\n            }\n            else {\n                int itemIndex = indexOf(x);\n                if (itemIndex >= 0) {\n                    // duplicate X value, replace item...\n                    XYDataItem existing = (XYDataItem) this.data.get(itemIndex);\n                    try {\n                        overwritten = (XYDataItem) existing.clone();\n                    }\n                    catch (CloneNotSupportedException e) {\n                        throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                    }\n                    existing.setY(y);\n                }\n                else {\n                    this.data.add(new XYDataItem(x, y));\n                    // check if this addition will exceed the maximum item count...\n                    if (getItemCount() > this.maximumItemCount) {\n                        this.data.remove(0);\n                    }\n                }\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..a64ff84 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,88 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+    public XYDataItem addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+\n+        // if we get to here, we know that duplicate X values are not permitted\n+        XYDataItem overwritten = null;\n+        int index = indexOf(x);\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            try {\n+                overwritten = (XYDataItem) existing.clone();\n+            }\n+            catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+            existing.setY(y);\n+        }\n+        else {\n+            // if the series is sorted, the negative index is a result from\n+            // Collections.binarySearch() and tells us where to insert the\n+            // new item...otherwise we have to search for the insertion\n+            // position manually...\n+            int itemCount = getItemCount();\n+            if (this.autoSort) {\n+                if (itemCount > 0) {\n+                    // look for first item with higher x-value...\n+                    int i = 0;\n+                    while (i < itemCount && x.doubleValue() > ((XYDataItem) this.data.get(i)).getXValue().doubleValue()) {\n+                        i++;\n+                    }\n+\n+                    if (i < itemCount) {\n+                        // replace item with duplicate X value...\n+                        if (x.equals(((XYDataItem) this.data.get(i)).getX())) {\n+                            XYDataItem existing = (XYDataItem) this.data.get(i);\n+                            try {\n+                                overwritten = (XYDataItem) existing.clone();\n+                            }\n+                            catch (CloneNotSupportedException e) {\n+                                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                            }\n+                            existing.setY(y);\n+                        }\n+                        else {\n+                            this.data.add(i, new XYDataItem(x, y));\n+                        }\n+                    }\n+                    else {\n+                        // add to end...\n+                        this.data.add(new XYDataItem(x, y));\n+                    }\n+                }\n+                else {\n+                    this.data.add(new XYDataItem(x, y));\n+                }\n+            }\n+            else {\n+                int itemIndex = indexOf(x);\n+                if (itemIndex >= 0) {\n+                    // duplicate X value, replace item...\n+                    XYDataItem existing = (XYDataItem) this.data.get(itemIndex);\n+                    try {\n+                        overwritten = (XYDataItem) existing.clone();\n+                    }\n+                    catch (CloneNotSupportedException e) {\n+                        throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                    }\n+                    existing.setY(y);\n+                }\n+                else {\n+                    this.data.add(new XYDataItem(x, y));\n+                    // check if this addition will exceed the maximum item count...\n+                    if (getItemCount() > this.maximumItemCount) {\n+                        this.data.remove(0);\n+                    }\n+                }\n+            }\n+        }\n+        fireSeriesChanged();\n+        return overwritten;\n+    }\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: double cannot be dereferenced",
    "test_result": "ERROR"
}