{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (objType.isPropertyTypeDeclared(prop)) {\n            JSType declaredPropType = objType.getPropertyType(prop);\n            if (declaredPropType != null && !declaredPropType.isUnknownType()) {\n              propType = declaredPropType.getLeastSupertype(propType);\n            }\n          }\n\n          JSType typeToInfer = propType;\n          if (objType != null && !objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..1f711d1e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,19 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          if (objType.isPropertyTypeDeclared(prop)) {\n+            JSType declaredPropType = objType.getPropertyType(prop);\n+            if (declaredPropType != null && !declaredPropType.isUnknownType()) {\n+              propType = declaredPropType.getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n+\n+          JSType typeToInfer = propType;\n+          if (objType != null && !objType.hasProperty(prop)) {\n+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          }\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}