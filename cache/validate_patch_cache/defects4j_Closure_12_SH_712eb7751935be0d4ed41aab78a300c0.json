{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    if (cfgNode.getCatchBlocks() != null && !cfgNode.getCatchBlocks().isEmpty()) {\n      return true;\n    }\n    for (Node node : cfgNode.getDominators()) {\n      if (hasExceptionHandler(node)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..f7be2740 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,17 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    if (cfgNode.getCatchBlocks() != null && !cfgNode.getCatchBlocks().isEmpty()) {\n+      return true;\n+    }\n+    for (Node node : cfgNode.getDominators()) {\n+      if (hasExceptionHandler(node)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}