{
    "patch": "        if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n          return false;\n        }\n        if (block.isFunction) {\n          return true;\n        } else if (block.isLoop) {\n          // Only allow a single assignment to a variable in an inlined loop.\n          if (!ref.getBasicBlock().equals(block)) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..05ca9438 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n+          return false;\n+        }\n+        if (block.isFunction) {\n+          return true;\n+        } else if (block.isLoop) {\n+          // Only allow a single assignment to a variable in an inlined loop.\n+          if (!ref.getBasicBlock().equals(block)) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}