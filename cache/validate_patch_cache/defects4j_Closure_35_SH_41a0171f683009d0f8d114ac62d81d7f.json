{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType inferredType = null;\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            if (!objType.hasProperty(prop)) {\n              inferredType =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            } else {\n              inferredType = objType.getPropertyType(prop).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, inferredType, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..12208881 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,16 +1123,17 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n+          JSType inferredType = null;\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n+              inferredType =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            } else {\n+              inferredType = objType.getPropertyType(prop).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            objType.defineInferredProperty(prop, inferredType, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}