{
    "patch": "            Object[] rawArguments = invocation.getRawArguments();\n            Object[] varArgArray = null;\n            if (isVariableArgument(invocation, indexOfVararg)) {\n                varArgArray = (Object[]) rawArguments[indexOfVararg];\n            }\n            for (int i = 0; i < matchers.size(); i++) {\n                Matcher m = matchers.get(i);\n                if (m instanceof CapturesArguments) {\n                    Object arg;\n                    if (i == indexOfVararg && isVarargMatcher(m)) {\n                        arg = varArgArray;\n                    } else {\n                        arg = invocation.getArgumentAt(i, Object.class);\n                    }\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..4a55989ff 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,23 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] rawArguments = invocation.getRawArguments();\n+            Object[] varArgArray = null;\n+            if (isVariableArgument(invocation, indexOfVararg)) {\n+                varArgArray = (Object[]) rawArguments[indexOfVararg];\n+            }\n+            for (int i = 0; i < matchers.size(); i++) {\n+                Matcher m = matchers.get(i);\n+                if (m instanceof CapturesArguments) {\n+                    Object arg;\n+                    if (i == indexOfVararg && isVarargMatcher(m)) {\n+                        arg = varArgArray;\n+                    } else {\n+                        arg = invocation.getArgumentAt(i, Object.class);\n+                    }\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ClassCastException: [Z cannot be cast to [Ljava.lang.Object;",
    "test_result": "FAIL"
}