{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof Class) {\n            registerTypeVariablesOn(bound);\n        } else {\n            // If the bound is not a class, it could be a type variable. Try to extract its class.\n            try {\n                // This will throw a MockitoException if the extraction fails.\n                Class<?> rawType = extractRawClass(bound);\n                registerTypeVariablesOn(rawType);\n            } catch (MockitoException e) {\n                // The extraction failed. Register the bound as is.\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n    Type actualType = getActualTypeArgumentFor(typeVariable);\n    if (actualType != null) {\n        if (actualType instanceof Class) {\n            registerTypeVariablesOn(actualType);\n        } else {\n            // Try to extract the class of the actual type argument.\n            try {\n                // This will throw a MockitoException if the extraction fails.\n                Class<?> rawType = extractRawClass(actualType);\n                registerTypeVariablesOn(rawType);\n            } catch (MockitoException e) {\n                // The extraction failed. Register the actual type argument as is.\n                registerTypeVariablesOn(actualType);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6d2c96a7b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,43 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof Class) {\n+            registerTypeVariablesOn(bound);\n+        } else {\n+            // If the bound is not a class, it could be a type variable. Try to extract its class.\n+            try {\n+                // This will throw a MockitoException if the extraction fails.\n+                Class<?> rawType = extractRawClass(bound);\n+                registerTypeVariablesOn(rawType);\n+            } catch (MockitoException e) {\n+                // The extraction failed. Register the bound as is.\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+    Type actualType = getActualTypeArgumentFor(typeVariable);\n+    if (actualType != null) {\n+        if (actualType instanceof Class) {\n+            registerTypeVariablesOn(actualType);\n+        } else {\n+            // Try to extract the class of the actual type argument.\n+            try {\n+                // This will throw a MockitoException if the extraction fails.\n+                Class<?> rawType = extractRawClass(actualType);\n+                registerTypeVariablesOn(rawType);\n+            } catch (MockitoException e) {\n+                // The extraction failed. Register the actual type argument as is.\n+                registerTypeVariablesOn(actualType);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}