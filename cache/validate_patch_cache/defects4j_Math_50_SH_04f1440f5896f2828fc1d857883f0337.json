{
    "patch": "if (x == x1) {\n    // The line search has failed to find a better solution. We update the bounds to keep searching.\n    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n    if (inverted) {\n        // Previous root estimate exceeded bound\n        if (getMin() == x0) {\n            throw new TooManyEvaluationsException();\n        }\n        double newx0 = FastMath.max(x0 - delta, getMin());\n        // If new x0 equals previous x0 after the delta subtraction, then don't update bounds further\n        if (newx0 == x0) {\n            x0 = newx0;\n            f0 = computeObjectiveValue(x0);\n        } else {\n            x0 = newx0;\n            f0 = computeObjectiveValue(x0);\n            if (f1 * f0 > 0) {\n                x1 = getMax();\n            }\n        }\n    } else {\n        // Previous root estimate exceeded bound\n        if (getMax() == x1) {\n            throw new TooManyEvaluationsException();\n        }\n        double newx1 = FastMath.min(x1 + delta, getMax());\n        // If new x1 equals previous x1 after the delta addition, then don't update bounds further\n        if (newx1 == x1) {\n            x1 = newx1;\n            f1 = computeObjectiveValue(x1);\n        } else {\n            x1 = newx1;\n            f1 = computeObjectiveValue(x1);\n            if (f0 * f1 > 0) {\n                x0 = getMin();\n            }\n        }\n\n    }\n} else {\n    // The line search has found a better solution. We update the bounds and the function values.\n    if (f1 * fx < 0) {\n        x0 = x1;\n        f0 = f1;\n        inverted = !inverted;\n    } else {\n        switch (method) {\n        case ILLINOIS:\n            f0 *= 0.5;\n            break;\n        case PEGASUS:\n            f0 *= f1 / (f1 + fx);\n            break;\n        case REGULA_FALSI:\n            break;\n        default:\n            throw new MathInternalError();\n        }\n    }\n    x1 = x;\n    f1 = fx;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..7d7f7b1da 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,68 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (x == x1) {\n+    // The line search has failed to find a better solution. We update the bounds to keep searching.\n+    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+    if (inverted) {\n+        // Previous root estimate exceeded bound\n+        if (getMin() == x0) {\n+            throw new TooManyEvaluationsException();\n+        }\n+        double newx0 = FastMath.max(x0 - delta, getMin());\n+        // If new x0 equals previous x0 after the delta subtraction, then don't update bounds further\n+        if (newx0 == x0) {\n+            x0 = newx0;\n+            f0 = computeObjectiveValue(x0);\n+        } else {\n+            x0 = newx0;\n+            f0 = computeObjectiveValue(x0);\n+            if (f1 * f0 > 0) {\n+                x1 = getMax();\n+            }\n+        }\n+    } else {\n+        // Previous root estimate exceeded bound\n+        if (getMax() == x1) {\n+            throw new TooManyEvaluationsException();\n+        }\n+        double newx1 = FastMath.min(x1 + delta, getMax());\n+        // If new x1 equals previous x1 after the delta addition, then don't update bounds further\n+        if (newx1 == x1) {\n+            x1 = newx1;\n+            f1 = computeObjectiveValue(x1);\n+        } else {\n+            x1 = newx1;\n+            f1 = computeObjectiveValue(x1);\n+            if (f0 * f1 > 0) {\n+                x0 = getMin();\n+            }\n+        }\n+\n+    }\n+} else {\n+    // The line search has found a better solution. We update the bounds and the function values.\n+    if (f1 * fx < 0) {\n+        x0 = x1;\n+        f0 = f1;\n+        inverted = !inverted;\n+    } else {\n+        switch (method) {\n+        case ILLINOIS:\n+            f0 *= 0.5;\n+            break;\n+        case PEGASUS:\n+            f0 *= f1 / (f1 + fx);\n+            break;\n+        case REGULA_FALSI:\n+            break;\n+        default:\n+            throw new MathInternalError();\n+        }\n+    }\n+    x1 = x;\n+    f1 = fx;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}