{
    "patch": "  private static final DiagnosticType REASSIGN_FUNCTION_TYPE =\n      DiagnosticType.warning(\n          \"JSC_REASSIGN_FUNCTION_TYPE\",\n          \"Cannot reassign the type {0}.\",\n          \"assignment to a function type\");\n\n  // ...\n\n  private static void checkReassign(JsNode n, String nodeName) {\n    Node parent = n.getParent();\n    Node gramps = parent.getParent();\n    if (parent.isGetProp()\n        && n == parent.getLastChild()\n        && gramps.isExprResult()\n        && !NodeUtil.mayHaveSideEffects(\n            parent.getFirstChild(), NodeUtil.SideEffectFlags.ANY_SIDE_EFFECT)) {\n      // Within an expression statement, the RHS is always executed first. Therefore, we only warn\n      // if the LHS can be an L-value (i.e. it's not an array literal, a function application, etc).\n      //   e.g. Here, there will be a warning because x() is a side-effect free call.\n      //     var x=0; x() = 1;\n      // But this will not warn, because Array literals can never receive RHS expressions.\n      //     [] = [0];\n      if (parent.getFirstChild().isName()) {\n        warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n      }\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      if (n.getJSType().isFunctionType()) {\n        warnings.add(JSError.make(n, REASSIGN_FUNCTION_TYPE, nodeName));\n      } else {\n        return;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}