{
    "patch": "try {\n    int year = iDefaultYear;\n    for (int i = 0; i < count; i++) {\n        DurationField years = DurationFieldType.years().getField(iChrono);\n        DateTimeField first = savedFields[0].iField;\n        if(compareReverse(first.getDurationField(), years) <= 0 && i > 0) {\n            break;\n        }\n        millis = savedFields[i].set(millis, resetFields);\n        if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n            year = savedFields[i].iValue;\n        }\n    }\n    if (year != iDefaultYear) {\n        millis = iChrono.year().set(millis, year);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n        throw e;\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ca156297 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int year = iDefaultYear;\n+    for (int i = 0; i < count; i++) {\n+        DurationField years = DurationFieldType.years().getField(iChrono);\n+        DateTimeField first = savedFields[0].iField;\n+        if(compareReverse(first.getDurationField(), years) <= 0 && i > 0) {\n+            break;\n+        }\n+        millis = savedFields[i].set(millis, resetFields);\n+        if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+            year = savedFields[i].iValue;\n+        }\n+    }\n+    if (year != iDefaultYear) {\n+        millis = iChrono.year().set(millis, year);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+        throw e;\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-06-30T00:00:00.000+01:00> but was:<2010-01-01T00:00:00.000Z>",
    "test_result": "FAIL"
}