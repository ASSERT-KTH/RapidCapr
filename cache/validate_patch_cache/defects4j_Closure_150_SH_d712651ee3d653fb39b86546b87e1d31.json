{
    "patch": "      if (n.getType() == Token.TRY) {\n        List<Node> catchBlocks = NodeUtil.getTryCatchBlocks(n);\n        for (Node catchBlock : catchBlocks) {\n          if (!NodeUtil.isControlStructure(catchBlock.getParent())) {\n            return true;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..96217eb2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+      if (n.getType() == Token.TRY) {\n+        List<Node> catchBlocks = NodeUtil.getTryCatchBlocks(n);\n+        for (Node catchBlock : catchBlocks) {\n+          if (!NodeUtil.isControlStructure(catchBlock.getParent())) {\n+            return true;\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}