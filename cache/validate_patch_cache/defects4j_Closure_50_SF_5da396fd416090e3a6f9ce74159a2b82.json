{
    "patch": "    Node getPropTarget = n.getFirstChild();\n    Node getPropProperty = getPropTarget.getNext();\n\n    if (getPropTarget == null || getPropProperty == null || !getPropProperty.getString().equals(\"join\")) {\n      return n;\n    }\n\n    if (!NodeUtil.isImmutableValue(getPropTarget.getFirstChild())) {\n      return n;\n    }\n\n    Node[] elements = getPropTarget.getFirstChild().toArray();\n\n    // String.join(separator, \"\") === \"\"; String.join(\"\", \"\") === \"\"\n    boolean isEmptyStringJoin =\n        elements.length == 1 && NodeUtil.getArrayElementStringValue(elements[0]).isEmpty();\n\n    String separator = isEmptyStringJoin ? \"\" : (getPropTarget.getChildCount() > 1) ?\n        NodeUtil.getStringValue(getPropTarget.getLastChild()) : \",\";\n\n    int foldedSize = 0;\n\n    Node folded;\n\n    if (!isEmptyStringJoin) {\n      List<String> strings = new ArrayList<>();\n      boolean mergeStrings = true;\n\n      for (Node element : elements) {\n        if (NodeUtil.isImmutableValue(element) || element.getType() == Token.EMPTY) {\n          if (NodeUtil.getArrayElementStringValue(element).isEmpty()) {\n            continue;\n          } else {\n            strings.add(NodeUtil.getArrayElementStringValue(element));\n          }\n        } else {\n          // If we encounter a non-immutable element, we cannot merge strings.\n          mergeStrings = false;\n          break;\n        }\n      }\n\n      if (mergeStrings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n          sb.append(s).append(separator);\n        }\n        sb.delete(sb.length() - separator.length(), sb.length());\n        folded = Node.newString(sb.toString()).srcref(getPropTarget);\n        foldedSize = sb.length();\n      } else {\n        Node arrLit = new Node(Token.ARRAYLIT).srcref(getPropTarget);\n        for (Node element : elements) {\n          if (element.getType() == Token.EMPTY) {\n            continue;\n          }\n          Node toAdd = element.cloneNode();\n          arrLit.addChildToBack(toAdd);\n          foldedSize += InlineCostEstimator.getCost(toAdd);\n          if (toAdd.getType() == Token.STRING) {\n            foldedSize += NodeUtil.getArrayElementStringValue(toAdd).length();\n          }\n        }\n        folded = new Node(Token.BLOCK, arrLit).srcref(getPropTarget);\n        foldedSize += arrLit.getChildCount(); // count the commas\n      }\n\n    } else {\n      folded = Node.newString(\"\").srcref(getPropTarget);\n      foldedSize = 0;\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > 0) {\n      if (foldedSize >= originalSize) {\n        return n;\n      }\n      // replace the call with the folded expression\n      n.getParent().replaceChild(n, folded);\n      reportCodeChange();\n    } else {\n      // replace the call with the empty string literal\n      Node emptyString = Node.newString(\"\").srcref(n);\n      n.getParent().replaceChild(n, emptyString);\n      reportCodeChange();\n    }\n\n    return folded;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..e13e29e0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,94 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+    Node getPropTarget = n.getFirstChild();\n+    Node getPropProperty = getPropTarget.getNext();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    if (getPropTarget == null || getPropProperty == null || !getPropProperty.getString().equals(\"join\")) {\n       return n;\n     }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (!NodeUtil.isImmutableValue(getPropTarget.getFirstChild())) {\n+      return n;\n     }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+    Node[] elements = getPropTarget.getFirstChild().toArray();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+    // String.join(separator, \"\") === \"\"; String.join(\"\", \"\") === \"\"\n+    boolean isEmptyStringJoin =\n+        elements.length == 1 && NodeUtil.getArrayElementStringValue(elements[0]).isEmpty();\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String separator = isEmptyStringJoin ? \"\" : (getPropTarget.getChildCount() > 1) ?\n+        NodeUtil.getStringValue(getPropTarget.getLastChild()) : \",\";\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n     int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+\n+    Node folded;\n+\n+    if (!isEmptyStringJoin) {\n+      List<String> strings = new ArrayList<>();\n+      boolean mergeStrings = true;\n+\n+      for (Node element : elements) {\n+        if (NodeUtil.isImmutableValue(element) || element.getType() == Token.EMPTY) {\n+          if (NodeUtil.getArrayElementStringValue(element).isEmpty()) {\n+            continue;\n+          } else {\n+            strings.add(NodeUtil.getArrayElementStringValue(element));\n+          }\n         } else {\n-          sb.append(joinString);\n+          // If we encounter a non-immutable element, we cannot merge strings.\n+          mergeStrings = false;\n+          break;\n+        }\n+      }\n+\n+      if (mergeStrings) {\n+        StringBuilder sb = new StringBuilder();\n+        for (String s : strings) {\n+          sb.append(s).append(separator);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        sb.delete(sb.length() - separator.length(), sb.length());\n+        folded = Node.newString(sb.toString()).srcref(getPropTarget);\n+        foldedSize = sb.length();\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        Node arrLit = new Node(Token.ARRAYLIT).srcref(getPropTarget);\n+        for (Node element : elements) {\n+          if (element.getType() == Token.EMPTY) {\n+            continue;\n+          }\n+          Node toAdd = element.cloneNode();\n+          arrLit.addChildToBack(toAdd);\n+          foldedSize += InlineCostEstimator.getCost(toAdd);\n+          if (toAdd.getType() == Token.STRING) {\n+            foldedSize += NodeUtil.getArrayElementStringValue(toAdd).length();\n+          }\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        folded = new Node(Token.BLOCK, arrLit).srcref(getPropTarget);\n+        foldedSize += arrLit.getChildCount(); // count the commas\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    } else {\n+      folded = Node.newString(\"\").srcref(getPropTarget);\n+      foldedSize = 0;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (foldedSize > 0) {\n+      if (foldedSize >= originalSize) {\n+        return n;\n+      }\n+      // replace the call with the folded expression\n+      n.getParent().replaceChild(n, folded);\n+      reportCodeChange();\n+    } else {\n+      // replace the call with the empty string literal\n+      Node emptyString = Node.newString(\"\").srcref(n);\n+      n.getParent().replaceChild(n, emptyString);\n+      reportCodeChange();\n     }\n \n-    return n;\n-  }\n+    return folded;\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +620,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}