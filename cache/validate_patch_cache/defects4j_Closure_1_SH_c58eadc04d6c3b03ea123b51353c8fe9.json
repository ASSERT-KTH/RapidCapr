{
    "patch": "    List<Node> args = NodeUtil.getFunctionParameters(function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    int argSize = args.size();\n    if (argSize == 0) {\n        return;\n    }\n\n    int lastReferencedArg = -1;\n    for (int i = argSize - 1; i >= 0; i--) {\n      String argName = args.get(i).getString();\n      Var var = fnScope.getVar(argName);\n      if (referenced.contains(var)) {\n        lastReferencedArg = i;\n        break;\n      }\n    }\n    for (int i = argSize - 1; i > lastReferencedArg; i--) {\n      Node actualArg = args.get(i);\n      argList.removeChild(actualArg);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..df7c541e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> args = NodeUtil.getFunctionParameters(function);\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    int argSize = args.size();\n+    if (argSize == 0) {\n+        return;\n+    }\n+\n+    int lastReferencedArg = -1;\n+    for (int i = argSize - 1; i >= 0; i--) {\n+      String argName = args.get(i).getString();\n+      Var var = fnScope.getVar(argName);\n+      if (referenced.contains(var)) {\n+        lastReferencedArg = i;\n+        break;\n+      }\n+    }\n+    for (int i = argSize - 1; i > lastReferencedArg; i--) {\n+      Node actualArg = args.get(i);\n+      argList.removeChild(actualArg);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}