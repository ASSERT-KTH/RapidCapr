{
    "patch": "MockHandler<T> oldMockHandler = getMockHandler(mock);\n\nMockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler.getMockSettings());\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\nif (mock instanceof Factory) {\n    ((Factory) mock).setCallback(0, newFilter);\n} else {\n    throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..69760cc26 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> oldMockHandler = getMockHandler(mock);\n+\n+MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler.getMockSettings());\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+if (mock instanceof Factory) {\n+    ((Factory) mock).setCallback(0, newFilter);\n+} else {\n+    throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}