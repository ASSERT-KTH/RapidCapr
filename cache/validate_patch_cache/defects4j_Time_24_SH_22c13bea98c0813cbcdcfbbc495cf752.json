{
    "patch": "            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                Chronology chrono = iChrono;\n                int errorValue = e.getIllegalValue();\n                String errorValueName = e.getFieldName();\n                DateTimeField errorField = e.getDateTimeField();\n                int errorValueLen = (errorValue < 0 ? 2 : 1);\n                StringBuilder errorBuf = new StringBuilder(85)\n                        .append(\"Cannot parse \\\"\")\n                        .append(text)\n                        .append(\"\\\": \")\n                        .append(errorField.getName())\n                        .append(\" \").append(errorValue)\n                        .append(\",\")\n                        .append(errorValueName)\n                        .append(\", valid values: \");\n                if (errorField instanceof ImpreciseDateTimeField) {\n                    ImpreciseDateTimeField ifield = (ImpreciseDateTimeField) errorField;\n                    DurationField rangeField = ifield.getDurationField();\n                    long duration = rangeField.getUnitMillis();\n                    RangeDurationField rangeDurationField =\n                            new RangeDurationField(\n                                    ifield.getRangeDurationField(),\n                                    duration >= 0 ? duration * ifield.getRangeDuration() : Long.MAX_VALUE,\n                                    ifield.getMinimumValue(),\n                                    ifield.getMaximumValue());\n                    if (rangeDurationField.getMinimumValue() <= errorValue &&\n                            errorValue <= rangeDurationField.getMaximumValue()) {\n                        errorBuf\n                                .append(\"[\")\n                                .append(ifield.getMinimumValueOverall())\n                                .append(\",\")\n                                .append(ifield.getMaximumValueOverall())\n                                .append(\"]\");\n                    } else {\n                        errorBuf.append(rangeDurationField);\n                    }\n                } else {\n                    errorBuf.append('[').append(errorField.getMinimumValue()).append(',')\n                            .append(errorField.getMaximumValue()).append(']');\n                }\n                throw new IllegalArgumentException(errorBuf.toString(), e);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f886df1f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,52 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                Chronology chrono = iChrono;\n+                int errorValue = e.getIllegalValue();\n+                String errorValueName = e.getFieldName();\n+                DateTimeField errorField = e.getDateTimeField();\n+                int errorValueLen = (errorValue < 0 ? 2 : 1);\n+                StringBuilder errorBuf = new StringBuilder(85)\n+                        .append(\"Cannot parse \\\"\")\n+                        .append(text)\n+                        .append(\"\\\": \")\n+                        .append(errorField.getName())\n+                        .append(\" \").append(errorValue)\n+                        .append(\",\")\n+                        .append(errorValueName)\n+                        .append(\", valid values: \");\n+                if (errorField instanceof ImpreciseDateTimeField) {\n+                    ImpreciseDateTimeField ifield = (ImpreciseDateTimeField) errorField;\n+                    DurationField rangeField = ifield.getDurationField();\n+                    long duration = rangeField.getUnitMillis();\n+                    RangeDurationField rangeDurationField =\n+                            new RangeDurationField(\n+                                    ifield.getRangeDurationField(),\n+                                    duration >= 0 ? duration * ifield.getRangeDuration() : Long.MAX_VALUE,\n+                                    ifield.getMinimumValue(),\n+                                    ifield.getMaximumValue());\n+                    if (rangeDurationField.getMinimumValue() <= errorValue &&\n+                            errorValue <= rangeDurationField.getMaximumValue()) {\n+                        errorBuf\n+                                .append(\"[\")\n+                                .append(ifield.getMinimumValueOverall())\n+                                .append(\",\")\n+                                .append(ifield.getMaximumValueOverall())\n+                                .append(\"]\");\n+                    } else {\n+                        errorBuf.append(rangeDurationField);\n+                    }\n+                } else {\n+                    errorBuf.append('[').append(errorField.getMinimumValue()).append(',')\n+                            .append(errorField.getMaximumValue()).append(']');\n+                }\n+                throw new IllegalArgumentException(errorBuf.toString(), e);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}