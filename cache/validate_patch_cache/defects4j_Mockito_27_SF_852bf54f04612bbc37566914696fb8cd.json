{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        throw new IllegalArgumentException(\"Mock object cannot be null\");\n    }\n    try {\n        Class<?> mockClass = mock.getClass();\n        Field field = null;\n        while (field == null && mockClass != Object.class) {\n            try {\n                field = mockClass.getDeclaredField(\"CGLIB$CALLBACK_0\");\n            } catch (NoSuchFieldException e) {\n                mockClass = mockClass.getSuperclass();\n            }\n        }\n        if (field != null) {\n            field.setAccessible(true);\n            field.set(mock, null);\n        } else {\n            throw new IllegalArgumentException(\"Mock object does not have a CGLIB proxy\");\n        }\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Failed to reset mock\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e92035067 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        throw new IllegalArgumentException(\"Mock object cannot be null\");\n+    }\n+    try {\n+        Class<?> mockClass = mock.getClass();\n+        Field field = null;\n+        while (field == null && mockClass != Object.class) {\n+            try {\n+                field = mockClass.getDeclaredField(\"CGLIB$CALLBACK_0\");\n+            } catch (NoSuchFieldException e) {\n+                mockClass = mockClass.getSuperclass();\n+            }\n+        }\n+        if (field != null) {\n+            field.setAccessible(true);\n+            field.set(mock, null);\n+        } else {\n+            throw new IllegalArgumentException(\"Mock object does not have a CGLIB proxy\");\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new IllegalStateException(\"Failed to reset mock\", e);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}