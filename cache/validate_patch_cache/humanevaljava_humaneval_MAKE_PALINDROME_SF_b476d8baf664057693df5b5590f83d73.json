{
    "patch": "public static String make_palindrome(String str) {\n    if (str.length() == 0)\n        return \"\";\n\n    StringBuilder sb = new StringBuilder(str);\n    int index = 0;\n    while (!is_palindrome(sb.toString())) {\n        sb.insert(index++, sb.charAt(sb.length()-1));\n    }\n  ",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\nindex 05f44d8..63ed9d5 100644\n--- a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n+++ b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n@@ -9,17 +9,14 @@ public class MAKE_PALINDROME {\n         return true;\n     }\n \n-    public static String make_palindrome(String str){\n-        if (str.length() == 0)\n-            return \"\";\n+public static String make_palindrome(String str) {\n+    if (str.length() == 0)\n+        return \"\";\n \n-        int beginning_of_suffix = 0;\n-        while (! is_palindrome(str.substring(beginning_of_suffix))){\n-            beginning_of_suffix += 1;\n-        }\n-        \n-        String result = str;\n-        result += str.substring(0, beginning_of_suffix);\n-        return result;\n+    StringBuilder sb = new StringBuilder(str);\n+    int index = 0;\n+    while (!is_palindrome(sb.toString())) {\n+        sb.insert(index++, sb.charAt(sb.length()-1));\n     }\n+  \n }",
    "result_reason": " /tmp/humaneval-MAKE_PALINDROME/src/main/java/humaneval/buggy/MAKE_PALINDROME.java:[22,2] reached end of file while parsing",
    "test_result": "ERROR"
}