{
    "patch": "private static final String UNSAFE_PROTOTYPE_PROP = \"Unsafe use of 'prototype' property\";\n\nprivate static boolean isPrototypeSafe(Node n) {\n  if (n.isGetProp() && n.getLastChild().getString().equals(\"prototype\")) {\n    if (NodeUtil.isLValue(n)) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}