{
    "patch": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] nums1 = { 1, 2, 3, 4, 5 };\n        Iterable<Integer> evenNums1 = getEvenNumbers(nums1);\n        System.out.println(isIterableEmpty(evenNums1));\n\n        int[] nums2 = { 1, 3, 5, 7 };\n        Iterable<Integer> evenNums2 = getEvenNumbers(nums2);\n        System.out.println(isIterableEmpty(evenNums2));\n    }\n\n    public static Iterable<Integer> getEvenNumbers(int[] nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n            }\n        }\n        return evenNums;\n    }\n\n    public static boolean isIterableEmpty(Iterable<?> iterable) {\n        return iterable == null || !iterable.iterator().hasNext();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..69423109c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,33 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.*;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        int[] nums1 = { 1, 2, 3, 4, 5 };\n+        Iterable<Integer> evenNums1 = getEvenNumbers(nums1);\n+        System.out.println(isIterableEmpty(evenNums1));\n+\n+        int[] nums2 = { 1, 3, 5, 7 };\n+        Iterable<Integer> evenNums2 = getEvenNumbers(nums2);\n+        System.out.println(isIterableEmpty(evenNums2));\n+    }\n+\n+    public static Iterable<Integer> getEvenNumbers(int[] nums) {\n+        List<Integer> evenNums = new ArrayList<>();\n+        for (int num : nums) {\n+            if (num % 2 == 0) {\n+                evenNums.add(num);\n+            }\n+        }\n+        return evenNums;\n+    }\n+\n+    public static boolean isIterableEmpty(Iterable<?> iterable) {\n+        return iterable == null || !iterable.iterator().hasNext();\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}