{
    "patch": "private static final int[][] fields = {\n        {Calendar.MILLISECOND},\n        {Calendar.SECOND},\n        {Calendar.MINUTE},\n        {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM\n                /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */\n        },\n        {Calendar.MONTH, Calendar.ERA, Calendar.YEAR}\n    };\n\nprivate static void modify(Calendar val, int field, boolean round) {\n\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        // ---------- Fix for LANG-59 ---------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n\n        int offset = 0;\n        int truncateIndex = -1;\n        boolean offsetSet = false;\n\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n\n                    // check if the specified field requires manual truncation\n                    // truncate this field manually if it is not the lowest granularity field\n                    if (round && (i + 1) < fields.length && fields[i + 1].length > 0) {\n                        val.clear(fields[i + 1][0]);\n                    }\n\n                    // record the index of the lowest granularity field that needs to be truncated\n                    // if it's not already recorded\n                    if (truncateIndex == -1) {\n                        truncateIndex = i;\n                    }\n\n                    // record the offset of the field to be truncated\n                    if (!offsetSet) {\n                        int min = val.getActualMinimum(fields[i][0]);\n                        int max = val.getActualMaximum(fields[i][0]);\n\n                        offset = val.get(fields[i][0]) - min;\n                        offsetSet = true;\n\n                        if (round && offset * 2 >= max - min) {\n                            offset -= max - min;\n                        }\n                    }\n\n                    if (offsetSet) {\n                        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n                    }\n\n                    // if the specified field requires manual rounding and the offset is not zero\n                    if (round && j == 0 && offset != 0 && (i + 1) < fields.length &&\n                            fields[i + 1].length > 0 && truncateIndex == i) {\n\n                        int min = val.getActualMinimum(fields[i + 1][0]);\n                        int max = val.getActualMaximum(fields[i + 1][0]);\n                        int nextVal = val.get(fields[i + 1][0]);\n                        int newVal;\n                        int fieldDiff = fields[i][0] - fields[i + 1][0];\n\n                        // add or subtract 1 from the next higher granularity field based on the offset\n                        if (offset > 0) {\n                            newVal = nextVal + 1;\n                            if (newVal > max) {\n                                newVal = min;\n                            }\n                        } else {\n                            newVal = nextVal - 1;\n                            if (newVal < min) {\n                                newVal = max;\n                            }\n                        }\n\n                        // set the next higher granularity field to the updated value\n                        val.set(fields[i + 1][0], newVal);\n\n                        // reset all the higher granularity fields\n                        for (int k = i + 2; k < fields.length; k++) {\n                            val.set(fields[k][0], val.get(fields[k][0] - fieldDiff));\n                        }\n                    }\n\n                    return;\n                }\n            }\n        }\n\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..c66f8aae 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,101 +616,102 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n+private static final int[][] fields = {\n+        {Calendar.MILLISECOND},\n+        {Calendar.SECOND},\n+        {Calendar.MINUTE},\n+        {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n+        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM\n+                /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */\n+        },\n+        {Calendar.MONTH, Calendar.ERA, Calendar.YEAR}\n+    };\n+\n+private static void modify(Calendar val, int field, boolean round) {\n+\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        \n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n+        // ---------- Fix for LANG-59 ---------------- START ---------------\n         // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n \n+        int offset = 0;\n+        int truncateIndex = -1;\n+        boolean offsetSet = false;\n \n-        // truncate milliseconds\n+        for (int i = 0; i < fields.length; i++) {\n+            for (int j = 0; j < fields[i].length; j++) {\n+                if (fields[i][j] == field) {\n \n-        // truncate seconds\n+                    // check if the specified field requires manual truncation\n+                    // truncate this field manually if it is not the lowest granularity field\n+                    if (round && (i + 1) < fields.length && fields[i + 1].length > 0) {\n+                        val.clear(fields[i + 1][0]);\n+                    }\n \n-        // truncate minutes\n+                    // record the index of the lowest granularity field that needs to be truncated\n+                    // if it's not already recorded\n+                    if (truncateIndex == -1) {\n+                        truncateIndex = i;\n+                    }\n \n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n+                    // record the offset of the field to be truncated\n+                    if (!offsetSet) {\n+                        int min = val.getActualMinimum(fields[i][0]);\n+                        int max = val.getActualMaximum(fields[i][0]);\n \n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n+                        offset = val.get(fields[i][0]) - min;\n+                        offsetSet = true;\n+\n+                        if (round && offset * 2 >= max - min) {\n+                            offset -= max - min;\n+                        }\n+                    }\n+\n+                    if (offsetSet) {\n+                        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+                    }\n+\n+                    // if the specified field requires manual rounding and the offset is not zero\n+                    if (round && j == 0 && offset != 0 && (i + 1) < fields.length &&\n+                            fields[i + 1].length > 0 && truncateIndex == i) {\n+\n+                        int min = val.getActualMinimum(fields[i + 1][0]);\n+                        int max = val.getActualMaximum(fields[i + 1][0]);\n+                        int nextVal = val.get(fields[i + 1][0]);\n+                        int newVal;\n+                        int fieldDiff = fields[i][0] - fields[i + 1][0];\n+\n+                        // add or subtract 1 from the next higher granularity field based on the offset\n+                        if (offset > 0) {\n+                            newVal = nextVal + 1;\n+                            if (newVal > max) {\n+                                newVal = min;\n                             }\n                         } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n+                            newVal = nextVal - 1;\n+                            if (newVal < min) {\n+                                newVal = max;\n+                            }\n+                        }\n+\n+                        // set the next higher granularity field to the updated value\n+                        val.set(fields[i + 1][0], newVal);\n+\n+                        // reset all the higher granularity fields\n+                        for (int k = i + 2; k < fields.length; k++) {\n+                            val.set(fields[k][0], val.get(fields[k][0] - fieldDiff));\n                         }\n                     }\n+\n                     return;\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n-    }\n+    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: variable fields is already defined in class DateUtils",
    "test_result": "ERROR"
}