{
    "patch": "      if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n          String sourceName = functionJSDocInfo.getSourceName();\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          isExtern = functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n            !functionType.isNativeObjectType() &&\n            (functionType.getReturnType().isUnknownType() ||\n             functionType.getReturnType().isVoidType() ||\n             !isExtern)) {\n          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        JSType thisType = functionType.getTypeOfThis();\n        if (thisType != null) {\n          Node parent = n.getParent();\n          if (parent == null || !parent.isGetProp() || parent.getFirstChild() != n) {\n            report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n          }\n        }        \n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n      } else {\n        ensureTyped(t, n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9e0e5fcd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (childType instanceof FunctionType) {\n+        FunctionType functionType = (FunctionType) childType;\n+\n+        boolean isExtern = false;\n+        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+        if (functionJSDocInfo != null) {\n+          String sourceName = functionJSDocInfo.getSourceName();\n+          CompilerInput functionSource = compiler.getInput(sourceName);\n+          isExtern = functionSource.isExtern();\n+        }\n+\n+        // Non-native constructors should not be called directly\n+        // unless they specify a return type and are defined\n+        // in an extern.\n+        if (functionType.isConstructor() &&\n+            !functionType.isNativeObjectType() &&\n+            (functionType.getReturnType().isUnknownType() ||\n+             functionType.getReturnType().isVoidType() ||\n+             !isExtern)) {\n+          report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        }\n+\n+        // Functions with explicit 'this' types must be called in a GETPROP\n+        // or GETELEM.\n+        JSType thisType = functionType.getTypeOfThis();\n+        if (thisType != null) {\n+          Node parent = n.getParent();\n+          if (parent == null || !parent.isGetProp() || parent.getFirstChild() != n) {\n+            report(t, n, FUNCTION_CALL_NON_GETPROP, childType.toString());\n+          }\n+        }        \n+\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n+      } else {\n+        ensureTyped(t, n);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}