{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  JSType constructorType = constructor.getJSType();\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    JSType type = null;\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else if (constructorType.isFunctionType()){\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct.isConstructor() || ct.isInterface()) {\n        type = ct.getPrototype();\n      }\n    } else if (constructorType.isInterface()) {\n      type = constructorType.getPrototype();\n    } else if (constructorType.isNoType() || constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n\n    if (type != null) {\n      n.setJSType(type);\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n        if (arg.getJSType() == null) {\n          arg.setJSType(getNativeType(UNKNOWN_TYPE).getLeastSupertype(type));\n        }\n      }\n    } else {\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n        arg.setJSType(getNativeType(UNKNOWN_TYPE));\n      }\n    }\n  } else {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n      arg.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n  }\n\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..e0c37bca 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,36 +1032,53 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n \n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n+  JSType constructorType = constructor.getJSType();\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else if (constructorType.isFunctionType()){\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct.isConstructor() || ct.isInterface()) {\n+        type = ct.getPrototype();\n+      }\n+    } else if (constructorType.isInterface()) {\n+      type = constructorType.getPrototype();\n+    } else if (constructorType.isNoType() || constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    }\n+\n+    if (type != null) {\n+      n.setJSType(type);\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+        if (arg.getJSType() == null) {\n+          arg.setJSType(getNativeType(UNKNOWN_TYPE).getLeastSupertype(type));\n         }\n       }\n+    } else {\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+        arg.setJSType(getNativeType(UNKNOWN_TYPE));\n+      }\n     }\n-    n.setJSType(type);\n+  } else {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n+      arg.setJSType(getNativeType(UNKNOWN_TYPE));\n     }\n-    return scope;\n   }\n \n+  return scope;\n+}\n+\n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}