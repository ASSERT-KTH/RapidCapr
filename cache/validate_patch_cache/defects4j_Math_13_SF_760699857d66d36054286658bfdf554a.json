{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_ROWS_COLS = 10000;\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n\n    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    int maxElements = (int)(((long)Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory())) / 8L);\n\n    if (rows * cols > maxElements) {\n        double factor = Math.sqrt((double)maxElements / (rows * cols));\n        RealMatrix scaled = MatrixUtils.createRealMatrix(rows, cols);\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                scaled.setEntry(i, j, m.getEntry(i, j) * factor);\n            }\n        }\n        m = scaled;\n    }\n\n    try {\n        EigenDecomposition dec = new EigenDecomposition(m);\n        RealMatrix v = dec.getV();\n        RealMatrix d = MatrixUtils.createRealDiagonalMatrix(getSquareRootArray(getPositiveEigenvalues(dec)));\n        RealMatrix vT = v.transpose();\n\n        return v.multiply(d).multiply(vT);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n    }\n}\n\nprivate double[] getPositiveEigenvalues(EigenDecomposition dec) {\n    final int dim = dec.getRealEigenvalues().length;\n    final double[] positiveEigenvalues = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        positiveEigenvalues[i] = Math.max(dec.getRealEigenvalue(i), 0);\n    }\n    return positiveEigenvalues;\n}\n\nprivate double[] getSquareRootArray(double[] eigenvalues) {\n    final int dim = eigenvalues.length;\n    final double[] sqrtArray = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        sqrtArray[i] = Math.sqrt(eigenvalues[i]);\n    }\n    return sqrtArray;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e0703a997 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,55 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_ROWS_COLS = 10000;\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+\n+    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n+    }\n+\n+    int maxElements = (int)(((long)Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory())) / 8L);\n+\n+    if (rows * cols > maxElements) {\n+        double factor = Math.sqrt((double)maxElements / (rows * cols));\n+        RealMatrix scaled = MatrixUtils.createRealMatrix(rows, cols);\n+        for (int i = 0; i < rows; i++) {\n+            for (int j = 0; j < cols; j++) {\n+                scaled.setEntry(i, j, m.getEntry(i, j) * factor);\n+            }\n+        }\n+        m = scaled;\n+    }\n+\n+    try {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        RealMatrix v = dec.getV();\n+        RealMatrix d = MatrixUtils.createRealDiagonalMatrix(getSquareRootArray(getPositiveEigenvalues(dec)));\n+        RealMatrix vT = v.transpose();\n+\n+        return v.multiply(d).multiply(vT);\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n+    }\n+}\n+\n+private double[] getPositiveEigenvalues(EigenDecomposition dec) {\n+    final int dim = dec.getRealEigenvalues().length;\n+    final double[] positiveEigenvalues = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        positiveEigenvalues[i] = Math.max(dec.getRealEigenvalue(i), 0);\n     }\n+    return positiveEigenvalues;\n+}\n+\n+private double[] getSquareRootArray(double[] eigenvalues) {\n+    final int dim = eigenvalues.length;\n+    final double[] sqrtArray = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        sqrtArray[i] = Math.sqrt(eigenvalues[i]);\n+    }\n+    return sqrtArray;\n+}\n }",
    "result_reason": "java.lang.RuntimeException: Matrix size exceeds maximum limit. Please use a smaller matrix.",
    "test_result": "FAIL"
}