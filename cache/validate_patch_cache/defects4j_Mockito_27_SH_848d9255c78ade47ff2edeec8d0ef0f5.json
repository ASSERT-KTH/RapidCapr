{
    "patch": "\npublic <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    \n    if (mock instanceof CGLIBMockMaker.MockAsInterface) {\n        CGLIBMockMaker.MockAsInterface mockAsInterface = (CGLIBMockMaker.MockAsInterface) mock;\n        ((Factory) mockAsInterface.getDelegator()).setCallback(0, newFilter);\n    } else if (mock instanceof CGLIBMockMaker.CGLIBMock) {\n        CGLIBMockMaker.CGLIBMock<T> cglibMock = (CGLIBMockMaker.CGLIBMock<T>) mock;\n        ((Factory) cglibMock.getProxy()).setCallback(0, newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..fc0c77e29 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    \n+    if (mock instanceof CGLIBMockMaker.MockAsInterface) {\n+        CGLIBMockMaker.MockAsInterface mockAsInterface = (CGLIBMockMaker.MockAsInterface) mock;\n+        ((Factory) mockAsInterface.getDelegator()).setCallback(0, newFilter);\n+    } else if (mock instanceof CGLIBMockMaker.CGLIBMock) {\n+        CGLIBMockMaker.CGLIBMock<T> cglibMock = (CGLIBMockMaker.CGLIBMock<T>) mock;\n+        ((Factory) cglibMock.getProxy()).setCallback(0, newFilter);\n+    }\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}