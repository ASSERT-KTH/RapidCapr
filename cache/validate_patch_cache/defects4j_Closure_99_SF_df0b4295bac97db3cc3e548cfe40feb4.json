{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN)) {\n      return false;\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it is not\n      // (1) an assignment to a property under a 'prototype' property\n      // (2) a function expression\n      \n      // Check if the assignee is a GETPROP or a NAME\n      if (lhs.getType() == Token.GETPROP || lhs.getType() == Token.NAME) {\n        \n        // Check if the object evaluate to 'this'\n        if (lhs.matchesQualifiedName(\"this\") || lhs.matchesQualifiedName(\"window.this\")) {\n          String propertyName = \"\";\n          \n          if (lhs.getType() == Token.GETPROP) {\n            propertyName = lhs.getLastChild().getString();\n          } else if (lhs.getType() == Token.NAME) {\n            propertyName = lhs.getString();\n          }\n\n          // Check if the property is a function or a prototype property\n          if (n.getType() == Token.FUNCTION ||\n              propertyName.equals(\"prototype\") ||\n              propertyName.contains(\".prototype.\")) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..0d662c77 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,60 +81,76 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() { }; // or\n+    // function a() {} // or\n+    // a.x = function() {};\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN)) {\n+      return false;\n+    }\n+  }\n+\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it is not\n+      // (1) an assignment to a property under a 'prototype' property\n+      // (2) a function expression\n       \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+      // Check if the assignee is a GETPROP or a NAME\n+      if (lhs.getType() == Token.GETPROP || lhs.getType() == Token.NAME) {\n+        \n+        // Check if the object evaluate to 'this'\n+        if (lhs.matchesQualifiedName(\"this\") || lhs.matchesQualifiedName(\"window.this\")) {\n+          String propertyName = \"\";\n+          \n+          if (lhs.getType() == Token.GETPROP) {\n+            propertyName = lhs.getLastChild().getString();\n+          } else if (lhs.getType() == Token.NAME) {\n+            propertyName = lhs.getString();\n           }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+\n+          // Check if the property is a function or a prototype property\n+          if (n.getType() == Token.FUNCTION ||\n+              propertyName.equals(\"prototype\") ||\n+              propertyName.contains(\".prototype.\")) {\n             return false;\n           }\n+        }\n       }\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}