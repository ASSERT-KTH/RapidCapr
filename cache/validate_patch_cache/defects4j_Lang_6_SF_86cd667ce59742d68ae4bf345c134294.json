{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n\n    int pos = 0;\n    int len = input.length();\n    int prevCodePoint = -1; // initialize to an invalid value\n    int chunkOffset = 0;\n    char[] chunk = null;\n    while (pos < len) {\n        if (chunk == null || chunkOffset == chunk.length) {\n            // read the next chunk\n            chunkOffset = 0;\n            chunk = Arrays.copyOfRange(input.toString().toCharArray(), pos, Math.min(pos + DEFAULT_BUFFER_SIZE, len));\n        }\n        int codePoint;\n        if (prevCodePoint != -1 && Character.isHighSurrogate((char) prevCodePoint) && chunkOffset < chunk.length && Character.isLowSurrogate(chunk[chunkOffset])) {\n            // this is an incomplete surrogate pair from the previous chunk\n            char[] c = new char[2];\n            c[0] = (char) prevCodePoint;\n            c[1] = chunk[chunkOffset];\n            codePoint = Character.toCodePoint(c[0], c[1]);\n            chunkOffset++;\n            prevCodePoint = -1;\n        } else {\n            codePoint = Character.codePointAt(chunk, chunkOffset);\n        }\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            if (Character.isHighSurrogate((char) codePoint)) {\n                int cp = codePoint;\n                int offset = chunkOffset + Character.charCount(cp);\n                for (int i = 1; pos + offset < len && i < DEFAULT_BUFFER_SIZE / 2; i++) {\n                    int nextCodePoint = Character.codePointAt(input, pos + offset);\n                    if (Character.isLowSurrogate((char) nextCodePoint) && cp == Character.toCodePoint((char) codePoint, (char) nextCodePoint)) {\n                        cp = Character.toCodePoint((char) codePoint, (char) nextCodePoint);\n                        offset += Character.charCount(nextCodePoint);\n                    } else {\n                        break;\n                    }\n                }\n                if (cp != codePoint) {\n                    out.write(String.format(\"\\\\u%04X\", cp));\n                    pos += offset;\n                    chunkOffset = offset % DEFAULT_BUFFER_SIZE;\n                    if (chunkOffset == 0 && offset < len - pos) {\n                        // the last code point in the chunk was a high surrogate, so we need to read in the next chunk\n                        chunk = Arrays.copyOfRange(input.toString().toCharArray(), pos, Math.min(pos + DEFAULT_BUFFER_SIZE, len));\n                    }\n                    continue;\n                }\n            }\n            out.write(codePoint);\n            pos += Character.charCount(codePoint);\n            chunkOffset += Character.charCount(codePoint);\n            continue;\n        }\n        prevCodePoint = -1; // reset for non-surrogate code points\n        pos += consumed;\n        chunkOffset += consumed;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..d37d0a27 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,72 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+\n+    int pos = 0;\n+    int len = input.length();\n+    int prevCodePoint = -1; // initialize to an invalid value\n+    int chunkOffset = 0;\n+    char[] chunk = null;\n+    while (pos < len) {\n+        if (chunk == null || chunkOffset == chunk.length) {\n+            // read the next chunk\n+            chunkOffset = 0;\n+            chunk = Arrays.copyOfRange(input.toString().toCharArray(), pos, Math.min(pos + DEFAULT_BUFFER_SIZE, len));\n         }\n-        if (input == null) {\n-            return;\n+        int codePoint;\n+        if (prevCodePoint != -1 && Character.isHighSurrogate((char) prevCodePoint) && chunkOffset < chunk.length && Character.isLowSurrogate(chunk[chunkOffset])) {\n+            // this is an incomplete surrogate pair from the previous chunk\n+            char[] c = new char[2];\n+            c[0] = (char) prevCodePoint;\n+            c[1] = chunk[chunkOffset];\n+            codePoint = Character.toCodePoint(c[0], c[1]);\n+            chunkOffset++;\n+            prevCodePoint = -1;\n+        } else {\n+            codePoint = Character.codePointAt(chunk, chunkOffset);\n         }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            if (Character.isHighSurrogate((char) codePoint)) {\n+                int cp = codePoint;\n+                int offset = chunkOffset + Character.charCount(cp);\n+                for (int i = 1; pos + offset < len && i < DEFAULT_BUFFER_SIZE / 2; i++) {\n+                    int nextCodePoint = Character.codePointAt(input, pos + offset);\n+                    if (Character.isLowSurrogate((char) nextCodePoint) && cp == Character.toCodePoint((char) codePoint, (char) nextCodePoint)) {\n+                        cp = Character.toCodePoint((char) codePoint, (char) nextCodePoint);\n+                        offset += Character.charCount(nextCodePoint);\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                if (cp != codePoint) {\n+                    out.write(String.format(\"\\\\u%04X\", cp));\n+                    pos += offset;\n+                    chunkOffset = offset % DEFAULT_BUFFER_SIZE;\n+                    if (chunkOffset == 0 && offset < len - pos) {\n+                        // the last code point in the chunk was a high surrogate, so we need to read in the next chunk\n+                        chunk = Arrays.copyOfRange(input.toString().toCharArray(), pos, Math.min(pos + DEFAULT_BUFFER_SIZE, len));\n+                    }\n+                    continue;\n+                }\n             }\n+            out.write(codePoint);\n+            pos += Character.charCount(codePoint);\n+            chunkOffset += Character.charCount(codePoint);\n+            continue;\n         }\n+        prevCodePoint = -1; // reset for non-surrogate code points\n+        pos += consumed;\n+        chunkOffset += consumed;\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}