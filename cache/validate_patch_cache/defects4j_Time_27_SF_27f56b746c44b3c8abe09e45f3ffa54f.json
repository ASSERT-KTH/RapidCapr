{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    // check if formatter is not initialized\n    boolean isFormatterInitialized = false;\n\n    Object[] comp = createComposite(elementPairs);\n    PeriodPrinter printer = (PeriodPrinter) comp[0];\n    PeriodParser parser = (PeriodParser) comp[1];\n\n    if (notPrinter) {\n        printer = null;\n    } else if (printer == null) {\n        int i = 0;\n        boolean hasSeparator = false;\n        while (i < elementPairs.size()) {\n            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n            if (tempComp[0] != null) {\n                printer = (PeriodPrinter) tempComp[0];\n                isFormatterInitialized = true;\n                break;\n            }\n            if (i + tempComp.length == elementPairs.size() && tempComp[1] == null) {\n                throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n            }\n            if (tempComp[0] instanceof Composite) {\n                hasSeparator = true;\n            } else if (hasSeparator && !isFormatterInitialized && tempComp[1] != null) {\n                printer = tempComp[1];\n                break;\n            }\n            i += tempComp.length;\n        }\n    }\n\n    if (notParser) {\n        parser = null;\n    } else if (parser == null) {\n        int i = 0;\n        boolean hasSeparator = false;\n        while (i < elementPairs.size()) {\n            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n            if (tempComp[1] != null) {\n                parser = (PeriodParser) tempComp[1];\n                isFormatterInitialized = true;\n                break;\n            }\n            if (i + tempComp.length == elementPairs.size() && tempComp[0] == null) {\n                throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n            }\n            if (tempComp[0] instanceof Composite) {\n                hasSeparator = true;\n            } else if (hasSeparator && !isFormatterInitialized && tempComp[0] != null) {\n                parser = tempComp[0];\n                break;\n            }\n            i += tempComp.length;\n        }\n    }\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..3bd34c7a 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,70 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    // check if formatter is not initialized\n+    boolean isFormatterInitialized = false;\n+\n+    Object[] comp = createComposite(elementPairs);\n+    PeriodPrinter printer = (PeriodPrinter) comp[0];\n+    PeriodParser parser = (PeriodParser) comp[1];\n+\n+    if (notPrinter) {\n+        printer = null;\n+    } else if (printer == null) {\n+        int i = 0;\n+        boolean hasSeparator = false;\n+        while (i < elementPairs.size()) {\n+            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n+            if (tempComp[0] != null) {\n+                printer = (PeriodPrinter) tempComp[0];\n+                isFormatterInitialized = true;\n+                break;\n+            }\n+            if (i + tempComp.length == elementPairs.size() && tempComp[1] == null) {\n+                throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n+            }\n+            if (tempComp[0] instanceof Composite) {\n+                hasSeparator = true;\n+            } else if (hasSeparator && !isFormatterInitialized && tempComp[1] != null) {\n+                printer = tempComp[1];\n+                break;\n+            }\n+            i += tempComp.length;\n         }\n     }\n \n+    if (notParser) {\n+        parser = null;\n+    } else if (parser == null) {\n+        int i = 0;\n+        boolean hasSeparator = false;\n+        while (i < elementPairs.size()) {\n+            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n+            if (tempComp[1] != null) {\n+                parser = (PeriodParser) tempComp[1];\n+                isFormatterInitialized = true;\n+                break;\n+            }\n+            if (i + tempComp.length == elementPairs.size() && tempComp[0] == null) {\n+                throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n+            }\n+            if (tempComp[0] instanceof Composite) {\n+                hasSeparator = true;\n+            } else if (hasSeparator && !isFormatterInitialized && tempComp[0] != null) {\n+                parser = tempComp[0];\n+                break;\n+            }\n+            i += tempComp.length;\n+        }\n+    }\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}