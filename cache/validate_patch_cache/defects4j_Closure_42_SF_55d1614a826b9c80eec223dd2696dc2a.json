{
    "patch": "public class IRFactory extends SafeEmitter {\n\n    // ...\n\n    @Override\n    Node processBlock(Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n        Node node = newNode(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            Node labelName = transform(statementNode.getBreakLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\n                    \"Catch clauses are not supported\",\n                    sourceName,\n                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n        return newNode(\n                Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            // Change the NAME to LABEL_NAME\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n        return newNode(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n        return newNode(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n        Node node = newNode(Token.EMPTY);\n        return node;\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n        AstNode expr = statementNode.getExpression();\n        Node node = null;\n        if (isDirective(expr)) {\n            node = newNode(Token.EXPR_RESULT, transform(expr.getFirstChild()));\n        } else {\n            node = newNode(Token.EXPR_RESULT, transform(expr));\n        }\n        return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n        Node varNode = null;\n        AstNode iterVar = loopNode.getIterator();\n        if (iterVar instanceof VariableDeclaration) {\n            varNode = transform(iterVar);\n        } else if (iterVar != null) {\n            varNode = newNode(Token.VAR, transform(iterVar));\n        }\n\n        return newNode(\n                Token.FOR,\n                varNode,\n                transform(loopNode.getIteratedObject()),\n                transformBlock(loopNode.getBody())\n        );\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n        Node initNode = transform(loopNode.getInitializer());\n        Node testNode;\n        if (loopNode.getCondition() != null) {\n            testNode = transform(loopNode.getCondition());\n        } else {\n            testNode = newNode(Token.TRUE);\n        }\n        Node incrNode = transform(loopNode.getIncrement());\n        return newNode(\n                Token.FOR,\n                initNode,\n                testNode,\n                incrNode,\n                transformBlock(loopNode.getBody())\n        );\n    }\n\n    // ...\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..bd82e780 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,136 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory extends SafeEmitter {\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+    // ...\n \n     @Override\n     Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+        return processGeneric(blockNode);\n     }\n \n     @Override\n     Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.BREAK);\n+        if (statementNode.getBreakLabel() != null) {\n+            Node labelName = transform(statementNode.getBreakLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = newNode(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            errorReporter.error(\n+                    \"Catch clauses are not supported\",\n+                    sourceName,\n+                    clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        }\n+        node.addChildToBack(transformBlock(clauseNode.getBody()));\n+        return node;\n     }\n \n     @Override\n     Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+        return newNode(\n+                Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n     }\n \n     @Override\n     Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            // Change the NAME to LABEL_NAME\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+        return newNode(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n     }\n \n     @Override\n     Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+        return newNode(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n     @Override\n     Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+        Node node = newNode(Token.EMPTY);\n+        return node;\n     }\n \n     @Override\n     Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+        AstNode expr = statementNode.getExpression();\n+        Node node = null;\n+        if (isDirective(expr)) {\n+            node = newNode(Token.EXPR_RESULT, transform(expr.getFirstChild()));\n+        } else {\n+            node = newNode(Token.EXPR_RESULT, transform(expr));\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n+        Node varNode = null;\n+        AstNode iterVar = loopNode.getIterator();\n+        if (iterVar instanceof VariableDeclaration) {\n+            varNode = transform(iterVar);\n+        } else if (iterVar != null) {\n+            varNode = newNode(Token.VAR, transform(iterVar));\n+        }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+        return newNode(\n+                Token.FOR,\n+                varNode,\n+                transform(loopNode.getIteratedObject()),\n+                transformBlock(loopNode.getBody())\n+        );\n     }\n \n+    @Override\n+    Node processForLoop(ForLoop loopNode) {\n+        Node initNode = transform(loopNode.getInitializer());\n+        Node testNode;\n+        if (loopNode.getCondition() != null) {\n+            testNode = transform(loopNode.getCondition());\n+        } else {\n+            testNode = newNode(Token.TRUE);\n+        }\n+        Node incrNode = transform(loopNode.getIncrement());\n+        return newNode(\n+                Token.FOR,\n+                initNode,\n+                testNode,\n+                incrNode,\n+                transformBlock(loopNode.getBody())\n+        );\n+    }\n+\n+    // ...\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: class IRFactory is already defined in package com.google.javascript.jscomp.parsing",
    "test_result": "ERROR"
}