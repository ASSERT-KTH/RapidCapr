{
    "patch": "if (boundaries != null) {\n    for (double bound : boundaries[0]) {\n        if (Double.isNaN(bound) || Double.isInfinite(bound)) {\n            throw new NumberIsTooLargeException(bound, 0, false);\n        }\n    }\n    for (double bound : boundaries[1]) {\n        if (Double.isNaN(bound) || Double.isInfinite(bound)) {\n            throw new NumberIsTooLargeException(bound, 0, false);\n        }\n    }\n    for (int i = 0; i < init.length; i++) {\n        double boundaryRange = boundaries[1][i] - boundaries[0][i];\n        if (Double.isNaN(boundaryRange) || Double.isInfinite(boundaryRange) || Math.abs(boundaryRange) > Double.MAX_VALUE / 2) {\n            throw new NumberIsTooLargeException(boundaryRange, 0, false);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..5ba7968ec 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,24 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (boundaries != null) {\n+    for (double bound : boundaries[0]) {\n+        if (Double.isNaN(bound) || Double.isInfinite(bound)) {\n+            throw new NumberIsTooLargeException(bound, 0, false);\n+        }\n+    }\n+    for (double bound : boundaries[1]) {\n+        if (Double.isNaN(bound) || Double.isInfinite(bound)) {\n+            throw new NumberIsTooLargeException(bound, 0, false);\n+        }\n+    }\n+    for (int i = 0; i < init.length; i++) {\n+        double boundaryRange = boundaries[1][i] - boundaries[0][i];\n+        if (Double.isNaN(boundaryRange) || Double.isInfinite(boundaryRange) || Math.abs(boundaryRange) > Double.MAX_VALUE / 2) {\n+            throw new NumberIsTooLargeException(boundaryRange, 0, false);\n+        }\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}