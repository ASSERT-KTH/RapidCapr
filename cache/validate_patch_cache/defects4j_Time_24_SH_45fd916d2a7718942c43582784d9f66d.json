{
    "patch": "            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && e.getIllegalNumberValue().intValue() == 0) {\n                // Treat zero year as a leap year. As documented in DateTimeFieldType.yearOfEra().\n                e.set(DateTimeFieldType.year(), 1);\n                e.prependMessage(\"Setting zero year to one as a result of DateTimeFormatter.ofPattern(...).parseLocalDate(\\\"\\\"), see DateTimeFieldType.yearOfEra() for more details\");\n            } else {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c088bc7d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,12 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.year() && e.getIllegalNumberValue().intValue() == 0) {\n+                // Treat zero year as a leap year. As documented in DateTimeFieldType.yearOfEra().\n+                e.set(DateTimeFieldType.year(), 1);\n+                e.prependMessage(\"Setting zero year to one as a result of DateTimeFormatter.ofPattern(...).parseLocalDate(\\\"\\\"), see DateTimeFieldType.yearOfEra() for more details\");\n+            } else {\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}