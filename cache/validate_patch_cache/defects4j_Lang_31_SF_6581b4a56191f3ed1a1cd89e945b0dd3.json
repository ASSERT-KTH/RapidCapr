{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n    \n    public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int csLength = sequence.length();\n        final int searchLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            final char ch = sequence.charAt(i);\n\n            if (Arrays.binarySearch(searchChars, ch) >= 0) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLast && searchLast > 0) {\n                        final char ch2 = sequence.charAt(i + 1);\n                        for (int j = 1; j < searchLength; j++) {\n                            final char searchChar = searchChars[j];\n                            if (Character.isLowSurrogate(searchChar)) {\n                                if (j == searchLast) {\n                                    return true;\n                                }\n                                if (i + j >= csLast) {\n                                    return false;\n                                }\n                                if (searchChar == sequence.charAt(i + j + 1)) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                } else if (searchLast == 0) {\n                    return true;\n                } else if (i < csLast && searchLength > 1) {\n                    for (int j = 1; j < searchLength; j++) {\n                        final char searchChar = searchChars[j];\n                        if (Character.isLowSurrogate(searchChar)) {\n                            if (ch == searchChars[j - 1] && i < csLast && searchChar == sequence.charAt(i + 1)) {\n                                if (j == searchLast) {\n                                    return true;\n                                }\n                                if (i + j >= csLast) {\n                                    return false;\n                                }\n                                if (sequence.charAt(i + j + 1) == searchChars[j + 1]) {\n                                    return true;\n                                }\n                            }\n                        } else if (ch == searchChar) {\n                            if (j == searchLast) {\n                                return true;\n                            }\n                            if (i + j >= csLength) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n    \n    public static class ArrayUtils {\n        public static boolean isEmpty(final char[] array) {\n            return array == null || array.length == 0;\n        }\n    }    \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..8878e155 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,82 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int csLength = sequence.length();\n+        final int searchLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchLast = searchLength - 1;\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = sequence.charAt(i);\n+\n+            if (Arrays.binarySearch(searchChars, ch) >= 0) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLast && searchLast > 0) {\n+                        final char ch2 = sequence.charAt(i + 1);\n+                        for (int j = 1; j < searchLength; j++) {\n+                            final char searchChar = searchChars[j];\n+                            if (Character.isLowSurrogate(searchChar)) {\n+                                if (j == searchLast) {\n+                                    return true;\n+                                }\n+                                if (i + j >= csLast) {\n+                                    return false;\n+                                }\n+                                if (searchChar == sequence.charAt(i + j + 1)) {\n+                                    return true;\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if (searchLast == 0) {\n+                    return true;\n+                } else if (i < csLast && searchLength > 1) {\n+                    for (int j = 1; j < searchLength; j++) {\n+                        final char searchChar = searchChars[j];\n+                        if (Character.isLowSurrogate(searchChar)) {\n+                            if (ch == searchChars[j - 1] && i < csLast && searchChar == sequence.charAt(i + 1)) {\n+                                if (j == searchLast) {\n+                                    return true;\n+                                }\n+                                if (i + j >= csLast) {\n+                                    return false;\n+                                }\n+                                if (sequence.charAt(i + j + 1) == searchChars[j + 1]) {\n+                                    return true;\n+                                }\n+                            }\n+                        } else if (ch == searchChar) {\n+                            if (j == searchLast) {\n+                                return true;\n+                            }\n+                            if (i + j >= csLength) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+    \n+    public static class ArrayUtils {\n+        public static boolean isEmpty(final char[] array) {\n+            return array == null || array.length == 0;\n+        }\n+    }    \n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}