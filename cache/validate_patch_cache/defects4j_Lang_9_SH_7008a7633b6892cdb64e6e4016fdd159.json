{
    "patch": "if (currentStrategy == null) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nif (currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\nif (nextStrategy != null) {\n    while (patternMatcher.find()) {\n        currentFormatField = nextFormatField;\n        String nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if (currentStrategy != nextStrategy) {\n            currentStrategy = nextStrategy;\n            if (!currentStrategy.addRegex(this, regex)) {\n                break;\n            }\n        } else {\n            if (!currentStrategy.addRegex(this, regex)) {\n                throw new IllegalArgumentException(\"Invalid pattern\");\n            }\n        }\n    }\n}\nstrategies = collector.toArray(new Strategy[collector.size()]);\nparsePattern = Pattern.compile(regex.toString());\ncurrentFormatField = null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..1044f285 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,32 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (currentStrategy == null) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+if (currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+if (nextStrategy != null) {\n+    while (patternMatcher.find()) {\n+        currentFormatField = nextFormatField;\n+        String nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if (currentStrategy != nextStrategy) {\n+            currentStrategy = nextStrategy;\n+            if (!currentStrategy.addRegex(this, regex)) {\n+                break;\n+            }\n+        } else {\n+            if (!currentStrategy.addRegex(this, regex)) {\n+                throw new IllegalArgumentException(\"Invalid pattern\");\n+            }\n+        }\n+    }\n+}\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+parsePattern = Pattern.compile(regex.toString());\n+currentFormatField = null;\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}