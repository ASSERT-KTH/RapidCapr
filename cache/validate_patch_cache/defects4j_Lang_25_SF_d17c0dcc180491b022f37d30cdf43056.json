{
    "patch": "public static String unescape(String str) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '\\\\') {\n            char nextChar = (i == str.length() - 1) ? '\\\\' : str.charAt(i + 1);\n            if (nextChar == '\\\"' || nextChar == '\\\\' || nextChar == '/') {\n                c = nextChar;\n                i++;\n            } else if (nextChar == 'n') {\n                c = '\\n';\n                i++;\n            } else if (nextChar == 'r') {\n                c = '\\r';\n                i++;\n            } else if (nextChar == 't') {\n                c = '\\t';\n                i++;\n            } else if (nextChar == 'b') {\n                c = '\\b';\n                i++;\n            } else if (nextChar == 'f') {\n                c = '\\f';\n                i++;\n            } else if (nextChar >= '0' && nextChar <= '7') {\n                // Octal escape. \\012 => decimal 10\n                String octal = \"\" + nextChar;\n                i++;\n                if (i < str.length() && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                    octal += str.charAt(i);\n                    i++;\n                    if (i < str.length() && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                        octal += str.charAt(i);\n                        i++;\n                    }\n                }\n                sb.append((char) Integer.parseInt(octal, 8));\n                continue;\n            } // else unicode escape.\n            else {\n                if (i > str.length() - 6 || !str.substring(i, i + 6).equals(\"\\\\u00\")) {\n                    throw new IllegalArgumentException(\"Malformed unicode character\");\n                }\n                c = 0;\n                for (int j = 0; j < 4; j++) {\n                    char digit = Character.toLowerCase(str.charAt(i + 2 + j));\n                    int value = (digit >= '0' && digit <= '9') ? digit - '0' : digit - 'a' + 10;\n                    c = (char) (c * 16 + value);\n                }\n                i += 5;\n            }\n        }\n\n        sb.append(c);\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1b8ca024 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,63 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        if (c == '\\\\') {\n+            char nextChar = (i == str.length() - 1) ? '\\\\' : str.charAt(i + 1);\n+            if (nextChar == '\\\"' || nextChar == '\\\\' || nextChar == '/') {\n+                c = nextChar;\n+                i++;\n+            } else if (nextChar == 'n') {\n+                c = '\\n';\n+                i++;\n+            } else if (nextChar == 'r') {\n+                c = '\\r';\n+                i++;\n+            } else if (nextChar == 't') {\n+                c = '\\t';\n+                i++;\n+            } else if (nextChar == 'b') {\n+                c = '\\b';\n+                i++;\n+            } else if (nextChar == 'f') {\n+                c = '\\f';\n+                i++;\n+            } else if (nextChar >= '0' && nextChar <= '7') {\n+                // Octal escape. \\012 => decimal 10\n+                String octal = \"\" + nextChar;\n+                i++;\n+                if (i < str.length() && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                    octal += str.charAt(i);\n+                    i++;\n+                    if (i < str.length() && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                        octal += str.charAt(i);\n+                        i++;\n+                    }\n+                }\n+                sb.append((char) Integer.parseInt(octal, 8));\n+                continue;\n+            } // else unicode escape.\n+            else {\n+                if (i > str.length() - 6 || !str.substring(i, i + 6).equals(\"\\\\u00\")) {\n+                    throw new IllegalArgumentException(\"Malformed unicode character\");\n+                }\n+                c = 0;\n+                for (int j = 0; j < 4; j++) {\n+                    char digit = Character.toLowerCase(str.charAt(i + 2 + j));\n+                    int value = (digit >= '0' && digit <= '9') ? digit - '0' : digit - 'a' + 10;\n+                    c = (char) (c * 16 + value);\n+                }\n+                i += 5;\n+            }\n+        }\n+\n+        sb.append(c);\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}