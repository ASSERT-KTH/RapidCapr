{
    "patch": "public static Iterable<Long> evenFibonacci(long limit) {\n    long a = 1;\n    long b = 1;\n    List<Long> result = new ArrayList<>();\n\n    while (b < limit) {\n        if (b % 2 == 0) {\n            result.add(b);\n        }\n        long temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..738e473a9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Long> evenFibonacci(long limit) {\n+    long a = 1;\n+    long b = 1;\n+    List<Long> result = new ArrayList<>();\n+\n+    while (b < limit) {\n+        if (b % 2 == 0) {\n+            result.add(b);\n+        }\n+        long temp = a + b;\n+        a = b;\n+        b = temp;\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}