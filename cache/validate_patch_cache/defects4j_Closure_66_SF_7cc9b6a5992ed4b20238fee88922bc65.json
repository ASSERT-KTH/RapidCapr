{
    "patch": "public static double getTypedPercent(String jsonString) {\n    try {\n        JSONObject jsonObject = new JSONObject(jsonString);\n        JSONArray array = jsonObject.getJSONArray(\"requests\");\n        double count = 0.0;\n        double typedCount = 0.0;\n        for (int i = 0; i < array.length(); i++) {\n            JSONObject requestObj = array.getJSONObject(i);\n            String type = requestObj.getString(\"type\");\n            Boolean isTyped = requestObj.optBoolean(\"typed\", false);\n            if(type.equals(\"POST\")) {\n                count++;\n                if(isTyped) {\n                    typedCount++;\n                }\n            }\n        }\n        if (count > 0.0) {\n            double percent = (typedCount / count) * 100;\n            return percent;\n        } else {\n            return 0.0;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..dc91230f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    try {\n+        JSONObject jsonObject = new JSONObject(jsonString);\n+        JSONArray array = jsonObject.getJSONArray(\"requests\");\n+        double count = 0.0;\n+        double typedCount = 0.0;\n+        for (int i = 0; i < array.length(); i++) {\n+            JSONObject requestObj = array.getJSONObject(i);\n+            String type = requestObj.getString(\"type\");\n+            Boolean isTyped = requestObj.optBoolean(\"typed\", false);\n+            if(type.equals(\"POST\")) {\n+                count++;\n+                if(isTyped) {\n+                    typedCount++;\n+                }\n+            }\n+        }\n+        if (count > 0.0) {\n+            double percent = (typedCount / count) * 100;\n+            return percent;\n+        } else {\n+            return 0.0;\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}