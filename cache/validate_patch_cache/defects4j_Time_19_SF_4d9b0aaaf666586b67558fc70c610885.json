{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        int initialOffset = getOffset(instantLocal);\n        long instantAdjusted = instantLocal - initialOffset;\n        int offsetAfter = getOffset(instantAdjusted);\n        \n        if (initialOffset != offsetAfter) {\n            // we have a gap or overlap, find the transition instant\n            long instantTransition = (initialOffset < offsetAfter) ?\n                    nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n            int offsetTransition = getOffset(instantTransition);\n            \n            // calculate the remaining offset from local parameter instant\n            // for 2 different scenarios: initial offset is less than or equal to transition offset,\n            // and initial offset is more than transition offset.\n            if (initialOffset < offsetTransition) {\n                if (instantTransition + initialOffset <= instantLocal) {\n                    return initialOffset;\n                }\n                return offsetTransition;\n            } else {\n                if (instantAdjusted + offsetTransition <= instantLocal) {\n                    return offsetTransition;\n                }\n                long prevTransition = previousTransition(instantAdjusted);\n                if (prevTransition >= 0 && instantLocal - prevTransition <= initialOffset - offsetTransition) {\n                    return getOffset(prevTransition);\n                }\n                return initialOffset;\n            }\n        }\n        return initialOffset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..f63f7ab8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,36 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        int initialOffset = getOffset(instantLocal);\n+        long instantAdjusted = instantLocal - initialOffset;\n+        int offsetAfter = getOffset(instantAdjusted);\n+        \n+        if (initialOffset != offsetAfter) {\n+            // we have a gap or overlap, find the transition instant\n+            long instantTransition = (initialOffset < offsetAfter) ?\n+                    nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+            int offsetTransition = getOffset(instantTransition);\n+            \n+            // calculate the remaining offset from local parameter instant\n+            // for 2 different scenarios: initial offset is less than or equal to transition offset,\n+            // and initial offset is more than transition offset.\n+            if (initialOffset < offsetTransition) {\n+                if (instantTransition + initialOffset <= instantLocal) {\n+                    return initialOffset;\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+                return offsetTransition;\n+            } else {\n+                if (instantAdjusted + offsetTransition <= instantLocal) {\n+                    return offsetTransition;\n+                }\n+                long prevTransition = previousTransition(instantAdjusted);\n+                if (prevTransition >= 0 && instantLocal - prevTransition <= initialOffset - offsetTransition) {\n+                    return getOffset(prevTransition);\n                 }\n+                return initialOffset;\n             }\n         }\n-        return offsetAdjusted;\n+        return initialOffset;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}