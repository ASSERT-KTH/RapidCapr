{
    "patch": "                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                    int year = savedFields[i].iValue;\n                    if (year <= 0) {\n                        if (year == 0) {\n                            throw new IllegalFieldValueException(\n                                DateTimeFieldType.weekyear(), Integer.valueOf(year), null, null);\n                        }\n                        year--;\n                    }\n                    int weekOfWeekyear = savedFields[i + 1].iValue;\n                    LocalDate date = new LocalDate(year, 1, 1, iChrono);\n                    int i = parsed.countFields();\n                    while (i < count) {\n                        DurationFieldType fieldType = savedFields[i].iField.getType();\n                        int value = savedFields[i].iValue;\n                        if (fieldType == DateTimeFieldType.monthOfYear()) {\n                            date = date.monthOfYear().setCopy(value);\n                        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n                            date = date.dayOfMonth().setCopy(value);\n                        } else if (fieldType == DateTimeFieldType.dayOfWeek()) {\n                            date = date.dayOfWeek().setCopy(value);\n                        } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n                            date = date.plusWeeks((value - 1) - date.getWeekOfWeekyear());\n                        }\n                        i++;\n                    }\n                    int resolvedWeekyear = date.getWeekyear();\n                    if (resolvedWeekyear != year) {\n                        // If we have passed across a week-year boundary, then use of\n                        // two-digit year parsing is not permitted.\n                        if (savedFields[0].iParsed.length() > 4 &&\n                                savedFields[0].iParsed.charAt(4) == savedFields[0].iParsed.charAt(savedFields[0].iParsed.length() - 1)) {\n                            throw new IllegalFieldValueException(\n                                DateTimeFieldType.weekyear(), Integer.valueOf(resolvedWeekyear), null, null);\n                        }\n                    }\n                    int days = (weekOfWeekyear - 1) * 7 + WEEK_1.getWeekyear(chrono.weekOfWeekyear().getMinimumValue(), resolvedWeekyear);\n                    date = date.plusDays(days);\n                    savedFields[i].set(date.getMillis() - millis, resetFields);\n                    savedFields[i + 1].set(chrono.weekOfWeekyear().getField(date).get(date), resetFields);\n                    break;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bd87f802 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n+                    int year = savedFields[i].iValue;\n+                    if (year <= 0) {\n+                        if (year == 0) {\n+                            throw new IllegalFieldValueException(\n+                                DateTimeFieldType.weekyear(), Integer.valueOf(year), null, null);\n+                        }\n+                        year--;\n+                    }\n+                    int weekOfWeekyear = savedFields[i + 1].iValue;\n+                    LocalDate date = new LocalDate(year, 1, 1, iChrono);\n+                    int i = parsed.countFields();\n+                    while (i < count) {\n+                        DurationFieldType fieldType = savedFields[i].iField.getType();\n+                        int value = savedFields[i].iValue;\n+                        if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                            date = date.monthOfYear().setCopy(value);\n+                        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+                            date = date.dayOfMonth().setCopy(value);\n+                        } else if (fieldType == DateTimeFieldType.dayOfWeek()) {\n+                            date = date.dayOfWeek().setCopy(value);\n+                        } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n+                            date = date.plusWeeks((value - 1) - date.getWeekOfWeekyear());\n+                        }\n+                        i++;\n+                    }\n+                    int resolvedWeekyear = date.getWeekyear();\n+                    if (resolvedWeekyear != year) {\n+                        // If we have passed across a week-year boundary, then use of\n+                        // two-digit year parsing is not permitted.\n+                        if (savedFields[0].iParsed.length() > 4 &&\n+                                savedFields[0].iParsed.charAt(4) == savedFields[0].iParsed.charAt(savedFields[0].iParsed.length() - 1)) {\n+                            throw new IllegalFieldValueException(\n+                                DateTimeFieldType.weekyear(), Integer.valueOf(resolvedWeekyear), null, null);\n+                        }\n+                    }\n+                    int days = (weekOfWeekyear - 1) * 7 + WEEK_1.getWeekyear(chrono.weekOfWeekyear().getMinimumValue(), resolvedWeekyear);\n+                    date = date.plusDays(days);\n+                    savedFields[i].set(date.getMillis() - millis, resetFields);\n+                    savedFields[i + 1].set(chrono.weekOfWeekyear().getField(date).get(date), resetFields);\n+                    break;\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}