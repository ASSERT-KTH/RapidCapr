{
    "patch": "import com.google.javascript.jscomp.CompilerInput;\nimport com.google.javascript.jscomp.JSTypeExpression;\nimport com.google.javascript.jscomp.scope.Scope;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.jstype.Property;\nimport com.google.javascript.rhino.jstype.Property.ReferenceMode;\nimport com.google.javascript.rhino.jstype.TemplatizedType;\nimport com.google.javascript.rhino.jstype.TemplateType;\nimport com.google.javascript.rhino.jstype.UnionType;\n\nimport static com.google.common.base.Preconditions.*;\nimport static com.google.javascript.jscomp.AstFactory.type;\nimport static com.google.javascript.jscomp.TypeCheck.isValidSimpleName;\nimport static com.google.javascript.jscomp.TypeCheck.isEnumElement.getPropName;\nimport static com.google.javascript.rhino.NodeUtil.getEnclosingType;\nimport static java.lang.String.format;\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static java.util.Collections.*;\n\nvoid defineSlot(Node n, Node parent, JSTypeExpression type, boolean inferred) {\n  checkArgument(inferred || type != null);\n\n  boolean shouldDeclareOnGlobalThis = false;\n\n  switch (n.getToken()) {\n    case NAME:\n      switch (parent.getToken()) {\n        case FUNCTION:\n        case VAR:\n        case LET:\n        case CONST:\n        case CATCH:\n        case PARAM_LIST:\n          shouldDeclareOnGlobalThis = scope.isGlobal() && (\n            parent.getToken() == Token.VAR ||\n            parent.getToken() == Token.LET ||\n            parent.getToken() == Token.CONST ||\n            parent.getToken() == Token.FUNCTION);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Parent node not supported: \" + parent);\n      }\n      break;\n    case GETPROP:\n      if (!NodeUtil.isAssignmentOp(parent) && !NodeUtil.isExpressionResult(parent)) {\n        throw new IllegalArgumentException(\"Parent node not supported: \" + parent);\n      }\n      break;\n    default:\n      throw new IllegalArgumentException(\"Node not supported: \" + n);\n  }\n\n  String variableName = n.getQualifiedName();\n  checkArgument(isValidSimpleName(variableName), \"Invalid variable name: %s\", variableName);\n\n  if (scope.isDeclared(variableName, false)) {\n    Var oldVar = scope.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    checkNotNull(input, \"Input for source not found: %s\", sourceName);\n\n    // Evaluate the JSTypeExpression to a JSType object\n    JSType resolvedType = typeRegistry.evaluateTypeExpression(type, scope);\n\n    // Declare the variable using the resolvedType and isTypeInferred flag\n    scope.declare(variableName, n, resolvedType, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName, resolvedType == null\n            ? getNativeType(JSTypeNative.NO_TYPE)\n            : resolvedType, isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, resolvedType, isExtern);\n      }\n    }\n\n    if (scope.isGlobal() && resolvedType instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) resolvedType;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scope.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), input,\n            superClassCtor == null || superClassCtor.getInstanceType()\n                .equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..56bfdeb4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,108 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+import com.google.javascript.jscomp.CompilerInput;\n+import com.google.javascript.jscomp.JSTypeExpression;\n+import com.google.javascript.jscomp.scope.Scope;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.Property;\n+import com.google.javascript.rhino.jstype.Property.ReferenceMode;\n+import com.google.javascript.rhino.jstype.TemplatizedType;\n+import com.google.javascript.rhino.jstype.TemplateType;\n+import com.google.javascript.rhino.jstype.UnionType;\n+\n+import static com.google.common.base.Preconditions.*;\n+import static com.google.javascript.jscomp.AstFactory.type;\n+import static com.google.javascript.jscomp.TypeCheck.isValidSimpleName;\n+import static com.google.javascript.jscomp.TypeCheck.isEnumElement.getPropName;\n+import static com.google.javascript.rhino.NodeUtil.getEnclosingType;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.*;\n+\n+void defineSlot(Node n, Node parent, JSTypeExpression type, boolean inferred) {\n+  checkArgument(inferred || type != null);\n+\n+  boolean shouldDeclareOnGlobalThis = false;\n+\n+  switch (n.getToken()) {\n+    case NAME:\n+      switch (parent.getToken()) {\n+        case FUNCTION:\n+        case VAR:\n+        case LET:\n+        case CONST:\n+        case CATCH:\n+        case PARAM_LIST:\n+          shouldDeclareOnGlobalThis = scope.isGlobal() && (\n+            parent.getToken() == Token.VAR ||\n+            parent.getToken() == Token.LET ||\n+            parent.getToken() == Token.CONST ||\n+            parent.getToken() == Token.FUNCTION);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Parent node not supported: \" + parent);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n+      break;\n+    case GETPROP:\n+      if (!NodeUtil.isAssignmentOp(parent) && !NodeUtil.isExpressionResult(parent)) {\n+        throw new IllegalArgumentException(\"Parent node not supported: \" + parent);\n+      }\n+      break;\n+    default:\n+      throw new IllegalArgumentException(\"Node not supported: \" + n);\n+  }\n+\n+  String variableName = n.getQualifiedName();\n+  checkArgument(isValidSimpleName(variableName), \"Invalid variable name: %s\", variableName);\n+\n+  if (scope.isDeclared(variableName, false)) {\n+    Var oldVar = scope.getVar(variableName);\n+    validator.expectUndeclaredVariable(\n+        sourceName, n, parent, oldVar, variableName, type);\n+  } else {\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    checkNotNull(input, \"Input for source not found: %s\", sourceName);\n+\n+    // Evaluate the JSTypeExpression to a JSType object\n+    JSType resolvedType = typeRegistry.evaluateTypeExpression(type, scope);\n+\n+    // Declare the variable using the resolvedType and isTypeInferred flag\n+    scope.declare(variableName, n, resolvedType, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName, resolvedType == null\n+            ? getNativeType(JSTypeNative.NO_TYPE)\n+            : resolvedType, isExtern);\n       } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+        globalThis.defineDeclaredProperty(variableName, resolvedType, isExtern);\n+      }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    if (scope.isGlobal() && resolvedType instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) resolvedType;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scope.declare(variableName + \".prototype\", n,\n+            fnType.getPrototype(), input,\n+            superClassCtor == null || superClassCtor.getInstanceType()\n+                .equals(getNativeType(JSTypeNative.OBJECT_TYPE)));\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}